#Область ПрограммныйИнтерфейс

// Определяет пункт назначения объекта
//
// Параметры:
//	Объект	- ДокументСсылка.ЗаказКлиента - Объект, пункт назначения которого определяем
//
// Возвращаемое значение:	
//	СправочникСсылка.битПунктыНазначения - Пункт назначения объекта (по умолчанию пустая ссылка)
//
Функция ПунктНазначенияОбъекта(Объект) Экспорт
	Результат = Справочники.битПунктыНазначения.ПустаяСсылка();
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ЗаказРозничногоПокупателя.бг_ПунктНазначения, ЗаказКлиента.бг_ПунктНазначения) КАК бг_ПунктНазначения
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказРозничногоПокупателя
		|		ПО ЗаказКлиента.бг_ЗаказРозничногоПокупателя = ЗаказРозничногоПокупателя.Ссылка
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Объект);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Результат = Выборка.бг_ПунктНазначения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Определяет пункт назначения объекта
//
// Параметры:
//	ПунктыНазначения	- Массив из СправочникСсылка.битПунктыНазначения - пункты назначения, для которых определяем маршрут
//
// Возвращаемое значение:	
//	Строка
//
Функция МаршрутПунктовНазначения(ПунктыНазначения) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Результат = "";
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПунктыНазначения", ПунктыНазначения);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	IsNULL(битПунктыНазначения.Маршрут.Наименование, """") КАК Маршрут
	|ИЗ
	|	Справочник.битПунктыНазначения КАК битПунктыНазначения
	|ГДЕ
	|	битПунктыНазначения.Ссылка В (&ПунктыНазначения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Маршрут";
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		Результат = Результат + ?(ПустаяСтрока(Результат), "", ", ") + Выборка.Маршрут;
	КонецЦикла;                                                                       
	Возврат Результат;
КонецФункции

// Пытается геокодировать координаты для переданного адреса
//
// Параметры:
//	Адрес	- Строка - адрес для геокодирования
//	Широта	- Число - результат геокодирования широта
//	Долгота	- Число - результат геокодирования долгота
//
Процедура ГеокодироватьАдрес(Знач Адрес, Широта, Долгота) Экспорт
	Адрес = КодироватьСтроку(Адрес, СпособКодированияСтроки.КодировкаURL);
	ЯндексГеокодерПараметры = бг_КонстантыПовтИсп.ЗначенияКонстант("ЯндексГеокодерАдресСервиса, ЯндексГеокодерПользователь");
	АдресСервиса = УбратьHTTP(ЯндексГеокодерПараметры.ЯндексГеокодерАдресСервиса);
    АпиКлюч = ЯндексГеокодерПараметры.ЯндексГеокодерПользователь;
	Если ПустаяСтрока(АдресСервиса) Тогда
		ТекстОшибки = НСтр("ru='Не заданы параметры сервиса геокодирования. Обратитесь к администратору'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	СервисГеокодирования = УстановитьСоединение(АдресСервиса);
	HTTPЗапрос = ЗапросGet(АдресСервиса, АпиКлюч, Адрес);
	HTTPОтвет = СервисГеокодирования.Получить(HTTPЗапрос);
	Результат = Неопределено;
	ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
	Если HTTPОтвет.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
		РезультатЗапроса = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Иначе 
		ТекстОшибки = НСтр("ru='Код ошибки: %1.
							|%2'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, HTTPОтвет.КодСостояния, ТелоОтвета);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если РезультатЗапроса.response.GeoObjectCollection.featureMember.Количество() >= 1 Тогда
		ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10, 7);
		ДолготаШиротаСтрока = СокрЛП(РезультатЗапроса.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos);
		ПозПробел = СтрНайти(ДолготаШиротаСтрока, " ");
		Долгота = ТипЧисло.ПривестиЗначение(Лев(ДолготаШиротаСтрока, ПозПробел - 1));
		Широта = ТипЧисло.ПривестиЗначение(Сред(ДолготаШиротаСтрока, ПозПробел + 1));
	Иначе
		ТекстОшибки  = НСтр("ru='Не удалось геокодировать адрес. Возможно некоторые поля адреса запонены некорректно.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры                                  

// Возвращает сформированное полное наименование пункта назначения
//
// Параметры:
//  Клиент - Справочник.Контрагенты
//
// Возвращаемое значение:
//  Строка
//
Функция ПолноеНаименованиеПунктаНазначенияПоДаннымКонтрагента(Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.ГоловнойКонтрагент.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НаименованиеПолное;
	
КонецФункции

// Возвращает структуру с данными записи регистра Менеджеры пунктов назначения,
// в случае отсутсвия записи с переданным в параметрах менеджером,
// создает новую запись
//
// Параметры:
//  ПунктНазначения - Справочник.битПунктыНазначения
//  Менеджер - Справочник.ФизическиеЛица
//
// Возвращаемое значение:
//  Структура
//
Функция НайтиСоздатьЗаписьМенеджераПунктаНазначения(ПунктНазначения, Менеджер) Экспорт
	
	ДанныеЗаписи = РегистрыСведений.бг_МенеджерыПунктовНазначения.НайтиЗаписьМенеджераПунктаНазначения(
					ПунктНазначения, 
					Менеджер);
					
	Если ДанныеЗаписи.Менеджер <> Менеджер Тогда
		
		РегистрыСведений.бг_МенеджерыПунктовНазначения.СоздатьЗаписьМенеджераПунктаНазначения(
			ПунктНазначения,
			Менеджер);
		
	КонецЕсли;
		
	Возврат ДанныеЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УбратьHTTP(АдресСервиса)
	Если Лев(АдресСервиса, 8) = "https://" Тогда
		Результат = Сред(АдресСервиса, 9);
	ИначеЕсли Лев(АдресСервиса, 7) = "http://" Тогда
		Результат = Сред(АдресСервиса, 8);
	Иначе
		Результат = АдресСервиса;
	КонецЕсли;   
	Возврат Результат;
КонецФункции

Функция УстановитьСоединение(Знач АдресСервиса) 
	Поз = СтрНайти(АдресСервиса, "/");
	Если Поз > 0 Тогда
		АдресСервиса = Лев(АдресСервиса, Поз - 1);
	КонецЕсли;
	Попытка
		HTTPСоединение = Новый HTTPСоединение(АдресСервиса);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось установить соединение с сервисом %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, АдресСервиса);
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	Возврат HTTPСоединение;
КонецФункции

Функция ЗапросGet(Знач АдресСервиса, Знач Apikey, Знач Адрес)
	Поз = СтрНайти(АдресСервиса, "/");
	Если Поз > 0 Тогда
		ТекстЗапроса = Сред(АдресСервиса, Поз);
	Иначе
		ТекстЗапроса = "";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "/?apikey=" + Apikey + "&format=json&geocode=" + Адрес;
	Заголовки = Новый Соответствие;
	Возврат Новый HTTPЗапрос(ТекстЗапроса, Заголовки);
КонецФункции

#КонецОбласти
