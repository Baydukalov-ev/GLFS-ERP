
#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(бг_ИдентификаторПользователяMS) Тогда
		бг_ЗаполнитьИдентификаторMS();
	Иначе
		бг_ПроверитьУникальностьИдентификатораMS();
	КонецЕсли;
		
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	бг_ИдентификаторПользователяMS = 0;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_ПроверитьУникальностьИдентификатораMS()

	Если Не ЗначениеЗаполнено(бг_ИдентификаторПользователяMS)
		Или бг_ИдентификаторПользователяMS = бг_МакисимальныйИдентификаторMS() Тогда
		
		Возврат;	
	КонецЕсли;
	
	ИспользованныеИдентификаторыMS = бг_ИспользованныеИдентификаторыMS();
	
	ПараметрыПоиска = Новый Структура("Идентификатор, Использован", бг_ИдентификаторПользователяMS, Истина);
	
	Если ИспользованныеИдентификаторыMS.НайтиСтроки(ПараметрыПоиска).Количество() > 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Идентификатор MS %1 уже используется!'")),
			, // КлючДанных
			"бг_ИдентификаторПользователяMS");
	КонецЕсли;

КонецПроцедуры

Процедура бг_ЗаполнитьИдентификаторMS()
	
	Если ЗначениеЗаполнено(бг_ИдентификаторПользователяMS)
		И бг_ИдентификаторПользователяMS <> бг_МакисимальныйИдентификаторMS() Тогда
		
		Возврат;	
	КонецЕсли;
	
	ИспользованныеИдентификаторыMS = бг_ИспользованныеИдентификаторыMS();
	
	Если ИспользованныеИдентификаторыMS.Количество() > 0 Тогда
		
		Если ИспользованныеИдентификаторыMS[0].Использован Тогда
			ВызватьИсключение НСтр("ru='Необходимо повысить разрядность идентификаторов пользователей MS'");
		КонецЕсли;
		
		бг_ИдентификаторПользователяMS = ИспользованныеИдентификаторыMS[0].Идентификатор;
		
	Иначе
		МинимальныйИдентификаторПользователяMS = бг_МинимальныйИдентификаторMS();
		бг_ИдентификаторПользователяMS = МинимальныйИдентификаторПользователяMS;	
	КонецЕсли;

КонецПроцедуры

Функция бг_ИспользованныеИдентификаторыMS()
	
	ВсеИдентификаторы = Новый ТаблицаЗначений;
	ВсеИдентификаторы.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	Для Счетчик = бг_МинимальныйИдентификаторMS() По бг_МакисимальныйИдентификаторMS() Цикл
		ВсеИдентификаторы.Добавить().Идентификатор = Счетчик;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВсеИдентификаторы.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВсеИдентификаторы
	|ИЗ
	|	&ВсеИдентификаторы КАК ВсеИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеИдентификаторы.Идентификатор КАК Идентификатор,
	|	НЕ Пользователи.бг_ИдентификаторПользователяMS ЕСТЬ NULL КАК Использован,
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	ВсеИдентификаторы КАК ВсеИдентификаторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.бг_ИдентификаторПользователяMS = ВсеИдентификаторы.Идентификатор)
	|			И (Пользователи.Ссылка <> &Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Использован,
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВсеИдентификаторы", ВсеИдентификаторы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция бг_МинимальныйИдентификаторMS()

	Возврат 10000;

КонецФункции

Функция бг_МакисимальныйИдентификаторMS()

	Возврат 99999;

КонецФункции

#КонецОбласти
