#Область ОбработчикиСобытийФормы
&НаСервере
Процедура бг_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	бг_ДобавитьРеквизиты();
	бг_ДобавитьПоля();
	
	бг_ЗаполнитьРеквизиты();
	
	бг_УстановитьВидимостьДоступностьЭлементов();
	бг_ИзменитьЗаголовокРеквизитаПунктНазначения();
	
	бг_ЗаполнитьПлановуюДатуПлатежаИОтсортировать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура бг_ПунктНазначенияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Для Каждого ПунктНазначенияКонтрагента Из ЭтотОбъект.бг_ПунктНазначения Цикл
		Если ПунктНазначенияКонтрагента.Пометка Тогда
			ПунктНазначенияКонтрагента.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	бг_ЗаполнитьТаблицуПоРасчетамСПартнерами();
	РассчитатьСуммуПлатежей();
КонецПроцедуры

&НаКлиенте
Процедура бг_ДоговорыКонтрагентаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Для Каждого ДоговорКонтрагента Из ЭтотОбъект.бг_ДоговорыКонтрагента Цикл
		Если ДоговорКонтрагента.Пометка Тогда
			ДоговорКонтрагента.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	бг_ЗаполнитьТаблицуПоРасчетамСПартнерами();
	РассчитатьСуммуПлатежей();
КонецПроцедуры

&НаКлиенте
Процедура бг_ПунктНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    ОповещениеПослеОтметкиЭлементов = Новый ОписаниеОповещения(
        "бг_ПослеОтметкиЭлементовПунктовНазначений", ЭтотОбъект);	
 
    ЭтотОбъект.бг_ПунктНазначения.ПоказатьОтметкуЭлементов(
        ОповещениеПослеОтметкиЭлементов,
        НСтр("ru = 'Выберите пункты назначений контрагента'"));
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ДоговорыКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
    ОповещениеПослеОтметкиЭлементов = Новый ОписаниеОповещения(
        "бг_ПослеОтметкиЭлементовДоговоровКонтрагента", ЭтотОбъект);	
 
    ЭтотОбъект.бг_ДоговорыКонтрагента.ПоказатьОтметкуЭлементов(
        ОповещениеПослеОтметкиЭлементов,
        НСтр("ru = 'Выберите договоры контрагента'"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_ПеренестиВДокументПеред(Команда)
	
	БезПодтверждения = Истина;
	Если бг_НеобходимоПоказыватьЗаполнятьРеквизитыПунктНазначенияИДоговор() 
		И ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		
		БезПодтверждения = СуммаПлатежей = СуммаДокумента Или СуммаДокумента = 0;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
		ЭтаФорма, "бг_ЗакрытьФормуБезПодтверждения", БезПодтверждения);
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ПеренестиВДокументВыполнить")
Процедура бг_ПеренестиВДокументВыполнить()

#Вставка
	Если Не ЭтаФорма["бг_ЗакрытьФормуБезПодтверждения"] Тогда
		бг_ЗадатьВопросПередПереносомВДокумент();
		Возврат;
	КонецЕсли;
#КонецВставки

	ПоместитьПлатежиВХранилище();
	Структура = Новый Структура("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	Структура.Вставить("ХозяйственнаяОперация", ?(ПодборДебиторскойЗадолженности, 
	ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности"),
	ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности")));
	Закрыть(Структура);

	ОповеститьОВыборе(Структура);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Процедура бг_ПодтвердитьПереносВДокумент(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		БезПодтверждения = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			ЭтаФорма, "бг_ЗакрытьФормуБезПодтверждения", БезПодтверждения);
		
		ПеренестиВДокументВыполнить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура бг_ДобавитьРеквизиты()
	
	РеквизитыКДобавлению = Новый Массив;
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ДоговорыКонтрагента",
			Новый ОписаниеТипов("СписокЗначений"), ,
			НСтр("ru = 'Договоры контрагента'")));
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ПунктНазначения",
			Новый ОписаниеТипов("СписокЗначений"), ,
			НСтр("ru = 'Пункты назначения'")));
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_СортировкаПоДатеПлатежа",
			Новый ОписаниеТипов("Булево")));
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ПлановаяДатаПлатежа",
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
			"ТаблицаОстатковРасчетов"));
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ЗакрытьФормуБезПодтверждения",
			Новый ОписаниеТипов("Булево")));
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьРеквизитыНаФорму(ЭтаФорма, РеквизитыКДобавлению);
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПоля()

	ГруппаДоговорПунктНазначения = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
							ЭтотОбъект,
							"бг_ГруппаДоговорПунктНазначения",
							,
							,
							Элементы.ТаблицаОстатковРасчетов);
	ГруппаДоговорПунктНазначения.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
    ГруппаДоговорПунктНазначения.ОтображатьЗаголовок = Ложь;
	
	ЭлементДоговорыКонтрагента = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ЭлементДоговорыКонтрагента",
							Элементы.бг_ГруппаДоговорПунктНазначения,
							"бг_ДоговорыКонтрагента");
	ЭлементДоговорыКонтрагента.КнопкаОчистки = Истина;
	ЭлементДоговорыКонтрагента.КнопкаВыпадающегоСписка = Ложь;
	ЭлементДоговорыКонтрагента.УстановитьДействие("Очистка", "бг_ДоговорыКонтрагентаОчистка");
	ЭлементДоговорыКонтрагента.УстановитьДействие("НачалоВыбора", "бг_ДоговорыКонтрагентаНачалоВыбора");
	
	ЭлементПунктНазначения = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ЭлементПунктНазначения",
							Элементы.бг_ГруппаДоговорПунктНазначения,
							"бг_ПунктНазначения");
	ЭлементПунктНазначения.КнопкаОчистки = Истина;
	ЭлементПунктНазначения.КнопкаВыпадающегоСписка = Ложь;
	ЭлементПунктНазначения.УстановитьДействие("Очистка", "бг_ПунктНазначенияОчистка");
	ЭлементПунктНазначения.УстановитьДействие("НачалоВыбора", "бг_ПунктНазначенияНачалоВыбора");
	
	НовыйЭлемент = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"ТаблицаОстатковРасчетовбг_ПлановаяДатаПлатежа",
		Элементы.ТаблицаОстатковРасчетов,
		"ТаблицаОстатковРасчетов.бг_ПлановаяДатаПлатежа", ,
		Элементы.ТаблицаОстатковРасчетовГруппаСумма);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Плановая дата платежа'");
	
КонецПроцедуры

&НаСервере
Процедура бг_ИзменитьЗаголовокРеквизитаПунктНазначения()
	
	ТипЗначенияОбъекта = ТипЗнч(ОбъектСсылка);
	Если ТипЗначенияОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ТекстЗаголовка = НСтр("ru = 'Пункты погрузки'");
	ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		ТекстЗаголовка = НСтр("ru = 'Пункты погрузки/назначения'");
	Иначе
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "бг_ЭлементПунктНазначения", "Заголовок", ТекстЗаголовка);

КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьРеквизиты()
	
	СортироватьПоДатеПлатежа = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"ВБанковскихДокументахПодбиратьОбъектыРасчетовВПорядкеПлановойДатыПлатежа", Организация);
	ЭтотОбъект["бг_СортировкаПоДатеПлатежа"] = СортироватьПоДатеПлатежа = Истина;
	
	Если бг_НеобходимоПоказыватьЗаполнятьРеквизитыПунктНазначенияИДоговор() Тогда
		бг_ЗаполнитьПунктыНазначений();
		бг_ЗаполнитьДоговорыКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция бг_НеобходимоПоказыватьЗаполнятьРеквизитыПунктНазначенияИДоговор()
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не бг_КонстантыПовтИсп.ЗначениеКонстанты(
			"ИспользованиеДопОтборовПоПоступлениюСписаниюДС", Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТипЗначенияОбъекта = ТипЗнч(ОбъектСсылка);
	Если ТипЗначенияОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		Или ТипЗначенияОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ТипОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, "ХозяйственнаяОперация");
		Результат = ТипОперацииДокумента = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
			Или ТипОперацииДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		
	Иначе
		
		Результат = ТипЗначенияОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности");
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура бг_УстановитьВидимостьДоступностьЭлементов()
	
	Если Элементы.Найти("бг_ГруппаДоговорПунктНазначения") <> Неопределено Тогда
		Элементы.бг_ГруппаДоговорПунктНазначения.Видимость = бг_НеобходимоПоказыватьЗаполнятьРеквизитыПунктНазначенияИДоговор();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ТаблицаОстатковРасчетовбг_ПлановаяДатаПлатежа",
		"Видимость",
		ЭтотОбъект["бг_СортировкаПоДатеПлатежа"]);
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьТаблицуПоРасчетамСПартнерами()
	
	//заполняем таблицу по расчетам типовым методом
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		СтрокаТаблицы.Выбран = Ложь;
	КонецЦикла;
	
	ТаблицаОбъектовРасчетовПослеОтборов = бг_ТаблицаОбъектовРасчетовПослеОтборов();
	
	бг_ОставитьПодходящиеОбъектыРасчета(ТаблицаОбъектовРасчетовПослеОтборов);
	
	бг_ЗаполнитьПлановуюДатуПлатежаИОтсортировать();
	
	бг_ВыполнитьРаспределениеСуммыДокументаПоОбъектамРасчета();
	
КонецПроцедуры

&НаСервере
Функция бг_ТекстЗапросаОбъектовРасчета()
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОстатковРасчетов.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ТаблицаРасчетов
	|ИЗ
	|	&ТаблицаОстатковРасчетов КАК ТаблицаОстатковРасчетов
	|;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаРасчетов.ОбъектРасчетов КАК ОбъектРасчетов
	|ИЗ
	|	ТаблицаРасчетов КАК ТаблицаРасчетов
	|ГДЕ
	|	ИСТИНА";
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция бг_ТаблицаОбъектовРасчетовПослеОтборов()
	
	//установим отбор только по подходящим документам расчетов
	Запрос = Новый Запрос();
	Запрос.Текст = бг_ТекстЗапросаОбъектовРасчета();
	Запрос.УстановитьПараметр("ТаблицаОстатковРасчетов", ТаблицаОстатковРасчетов.Выгрузить(, "ОбъектРасчетов"));
	
	ТекстЗапросаУсловиеПунктНазначения = "";
	ТекстЗапросаУсловиеДоговор = "";
	ПунктыНазначенияКонтрагента = Новый Массив;
	ДоговорыКонтрагента = Новый Массив;
	
	Для Каждого ПунктНазначенияКонтрагента Из ЭтотОбъект["бг_ПунктНазначения"] Цикл
		Если ПунктНазначенияКонтрагента.Пометка Тогда
			ПунктыНазначенияКонтрагента.Добавить(ПунктНазначенияКонтрагента.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ПунктыНазначенияКонтрагента.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("МассивПунктовНазначения", ПунктыНазначенияКонтрагента);
		
		ТипЗначенияОбъекта = ТипЗнч(ЭтотОбъект.ОбъектСсылка);
		Если ТипЗначенияОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
			ТекстЗапросаУсловиеПунктНазначения = 
			"	И ЕСТЬNULL(ТаблицаРасчетов.ОбъектРасчетов.Объект.бг_ПунктНазначения, ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)) В(&МассивПунктовНазначения)
			|";
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			ТекстЗапросаУсловиеПунктНазначения = 
			"	И ЕСТЬNULL(ТаблицаРасчетов.ОбъектРасчетов.Объект.бг_ПунктПогрузки, ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)) В(&МассивПунктовНазначения)
			|";
		ИначеЕсли ТипЗначенияОбъекта = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
			ТекстЗапросаУсловиеПунктНазначения = 
			"	И (ЕСТЬNULL(ТаблицаРасчетов.ОбъектРасчетов.Объект.бг_ПунктНазначения, ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)) В(&МассивПунктовНазначения)
			|		ИЛИ ЕСТЬNULL(ТаблицаРасчетов.ОбъектРасчетов.Объект.бг_ПунктПогрузки, ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)) В(&МассивПунктовНазначения))
			|";
		Иначе
			ТекстЗапросаУсловиеПунктНазначения = "";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ДоговорКонтрагента Из ЭтотОбъект["бг_ДоговорыКонтрагента"] Цикл
		Если ДоговорКонтрагента.Пометка Тогда
			ДоговорыКонтрагента.Добавить(ДоговорКонтрагента.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ДоговорыКонтрагента.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("МассивДоговоровКонтрагента", ДоговорыКонтрагента);
		ТекстЗапросаУсловиеДоговор = 
		"	И ЕСТЬNULL(ТаблицаРасчетов.ОбъектРасчетов.Объект.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) В(&МассивДоговоровКонтрагента)";
	Иначе
		ТекстЗапросаУсловиеДоговор = "";
	КонецЕсли;
	
	Если Не (ЗначениеЗаполнено(ТекстЗапросаУсловиеПунктНазначения)
		Или ЗначениеЗаполнено(ТекстЗапросаУсловиеДоговор)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаУсловиеПунктНазначения + ТекстЗапросаУсловиеДоговор;
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ТаблицаОстатковРасчетов.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат.Выгрузить();
	
КонецФункции

&НаСервере
Процедура бг_ОставитьПодходящиеОбъектыРасчета(ТаблицаОбъектовРасчетовПослеОтборов)
	
	Если ТаблицаОстатковРасчетов.Количество() = 0 
		Или ТаблицаОбъектовРасчетовПослеОтборов = Неопределено 
		Или ТаблицаОбъектовРасчетовПослеОтборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		Если ТаблицаОбъектовРасчетовПослеОтборов.Найти(СтрокаТаблицы.ОбъектРасчетов) = Неопределено Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;	
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаОстатковРасчетов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура бг_ВыполнитьРаспределениеСуммыДокументаПоОбъектамРасчета()
	
	//пересчет аналогично типовому функционалу ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов
	СуммаКРаспределению = СуммаДокумента;

	СоответствиеВалютаКурс = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если Не СтрокаТаблицы.Выбран Тогда
			
			Если СтрокаТаблицы.КОплате <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.КОплате;
				
			ИначеЕсли СтрокаТаблицы.НашДолг <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.НашДолг;
				
			ИначеЕсли СтрокаТаблицы.ДолгПартнера <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.ДолгПартнера;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
				
				Коэффициенты = СоответствиеВалютаКурс.Получить(СтрокаТаблицы.ВалютаВзаиморасчетов);
				Если Коэффициенты = Неопределено Тогда
					Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
						ВалютаДокумента, 
						СтрокаТаблицы.ВалютаВзаиморасчетов,
						?(ДатаДокумента <> '00010101', ДатаДокумента, ТекущаяДатаСеанса()),
						СтрокаТаблицы.Организация);
					СоответствиеВалютаКурс.Вставить(СтрокаТаблицы.ВалютаВзаиморасчетов, Коэффициенты);
				КонецЕсли;
					
				СтрокаТаблицы.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, СтрокаТаблицы.Сумма / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаКРаспределению > 0 Тогда
			
			СтрокаТаблицы.Выбран = Истина;
			Если СтрокаТаблицы.Сумма > СуммаКРаспределению Тогда
				СтрокаТаблицы.Сумма = СуммаКРаспределению;
			КонецЕсли;
			СуммаКРаспределению = СуммаКРаспределению - СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьПунктыНазначений()
	ПунктыНазначенийКонтрагента = Неопределено;
	Если ЭтотОбъект.бг_ПунктНазначения.Количество() = 0 Тогда
		ПунктыНазначенийКонтрагента = бг_ПунктыНазначенияКонтрагента(Контрагент);
	КонецЕсли;
	Если ПунктыНазначенийКонтрагента <> Неопределено Тогда
		Для Каждого ПунктНазначенияКонтрагента Из ПунктыНазначенийКонтрагента Цикл
			ЭтотОбъект.бг_ПунктНазначения.Добавить(ПунктНазначенияКонтрагента);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьДоговорыКонтрагента()
	ДоговорыКонтрагента = Неопределено;
	Если ЭтотОбъект.бг_ДоговорыКонтрагента.Количество() = 0 Тогда
		ДоговорыКонтрагента = бг_ДоговорыКонтрагента(Контрагент);
	КонецЕсли;
	Если ДоговорыКонтрагента <> Неопределено Тогда
		Для Каждого ДоговорКонтрагента Из ДоговорыКонтрагента Цикл
			ЭтотОбъект.бг_ДоговорыКонтрагента.Добавить(ДоговорКонтрагента);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция бг_ПунктыНазначенияКонтрагента(Контрагент)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПунктыНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.битПунктыНазначения КАК ПунктыНазначения
	|ГДЕ
	|	(ПунктыНазначения.Клиент = &Клиент
	|			ИЛИ ПунктыНазначения.Клиент.ГоловнойКонтрагент = &Клиент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПунктыНазначения.Код УБЫВ";
	Запрос.УстановитьПараметр("Клиент", Контрагент);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ДоговорыКонтрагента(Контрагент)
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(ДоговорыКонтрагентов.Контрагент = &Контрагент
	|			ИЛИ ДоговорыКонтрагентов.Контрагент.ГоловнойКонтрагент = &Контрагент)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.ДатаНачалаДействия УБЫВ";
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура бг_ПослеОтметкиЭлементовПунктовНазначений(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	бг_ЗаполнитьТаблицуПоРасчетамСПартнерами();
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПослеОтметкиЭлементовДоговоровКонтрагента(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	бг_ЗаполнитьТаблицуПоРасчетамСПартнерами();
	РассчитатьСуммуПлатежей();
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьПлановуюДатуПлатежаИОтсортировать()
	
	Если Не ЭтотОбъект["бг_СортировкаПоДатеПлатежа"] Тогда
		Возврат;
	КонецЕсли;
	
	ВременнаяТаблицаОстатковРасчетов = РеквизитФормыВЗначение("ТаблицаОстатковРасчетов");
	ВзаиморасчетыСервер.бг_ЗаполнитьПлановуюДатуПлатежаВТаблицеОстатковРасчетов(ВременнаяТаблицаОстатковРасчетов);
	ВременнаяТаблицаОстатковРасчетов.Сортировать("бг_ПлановаяДатаПлатежа");
	ЗначениеВРеквизитФормы(ВременнаяТаблицаОстатковРасчетов, "ТаблицаОстатковРасчетов");
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ЗадатьВопросПередПереносомВДокумент()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("бг_ПодтвердитьПереносВДокумент", ЭтаФорма);
	
	Разница = СуммаДокумента - СуммаПлатежей;
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Сумма выбранных платежей отличается от суммы документа на %1.
								|Перенести в документ?'"), Разница);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	
КонецПроцедуры

#КонецОбласти
