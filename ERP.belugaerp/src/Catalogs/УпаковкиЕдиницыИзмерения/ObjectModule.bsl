#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&Перед("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	
	бг_КодЕК_Номенклатуры = "";
	бг_ИдентификаторЕКНоменклатуры = "";
	бг_Проверен = Ложь; 
	бг_ДатаДобавления = Неопределено;
	бг_ДатаВыбытия = Неопределено; 
	
	бг_УстановитьСтандартныеЕдиницыИзмерения();
	
КонецПроцедуры

&Перед("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;  
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		бг_ЗаполнитьРеквизитыНСИ();
		бг_СброситьПроверенность();
		бг_ПроверитьРодителя(Отказ);
		бг_ВыгрузитьСвязанныеУпаковки();
		бг_ПроверитьУникальностьКодаЕКНоменклатуры(Отказ);
		бг_УстановитьСтандартныеЕдиницыИзмерения();
		бг_ЗаполнитьДатуДобавления();
		бг_ОпределитьНеобходимостьВыгружатьСвязаннуюНоменклатуру();
		бг_ОчиститьТипЕдиницыИзмерения();
	ИначеЕсли Владелец = Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения Тогда
		бг_ПроверитьТипЕдиницыИзмерения(Отказ);
	Иначе
		// NOP
	КонецЕсли;
		
КонецПроцедуры   

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		РегистрыСведений.бг_ХарактеристикиУпаковокПаллет.СинхронизироватьХарактеристикиУпаковокПаллет(ЭтотОбъект);
	КонецЕсли;
	
	бг_ТипЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "бг_ТипЕдиницыИзмерения");
	
	// Заполнение веса брутто паллеты
	Если ДополнительныеСвойства.Свойство("бг_ПересчитатьВесПаллет")
		И ДополнительныеСвойства.бг_ПересчитатьВесПаллет Тогда
		бг_ЗаполнитьВесПодчиненныхПаллет(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_ЗаполнитьРеквизитыНСИ()
	
	бг_ТипЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "бг_ТипЕдиницыИзмерения");
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ВидНоменклатуры.бг_ОграничиватьДобавлениеИзменениеНоменклатуры") = Истина Тогда
		
		Если бг_ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Коробка Тогда
			
			Если Не ЗначениеЗаполнено(бг_КодЕК_Номенклатуры) Тогда
				Максимальныйбг_КодЕК_Номенклатуры = бг_ОбщегоНазначенияСервер.МаксимальноеЗначениеСтроковогоРеквизитаСправочника(
					Ссылка, "УпаковкиЕдиницыИзмерения", "бг_КодЕК_Номенклатуры");
				бг_КодЕК_Номенклатуры = бг_ОбщегоНазначенияСервер.ИнкрементированнаяСтрока(
					Максимальныйбг_КодЕК_Номенклатуры,
					Метаданные.Справочники.УпаковкиЕдиницыИзмерения.Реквизиты.бг_КодЕК_Номенклатуры.Тип.КвалификаторыСтроки.Длина);
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения") =
			Перечисления.бг_ТипыЕдиницИзмерения.Коробка Тогда
			бг_КодЕК_Номенклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "бг_КодЕК_Номенклатуры");
		Иначе
			бг_КодЕК_Номенклатуры = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если бг_ТипЕдиницыИзмерения <> Перечисления.бг_ТипыЕдиницИзмерения.Паллета Тогда
		бг_КоличествоМестВСлое = 0;
		бг_КоличествоСлоевВПаллете = 0;
	КонецЕсли;
	
	// Заполнение веса брутто паллеты
	Если бг_ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Паллета Тогда
		бг_ЗаполнитьВесБруттоПаллеты(ЭтотОбъект, Родитель);
	ИначеЕсли бг_ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Коробка
		И бг_ВесКоробкиИзменен() Тогда
		ДополнительныеСвойства.Вставить("бг_ПересчитатьВесПаллет", Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ВесКоробкиИзменен()
	Если ЭтоНовый() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВесКоробки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Вес");
	Возврат ВесКоробки <> Вес;
КонецФункции

Процедура бг_ЗаполнитьВесБруттоПаллеты(Паллета, Коробка)
	Если ТипЗнч(Коробка) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения") Тогда
		ВесКоробки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Коробка, "Вес");
	Иначе
		ВесКоробки = Коробка.Вес;
	КонецЕсли;
	
	Паллета.Вес = ВесКоробки * Паллета.КоличествоУпаковок;
КонецПроцедуры

Процедура бг_ЗаполнитьВесПодчиненныхПаллет(Коробка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Родитель = &Коробка
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)";
	Запрос.УстановитьПараметр("Коробка", Коробка.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		ПаллетаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПаллетаОбъект.Записать(); // Вес паллеты перезаполнится при перезаписи
	КонецЦикла;
КонецПроцедуры

Процедура бг_СброситьПроверенность()
	
	Если Пользователи.РолиДоступны("бг_ДобавлениеИзменениеНоменклатурыАдминистратор") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		бг_Проверен = Ложь;
	Иначе
		
		Если бг_ЕстьИзмененияПроверяемыхРеквизитов(Ссылка) Тогда
			бг_Проверен = Ложь;
		Иначе
			бг_Проверен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "бг_Проверен");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ЕстьИзмененияПроверяемыхРеквизитов(ОбъектСравнения)
	
	Реквизиты = бг_ПроверяемыеРеквизиты();
	ЗначенияРеквизитовСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если ЭтотОбъект[Реквизит] <> ЗначенияРеквизитовСсылки[Реквизит] Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура бг_ПроверитьРодителя(Отказ)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ВидНоменклатуры.бг_ОграничиватьДобавлениеИзменениеНоменклатуры") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТипЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "бг_ТипЕдиницыИзмерения");
	
	Если ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Коробка Тогда
		
		Если Родитель = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Родитель") <> Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения") 
				<> Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Коробка должна быть подчинена первой упаковке (бутылке)'"), , , , Отказ);
		КонецЕсли;  
		
	ИначеЕсли ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Паллета Тогда
		
		Если Родитель = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка()
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения") <> Перечисления.бг_ТипыЕдиницИзмерения.Коробка Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Паллета должна быть подчинена коробке'"), , , , Отказ);
		КонецЕсли;   
		
		Если Не Отказ Тогда
			
			ВыборкаПодчиненные = Справочники.УпаковкиЕдиницыИзмерения.ВыбратьИерархически(Родитель, Владелец);
			Если ВыборкаПодчиненные.Следующий() Тогда
				Если ЭтоНовый() Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru='К упаковке Коробка может быть создана только одна упаковка Паллета'"),
						,
						,
						,
						Отказ);
				ИначеЕсли ВыборкаПодчиненные.Ссылка <> Ссылка Тогда
					ОбщегоНазначения.СообщитьПользователю(
						НСтр("ru='К упаковке Коробка может быть создана только одна упаковка Паллета'"),
						,
						,
						,
						Отказ); 
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	  
		
		Если Не Отказ Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|ГДЕ
				|	УпаковкиЕдиницыИзмерения.бг_КоличествоМестВСлое = &бг_КоличествоМестВСлое
				|	И УпаковкиЕдиницыИзмерения.бг_КоличествоСлоевВПаллете = &бг_КоличествоСлоевВПаллете
				|	И УпаковкиЕдиницыИзмерения.КоличествоУпаковок = &КоличествоУпаковок
				|	И УпаковкиЕдиницыИзмерения.Знаменатель = &Знаменатель
				|	И УпаковкиЕдиницыИзмерения.Ссылка <> &Ссылка
				|	И УпаковкиЕдиницыИзмерения.Владелец = &Владелец
				|	И УпаковкиЕдиницыИзмерения.Числитель = &Числитель
				|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмерения";
			
			Запрос.УстановитьПараметр("бг_КоличествоМестВСлое", бг_КоличествоМестВСлое);
			Запрос.УстановитьПараметр("бг_КоличествоСлоевВПаллете", бг_КоличествоСлоевВПаллете);
			Запрос.УстановитьПараметр("Знаменатель", Знаменатель);
			Запрос.УстановитьПараметр("Числитель", Числитель);
			Запрос.УстановитьПараметр("КоличествоУпаковок", КоличествоУпаковок);
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("Владелец", Владелец);
			Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Для номенклатуры уже создан набор упаковок с такими вложениями'"),
					,
					,
					,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда
		
		ВыборкаПодчиненные = Справочники.УпаковкиЕдиницыИзмерения.ВыбратьИерархически(, Владелец);
		Пока ВыборкаПодчиненные.Следующий() Цикл 
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаПодчиненные.ЕдиницаИзмерения,
				"бг_ТипЕдиницыИзмерения") = Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда
				Если ЭтоНовый() Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Для одной номенклатуры, может быть только одна бутылка'"), , , , Отказ);
				ИначеЕсли ВыборкаПодчиненные.Ссылка <> Ссылка Тогда
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Для одной номенклатуры, может быть только одна бутылка'"), , , , Отказ); 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Можно добавлять только Коробки, Паллеты или Бутылки'"), , , , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ВыгрузитьСвязанныеУпаковки()
	
	СвязанныеУпаковки = Новый СписокЗначений;
	
	Если ЭтоНовый() Тогда
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
			|ГДЕ
			|	УпаковкиЕдиницыИзмерения.Ссылка = &Ссылка
			|ИТОГИ ПО
			|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("Ссылка", Родитель);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					СвязанныеУпаковки.Добавить(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Ссылки = Новый Массив;
		Ссылки.Добавить(Ссылка);
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			Ссылки.Добавить(Родитель);
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Ссылка В(&Ссылка)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Ссылки);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Ссылка <> Ссылка
				И СвязанныеУпаковки.НайтиПоЗначению(Выборка.Ссылка) = Неопределено Тогда
				
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					СвязанныеУпаковки.Добавить(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Ссылка В ИЕРАРХИИ(&Ссылка)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Ссылка <> Ссылка Тогда
				
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					СвязанныеУпаковки.Добавить(Выборка.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СвязаннаяУпаковка Из СвязанныеУпаковки Цикл
		бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(СвязаннаяУпаковка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура бг_ПроверитьУникальностьКодаЕКНоменклатуры(Отказ)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ВидНоменклатуры.бг_ОграничиватьДобавлениеИзменениеНоменклатуры") <> Истина 
		Или Не ЗначениеЗаполнено(бг_КодЕК_Номенклатуры) Тогда
		Возврат;
	КонецЕсли;  
	
	Если Не Отказ Тогда  
		
		Запрос 		 = Новый Запрос;
		Запрос.Текст = 
				"ВЫБРАТЬ
				|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
				|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец
				|ИЗ
				|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
				|ГДЕ
				|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &бг_КодЕК_Номенклатуры
				|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмерения
				|	И УпаковкиЕдиницыИзмерения.Ссылка <> &Ссылка
				|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Ссылка"			  	 , Ссылка);
		Запрос.УстановитьПараметр("бг_КодЕК_Номенклатуры", бг_КодЕК_Номенклатуры);
		Запрос.УстановитьПараметр("ЕдиницаИзмерения" 	 , ЕдиницаИзмерения);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
				
		Пока Выборка.Следующий() Цикл
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Упаковка с таким кодом существует у номенклатуры %1'"), Выборка.Владелец),
				,
				,
				,
				Отказ);
		КонецЦикла;
						
	КонецЕсли;	
	
КонецПроцедуры

Процедура бг_УстановитьСтандартныеЕдиницыИзмерения()
	
	Если Не ЗначениеЗаполнено(ГлубинаЕдиницаИзмерения)
		Или Не ЗначениеЗаполнено(ШиринаЕдиницаИзмерения)
		Или Не ЗначениеЗаполнено(ВысотаЕдиницаИзмерения) Тогда   
		
		ЕдиницаДлины = Константы.ЕдиницаИзмеренияДлины.Получить();
		
		ГлубинаЕдиницаИзмерения = ЕдиницаДлины;
		ШиринаЕдиницаИзмерения  = ЕдиницаДлины;
		ВысотаЕдиницаИзмерения  = ЕдиницаДлины;
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ОбъемЕдиницаИзмерения) Тогда 
		ОбъемЕдиницаИзмерения = Константы.ЕдиницаИзмеренияОбъема.Получить();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВесЕдиницаИзмерения) Тогда 
		ВесЕдиницаИзмерения = Константы.ЕдиницаИзмеренияВеса.Получить();
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьДатуДобавления()
	
	Если ЭтоНовый() Тогда
	
		ОграничиватьДобавлениеИзменениеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Владелец, 
			"ВидНоменклатуры.бг_ОграничиватьДобавлениеИзменениеНоменклатуры");
		
		Если ОграничиватьДобавлениеИзменениеНоменклатуры = Истина Тогда
			бг_ДатаДобавления = ТекущаяДатаСеанса();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура бг_ОпределитьНеобходимостьВыгружатьСвязаннуюНоменклатуру()
	
	НеобходимоВыгружатьСвязаннуюНоменклатуру = Ложь;
	
	Если ТипЗнч(Владелец) <> Тип("СправочникСсылка.Номенклатура") Тогда
		ДополнительныеСвойства.Вставить(
			"бг_НеобходимоВыгружатьСвязаннуюНоменклатуру",
			НеобходимоВыгружатьСвязаннуюНоменклатуру);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда

		РеквизитыУпаковокВыгружаемыеСНоменклатурой = бг_УпаковкиЕдиницыИзмеренияИнтеграция.РеквизитыУпаковокВыгружаемыеСНоменклатурой();
		
		СтарыеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка,
			Новый ФиксированныйМассив(РеквизитыУпаковокВыгружаемыеСНоменклатурой));
			
		Для каждого ИмяРеквизита Из РеквизитыУпаковокВыгружаемыеСНоменклатурой Цикл
			Если СтарыеЗначенияРеквизитов[ИмяРеквизита] <> ЭтотОбъект[ИмяРеквизита] Тогда
				НеобходимоВыгружатьСвязаннуюНоменклатуру = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		НеобходимоВыгружатьСвязаннуюНоменклатуру = Истина;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(
		"бг_НеобходимоВыгружатьСвязаннуюНоменклатуру",
		НеобходимоВыгружатьСвязаннуюНоменклатуру);

КонецПроцедуры

Функция бг_ПроверяемыеРеквизиты()
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	ПроверяемыеРеквизиты.Добавить("ЕдиницаИзмерения");
	ПроверяемыеРеквизиты.Добавить("Вес");
	ПроверяемыеРеквизиты.Добавить("Высота");
	ПроверяемыеРеквизиты.Добавить("Ширина");
	ПроверяемыеРеквизиты.Добавить("Глубина");
	ПроверяемыеРеквизиты.Добавить("бг_КоличествоСлоевВПаллете");
	ПроверяемыеРеквизиты.Добавить("бг_КоличествоМестВСлое");
	
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

Процедура бг_ОчиститьТипЕдиницыИзмерения()

	Если Владелец <> Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения 
		И ЗначениеЗаполнено(бг_ТипЕдиницыИзмерения) Тогда
		
		бг_ТипЕдиницыИзмерения = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура бг_ПроверитьТипЕдиницыИзмерения(Отказ)
	
	Если бг_ПроверкаТипаЕдиницыИзмеренияНеТребуется() Тогда
		Возврат;
	КонецЕсли;
	
	БазовыеЕдиницыИзмеренияПаллетизации = бг_УпаковкиЕдиницыИзмерения.БазовыеЕдиницыИзмеренияПаллетизации();
	
	ДанныеБазовойЕдиницыИзмерения = БазовыеЕдиницыИзмеренияПаллетизации.Найти(
		бг_ТипЕдиницыИзмерения,
		"ТипЕдиницыИзмерения");
		
	Если ДанныеБазовойЕдиницыИзмерения <> Неопределено
		И ДанныеБазовойЕдиницыИзмерения.Упаковка <> Ссылка Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Единица измерения с типом ""%1"" уже введена, дубли недопустимы.'"), 
				бг_ТипЕдиницыИзмерения),,,,
			Отказ);
	КонецЕсли;

КонецПроцедуры

Функция бг_ПроверкаТипаЕдиницыИзмеренияНеТребуется()

	ПроверкаНеТребуется = Не ЗначениеЗаполнено(бг_ТипЕдиницыИзмерения)
		Или бг_ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Бутылка
		Или Владелец <> Справочники.НаборыУпаковок.БазовыеЕдиницыИзмерения;
		
	Возврат Не ПроверкаНеТребуется;

КонецФункции

#КонецОбласти

#КонецЕсли
