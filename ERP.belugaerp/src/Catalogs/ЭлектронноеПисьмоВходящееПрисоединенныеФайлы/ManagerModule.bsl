
#Область ПрограммныйИнтерфейс

// Интерфейс для отложенной обработки
//
// Параметры:
//   ПрисоединенныйФайл - СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов, Неопределено - вариант обработки
//   Отказ - Булево - отказ от обработки
//
Процедура бг_ОтложеннаяОбработкаОбъекта(ПрисоединенныйФайл, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОбработатьПрисоединенныйФайлПисьма Тогда
		бг_ОбработатьВложениеВходящегоПисьма(ПрисоединенныйФайл);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_ОбработатьВложениеВходящегоПисьма(ПрисоединенныйФайл)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СодержаниеВложения = СодержаниеВложенияПисьма(ПрисоединенныйФайл);
	
	ОбъектXDTO = бг_ОбъектXDTOИзСтрокиXML(СодержаниеВложения);
	Если ОбъектXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если бг_ТребуетсяСоздаватьЗаказПоставщику(ОбъектXDTO) Тогда
		бг_СоздатьЗаказПоставщикуИзОбъектаXDTO(ОбъектXDTO, ПрисоединенныйФайл);	
	ИначеЕсли бг_ТребуетсяСоздаватьЗаявкуКлиента(ОбъектXDTO) Тогда
		бг_СоздатьЗаявкуКлиента(ОбъектXDTO, ПрисоединенныйФайл);
	КонецЕсли;
	
КонецПроцедуры 

Функция бг_ОбъектXDTOИзСтрокиXML(СтрокаXML)
	
	ОбъектXDTO = Неопределено;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Исключение
	КонецПопытки;

	Возврат ОбъектXDTO;
	
КонецФункции

#Область СозданиеЗаказовПоставщикам

Процедура бг_СоздатьЗаказПоставщикуИзОбъектаXDTO(ОбъектXDTO, ПрисоединенныйФайл)
	
	ДанныеЗаказаПоставщику = Новый Структура;
	бг_ЗаполнитьШапкуЗаказаПоставщикуИзОбъектаXDTO(ДанныеЗаказаПоставщику, ОбъектXDTO, ПрисоединенныйФайл);
	ДанныеЗаказаПоставщику.Вставить("Товары", бг_ТаблицаТоваровИзОбъектаXDTO(ОбъектXDTO, ДанныеЗаказаПоставщику));	
	
	ЗаказПоставщикуОбъект = бг_ОбъектДокументаЗаказаПоставщику(ДанныеЗаказаПоставщику);
	ЗаказПоставщикуОбъект.Заполнить(ДанныеЗаказаПоставщику);
	бг_ОбработатьРеквизитыШапкиЗаказаПоставщику(ЗаказПоставщикуОбъект, ДанныеЗаказаПоставщику);	
	бг_ОбработатьСтрокиТаблицыТоваровЗаказаПоставщику(ЗаказПоставщикуОбъект);
	
	Если ТребуетсяЗаписьЗаказаПоставщику(ЗаказПоставщикуОбъект) Тогда
		Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ПроводитьЗаказПоставщикуЗагруженныйИзПочты") Тогда
			ЗаказПоставщикуОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ЗаказПоставщикуОбъект.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция бг_ТребуетсяСоздаватьЗаказПоставщику(ОбъектXDTO) 
	
	СвойстваОбъектаXDTO = ОбъектXDTO.Свойства();
	
	Возврат СвойстваОбъектаXDTO.Получить("IdLoadPoint") <> Неопределено 
		И СвойстваОбъектаXDTO.Получить("RecipientTiker") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("Products") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("Content") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("GUID") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("SFSrcDate") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("DocumentType") <> Неопределено И ОбъектXDTO.DocumentType = "6";
	
КонецФункции

Функция бг_ОбъектДокументаЗаказаПоставщику(ДанныеЗаказаПоставщику)
	
	ЗаказПоставщику = бг_ЗаказПоставщикуПоДаннымДокументаОтгрузки(
		ДанныеЗаказаПоставщику.НомерПоДаннымПоставщика, ДанныеЗаказаПоставщику.ДатаПоДаннымПоставщика);	
	
	ЗаказПоставщикуОбъект = Неопределено;
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ЗаказПоставщикуОбъект = ЗаказПоставщику.ПолучитьОбъект();
	Иначе	
		ЗаказПоставщикуОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
	КонецЕсли;
	
	Возврат ЗаказПоставщикуОбъект;

КонецФункции

Процедура бг_ЗаполнитьШапкуЗаказаПоставщикуИзОбъектаXDTO(ДанныеЗаказаПоставщику, ОбъектXDTO, ПрисоединенныйФайл)
	
	ЖелаемаяДатаПоступления = XMLЗначение(Тип("Дата"), ОбъектXDTO.SFSrcDate);
	ДатаПоступления = КонецДня(ЖелаемаяДатаПоступления) + 1;
	
	ДанныеЗаказаПоставщику.Вставить("Дата", ТекущаяДатаСеанса());
	ДанныеЗаказаПоставщику.Вставить("ЖелаемаяДатаПоступления", ЖелаемаяДатаПоступления);
	ДанныеЗаказаПоставщику.Вставить("ДатаПоступления", ДатаПоступления);
	ДанныеЗаказаПоставщику.Вставить("НомерПоДаннымПоставщика", ОбъектXDTO.Number);
	ДанныеЗаказаПоставщику.Вставить("ДатаПоДаннымПоставщика", XMLЗначение(Тип("Дата"), ОбъектXDTO.Date));
	
	Комментарий = СтрШаблон(
		"Документ загружен из почты. Письмо №: %1. Комментарий: %2", 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ВладелецФайла.Номер"), ОбъектXDTO.Comment);
	ДанныеЗаказаПоставщику.Вставить("Комментарий", Комментарий);
	
	ДанныеПолучателя = бг_ДанныеПолучателяИзДанныхXDTO(ОбъектXDTO);
	ДанныеОтправителя = бг_ДанныеОтправителяИзДанныхXDTO(ОбъектXDTO);
	ДанныеДоговора = бг_ДанныеОсновногоДоговора(ДанныеОтправителя, ДанныеПолучателя);
	
	ДанныеЗаказаПоставщику.Вставить("Организация", ДанныеПолучателя.Организация);
	ДанныеЗаказаПоставщику.Вставить("Склад", ДанныеПолучателя.Склад);
	ДанныеЗаказаПоставщику.Вставить("Контрагент", ДанныеОтправителя.Контрагент);	
	ДанныеЗаказаПоставщику.Вставить("Партнер", ДанныеОтправителя.Партнер);
	ДанныеЗаказаПоставщику.Вставить("бг_ПунктПогрузки", ДанныеОтправителя.бг_ПунктПогрузки);
	ДанныеЗаказаПоставщику.Вставить("Соглашение", ДанныеДоговора.Соглашение);
	ДанныеЗаказаПоставщику.Вставить("Договор", ДанныеДоговора.Договор);

КонецПроцедуры

Функция бг_ДанныеПолучателяИзДанныхXDTO(ОбъектXDTO)
	
	ДанныеПолучателя = Новый Структура("Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеПолучателя, бг_ДанныеОрганизацииЕГАИСПоКоду(ОбъектXDTO.IdUnloadPoint));			
	
	Возврат ДанныеПолучателя;
	
КонецФункции

Функция бг_ДанныеОтправителяИзДанныхXDTO(ОбъектXDTO)
	
	ДанныеОтправителя = Новый Структура("Контрагент, ГоловнойКонтрагент, Партнер, бг_ПунктПогрузки");
	ЗаполнитьЗначенияСвойств(ДанныеОтправителя, бг_ДанныеОрганизацииЕГАИСПоКоду(ОбъектXDTO.IdLoadPoint));
	
	Если ЗначениеЗаполнено(ДанныеОтправителя.ГоловнойКонтрагент) Тогда
		ДанныеОтправителя.Контрагент = ДанныеОтправителя.ГоловнойКонтрагент;
	КонецЕсли;
	
	Возврат ДанныеОтправителя;	
	
КонецФункции

Функция бг_ТаблицаТоваровИзОбъектаXDTO(ОбъектXDTO, ДанныеЗаказаПоставщику)
	
	СписокНоменклатурXDTO = бг_СтрокиНоменклатурыИзОбъектаXDTO(ОбъектXDTO);
	СписокТоваровXDTO = бг_СтрокиТоварыИзОбъектаXDTO(ОбъектXDTO);
	
	ИдентификаторыНоменклатуры = Новый Соответствие;
	Для Каждого НоменклатураXDTO Из СписокНоменклатурXDTO Цикл 
		ИдентификаторыНоменклатуры.Вставить(НоменклатураXDTO.ProductID, НоменклатураXDTO.CodeEK);
	КонецЦикла;
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10, 3);

	ТаблицаТоварыИзФайла = Новый ТаблицаЗначений;
	ТаблицаТоварыИзФайла.Колонки.Добавить("КодЕКНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаТоварыИзФайла.Колонки.Добавить("Количество", ОписаниеТипаЧисло);
	ТаблицаТоварыИзФайла.Колонки.Добавить("Цена", ОписаниеТипаЧисло);
	ТаблицаТоварыИзФайла.Колонки.Добавить("ДатаПоступления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Для Каждого ТоварXDTO Из СписокТоваровXDTO Цикл 
		НоваяСтрокаТовары = ТаблицаТоварыИзФайла.Добавить();
		НоваяСтрокаТовары.КодЕКНоменклатуры = ИдентификаторыНоменклатуры.Получить(ТоварXDTO.ProductID);
		НоваяСтрокаТовары.Количество = ОписаниеТипаЧисло.ПривестиЗначение(ТоварXDTO.Quantity);
		НоваяСтрокаТовары.Цена = ОписаниеТипаЧисло.ПривестиЗначение(ТоварXDTO.Price);
		НоваяСтрокаТовары.ДатаПоступления = ДанныеЗаказаПоставщику.ДатаПоступления;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.КодЕКНоменклатуры КАК КодЕКНоменклатуры,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Цена КАК Цена,
	|	ТаблицаТовары.ДатаПоступления КАК ДатаПоступления
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмеренияКоробки.Владелец КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	втТовары.Количество КАК КоличествоУпаковок,
	|	втТовары.Цена КАК Цена,
	|	втТовары.ДатаПоступления КАК ДатаПоступления,
	|	ЕСТЬNULL(УпаковкиЕдиницыИзмеренияПаллеты.Ссылка, УпаковкиЕдиницыИзмеренияКоробки.Ссылка) КАК бг_УпаковкаПаллета,
	|	втТовары.Количество / ЕСТЬNULL(УпаковкиЕдиницыИзмеренияПаллеты.Числитель, 1) КАК бг_КоличествоПаллет,
	|	втТовары.Количество / ЕСТЬNULL(УпаковкиЕдиницыИзмеренияКоробки.Числитель, 1) КАК бг_КоличествоКоробок
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмеренияКоробки
	|		ПО втТовары.КодЕКНоменклатуры = УпаковкиЕдиницыИзмеренияКоробки.бг_КодЕК_Номенклатуры
	|			И (УпаковкиЕдиницыИзмеренияКоробки.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипУпаковкиКоробка
	|				И НЕ УпаковкиЕдиницыИзмеренияКоробки.ПометкаУдаления)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмеренияПаллеты
	|		ПО втТовары.КодЕКНоменклатуры = УпаковкиЕдиницыИзмеренияПаллеты.бг_КодЕК_Номенклатуры
	|			И (УпаковкиЕдиницыИзмеренияПаллеты.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипУпаковкиПаллета
	|				И НЕ УпаковкиЕдиницыИзмеренияПаллеты.ПометкаУдаления)";	
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТоварыИзФайла);
	Запрос.УстановитьПараметр("ТипУпаковкиКоробка", Перечисления.бг_ТипыЕдиницИзмерения.Коробка);
	Запрос.УстановитьПараметр("ТипУпаковкиПаллета", Перечисления.бг_ТипыЕдиницИзмерения.Паллета);
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТовары Из ТаблицаТовары  Цикл
		СтрокаТовары.бг_КоличествоКоробок = Цел(СтрокаТовары.бг_КоличествоКоробок);
		СтрокаТовары.бг_КоличествоПаллет = Цел(СтрокаТовары.бг_КоличествоПаллет);
	КонецЦикла;
	
	Возврат ТаблицаТовары;
	
КонецФункции

Функция бг_СтрокиНоменклатурыИзОбъектаXDTO(ОбъектXDTO)

	СписокНоменклатурXDTO = Новый Массив;

	Если ОбъектXDTO.Products.Свойства().Получить("Product") = Неопределено Тогда
		Возврат СписокНоменклатурXDTO;
	КонецЕсли;

	Если ТипЗнч(ОбъектXDTO.Products.Product) = Тип("СписокXDTO") Тогда
		Для Каждого СтрокаНоменклатураXDTO Из ОбъектXDTO.Products.Product Цикл 
			СписокНоменклатурXDTO.Добавить(СтрокаНоменклатураXDTO);
		КонецЦикла;
	Иначе
		СписокНоменклатурXDTO.Добавить(ОбъектXDTO.Products.Product);
	КонецЕсли;
	
	Возврат СписокНоменклатурXDTO;
	
КонецФункции

Функция бг_СтрокиТоварыИзОбъектаXDTO(ОбъектXDTO)

	СписокТоваровXDTO = Новый Массив;
	
	Если ТипЗнч(ОбъектXDTO.Content.Line) = Тип("СписокXDTO") Тогда
		Для Каждого СтрокаНоменклатураXDTO Из ОбъектXDTO.Content.Line Цикл 
			СписокТоваровXDTO.Добавить(СтрокаНоменклатураXDTO);
		КонецЦикла;
	Иначе
		СписокТоваровXDTO.Добавить(ОбъектXDTO.Content.Line);
	КонецЕсли;
	
	Возврат СписокТоваровXDTO;
	
КонецФункции

Процедура бг_ОбработатьСтрокиТаблицыТоваровЗаказаПоставщику(ЗаказПоставщикуОбъект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(
		ЗаказПоставщикуОбъект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТовара Из ЗаказПоставщикуОбъект.Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовара, СтруктураДействий, КэшированныеЗначения);
		СтрокаТовара.ДатаПоступления = ЗаказПоставщикуОбъект.ДатаПоступления;
		СтрокаТовара.Склад = ЗаказПоставщикуОбъект.Склад;
	КонецЦикла;
	
КонецПроцедуры

Функция бг_ЗаказПоставщикуПоДаннымДокументаОтгрузки(НомерДокументаОтгрузки, ДатаДокументаОтгрузки)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.НомерПоДаннымПоставщика = &НомерДокументаОтгрузки
		|	И ЗаказПоставщику.ДатаПоДаннымПоставщика = &ДатаДокументаОтгрузки";	
	Запрос.УстановитьПараметр("ДатаДокументаОтгрузки", НачалоДня(ДатаДокументаОтгрузки));
	Запрос.УстановитьПараметр("НомерДокументаОтгрузки", НомерДокументаОтгрузки);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаказПоставщику = Неопределено;
	Если Не РезультатЗапроса.Пустой() Тогда	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	    ВыборкаДетальныеЗаписи.Следующий();
		
		ЗаказПоставщику = ВыборкаДетальныеЗаписи.ЗаказПоставщику;	
	КонецЕсли;
	
	Возврат ЗаказПоставщику;	
	
КонецФункции

Функция бг_ДанныеОрганизацииЕГАИСПоКоду(КодОрганизацииЕГАИС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КлассификаторОрганизацийЕГАИС.Контрагент КАК Контрагент,
		|	Контрагенты.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
		|	КлассификаторОрганизацийЕГАИС.Контрагент КАК Организация,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК Партнер,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК Склад,
		|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС
		|ПОМЕСТИТЬ втДанныеОрганизацииЕГАИС
		|ИЗ
		|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО КлассификаторОрганизацийЕГАИС.Контрагент = Контрагенты.Ссылка
		|ГДЕ
		|	КлассификаторОрганизацийЕГАИС.Код = &КодОрганизацииЕГАИС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДанныеОрганизацииЕГАИС.Контрагент КАК Контрагент,
		|	втДанныеОрганизацииЕГАИС.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
		|	втДанныеОрганизацииЕГАИС.Организация КАК Организация,
		|	втДанныеОрганизацииЕГАИС.Партнер КАК Партнер,
		|	втДанныеОрганизацииЕГАИС.Склад КАК Склад,
		|	ЕСТЬNULL(битПунктыНазначения.Ссылка, ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)) КАК бг_ПунктПогрузки
		|ИЗ
		|	втДанныеОрганизацииЕГАИС КАК втДанныеОрганизацииЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.битПунктыНазначения КАК битПунктыНазначения
		|		ПО втДанныеОрганизацииЕГАИС.Контрагент = битПунктыНазначения.Клиент
		|			И втДанныеОрганизацииЕГАИС.ОрганизацияЕГАИС = битПунктыНазначения.ОрганизацияЕГАИС";	
	Запрос.УстановитьПараметр("КодОрганизацииЕГАИС", КодОрганизацииЕГАИС);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеОрганизацииЕГАИС = Новый Структура(
		"Контрагент, ГоловнойКонтрагент, Партнер, Организация, Склад, бг_ПунктПогрузки");
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		ВыборкаДетальныеЗаписи.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеОрганизацииЕГАИС, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат ДанныеОрганизацииЕГАИС;

КонецФункции

Функция бг_ДанныеОсновногоДоговора(ДанныеОтправителя, ДанныеПолучателя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоглашенияСПоставщиками.Ссылка КАК Соглашение,
		|	СоглашенияСПоставщиками.бг_Договор КАК Договор
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
		|ГДЕ
		|	СоглашенияСПоставщиками.Контрагент = &Контрагент
		|	И СоглашенияСПоставщиками.Партнер = &Партнер
		|	И СоглашенияСПоставщиками.Организация = &Организация
		|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|	И СоглашенияСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|	И НЕ СоглашенияСПоставщиками.ПометкаУдаления
		|	И СоглашенияСПоставщиками.бг_ОсновноеСоглашение";	
	Запрос.УстановитьПараметр("Контрагент", 	ДанныеОтправителя.Контрагент);
	Запрос.УстановитьПараметр("Организация", 	ДанныеПолучателя.Организация);
	Запрос.УстановитьПараметр("Партнер", 		ДанныеОтправителя.Партнер);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеОсновногоДоговора = Новый Структура("Соглашение, Договор");
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеОсновногоДоговора, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат ДанныеОсновногоДоговора;

КонецФункции

Процедура бг_ОбработатьРеквизитыШапкиЗаказаПоставщику(ЗаказПоставщикуОбъект, ДанныеЗаказаПоставщику)

	ЗаказПоставщикуОбъект.Подразделение = Неопределено;
	ЗаказПоставщикуОбъект.Договор = ДанныеЗаказаПоставщику.Договор;
	ЗаказПоставщикуОбъект.ЖелаемаяДатаПоступления = ДанныеЗаказаПоставщику.ЖелаемаяДатаПоступления;
	
КонецПроцедуры

Функция СодержаниеВложенияПисьма(ПрисоединенныйФайл)

	ДанныеПрисоединенногоФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПрисоединенныйФайл, "ТекстХранилище");
	
	СодержаниеВложения = ДанныеПрисоединенногоФайла.ТекстХранилище.Получить();
	
	Если Не ЗначениеЗаполнено(СодержаниеВложения) Тогда
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
		СодержаниеВложения = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеФайла);
	КонецЕсли;
	
	Возврат СодержаниеВложения;
	
КонецФункции

Функция ТребуетсяЗаписьЗаказаПоставщику(ЗаказПоставщикуОбъект)
	
	ТребуетсяЗапись = Ложь;
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ПроводитьЗаказПоставщикуЗагруженныйИзПочты") Тогда
		ТребуетсяЗапись = Истина;
	Иначе
		// Перезаписываем, только не проведенные документы, так как они могли быть изменены пользователем
		ТребуетсяЗапись = Не ЗаказПоставщикуОбъект.Проведен;
	КонецЕсли;
	
	Возврат ТребуетсяЗапись;
	
КонецФункции

#КонецОбласти

#Область СозданиеЗаявокКлиентовСобственныхКонтрагентов

Функция бг_ТребуетсяСоздаватьЗаявкуКлиента(ОбъектXDTO) 
	
	СвойстваОбъектаXDTO = ОбъектXDTO.Свойства();
	
	Возврат СвойстваОбъектаXDTO.Получить("RecipientTiker") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("SenderTiker") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("Content") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("GUID") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("Number") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("OrderDate") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("Date") <> Неопределено
		И СвойстваОбъектаXDTO.Получить("DocumentType") <> Неопределено И ОбъектXDTO.DocumentType = "8";
	
КонецФункции

Процедура бг_СоздатьЗаявкуКлиента(ОбъектXDTO, ПрисоединенныйФайл)
	
	ЗаявкаКлиентаОбъект = бг_НайтиСоздатьЗаявкуКлиентаОбъект(ОбъектXDTO);
	
	Статус = ЗаявкаКлиентаОбъект.СтатусЗаявкиКлиентаСобственногоКонтрагента;
	Если Не ЗаявкаКлиентаОбъект.ЭтоНовый()
		И Статус <> Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.КОбработке Тогда
		ШаблонСообщения = 
			НСтр("ru = 'В документе %1 уже установлен статус ""%2"".
			|Повторной загрузка заявки в этом статусе запрещена.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаявкаКлиентаОбъект, Статус);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если бг_ЗаявкаКлиентаВРаботе(ЗаявкаКлиентаОбъект) Тогда
		ШаблонСообщения = 
			НСтр("ru = 'В документе %1 уже есть строки с подтвержденным количеством.
			|Перед повторной загрузкой заявки необходимо очистить подтвержденные количества.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаявкаКлиентаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	бг_ЗаполнитьШапкуЗаявкиКлиента(ЗаявкаКлиентаОбъект, ОбъектXDTO, ПрисоединенныйФайл);
	
	бг_ЗаполнитьТЧТоварыЗаявкиКлиента(ЗаявкаКлиентаОбъект, ОбъектXDTO);
	
	бг_ЗаписатьДокументВИБ(ЗаявкаКлиентаОбъект, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция бг_НайтиСоздатьЗаявкуКлиентаОбъект(ОбъектXDTO)
	
	Попытка
		КлючУникальности = Новый УникальныйИдентификатор(ОбъектXDTO.GUID);
	Исключение
		КлючУникальности = Новый УникальныйИдентификатор();
	КонецПопытки;
	
	СсылкаПоИдентификатору = Документы.битЗаявкаКлиента.ПолучитьСсылку(КлючУникальности);
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаПоИдентификатору) Тогда
		ЗаявкаКлиентаОбъект = СсылкаПоИдентификатору.ПолучитьОбъект();
	Иначе
		СсылкаПоПолямПоиска = бг_НайтиЗаявкуКлиентаПоПолямПоиска(ОбъектXDTO);
		Если ЗначениеЗаполнено(СсылкаПоПолямПоиска) Тогда
			ЗаявкаКлиентаОбъект = СсылкаПоПолямПоиска.ПолучитьОбъект();
		Иначе
			ЗаявкаКлиентаОбъект = Документы.битЗаявкаКлиента.СоздатьДокумент();
			ЗаявкаКлиентаОбъект.УстановитьСсылкуНового(СсылкаПоИдентификатору);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаявкаКлиентаОбъект;
	
КонецФункции

Функция бг_НайтиЗаявкуКлиентаПоПолямПоиска(ОбъектXDTO)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерПоДаннымКлиента", ОбъектXDTO.Number);
	Запрос.УстановитьПараметр("ДатаПоДаннымКлиента", НачалоДня(XMLЗначение(Тип("Дата"), ОбъектXDTO.Date)));
	Запрос.УстановитьПараметр("КодКонтрагента", ОбъектXDTO.SenderTiker);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	битЗаявкаКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.битЗаявкаКлиента КАК битЗаявкаКлиента
	|ГДЕ
	|	битЗаявкаКлиента.НомерПоДаннымКлиента = &НомерПоДаннымКлиента
	|	И битЗаявкаКлиента.ДатаПоДаннымКлиента = &ДатаПоДаннымКлиента
	|	И битЗаявкаКлиента.КодКонтрагента = &КодКонтрагента";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденнаяСсылка = Выборка.Ссылка;
	Иначе
		НайденнаяСсылка = Неопределено;
	КонецЕсли;
	
	Возврат НайденнаяСсылка;
	
КонецФункции

Функция бг_ЗаявкаКлиентаВРаботе(ЗаявкаКлиентаОбъект)
	
	Возврат Не ЗаявкаКлиентаОбъект.ЭтоНовый()
		И ЗаявкаКлиентаОбъект.Проведен 
		И бг_ЕстьПодтвержденноеКоличество(ЗаявкаКлиентаОбъект);
	
КонецФункции

Функция бг_ЕстьПодтвержденноеКоличество(ЗаявкаКлиентаОбъект) 
	
	ЕстьПодтвержденноеКоличество = Ложь;
	Для Каждого СтрокаТЧ Из ЗаявкаКлиентаОбъект.Товары Цикл
		Если СтрокаТЧ.Количество > 0 Тогда
			ЕстьПодтвержденноеКоличество = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьПодтвержденноеКоличество; 
	
КонецФункции

Процедура бг_ЗаполнитьШапкуЗаявкиКлиента(ЗаявкаКлиентаОбъект, ОбъектXDTO, ПрисоединенныйФайл)
	
	ЗаявкаКлиентаОбъект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент;
	ЗаявкаКлиентаОбъект.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.Резервирование;
	ЗаявкаКлиентаОбъект.Дата = XMLЗначение(Тип("Дата"), ОбъектXDTO.Date);
	ЗаявкаКлиентаОбъект.НомерПоДаннымКлиента = ОбъектXDTO.Number;
	ЗаявкаКлиентаОбъект.ДатаПоДаннымКлиента = XMLЗначение(Тип("Дата"), ОбъектXDTO.Date);
	ЗаявкаКлиентаОбъект.ДатаДоставки = XMLЗначение(Тип("Дата"), ОбъектXDTO.OrderDate); 
	ЗаявкаКлиентаОбъект.ПрисоединенныйФайлВходящегоПисьма = ПрисоединенныйФайл;
	ЗаявкаКлиентаОбъект.КодОрганизации = ОбъектXDTO.RecipientTiker;
	ЗаявкаКлиентаОбъект.КодКонтрагента = ОбъектXDTO.SenderTiker;
	ЗаявкаКлиентаОбъект.Ответственный = Неопределено;
	ЗаявкаКлиентаОбъект.СтатусЗаявкиКлиентаСобственногоКонтрагента =
		Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.КОбработке;
	ЗаявкаКлиентаОбъект.ДатаОтмены = '00010101';
	ЗаявкаКлиентаОбъект.ДатаПодтверждения = '00010101';
	ЗаявкаКлиентаОбъект.ГУИДПредзаказаСобственногоКонтрагента = ОбъектXDTO.GUID;
	
	Если ОбъектXDTO.Свойства().Получить("Comment") <> Неопределено Тогда
		ЗаявкаКлиентаОбъект.Комментарий = ОбъектXDTO.Comment;
	КонецЕсли;
	
	Организация = бг_ОбщегоНазначенияСервер.ОрганизацияПоТикеру(ОбъектXDTO.RecipientTiker);
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ШаблонСообщения = НСтр("ru = 'Не найдена организация по тикеру ""%1"".'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектXDTO.RecipientTiker);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ЗаявкаКлиентаОбъект.Организация = Организация;
	
	Контрагент = бг_ОбщегоНазначенияСервер.КонтрагентПоТикеру(ОбъектXDTO.SenderTiker);
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		ШаблонСообщения = НСтр("ru = 'Не найден контрагент по тикеру ""%1"".'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектXDTO.SenderTiker);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ЗаявкаКлиентаОбъект.Контрагент = Контрагент;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЗаявкаКлиентаОбъект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"); 
	КонецЕсли;
	
	ПунктНазначения = бг_ТранспортнаяЛогистика.ПунктНазначенияГрузополучателя(ЗаявкаКлиентаОбъект.Контрагент);
	Если ЗначениеЗаполнено(ПунктНазначения) Тогда
		// Пункт назначения может быть заполнен пользователями интарактивно. 
		// Не будем его очищать в случае повторной загрузки..
		ЗаявкаКлиентаОбъект.ПунктНазначения 
			= бг_ТранспортнаяЛогистика.ПунктНазначенияГрузополучателя(ЗаявкаКлиентаОбъект.Контрагент);
	КонецЕсли;
	
	Если ЗаявкаКлиентаОбъект.ЭтоНовый() Тогда
		// Новый номер устанавливаем после заполнения шапки, чтобы сработали механизмы префиксации.
		ЗаявкаКлиентаОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьТЧТоварыЗаявкиКлиента(ЗаявкаКлиентаОбъект, ОбъектXDTO)
	
	ОписаниеТипаКоличество = бг_ОбщегоНазначенияСервер.ОписаниеТипаКоличество();
	ЗаявкаКлиентаОбъект.Товары.Очистить();
	ТоварыXDTO = бг_СтрокиТоварыИзОбъектаXDTO(ОбъектXDTO);
	МассивОшибокЗаполненияСтрок = Новый Массив;
	Для Каждого ТоварXDTO Из ТоварыXDTO Цикл
		
		LineNumber = СокрЛП(ТоварXDTO.LineNumber);
		ProductID = СокрЛП(ТоварXDTO.ProductID);
		ДлинаПозицииЗаказа = 5;
		ТоварнаяКатегория = бг_ОбщегоНазначенияСервер.ТоварнаяКатегорияПоКодуНСИ(ProductID);
		
		Если ЗначениеЗаполнено(ProductID) 
			И Не ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
			ШаблонОшибки = 
				НСтр("ru = 'LineNumber %1 не загружена. Не найдена товарная категория по коду НСИ ""%2""'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, LineNumber, ProductID);
			МассивОшибокЗаполненияСтрок.Добавить(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ = ЗаявкаКлиентаОбъект.Товары.Добавить();
		
		СтрокаТЧ.КодПозицииЗаказа = Прав("0000" + LineNumber, ДлинаПозицииЗаказа);
		СтрокаТЧ.КодНСИ = ProductID;
		СтрокаТЧ.КоличествоПервичное = ОписаниеТипаКоличество.ПривестиЗначение(ТоварXDTO.Quantity);
		СтрокаТЧ.ТоварнаяКатегория = ТоварнаяКатегория;
	КонецЦикла;
	ЗаявкаКлиентаОбъект.Товары.Сортировать("КодПозицииЗаказа");
	Если МассивОшибокЗаполненияСтрок.Количество() > 0 Тогда
		ТекстСообщения = СтрСоединить(МассивОшибокЗаполненияСтрок, Символы.ПС);
		
		// Не будем вызывать исключения, если не найдена товарная категория по коду.
		// Добавим информацию в протокол загрузки заявки.
		ШаблонПротокола = НСтр("ru = 'При загрузке заявки из XML файла были ошибки:
									 |%1.'");
		ЗаявкаКлиентаОбъект.ПротоколЗагрузки = СтрШаблон(ШаблонПротокола, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура бг_ЗаписатьДокументВИБ(ДокументОбъект, РежимЗаписи)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ШаблонСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось провести документ %1.'");
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ШаблонСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось отменить проведение документа %1.'");
	Иначе
		ШаблонСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось записать документ %1.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ЕстьОшибкиЗаполнения = Ложь;
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Не ДокументОбъект.ПроверитьЗаполнение() Тогда
			ЕстьОшибкиЗаполнения = Истина;
			ТекстОшибкиЗаполнения = 
				НСтр("ru = 'Документ %1 невозможно записать по причине некорректного заполнения.'");
			ТекстСообщения = СтрШаблон(ТекстОшибкиЗаполнения, ДокументОбъект);
			бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		Если Не ЕстьОшибкиЗаполнения Тогда
			ДокументОбъект.Записать(РежимЗаписи);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Если Не ЕстьОшибкиЗаполнения Тогда
			ТекстСообщенияВСлучаеОшибки = СтрШаблон(ШаблонСообщенияВСлучаеОшибки, ДокументОбъект);
			ШаблонСообщения = НСтр("ru = '%1 
				                         |По причине: %2'");
			
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				ТекстСообщенияВСлучаеОшибки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
			бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
