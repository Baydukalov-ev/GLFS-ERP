
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает созданную или найденную по идентификатору константу.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор константы.
//
// Возвращаемое значение:
//   СправочникСсылка.бг_ДополнительныеКонстанты - Ссылка на созданную/найденную константу.
//
Функция НайтиСоздатьКонстанту(Идентификатор) Экспорт
	
	ОписаниеКонстанты = бг_КонстантыПовтИсп.ОписаниеКонстанты(Идентификатор);
	
	Если ОписаниеКонстанты = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Попытка обращения к неизвестной константе %1'"), Идентификатор);
	КонецЕсли;
	
	ДанныеКонстантыБД = ДанныеКонстантыБД(Идентификатор);
	
	Если ДанныеКонстантыБД = Неопределено Тогда
		
		НачатьТранзакцию();
		
		Попытка
		
			УстановитьБлокировкуНаСправочникКонстант();
			Константа = СоздатьКонстантуБД(ОписаниеКонстанты);
		
		Исключение
				
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Не удалось создать константу %1'"), Идентификатор));
				
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
				
			ВызватьИсключение;
				
		КонецПопытки;
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Иначе
		
		Если ТребуетсяОбновлениеКонстанты(ДанныеКонстантыБД, ОписаниеКонстанты) Тогда
			ОбновитьКонстантуБД(ДанныеКонстантыБД.Константа, ОписаниеКонстанты);
		КонецЕсли;
		
		Константа = ДанныеКонстантыБД.Константа;
		
	КонецЕсли;
	
	Возврат Константа;
		
КонецФункции

// Возвращает описание константы.
//
// Параметры:
//  Идентификатор - Строка - Идентификатор константы.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - Строка таблицы описания констант, в которой содержится полная информация о константе.
//   	Описание колонок строки таблицы см. в НовыйТаблицаОписанияКонстант().
//
Функция ОписаниеКонстанты(Идентификатор) Экспорт

	ТаблицаОписанияКонстант = бг_КонстантыПовтИсп.ТаблицаОписанияКонстант();
	
	ОписаниеКонстанты = ТаблицаОписанияКонстант.Найти(Идентификатор, "Идентификатор");
	
	Если ОписаниеКонстанты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОписаниеКонстанты.ЗначениеПоУмолчанию = Неопределено Тогда
		Если ОписаниеКонстанты.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = Ложь;
		ИначеЕсли Строка(ОписаниеКонстанты.ТипЗначения) = "Строка" Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = "";
		ИначеЕсли Строка(ОписаниеКонстанты.ТипЗначения) = "Число" Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = 0;
		ИначеЕсли Строка(ОписаниеКонстанты.ТипЗначения) = "Дата" Тогда
			ОписаниеКонстанты.ЗначениеПоУмолчанию = Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеКонстанты;

КонецФункции

// Возвращает таблицу полного описания констант. Это главное место описания всех констант расширения.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица описания констант, в которой содержится полная информация о всех актуальных константах.
//   Описание колонок таблицы см. в НовыйТаблицаОписанияКонстант().
//
Функция ТаблицаОписанияКонстант() Экспорт

	ТаблицаОписанияКонстант = НовыйТаблицаОписанияКонстант();
	
	#Область Раздел_УчетАлкоголя
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЗаписыватьИдентификаторыМарокОднимНабором",
		НСтр("ru='Записывать идентификаторы марок одним набором'"),
		Новый ОписаниеТипов("Булево"),
		"УчетАлкоголя");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	
	// Учет алкоголя / ФСМ	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ФедеральнаяСпецМарка",
		НСтр("ru='Вид номенклатуры ""Федеральная спец. марка""'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"УчетАлкоголя.ФСМ");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = НСтр("ru='Необходим для генерации серий ФСМ.'");
	
	// Учет алкоголя / Производство
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СкладИПТЛ",
		НСтр("ru='Склад ИПТЛ'"),
		Новый ОписаниеТипов("СправочникСсылка.Склады"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Склад испытательной лаборатории.
	|Используется для автоматического определения получателя / отправителя при оформлении перемещений.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаталогФайловДанныхСПУМ",
		НСтр("ru='Каталог файлов данных СПУМ'"),
		Новый ОписаниеТипов("Строка"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Из указанного каталога ERP загружает файлы СПУМ,
	| создает документ ""Данные с производственной линии"".'"));

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"УдалятьФайлыДанныхСПУМПослеЗагрузки",
		НСтр("ru='Удалять файлы данных СПУМ после загрузки'"),
		Новый ОписаниеТипов("Булево"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='При включенном флаге после загрузки выполняется удаление считанных файлов из каталога выгрузки СПУМ.
	|Используется для возможности загрузки данных СПУМ в несколько ИБ параллельно.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаталогФайловДанныхАСИиУ",
		НСтр("ru='Каталог файлов данных АСИиУ'"),
		Новый ОписаниеТипов("Строка"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Из указанного каталога ERP загружает показания приборов АСИиУ,
	| создает документ ""Данные приборов АСИиУ"".'")); 

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЗагружатьПятиминутныеДанныеАСИиУ",
		НСтр("ru='Загружать файлы АСИиУ с пятиминутными данными'"),
		Новый ОписаниеТипов("Булево"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При включенном флаге загружаются суточные данные 
	| и оперативные пятиминутные, иначе только суточные.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"УдалятьФайлыДанныхАСИиУПослеЗагрузки",
		НСтр("ru='Удалять файлы данных АСИиУ после загрузки'"),
		Новый ОписаниеТипов("Булево"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При включенном флаге после загрузки 
	| выполняется удаление считанных файлов из каталога выгрузки АСИиУ.
	| Используется для возможности загрузки данных АСИиУ в несколько ИБ параллельно.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПричинаОтменыОбеспеченияМатериаловВПроизводствеЕслиНеТребуется",
		НСтр("ru='Причина отмены обеспечения материалов в производстве (не требуется)'"),
		Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыПроизводства"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.Описание = НСтр("ru='Причина с которой будут отменены строки обеспечения в этапах производства при отсутствии потребности.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидНоменклатурыСпирт",
		НСтр("ru='Вид номенклатуры ""Спирт""'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = НСтр("ru='Вид номенклатуры ""Спирт""'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидНоменклатурыАлкогольнаяПродукция",
		НСтр("ru='Вид номенклатуры ""Алкогольная продукция""'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Вид номенклатуры ""Алкогольная продукция"".'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВремяСписанияПродукцииВПроизводство",
		НСтр("ru='Время списания материалов в этапе производства по умолчанию'"),
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Время),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Дата(1, 1, 1, 23, 0, 0);	
	НоваяКонстанта.Описание = НСтр("ru='Данным значением будет заполняться время списания в этапе производства'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"МинимальныйОстатокФСМВРулоне",
		НСтр("ru='Минимальный остаток ФСМ в рулоне'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3),
		"УчетАлкоголя.Производство");
	НоваяКонстанта.Описание = НСтр("ru='Минимально допустимый для дальнейшего использования остаток марок в рулоне.
	|При количестве оставшихся марок в рулоне менее допустимого марки будут списаны аналогично бракованным'");
	
	// Учет алкоголя / Экспорт
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИмпортныеССП",
		НСтр("ru='Вид номенклатуры ""Импортные ССП""'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"УчетАлкоголя.Экспорт");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = НСтр("ru='Вид номенклатуры ""Импортная спиртсодержащая продукция"".'");
	
	// Учет алкоголя / УТМ	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КоличествоЧасовХраненияВУТМ",
		НСтр("ru='Количество часов хранения в УТМ'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(4),
		"УчетАлкоголя.УТМ");
	НоваяКонстанта.ЗначениеПоУмолчанию = 0;	
	НоваяКонстанта.Описание = НСтр(
		"ru='Записи УТМ, старше указанного количества часов, будут удаляться при обработке входящих УТМ.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НеОбрабатыватьПовторноЗаписиУТМСОдинаковымАдресомДокумента",
		НСтр("ru='Не обрабатывать повторно записи УТМ с одинаковым адресом документа'"),
		Новый ОписаниеТипов("Булево"),
		"УчетАлкоголя.УТМ");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	
	// Учет алкоголя / Серии номенклатуры
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидМаркиСерииНоменклатурыПоУмолчанию",
		НСтр("ru='Вид марки серии номенклатуры по умолчанию'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_КлассификаторВидовМарок"),
		"УчетАлкоголя.Серии");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Вид марки серии номенклатуры по умолчанию.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидМаркиСерииНоменклатурыСтарая",
		НСтр("ru='Вид марки серии номенклатуры ""Старая""'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_КлассификаторВидовМарок"),
		"УчетАлкоголя.Серии");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Вид марки серии номенклатуры ""Старая"".'");	
	#КонецОбласти // Конец Раздел_УчетАлкоголя

	#Область Раздел_Продажи
	// Продажи / Склады
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СкладГотовойПродукции",
		НСтр("ru='Склад готовой продукции'"),
		Новый ОписаниеТипов("СправочникСсылка.Склады"),
		"Продажи.Склады");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Склад готовой продукции.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СкладГотовойПродукцииЭкспорт",
		НСтр("ru='Склад готовой продукции (экспорт)'"),
		Новый ОписаниеТипов("СправочникСсылка.Склады"),
		"Продажи.Склады");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Склад готовой продукции (экспорт).'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ОсновнойСкладОтгрузкиВГО",
		НСтр("ru='Основной склад отгрузки ВГО'"),
		Новый ОписаниеТипов("СправочникСсылка.Склады"),
		"Продажи.Склады");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru='Основной склад отгрузки собственным контрагентам (ВГО).'");
	
	// Продажи / Заказы
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПричинаЗаменыСерииВЗаказеКлиентаПоРезультатамСборкиНаСкладе",
		НСтр("ru='Причина замены серии в заказе клиента по результатам сборки на складе'"),
		Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Данная причина отмены будет подставляться в строки заказа с
	| плановой серией в том случае, когда из внешней складской системы поступила иная фактическая серия.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПричинаОтменыНетДоступныхОстатков",
		НСтр("ru='Причина отмены позиции в заказе клиента из-за недостатка доступных остатков'"),
		Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Данная причина отмены будет подставляться
	| в отмененные строки заказов клиентов в том случае, когда на момент передачи в сборку не смогли обеспечить
	| заказанное количество из-за недостатка доступных остатков.'"));

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПричинаОтменыОтказКлиентаИнтернетМагазина",
		НСтр("ru='Причина отмены позиции в заказе клиента из-за отказа клиента интернет-магазина'"),
		Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Данная причина отмены будет подставляться
	| в отмененные строки заказов клиентов в том случае, когда клиент интернет-магазина отказался 
	| от формирования заказа.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПричинаОтменыДолгосрочногоРезерва",
		НСтр("ru='Причина отмены долгосрочного резерва'"),
		Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Продажи.Заказы");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Причина отмены используется при высвобождении резервов 
	| или переноса резервов на другого партнера'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПричинаОтменыСнятиеРезерваДляПеремещенийПоЗаданиюWMS",
		НСтр("ru='Причина отмены заказов клиентов при снятии резервов для перемещений по заданию WMS'"),
		Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка();
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Данная причина отмены будет подставляться
	| в отмененные строки заказов клиентов в случае автоматического освобождения резерва, при нехватке
	| свободных остатков для проведения перемещения, созданного по заданию Solvo (бой, брак ...).'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьБлокировкиРаспределенияЗапасовПриФормированииЗаказовПоЗаявкам",
		НСтр("ru='Использовать управляемые блокировки распределения запасов при формировании заказов клиентов'"),
		Новый ОписаниеТипов("Булево"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Использовать управляемые блокировки
	| для ответственного чтения данных по свободным остаткам и резервам, при формировании заказов клиентов.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЕдиницаПоКлассификаторуДляКоробки",
		НСтр("ru='Единица по классификатору для коробки'"),
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = НСтр("ru='Используется для автоматического пересчета количества в заказах клиентов.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЕдиницаПоКлассификаторуДляПаллеты",
		НСтр("ru='Единица по классификатору для паллеты'"),
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Используется для автоматического пересчета количества в заказах клиентов.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидАлкогольнойПродукцииДляКонтроляМРЦПрочихЛВИ",
		НСтр("ru='Вид алкогольной продукции для контроля МРЦ на прочие ликеро-водочные изделия'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыАлкогольнойПродукции"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(
		НСтр("ru='Используется для проверки МРЦ для видов алкогольной продукции 
			|с установленным признаком ""Использовать прочую алкогольную продукцию"".'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"МинимальнаяКрепостьАлкогольнойПродукции",
		НСтр("ru='Минимальная крепость алкогольной продукции для контроля МРЦ'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию    = 28;
	НоваяКонстанта.Описание = НСтр("ru='Используется при проверке МРЦ на алкогольную продукцию, по умолчанию 28º'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИсключенияПроверкиМинимальныхОтпускныхЦен",
		НСтр("ru='Сегмент партнёров для отключения проверки минимальных отпускных цен (МОЦ)'"),
		Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров"),
		"Продажи.Заказы");
	НоваяКонстанта.Описание = 
		НСтр("ru='Для клиентов, включённых в этот сегмент, не выполняется проверка превышения минимальных отпускных цен.
			 |МОЦ замышлены для предупреждения продаж ниже себестоимости.
			 |Обычно устанавливаются равными последним закупочным ценам или себестоимости.'");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"МаксимальныйПроцентСкидки",
		НСтр("ru='Максимальный процент скидки'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(7, 4, ДопустимыйЗнак.Любой),
		"Продажи.Заказы");
	НоваяКонстанта.Описание = 
		НСтр("ru='Максимальный процент скидки. Скидка свыше этой величины не применится. Если не заполнено, ограничение не применяется.'");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант, 
		"ПричинаЗакрытияЗаказов", 
		НСтр("ru='Причина автоматического закрытия заказов клиентов'"), 
		Новый ОписаниеТипов("СправочникСсылка.ПричиныОтменыЗаказовКлиентов"),
		"Продажи.Заказы");
	НоваяКонстанта.Описание = НСтр("ru='Причина, по которой будут отменяться строки в просроченных заказах клиентов.'");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьАвтоматическийПереносДатыОтгрузкиЗаказов",
		НСтр("ru='Использовать автоматический перенос даты отгрузки заказов'"),
		Новый ОписаниеТипов("Булево"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='Настройка контстанты используется для
	| автоматического переноса даты отгрузки в заказах клиентов по рег. заданию'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант, 
		"КаталогиОбменаСРозницей", 
		НСтр("ru='Каталоги обмена с розницей'"), 
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"Продажи.Заказы");
	НоваяКонстанта.Описание = НСтр("ru='В указанные каталоги будет осуществлятся выгрузка накладных в розницу.'");
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант, 
		"ШаблонСообщенияДляОтправкиПодтвержденийПоЗаявкамВГО", 
		НСтр("ru='Шаблон сообщения для отправки подтверждений по заявкам (предзаказам) клиентов ВГО'"), 
		Новый ОписаниеТипов("СправочникСсылка.ШаблоныСообщений"),
		"Продажи.Заказы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ШаблоныСообщений.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru='По указанному шаблону будет формироваться электронное письмо.'");
	
	// Продажи / транспорт
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидПеревозкиСамовывоз",
		НСтр("ru='Вид перевозки ""Самовывоз""'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_ВидыПеревозки"),
		"Продажи.Транспорт");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Предопределенный вид перевозки, при
	| выборе которого особым образом заполняются остальные поля транспортной информации.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидПеревозкиАвто",
		НСтр("ru='Вид перевозки ""Авто""'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_ВидыПеревозки"),
		"Продажи.Транспорт");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;	
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Предопределенный вид перевозки ""Авто"", при
	| выборе которого особым образом заполняются остальные поля транспортной информации.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидПеревозкиАвтоЗаСчетПокупателя",
		НСтр("ru='Вид перевозки ""Авто за счет покупателя""'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_ВидыПеревозки"),
		"Продажи.Транспорт");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Предопределенный вид перевозки ""Авто за счет покупателя"", при
	| выборе которого транспортные расходы возмещаются покупателем.'"));
	
	// Продажи / Bacardi
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВыполнятьАрхивациюФайловBacardi",
		НСтр("ru='Выполнять архивацию файлов (Bacardi)'"),
		Новый ОписаниеТипов("Булево"),
		"Продажи.Bacardi");
	НоваяКонстанта.Описание = НСтр("ru='Выполнять архивацию файлов (Bacardi).'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьПассивноеFTPСоединениеBacardi",
		НСтр("ru='Использовать пассивное FTP-соединение (Bacardi)'"),
		Новый ОписаниеТипов("Булево"),
		"Продажи.Bacardi");
	НоваяКонстанта.Описание = НСтр("ru='Использовать пассивное FTP-соединение (Bacardi).'");	
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПутьСохраненияФайловBacardi",
		НСтр("ru='Путь к файлам (Bacardi)'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(200),
		"Продажи.Bacardi");
	НоваяКонстанта.Описание = НСтр("ru='Путь к файлам (Bacardi).'");	
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"АдресFTPРесурсаBacardi",
		НСтр("ru='Адрес FTP ресурса (Bacardi)'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(200),
		"Продажи.Bacardi");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Адрес FTP ресурса (Bacardi).'");	
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПортFTPСоединенияBacardi",
		НСтр("ru='Порт FTP-соединения (Bacardi)'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(4),
		"Продажи.Bacardi");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Порт FTP-соединения (Bacardi).'");	
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПользовательFTPСоединенияBacardi",
		НСтр("ru='Пользователь FTP соединения (Bacardi)'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(200),	
		"Продажи.Bacardi");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Пользователь FTP соединения (Bacardi).'");	
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПарольFTPСоединенияBacardi",
		НСтр("ru='Пароль FTP-соединения (Bacardi)'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(200),
		"Продажи.Bacardi");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Пароль FTP-соединения (Bacardi).'");
	
	// Продажи / Печать
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ФиксироватьПечатьДокументов",
		НСтр("ru='Фиксировать печать документов продажи'"),
		Новый ОписаниеТипов("Булево"),
		"Продажи.Печать");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='При включенной константе будет выполняться фиксация печати документов'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СохранятьИсходныйПорядокСтрокВЗаказах",
		НСтр("ru='Сохранять исходный порядок строк в заказах'"),
		Новый ОписаниеТипов("Булево"),
		"Продажи.Печать");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При включенной константе при
		| формировании заказов клиентов и актуализации обеспечения
		| строки заказов не будут автоматически отсортированы по номенклатуре в алфавитном порядке.
		| Таким образом будет сохранен исходный порядок строк, как он был принят от клиента.'"));
	
	// Продажи / Согласование заказов клиентов
	ГруппаНастроек = "Продажи.СогласованиеЗаказовКлиентов";
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьСогласованиеЗаказовПокупателей",
		НСтр("ru='Использовать согласование заказов покупателей'"),
		Новый ОписаниеТипов("Булево"),
		ГруппаНастроек);
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='Использовать согласование заказов покупателей'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"РольКредитныйКонтролер",
		НСтр("ru='Роль кредитный контролер'"),
		Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"),
		ГруппаНастроек);
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Роль кредитный контролер'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"РольФинансовыйКонтролер",
		НСтр("ru='Роль финансовый контролер'"),
		Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"),
		ГруппаНастроек);
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Роль финансовый контролер'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"РольСлужбаБезопасности",
		НСтр("ru='Роль служба безопасности'"),
		Новый ОписаниеТипов("СправочникСсылка.РолиИсполнителей"),
		ГруппаНастроек);
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Роль служба безопасности'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"МинимальноеКоличествоДнейДоОкончанияЛицензии",
		НСтр("ru='Минимальное количество дней до окончания лицензии'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3),
		ГруппаНастроек);
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Минимальное количество дней до окончания лицензии'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СрокПодтвержденияДокументовЕГАИС",
		НСтр("ru='Срок подтверждения документов ЕГАИС'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3),
		ГруппаНастроек);
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Срок подтверждения документов ЕГАИС'");
	
	// Продажи / Каналы продаж
	ГруппаНастроек = "Продажи.КаналыПродаж";
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаналПродажОпт",
		НСтр("ru='Канал продаж (Опт)'"),
		Новый ОписаниеТипов("СправочникСсылка.битКаналыПродаж"),
		ГруппаНастроек);
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.битКаналыПродаж.ПустаяСсылка();
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При выгрузки сообщений добавляется тег
		| Opt к ключу маршрутизации выгружаемого объекта, который относится
		| к каналу продаж ""Опт"". Настройка используется Порталом дистрибъюторов ""Portal Distr""'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаналПродажВГО",
		НСтр("ru='Канал продаж ВГО'"),
		Новый ОписаниеТипов("СправочникСсылка.битКаналыПродаж"),
		"Продажи.КаналыПродаж");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.битКаналыПродаж.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru= 'Канал продаж для пунктов назначения ВГО.'");
	
	#КонецОбласти // Конец Раздел_Продажи

 	#Область Раздел_Закупки
	// Закупки / Заказы
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КоличествоДнейПросрочкиЗаказовПоставщикам",
		НСтр("ru='Количество дней просрочки заказов поставщикам'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3),
		"Закупки.Заказы");
	НоваяКонстанта.ЗначениеПоУмолчанию = 7;
	НоваяКонстанта.Описание = НСтр("ru='Используется при закрытии заказов поставщикам. 
		|Определяет количество дней, прошедших с желаемой даты поступления, 
		|после которых заказ считается просроченным и подлежит закрытию'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КоличествоДнейПросрочкиЧастичноОтгруженныхЗаказовПоставщикам",
		НСтр("ru='Количество дней просрочки частично отгруженных заказов поставщикам'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3),
		"Закупки.Заказы");
	НоваяКонстанта.ЗначениеПоУмолчанию = 1;
	НоваяКонстанта.Описание = НСтр("ru='Используется при закрытии частично отгруженных заказов поставщикам. 
		|Определяет количество дней, прошедших с желаемой даты поступления, 
		|после которых заказ считается просроченным и подлежит закрытию'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КонтролироватьМинимальныеЦеныАлкогольнойПродукцииПриЗакупках",
		НСтр("ru='Контролировать минимальные цены алкогольной продукции при закупках'"),
		Новый ОписаниеТипов("Булево"),
		"Закупки.Заказы");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='После тестирования константу удалить. 
		|Контроль выполняется при проведении документов: Заказ поставщику и ПТиУ'");
	#КонецОбласти
	
	#Область Раздел_БухгалтерскийУчет
	// Бухгалтерский учет / Зарплата
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ФизическоеЛицоПоУмолчанию",
		НСтр("ru='Сотрудник по умолчанию'"),
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),
		"БухгалтерскийУчет.Зарплата");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ФизическиеЛица.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru='Используется при загрузке зарплаты, если не указано субконто в проводке'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПодразделениеПоУмолчанию",
		НСтр("ru='Подразделение по умолчанию'"),
		Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"),
		"БухгалтерскийУчет.Зарплата");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.СтруктураПредприятия.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru='Используется при загрузке зарплаты, если не указано субконто в проводке'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СтатьяПассивовПоУмолчанию",
		НСтр("ru='Статья пассивов по умолчанию'"),
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"),
		"БухгалтерскийУчет.Зарплата");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru='Используется при загрузке зарплаты, если не указана статья в проводке'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"АвтоматическоеЗаполнениеНомераСФ",
		НСтр("ru = 'Автоматическое заполнение номера СФ'"),
		Новый ОписаниеТипов("Булево"),
		"БухгалтерскийУчет.АвтоматическоеЗаполнениеРеквизитовСФ");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'Автоматическое заполнение номера СФ по документу-основанию'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"АвтоматическоеЗаполнениеДатыСФ",
		НСтр("ru = 'Автоматическое заполнение даты СФ'"),
		Новый ОписаниеТипов("Булево"),
		"БухгалтерскийУчет.АвтоматическоеЗаполнениеРеквизитовСФ");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'Автоматическое заполнение даты СФ (+ даты составления) по документу-основанию'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КорСтатьяАктивовДляФакторинга",
		НСтр("ru = 'Кор. статья активов для факторинга'"),
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"),
		"БухгалтерскийУчет.Факторинг");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru = 'Кор. статья активов для документа Факторинг'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидВзаиморасчетовВДоговорахФакторинга",
		НСтр("ru = 'Вид взаиморасчетов в договорах Факторинга'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_ВидыВзаиморасчетов"),
		"БухгалтерскийУчет.Факторинг");
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'Вид взаиморасчетов в договорах Факторинга'");
	#КонецОбласти // Конец Раздел_БухгалтерскийУчет
	
	#Область Раздел_НСИ
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ТомХраненияФотоНСИ",
		НСтр("ru='Том хранения фотографий, загруженных из Системы НСИ'"),
		Новый ОписаниеТипов("СправочникСсылка.ТомаХраненияФайлов"),
		"НСИ");
	НоваяКонстанта.Описание = НСтр("ru='Том хранения фотографий, загруженных из Системы НСИ'");

	// НСИ / Контрагенты
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидКИПочтаДляСверкиВРублях",
		НСтр("ru='Вид контактной информации: почта для сверки взаиморасчетов в рублях'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"),
		"НСИ.Контрагенты");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Вид контактной информации для указания почты контрагента для сверки взаиморасчетов в рублях'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидКИПочтаДляСверкиВДалах",
		НСтр("ru='Вид контактной информации: почта для сверки взаиморасчетов в далах'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"),
		"НСИ.Контрагенты");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Вид контактной информации для указания почты контрагента для сверки взаиморасчетов в далах'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СписокИННОрганизацийДляИдентификацииЧастныхКлиентов",
		НСтр("ru='Список ИНН организаций, которые используются для идетификации частных клиентов'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(100),
		"НСИ.Контрагенты");
	НоваяКонстанта.ЗначениеПоУмолчанию = """5006286002"",""5006286242"",""5006008213""";
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='Указать ИНН организаций в кавычках через запятую. Например ""5006286002"",""5006286242""'"); 
	
	//НСИ / Скидки
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ГруппаСкидокЧКН",
		НСтр("ru='Группа скидок ЧКН'"),
		Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"),
		"НСИ.Скидки");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Группа скидок частных корпоративных клиентов'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СуммоваяСкидкаCRM",
		НСтр("ru='Суммовая скидка CRM'"),
		Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"),
		"НСИ.Скидки");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Cуммовая скидка CRM (глобальная)'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ТипСкидкиCreatio",
		НСтр("ru='Тип скидки CRM для скидок, загруженных из Creatio'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_ТипыСкидокНаценокCRM"),
		"НСИ.Скидки");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Тип скидки CRM для скидок, загруженных из Creatio'");

	//НСИ / Пункты назначения
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаналПродажДляКлиентовCreatio",
		НСтр("ru='Канал продаж для клиентов, загруженных из Creatio'"),
		Новый ОписаниеТипов("СправочникСсылка.битКаналыПродаж"),
		"НСИ.ПунктыНазначения");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Канал продаж для пунктов назначения, загруженных из Creatio'");

	//НСИ / Сопроводительные документы
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидДокументаУдостоверенияКачества",
		НСтр("ru='Вид документа удостоверения качества'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_ВидыСопроводительныхДокументов"),
		"НСИ.СопроводительныеДокументы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Вид сопроводительного документа удостоверения качества для выгрузки.'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидДокументаДекларацияСоответствия",
		НСтр("ru='Вид документа декларация соответствия'"),
		Новый ОписаниеТипов("СправочникСсылка.бг_ВидыСопроводительныхДокументов"),
		"НСИ.СопроводительныеДокументы");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.Описание = НСтр("ru='Вид сопроводительного документа декларации соответствия для выгрузки.'");
	#КонецОбласти // Конец Раздел_НСИ
	
	#Область Раздел_ТРИМ
	// ТРИМ / Виды номенклатуры
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидНоменклатурыИнструментТОиР",
		НСтр("ru='Вид номенклатуры Инструмент (ТОиР)'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"ТРИМ.ВидыНоменклатуры"); 
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидНоменклатурыГСМТОиР",
		НСтр("ru='Вид номенклатуры ГСМ (ТОиР)'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"ТРИМ.ВидыНоменклатуры");  
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидНоменклатурыЗапчастиТОиР",
		НСтр("ru='Вид номенклатуры Запчасти (ТОиР)'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"ТРИМ.ВидыНоменклатуры");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВидНоменклатурыМатериалыРасходныеТОиР",
		НСтр("ru='Вид номенклатуры Материалы расходные (ТОиР)'"),
		Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"),
		"ТРИМ.ВидыНоменклатуры");  
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	#КонецОбласти // Конец Раздел_ТРИМ
	
	#Область Раздел_Магистраль
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ДатаНачалаИнтеграцииПоПроектуМагистраль",
		НСтр("ru='Дата начала интеграции по проекту Магистраль'"),
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
		"Магистраль");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Дата(1, 1, 1);
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru = 'По документам, созданным ранее этой даты,
                                    |не выполняется автоматическое формирование заявок на оплату.
                                    |Если дата не указана - заявки на оплату не формируются.'"));
	#КонецОбласти
	
	#Область WMS
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПроводитьДокументыОтWMSОтложенно",
		НСтр("ru = 'Проводить документы-ответы от WMS в отложенной обработке'"),
		Новый ОписаниеТипов("Булево"),
		"WMS");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр(
		"ru = 'Документы от WMS при обработке входящих сообщений в ERP будут лишь записываться,
		| а проводиться они при отложенной обработке.'")); 
	
	// WMS / Переупаковка
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПереупаковкаПроводитьПриНаличииОшибок",
		НСтр("ru = 'Проводить переупаковку даже при наличии ошибок'"),
		Новый ОписаниеТипов("Булево"),
		"WMS.Переупаковка");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	
	// WMS / Приемка
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ТипПриемкиПоУмолчанию",
		НСтр("ru='Тип приемки WMS по умолчанию'"),
		Новый ОписаниеТипов("СправочникСсылка.битТипыПриемкиWMS"),
		"WMS.Приемка");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	
	// WMS / Отгрузка
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВыгружатьРасходныеОрдераВRMQ",
		НСтр("ru='Выгружать ""Расходные ордера"" в RMQ'"),
		Новый ОписаниеТипов("Булево"),
		"WMS.Отгрузка");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр(
		"ru = 'Расходные ордера по данной организации будут выгружаться в RabbitMQ.'");
	#КонецОбласти // Конец WMS

	#Область Раздел_ТранспортнаяЛогистика
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЯндексГеокодерАдресСервиса",
		НСтр("ru='Яндекс.Геокодер адрес сервиса'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(256),
		"ТранспортнаяЛогистика.Общие");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = "";
	НоваяКонстанта.Описание = НСтр("ru='Адрес HTTP сервиса Яндекс.Геокодер'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЯндексГеокодерПользователь",
		НСтр("ru='Яндекс.Геокодер пользователь'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(256),
		"ТранспортнаяЛогистика.Общие");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = "user";
	НоваяКонстанта.Описание = НСтр("ru='Пользователь для использования HTTP сервиса Яндекс.Геокодер'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ДопустимаяГлубинаРедактированияРейсов",
		НСтр("ru='Допустимая глубина редактирования рейсов'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3),
		"ТранспортнаяЛогистика.МаршрутныйЛист");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = 45;
	НоваяКонстанта.Описание = НСтр("ru='Число дней, в течение которых разрешено редактирование рейсов'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПечатьМаршрутныхЛистовСНомерамиУПП",
		НСтр("ru='Печать маршрутных листов с номерами УПП'"),
		Новый ОписаниеТипов("Булево"),
		"ТранспортнаяЛогистика.МаршрутныйЛист");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Если включена, то печатную форму 
		| ""Маршрутный лист"" номер документа и номера заказов клиентов подставляются по данным УПП.
		| После запуска всех стадий интеграции константу удалить.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВзвестиФлагОтгрузкаИзERPВИстину",
		НСтр("ru='Взвести флаг ""Отгрузка из ERP"" в истину'"),
		Новый ОписаниеТипов("Булево"),
		"ТранспортнаяЛогистика.МаршрутныйЛист");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Если включена,
		| тогда во всех маршрутных листах реквизит ""Отгрузка из ERP"" по умолчанию будет = Истина.
		| После запуска всех стадий интеграции константу удалить.'"));
	
	#КонецОбласти // Раздел_ТранспортнаяЛогистика
	
	#Область Раздел_ФункциональныеОпции
	// Функциональные опции / ТРИМ
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуНоменклатуры_ТРИМ",
		НСтр("ru='Используется загрузка номенклатуры из ТОиР'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ТРИМ"); 
	НоваяКонстанта.ЗначениеПоУмолчанию = Истина;
	НоваяКонстанта.Описание = НСтр("ru='После запуска всех стадий интеграции константу удалить'"); 

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуЗаказаПоставщику_ТРИМ",
		НСтр("ru='Используется загрузка заказов поставщику из ТОиР'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ТРИМ"); 
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуСкладскихДокументов_ТРИМ",
		НСтр("ru='Используется загрузка складских документов из ТОиР'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ТРИМ"); 
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='После запуска всех стадий интеграции константу удалить'");
	
	// Функциональные опции / Скидки
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьВыгрузкуСкидокВУПП",
		НСтр("ru = 'Использовать выгрузку скидок в УПП'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Скидки");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	// Функциональные опции / Интеграция с Creatio
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюНСИСCreatio",
		НСтр("ru = 'Использовать интеграцию НСИ с Creatio'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСCreatio");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуЗаказовИзCreatioВERP",
		НСтр("ru = 'Использовать загрузку заказов из Creatio в ERP'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСCreatio");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуЗаказовИзCreatioВУПП",
		НСтр("ru = 'Использовать загрузку заказов из Creatio в УПП'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСCreatio");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьВыгрузкуЗаказовCreatioИзERPВУПП",
		НСтр("ru = 'Использовать выгрузку заказов Creatio из ERP в УПП'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСCreatio");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьВыгрузкуЗаказовИзERPВCreatio",
		НСтр("ru = 'Использовать выгрузку заказов из ERP в Creatio'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСCreatio");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюЦенСCreatio",
		НСтр("ru = 'Использовать интеграцию цен с Creatio'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСCreatio");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюОстатковСCreatio",
		НСтр("ru = 'Использовать интеграцию остатков с Creatio'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСCreatio");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");
	
	// Функциональные опции / Интеграция с Чикаго
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюЗаказовСЧикаго",
		НСтр("ru = 'Использовать интеграцию заказов с Чикаго'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСЧикаго");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПараллельнаяЗагрузкаЗаказов",
		НСтр("ru = 'Использовать параллельную загрузку заказов с Чикаго'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСЧикаго");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НоваяКонстанта.Описание = НСтр("ru = 'После запуска всех стадий интеграции константу удалить'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ОрганизацияПриПродажеРозничномуПокупателю",
		НСтр("ru = 'Организация для продаж через розничного покуаптеля (ББЗ)'"),
		Новый ОписаниеТипов("СправочникСсылка.Организации"),
		"ФункциональныеОпции.ИнтеграцияСЧикаго");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.Организации.ПустаяСсылка();
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр(
		"ru = 'Значение заполнения реквизита ""Организация"" в документе ""Заказ Клиента""
		| при продаже через розничного покуаптеля (ББЗ)"".'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"МагазинДляОтгрузкиПриПродажеРозничномуПокупателю",
		НСтр("ru = 'Магазин для продаж через розничного покуаптеля (ББЗ)'"),
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"),
		"ФункциональныеОпции.ИнтеграцияСЧикаго");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр(
		"ru = 'Значение заполнения реквизита ""Магазин"" в документе ""Заказ Клиента""
		| при продаже через розничного покуаптеля (ББЗ)"".'")); 

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ОсновнойСкладОтгрузки",
		НСтр("ru = 'Основной склад отгрузки'"),
		Новый ОписаниеТипов("СправочникСсылка.Склады"),
		"ФункциональныеОпции.ИнтеграцияСЧикаго");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НоваяКонстанта.Описание = НСтр("ru = 'Основной склад для отгрузки заказов с виртуального склада ""Хорека""'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаналПродажХорека",
		НСтр("ru='Канал продаж хорека'"),
		Новый ОписаниеТипов("СправочникСсылка.битКаналыПродаж"),
		"ФункциональныеОпции.ИнтеграцияСЧикаго");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.битКаналыПродаж.ПустаяСсылка();
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	НоваяКонстанта.Описание = НСтр("ru='Канал продаж хорека для выгрузки остатков'");

	// Функциональные опции / Интеграция с Solvo
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЗапретитьИнтерактивноеИзменениеНоменклатурыИУпаковок",
		НСтр("ru = 'Запретить интерактивное изменение номенклатуры и упаковок на время перехода'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСSolvo");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	
	// Функциональные опции / Транспортная логистика
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуТранспортнойИнформации",
		НСтр("ru = 'Использовать загрузку транспортной информации'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ТранспортнаяЛогистика");
	НоваяКонстанта.ЗначениеПоУмолчанию = Истина;
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьВыгрузкуТранспортнойИнформации",
		НСтр("ru='Использовать выгрузку транспортной информации'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ТранспортнаяЛогистика");
	НоваяКонстанта.ЗначениеПоУмолчанию = Истина;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");

	// Функциональные опции / Интеграция с SAP
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьВыгрузкуСвободныхОстатковВSAP",
		НСтр("ru='Используется выгрузка cвободных остатков в SAP'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСSAP"); 
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.бг_НастройкиУзловИнтеграцииSAP");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При установке флага cвободные остатки товаров будут
		| выгуржаться в SAP регламентным заданием ""БЕЛУГА. Выгрузка свободных остатков в SAP"".
		| После запуска всех стадий интеграции константу удалить.'"));
	
	// Функциональные опции / Интеграция с SAP
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуЗаявокКлиентовИзSAP",
		НСтр("ru='Используется загрузка заявок клиентов из SAP'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСSAP"); 
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Используется загрузка заявок клиентов из SAP.
		| После запуска всех стадий интеграции константу удалить.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюЗаказовСSAP",
		НСтр("ru = 'Используется интеграция заказов с SAP'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСSAP");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Используется интеграция заказов с SAP.
		| Если выключена, то заказы клиентов загруженные из SAP, не будут регистрироваться к обмену.
		| После запуска всех стадий интеграции константу удалить.'"));
	
	// Функциональные опции / Интеграция с B2B
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюЗаказовСB2B",
		НСтр("ru = 'Используется интеграция заказов с B2B'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСB2B");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Используется интеграция заказов с B2B.
		| Если выключена, то заказы клиентов загруженные из B2B, не будут регистрироваться к обмену.
		| После запуска всех стадий интеграции константу удалить.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюЗаказовСPortalDistr",
		НСтр("ru = 'Используется интеграция заказов с PortalDistr'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСB2B");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Используется интеграция заказов с PortalDistr.
		| Если выключена, то заказы клиентов загруженные с PortalDistr, не будут регистрироваться к обмену.
		| После запуска всех стадий интеграции константу удалить.'"));
	
	// Функциональные опции / Интеграция с внешними хранилищами
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьВыгрузкуОстатковТоваровОрганизацийВоВнешнееХранилище",
		НСтр("ru = 'Используется выгрузка остатков товаров организаций во внешнее хранилище'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСВнешнимиХранилищами");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	
	// Функциональные опции / Интеграция с EDI
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюЗаказовСEDI",
		НСтр("ru = 'Используется интеграция заказов с EDI'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСEDI");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Используется интеграция заказов с EDI.
		| Если выключена, то заказы клиентов загруженные из EDI, не будут регистрироваться к обмену.
		| После запуска всех стадий интеграции константу удалить.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьЗагрузкуЗаказовКлиентовСозданныхПоEDI",
		НСтр("ru = 'Обрабатывать входящие сообщения по Заказам клиентов из УПП с признаком ""СозданПоEDI""'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСEDI");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='После запуска всех стадий интеграции константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СоздаватьНоменклатуруПартнераПриЗаписиЗаказаКлиентаEDI",
		НСтр("ru = 'Создавать номенклатуру партнера при записи заказа клиента созданного по EDI'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ИнтеграцияСEDI");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='После запуска интеграции с Solvo удалить'");
	
	// Функциональные опции / Закупки
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ПроводитьЗаказПоставщикуЗагруженныйИзПочты",
		НСтр("ru='Проводить заказ поставщику загруженный из почты'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Закупки");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	
    // Функциональные опции / Продажи
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюСертификатовНоменклатуры",
		НСтр("ru = 'Использовать интеграцию сертификатов номенклатуры.'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='После запуска всех стадий интеграции константу удалить'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьНумерациюРТиУИзERP",
		НСтр("ru = 'Использовать нумерацию ERP для документов РТиУ'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'Если константа включена по выбранной организации,
		|	тогда номер РТиУ по выбранной организации не будет перезаписываться номером из УПП.
		|	Также появится возможность формировать ТТН исходящая на основании РТиУ, 
		|	обходя текущую проверку на наличие номера документа из УПП'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СперваЗаписыватьПотомПроводитьВходящуюРТУ",
		НСтр("ru = 'Сперва записывать, а только потом проводить входящие РТУ'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
			ТаблицаОписанияКонстант,
			"ИспользоватьЗагрузкуРТиУПоОрганизации",
			НСтр("ru = 'Обрабатывать входящие сообщения, по РТиУ'"),
			Новый ОписаниеТипов("Булево"),
			"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='Обработка входящих сообщений РТиУ будет происходит для выбранной организации'");	
		
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
			ТаблицаОписанияКонстант,
			"ЗаписыватьРТиУВРежимеОбменДаннымиЗагрузкаИстина",
			НСтр("ru = 'Записывать РТиУ в режиме ОбменДанными.Загрузка = Истина'"),
			Новый ОписаниеТипов("Булево"),
			"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='При обработке входящих сообщений РТиУ будет записан без контролей'");
		
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
			ТаблицаОписанияКонстант,
			"ДатаЗапретаИзмененияРТиУ",
			НСтр("ru = 'Дата запрета изменения документа ""Реализация товаров и услуг""'"),
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
			"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='Дата запрета изменения документа ""Реализация товаров и услуг""'"); 
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЗапретПередачиВСборкуБезСогласованияПоОрганизации",
		НСтр("ru = 'Организация, для которой запрещена передача в сборку, без согласования)'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр(
		"ru = 'Организация, для которой запрещена передача в сборку, без согласования'"));

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьИнтеграциюКорректировкиРеализации",
		НСтр("ru = 'Используется интеграция корректировки реализации'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Используется интеграция корректировки реализации.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СоздаватьЗаказыМагазина",
		НСтр("ru = 'Создавать заказы магазина.'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ДатаНачалаВыгрузкиДокументовПоКомиссии",
		НСтр("ru='Дата начала выгрузки документов по комиссии'"),
		Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.Дата)),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru='Дата начала выгрузки документов по комиссии при интеграции с ERP'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЗагружатьКорректировкуРеализацииВВводОстатковПоТоварам",
		НСтр("ru='Загружать корректировку реализации из УПП в ввод остатков товаров'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Будет создан документ ""Ввод остатков товаров""
	| по данным документа ""Корректировка реализации"" из УПП'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ЗагружатьКорректировкуПриобретенияВВводОстатковПоТоварам",
		НСтр("ru='Загружать возврат товаров поставщику из УПП в ввод остатков товаров'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Продажи");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Будет создан документ ""Ввод остатков товаров""
	| по данным документа ""Возврата товара поставщику"" из УПП'"));
	
	// Функциональные опции / Казначейство
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользованиеДопОтборовПоПоступлениюСписаниюДС",
		НСтр("ru = 'Использование доп.отборов по поступлению/списанию ДС'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Казначейство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = НСтр("ru = 'Использование дополнительных отборов по поступлению/списанию ДС'");

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"УстанавливатьДатуПоступленияСписанияДСРавнойДатеПроведенияБанком",
		НСтр("ru = 'При загрузке банковской выписки устанавливать дату поступления/списания ДС по дате проведения банком'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Казначейство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru = 'При загрузке банковской выписки устанавливать
	| дату поступления/списания ДС по дате проведения банком'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НеИскатьДокументыПоНазначениюПлатежаПриЗагрузкеБанковскойВыписки",
		НСтр("ru = 'При загрузке банковской выписки не искать объекты расчетов по назначению платежа'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Казначейство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru = 'При загрузке банковской выписки не искать 
	|объекты расчетов по назначению платежа'"));

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВБанковскихДокументахПодбиратьОбъектыРасчетовВПорядкеПлановойДатыПлатежа",
		СтрокаБезСимволовПереноса(НСтр("ru = 'В банковских документах подбирать объекты расчетов 
		|в порядке возрастания плановой даты платежа'")),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Казначейство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru = 'В банковских документах подбирать 
	|объекты расчетов в порядке возрастания плановой даты платежа'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьКонтролиПриОплатеДокументов",
		СтрокаБезСимволовПереноса(НСтр("ru = 'Использовать контроли при оплате документов'")),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Казначейство");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru = 'Использовать контроли при оплате документов'"));

	// Функциональные опции / Оптимизация производительности
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьОптимизированныеЗапросыДвиженияМарок",
		НСтр("ru = 'Использовать оптимизированный запросы движения марок.'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ОптимизацияПроизводительности");
	НоваяКонстанта.ЗначениеПоУмолчанию = Истина;
	НоваяКонстанта.Описание = НСтр("ru='После завершения тестирования запросов константу удалить'");
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ОтложеннаяЗаписьДвиженийМарокТТНВходящей",
		НСтр("ru='Использовать отложенную запись движений марок ТТН входящей'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.ОптимизацияПроизводительности");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	НоваяКонстанта.Описание = НСтр("ru='После завершения тестирования отложенной записи константу удалить'");
	
	// Функциональные опции / Договоры
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КонтролироватьВидВзаиморасчетовВДоговоре",
		НСтр("ru='Контролировать вид взаиморасчетов в договоре'"),
		Новый ОписаниеТипов("Булево"),
		"ФункциональныеОпции.Договоры");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;
	#КонецОбласти // Раздел_ФункциональныеОпции
	
	#Область Раздел_Обслуживание
	// Обслуживание / Адаптер
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СтрокаПодключенияРабочейБазы",
		НСтр("ru='Строка подключения рабочей базы'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"Обслуживание.Адаптер");
	НоваяКонстанта.ЗначениеПоУмолчанию = "";
	НоваяКонстанта.Описание = НСтр("ru='Используется для очистки настроек подключения к УТМ при копировании базы.'");
	
	#Область НастройкиПодключения
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ОсновнаяНастройкаПодключения",
		НСтр("ru='Основная настройка подключения'"),
		Новый ОписаниеТипов("СправочникСсылка.адаптер_ПараметрыПодключения"),
		"Обслуживание.Адаптер");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПредопределенноеЗначение(
		"Справочник.адаптер_ПараметрыПодключения.ПустаяСсылка");
	НоваяКонстанта.ХранитьСтроковыйГУИД = Истина;
	НоваяКонстанта.ИмяТипа = "СправочникСсылка.адаптер_ПараметрыПодключения";
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НастройкаПодключенияПродажиЛогистика",
		НСтр("ru='Настройка подключения для приема данных продаж и логистики'"),
		Новый ОписаниеТипов("СправочникСсылка.адаптер_ПараметрыПодключения"),
		"Обслуживание.Адаптер");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПредопределенноеЗначение(
		"Справочник.адаптер_ПараметрыПодключения.ПустаяСсылка");
	НоваяКонстанта.ХранитьСтроковыйГУИД = Истина;
	НоваяКонстанта.ИмяТипа = "СправочникСсылка.адаптер_ПараметрыПодключения";
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НастройкаПодключенияWMS",
		НСтр("ru='Настройка подключения для приема данных от WMS-систем'"),
		Новый ОписаниеТипов("СправочникСсылка.адаптер_ПараметрыПодключения"),
		"Обслуживание.Адаптер");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПредопределенноеЗначение(
		"Справочник.адаптер_ПараметрыПодключения.ПустаяСсылка");
	НоваяКонстанта.ХранитьСтроковыйГУИД = Истина;
	НоваяКонстанта.ИмяТипа = "СправочникСсылка.адаптер_ПараметрыПодключения";
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НастройкаПодключенияУТМ",
		НСтр("ru='Настройка подключения для приема данных УТМ'"),
		Новый ОписаниеТипов("СправочникСсылка.адаптер_ПараметрыПодключения"),
		"Обслуживание.Адаптер");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПредопределенноеЗначение(
		"Справочник.адаптер_ПараметрыПодключения.ПустаяСсылка");
	НоваяКонстанта.ХранитьСтроковыйГУИД = Истина;
	НоваяКонстанта.ИмяТипа = "СправочникСсылка.адаптер_ПараметрыПодключения";
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НастройкаПодключенияОтветыОбОшибках",
		НСтр("ru='Настройка подключения для приема ответов об ошибках в ответ на исходящие сообщения'"),
		Новый ОписаниеТипов("СправочникСсылка.адаптер_ПараметрыПодключения"),
		"Обслуживание.Адаптер");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПредопределенноеЗначение(
		"Справочник.адаптер_ПараметрыПодключения.ПустаяСсылка");
	НоваяКонстанта.ХранитьСтроковыйГУИД = Истина;
	НоваяКонстанта.ИмяТипа = "СправочникСсылка.адаптер_ПараметрыПодключения";
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НастройкаПодключенияDWH",
		НСтр("ru='Настройка подключения для выгрузки в o9 (DWH)'"),
		Новый ОписаниеТипов("СправочникСсылка.адаптер_ПараметрыПодключения"),
		"Обслуживание.Адаптер");
	НоваяКонстанта.ЗначениеПоУмолчанию = ПредопределенноеЗначение(
		"Справочник.адаптер_ПараметрыПодключения.ПустаяСсылка");
	НоваяКонстанта.ХранитьСтроковыйГУИД = Истина;
	НоваяКонстанта.ИмяТипа = "СправочникСсылка.адаптер_ПараметрыПодключения";
	#КонецОбласти // Конец НастройкиПодключения
	
	// Обслуживание / Отложенная обработка объектов
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"МаксимальноеЧислоПопытокОтложеннойОбработки",
		НСтр("ru='Максимальное число попыток отложенной обработки объектов'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3, , ДопустимыйЗнак.Неотрицательный),
		"Обслуживание.ОтложеннаяОбработкаОбъектов");
	НоваяКонстанта.ЗначениеПоУмолчанию = 10;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При превышении числа попыток, регламентное задание будет пропускать 
	| объект в очереди. Минимально - 1, максимально - 999'"));
	
	// Обслуживание / Отложенная обработка объектов
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"МаксимальноеЧислоПопытокСформироватьИнтернетЗаказ",
		НСтр("ru='Максимальное число попыток сформировать интернет заказ клиента'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3, , ДопустимыйЗнак.Неотрицательный),
		"Обслуживание.ОтложеннаяОбработкаОбъектов");
	НоваяКонстанта.ЗначениеПоУмолчанию = 3;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При превышении числа попыток, регламентное задание будет пропускать 
	| в очереди заявку клиента, по которой надо сформировать интернет заказ. Минимально - 1, максимально - 999'"));

	// Обслуживание / Передача акцизных марок
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаталогВыгрузкиДанныхОбАкцизныхМаркахДляСистем1С",
		НСтр("ru='Каталог выгрузки файлов с данными акцизных марок для систем 1С (ERP и УПП)'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"Обслуживание.ПередачаАкцизныхМарок");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='В указаный каталог будут выгружаться файлы с акцизными марками
	| при установке варианта выгрузки ""Через файл"".'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаталогВыгрузкиДанныхОбАкцизныхМаркахДляСистемWMS",
		НСтр("ru='Каталог выгрузки файлов с данными акцизных марок для WMS-систем (MobileSmarts, Solvo)'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"Обслуживание.ПередачаАкцизныхМарок");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='В указаный каталог будут выгружаться файлы с акцизными марками
	| при установке варианта выгрузки ""Через файл"".'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВариантВыгрузкиАкцизныхМарокОтчетОПроизводствеЕГАИС",
		НСтр("ru='Вариант передачи акцизных марок для документа Отчет о производстве ЕГАИС'"),
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ВариантыВыгрузкиАкцизныхМарок"),
		"Обслуживание.ПередачаАкцизныхМарок");
	НоваяКонстанта.ЗначениеПоУмолчанию = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При варианте ""Через файл"" необходимо указать каталог выгрузки, 
	| иначе выгрузка не будет осуществляться.'"));

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВариантВыгрузкиАкцизныхМарокТТНИсходящаяЕГАИС",
		НСтр("ru='Вариант передачи акцизных марок для документа ТТН исходящая ЕГАИС'"),
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ВариантыВыгрузкиАкцизныхМарок"),
		"Обслуживание.ПередачаАкцизныхМарок");
	НоваяКонстанта.ЗначениеПоУмолчанию = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При варианте ""Через файл"" необходимо указать каталог выгрузки, 
	| иначе выгрузка не будет осуществляться.'"));	
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ВариантВыгрузкиАкцизныхМарокWMS",
		НСтр("ru='Вариант передачи акцизных марок, выгружаемых для WMS-систем'"),
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ВариантыВыгрузкиАкцизныхМарок"),
		"Обслуживание.ПередачаАкцизныхМарок");
	НоваяКонстанта.ЗначениеПоУмолчанию = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении;
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='При варианте ""Через файл"" необходимо указать каталог выгрузки, 
	| иначе выгрузка не будет осуществляться.'"));
	
	// Обслуживание / Отладка
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"НавигационнаяСсылкаОткрываемаяПриСтартеСистемы",
		НСтр("ru='При старте 1С будет открыта данная навигационная ссылка'"),
		Новый ОписаниеТипов("Строка"),
		"Обслуживание.Отладка");
	НоваяКонстанта.ЗначениеПоУмолчанию = "";
	#КонецОбласти

	#Область Раздел_ОбменДанными
	// Обмен данными / Интеграция с SAP
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СегментНоменклатурыНеПродаватьВинлаб",
		НСтр("ru='Сегмент номенклатуры запрещенной для продажи Винлаб'"),
		Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"),
		"ОбменДанными.ИнтеграцияСSAP");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.СегментыНоменклатуры.ПустаяСсылка();
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Сегмент номенклатуры, в состав которого включена 
		| номенклатура, которая запрещена для продажи в Винлаб. 
		| Используется при обработке заявок клиентов от Винлаб, загруженных из SAP.'"));
	
	// Обмен данными / Интеграция с SAP
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"СегментНоменклатурыПриоритетнаяДляПродажиВинлаб",
		НСтр("ru='Сегмент номенклатуры приоритетной для продажи Винлаб'"),
		Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"),
		"ОбменДанными.ИнтеграцияСSAP");
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.СегментыНоменклатуры.ПустаяСсылка();
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Сегмент номенклатуры, в состав которого включена 
		| номенклатура, которая является приоритетной для продажи в Винлаб. 
		| Используется при обработке заявок клиентов от Винлаб, загруженных из SAP.'"));

	// Обмен данными / Интеграция с SAP
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаналПродажСобственнаяРозница",
		НСтр("ru='Канал продаж Собственная pозница'"),
		Новый ОписаниеТипов("СправочникСсылка.битКаналыПродаж"),
		"ОбменДанными.ИнтеграцияСSAP");
	НоваяКонстанта.ОбязательноеЗаполнение = Истина;
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.битКаналыПродаж.ПустаяСсылка();
	НоваяКонстанта.Описание = НСтр("ru='Канал продаж для пунктов назначения Винлаб'");

	// Обмен данными / Интеграция с SAP
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"АлкогольнаяЛицензияДляНовогоПунктаРазгрузки",
		НСтр("ru='Алкогольная лицензия для нового пункта разгрузки'"),
		Новый ОписаниеТипов("СправочникСсылка.ЛицензииПоставщиковАлкогольнойПродукции"),
		"ОбменДанными.ИнтеграцияСSAP");
	НоваяКонстанта.ОбязательноеЗаполнение = Ложь;
	НоваяКонстанта.ЗначениеПоУмолчанию = Справочники.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка();
	НоваяКонстанта.ТипРазреза = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Служебная алкогольная лицензия для нового пункта 
		| разгрузки Винлаб (открывающегося магазина). Используется при загрузке заявок от Винлаб.'"));
	
	// Обмен данными / Интеграция с внешними хранилищами
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаталогВыгрузкиДанныхДляВнешнегоХранилища",
		НСтр("ru='Каталог выгрузки файлов с данными для внешних хранилищ'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"ОбменДанными.ИнтеграцияСВнешнимиХранилищами");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='В указаный каталог будут выгружаться файлы данных
		| для внешних хранилищ.'"));
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КоличествоДнейХраненияИзмененийТоваровОрганизаций",
		НСтр("ru='Количество дней хранения изменений для выгрузки во внешнее хранилище регистра ""Товары организаций""'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(4),
		"ОбменДанными.ИнтеграцияСВнешнимиХранилищами");
	НоваяКонстанта.ЗначениеПоУмолчанию = 30;
	
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КаталогОбработокEDIКорус",
		НСтр("ru='Каталог внешних обработок EDI КОРУС'"),
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"ОбменДанными.EDI");
	НоваяКонстанта.Описание = СтрокаБезСимволовПереноса(НСтр("ru='Путь к каталогу в котором расположены
		| обработки интеграции EDI КОРУС.'"));
	#КонецОбласти // Конец ОбменДанными	
	
	#Область ЕГАИС
	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"ИспользоватьОптимизированныйАлгоритмОбменаЕГАИС",
		НСтр("ru='Использовать оптимизированный механизм обмена с ЕГАИС'"),
		Новый ОписаниеТипов("Булево"),
		"ЕГАИС");
	НоваяКонстанта.ЗначениеПоУмолчанию = Ложь;	

	НоваяКонстанта = ДобавитьОписаниеКонстанты(
		ТаблицаОписанияКонстант,
		"КоличествоДокументовВПорцииОбменаЕГАИС",
		НСтр("ru='Количество отправляемых документов за задание'"),
		ОбщегоНазначения.ОписаниеТипаЧисло(3),
		"ЕГАИС");
	НоваяКонстанта.ЗначениеПоУмолчанию = 120;	
	#КонецОбласти // Конец ЕГАИС	
	
	Возврат ТаблицаОписанияКонстант;

КонецФункции

// Возвращает представления имен групп констант, которые необходимы для формирования интерфейса заполнения констант.
//
// Возвращаемое значение:
//   Структура - Соответствия имен и представлений групп констант, у которых синоним не совпадает с именем.
//
Функция ПредставленияГруппКонстант() Экспорт

	// Указываются представления разделов и подразделов, у которых синоним не совпадает с именем.
	ПредставленияГруппКонстант = Новый Структура;
	
	ПредставленияГруппКонстант.Вставить("АвтоматическоеЗаполнениеРеквизитовСФ", НСтр("ru = 'Автоматическое заполнение реквизитов СФ'"));
	ПредставленияГруппКонстант.Вставить("БухгалтерскийУчет", НСтр("ru = 'Бухгалтерский учет'"));
	ПредставленияГруппКонстант.Вставить("ВидыНоменклатуры", НСтр("ru = 'Виды номенклатуры'"));
	ПредставленияГруппКонстант.Вставить("ИнтеграцияСCreatio", НСтр("ru = 'Интеграция с Creatio'"));
	ПредставленияГруппКонстант.Вставить("ИнтеграцияСЧикаго", НСтр("ru = 'Интеграция с Чикаго'"));
	ПредставленияГруппКонстант.Вставить("ИнтеграцияСSAP", НСтр("ru = 'Интеграция с SAP'"));
	ПредставленияГруппКонстант.Вставить("ИнтеграцияСSolvo", НСтр("ru = 'Интеграция с Solvo'"));
	ПредставленияГруппКонстант.Вставить("ИнтеграцияСB2B", НСтр("ru = 'Интеграция с B2B'"));
	ПредставленияГруппКонстант.Вставить("ИнтеграцияСEDI", НСтр("ru = 'Интеграция с EDI'"));
	ПредставленияГруппКонстант.Вставить("ИнтеграцияСВнешнимиХранилищами", НСтр("ru = 'Интеграция с внешними хранилищами данных'"));
	ПредставленияГруппКонстант.Вставить("КаналыПродаж", НСтр("ru = 'Каналы продаж'"));
	ПредставленияГруппКонстант.Вставить("ЛицензииПоставщиковАлкогольнойПродукции", НСтр("ru = 'Лицензии поставщиков алкогольной продукции'"));
	ПредставленияГруппКонстант.Вставить("Магистраль", НСтр("ru = 'Магистраль (интеграция с КП/СКП)'"));
	ПредставленияГруппКонстант.Вставить("МаршрутныйЛист", НСтр("ru = 'Маршрутный лист'"));
	ПредставленияГруппКонстант.Вставить("ОбменДанными", НСтр("ru = 'Обмен данными'"));
	ПредставленияГруппКонстант.Вставить("ОптимизацияПроизводительности", НСтр("ru = 'Оптимизация производительности'"));
	ПредставленияГруппКонстант.Вставить("ОтложеннаяОбработкаОбъектов", НСтр("ru = 'Отложенная обработка объектов'"));
	ПредставленияГруппКонстант.Вставить("ПередачаАкцизныхМарок", НСтр("ru = 'Передача акцизных марок'"));
	ПредставленияГруппКонстант.Вставить("ПунктыНазначения", НСтр("ru = 'Пункты назначения'"));
	ПредставленияГруппКонстант.Вставить("СогласованиеЗаказовКлиентов", НСтр("ru = 'Согласование заказов клиентов'"));
	ПредставленияГруппКонстант.Вставить("СопроводительныеДокументы", НСтр("ru = 'Сопроводительные документы'"));
	ПредставленияГруппКонстант.Вставить("ТранспортнаяЛогистика", НСтр("ru = 'Транспортная логистика'"));
	ПредставленияГруппКонстант.Вставить("УчетАлкоголя", НСтр("ru = 'Учет алкоголя'"));
	ПредставленияГруппКонстант.Вставить("ФункциональныеОпции", НСтр("ru = 'Функциональные опции'"));

	Возврат ПредставленияГруппКонстант;

КонецФункции

// Возвращает таблицу полного описания констант. Это главное место описания всех констант расширения.
//
// Параметры:
//  ТолькоАктуальные - Булево - Если истина, то в таблицу попадут только те константы, которые есть в описании констант.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица значений констант.
//   	* Константа - СправочникСсылка.бг_ДополнительныеКонстанты - Ссылка на константу.
//   	* ПометкаУдаления - Булево - Признак пометки удаления.
//   	* Наименование - Строка - Наименование константы из справочника.
//   	* Идентификатор - Строка - Идентификатор константы.
//   	* Описание - Строка - Описание константы из справочника.
//
Функция ТаблицаКонстантБД(ТолькоАктуальные) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бг_ДополнительныеКонстанты.Ссылка КАК Константа,
	|	бг_ДополнительныеКонстанты.ПометкаУдаления КАК ПометкаУдаления,
	|	бг_ДополнительныеКонстанты.Наименование КАК Наименование,
	|	бг_ДополнительныеКонстанты.Идентификатор КАК Идентификатор,
	|	бг_ДополнительныеКонстанты.Описание КАК Описание
	|ИЗ
	|	Справочник.бг_ДополнительныеКонстанты КАК бг_ДополнительныеКонстанты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор,
	|	ПометкаУдаления";
	
	ТаблицаКонстантБД = Запрос.Выполнить().Выгрузить();
	
	Если ТолькоАктуальные Тогда
		
		СтрокиКонстантБДУдалить = Новый Массив;
		
		Для каждого СтрокаКонстантыБД Из ТаблицаКонстантБД Цикл
		
			Если СтрокаКонстантыБД.ПометкаУдаления
				Или ПустаяСтрока(СтрокаКонстантыБД.Идентификатор) Тогда
				
				СтрокиКонстантБДУдалить.Добавить(СтрокаКонстантыБД);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого СтрокаКонстантыБД Из СтрокиКонстантБДУдалить Цикл
			ТаблицаКонстантБД.Удалить(СтрокаКонстантыБД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаКонстантБД;
	
КонецФункции

// Приводит состояние констант в БД в соответствии с актуальными константами, содержащимися в таблице описания констант.
// Все константы, имиеющие одинаковый идентификатор кроме первой помечаются на удаление, в них очищается идентификатор.
// По удаляемым константам очищаются значения в регистре.
// Если в элементе справочника константы ключевые реквизиты (Наименование, Описание и др.) отличаются от описания,
// то они обновляются.
//
Процедура АктуализироватьКонстанты() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	// Исключаем возможность одновременной актуализации констант несколькими пользователями,
	// вследствии чего в теории могут образоваться дубли.
	УстановитьБлокировкуНаСправочникКонстант();
	
	ТаблицаКонстантБД = ТаблицаКонстантБД(Ложь);
	ТаблицаКонстантБД.Индексы.Добавить("Идентификатор");
	
	ТаблицаОписанияКонстант = бг_КонстантыПовтИсп.ТаблицаОписанияКонстант();
	ТаблицаОписанияКонстант.Индексы.Добавить("Идентификатор");
	
	// Сравнить данные всех констант из БД с таблицей описания констант, выявить неописанные константы.
	КонстантыУдалить = Новый Массив;
	
    Для каждого ДанныеКонстантыБД Из ТаблицаКонстантБД Цикл
	
		Если ПустаяСтрока(ДанныеКонстантыБД.Идентификатор) Тогда
			
			Если Не ДанныеКонстантыБД.ПометкаУдаления Тогда
				КонстантыУдалить.Добавить(ДанныеКонстантыБД.Константа);
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ПараметрыПоискаОписания = Новый Структура("Идентификатор", ДанныеКонстантыБД.Идентификатор);
			СтрокиОписанияКонстанты = ТаблицаОписанияКонстант.НайтиСтроки(ПараметрыПоискаОписания);
			Если СтрокиОписанияКонстанты.Количество() = 0 Тогда
				КонстантыУдалить.Добавить(ДанныеКонстантыБД.Константа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
			
	// Создать отсутствующие константы и актуализировать ключевые поля, выявить неактуальные константы.
	Для каждого ОписаниеКонстанты Из ТаблицаОписанияКонстант Цикл
	
		ПараметрыПоискаКонстанты = Новый Структура("Идентификатор", ОписаниеКонстанты.Идентификатор);	
	    СтрокиДанныеКонстанты = ТаблицаКонстантБД.НайтиСтроки(ПараметрыПоискаКонстанты);
		
		Если СтрокиДанныеКонстанты.Количество() = 0 Тогда
			
			Попытка
				СоздатьКонстантуБД(ОписаниеКонстанты, Истина);
			Исключение
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Не удалось создать константу %1'"), ОписаниеКонстанты.Идентификатор));
					
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
					
				ВызватьИсключение;	
			КонецПопытки;
			
		Иначе
			
			Если ТребуетсяОбновлениеКонстанты(СтрокиДанныеКонстанты[0], ОписаниеКонстанты) Тогда
				
				Попытка
					ОбновитьКонстантуБД(СтрокиДанныеКонстанты[0].Константа, ОписаниеКонстанты);
				Исключение
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru='Не удалось обновить константу %1'"), ОписаниеКонстанты.Идентификатор));
						
					Если ТранзакцияАктивна() Тогда
						ОтменитьТранзакцию();
					КонецЕсли;
						
					ВызватьИсключение;	
				КонецПопытки;
			КонецЕсли;
			
			Для Индекс = 1 По СтрокиДанныеКонстанты.ВГраница() Цикл
				Если КонстантыУдалить.Найти(СтрокиДанныеКонстанты[Индекс].Константа) Тогда
					КонстантыУдалить.Добавить(СтрокиДанныеКонстанты[Индекс].Константа);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Пометить на удаление и очистить значения неактульных констант.
	Для каждого КонстантаУдалить Из КонстантыУдалить Цикл
	
		Попытка
			ОчиститьДанныеНеактуальнойКонстанты(КонстантаУдалить);
		Исключение
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Не удалось очистить данные константы %1'"), КонстантаУдалить));
				
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
				
			ВызватьИсключение;	
		КонецПопытки;
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйТаблицаОписанияКонстант()
	
	ТаблицаОписанияКонстант = Новый ТаблицаЗначений;
	ТаблицаОписанияКонстант.Колонки.Добавить("Идентификатор", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаОписанияКонстант.Колонки.Добавить("ЗначениеПоУмолчанию", ТипЗначенияКонстантПоУмолчанию());
	ТаблицаОписанияКонстант.Колонки.Добавить("ТипРазреза", Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаОписанияКонстант.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаОписанияКонстант.Колонки.Добавить("Раздел", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("Подраздел", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаОписанияКонстант.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	
	// Свойства для констант, тип значения которых располагается в другом расширении.
	ТаблицаОписанияКонстант.Колонки.Добавить("ХранитьСтроковыйГУИД", Новый ОписаниеТипов("Булево"));
	ТаблицаОписанияКонстант.Колонки.Добавить("ИмяТипа", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	// Имя особой формы редактирования значения константы.
	ТаблицаОписанияКонстант.Колонки.Добавить("ИмяФормы", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Возврат ТаблицаОписанияКонстант;
	
КонецФункции

Функция ТипЗначенияКонстантПоУмолчанию()
	
	// Типы из регистра.
	ТипыЗначенийКонстантПоУмолчанию = Новый Массив;
	
	ОписаниеТиповРегистра = Метаданные.РегистрыСведений.бг_ЗначенияДополнительныхКонстант.Ресурсы.Значение.Тип;
	Для каждого Тип Из ОписаниеТиповРегистра.Типы() Цикл
		ТипыЗначенийКонстантПоУмолчанию.Добавить(Тип);
	КонецЦикла;
	
	// Типы других расширений.
	ТипыЗначенийКонстантПоУмолчанию.Добавить(Тип("СправочникСсылка.адаптер_ПараметрыПодключения"));
	
	Возврат Новый ОписаниеТипов(ТипыЗначенийКонстантПоУмолчанию);
	
КонецФункции

Функция ДобавитьОписаниеКонстанты(ТаблицаОписанияКонстант, Идентификатор, Наименование, ТипЗначения, ПутьГруппыНастроек)

	НоваяКонстанта = ТаблицаОписанияКонстант.Добавить();
	
	НоваяКонстанта.Идентификатор = Идентификатор;
	НоваяКонстанта.Наименование = Наименование;
	НоваяКонстанта.ТипЗначения = ТипЗначения;
	
	Если СтрНайти(ПутьГруппыНастроек, ".") > 0 Тогда
		// Заданы и раздел, и подраздел, либо только подраздел.
		ЧастиГруппыНастроек = СтрРазделить(ПутьГруппыНастроек, ".", Истина);
		Если ЧастиГруппыНастроек.Количество() = 2 Тогда
			НоваяКонстанта.Раздел = ЧастиГруппыНастроек[0];
			НоваяКонстанта.Подраздел = ЧастиГруппыНастроек[1];
		КонецЕсли;
	Иначе
		// Подраздел не задан, раздел также может быть пустым.
		НоваяКонстанта.Раздел = ПутьГруппыНастроек;
	КонецЕсли;
	
	Возврат НоваяКонстанта;

КонецФункции

Функция ДанныеКонстантыБД(Идентификатор)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бг_ДополнительныеКонстанты.Ссылка КАК Константа,
	|	бг_ДополнительныеКонстанты.ПометкаУдаления КАК ПометкаУдаления,
	|	бг_ДополнительныеКонстанты.Наименование КАК Наименование,
	|	бг_ДополнительныеКонстанты.Идентификатор КАК Идентификатор,
	|	бг_ДополнительныеКонстанты.Описание КАК Описание
	|ИЗ
	|	Справочник.бг_ДополнительныеКонстанты КАК бг_ДополнительныеКонстанты
	|ГДЕ
	|	бг_ДополнительныеКонстанты.Идентификатор = &Идентификатор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция КлючевыеПоляКонстант()

	КлючевыеПоляКонстант = Новый Массив;
	
	КлючевыеПоляКонстант.Добавить("Идентификатор");
	КлючевыеПоляКонстант.Добавить("Наименование");
	КлючевыеПоляКонстант.Добавить("Описание");
	
	Возврат КлючевыеПоляКонстант;

КонецФункции

Функция ТребуетсяОбновлениеКонстанты(ДанныеКонстантыБД, ОписаниеКонстанты)

	Если ДанныеКонстантыБД.ПометкаУдаления Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ИмяПоля Из КлючевыеПоляКонстант() Цикл
		Если ДанныеКонстантыБД[ИмяПоля] <> ОписаниеКонстанты[ИмяПоля] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Процедура ОбновитьКонстантуБД(Константа, ОписаниеКонстанты)

	УстановитьПривилегированныйРежим(Истина);
	
	КонстантаОбъект = Константа.ПолучитьОбъект();
	
	КонстантаОбъект.ПометкаУдаления = Ложь;
	
	Для каждого ИмяПоля Из КлючевыеПоляКонстант() Цикл
		КонстантаОбъект[ИмяПоля] = ОписаниеКонстанты[ИмяПоля];
	КонецЦикла;

	КонстантаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьПроверки", Истина);
    КонстантаОбъект.Записать();
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru='Обновлена константа %1'"), КонстантаОбъект.Ссылка));
	
КонецПроцедуры

Функция СоздатьКонстантуБД(ОписаниеКонстанты, ВыводитьСообщениеПользователю = Ложь)
	
	КонстантаОбъект = Справочники.бг_ДополнительныеКонстанты.СоздатьЭлемент();
	
	Для каждого ИмяПоля Из КлючевыеПоляКонстант() Цикл
		КонстантаОбъект[ИмяПоля] = ОписаниеКонстанты[ИмяПоля];
	КонецЦикла;

    КонстантаОбъект.Записать();
	
	Если ВыводитьСообщениеПользователю Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Создана константа %1'"), КонстантаОбъект.Ссылка));
	КонецЕсли;
	
	Возврат КонстантаОбъект.Ссылка;

КонецФункции

Процедура УстановитьБлокировкуНаСправочникКонстант()

	Блокировка = Новый БлокировкаДанных;
	БлокировкаСправочникКонстант = Блокировка.Добавить("Справочник.бг_ДополнительныеКонстанты");
	БлокировкаСправочникКонстант.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();

КонецПроцедуры

Процедура ОчиститьДанныеНеактуальнойКонстанты(Константа)

	НаборЗаписейЗначенийКонстанты = РегистрыСведений.бг_ЗначенияДополнительныхКонстант.СоздатьНаборЗаписей();
	НаборЗаписейЗначенийКонстанты.Отбор.Константа.Установить(Константа);
	НаборЗаписейЗначенийКонстанты.Прочитать();
	
	Если НаборЗаписейЗначенийКонстанты.Количество() Тогда
		
		НаборЗаписейЗначенийКонстанты.Очистить();
		НаборЗаписейЗначенийКонстанты.Записать();
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Очищено значение неактуальной константы %1'"), Константа));
		
	КонецЕсли;
	
	КонстантаОбъект = Константа.ПолучитьОбъект();
	КонстантаОбъект.ПометкаУдаления = Истина;
	КонстантаОбъект.Идентификатор = "";
	КонстантаОбъект.Записать();
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru='Помечена на удаление неактуальная константа %1'"), Константа));

КонецПроцедуры

Функция СтрокаБезСимволовПереноса(ИсходнаяСтрока)

	Возврат СтрЗаменить(ИсходнаяСтрока, Символы.ПС, "");

КонецФункции

#КонецОбласти

#КонецЕсли
