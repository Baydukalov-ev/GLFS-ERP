
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	СкидкиНаценкиСервер.бг_ДобавитьКомандыВытеснения(ЭтаФорма, Элементы.СписокКонтекстноеМеню);
	СкидкиНаценкиСервер.бг_ДобавитьДинамическиеСпискиДополнительныхИсточников(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура бг_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если Элементы.Найти("НастройкаПорядкаЭлементовОбычное") <> Неопределено Тогда
		ЭлементФормы = Элементы.НастройкаПорядкаЭлементовОбычное;
		ЭлементФормы.Отображение = ОтображениеГруппыКнопок.Компактное;
		
		ЭлементФормы = СкидкиНаценкиСервер.бг_ГруппаКомандУправленияСтатусом(
			ЭтаФорма,
			"бг_ГруппаУправленияСтатусом",
			,
			Элементы.ГруппаКоманднаяПанель,
			Элементы.УстановитьСтатус
		);
		
		Элементы.Переместить(Элементы.УстановитьСтатус, ЭлементФормы);
		Элементы.Переместить(Элементы.ИсторияДействия, ЭлементФормы);
	КонецЕсли;
	
	СкидкиНаценкиКлиентСервер.бг_УстановитьПараметрыДинамическихСписковИсточников(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_ВытеснитьСкидки(Команда)
	
	СкидкиНаценкиКлиент.бг_ОткрытьФормуВытеснения(
		Элементы.Список,
		Команда.Имя,
		ТекущаяСкидка()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВытеснитьПериодыДействия(Команда)
	
	СкидкиНаценкиКлиент.бг_ОткрытьФормуВытеснения(
		Элементы.Список,
		Команда.Имя,
		ТекущаяСкидка()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ИсторияДействия(Команда)
	
	Источники = СкидкиНаценкиКлиент.бг_ВыделенныеИсточники(ЭтаФорма, Команда);
	
	Если НЕ Источники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуИстории(Источники[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_УстановитьСтатусДействует(Команда)
	
	Источники = СкидкиНаценкиКлиент.бг_ВыделенныеИсточники(ЭтаФорма, Команда);
	
	Если НЕ Источники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СкидкаНаценка = ТекущаяСкидка();
	
	ОткрытьФормуИзмененияСтатуса(
		СкидкаНаценка,
		Источники,
		ПредопределенноеЗначение("Перечисление.СтатусыДействияСкидок.Действует")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_УстановитьСтатусНеДействует(Команда)
	
	Источники = СкидкиНаценкиКлиент.бг_ВыделенныеИсточники(ЭтаФорма, Команда);
	
	Если НЕ Источники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СкидкаНаценка = ТекущаяСкидка();
	
	ОткрытьФормуИзмененияСтатуса(
		СкидкаНаценка,
		Источники,
		ПредопределенноеЗначение("Перечисление.СтатусыДействияСкидок.НеДействует")
	);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура бг_ОтборДатаСрезаПриИзмененииПосле(Элемент)
	
	СкидкиНаценкиКлиентСервер.бг_УстановитьПараметрыДинамическихСписковИсточников(ЭтаФорма,,, "ТекущаяДата");
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ОтборДатаСрезаОчисткаПосле(Элемент, СтандартнаяОбработка)
	
	СкидкиНаценкиКлиентСервер.бг_УстановитьПараметрыДинамическихСписковИсточников(ЭтаФорма,,, "ТекущаяДата");
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ИспользованиеВариантОтображенияСкидокНаценокПриИзменении(Элемент)
	
	ИмяСписка = СкидкиНаценкиКлиентСервер.бг_ИмяДинамическогоСписка(
		Элемент.Имя,
		"бг_Использование",
		"ВариантОтображенияСкидокНаценок"
	);
	
	Если НЕ ПустаяСтрока(ИмяСписка) Тогда
		СкидкиНаценкиКлиентСервер.бг_УстановитьПараметрыДинамическихСписковИсточников(ЭтаФорма, ИмяСписка,, "Статус");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
&После("СписокПриАктивизацииСтрокиНаСервере")
Процедура бг_СписокПриАктивизацииСтрокиНаСервере(СкидкаНаценка)
	
	СкидкиНаценкиКлиентСервер.бг_УстановитьПараметрыДинамическихСписковИсточников(ЭтаФорма,, СкидкаНаценка, "СкидкаНаценка");
	
КонецПроцедуры

&НаСервере
&После("УстановитьУсловноеОформление")
Процедура бг_УстановитьУсловноеОформление()
	
	СкидкиНаценкиСервер.бг_ДополнитьУсловноеОформлениеСписковДополнительныхИсточников(ЭтаФорма);
	
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;

	// Действует по контрагентам
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетНаСкладах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВКартахЛояльности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВТиповыхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВИндивидуальныхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетПоКонтрагентам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Действует по контрагентам';
	|en = 'Valid with Counterparties'"));
	
	// Действует в договорах
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетНаСкладах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВКартахЛояльности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВТиповыхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВИндивидуальныхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВДоговорах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Действует в договорах';
	|en = 'Valid in contracts'"));

	// Действует в пунктах назначения
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетНаСкладах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВКартахЛояльности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВТиповыхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВИндивидуальныхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВПунктахНазначения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Действует в пунктах назначения';
	|en = 'Valid in destinations'"));

	// Действует в каналах продаж
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетНаСкладах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВКартахЛояльности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВТиповыхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВИндивидуальныхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВКаналахПродаж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Действует в каналах продаж';
	|en = 'Valid in sales channels'"));

	// Действует в территориях
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетНаСкладах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВКартахЛояльности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВТиповыхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВИндивидуальныхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВТерриториях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Действует в территориях';
	|en = 'Valid in territories'"));

	// Действует в сегментах
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Статус");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетНаСкладах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВКартахЛояльности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВТиповыхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВИндивидуальныхСоглашениях");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДействуетВСегментах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Действует в сегментах';
	|en = 'Valid in segments'"));

КонецПроцедуры

&НаСервере
&После("ОбновитьДанныеНаСервере")
Процедура бг_ОбновитьДанныеНаСервере(СкидкаНаценка)
	
	СкидкиНаценкиКлиентСервер.бг_ОбновитьДинамическиеСписки(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ТекстЗапросаДинамическогоСписка")
Функция бг_ТекстЗапросаДинамическогоСписка()

	ЗапросТекст = "ВЫБРАТЬ
	|	МИНИМУМ(Т.Период) КАК Период,
	|	Т.СкидкаНаценка КАК СкидкаНаценка
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = &СкладПоУмолчанию) КАК Срез
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок КАК Т
	|		ПО (Т.СкидкаНаценка = Срез.СкидкаНаценка)
	|			И (Т.Период > Срез.Период)
	|			И (Т.Источник = &СкладПоУмолчанию)
	|			И (Т.Статус <> Срез.Статус)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;
#Вставка
	|ВЫБРАТЬ &КонтрагентыТаблица;
	|ВЫБРАТЬ &ДоговорыТаблица;
	|ВЫБРАТЬ &ПунктыНазначенияТаблица;
	|ВЫБРАТЬ &КаналыПродажТаблица;
	|ВЫБРАТЬ &ТерриторииТаблица;
	|ВЫБРАТЬ &СегментыТаблица;
#КонецВставки
	|ВЫБРАТЬ &КартыЛояльностиТаблица;
	|ВЫБРАТЬ &ТиповыеСоглашенияТаблица;
	|ВЫБРАТЬ &ИндивидуальныеСоглашенияТаблица;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК СкидкаНаценка,
	|	КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеНаСкладах
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекущаяДата,
	|			Источник ССЫЛКА Справочник.Склады
	|				И Источник <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникСкидкиНаценки.Наименование КАК Наименование,
	|	СправочникСкидкиНаценки.ЭтоГруппа КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА СправочникСкидкиНаценки.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА СправочникСкидкиНаценки.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Максимум)
	|						ТОГДА 8
	|					КОГДА СправочникСкидкиНаценки.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Минимум)
	|						ТОГДА 16
	|					КОГДА СправочникСкидкиНаценки.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Сложение)
	|						ТОГДА 0
	|					КОГДА СправочникСкидкиНаценки.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Умножение)
	|						ТОГДА 4
	|					КОГДА СправочникСкидкиНаценки.ВариантСовместногоПрименения = ЗНАЧЕНИЕ(Перечисление.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение)
	|						ТОГДА 12
	|				КОНЕЦ + ВЫБОР
	|					КОГДА СправочникСкидкиНаценки.ПометкаУдаления
	|						ТОГДА 3
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Процент)
	|					ТОГДА ВЫБОР
	|							КОГДА СправочникСкидкиНаценки.ЗначениеСкидкиНаценки < 0
	|								ТОГДА 32
	|							ИНАЧЕ 28
	|						КОНЕЦ
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Подарок)
	|						ИЛИ СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Количество)
	|					ТОГДА 36
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма)
	|					ТОГДА ВЫБОР
	|							КОГДА СправочникСкидкиНаценки.ЗначениеСкидкиНаценки < 0
	|								ТОГДА 40
	|							ИНАЧЕ 44
	|						КОНЕЦ
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы)
	|					ТОГДА ВЫБОР
	|							КОГДА СправочникСкидкиНаценки.ЗначениеСкидкиНаценки < 0
	|								ТОГДА 40
	|							ИНАЧЕ 44
	|						КОНЕЦ
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки)
	|					ТОГДА ВЫБОР
	|							КОГДА СправочникСкидкиНаценки.ЗначениеСкидкиНаценки < 0
	|								ТОГДА 40
	|							ИНАЧЕ 44
	|						КОНЕЦ
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены)
	|					ТОГДА 48
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сообщение)
	|					ТОГДА 52
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.КартаЛояльности)
	|					ТОГДА 52
	|				КОГДА СправочникСкидкиНаценки.СпособПредоставления ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|					ТОГДА 56
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СправочникСкидкиНаценки.ПометкаУдаления
	|					ТОГДА 3
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК Картинка,
	|	СправочникСкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	СправочникСкидкиНаценки.Управляемая КАК Управляемая,
	|	СправочникСкидкиНаценки.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникСкидкиНаценки.Ссылка КАК Ссылка,
	|	СправочникСкидкиНаценки.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеНаСкладах.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетНаСкладах,
	|	ЕСТЬNULL(ИспользованиеНаСкладах.Количество, 0) КАК КоличествоСкладов,
#Вставка
	|	&КонтрагентыПоля,
	|	&ДоговорыПоля,
	|	&ПунктыНазначенияПоля,
	|	&КаналыПродажПоля,
	|	&ТерриторииПоля,
	|	&СегментыПоля,
#КонецВставки
	|	&КартыЛояльностиПоля,
	|	&ТиповыеСоглашенияПоля,
	|	&ИндивидуальныеСоглашенияПоля,
	|	ВЫБОР
	|		КОГДА СправочникСкидкиНаценки.ЭтоГруппа
	|			ТОГДА NULL
	|		ИНАЧЕ ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует))
	|	КОНЕЦ КАК Статус,
	|	ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ДействиеСкидокНаценокСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ДействиеСкидокНаценокСрезПервых.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ЕСТЬNULL(ДОБАВИТЬКДАТЕ(Таблица.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СправочникСкидкиНаценки
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = &СкладПоУмолчанию) КАК ДействиеСкидокНаценокСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ Таблица КАК Таблица
	|			ПО (Таблица.СкидкаНаценка = ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка)
	|		ПО (ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПервых(&ТекущаяДата, Источник = &СкладПоУмолчанию) КАК ДействиеСкидокНаценокСрезПервых
	|		ПО (ДействиеСкидокНаценокСрезПервых.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеНаСкладах КАК ИспользованиеНаСкладах
	|		ПО (ИспользованиеНаСкладах.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}
#Вставка
	|		,&КонтрагентыСоединение
	|		,&ДоговорыСоединение
	|		,&ПунктыНазначенияСоединение
	|		,&КаналыПродажСоединение
	|		,&ТерриторииСоединение
	|		,&СегментыСоединение
#КонецВставки
	|		,&КартыЛояльностиСоединение
	|		,&ТиповыеСоглашенияСоединение
	|		,&ИндивидуальныеСоглашенияСоединение";

#Вставка
	ДобавитьВЗапросТекстИнформациюПоКонтрагентам(ЗапросТекст);
	ДобавитьВЗапросТекстИнформациюПоДоговорам(ЗапросТекст);
	ДобавитьВЗапросТекстИнформациюПоПунктамНазначения(ЗапросТекст);
	ДобавитьВЗапросТекстИнформациюПоКаналамПродаж(ЗапросТекст);
	ДобавитьВЗапросТекстИнформациюПоТерриториям(ЗапросТекст);
	ДобавитьВЗапросТекстИнформациюПоСегментам(ЗапросТекст);
#КонецВставки
	ДобавитьВЗапросТекстИнформациюПоКартамЛояльности(ЗапросТекст);
	ДобавитьВЗапросТекстИнформациюПоТиповымСоглашениям(ЗапросТекст);
	ДобавитьВЗапросТекстИнформациюПоИндивидуальнымСоглашениям(ЗапросТекст);

	Возврат ЗапросТекст;

КонецФункции

&НаСервере
Процедура ДобавитьВЗапросТекстИнформациюПоКонтрагентам(ЗапросТекст)
	
	КонтрагентыТаблица = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК СкидкаНаценка,
	|	КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеПоКонтрагентам
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.Контрагенты) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;";
	
	КонтрагентыПоля = "
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеПоКонтрагентам.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетПоКонтрагентам,
	|	ЕСТЬNULL(ИспользованиеПоКонтрагентам.Количество, 0) КАК КоличествоКонтрагентов,";
	
	КонтрагентыСоединение = "
	|	{ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеПоКонтрагентам КАК ИспользованиеПоКонтрагентам
	|	ПО (ИспользованиеПоКонтрагентам.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "&КонтрагентыПоля,", КонтрагентыПоля);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "ВЫБРАТЬ &КонтрагентыТаблица;", КонтрагентыТаблица);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, ",&КонтрагентыСоединение", КонтрагентыСоединение);
	
КонецПроцедуры
&НаСервере
Процедура ДобавитьВЗапросТекстИнформациюПоДоговорам(ЗапросТекст)
	
	ДоговорыТаблица = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК СкидкаНаценка,
	|	КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеВДоговорах
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;";
	
	ДоговорыПоля = "
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВДоговорах.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВДоговорах,
	|	ЕСТЬNULL(ИспользованиеВДоговорах.Количество, 0) КАК КоличествоДоговоров,";
	
	ДоговорыСоединение = "
	|	{ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеВДоговорах КАК ИспользованиеВДоговорах
	|	ПО (ИспользованиеВДоговорах.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ДоговорыПоля,", ДоговорыПоля);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "ВЫБРАТЬ &ДоговорыТаблица;", ДоговорыТаблица);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, ",&ДоговорыСоединение", ДоговорыСоединение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВЗапросТекстИнформациюПоПунктамНазначения(ЗапросТекст)
	
	ПунктыНазначенияТаблица = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК СкидкаНаценка,
	|	КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеВПунктахНазначения
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.битПунктыНазначения) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;";
	
	ПунктыНазначенияПоля = "
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВПунктахНазначения.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВПунктахНазначения,
	|	ЕСТЬNULL(ИспользованиеВПунктахНазначения.Количество, 0) КАК КоличествоПунктовНазначения,";
	
	ПунктыНазначенияСоединение = "
	|	{ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеВПунктахНазначения КАК ИспользованиеВПунктахНазначения
	|	ПО (ИспользованиеВПунктахНазначения.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ПунктыНазначенияПоля,", ПунктыНазначенияПоля);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "ВЫБРАТЬ &ПунктыНазначенияТаблица;", ПунктыНазначенияТаблица);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, ",&ПунктыНазначенияСоединение", ПунктыНазначенияСоединение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВЗапросТекстИнформациюПоКаналамПродаж(ЗапросТекст)
	
	КаналыПродажТаблица = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК СкидкаНаценка,
	|	КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеВКаналахПродаж
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.битКаналыПродаж) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;";
	
	КаналыПродажПоля = "
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВКаналахПрода.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВКаналахПродаж,
	|	ЕСТЬNULL(ИспользованиеВКаналахПрода.Количество, 0) КАК КоличествоКаналовПродаж,";
	
	КаналыПродажСоединение = "
	|	{ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеВКаналахПродаж КАК ИспользованиеВКаналахПрода
	|	ПО (ИспользованиеВКаналахПрода.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "&КаналыПродажПоля,", КаналыПродажПоля);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "ВЫБРАТЬ &КаналыПродажТаблица;", КаналыПродажТаблица);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, ",&КаналыПродажСоединение", КаналыПродажСоединение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВЗапросТекстИнформациюПоТерриториям(ЗапросТекст)
	
	ТерриторииТаблица = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК СкидкаНаценка,
	|	КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеВТерриториях
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.битТерриторииПунктовНазначения) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;";
	
	ТерриторииПоля = "
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВТерриториях.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВТерриториях,
	|	ЕСТЬNULL(ИспользованиеВТерриториях.Количество, 0) КАК КоличествоТерриторий,";
	
	ТерриторииСоединение = "
	|	{ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеВТерриториях КАК ИспользованиеВТерриториях
	|	ПО (ИспользованиеВТерриториях.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ТерриторииПоля,", ТерриторииПоля);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "ВЫБРАТЬ &ТерриторииТаблица;", ТерриторииТаблица);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, ",&ТерриторииСоединение", ТерриторииСоединение);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВЗапросТекстИнформациюПоСегментам(ЗапросТекст)
	
	СегментыТаблица = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.СкидкаНаценка КАК СкидкаНаценка,
	|	КОЛИЧЕСТВО(Т.Источник) КАК Количество
	|ПОМЕСТИТЬ ИспользованиеВСегментах
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.СегментыПартнеров) КАК Т
	|ГДЕ
	|	Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.СкидкаНаценка
	|;";
	
	СегментыПоля = "
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИспользованиеВСегментах.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДействуетВСегментах,
	|	ЕСТЬNULL(ИспользованиеВСегментах.Количество, 0) КАК КоличествоСегментов,";
	
	СегментыСоединение = "
	|	{ЛЕВОЕ СОЕДИНЕНИЕ ИспользованиеВСегментах КАК ИспользованиеВСегментах
	|	ПО (ИспользованиеВСегментах.СкидкаНаценка = СправочникСкидкиНаценки.Ссылка)}";
	
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "&СегментыПоля,", СегментыПоля);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, "ВЫБРАТЬ &СегментыТаблица;", СегментыТаблица);
	ЗапросТекст = СтрЗаменить(ЗапросТекст, ",&СегментыСоединение", СегментыСоединение);
	
КонецПроцедуры

#КонецОбласти
