#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СкидкаНаценка = Параметры.СкидкаНаценка;
	Если НЕ ЗначениеЗаполнено(СкидкаНаценка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьДанныеФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Снять(Команда)
	УстановитьДляВыделенныхСтрок("ВыполнитьВытеснение", Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Установить(Команда)
	УстановитьДляВыделенныхСтрок("ВыполнитьВытеснение", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВытесняемыеСкидкиНаценкиВыполнитьВытеснениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ВытесняемыеСкидкиНаценки.ТекущиеДанные;
	УстановитьРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), "ВыполнитьВытеснение", ТекущиеДанные["ВыполнитьВытеснение"]);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВытеснение(Команда)
	
	НаименованиеЗадания = НСтр(
		"ru = 'Вытеснение скидок (наценок)';
		|en = 'Displacing discounts (margins)'"
	);
	
	ОписаниеЗадания = ЗапуститьЗадание(
		"бг_ВытеснитьИнтервалыДействия",
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(АдресТаблицыВытесненияИнтервалов()),
		НаименованиеЗадания,
		СкидкаНаценка.УникальныйИдентификатор(),
		УникальныйИдентификатор
	);
	
	ОжидатьЗавершения(
		ОписаниеЗадания,
		Новый ОписаниеОповещения("ЗакончитьВытеснение", ЭтаФорма, ОбновляемыеДанные())
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Свернуть(Команда)
	ВытесняемыеСтроки = ВытесняемыеСкидкиНаценки.ПолучитьЭлементы();
	Для каждого ВытесняемаяСтрока из ВытесняемыеСтроки Цикл
		Элементы.ВытесняемыеСкидкиНаценки.Свернуть(ВытесняемаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Развернуть(Команда)
	ВытесняемыеСтроки = ВытесняемыеСкидкиНаценки.ПолучитьЭлементы();
	Для каждого ВытесняемаяСтрока из ВытесняемыеСтроки Цикл
		Элементы.ВытесняемыеСкидкиНаценки.Развернуть(ВытесняемаяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеФормы();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФоновыеЗадания

&НаСервереБезКонтекста
Функция ЗапуститьЗадание(ИмяПроцедуры, ЭтоФункция, ПараметрыПроцедуры, НаименованиеЗадания, КлючЗадания, ИдентификаторФормы = Неопределено)
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.КлючФоновогоЗадания         = КлючЗадания;
	ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	ПараметрыВыполнения.Вставить("ЭтоФункция", ЭтоФункция);
	
	ОписаниеФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"Справочники.СкидкиНаценки." + ИмяПроцедуры,
		ПараметрыПроцедуры,
		ПараметрыВыполнения
	);
	ОписаниеФоновогоЗадания.Вставить("Наименование", НаименованиеЗадания);
	
	Возврат ОписаниеФоновогоЗадания;
КонецФункции

&НаКлиенте
Процедура ОжидатьЗавершения(ОписаниеЗадания, ОписаниеОповещения)
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьСообщения    = Ложь;
	ПараметрыОжидания.Интервал             = 1;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения(
		"ПриЗавершенииЗадания",
		ЭтаФорма,
		Новый Структура("ОписаниеОповещения", ОписаниеОповещения)
	);
	
	Элементы.СтраницыРежимаФормы.ТекущаяСтраница = Элементы.ОжиданиеРезультатов;
	Элементы.НазваниеЗадания.Заголовок           = ОписаниеЗадания.Наименование;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ОписаниеЗадания,
		ОповещениеОЗавершении,
		ПараметрыОжидания
	);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииЗадания(Результат, ДопПараметры) Экспорт
	
	Элементы.СтраницыРежимаФормы.ТекущаяСтраница = Элементы.ОжиданияПользователя;
	Элементы.НазваниеЗадания.Заголовок           = "";
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОповещения, Результат);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		Если НЕ ПустаяСтрока(Результат.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр(
					"ru = 'Фоновая операция завершилась с ошибкой ""%1""';
					|en = 'Background operation failed with error ""%1""'"
				), 
				Результат.КраткоеПредставлениеОшибки
			);
		Иначе
			ТекстОшибки = НСтр(
				"ru = 'Фоновая операци завершилась с неизвестной ошибкой';
				|en = 'Background operation failed with an unknown error'"
			);
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьДанныеФормы(АдресОшибокВытеснения = Неопределено)
	
	НаименованиеЗадания = НСтр(
		"ru = 'Подготовка данных для вытеснения скидок (наценок)';
		|en = 'Preparing discounts (margins) displacement data'"
	);
	
	ОписаниеЗадания = ЗапуститьЗадание(
		"бг_ПодготовитьДанныеВытесненияИнтерваловДействия",
		Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СкидкаНаценка),
		НаименованиеЗадания,
		СкидкаНаценка.УникальныйИдентификатор(),
		УникальныйИдентификатор
	);
	
	ОповещениеОбОкончании = Новый ОписаниеОповещения(
		"ЗагрузитьДанныеВытеснения",
		ЭтаФорма,
		Новый Структура("ОшибкиВытеснения", АдресОшибокВытеснения)
	);
	
	ОжидатьЗавершения(ОписаниеЗадания, ОповещениеОбОкончании);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВытеснения(Результат, ДопПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда
		
		ЗагрузитьДанныеВытесненияНаСервере(Результат.АдресРезультата);
		
		Если ЭтоАдресВременногоХранилища(ДопПараметры.ОшибкиВытеснения) Тогда
			ВывестиОшибкиВытеснения(ДопПараметры.ОшибкиВытеснения);
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр(
			"ru = 'Отсутствуют результаты фоновой операции получения данных настройки вытеснения';
			|en = 'No data acquisition background operation results'"
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВытесненияНаСервере(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ПериодыДействия.Загрузить(Результат.ПериодыДействия);
	ЗначениеВРеквизитФормы(Результат.ВытесняемыеСкидкиНаценки, "ВытесняемыеСкидкиНаценки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьВытеснение(Результат, ДопПараметры) Экспорт
	
	Оповестить("Запись_ДействиеСкидокНаценок", ДопПараметры, ЭтаФорма);
	ОбновитьДанныеФормы(Результат.АдресРезультата);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыВытесненияИнтервалов()
	
	ДеревоВытесняемыхСкидокНаценок = РеквизитФормыВЗначение("ВытесняемыеСкидкиНаценки");
	ТаблицаВытесненияИнтервалов    = Новый ТаблицаЗначений;
	
	бг_ОбщегоНазначенияСервер.СкопироватьКолонки(
		ДеревоВытесняемыхСкидокНаценок.Колонки,
		ТаблицаВытесненияИнтервалов.Колонки,
		"СкидкаНаценка,Источник,ДатаНачала,ДатаОкончания,НачалоДействия,ОкончаниеДействия"
	);
	
	ОтборИнтервалов      = Новый Структура("ВыполнитьВытеснение,ДетальнаяЗапись", Истина, Истина);
	ВытесняемыеИнтервалы = ДеревоВытесняемыхСкидокНаценок.Строки.НайтиСтроки(ОтборИнтервалов, Истина);
	Для каждого Интервал из ВытесняемыеИнтервалы Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаВытесненияИнтервалов.Добавить(), Интервал);
	КонецЦикла;
	
	// почему-то при использовании временного хранилища
	// в фоновом задании получается Неопределено
	// независимо от типа значения, помещённого в хранилище
	// релиз 8.3.20.1549
	// следующие примеры дают одинаковый результат, Неопределено:
	// АдресВходныхДанныхВытеснения = ПоместитьВоВременноеХранилище(ТаблицаВытесненияИнтервалов, УникальныйИдентификатор);
	// АдресВходныхДанныхВытеснения = ПоместитьВоВременноеХранилище(
	// 	ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаВытесненияИнтервалов),
	// 	УникальныйИдентификатор
	// );
	АдресВходныхДанныхВытеснения = ОбщегоНазначения.ЗначениеВСтрокуXML(ТаблицаВытесненияИнтервалов);
	
	Возврат АдресВходныхДанныхВытеснения;
	
КонецФункции

&НаКлиенте
Процедура ВывестиОшибкиВытеснения(АдресОшибок)
	
	Ошибки = ПолучитьИзВременногоХранилища(АдресОшибок);
	
	Для каждого Ошибка из Ошибки Цикл
		
		ИдентификаторСтрокиСкидки    = Неопределено;
		ИдентификаторСтрокиИсточника = Неопределено;
		
		СтрокиСкидок = ВытесняемыеСкидкиНаценки.ПолучитьЭлементы();
		Для каждого СтрокаСкидки из СтрокиСкидок Цикл
			Если СтрокаСкидки.СкидкаНаценка = Ошибка.СкидкаНаценка Тогда
				ИдентификаторСтрокиСкидки = СтрокиСкидок.Индекс(СтрокаСкидки);
				СтрокиИсточников = СтрокаСкидки.ПолучитьЭлементы();
				Для каждого СтрокаИсточника из СтрокиИсточников Цикл
					Если СтрокаИсточника.Источник = Ошибка.Источник Тогда
						ИдентификаторСтрокиИсточника = СтрокиИсточников.Индекс(СтрокаИсточника);
						СтрокаИсточника.ВыполнитьВытеснение = Ложь;
						УстановитьРекурсивно(СтрокаИсточника.ПолучитьЭлементы(), "ВыполнитьВытеснение", Ложь);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Путь = "ВытесняемыеСкидкиНаценки";
		Если ИдентификаторСтрокиСкидки <> Неопределено Тогда
			Если ИдентификаторСтрокиИсточника <> Неопределено Тогда
				Путь = Путь + СтрШаблон("[%1]", Формат(ИдентификаторСтрокиИсточника, "ЧН=0;ЧГ=0"));
			Иначе
				Путь = Путь + СтрШаблон("[%1]", Формат(ИдентификаторСтрокиСкидки, "ЧН=0;ЧГ=0"));
			КонецЕсли;
		КонецЕсли;
		
		ТекстОшибки = НСтр(
			"ru = 'Не удалось вытеснить скидку (наценку) %1 для получателя %2 из-за ошибки %3';
			|en = 'Failed to displace discount (mark-up) %1 for recipient %2 due to error %3'"
		);
		ТекстОшибки = СтрШаблон(ТекстОшибки, Ошибка.СкидкаНаценка, Ошибка.Источник, Ошибка.Ошибка);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,, Путь + ".Представление");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьРекурсивно(КоллекцияЭлементовДерева, ИмяСвойства, ЗначениеСвойства)
	Для каждого ЭлементДерева из КоллекцияЭлементовДерева Цикл
		ЭлементДерева[ИмяСвойства] = ЗначениеСвойства;
		УстановитьРекурсивно(ЭлементДерева.ПолучитьЭлементы(), ИмяСвойства, ЗначениеСвойства);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДляВыделенныхСтрок(ИмяСвойства, ЗначениеСвойства)
	ВыделенныеСтроки = Элементы.ВытесняемыеСкидкиНаценки.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для каждого ИдентификаторСтроки из ВыделенныеСтроки Цикл
			ТекущиеДанные = ВытесняемыеСкидкиНаценки.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ТекущиеДанные <> Неопределено Тогда
				ТекущиеДанные[ИмяСвойства] = ЗначениеСвойства;
				УстановитьРекурсивно(ТекущиеДанные.ПолучитьЭлементы(), ИмяСвойства, ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьРекурсивно(ВытесняемыеСкидкиНаценки.ПолучитьЭлементы(), ИмяСвойства, ЗначениеСвойства);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ОбновляемыеДанные()
	СкидкиНаценки = Новый Массив;
	Источники     = Новый Массив;
	
	СтрокиСкидок = ВытесняемыеСкидкиНаценки.ПолучитьЭлементы();
	Для каждого СтрокаСкидки из СтрокиСкидок Цикл
		Если СтрокаСкидки.ВыполнитьВытеснение Тогда
			СкидкиНаценки.Добавить(СтрокаСкидки.СкидкаНаценка);
			СтрокиИсточников = СтрокаСкидки.ПолучитьЭлементы();
			Для каждого СтрокаИсточника из СтрокиИсточников Цикл
				Если СтрокаИсточника.ВыполнитьВытеснение Тогда
					Источники.Добавить(СтрокаИсточника.Источник);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СкидкаНаценка,Источник", СкидкиНаценки, Источники);
КонецФункции

#КонецОбласти
