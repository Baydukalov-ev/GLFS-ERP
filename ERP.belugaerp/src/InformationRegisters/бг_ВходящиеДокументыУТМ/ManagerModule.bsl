
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает данные не обработанных ранее записей регистра по указанному коду ФС РАР.
//
// Параметры:
//  ИдентификаторФСРАР - Строка - Код организации в ФС РАР
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица входящих для загрузки с колонками:
//     * АдресДокумента   - строка  
//     * Идентификатор    - строка
//     * ТекстОбъектаXDTO - ХранилищеЗначения
//
Функция ПоИдентификаторуФСРАР(ИдентификаторФСРАР) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторФСРАР", ИдентификаторФСРАР);
	Запрос.УстановитьПараметр("СтатусыКОбработке",  Перечисления.бг_СтатусыВходящихДокументовУТМ.КОбработке());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	бг_ВходящиеДокументыУТМ.АдресДокумента КАК АдресДокумента,
	|	бг_ВходящиеДокументыУТМ.Идентификатор КАК Идентификатор,
	|	бг_ВходящиеДокументыУТМ.ТекстОбъектаXDTO КАК ТекстОбъектаXDTO
	|ИЗ
	|	РегистрСведений.бг_ВходящиеДокументыУТМ КАК бг_ВходящиеДокументыУТМ
	|ГДЕ
	|	бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР = &ИдентификаторФСРАР
	|	И НЕ бг_ВходящиеДокументыУТМ.ОбработанВERP
	|	И бг_ВходящиеДокументыУТМ.Статус В(&СтатусыКОбработке)
	|	И бг_ВходящиеДокументыУТМ.ПопытокЗагрузить < 3
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторФСРАР,
	|	бг_ВходящиеДокументыУТМ.ДатаОперации,
	|	Идентификатор,
	|	АдресДокумента";
	
	ВходящиеДокументыУТМ = Запрос.Выполнить().Выгрузить();
	Если Не бг_КонстантыПовтИсп.ЗначениеКонстанты("НеОбрабатыватьПовторноЗаписиУТМСОдинаковымАдресомДокумента") Тогда
		Возврат ВходящиеДокументыУТМ;
	Иначе
		Возврат ВходящиеДокументыБезДублей(ВходящиеДокументыУТМ);
	КонецЕсли;
	
КонецФункции

// Возвращает данные регистра по указанным ключам записей.
//
// Параметры:
//  КлючиЗаписей - Массив из РегистрСведенийКлючЗаписи
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица входящих для загрузки с колонками:
//     * АдресДокумента   - строка  
//     * Идентификатор    - строка
//     * ТекстОбъектаXDTO - ХранилищеЗначения
//
Функция ПоКлючамЗаписей(КлючиЗаписей) Экспорт
	
	ПоляОтбора = Новый Массив;
	ПоляОтбора.Добавить(Метаданные.РегистрыСведений.бг_ВходящиеДокументыУТМ.Измерения.ИдентификаторФСРАР);
	ПоляОтбора.Добавить(Метаданные.РегистрыСведений.бг_ВходящиеДокументыУТМ.Измерения.АдресДокумента);
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	КолонкиОтбора = Новый Массив;
	Для Каждого Поле Из ПоляОтбора Цикл
		ТаблицаОтбора.Колонки.Добавить(Поле.Имя, Поле.Тип);
		КолонкиОтбора.Добавить(Поле.Имя)
	КонецЦикла;
	КолонкиОтбора = СтрСоединить(КолонкиОтбора, ","); 
	
	Для Каждого КлючЗаписи Из КлючиЗаписей Цикл 
		ЗаписьОтбора = ТаблицаОтбора.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьОтбора, КлючЗаписи);
	КонецЦикла;	
	ТаблицаОтбора.Свернуть(КолонкиОтбора);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	бг_ВходящиеДокументыУТМ.АдресДокумента КАК АдресДокумента,
	|	бг_ВходящиеДокументыУТМ.Идентификатор КАК Идентификатор,
	|	бг_ВходящиеДокументыУТМ.ТекстОбъектаXDTO КАК ТекстОбъектаXDTO
	|ИЗ
	|	РегистрСведений.бг_ВходящиеДокументыУТМ КАК бг_ВходящиеДокументыУТМ
	|ГДЕ
	|	&ОтборПоКлючамВходящихДокументов
	|	И бг_ВходящиеДокументыУТМ.ПопытокЗагрузить < 3
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторФСРАР,
	|	бг_ВходящиеДокументыУТМ.ДатаОперации,
	|	Идентификатор,
	|	АдресДокумента";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ОтборПоКлючамВходящихДокументов",
			СтрШаблон("(%1) В (&ТаблицаОтбора)", КолонкиОтбора));	
	
	ВходящиеДокументыУТМ = Запрос.Выполнить().Выгрузить();
	Если Не бг_КонстантыПовтИсп.ЗначениеКонстанты("НеОбрабатыватьПовторноЗаписиУТМСОдинаковымАдресомДокумента") Тогда
		Возврат ВходящиеДокументыУТМ;
	Иначе
		Возврат ВходящиеДокументыБезДублей(ВходящиеДокументыУТМ);
	КонецЕсли;
	
КонецФункции

// Удаляет неактуальные записи в регистре сведений Входящие документы УТМ
// Параметры:
//	ДатаАктуальности - Дата - дата, до которой требуется удалить записи.
//	ИдентификаторФСРАР - Строка - код организации ЕГАИС.
//
Процедура УдалитьНеАктуальныеЗаписиУТМ(ДатаАктуальности, ИдентификаторФСРАР = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	бг_ВходящиеДокументыУТМ.ТранспортныйМодуль КАК ТранспортныйМодуль,
	|	бг_ВходящиеДокументыУТМ.АдресДокумента КАК АдресДокумента,
	|	бг_ВходящиеДокументыУТМ.Грузоотправитель КАК Грузоотправитель,
	|	бг_ВходящиеДокументыУТМ.ДокументЕГАИС КАК ДокументЕГАИС,
	|	бг_ВходящиеДокументыУТМ.Идентификатор КАК Идентификатор,
	|	бг_ВходящиеДокументыУТМ.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.бг_ВходящиеДокументыУТМ КАК бг_ВходящиеДокументыУТМ
	|ГДЕ
	|	бг_ВходящиеДокументыУТМ.ДатаОперации < &ДатаАктуальности
	|	И &ОтборПоКодуФСРАР";
	
	Если ПустаяСтрока(ИдентификаторФСРАР) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКодуФСРАР", "ИСТИНА");
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКодуФСРАР",
			"бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР = &ИдентификаторФСРАР");
		Запрос.УстановитьПараметр("ИдентификаторФСРАР", ИдентификаторФСРАР);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДублирующиесяЗаписи(ИдентификаторФСРАР, ОрганизацияЕГАИС) Экспорт

	Если Не бг_КонстантыПовтИсп.ЗначениеКонстанты("НеОбрабатыватьПовторноЗаписиУТМСОдинаковымАдресомДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторФСРАР", ИдентификаторФСРАР);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СтатусыКОбработке",  Перечисления.бг_СтатусыВходящихДокументовУТМ.КОбработке());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	бг_ВходящиеДокументыУТМ.ТранспортныйМодуль КАК ТранспортныйМодуль,
	|	бг_ВходящиеДокументыУТМ.АдресДокумента КАК АдресДокумента,
	|	бг_ВходящиеДокументыУТМ.Грузоотправитель КАК Грузоотправитель,
	|	бг_ВходящиеДокументыУТМ.ДокументЕГАИС КАК ДокументЕГАИС,
	|	бг_ВходящиеДокументыУТМ.Идентификатор КАК Идентификатор,
	|	бг_ВходящиеДокументыУТМ.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.бг_ВходящиеДокументыУТМ КАК бг_ВходящиеДокументыУТМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|		ПО бг_ВходящиеДокументыУТМ.АдресДокумента = ЕГАИСПрисоединенныеФайлы.бг_АдресДокумента
	|			И (ЕГАИСПрисоединенныеФайлы.бг_АдресДокумента <> """")
	|			И (ВЫБОР
	|				КОГДА ЕГАИСПрисоединенныеФайлы.Документ ССЫЛКА Документ.ТТНВходящаяЕГАИС
	|					ТОГДА ВЫРАЗИТЬ(ЕГАИСПрисоединенныеФайлы.Документ КАК Документ.ТТНВходящаяЕГАИС).ИдентификаторЕГАИС = бг_ВходящиеДокументыУТМ.ИдентификаторТТН
	|				КОГДА ЕГАИСПрисоединенныеФайлы.Документ ССЫЛКА Документ.ТТНИсходящаяЕГАИС
	|					ТОГДА ВЫРАЗИТЬ(ЕГАИСПрисоединенныеФайлы.Документ КАК Документ.ТТНИсходящаяЕГАИС).ИдентификаторЕГАИС = бг_ВходящиеДокументыУТМ.ИдентификаторТТН
	|				КОГДА бг_ВходящиеДокументыУТМ.Идентификатор <> """"
	|					ТОГДА бг_ВходящиеДокументыУТМ.Идентификатор = ЕГАИСПрисоединенныеФайлы.ИдентификаторЗапроса
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (бг_ВходящиеДокументыУТМ.Статус В (&СтатусыКОбработке))
	|			И (НЕ бг_ВходящиеДокументыУТМ.ОбработанВERP)
	|			И (бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР = &ИдентификаторФСРАР)
	|			И (ЕГАИСПрисоединенныеФайлы.ВладелецФайла = &ОрганизацияЕГАИС)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Прочитать();
		Если Не Запись.Выбран() Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.Статус = Перечисления.бг_СтатусыВходящихДокументовУТМ.Дубль;
		Запись.ОбработанВERP = Истина;
		
		Запись.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВходящиеДокументыБезДублей(ВходящиеДокументыУТМ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	Документы.АдресДокумента КАК АдресДокумента,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ДанныеДляСвертки
	|ИЗ
	|	&ВходящиеДокументыУТМ КАК Документы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.ИдентификаторФСРАР КАК ИдентификаторФСРАР,
	|	Данные.АдресДокумента КАК АдресДокумента
	|ИЗ
	|	ДанныеДляСвертки КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.ИдентификаторФСРАР,
	|	Данные.АдресДокумента
	|ИМЕЮЩИЕ
	|	СУММА(Данные.Количество) > 1";
	
	Запрос.УстановитьПараметр("ВходящиеДокументыУТМ", ВходящиеДокументыУТМ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВходящиеДокументыУТМ;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КлючПоискаЗаписей = Новый Структура("ИдентификаторФСРАР, АдресДокумента");
	КоличествоДокументовДолжноОстаться = 1;
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(КлючПоискаЗаписей, Выборка);
		ЗадублированныеЗаписи = ВходящиеДокументыУТМ.НайтиСтроки(КлючПоискаЗаписей);
		КоличествоДублей = ЗадублированныеЗаписи.ВГраница() - КоличествоДокументовДолжноОстаться;
		Для НомерЗаписи = 0 По КоличествоДублей Цикл 
			ВходящиеДокументыУТМ.Удалить(ЗадублированныеЗаписи[НомерЗаписи]);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВходящиеДокументыУТМ;
	
КонецФункции

#КонецОбласти

#КонецЕсли
