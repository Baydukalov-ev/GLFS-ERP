#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак того, что по заказу клиента используется отправка OrderSP.
//  Вызывается из обработчика ПередЗаписью документа заказ клиента. 
//
// Параметры:
//  ЗаказОбъект - ДокументОбъект.ЗаказКлиента  - Объект документа заказ клиента.
//
// Возвращаемое значение:
//  ТребуетсяОтправкаOrderSP - Булево - Признак того, что по заказу клиента используется отправка OrderSP. 
//
Функция ПоЗаказуТребуетсяОтправкаOrderSP(ЗаказОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаявкаКлиента = ЗаказОбъект.бг_ЗаявкаКлиента;
	Если Не ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсточникЗаказа = ЗаказОбъект.бг_ИсточникЗаказа;
	
	Возврат ПоИсточникуЗаказаТребуетсяОтправкаOrderSP(ИсточникЗаказа);
	
КонецФункции	

// Возвращает признак того, что по заявке клиента используется отправка OrderSP.
//  Вызывается из обработчика ПередЗаписью документа заявка клиента. 
//
// Параметры:
//  ЗявкаОбъект - ДокументОбъект.битЗаявкаКлиента  - Объект документа заявка клиента.
//
// Возвращаемое значение:
//  ТребуетсяОтправкаOrderSP - Булево - Признак того, что по заявке клиента используется отправка OrderSP. 
//
Функция ПоЗаявкеТребуетсяОтправкаOrderSP(ЗявкаОбъект) Экспорт
	
	ИсточникЗаказа = ЗявкаОбъект.ИсточникЗаказа;
	
	Возврат ПоИсточникуЗаказаТребуетсяОтправкаOrderSP(ИсточникЗаказа);
	
КонецФункции	

// Проверяет необходимость отправки OrderSP по заявке клиента,
//   и при необходимости добавляет в доп. свойства документа обработчик,
//   для добавления заявки клиента в очередь на отправку OrderSP.
//   Вызывается из обработчика ПередЗаписью документа заказ клиента. 
//  Непосредственно добавление в очередь на отправку OrderSP (запись в регистр)
//   выполняется в обработчике ПриЗаписи документа заказ клиента. 
//
// Параметры:
//  ДанныеДоИзменения - Структура - Содержит данные до изменения документа.
//  ЗявкаОбъект       - ДокументОбъект.битЗаявкаКлиента - Объект документа заявка клиента.
//
Процедура ЗарегистрироватьЗаявкуКлиентаВОчередьКОтправкеOrderSP(ДанныеДоИзменения, ЗявкаОбъект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПоЗаявкеТребуетсяОтправкаOrderSP(ЗявкаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЗявкаОбъект);	
	Если СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение
		Или СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Запись
				И СвойстваДокумента.Проведен Тогда
		// OrderSP отправляем только для проведенных заявок.
		ТребуетсяОтправкаOrderSP = Истина;
	Иначе
		ТребуетсяОтправкаOrderSP = Ложь;	
	КонецЕсли;
	
	Если Не ТребуетсяОтправкаOrderSP Тогда
		Возврат;	
	КонецЕсли;		
	
	// 1. Проверим, есть изменения плановой даты поставки.	
	Если ДанныеДоИзменения.Реквизиты.ПлановаяДатаДоставки = ЗявкаОбъект.ПлановаяДатаДоставки Тогда
		// Нет изменений.
		Возврат;
	КонецЕсли;
		
	// 2. Так как не все позиции заказа могут быть сразу обработаны,
	//    Кроме того по заявке может быть сформировано несколько заказов, 
	//    проверим, что все позиции всех заказов, сформированных по заявке, 
	//    уже актуализированы (подтверждены или отменены).
	ЕстьНеАктулизированныеПозиции = ЕстьНеАктулизированныеПозицииПоЗаявкеКлиента(ЗявкаОбъект.Ссылка); 
	
	Если ЕстьНеАктулизированныеПозиции Тогда
		// Если сюда попали, значит в заявке есть изменения даты поставки,
		//  но еще не все позиции по заявке клиента подтверждены или отменены.
		// В этом случае OrderSP не отправляем, считаем, что по заявке еще 
		//  идет работа по обеспечению и/или передаче на отгрузку.
		Возврат;
	КонецЕсли;	
	
	// Если сюда попали, значит надо зарегистрировать заявку в очередь на отправку OrderSP.
	ЗявкаОбъект.ДополнительныеСвойства.Вставить(
		"бг_ДобавитьЗаявкуКлиентаВОчередьКОтправкеOrderSP", 
		Новый Структура("ЗаявкаКлиента", ЗявкаОбъект.Ссылка));
		
КонецПроцедуры	
	
// Проверяет необходимость отправки OrderSP по заявке клиента, по которой сформирован заказ клиента,
//   и при необходимости добавляет в доп. свойства документа обработчик,
//   для добавления заявки клиента в очередь на отправку OrderSP.
//   Вызывается из обработчика ПередЗаписью документа заказ клиента. 
//  Непосредственно добавление в очередь на отправку OrderSP (запись в регистр)
//   выполняется в обработчике ПриЗаписи документа заказ клиента. 
//
// Параметры:
//  ДанныеДоИзменения - Структура - Содержит данные до изменения документа.
//  ЗаказОбъект       - ДокументОбъект.ЗаказКлиента - Объект документа заказ клиента.
//
Процедура ЗарегистрироватьЗаказКлиентаВОчередьКОтправкеOrderSP(ДанныеДоИзменения, ЗаказОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПоЗаказуТребуетсяОтправкаOrderSP(ЗаказОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаКлиента = ЗаказОбъект.бг_ЗаявкаКлиента;
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаКлиента, "Проведен") Тогда
		// OrderSP отправляем только для проведенных заявок.
		Возврат;
	КонецЕсли;
	
	СвойстваДокумента = ПроведениеДокументов.СвойстваДокумента(ЗаказОбъект);	
	
	// 1. Проверим, есть ли в ТЧ Товары заказа изменения подтвержденного количества,
	//    передаваемого в OrderSP по датам отгрузки.	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТоварыДокументаПередЗаписью", ДанныеДоИзменения.Товары);
	Запрос.УстановитьПараметр("ПроведенПередЗаписью", ДанныеДоИзменения.Реквизиты.Проведен);
	Запрос.УстановитьПараметр("СтатусПередЗаписью", ДанныеДоИзменения.Реквизиты.Статус);
	Запрос.УстановитьПараметр("ТоварыДокумента", ЗаказОбъект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Проведен", СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение);
	Запрос.УстановитьПараметр("Статус", ЗаказОбъект.Статус);
	Запрос.УстановитьПараметр("ВариантыОбеспеченияДляOrderSP", ВариантыОбеспеченияДляOrderSP());
	Запрос.Текст =
	#Область ТекстЗапроса 
	"ВЫБРАТЬ
	|	ТоварыДокументаПередЗаписью.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|	ТоварыДокументаПередЗаписью.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыДокументаПередЗаписью.Отменено
	|				И ТоварыДокументаПередЗаписью.ВариантОбеспечения В (&ВариантыОбеспеченияДляOrderSP)
	|			ТОГДА ТоварыДокументаПередЗаписью.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПодтверждено,
	|	ВЫБОР
	|		КОГДА ТоварыДокументаПередЗаписью.Отменено
	|			ТОГДА ТоварыДокументаПередЗаписью.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОтменено
	|ПОМЕСТИТЬ ТоварыДокументаПередЗаписью
	|ИЗ
	|	&ТоварыДокументаПередЗаписью КАК ТоварыДокументаПередЗаписью
	|ГДЕ
	|	&ПроведенПередЗаписью
	|	И НЕ &СтатусПередЗаписью = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|	ТоварыДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыДокумента.Отменено
	|				И ТоварыДокумента.ВариантОбеспечения В (&ВариантыОбеспеченияДляOrderSP)
	|			ТОГДА ТоварыДокумента.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПодтверждено,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Отменено
	|			ТОГДА ТоварыДокумента.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОтменено
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&ТоварыДокумента КАК ТоварыДокумента
	|ГДЕ
	|	&Проведен
	|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|	ВложенныйЗапрос.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СУММА(ВложенныйЗапрос.КоличествоПодтверждено) КАК КоличествоПодтверждено,
	|	СУММА(ВложенныйЗапрос.КоличествоОтменено) КАК КоличествоОтменено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыДокумента.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|		ТоварыДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
	|		ТоварыДокумента.КоличествоПодтверждено КАК КоличествоПодтверждено,
	|		ТоварыДокумента.КоличествоОтменено КАК КоличествоОтменено
	|	ИЗ
	|		ТоварыДокумента КАК ТоварыДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыДокументаПередЗаписью.бг_КодСтрокиЗаявки,
	|		ТоварыДокументаПередЗаписью.ДатаОтгрузки,
	|		-ТоварыДокументаПередЗаписью.КоличествоПодтверждено,
	|		-ТоварыДокументаПередЗаписью.КоличествоОтменено
	|	ИЗ
	|		ТоварыДокументаПередЗаписью КАК ТоварыДокументаПередЗаписью) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.бг_КодСтрокиЗаявки,
	|	ВложенныйЗапрос.ДатаОтгрузки
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.КоличествоПодтверждено) <> 0
	|		ИЛИ СУММА(ВложенныйЗапрос.КоличествоОтменено) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|	СУММА(ТоварыДокумента.КоличествоПодтверждено + ТоварыДокумента.КоличествоОтменено) КАК КоличествоПодтвержденоОтменено
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.бг_КодСтрокиЗаявки";
	#КонецОбласти
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	Если МассивРезультатов[2].Пустой() Тогда
		// Нет изменений подтвержденного/отмененного количества.
		Возврат;
	КонецЕсли;
	
	// 2. Так как не все позиции заказа могут быть сразу обработаны,
	//    Кроме того по заявке может быть сформировано несколько заказов, 
	//    проверим, что все позиции всех заказов, сформированных по заявке, 
	//    уже актуализированы (подтверждены или отменены).
	ЕстьНеАктулизированныеПозиции = ЕстьНеАктулизированныеПозицииПоЗаявкеКлиента(
		ЗаявкаКлиента,
		ЗаказОбъект.Ссылка,
		МассивРезультатов[3].Выгрузить()); 
	
	Если ЕстьНеАктулизированныеПозиции Тогда
		// Если сюда попали, значит в заказе есть изменения подтвержденного количества,
		//  но еще не все позиции по заявке клиента подтверждены или отменены.
		// В этом случае OrderSP не отправляем, считаем, что по заявке еще 
		//  идет работа по обеспечению и/или передаче на отгрузку.
		Возврат;
	КонецЕсли;	
	
	// Если сюда попали, значит надо зарегистрировать заявку в очередь на отправку OrderSP.
	ЗаказОбъект.ДополнительныеСвойства.Вставить(
		"бг_ДобавитьЗаявкуКлиентаВОчередьКОтправкеOrderSP", 
		Новый Структура("ЗаявкаКлиента", ЗаявкаКлиента));
	
КонецПроцедуры

// Выполняет запись в регистр.
//
// Параметры:
//  ЗаявкаКлиента - ДокументСсылка.битЗаявкаКлиента  - Ссылка на заявку клиента, которую надо добавить в очередь.
//
Процедура ДобавитьЗаявкуКлиентаВОчередьКОтправкеOrderSP(ЗаявкаКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаКлиента, "ИсточникЗаказа");
	
	Если Не ПоИсточникуЗаказаТребуетсяОтправкаOrderSP(ИсточникЗаказа) Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.бг_ОчередьЗаявокКлиентовКОтправкеOrderSP");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗаявкаКлиента", ЗаявкаКлиента);
	Блокировка.Заблокировать();
	
	МенеджерЗаписи = РегистрыСведений.бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗаявкаКлиента = ЗаявкаКлиента;
	МенеджерЗаписи.Прочитать();

	Если МенеджерЗаписи.Выбран() Тогда
		Возврат;
	Иначе
		МенеджерЗаписи.ЗаявкаКлиента  = ЗаявкаКлиента;
		МенеджерЗаписи.ДатаДобавления = ТекущаяДатаСеанса();
		
		Попытка
			МенеджерЗаписи.Записать();
		Исключение
			
			ШаблонСообщения = НСтр("ru = 'Не удалось добавить в очередь отправки OrderSP заявку клиента %1';
								   |en = 'Cannot add the %1 sales request to the queue to send a OrderSP.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЗаявкаКлиента);
			
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует исходящие сообщения адаптера для отправки OrderSP по заявкам клиентов в очереди.
//  Вызывается из метода добавленного регламентного задания адаптера бг_РегистрацияКОтправкеOrderSP.
//
// Параметры:
//  ЗаявкаКлиента - ДокументСсылка.битЗаявкаКлиента  - Ссылка на заявку клиента (необязательный). 
//                                                     Если передана - регистрируется сообщение только по ней.
//                                                     Если не передана - по всем заявкам из очереди.
//
Процедура ЗарегистрироватьИсходящиеСообщенияКОтправкеOrderSP(ЗаявкаКлиента = Неопределено) Экспорт
	
	Перем адаптер_НастройкиОбменаПовтИсп, адаптер_ПодпискиНаСобытияВызовСервера;
	адаптер_НастройкиОбменаПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбменаПовтИсп");
	адаптер_ПодпискиНаСобытияВызовСервера = ОбщегоНазначения.ОбщийМодуль("адаптер_ПодпискиНаСобытияВызовСервера");
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();

	НастройкиВыгрузки = адаптер_НастройкиОбменаПовтИсп.
		ПолучитьНастройкиВыгрузкиПоОбъекту("Документ.битЗаявкаКлиента");
		
	Если НастройкиВыгрузки = Неопределено Тогда
		// В ИБ нет параметров подключения к RMQ, или все параметры подключения отключены.
		Возврат;	
	КонецЕсли;
	
	ИспользуемыеНастройкиВыгрузки = Новый Массив;
	Для Каждого НастройкаВыгрузки Из НастройкиВыгрузки Цикл
		Если НастройкаВыгрузки.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеOrderSP() Тогда
			ИспользуемыеНастройкиВыгрузки.Добавить(НастройкаВыгрузки);	
		КонецЕсли;	
	КонецЦикла;
	Если ИспользуемыеНастройкиВыгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	

	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ИсточникЗаказа", "SAP");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.ЗаявкаКлиента КАК ЗаявкаКлиента,
	|	бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.ЗаявкаКлиента.ДатаОтправкиOrderSP КАК ДатаОтправкиOrderSP,
	|	бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.ЗаявкаКлиента.Проведен КАК Проведен
	|ИЗ
	|	РегистрСведений.бг_ОчередьЗаявокКлиентовКОтправкеOrderSP КАК бг_ОчередьЗаявокКлиентовКОтправкеOrderSP
	|ГДЕ
	|	&УсловиеЗаявкаКлиента
	|
	|УПОРЯДОЧИТЬ ПО
	|	бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.ДатаДобавления";
	Если ЗаявкаКлиента = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗаявкаКлиента", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"&УсловиеЗаявкаКлиента", 
					"бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.ЗаявкаКлиента = &ЗаявкаКлиента");
		Запрос.УстановитьПараметр("ЗаявкаКлиента", ЗаявкаКлиента);
	КонецЕсли;	
	Запрос.Текст = ТекстЗапроса; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.бг_ОчередьЗаявокКлиентовКОтправкеOrderSP");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ЗаявкаКлиента", Выборка.ЗаявкаКлиента);
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
		
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось заблокировать очередь на регистрацию сообщений к отправке OrderSP по %1.';
					 |en = 'Cannot lock the queue to send a OrderSP against the %1.'", КодОсновногоЯзыка);
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ЗаявкаКлиента);	
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииОтправкаOrderSP(),
				УровеньЖурналаРегистрации.Ошибка, 
				, 
				Выборка.ЗаявкаКлиента,
				ТекстСообщения);
			Продолжить;	
		КонецПопытки;
			
		Если НЕ Выборка.Проведен Тогда
			Попытка
				НаборЗаписей = РегистрыСведений.бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЗаявкаКлиента.Установить(Выборка.ЗаявкаКлиента);
				НаборЗаписей.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ШаблонСообщения = 
					НСтр("ru = 'Не удалось удалить %1 из очереди на регистрацию сообщений к отправке OrderSP.
                        	   | По причине: %2';
                         |en = 'Cannot delete %1 of queue to send a OrderSP.
                               | Reason: %2'", КодОсновногоЯзыка);
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ЗаявкаКлиента, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрацииОтправкаOrderSP(),
					УровеньЖурналаРегистрации.Ошибка, 
					, 
					Выборка.ЗаявкаКлиента,
					ТекстСообщения);
			КонецПопытки;
			
			Продолжить;
		КонецЕсли;

		НоваяДатаОтправкиOrderSP = НачалоДня(ТекущаяДатаСеанса());
		ИзменитьЗаявкуКлиента = Выборка.ДатаОтправкиOrderSP <> НоваяДатаОтправкиOrderSP;
		
		Если ИзменитьЗаявкуКлиента Тогда
			// Захват объекта для редактирования
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.ЗаявкаКлиента);
			Исключение
				ОтменитьТранзакцию();
				
				ТекстСообщения = 
					НСтр("ru = 'Не удалось заблокировать объект при регистрацию сообщений к отправке OrderSP.';
						 |en = 'Cannot lock the object on automatic sending of the OrderSP.'", КодОсновногоЯзыка);
				ЗаписьЖурналаРегистрации(
					СобытиеЖурналаРегистрацииОтправкаOrderSP(),
					УровеньЖурналаРегистрации.Предупреждение,
					,
					Выборка.ЗаявкаКлиента,
					ТекстСообщения);
				
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			
			Если ИзменитьЗаявкуКлиента Тогда
				ЗаявкаКлиентаОбъект = Выборка.ЗаявкаКлиента.ПолучитьОбъект();
				ЗаявкаКлиентаОбъект.ДополнительныеСвойства.Вставить("бг_ОтключитьСинхронизациюЗависимыхДокументов");
				ЗаявкаКлиентаОбъект.ДатаОтправкиOrderSP = НоваяДатаОтправкиOrderSP;
				ЗаявкаКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			адаптер_ПодпискиНаСобытияВызовСервера.ЗарегистрироватьИсходящееСообщение(
				Выборка.ЗаявкаКлиента, ДополнительныеСвойства, ИспользуемыеНастройкиВыгрузки);
			
			НаборЗаписей = РегистрыСведений.бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаявкаКлиента.Установить(Выборка.ЗаявкаКлиента);
			НаборЗаписей.Записать();
			
			ШаблонСообщения = 
				НСтр("ru = 'Выполнена регистрация исходящего сообщения к отправке OrderSP по %1';
				     |en = 'Sending of the OrderSP against the %1 is executed'", КодОсновногоЯзыка);
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ЗаявкаКлиента);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииОтправкаOrderSP(),
				УровеньЖурналаРегистрации.Информация,
				,
				Выборка.ЗаявкаКлиента,
				ТекстСообщения);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось выполнить регистрация исходящего сообщения к отправке OrderSP по %1
                           | По причине: %2';
                     |en = 'Cannot sending of the OrderSP against the %1
                           | Reason: %2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Выборка.ЗаявкаКлиента, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииОтправкаOrderSP(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				Выборка.ЗаявкаКлиента,
				ТекстСообщения);
				
			Продолжить;
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

// Регистрирует исходящие сообщения адаптера для отправки OrderSP по переданной заявке клиента,
//  если заявка зарегистрирована в очереди.
//
// Параметры:
//  ЗаявкаКлиента - ДокументСсылка.битЗаявкаКлиента  - Ссылка на заявку клиента, которую надо добавить в очередь.
//
Процедура ОбработатьЗаявкуКлиента(ЗаявкаКлиента) Экспорт

	ЗарегистрироватьИсходящиеСообщенияКОтправкеOrderSP(ЗаявкаКлиента);	
	
КонецПроцедуры

// Возвращает событие журнала регистрации для записи информации и ошибок обработки данных для отправки OrderSP.   
//
Функция СобытиеЖурналаРегистрацииОтправкаOrderSP() Экспорт 
	
	КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	
	Возврат НСтр("ru = 'Отправка OrderSP';
	             |en = 'Sending of the OrderSP'", КодОсновногоЯзыка);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьНеАктулизированныеПозицииПоЗаявкеКлиента(ЗаявкаКлиента, ЗаказРегистратор = Неопределено, ТоварыЗаказаРегистратора = Неопределено)
	
	Если Не ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТоварыЗаказаРегистратора = Неопределено Тогда
		ТоварыЗаказаРегистратора = Новый ТаблицаЗначений;
		ТоварыЗаказаРегистратора.Колонки.Добавить("бг_КодСтрокиЗаявки", ОбщегоНазначения.ОписаниеТипаСтрока(5));
		ТоварыЗаказаРегистратора.Колонки.Добавить("КоличествоПодтвержденоОтменено", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаКлиента", ЗаявкаКлиента);
	Запрос.УстановитьПараметр("ТоварыЗаказаРегистратора", ТоварыЗаказаРегистратора);
	Запрос.УстановитьПараметр("ВариантыОбеспеченияДляOrderSP", ВариантыОбеспеченияДляOrderSP());
	ТекстЗапроса = 
	#Область ТекстЗапроса 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ПОМЕСТИТЬ СписокЗаказовПоЗаявке
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Проведен
	|	И ЗаказКлиента.бг_ЗаявкаКлиента = &ЗаявкаКлиента
	|	И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И &УсловиеЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказаРегистратора.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|	ТоварыЗаказаРегистратора.КоличествоПодтвержденоОтменено КАК КоличествоПодтвержденоОтменено
	|ПОМЕСТИТЬ ТоварыЗаказаРегистратора
	|ИЗ
	|	&ТоварыЗаказаРегистратора КАК ТоварыЗаказаРегистратора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказов.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|	СУММА(ТоварыЗаказов.КоличествоПодтвержденоОтменено) КАК КоличествоПодтвержденоОтменено
	|ПОМЕСТИТЬ ТоварыЗаказов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|		ВЫБОР
	|			КОГДА ТаблицаТоваров.Отменено
	|					ИЛИ НЕ ТаблицаТоваров.Отменено
	|						И ТаблицаТоваров.ВариантОбеспечения В (&ВариантыОбеспеченияДляOrderSP)
	|				ТОГДА ТаблицаТоваров.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК КоличествоПодтвержденоОтменено
	|	ИЗ
	|		Документ.ЗаказКлиента.Товары КАК ТаблицаТоваров
	|	ГДЕ
	|		ТаблицаТоваров.Ссылка В
	|				(ВЫБРАТЬ
	|					СписокЗаказовПоЗаявке.ЗаказКлиента
	|				ИЗ
	|					СписокЗаказовПоЗаявке КАК СписокЗаказовПоЗаявке)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыЗаказаРегистратора.бг_КодСтрокиЗаявки,
	|		ТоварыЗаказаРегистратора.КоличествоПодтвержденоОтменено
	|	ИЗ
	|		ТоварыЗаказаРегистратора КАК ТоварыЗаказаРегистратора) КАК ТоварыЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаказов.бг_КодСтрокиЗаявки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварыЗаказов.бг_КодСтрокиЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битЗаявкаКлиентаТовары.КодПозицииЗаказа КАК КодПозицииЗаказа,
	|	СУММА(битЗаявкаКлиентаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыЗаявки
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК битЗаявкаКлиентаТовары
	|ГДЕ
	|	битЗаявкаКлиентаТовары.Ссылка = &ЗаявкаКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	битЗаявкаКлиентаТовары.КодПозицииЗаказа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	битЗаявкаКлиентаТовары.КодПозицииЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаявки.КодПозицииЗаказа КАК КодПозицииЗаказа,
	|	ТоварыЗаявки.Количество - ЕСТЬNULL(ТоварыЗаказов.КоличествоПодтвержденоОтменено, 0) КАК КоличествоНеАктулизировано
	|ИЗ
	|	ТоварыЗаявки КАК ТоварыЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказов КАК ТоварыЗаказов
	|		ПО ТоварыЗаявки.КодПозицииЗаказа = ТоварыЗаказов.бг_КодСтрокиЗаявки
	|ГДЕ
	|	ТоварыЗаявки.Количество - ЕСТЬNULL(ТоварыЗаказов.КоличествоПодтвержденоОтменено, 0) > 0
	|	И НЕ ТоварыЗаказов.бг_КодСтрокиЗаявки ЕСТЬ NULL";
	// Последнее условие добавлено на случай, если в заказах клиентов нет каких-то позиций заявки,
	// например, при формировании заказов не нашли номенклатуры пр коду SAP и пропустили позицию заявки.
	#КонецОбласти
	
	Если ЗаказРегистратор = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗаказКлиента", "ИСТИНА");	
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗаказКлиента", "НЕ ЗаказКлиента.Ссылка = &ЗаказРегистратор");
		Запрос.УстановитьПараметр("ЗаказРегистратор", ЗаказРегистратор);
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой(); 
	
КонецФункции	
	
Функция ВариантыОбеспеченияДляOrderSP()
	
	ОтправлятьOrderSPПриСозданииРезервов = Ложь; // Зарезервировано для баз Востока.	
	
	ВариантыОбеспеченияДляOrderSP = Новый Массив;
	ВариантыОбеспеченияДляOrderSP.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить); 
	Если ОтправлятьOrderSPПриСозданииРезервов Тогда
		ВариантыОбеспеченияДляOrderSP.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);	
	КонецЕсли;	
	
	Возврат ВариантыОбеспеченияДляOrderSP;

КонецФункции

Функция ПоИсточникуЗаказаТребуетсяОтправкаOrderSP(ИсточникЗаказа)
	
	Возврат ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
			Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED;
	
КонецФункции

#КонецОбласти

#КонецЕсли