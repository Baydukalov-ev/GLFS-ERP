#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений бг_ДополнительныеСведенияПоЗаказамКлиентов
//
//	Параметры:
//		ЗаказыКлиента - Массив - Массив с заказами клиента
//		Отказ - Булево - признак прерывания обработки проведения
//		УдалениеПроведения - Булево - признак обработки удаления проведения.
//		Показатели - Массив - список обновляемых показателей,
//		если Неопределено, тогда обновятся все показатели.
//
Процедура ОтразитьДополнительныеСведенияЗаказаКлиента(ЗаказыКлиента, Отказ,
	УдалениеПроведения = Ложь, Показатели = Неопределено) Экспорт
	
	Если Отказ 
		Или ЗаказыКлиента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Показатели = Неопределено Тогда
		Показатели = ВсеПоказатели();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Если УдалениеПроведения Тогда
		
		Для Каждого СтрокаСсылка Из ЗаказыКлиента Цикл
			Набор = РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.СоздатьНаборЗаписей();
			Набор.Отбор.ЗаказКлиента.Установить(СтрокаСсылка);
			Набор.Записать(Истина);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеДляЗаполненияДополнительныхСведений = ДанныеДляЗаполненияДополнительныхСведений(ЗаказыКлиента, Показатели);
	
	Для Каждого СтрокаДанные Из ДанныеДляЗаполненияДополнительныхСведений Цикл
		
		Набор = РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.СоздатьНаборЗаписей();
		Набор.Отбор.ЗаказКлиента.Установить(СтрокаДанные.ЗаказКлиента);
		Набор.Прочитать();
		
		Если Набор.Количество() Тогда
			ЗаполнитьЗначенияСвойств(Набор[0], СтрокаДанные);
		Иначе
			СтрокаНабора = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаДанные);
		КонецЕсли;
		
		Попытка
			Набор.Записать(Истина);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось отразить дополнительные сведения заказа клиента: %Ссылка% по причине: %Причина%';
				|en = 'Cannot record state of sales order: %Ссылка%. Reason: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", СтрокаДанные.ЗаказКлиента);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.ЗаказКлиента, 
				СтрокаДанные.ЗаказКлиента,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВсеПоказатели()
	
	СписокПоказателей = Новый Массив;
	
	Для Каждого СтрокаРесурс Из Метаданные.РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.Ресурсы Цикл
		СписокПоказателей.Добавить(СтрокаРесурс.Имя);
	КонецЦикла;
	
	Возврат СписокПоказателей;
	
КонецФункции

// Функция - Показатели по типу документа
//
// Параметры:
//  Документ - ДокументСсыла - Документ для которого необходимо определить список показателей
// 
// Возвращаемое значение:
//  Показатели - Массив - Список показателей
//
Функция ПоказателиПоТипуДокумента(Документ) Экспорт
	
	ТипДокумента = ТипЗнч(Документ);
	
	Показатели = Новый Массив;
	
	Если ТипДокумента = Тип("ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру") Тогда
		
		Показатели.Добавить("ОтражениеФактаПоРасходномуОрдеру");
		Показатели.Добавить("ОтражениеФактаПоРасходномуОрдеруНомер");
		Показатели.Добавить("СтатусSolvoОтражениеФактаПоРасходномуОрдеру");
		Показатели.Добавить("ЗаполненаОрганизацияЕГАИС");
		Показатели.Добавить("ЭтоЗаказМагазина");
		Показатели.Добавить("ЭтоЗаказРозничногоПокупателя");
		Показатели.Добавить("Склад");
		Показатели.Добавить("ДатаОтгрузки");
		Показатели.Добавить("ПроцентСборки");
		Показатели.Добавить("РасходныйОрдер");
		Показатели.Добавить("РасходныйОрдерНомер");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.битМаршрутныйЛист") Тогда
		
		Показатели.Добавить("МаршрутныйЛист");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Показатели.Добавить("ЭтоЗаказМагазина");
		Показатели.Добавить("ЭтоЗаказРозничногоПокупателя");
		Показатели.Добавить("ДатаОтгрузки");
		Показатели.Добавить("Склад");
		Показатели.Добавить("ПроцентСборки");
		Показатели.Добавить("МаршрутныйЛист");

	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Показатели.Добавить("РеализацияТоваровУслуг");
		Показатели.Добавить("РеализацияТоваровУслугНомер"); 
		Показатели.Добавить("СуммаЗаказаИРеализацииСовпадают");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		Показатели.Добавить("ПроцентСборки");
		Показатели.Добавить("РасходныйОрдер");
		Показатели.Добавить("РасходныйОрдерНомер");
		Показатели.Добавить("МаршрутныйЛист");
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		Показатели.Добавить("РеализацияТоваровУслуг");
		Показатели.Добавить("РеализацияТоваровУслугНомер");
		Показатели.Добавить("ТТНИсходящаяЕГАИС");
		Показатели.Добавить("ТТНИсходящаяЕГАИСНомер");
		Показатели.Добавить("ТТНИсходящаяЕГАИССтатус");

	КонецЕсли;

	Возврат Показатели;
	
КонецФункции

Функция СписокИменТаблицИПолейЗапроса(СписокПоказателей)
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	
	ВсеИменаТаблицИПоказателейЗапроса = ВсеИменаТаблицИПоказателейЗапроса();

	СписокИменТаблицИПолейЗапроса = Новый ТаблицаЗначений;
	СписокИменТаблицИПолейЗапроса.Колонки.Добавить("ИмяТаблицы", ТипСтрока);
	СписокИменТаблицИПолейЗапроса.Колонки.Добавить("Показатель", ТипСтрока);

	Для Каждого СтрокаПоказатель Из СписокПоказателей Цикл
		
		ИмяТаблицы = ВсеИменаТаблицИПоказателейЗапроса.Получить(СтрокаПоказатель);
		НоваяСтрока = СписокИменТаблицИПолейЗапроса.Добавить();
		НоваяСтрока.ИмяТаблицы= ИмяТаблицы;
		НоваяСтрока.Показатель = СтрокаПоказатель;
		
	КонецЦикла;

	Возврат СписокИменТаблицИПолейЗапроса;
	
КонецФункции

Функция ВсеИменаТаблицИПоказателейЗапроса()
	
	ВсеИменаТаблицИПоказателейЗапроса = Новый Соответствие();
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ЗаполненаОрганизацияЕГАИС",
		"ДанныеЗаказКлиента");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ЭтоЗаказМагазина",
		"ДанныеЗаказКлиента");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ЭтоЗаказРозничногоПокупателя",
		"ДанныеЗаказКлиента");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"Склад",
		"ДанныеЗаказКлиента");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ДатаОтгрузки",
		"ДанныеЗаказКлиента");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"СуммаЗаказКлиента",
		"ДанныеЗаказКлиента");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"МаршрутныйЛист",
		"ДанныеМаршрутныйЛист");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ОтражениеФактаПоРасходномуОрдеру",
		"ДанныеОтражениеФактаПоРасходномуОрдеру");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"СтатусSolvoОтражениеФактаПоРасходномуОрдеру",
		"ДанныеОтражениеФактаПоРасходномуОрдеру");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ОтражениеФактаПоРасходномуОрдеруНомер",
		"ДанныеОтражениеФактаПоРасходномуОрдеру");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ПроцентСборки",
		"ДанныеПоказательСборки");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"РасходныйОрдер",
		"ДанныеРасходныйОрдерНаТовары");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"РасходныйОрдерНомер",
		"ДанныеРасходныйОрдерНаТовары");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"РеализацияТоваровУслуг",
		"ДанныеРеализацияТоваровУслуг");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"РеализацияТоваровУслугНомер",
		"ДанныеРеализацияТоваровУслуг");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"СуммаЗаказаИРеализацииСовпадают",
		"ДанныеРеализацияТоваровУслуг");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ТТНИсходящаяЕГАИС",
		"ДанныеТТНИсходящаяЕГАИС");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ТТНИсходящаяЕГАИСНомер",
		"ДанныеТТНИсходящаяЕГАИС");
	
	ВсеИменаТаблицИПоказателейЗапроса.Вставить(
		"ТТНИсходящаяЕГАИССтатус",
		"ДанныеТТНИсходящаяЕГАИС");
	
	Возврат ВсеИменаТаблицИПоказателейЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция - Возвращает признак наличия по заказу проведенной Реализации товаров услуг.
//
// Параметры:
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ЗаказКлиента
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьРеализацияТоваровУслуг(ЗаказКлиента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бг_ДополнительныеСведенияПоЗаказамКлиентов.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ИЗ
		|	РегистрСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов КАК бг_ДополнительныеСведенияПоЗаказамКлиентов
		|ГДЕ
		|	бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента = &ЗаказКлиента
		|	И НЕ бг_ДополнительныеСведенияПоЗаказамКлиентов.РеализацияТоваровУслуг.ПометкаУдаления
		|	И бг_ДополнительныеСведенияПоЗаказамКлиентов.РеализацияТоваровУслуг.Проведен";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

#Область СлужебныеМетодыФормированияДополнительныхСведенийЗаказа

Функция ДанныеДляЗаполненияДополнительныхСведений(СписокДокументов, Показатели)

	УстановитьПривилегированныйРежим(Истина);
	
	СписокИменТаблицИПолейЗапроса = СписокИменТаблицИПолейЗапроса(Показатели);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаСписокЗаказовКлиентов()
		+ ?(СписокИменТаблицИПолейЗапроса.Найти("ДанныеЗаказКлиента") <> Неопределено,
			ТекстЗапросаДанныеЗаказКлиента(), "")
		+ ?(СписокИменТаблицИПолейЗапроса.Найти("ДанныеМаршрутныйЛист") <> Неопределено,
			ТекстЗапросаДанныеМаршрутныйЛист(), "")
		+ ?(СписокИменТаблицИПолейЗапроса.Найти("ДанныеРеализацияТоваровУслуг") <> Неопределено,
			ТекстЗапросаДанныеРеализацияТоваровУслуг(), "")
		+ ?(СписокИменТаблицИПолейЗапроса.Найти("ДанныеТТНИсходящаяЕГАИС") <> Неопределено,
			ТекстЗапросаДанныеТТНИсходящаяЕГАИС(), "")
		+ ?(СписокИменТаблицИПолейЗапроса.Найти("ДанныеРасходныйОрдерНаТовары") <> Неопределено,
			ТекстЗапросаДанныеРасходныйОрдерНаТовары(), "")
		+ ?(СписокИменТаблицИПолейЗапроса.Найти("ДанныеОтражениеФактаПоРасходномуОрдеру") <> Неопределено,
			ТекстЗапросаДанныеОтражениеФактаПоРасходномуОрдеру(), "")
		+ ?(СписокИменТаблицИПолейЗапроса.Найти("ДанныеПоказательСборки") <> Неопределено,
			ТекстЗапросаДанныеПоказательСборки(), "")
		+ ТекстЗапросаРезультирующейТаблицы(СписокИменТаблицИПолейЗапроса);
		
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("СтатусыОтмены", Документы.ТТНИсходящаяЕГАИС.КонечныеСтатусы());

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаСписокЗаказовКлиентов()
	
	Возврат "ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиента.СуммаДокумента КАК СуммаЗаказКлиента,
	|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ СписокЗаказовКлиентов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&СписокДокументов)
	|	И ЗаказКлиента.Товары.Количество > 0
	|	И НЕ ЗаказКлиента.Товары.Отменено
	|	И ЗаказКлиента.Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|";
	
КонецФункции

Функция ТекстЗапросаДанныеЗаказКлиента()
	
	Возврат "ВЫБРАТЬ
	|	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|	СписокЗаказовКлиентов.ЗаказКлиента.Склад КАК Склад,
	|	СписокЗаказовКлиентов.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СписокЗаказовКлиентов.СуммаЗаказКлиента КАК СуммаЗаказКлиента,
	|	ВЫБОР
	|		КОГДА СписокЗаказовКлиентов.ЗаказКлиента.бг_ПунктНазначения.ОрганизацияЕГАИС = ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненаОрганизацияЕГАИС,
	|	ВЫБОР
	|		КОГДА СписокЗаказовКлиентов.ЗаказКлиента.бг_Магазин <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И СписокЗаказовКлиентов.ЗаказКлиента.бг_ЗаказРозничногоПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗаказРозничногоПокупателя,
	|	ВЫБОР
	|		КОГДА СписокЗаказовКлиентов.ЗаказКлиента.бг_Магазин <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И СписокЗаказовКлиентов.ЗаказКлиента.бг_ЗаказРозничногоПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗаказМагазина
	|ПОМЕСТИТЬ ДанныеЗаказКлиента
	|ИЗ
	|	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ) КАК ТоварыКОтгрузкеОбороты
	|		ПО (СписокЗаказовКлиентов.ЗаказКлиента = ТоварыКОтгрузкеОбороты.ДокументОтгрузки)
	|			И (ТоварыКОтгрузкеОбороты.КОтгрузкеРасход > 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|";

КонецФункции

Функция ТекстЗапросаДанныеМаршрутныйЛист()
	
	Возврат "ВЫБРАТЬ
	|	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|	МАКСИМУМ(ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка, ЗНАЧЕНИЕ(Документ.битМаршрутныйЛист.ПустаяСсылка))) КАК МаршрутныйЛист
	|ПОМЕСТИТЬ ДанныеМаршрутныйЛист
	|ИЗ
	|	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист.Заказы КАК битМаршрутныйЛистЗаказы
	|		ПО СписокЗаказовКлиентов.ЗаказКлиента = битМаршрутныйЛистЗаказы.Заказ
	|			И (НЕ битМаршрутныйЛистЗаказы.Ссылка.ПометкаУдаления)
	|ГДЕ
	|	битМаршрутныйЛистЗаказы.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокЗаказовКлиентов.ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	МаршрутныйЛист
	|;
	|";
	
КонецФункции

Функция ТекстЗапросаДанныеРеализацияТоваровУслуг()
	
	Возврат "ВЫБРАТЬ
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Ссылка, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК РеализацияТоваровУслуг,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Номер, """") КАК РеализацияТоваровУслугНомер,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.СуммаДокумента, 0) = СписокЗаказовКлиентов.СуммаЗаказКлиента КАК СуммаЗаказаИРеализацииСовпадают,
	|	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента
	|ПОМЕСТИТЬ ДанныеРеализацияТоваровУслуг
	|ИЗ
	|	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО СписокЗаказовКлиентов.ЗаказКлиента = РеализацияТоваровУслуг.ЗаказКлиента
	|			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	|			И (РеализацияТоваровУслуг.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СписокЗаказовКлиентов.ЗаказКлиента,
	|	РеализацияТоваровУслуг
	|;
	|";

КонецФункции

Функция ТекстЗапросаДанныеТТНИсходящаяЕГАИС()
	
	Возврат "ВЫБРАТЬ
	|	ДанныеРеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента,
	|	ЕСТЬNULL(СтатусыДокументовЕГАИС.Документ, ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)) КАК ТТНИсходящаяЕГАИС,
	|	ЕСТЬNULL(СтатусыДокументовЕГАИС.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ПустаяСсылка)) КАК ТТНИсходящаяЕГАИССтатус,
	|	ЕСТЬNULL(СтатусыДокументовЕГАИС.Документ.НомерТТН, """") КАК ТТНИсходящаяЕГАИСНомер
	|ПОМЕСТИТЬ ДанныеТТНИсходящаяЕГАИС
	|ИЗ
	|	ДанныеРеализацияТоваровУслуг КАК ДанныеРеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (ДанныеРеализацияТоваровУслуг.РеализацияТоваровУслуг = ЕСТЬNULL(
	|	ВЫРАЗИТЬ(СтатусыДокументовЕГАИС.Документ КАК Документ.ТТНИсходящаяЕГАИС).ДокументОснование, ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяССылка))
	|	И ДанныеРеализацияТоваровУслуг.РеализацияТоваровУслуг <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))
	|ГДЕ
	|	НЕ СтатусыДокументовЕГАИС.Документ.ПометкаУдаления
	|	И НЕ СтатусыДокументовЕГАИС.Статус В (&СтатусыОтмены)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДанныеРеализацияТоваровУслуг.ЗаказКлиента,
	|	ТТНИсходящаяЕГАИС
	|;
	|";

КонецФункции

Функция ТекстЗапросаДанныеРасходныйОрдерНаТовары()
	
	Возврат "ВЫБРАТЬ
	|	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|	ЕСТЬNULL(ТоварыКОтгрузкеОбороты.Регистратор, ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)) КАК РасходныйОрдер,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ТоварыКОтгрузкеОбороты.Регистратор КАК Документ.РасходныйОрдерНаТовары).Номер, """") КАК РасходныйОрдерНомер
	|ПОМЕСТИТЬ ДанныеРасходныйОрдерНаТовары
	|ИЗ
	|	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ДокументОтгрузки В
	|					(ВЫБРАТЬ
	|						СписокЗаказовКлиентов.ЗаказКлиента
	|					ИЗ
	|						СписокЗаказовКлиентов КАК СписокЗаказовКлиентов)) КАК ТоварыКОтгрузкеОбороты
	|		ПО (СписокЗаказовКлиентов.ЗаказКлиента = ТоварыКОтгрузкеОбороты.ДокументОтгрузки)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТоварыКОтгрузкеОбороты.Регистратор) = ТИП(Документ.РасходныйОрдерНаТовары)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	РасходныйОрдер
	|;
	|";

КонецФункции

Функция ТекстЗапросаДанныеОтражениеФактаПоРасходномуОрдеру()
	
	Возврат "ВЫБРАТЬ
	|	ДанныеРасходныйОрдерНаТовары.ЗаказКлиента КАК ЗаказКлиента,
	|	ЕСТЬNULL(битОтражениеФактаПоРасходномуОрдеру.Ссылка, ЗНАЧЕНИЕ(Документ.битОтражениеФактаПоРасходномуОрдеру.ПустаяСсылка)) КАК ОтражениеФактаПоРасходномуОрдеру,
	|	ЕСТЬNULL(битОтражениеФактаПоРасходномуОрдеру.Номер, """") КАК ОтражениеФактаПоРасходномуОрдеруНомер,
	|	ЕСТЬNULL(битОтражениеФактаПоРасходномуОрдеру.СтатусSolvo, ЗНАЧЕНИЕ(Перечисление.бг_СтатусыОтгрузкиSolvo.ПустаяСсылка)) КАК СтатусSolvoОтражениеФактаПоРасходномуОрдеру
	|ПОМЕСТИТЬ ДанныеОтражениеФактаПоРасходномуОрдеру
	|ИЗ
	|	ДанныеРасходныйОрдерНаТовары КАК ДанныеРасходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|		ПО ДанныеРасходныйОрдерНаТовары.РасходныйОрдер = битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары
	|			И (НЕ битОтражениеФактаПоРасходномуОрдеру.ПометкаУдаления)
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтражениеФактаПоРасходномуОрдеру,
	|	ЗаказКлиента
	|;
	|";

КонецФункции

Функция ТекстЗапросаДанныеПоказательСборки()
	
	Возврат "ВЫБРАТЬ
	|	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход = ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
	|				ТОГДА 100
	|			КОГДА ТоварыКОтгрузкеОбороты.КОтгрузкеПриход = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫРАЗИТЬ(100 * ТоварыКОтгрузкеОбороты.КОтгрузкеРасход / ТоварыКОтгрузкеОбороты.КОтгрузкеПриход КАК ЧИСЛО(15, 2))
	|		КОНЕЦ, 0) КАК ПроцентСборки
	|ПОМЕСТИТЬ ДанныеПоказательСборки
	|ИЗ
	|	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке.Обороты(
	|				,
	|				,
	|				,
	|				ТИПЗНАЧЕНИЯ(ДокументОтгрузки) = ТИП(Документ.ЗаказКлиента)
	|				И ДокументОтгрузки В
	|					(ВЫБРАТЬ
	|						СписокЗаказовКлиентов.ЗаказКлиента
	|					ИЗ
	|						СписокЗаказовКлиентов КАК СписокЗаказовКлиентов)) КАК ТоварыКОтгрузкеОбороты
	|		ПО (СписокЗаказовКлиентов.ЗаказКлиента = ТоварыКОтгрузкеОбороты.ДокументОтгрузки)
	|			И (ТоварыКОтгрузкеОбороты.КОтгрузкеРасход > 0)
	
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента;
	|";

КонецФункции

Функция ТекстЗапросаРезультирующейТаблицы(СписокИменТаблицИПолейЗапроса)
	
	ТекстРезультирующейТаблицы = 
	"ВЫБРАТЬ
	|	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента
	|ИЗ
	|	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов";
	

	Для Каждого СтрокаИмяТаблицыИПоля Из СписокИменТаблицИПолейЗапроса Цикл
		
		ПозицияСлова = СтрНайти(ТекстРезультирующейТаблицы,
			"	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента",
			НаправлениеПоиска.СКонца);
		
		Если ПозицияСлова > 0 Тогда
			
			ТекстЗапросаДоВставляемойСтроки = Лев(ТекстРезультирующейТаблицы, ПозицияСлова - 1);
			ТекстЗапросаПослеВставляемойСтроки = Сред(ТекстРезультирующейТаблицы, ПозицияСлова);
			ВставляемаяСтрока = СтрШаблон(НСтр("ru = '	%1.%2 КАК %3,'"),
				СтрокаИмяТаблицыИПоля.ИмяТаблицы,
				СтрокаИмяТаблицыИПоля.Показатель,
				СтрокаИмяТаблицыИПоля.Показатель);
				
			ТекстРезультирующейТаблицы = СтрШаблон(
				"%1%2%3%4",
				ТекстЗапросаДоВставляемойСтроки,
				ВставляемаяСтрока,
				Символы.ПС,
				ТекстЗапросаПослеВставляемойСтроки);
			
		КонецЕсли;
			
	КонецЦикла;

	СписокИменТаблицЗапроса = ОбщегоНазначения.ВыгрузитьКолонку(СписокИменТаблицИПолейЗапроса, "ИмяТаблицы", Истина);
	
	Для Каждого СтрокаИмяТаблицы Из СписокИменТаблицЗапроса Цикл
		
		ПозицияСлова = СтрНайти(ТекстРезультирующейТаблицы,
			"	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов",
			НаправлениеПоиска.СКонца);
		
		Если ПозицияСлова > 0 Тогда
			
			ВставляемаяСтрока = СтрШаблон(НСтр(
				"ru = '		ЛЕВОЕ СОЕДИНЕНИЕ %1 КАК %2
				|		ПО СписокЗаказовКлиентов.ЗаказКлиента = %3.ЗаказКлиента'"),
				СтрокаИмяТаблицы, СтрокаИмяТаблицы, СтрокаИмяТаблицы);

			
			ТекстРезультирующейТаблицы = СтрШаблон(
				"%1%2%3",
				ТекстРезультирующейТаблицы,
				Символы.ПС,
				ВставляемаяСтрока);
			
			КонецЕсли;

	КонецЦикла;
	
	Возврат ТекстРезультирующейТаблицы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
