#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс	

// Процедура - Фиксирует печать документов 
//
// Параметры:
//  ТабличныеДокументы - СписокЗначений 
//  ОбъектыПечати - СписокЗначений - Список документов 
//  СписокПечати - СписокЗначений - Идентификаторы макетов
//	АдресПовторноФиксируемыхДокументов - Неопределено - Адрес, по которому поместятся 
//		вторично фиксируемые документы
//
Процедура ЗафиксироватьПечатьДокументов(ТабличныеДокументы, ОбъектыПечати, 
	СписокПечати, АдресПовторноФиксируемыхДокументов) Экспорт

	РаспечатанныеДокументы = РаспечатанныеДокументы(ТабличныеДокументы, ОбъектыПечати, СписокПечати);
	
	ОтражаемыеДокументы = Справочники.бг_НастройкиФиксацииПечатныхФорм.ДокументыПоНастройкамФиксации(
		РаспечатанныеДокументы, АдресПовторноФиксируемыхДокументов);

	Если ОтражаемыеДокументы.Количество() <> 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеДляЗаписи = ДанныеДокументовДляЗаписи(ОтражаемыеДокументы);
		ОтразитьФактПечатиДокументов(ДанныеДляЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Фиксирует печать комплекта документов
//
// Параметры:
//  КоллекцияПечатныхФормПоОбъектам - ТаблицаЗначений
//	АдресПовторноФиксируемыхДокументов - Неопределено - Адрес, по которому поместятся 
//		вторично фиксируемые документы
//
Процедура ЗафиксироватьПечатьКомплектаДокументов(КоллекцияПечатныхФормПоОбъектам, 
	АдресПовторноФиксируемыхДокументов) Экспорт

	РаспечатанныеДокументы = ИнициализироватьТаблицуРаспечатанныхДокументов();
	
	Для Каждого КоллекцияПоОбъекту Из КоллекцияПечатныхФормПоОбъектам Цикл
		
		ОбъектПечати = КоллекцияПоОбъекту.Ключ;
		ПечатныеФормыПоОбъекту = КоллекцияПоОбъекту.Значение;
		
		КолонкаСодержитТип = РаспечатанныеДокументы.Колонки.ОбъектПечати.ТипЗначения.СодержитТип(
				ТипЗнч(ОбъектПечати));
				
		Если Не КолонкаСодержитТип Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПечатнаяФорма Из ПечатныеФормыПоОбъекту Цикл
			
			Если ПечатнаяФорма.ТабличныйДокумент = Неопределено Тогда
				Продолжить;	
			КонецЕсли;
			
			ДанныеРаспечатанногоДокумента = РаспечатанныеДокументы.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеРаспечатанногоДокумента, ПечатнаяФорма);
			
			ДанныеРаспечатанногоДокумента.ОбъектПечати = ОбъектПечати;
			ДанныеРаспечатанногоДокумента.КоличествоСтраниц = ПечатнаяФорма.ТабличныйДокумент.КоличествоСтраниц();
			
		КонецЦикла;	
			
	КонецЦикла;
	
	ОтражаемыеДокументы = Справочники.бг_НастройкиФиксацииПечатныхФорм.ДокументыПоНастройкамФиксации(
		РаспечатанныеДокументы, АдресПовторноФиксируемыхДокументов);
		
	Если ОтражаемыеДокументы.Количество() <> 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеДляЗаписи = ДанныеДокументовДляЗаписи(ОтражаемыеДокументы);
		ОтразитьФактПечатиДокументов(ДанныеДляЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РаспечатанныеДокументы(ТабличныеДокументы, ОбъектыПечати, СписокПечати)
	
	РаспечатанныеДокументы = ИнициализироватьТаблицуРаспечатанныхДокументов();
	
	Если ОбъектыПечати.Количество() = 0 Тогда
		Возврат РаспечатанныеДокументы;
	КонецЕсли;
	
	Для Каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		
		ИдентификаторМакета = ИдентификаторМакетаТабличногоДокумента(
			СписокПечати, 
			ТабличныйДокумент.Представление);
		
		Если ИдентификаторМакета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныйДокументИсходный = ТабличныйДокумент.Значение;
		
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			
			КолонкаСодержитТип = РаспечатанныеДокументы.Колонки.ОбъектПечати.ТипЗначения.СодержитТип(
				ТипЗнч(ОбъектПечати.Значение));
			
			Если Не КолонкаСодержитТип Тогда
				Продолжить;	
			КонецЕсли;	
			
			КоличествоСтраниц = КоличествоСтраницРаспечатанногоОбъекта(
				ТабличныйДокументИсходный, 
				ОбъектПечати);
				
			Если КоличествоСтраниц = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеРаспечатанногоДокумента = РаспечатанныеДокументы.Добавить();
			
			ДанныеРаспечатанногоДокумента.ОбъектПечати = ОбъектПечати.Значение;
			ДанныеРаспечатанногоДокумента.ИдентификаторМакета = ИдентификаторМакета;	
			ДанныеРаспечатанногоДокумента.КоличествоСтраниц = КоличествоСтраниц;
			
		КонецЦикла;	
		
	КонецЦикла;
	
	РаспечатанныеДокументы.Свернуть("ОбъектПечати,ИдентификаторМакета", "КоличествоСтраниц");
	
	Возврат РаспечатанныеДокументы;
		
КонецФункции

Функция ИнициализироватьТаблицуРаспечатанныхДокументов() 
	
	РаспечатанныеДокументы = Новый ТаблицаЗначений;
	
	РаспечатанныеДокументы.Колонки.Добавить("ОбъектПечати", ОписаниеТиповОбъектаПечати());
	РаспечатанныеДокументы.Колонки.Добавить("ИдентификаторМакета", ОбщегоНазначения.ОписаниеТипаСтрока(250));
	РаспечатанныеДокументы.Колонки.Добавить("КоличествоСтраниц", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	
	Возврат РаспечатанныеДокументы;
	
КонецФункции	

Функция ИдентификаторМакетаТабличногоДокумента(СписокПечати, ПредставлениеТабличногоДокумента)
	
	ИдентификаторМакета = Неопределено;
	
	Для Каждого РаспечатанныеМакеты Из СписокПечати Цикл
		
		Если СтрНайти(ПредставлениеТабличногоДокумента, РаспечатанныеМакеты.Представление) Тогда
			ИдентификаторМакета = РаспечатанныеМакеты.Значение;
			
			ПозицияСимволаРазделенияСтраниц = СтрНайти(ИдентификаторМакета, "/");
			
			Если ПозицияСимволаРазделенияСтраниц <> 0 Тогда
				ИдентификаторМакета = Лев(ИдентификаторМакета, ПозицияСимволаРазделенияСтраниц - 1);	
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;	
		
	КонецЦикла;	

	Возврат ИдентификаторМакета;
	
КонецФункции	

Функция КоличествоСтраницРаспечатанногоОбъекта(ТабличныйДокументИсходный, ОбъектПечати)
	
	КоличествоСтраниц = 0;
	
	ЕстьОбластьПечатиОбъекта = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		ТабличныйДокументИсходный.Области, 
		ОбъектПечати.Представление);
	
	Если ЕстьОбластьПечатиОбъекта Тогда
		
		ОбластьПечатиОбъекта = ТабличныйДокументИсходный.Области[ОбъектПечати.Представление];
		
		НомерСтрокиОкончание = ОбластьПечатиОбъекта.Низ - ОбластьПечатиОбъекта.Верх + 1;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		ТабличныйДокумент.Область(1, , НомерСтрокиОкончание).Имя = ОбъектПечати.Представление;
		
		ЗаполнитьЗначенияСвойств(
			ТабличныйДокумент, 
			ТабличныйДокументИсходный, 
			УправлениеПечатью.КопируемыеСвойстваТабличногоДокумента());
		
		ТабличныйДокумент.ВставитьОбласть(
			ОбластьПечатиОбъекта, 
			ТабличныйДокумент.Области[ОбъектПечати.Представление],, 
			Истина);
		
		КоличествоСтраниц = ТабличныйДокумент.КоличествоСтраниц();	
		
	КонецЕсли;
		
	Возврат КоличествоСтраниц;	
	
КонецФункции	

Функция ДанныеДокументовДляЗаписи(ОтражаемыеДокументы) Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражаемыеДокументы.Документ КАК Документ,
	|	ОтражаемыеДокументы.ОбъектПечати КАК ОбъектПечати,
	|	ОтражаемыеДокументы.ИдентификаторМакета КАК ИдентификаторМакета,
	|	ОтражаемыеДокументы.КоличествоСтраниц КАК КоличествоСтраниц,
	|	ОтражаемыеДокументы.РаспечатанныйНомер КАК РаспечатанныйНомер,
	|	ОтражаемыеДокументы.ПечатнаяФорма КАК ПечатнаяФорма,
	|	ОтражаемыеДокументы.ДокументКорректировки КАК ДокументКорректировки,
	|	ОтражаемыеДокументы.СчетФактураВыданный КАК СчетФактураВыданный
	|ПОМЕСТИТЬ ОтражаемыеДокументы
	|ИЗ
	|	&ОтражаемыеДокументы КАК ОтражаемыеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражаемыеДокументы.Документ КАК Документ,
	|	ОтражаемыеДокументы.ОбъектПечати КАК ОбъектПечати,
	|	ОтражаемыеДокументы.ПечатнаяФорма КАК ПечатнаяФорма,
	|	ОтражаемыеДокументы.ИдентификаторМакета КАК ИдентификаторМакета,
	|	ОтражаемыеДокументы.КоличествоСтраниц КАК КоличествоСтраниц,
	|	ОтражаемыеДокументы.РаспечатанныйНомер КАК РаспечатанныйНомер,
	|	ОтражаемыеДокументы.ДокументКорректировки КАК ДокументКорректировки,
	|	ОтражаемыеДокументы.СчетФактураВыданный КАК СчетФактураВыданный,
	|	РегТранспортнаяИнформация.Водитель КАК Водитель,
	|	РегТранспортнаяИнформация.Перевозчик КАК Перевозчик,
	|	РегТранспортнаяИнформация.ТранспортноеСредство КАК Транспорт
	|ИЗ
	|	ОтражаемыеДокументы КАК ОтражаемыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫРАЗИТЬ(ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг) КАК Объект,
	|			МАКСИМУМ(ТранспортнаяИнформация.ТранспортноеСредство) КАК ТранспортноеСредство
	|		ИЗ
	|			РегистрСведений.бг_ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|		ГДЕ
	|			ВЫРАЗИТЬ(ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг) В
	|					(ВЫБРАТЬ
	|						ОтражаемыеДокументы.Документ
	|					ИЗ
	|						ОтражаемыеДокументы)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг)) КАК ТранспортнаяИнформация
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ТранспортнаяИнформация КАК РегТранспортнаяИнформация
	|			ПО ТранспортнаяИнформация.Объект = РегТранспортнаяИнформация.Объект
	|				И ТранспортнаяИнформация.ТранспортноеСредство = РегТранспортнаяИнформация.ТранспортноеСредство
	|		ПО ОтражаемыеДокументы.Документ = ТранспортнаяИнформация.Объект";
	
	Запрос.УстановитьПараметр("ОтражаемыеДокументы", ОтражаемыеДокументы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОтразитьФактПечатиДокументов(ДанныеДляЗаписи) Экспорт

	ДатаПечати = ТекущаяДатаСеанса();
		
	Для Каждого Запись Из ДанныеДляЗаписи Цикл
		
		МенеджерЗаписи = РегистрыСведений.бг_ФиксацияПечатиДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись);
		МенеджерЗаписи.Период = ДатаПечати;
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры	

Функция ОписаниеТиповОбъектаПечати()

	ТипыОбъектовПечати = Новый Массив;
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	ТипыОбъектовПечати.Добавить(Тип("ДокументСсылка.КорректировкаПриобретения"));
	
	Возврат Новый ОписаниеТипов(ТипыОбъектовПечати);
	
КонецФункции

#КонецОбласти

#КонецЕсли