
#Область ПрограммныйИнтерфейс

// Возвращает признак того что заказ согласован
// Параметры:
//    ЗаказКлиента - ссылка Заказ клиента
// Возвращаемое значение:
//    Булево
//
Функция ЗаказСогласован(ЗаказКлиента) Экспорт

	РезультатСогласования = СостояниеСогласования(ЗаказКлиента).РезультатСогласования;
	
	Возврат РезультатСогласования = Перечисления.бг_РезультатыСогласования.СогласованоПринудительно
		Или РезультатСогласования = Перечисления.бг_РезультатыСогласования.Согласовано
		Или РезультатСогласования = Перечисления.бг_РезультатыСогласования.АвтоСогласование;
	
КонецФункции

// Записывает новое состояние согласования
//
// Параметры:
//   ЗаказКлиента   - Тип измерения ЗаказКлиента регистра - Заказ клиента
//   НовоеСостояние - Структура с новыми состояниями
//   
Процедура ЗаписатьНовоеСостояние(ЗаказКлиента, НовоеСостояние) Экспорт
	
	Если Не ЗначениеЗаполнено(НовоеСостояние) Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.бг_СогласованиеЗаказовКлиентов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ЗаказКлиента.Установить(ЗаказКлиента);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.ЗаказКлиента = ЗаказКлиента;
	Иначе
		Запись = НаборЗаписей[0];
	КонецЕсли; 
	
	ЗаполнитьЗначенияСвойств(Запись, НовоеСостояние);
	Если Запись.РезультатСогласования <> Перечисления.бг_РезультатыСогласования.СогласованоПринудительно Тогда
		Запись.РезультатСогласования = РезультатСогласования(Запись);
	КонецЕсли;
	
	ЗаполнитьДатуСогласования(Запись, НовоеСостояние);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает данные из регистра бг_СогласованиеЗаказовКлиентов по Заказу клиента
// Параметры:
//    ЗаказКлиента - ссылка Заказ клиента
// Возвращаемое значение:
//    Структура по данным регистра бг_СогласованиеЗаказовКлиентов
//
Функция СостояниеСогласования(ЗаказКлиента) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.бг_СогласованиеЗаказовКлиентов;
	
	МенеджерЗаписи = РегистрыСведений.бг_СогласованиеЗаказовКлиентов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЗаказКлиента = ЗаказКлиента;
	МенеджерЗаписи.Прочитать();

	Возврат ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
КонецФункции

// Производится АвтоСогласование заказа клиента
// Параметры:
//   ЗаказКлиента   - ссылка ЗаказКлиента
Процедура АвтоСогласованиеЗаказа(ЗаказКлиента) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Устанавливем блокировку на рс бг_СогласованиеЗаказовКлиентов перед чтением,
	// чтобы избежать коллизий с ручным согласованием
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ИмяРегистра = "РегистрСведений.бг_СогласованиеЗаказовКлиентов";
		ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
		ЭлементБлокировки.УстановитьЗначение("ЗаказКлиента", ЗаказКлиента);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Запрос = ЗапросАвтоСогласование(ЗаказКлиента);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НовоеСостояниеСогласования = Новый Структура;
			
			СтруктураКонтролеров = Новый Структура("ФК, КК, СБ");
			
			Для Каждого Контролер Из СтруктураКонтролеров Цикл
				
				Если Выборка["АвтоСогласование" + Контролер.Ключ] Тогда
					
					НовоеСостояниеСогласования.Вставить("Комментарий" + Контролер.Ключ,
						Выборка["ПричинаАвтоОтказа" + Контролер.Ключ]);
					
					// Особые условия по контролерам	
					Если Контролер.Ключ = "ФК" 
						И Выборка.ПричинаНеСогласованияФК <> "" Тогда
						
						НовоеСостояниеСогласования.КомментарийФК = НовоеСостояниеСогласования.КомментарийФК
							+ Выборка.ПричинаНеСогласованияФК;
						
					ИначеЕсли Контролер.Ключ = "СБ" 
						И Выборка.ПричинаАвтоОтказаСБ = ""		
						И Выборка.ПричинаАвтоОтказаКК <> "" Тогда
						
						НовоеСостояниеСогласования.КомментарийСБ = НовоеСостояниеСогласования.КомментарийСБ
							+ Выборка.ПричинаАвтоОтказаКК;
					Иначе
						
						РезультатСогласования = Перечисления.бг_РезультатыСогласования
							[?(Выборка["ПричинаАвтоОтказа" + Контролер.Ключ] = "", "АвтоСогласование", "Автоотказ")];
						НовоеСостояниеСогласования.Вставить("РезультатСогласования" + Контролер.Ключ, РезультатСогласования);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ЗаписатьНовоеСостояние(ЗаказКлиента, НовоеСостояниеСогласования);
			
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
	
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось выполнить автосогласование: %1 %2 %3'"), 
			ЗаказКлиента, Символы.ПС, ОписаниеОшибки());
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
			"Не удалось выполнить автосогласование", 
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	

КонецПроцедуры

// Производится АвтоСогласование заказов клиентов, которые не прошли согласование, но дата отгрузки которых больше текущей
Процедура ПовторноеАвтоСогласование() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ПО ДокументЗаказКлиента.Ссылка = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО ДокументЗаказКлиента.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_СогласованиеЗаказовКлиентов КАК бг_СогласованиеЗаказовКлиентов
	|		ПО (бг_СогласованиеЗаказовКлиентов.ЗаказКлиента = ДокументЗаказКлиента.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗначенияДополнительныхКонстант ЗначенияДополнительныхКонстант
	|		ПО ВЫРАЗИТЬ(ЗначенияДополнительныхКонстант.Константа КАК Справочник.бг_ДополнительныеКонстанты).Идентификатор = ""ИспользоватьСогласованиеЗаказовПокупателей""
	|			И ЗначенияДополнительныхКонстант.Разрез = ДокументЗаказКлиента.Организация
	|ГДЕ
	|	ДокументЗаказКлиента.Проведен
	|	И НЕ ЗначенияДополнительныхКонстант.Разрез IS NULL
	|	И ДокументЗаказКлиента.ДатаОтгрузки >= &ТекущаяДата
	|	И ДокументЗаказКлиента.бг_ПолныйРезерв
	|	И НЕ ДокументЗаказКлиента.бг_ДолгосрочныйРезерв
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка ЕСТЬ NULL
	|	И СостоянияЗаказовКлиентов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|	И НЕ ЕСТЬNULL(бг_СогласованиеЗаказовКлиентов.РезультатСогласования, ЗНАЧЕНИЕ(Перечисление.бг_РезультатыСогласования.ПустаяСсылка)) В (ЗНАЧЕНИЕ(Перечисление.бг_РезультатыСогласования.Согласовано), ЗНАЧЕНИЕ(Перечисление.бг_РезультатыСогласования.АвтоСогласование), ЗНАЧЕНИЕ(Перечисление.бг_РезультатыСогласования.СогласованоПринудительно))";
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		АвтоСогласованиеЗаказа(Выборка.Ссылка);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция РезультатСогласования(Запись)

	НастройкиСогласования = 
		РегистрыСведений.бг_НастройкиСогласованияЗаказовКлиентов.НастройкиСогласования(Запись.ЗаказКлиента);
	
	ПриоритетыРезультатовСогласования = Новый СписокЗначений;
	ПриоритетыРезультатовСогласования.Добавить(Перечисления.бг_РезультатыСогласования.ПустаяСсылка());
	ПриоритетыРезультатовСогласования.Добавить(Перечисления.бг_РезультатыСогласования.НеСогласовано);
	ПриоритетыРезультатовСогласования.Добавить(Перечисления.бг_РезультатыСогласования.Автоотказ);
	ПриоритетыРезультатовСогласования.Добавить(Перечисления.бг_РезультатыСогласования.СогласованоПринудительно);
	ПриоритетыРезультатовСогласования.Добавить(Перечисления.бг_РезультатыСогласования.Согласовано);
	ПриоритетыРезультатовСогласования.Добавить(Перечисления.бг_РезультатыСогласования.АвтоСогласование);
	
	ИндексПриоритета = 100;
	
	СтруктураКонтролеров = Новый Структура("ФК, КК, СБ");
	Для Каждого Контролер Из СтруктураКонтролеров Цикл
	
		Если НастройкиСогласования["ТребуетсяВиза" + Контролер.Ключ] Тогда
			Если Не ЗначениеЗаполнено(Запись["РезультатСогласования" + Контролер.Ключ]) Тогда
				ИндексПриоритета = 0;
				Прервать;
			КонецЕсли;

			НовыйИндексПриоритета = ПриоритетыРезультатовСогласования.Индекс(
				ПриоритетыРезультатовСогласования.НайтиПоЗначению(Запись["РезультатСогласования" + Контролер.Ключ]));
			ИндексПриоритета = Мин(ИндексПриоритета, НовыйИндексПриоритета);
		КонецЕсли;
	
	КонецЦикла;

	Если ИндексПриоритета = 100 Тогда // нет настроеек - результат согласования не меняем
		РезультатСогласования = Запись.РезультатСогласования;
	Иначе
		РезультатСогласования = ПриоритетыРезультатовСогласования[ИндексПриоритета].Значение;
	КонецЕсли;
	
	Возврат РезультатСогласования;

КонецФункции

Процедура ЗаполнитьДатуСогласования(Запись, НовоеСостояние)

	СтруктураКонтролеров = Новый Структура("ФК, КК, СБ");
	Для Каждого Контролер Из СтруктураКонтролеров Цикл
		ПолеРезультатСогласования = "РезультатСогласования" + Контролер.Ключ;
		ПолеДатаСогласования = "ДатаСогласования" + Контролер.Ключ;
		
		Если Не НовоеСостояние.Свойство(ПолеРезультатСогласования) Тогда
			Продолжить;
		КонецЕсли;
		
		Если    Запись[ПолеРезультатСогласования] = Перечисления.бг_РезультатыСогласования.Согласовано
			Или Запись[ПолеРезультатСогласования] = Перечисления.бг_РезультатыСогласования.СогласованоПринудительно
			Или Запись[ПолеРезультатСогласования] = Перечисления.бг_РезультатыСогласования.АвтоСогласование Тогда
			
			Если Не ЗначениеЗаполнено(Запись[ПолеДатаСогласования]) Тогда
				Запись[ПолеДатаСогласования] = ТекущаяДатаСеанса();
			КонецЕсли; 
		Иначе
			Запись[ПолеДатаСогласования] = '00010101';
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ЗапросАвтоСогласование(ЗаказКлиента) Экспорт

	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(РегистрыСведений.бг_НастройкиСогласованияЗаказовКлиентов.ТестЗапросаНастройкиСогласования());
	МассивТекстов.Добавить(РегистрыСведений.бг_ОтсрочкиПлатежаПокупателям.ТестЗапросаОтсрочкиПлатежа());
	МассивТекстов.Добавить(ТекстЗапросаАвтоСогласование());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	СтатусыОбработкиТТН = Новый Массив;
	СтатусыОбработкиТТН.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	СтатусыОбработкиТТН.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	СтатусыОбработкиТТН.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен);
	СтатусыОбработкиТТН.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом);
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, 
		"ДатаОтгрузки, Договор, бг_КаналПродаж, Контрагент, Партнер, Организация, бг_ПунктНазначения, 
		|бг_ПунктНазначения.Территория, бг_Лицензия.бг_ДатаПрекращенияДействия, бг_Магазин,
		|бг_ПунктНазначения.КаналПродаж.КоличествоДнейДоОкончанияЛицензии");

	ПараметрыЗапроса = Запрос.НайтиПараметры();
	// Заполнение параметров запроса с совпадающими именами
	Для Каждого РеквизитЗаказа Из РеквизитыЗаказа Цикл
		Если ПараметрыЗапроса.Найти(РеквизитЗаказа.Ключ) <> Неопределено Тогда
			Запрос.УстановитьПараметр(РеквизитЗаказа.Ключ, РеквизитЗаказа.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("КаналПродаж", РеквизитыЗаказа.бг_КаналПродаж);
	Запрос.УстановитьПараметр("ПунктНазначения", РеквизитыЗаказа.бг_ПунктНазначения);
	Запрос.УстановитьПараметр("Территория", РеквизитыЗаказа.бг_ПунктНазначенияТерритория);
	Запрос.УстановитьПараметр("ДатаПрекращенияДействияЛицензии", РеквизитыЗаказа.бг_Лицензиябг_ДатаПрекращенияДействия);
	Запрос.УстановитьПараметр("КоличествоДнейДоОкончанияЛицензии", 
		РеквизитыЗаказа.бг_ПунктНазначенияКаналПродажКоличествоДнейДоОкончанияЛицензии);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("СтатусыСогласованияСогласовано", 
		Перечисления.бг_РезультатыСогласования.СтатусыСогласовано());
	Запрос.УстановитьПараметр("СтатусыОбработкиТТН", СтатусыОбработкиТТН);
	Запрос.УстановитьПараметр("ЧерезМагазин", РеквизитыЗаказа.бг_Магазин <> Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Соглашение", Неопределено);

	Запрос.УстановитьПараметр("ПричинаОтказаОтсутвует", "");
	Запрос.УстановитьПараметр("ПричинаОтказаНеПодтвержденныеТТН",
		"Внимание! У клиента есть не подтвержденные ТТН ЕГАИС, уведомление повторное, заказ отклонен! ");
	Запрос.УстановитьПараметр("ПричинаОтказаНеПодтвержденнаяТТН",
		"Внимание! У клиента есть не подтвержденная ТТН ЕГАИС, следующий заказ будет отклонен! ");
	Запрос.УстановитьПараметр("ПричинаОтказаСрокДействияЛицензии",
		"Cрок действия лицензии контрагента по отношению к планируемой дате "
		+ "отгрузки превышает количество дней, установленные Канале продаж. ");
	Запрос.УстановитьПараметр("ПричинаОтказаОтклонениеEDI",
		"По заказу EDI превышено допустимое отклонение. ");
	Запрос.УстановитьПараметр("ПричинаОтказаРучноеСогласованиеФК",
		"Для данного заказа установлено Ручное согласование ФК. ");
	Запрос.УстановитьПараметр("ПричинаОтказаОтклонениеEDI",
		"По заказу EDI превышено допустимое отклонение. ");
	Запрос.УстановитьПараметр("ПричинаОтказаНеУстановленКредитныйЛимит",
		"Не установлен кредитный лимит. ");
	Запрос.УстановитьПараметр("ПричинаОтказаПревышенКрединыйЛимит",
		"Превышена допустимая сумма кредитного лимита. ");
	Запрос.УстановитьПараметр("ПричинаОтказаПросроченнаяЗадолженность",
		"Имеется просроченная задолженность. ");
	Запрос.УстановитьПараметр("ПричинаОтказаНеУстановленаОтрочкаПлатежа",
		"Не установлена отсрочка платежа. ");

	Возврат Запрос;
КонецФункции

Функция ТекстЗапросаАвтоСогласование()

	Возврат 
	"ВЫБРАТЬ
	|	РасчетыСРозничнымиКлиентами.Договор КАК Договор,
	|	РасчетыСРозничнымиКлиентами.ДокументОтгрузки.бг_ПунктНазначения КАК ПунктНазначения,
	|	ДОБАВИТЬКДАТЕ(РасчетыСРозничнымиКлиентами.ДокументОтгрузки.Дата, ДЕНЬ, ЕСТЬNULL(ВЫРАЗИТЬ(РасчетыСРозничнымиКлиентами.ДокументОтгрузки.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_КоличествоДнейОтсрочки + ВЫРАЗИТЬ(РасчетыСРозничнымиКлиентами.ДокументОтгрузки.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_КорректировкаОтсрочкиПлатежа, 0)) КАК ДатаПлановогоПогашения,
	|	РасчетыСРозничнымиКлиентами.СуммаВРозницуОстаток КАК СуммаВРозницуОстаток
	|ПОМЕСТИТЬ РасчетыСРозничнымиКлиентами
	|ИЗ
	|	РегистрНакопления.бг_РасчетыСРозничнымиКлиентами.Остатки(
	|			,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент) КАК РасчетыСРозничнымиКлиентами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК Документ.РеализацияТоваровУслуг).бг_ПунктНазначения КАК ПунктНазначения,
	|	СУММА(РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток) КАК Долг,
	|	0 КАК Заказано,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток < 0
	|				ТОГДА 0
	|			ИНАЧЕ РАЗНОСТЬДАТ(РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения, &ДатаОтгрузки, ДЕНЬ)
	|		КОНЕЦ) КАК ГлубинаПДЗ,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток < 0
	|					ИЛИ РасчетыСКлиентамиПоСрокамОстатки.ДатаПлановогоПогашения >= &ДатаОтгрузки
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокамОстатки.ДолгОстаток
	|		КОНЕЦ) КАК ПДЗ
	|ПОМЕСТИТЬ ЗадолженностьПредварительно
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			,
	|			АналитикаУчетаПоПартнерам.Организация = &Организация
	|				И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент) КАК РасчетыСКлиентамиПоСрокамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентамиПоСрокамОстатки.АналитикаУчетаПоПартнерам.Договор,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиПоСрокамОстатки.РасчетныйДокумент КАК Документ.РеализацияТоваровУслуг).бг_ПунктНазначения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСРозничнымиКлиентами.Договор,
	|	РасчетыСРозничнымиКлиентами.ПунктНазначения,
	|	СУММА(РасчетыСРозничнымиКлиентами.СуммаВРозницуОстаток),
	|	0,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РасчетыСРозничнымиКлиентами.СуммаВРозницуОстаток < 0
	|				ТОГДА 0
	|			ИНАЧЕ РАЗНОСТЬДАТ(РасчетыСРозничнымиКлиентами.ДатаПлановогоПогашения, &ДатаОтгрузки, ДЕНЬ)
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСРозничнымиКлиентами.СуммаВРозницуОстаток < 0
	|					ИЛИ РасчетыСРозничнымиКлиентами.ДатаПлановогоПогашения < &ДатаОтгрузки
	|				ТОГДА 0
	|			ИНАЧЕ РасчетыСРозничнымиКлиентами.СуммаВРозницуОстаток
	|		КОНЕЦ)
	|ИЗ
	|	РасчетыСРозничнымиКлиентами КАК РасчетыСРозничнымиКлиентами
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСРозничнымиКлиентами.Договор,
	|	РасчетыСРозничнымиКлиентами.ПунктНазначения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).Договор,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ПунктНазначения,
	|	0,
	|	СУММА(ЗаказыКлиентовОстатки.СуммаОстаток),
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|			,
	|			ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).Контрагент = &Контрагент
	|				И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).ДатаОтгрузки <= &ДатаОтгрузки
	|				И ЗаказКлиента В
	|					(ВЫБРАТЬ
	|						РегистрСведений.бг_СогласованиеЗаказовКлиентов.ЗаказКлиента
	|					ИЗ
	|						РегистрСведений.бг_СогласованиеЗаказовКлиентов
	|					ГДЕ
	|						РегистрСведений.бг_СогласованиеЗаказовКлиентов.РезультатСогласованияФК В (&СтатусыСогласованияСогласовано))) КАК ЗаказыКлиентовОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).Договор,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовОстатки.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ПунктНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗадолженностьПредварительно.Долг) КАК Долг,
	|	СУММА(ЗадолженностьПредварительно.ПДЗ) КАК ПДЗ,
	|	СУММА(ЗадолженностьПредварительно.Заказано) КАК Заказано,
	|	МАКСИМУМ(ЗадолженностьПредварительно.ГлубинаПДЗ - ЕСТЬNULL(НастройкиСогласования.ДопустимыеДниПДЗ, 0)) КАК ГлубинаПДЗ_МинусДопустимыеДни
	|ПОМЕСТИТЬ ЗадолженностьПоКонтрагенту
	|ИЗ
	|	ЗадолженностьПредварительно КАК ЗадолженностьПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСогласования КАК НастройкиСогласования
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗадолженностьПредварительно.Долг) КАК Долг,
	|	СУММА(ЗадолженностьПредварительно.ПДЗ) КАК ПДЗ,
	|	СУММА(ЗадолженностьПредварительно.Заказано) КАК Заказано,
	|	МАКСИМУМ(ЗадолженностьПредварительно.ГлубинаПДЗ - ЕСТЬNULL(НастройкиСогласования.ДопустимыеДниПДЗ, 0)) КАК ГлубинаПДЗ_МинусДопустимыеДни
	|ПОМЕСТИТЬ ЗадолженностьПоДоговору
	|ИЗ
	|	ЗадолженностьПредварительно КАК ЗадолженностьПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСогласования КАК НастройкиСогласования
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗадолженностьПредварительно.Договор = &Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗадолженностьПредварительно.Долг) КАК Долг,
	|	СУММА(ЗадолженностьПредварительно.ПДЗ) КАК ПДЗ,
	|	СУММА(ЗадолженностьПредварительно.Заказано) КАК Заказано,
	|	МАКСИМУМ(ЗадолженностьПредварительно.ГлубинаПДЗ - ЕСТЬNULL(НастройкиСогласования.ДопустимыеДниПДЗ, 0)) КАК ГлубинаПДЗ_МинусДопустимыеДни
	|ПОМЕСТИТЬ ЗадолженностьПоПунктуНазначения
	|ИЗ
	|	ЗадолженностьПредварительно КАК ЗадолженностьПредварительно
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСогласования КАК НастройкиСогласования
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗадолженностьПредварительно.ПунктНазначения = &ПунктНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Ссылка КАК Ссылка,
	|	ЗаказыКлиентов.бг_ИсточникЗаказа КАК ИсточникЗаказа,
	|	ЗаказыКлиентов.бг_РучноеСогласованиеФК КАК РучноеСогласованиеФК,
	|	ЗаказыКлиентов.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА бг_СогласованиеЗаказовКлиентов.ЗаказКлиента.бг_Лицензия = ЗНАЧЕНИЕ(Справочник.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РАЗНОСТЬДАТ(бг_СогласованиеЗаказовКлиентов.ЗаказКлиента.ДатаОтгрузки, &ДатаПрекращенияДействияЛицензии, ДЕНЬ) <= &КоличествоДнейДоОкончанияЛицензии
	|	КОНЕЦ КАК ЛицензияПросрочена,
	|	СУММА(ЕСТЬNULL(ЗаказКлиентаТовары.бг_ЦенаEDI * ЗаказКлиентаТовары.Количество, 0)) КАК СуммаEDI,
	|	ЕСТЬNULL(бг_СогласованиеЗаказовКлиентов.РезультатСогласованияКК, НЕОПРЕДЕЛЕНО) КАК РезультатСогласованияКК,
	|	ЕСТЬNULL(бг_СогласованиеЗаказовКлиентов.РезультатСогласованияСБ, НЕОПРЕДЕЛЕНО) КАК РезультатСогласованияСБ,
	|	ЕСТЬNULL(бг_СогласованиеЗаказовКлиентов.РезультатСогласованияФК, НЕОПРЕДЕЛЕНО) КАК РезультатСогласованияФК
	|ПОМЕСТИТЬ ЗаказыКлиентов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказыКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ЗаказыКлиентов.Ссылка = ЗаказКлиентаТовары.Ссылка
	|			И (ЗаказыКлиентов.бг_ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_СогласованиеЗаказовКлиентов КАК бг_СогласованиеЗаказовКлиентов
	|		ПО (бг_СогласованиеЗаказовКлиентов.ЗаказКлиента = ЗаказыКлиентов.Ссылка)
	|ГДЕ
	|	ЗаказыКлиентов.Ссылка = &ЗаказКлиента
	|	И ЗаказыКлиентов.Проведен
	|	И ЗаказыКлиентов.бг_ПолныйРезерв
	|	И НЕ ЗаказыКлиентов.бг_ДолгосрочныйРезерв
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентов.Ссылка,
	|	ЗаказыКлиентов.бг_ИсточникЗаказа,
	|	ЗаказыКлиентов.бг_РучноеСогласованиеФК,
	|	ЗаказыКлиентов.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА бг_СогласованиеЗаказовКлиентов.ЗаказКлиента.бг_Лицензия = ЗНАЧЕНИЕ(Справочник.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РАЗНОСТЬДАТ(бг_СогласованиеЗаказовКлиентов.ЗаказКлиента.ДатаОтгрузки, &ДатаПрекращенияДействияЛицензии, ДЕНЬ) <= &КоличествоДнейДоОкончанияЛицензии
	|	КОНЕЦ,
	|	бг_СогласованиеЗаказовКлиентов.РезультатСогласованияКК,
	|	бг_СогласованиеЗаказовКлиентов.РезультатСогласованияСБ,
	|	бг_СогласованиеЗаказовКлиентов.РезультатСогласованияФК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ТТНИсходящаяЕГАИС.Дата, ДЕНЬ)) КАК Количество
	|ПОМЕСТИТЬ СчетчикНеподтвержденныхДокументовЕГАИС
	|ИЗ
	|	НастройкиСогласования КАК НастройкиСогласования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО (НастройкиСогласования.КонтролироватьПодтверждениеВ_ЕГАИС = ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (ТТНИсходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ)
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Проведен
	|	И ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Контрагент = &Контрагент
	|	И НЕ ЕСТЬNULL(СтатусыДокументовЕГАИС.Статус, НЕОПРЕДЕЛЕНО) В (&СтатусыОбработкиТТН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КредитныеЛимиты.Договор КАК Договор,
	|	КредитныеЛимиты.ПунктНазначения КАК ПунктНазначения,
	|	КредитныеЛимиты.Сумма КАК Сумма
	|ПОМЕСТИТЬ КредитныеЛимиты
	|ИЗ
	|	РегистрСведений.бг_КредитныеЛимиты КАК КредитныеЛимиты
	|ГДЕ
	|	КредитныеЛимиты.ВидЛимита = ЗНАЧЕНИЕ(Перечисление.бг_ВидыКредитныхЛимитов.Кредитный)
	|	И КредитныеЛимиты.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтсрочкиПлатежа.Договор КАК Договор,
	|	ОтсрочкиПлатежа.ПунктНазначения КАК ПунктНазначения,
	|	ОтсрочкиПлатежа.Количество КАК Количество
	|ПОМЕСТИТЬ ОтсрочкиПлатежа
	|ИЗ
	|	РегистрСведений.бг_ОтсрочкиПлатежаПокупателям КАК ОтсрочкиПлатежа
	|ГДЕ
	|	ОтсрочкиПлатежа.ТипОтсрочки = ЗНАЧЕНИЕ(Перечисление.бг_ВидыКредитныхЛимитов.Кредитный)
	|	И ОтсрочкиПлатежа.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Ссылка КАК Ссылка,
	|	ЗаказыКлиентов.ИсточникЗаказа КАК ИсточникЗаказа,
	|	ЗаказыКлиентов.РучноеСогласованиеФК КАК РучноеСогласованиеФК,
	|	ЗаказыКлиентов.СуммаEDI КАК СуммаEDI,
	|	ЗаказыКлиентов.СуммаДокумента КАК СуммаДокумента,
	|	ЗаказыКлиентов.ЛицензияПросрочена КАК ЛицензияПросрочена,
	|	ЕСТЬNULL(КредитныеЛимитыПоКонтрагенту.Сумма, 0) КАК КредитныйЛимитПоКонтрагенту,
	|	ЕСТЬNULL(КредитныеЛимитыПоДоговору.Сумма, 0) КАК КредитныйЛимитПоДоговору,
	|	ЕСТЬNULL(КредитныеЛимитыПоПункту.Сумма, 0) КАК КредитныйЛимитПоПунктуНазначения,
	|	ЕСТЬNULL(НастройкиСогласования.АвтоСогласованиеФК, ЛОЖЬ)
	|		И НЕ ЗаказыКлиентов.РезультатСогласованияФК В (&СтатусыСогласованияСогласовано) КАК АвтоСогласованиеФК,
	|	ЕСТЬNULL(НастройкиСогласования.АвтоСогласованиеКК, ЛОЖЬ)
	|		И НЕ ЗаказыКлиентов.РезультатСогласованияКК В (&СтатусыСогласованияСогласовано) КАК АвтоСогласованиеКК,
	|	ЕСТЬNULL(НастройкиСогласования.АвтоСогласованиеСБ, ЛОЖЬ)
	|		И НЕ ЗаказыКлиентов.РезультатСогласованияСБ В (&СтатусыСогласованияСогласовано) КАК АвтоСогласованиеСБ,
	|	ЕСТЬNULL(НастройкиСогласования.КонтролироватьПодтверждениеВ_ЕГАИС, ЛОЖЬ) КАК КонтролироватьПодтверждениеВ_ЕГАИС,
	|	ЕСТЬNULL(НастройкиСогласования.ТребуетсяКредитныйЛимит, ЛОЖЬ) КАК ТребуетсяКредитныйЛимит
	|ПОМЕСТИТЬ ЗаказыКлиентовДополненные
	|ИЗ
	|	ЗаказыКлиентов КАК ЗаказыКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ КредитныеЛимиты КАК КредитныеЛимитыПоКонтрагенту
	|		ПО (КредитныеЛимитыПоКонтрагенту.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			И (КредитныеЛимитыПоКонтрагенту.ПунктНазначения = ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ КредитныеЛимиты КАК КредитныеЛимитыПоДоговору
	|		ПО (КредитныеЛимитыПоДоговору.Договор = &Договор)
	|			И (КредитныеЛимитыПоДоговору.ПунктНазначения = ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ КредитныеЛимиты КАК КредитныеЛимитыПоПункту
	|		ПО (КредитныеЛимитыПоПункту.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			И (КредитныеЛимитыПоПункту.ПунктНазначения = &ПунктНазначения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСогласования КАК НастройкиСогласования
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(СуммовыеСкидки.СуммаСкидки - СуммовыеСкидки.СуммаРезерва) КАК Сумма
	|ПОМЕСТИТЬ СуммовыеСкидки
	|ИЗ
	|	РегистрСведений.бг_СуммовыеСкидки.СрезПоследних(, Контрагент = &Контрагент) КАК СуммовыеСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.Ссылка КАК Ссылка,
	|	ЗаказыКлиентов.АвтоСогласованиеФК КАК АвтоСогласованиеФК,
	|	ЗаказыКлиентов.АвтоСогласованиеКК КАК АвтоСогласованиеКК,
	|	ЗаказыКлиентов.АвтоСогласованиеСБ КАК АвтоСогласованиеСБ,
	|	ДопустимыеОтклоненияЦенEDI.Отклонение КАК ДопустимоеОтклонениеОтЦенEDI,
	|	ЗаказыКлиентов.КонтролироватьПодтверждениеВ_ЕГАИС КАК КонтролироватьПодтверждениеВ_ЕГАИС,
	|	ЕСТЬNULL(СуммовыеСкидки.Сумма, 0) КАК ДопустимаяЗадолженность,
	|	ЕСТЬNULL(ЗадолженностьПоКонтрагенту.Долг, 0) КАК ДолгПоКонтрагенту,
	|	ЕСТЬNULL(ЗадолженностьПоДоговору.Долг, 0) КАК ДолгПоДоговору,
	|	ЕСТЬNULL(ЗадолженностьПоПунктуНазначения.Долг, 0) КАК ДолгПоПунктуНазначения,
	|	ЕСТЬNULL(ЗадолженностьПоКонтрагенту.Заказано, 0) КАК ЗаказаноПоКонтрагенту,
	|	ЕСТЬNULL(ЗадолженностьПоДоговору.Заказано, 0) КАК ЗаказаноПоДоговору,
	|	ЕСТЬNULL(ЗадолженностьПоПунктуНазначения.Заказано, 0) КАК ЗаказаноПоПунктуНазначения,
	|	ЕСТЬNULL(ЗадолженностьПоКонтрагенту.ПДЗ, 0) КАК ПДЗ_ПоКонтрагенту,
	|	ЕСТЬNULL(ЗадолженностьПоДоговору.ПДЗ, 0) КАК ПДЗ_ПоДоговору,
	|	ЕСТЬNULL(ЗадолженностьПоПунктуНазначения.ПДЗ, 0) КАК ПДЗ_ПоПунктуНазначения,
	|	ЗаказыКлиентов.КредитныйЛимитПоКонтрагенту КАК КредитныйЛимитПоКонтрагенту,
	|	ЗаказыКлиентов.КредитныйЛимитПоДоговору КАК КредитныйЛимитПоДоговору,
	|	ЗаказыКлиентов.КредитныйЛимитПоПунктуНазначения КАК КредитныйЛимитПоПунктуНазначения,
	|	ЗадолженностьПоКонтрагенту.ГлубинаПДЗ_МинусДопустимыеДни КАК ГлубинаПДЗ_ПоКонтрагенту,
	|	ЗадолженностьПоДоговору.ГлубинаПДЗ_МинусДопустимыеДни КАК ГлубинаПДЗ_ПоДоговору,
	|	ЗадолженностьПоПунктуНазначения.ГлубинаПДЗ_МинусДопустимыеДни КАК ГлубинаДолгаПоПунктуНазначения,
	|	ВЫБОР
	|		КОГДА СчетчикНеподтвержденныхДокументовЕГАИС.Количество > 1
	|			ТОГДА &ПричинаОтказаНеПодтвержденныеТТН
	|		КОГДА ЗаказыКлиентов.ЛицензияПросрочена = ИСТИНА
	|			ТОГДА &ПричинаОтказаСрокДействияЛицензии
	|		КОГДА ЗаказыКлиентов.ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI)
	|				И ВЫБОР
	|					КОГДА ЗаказыКлиентов.СуммаEDI > ЗаказыКлиентов.СуммаДокумента
	|						ТОГДА 1
	|					ИНАЧЕ -1
	|				КОНЕЦ * (ЗаказыКлиентов.СуммаEDI - ЗаказыКлиентов.СуммаДокумента) > ДопустимыеОтклоненияЦенEDI.Отклонение
	|			ТОГДА &ПричинаОтказаОтклонениеEDI
	|		ИНАЧЕ &ПричинаОтказаОтсутвует
	|	КОНЕЦ КАК ПричинаАвтоОтказаФК,
	|	ВЫБОР
	|		КОГДА ЗаказыКлиентов.РучноеСогласованиеФК
	|			ТОГДА &ПричинаОтказаРучноеСогласованиеФК
	|		КОГДА СчетчикНеподтвержденныхДокументовЕГАИС.Количество = 1
	|			ТОГДА &ПричинаОтказаНеПодтвержденнаяТТН
	|		ИНАЧЕ &ПричинаОтказаОтсутвует
	|	КОНЕЦ КАК ПричинаНеСогласованияФК,
	|	ВЫБОР
	|		КОГДА ЗаказыКлиентов.ЛицензияПросрочена = ИСТИНА
	|			ТОГДА &ПричинаОтказаСрокДействияЛицензии
	|		КОГДА ЗаказыКлиентов.ТребуетсяКредитныйЛимит
	|				И ЗаказыКлиентов.КредитныйЛимитПоКонтрагенту + ЗаказыКлиентов.КредитныйЛимитПоДоговору + ЗаказыКлиентов.КредитныйЛимитПоПунктуНазначения = 0
	|				И (ЗаказыКлиентов.АвтоСогласованиеКК
	|					ИЛИ ЗаказыКлиентов.АвтоСогласованиеСБ)
	|			ТОГДА &ПричинаОтказаНеУстановленКредитныйЛимит
	|		КОГДА ЗаказыКлиентов.КредитныйЛимитПоПунктуНазначения > 0
	|				И ЕСТЬNULL(ЗадолженностьПоПунктуНазначения.Долг + ЗадолженностьПоПунктуНазначения.Заказано, 0) - ЕСТЬNULL(СуммовыеСкидки.Сумма, 0) > ЗаказыКлиентов.КредитныйЛимитПоПунктуНазначения
	|			ТОГДА &ПричинаОтказаПревышенКрединыйЛимит
	|		КОГДА ЗаказыКлиентов.КредитныйЛимитПоДоговору > 0
	|				И ЕСТЬNULL(ЗадолженностьПоДоговору.Долг + ЗадолженностьПоДоговору.Заказано, 0) - ЕСТЬNULL(СуммовыеСкидки.Сумма, 0) > ЗаказыКлиентов.КредитныйЛимитПоДоговору
	|			ТОГДА &ПричинаОтказаПревышенКрединыйЛимит
	|		КОГДА ЗаказыКлиентов.КредитныйЛимитПоКонтрагенту > 0
	|				И ЕСТЬNULL(ЗадолженностьПоКонтрагенту.Долг + ЗадолженностьПоКонтрагенту.Заказано, 0) - ЕСТЬNULL(СуммовыеСкидки.Сумма, 0) > ЗаказыКлиентов.КредитныйЛимитПоКонтрагенту
	|			ТОГДА &ПричинаОтказаПревышенКрединыйЛимит
	|		КОГДА ЗадолженностьПоКонтрагенту.ГлубинаПДЗ_МинусДопустимыеДни > 0
	|			ТОГДА &ПричинаОтказаПросроченнаяЗадолженность
	|		КОГДА ЕСТЬNULL(ОтсрочкаПлатежа.КоличествоДнейОтсрочки, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА &ПричинаОтказаНеУстановленаОтрочкаПлатежа
	|		ИНАЧЕ &ПричинаОтказаОтсутвует
	|	КОНЕЦ КАК ПричинаАвтоОтказаКК,
	|	ВЫБОР
	|		КОГДА ЗаказыКлиентов.ЛицензияПросрочена = ИСТИНА
	|			ТОГДА &ПричинаОтказаСрокДействияЛицензии
	|		КОГДА ЕСТЬNULL(ОтсрочкаПлатежа.КоличествоДнейОтсрочки, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА &ПричинаОтказаНеУстановленаОтрочкаПлатежа
	|		ИНАЧЕ &ПричинаОтказаОтсутвует
	|	КОНЕЦ КАК ПричинаАвтоОтказаСБ
	|ИЗ
	|	ЗаказыКлиентовДополненные КАК ЗаказыКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьПоКонтрагенту КАК ЗадолженностьПоКонтрагенту
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьПоДоговору КАК ЗадолженностьПоДоговору
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьПоПунктуНазначения КАК ЗадолженностьПоПунктуНазначения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СуммовыеСкидки КАК СуммовыеСкидки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетчикНеподтвержденныхДокументовЕГАИС КАК СчетчикНеподтвержденныхДокументовЕГАИС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтсрочкаПлатежа КАК ОтсрочкаПлатежа
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ДопустимыеОтклоненияЦенEDI КАК ДопустимыеОтклоненияЦенEDI
	|		ПО (ДопустимыеОтклоненияЦенEDI.Организация = &Организация)
	|			И (ДопустимыеОтклоненияЦенEDI.Контрагент = &Контрагент)
	|			И (ЗаказыКлиентов.ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI))";

КонецФункции

#КонецОбласти 
