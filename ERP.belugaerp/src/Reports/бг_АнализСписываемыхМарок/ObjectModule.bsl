#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	
КонецПроцедуры

Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Если Форма.Параметры.Свойство("АктСписанияЕГАИС") Тогда
		
		НовыеНастройкиКД.ПараметрыДанных.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("АктСписанияЕГАИС"),
			Форма.Параметры.АктСписанияЕГАИС);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОсновнаяСхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОсновнаяСхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПараметрАктСписанияЕГАИС = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("АктСписанияЕГАИС"));
		
	АктСписанияЕГАИС = ПараметрАктСписанияЕГАИС.Значение;
	
	ВнешниеНаборыДанных = Новый Структура("СписываемыеМарки", СписываемыеМарки(АктСписанияЕГАИС));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СписываемыеМарки(АктСписанияЕГАИС)
	
	// Проверяем входные данные.
	Если Не (ТипЗнч(АктСписанияЕГАИС) = Тип("ДокументСсылка.АктСписанияЕГАИС")
		И ЗначениеЗаполнено(АктСписанияЕГАИС)) Тогда
		
		ВызватьИсключение НСтр("ru='Отчет формируется только по заполненному документу ""Акт списания ЕГАИС"".'");
	КонецЕсли;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктСписанияЕГАИС, "ДокументОснование");
	Если Не (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		И ЗначениеЗаполнено(ДокументОснование)) Тогда
		
		ВызватьИсключение НСтр("ru='Отчет формируется только для акта по основанию ""Внутреннее потребление товаров"".'");
	КонецЕсли;
	
	СписываемыеМарки = НовыйСписываемыеМарки();
	
	// Получаем отгружаемые по акту марки и упаковки (аналогичным образом, как они отправляются в ЕГАИС).
	ДанныеСписываемыхШтрихкодов = Документы.АктСписанияЕГАИС.бг_ДанныеСписываемыхШтрихкодов(
		АктСписанияЕГАИС,
		Ложь);
		
	Если ДанныеСписываемыхШтрихкодов = Неопределено Тогда
			
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не найдены данные списываемых штрихкодов'"));
			
		Возврат СписываемыеМарки;
	КонецЕсли;
	
	// Проверяем соответствие списываемых марок и алкогольной продукции в акте.
	МаркиСоответствуютАлкогольнойПродукцииАкта = Документы.АктСписанияЕГАИС.бг_МаркиСоответствуютАлкогольнойПродукцииАкта(
		ДанныеСписываемыхШтрихкодов.Марки,
		АктСписанияЕГАИС);
		
	Если Не МаркиСоответствуютАлкогольнойПродукцииАкта Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Списываемые штрихкоды не соответствуют алкогольной продукции'"));
			
	КонецЕсли;
	
	// Преобразовываем полученные данные в необходимую для отчета структуру.
	// Для упрощения реализации формируем отчет конкретно под трехуровневую структуру паллетирования.
	ДанныеСписываемыхШтрихкодов.Упаковки.Индексы.Добавить("КодУпаковки");
	
	Для каждого СтрокаМарки Из ДанныеСписываемыхШтрихкодов.Марки Цикл
		
		НоваяСтрокаСписываемыеМарки = СписываемыеМарки.Добавить();
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаСписываемыеМарки,
			СтрокаМарки,
			"НомерСтрокиАкта, Номенклатура, Серия, АлкогольнаяПродукция, Справка2");
			
		НоваяСтрокаСписываемыеМарки.КодМарки = СтрокаМарки.ИдентификаторМарки;
		НоваяСтрокаСписываемыеМарки.КодКоробки = СтрокаМарки.КодУпаковки;
		НоваяСтрокаСписываемыеМарки.Количество = 1;
		
		ПараметрыПоискаПаллеты = Новый Структура("КодУпаковки", СтрокаМарки.КодУпаковки);
		НайденныеСтрокиПаллета = ДанныеСписываемыхШтрихкодов.Упаковки.НайтиСтроки(ПараметрыПоискаПаллеты);
		Если НайденныеСтрокиПаллета.Количество() = 1 Тогда
			НоваяСтрокаСписываемыеМарки.КодПаллеты = НайденныеСтрокиПаллета[0].КодВышестоящейУпаковки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписываемыеМарки;

КонецФункции

Функция НовыйСписываемыеМарки()
	
	СписываемыеМарки = Новый ТаблицаЗначений;
	
	СписываемыеМарки.Колонки.Добавить(
		"НомерСтрокиАкта",
		ОбщегоНазначения.ОписаниеТипаЧисло(5));
		
	СписываемыеМарки.Колонки.Добавить(
		"АлкогольнаяПродукция",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
		
	СписываемыеМарки.Колонки.Добавить(
		"Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	СписываемыеМарки.Колонки.Добавить(
		"Серия",
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
	СписываемыеМарки.Колонки.Добавить(
		"Справка2",
		Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		
	СписываемыеМарки.Колонки.Добавить(
		"КодПаллеты",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	СписываемыеМарки.Колонки.Добавить(
		"КодКоробки",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	СписываемыеМарки.Колонки.Добавить(
		"КодМарки",
		Метаданные.РегистрыСведений.бг_ИдентификаторыМарок.Ресурсы.ИдентификаторМарки.Тип);
		
	СписываемыеМарки.Колонки.Добавить(
		"Количество",
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	Возврат СписываемыеМарки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
