#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	
КонецПроцедуры

Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	Если Форма.Параметры.Свойство("АктПостановкиНаБалансЕГАИС") Тогда
		
		НовыеНастройкиКД.ПараметрыДанных.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("АктПостановкиНаБалансЕГАИС"),
			Форма.Параметры.АктПостановкиНаБалансЕГАИС);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОсновнаяСхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОсновнаяСхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПараметрАктПостановкиНаБалансЕГАИС = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("АктПостановкиНаБалансЕГАИС"));
		
	АктПостановкиНаБалансЕГАИС = ПараметрАктПостановкиНаБалансЕГАИС.Значение;
	
	ВнешниеНаборыДанных = Новый Структура("ПриходуемыеМарки", ПриходуемыеМарки(АктПостановкиНаБалансЕГАИС));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПриходуемыеМарки(АктПостановкиНаБалансЕГАИС)
	
	// Проверяем входные данные.
	Если Не (ТипЗнч(АктПостановкиНаБалансЕГАИС) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
		И ЗначениеЗаполнено(АктПостановкиНаБалансЕГАИС)) Тогда
		
		ВызватьИсключение НСтр("ru='Отчет формируется только по заполненному документу ""Акт постановки на баланс ЕГАИС"".'");
	КонецЕсли;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктПостановкиНаБалансЕГАИС, "ДокументОснование");
	Если Не (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
		И ЗначениеЗаполнено(ДокументОснование)) Тогда
		
		ВызватьИсключение НСтр("ru='Отчет формируется только для акта по основанию ""Прочее оприходование товаров"".'");
	КонецЕсли;
	
	ПриходуемыеМарки = НовыйПриходуемыеМарки();
	
	// Получаем отгружаемые по акту марки и упаковки (аналогичным образом, как они отправляются в ЕГАИС).
	ДанныеПриходуемыхШтрихкодов = Документы.АктПостановкиНаБалансЕГАИС.бг_ДанныеПриходуемыхШтрихкодов(
		АктПостановкиНаБалансЕГАИС,
		Ложь);
		
	Если ДанныеПриходуемыхШтрихкодов = Неопределено Тогда
			
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не найдены данные приходуемых штрихкодов'"));
			
		Возврат ПриходуемыеМарки;
	КонецЕсли;
	
	// Проверяем соответствие приходуемых марок и алкогольной продукции в акте.
	МаркиСоответствуютАлкогольнойПродукцииАкта = Документы.АктПостановкиНаБалансЕГАИС.бг_МаркиСоответствуютАлкогольнойПродукцииАкта(
		ДанныеПриходуемыхШтрихкодов.Марки,
		АктПостановкиНаБалансЕГАИС);
		
	Если Не МаркиСоответствуютАлкогольнойПродукцииАкта Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Приходуемые штрихкоды не соответствуют алкогольной продукции'"));
			
	КонецЕсли;
	
	// Преобразовываем полученные данные в необходимую для отчета структуру.
	// Для упрощения реализации формируем отчет конкретно под трехуровневую структуру паллетирования.
	ДанныеПриходуемыхШтрихкодов.Упаковки.Индексы.Добавить("КодУпаковки");
	
	Для каждого СтрокаМарки Из ДанныеПриходуемыхШтрихкодов.Марки Цикл
		
		НоваяСтрокаПриходуемыеМарки = ПриходуемыеМарки.Добавить();
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаПриходуемыеМарки,
			СтрокаМарки,
			"НомерСтрокиАкта, Номенклатура, Серия, АлкогольнаяПродукция, Справка2");
			
		НоваяСтрокаПриходуемыеМарки.КодМарки = СтрокаМарки.ИдентификаторМарки;
		НоваяСтрокаПриходуемыеМарки.КодКоробки = СтрокаМарки.КодУпаковки;
		НоваяСтрокаПриходуемыеМарки.Количество = 1;
		
		ПараметрыПоискаПаллеты = Новый Структура("КодУпаковки", СтрокаМарки.КодУпаковки);
		НайденныеСтрокиПаллета = ДанныеПриходуемыхШтрихкодов.Упаковки.НайтиСтроки(ПараметрыПоискаПаллеты);
		Если НайденныеСтрокиПаллета.Количество() = 1 Тогда
			НоваяСтрокаПриходуемыеМарки.КодПаллеты = НайденныеСтрокиПаллета[0].КодВышестоящейУпаковки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПриходуемыеМарки;

КонецФункции

Функция НовыйПриходуемыеМарки()
	
	ПриходуемыеМарки = Новый ТаблицаЗначений;
	
	ПриходуемыеМарки.Колонки.Добавить(
		"НомерСтрокиАкта",
		ОбщегоНазначения.ОписаниеТипаЧисло(5));
		
	ПриходуемыеМарки.Колонки.Добавить(
		"АлкогольнаяПродукция",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
		
	ПриходуемыеМарки.Колонки.Добавить(
		"Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	ПриходуемыеМарки.Колонки.Добавить(
		"Серия",
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
	ПриходуемыеМарки.Колонки.Добавить(
		"Справка2",
		Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		
	ПриходуемыеМарки.Колонки.Добавить(
		"КодПаллеты",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	ПриходуемыеМарки.Колонки.Добавить(
		"КодКоробки",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	ПриходуемыеМарки.Колонки.Добавить(
		"КодМарки",
		Метаданные.РегистрыСведений.бг_ИдентификаторыМарок.Ресурсы.ИдентификаторМарки.Тип);
		
	ПриходуемыеМарки.Колонки.Добавить(
		"Количество",
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	Возврат ПриходуемыеМарки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
