#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	
КонецПроцедуры

Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт

	Если Форма.Параметры.Свойство("Документ") Тогда

		НовыеНастройкиКД.ПараметрыДанных.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("Документ"),
			Форма.Параметры.Документ);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти
	
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОсновнаяСхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОсновнаяСхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПараметрДокумент = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("Документ"));
		
	Документ = ПараметрДокумент.Значение;
	
	ПоказыватьРасхождения = ПоказыватьРасхождения(Документ);
	
	// Штрихкоды определяем по ТТН входящей ЕГАИС.
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		ТТНВходящаяЕГАИС = Неопределено;
		ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Документ);
		Если ДанныеТТНВходящей <> Неопределено Тогда
			ТТНВходящаяЕГАИС = ДанныеТТНВходящей.Документ;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
			ВызватьИсключение НСтр("ru='Не найдена ТТН входящая ЕГАИС'");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ТТНВходящаяЕГАИС = Документ;
		
	Иначе
		// NOP
	КонецЕсли;
	
	Если ПоказыватьРасхождения Тогда
		ПринимаемыеМарки = ПринимаемыеМаркиПланФакт(ТТНВходящаяЕГАИС);
	Иначе
		ПринимаемыеМарки = ПринимаемыеМаркиПлан(ТТНВходящаяЕГАИС);
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура("ПринимаемыеМарки", ПринимаемыеМарки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоказыватьРасхождения(Документ)
	
	ПоказыватьРасхождения = Ложь;
	
	АнализируемыеТипыДокументов = Новый Массив;
	АнализируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ТТНВходящаяЕГАИС"));
	АнализируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру"));
	
	Если Не (АнализируемыеТипыДокументов.Найти(ТипЗнч(Документ)) <> Неопределено И ЗначениеЗаполнено(Документ)) Тогда
		ВызватьИсключение НСтр("ru='Отчет формируется только по заполненному документу ""ТТН входящая ЕГАИС""
		| или ""Отражение факта по приходному ордеру"".'");
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		РезультатПриемки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "РезультатПриемки");
		
		ПоказыватьРасхождения = РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана;
		
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ЕстьРасхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ЕстьРасхождения");
		
		ПоказыватьРасхождения = ЕстьРасхождения;
		
	Иначе
		// NOP
	КонецЕсли;
	
	Возврат ПоказыватьРасхождения;
	
КонецФункции

Функция ПринимаемыеМаркиПлан(ТТНВходящаяЕГАИС)
		
	ПринимаемыеМарки = Документы.ТТНВходящаяЕГАИС.бг_НоваяТаблицаПринимаемыеМаркиПланФакт();
	
	// Получаем данные о штрихкодах.
	ДанныеШтрихкодов = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовПлан(ТТНВходящаяЕГАИС);
	
	Если ДанныеШтрихкодов = Неопределено Тогда
			
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не найдены плановые принимаемые штрихкоды'"));
			
		Возврат ПринимаемыеМарки;
	КонецЕсли;
	
	// Преобразовываем полученные данные в необходимую для отчета структуру.
	// Для упрощения реализации формируем отчет конкретно под трехуровневую структуру паллетирования.
	ДанныеШтрихкодов.Упаковки.Индексы.Добавить("КодУпаковки");
	
	Для каждого СтрокаМарки Из ДанныеШтрихкодов.Марки Цикл
			
		НоваяСтрокаПринимаемыеМарки = ПринимаемыеМарки.Добавить();
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаПринимаемыеМарки,
			СтрокаМарки,
			"НомерСтрокиТТН, Номенклатура, Серия, АлкогольнаяПродукция, Справка2");
			
		НоваяСтрокаПринимаемыеМарки.КодМарки = СтрокаМарки.ИдентификаторМарки;
		НоваяСтрокаПринимаемыеМарки.КодКоробки = СтрокаМарки.КодУпаковки;
		НоваяСтрокаПринимаемыеМарки.КоличествоПлан = 1;
			
		ПараметрыПоискаПаллеты = Новый Структура("КодУпаковки", СтрокаМарки.КодУпаковки);
		НайденныеСтрокиПаллета = ДанныеШтрихкодов.Упаковки.НайтиСтроки(ПараметрыПоискаПаллеты);
		Если НайденныеСтрокиПаллета.Количество() = 1 Тогда
			НоваяСтрокаПринимаемыеМарки.КодПаллеты = НайденныеСтрокиПаллета[0].КодВышестоящейУпаковки;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПринимаемыеМарки;	

КонецФункции

Функция ПринимаемыеМаркиПланФакт(ТТНВходящаяЕГАИС)
	
	Возврат Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовПланФакт(ТТНВходящаяЕГАИС);	

КонецФункции

#КонецОбласти

#КонецЕсли
