
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастроитьЭлементыФормы();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаУправление Тогда
		ОбновитьТаблицуУправление();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерПриИзменении(Элемент)
	
	ОбновитьТаблицуУправление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	
	ОбновитьТаблицуУправление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТоварнаяКатегорияПриИзменении(Элемент)
	
	ОбновитьТаблицуУправление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОтгрузкиПриИзменении(Элемент)
	
	ОбновитьТаблицуУправление(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьТаблицуУправление();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ОбновитьТаблицуУправление();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Склад",
		Склад,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Склад),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТоварыНоменклатураПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ВыбратьПодчиненные(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	НоваяСтрока = Товары.ПолучитьЭлементы().Добавить();
	
	Если Копирование Тогда
		ИсходнаяСтрока = Элементы.Товары.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.ДетальнаяЗапись = Ложь;
	КонецЕсли;
	
	Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Элементы.Товары.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПрогнозВБутылкахПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ДетальнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Выбран = ТекущиеДанные.ПрогнозВБутылках > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПрогнозВЛитрахПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ДетальнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Выбран = ТекущиеДанные.ПрогнозВБутылках > 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПартнеры

&НаКлиенте
Процедура ПартнерРезерваПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партнеры.ТекущиеДанные;
	ПартнерыПартнерПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезервы

&НаКлиенте
Процедура РезервыПрогнозПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Резервы.ТекущиеДанные;
	
	РезервыПрогнозПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьРанееСозданныеРезервыПриИзменении(Элемент)
	
	РезервыПрогнозПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУправление

&НаКлиенте
Процедура УправлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Управление.ТекущиеДанные;
	
	Если Поле.Имя = Элементы.УправлениеПартнер.Имя Тогда
		ПоказатьЗначение(, ТекущиеДанные.Партнер);
	ИначеЕсли Поле.Имя = Элементы.УправлениеНоменклатура.Имя Тогда
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	ИначеЕсли Поле.Имя = Элементы.УправлениеУпаковкаПаллета.Имя Тогда
		ПоказатьЗначение(, ТекущиеДанные.УпаковкаПаллета);
	ИначеЕсли Поле.Имя = Элементы.УправлениеДокументРезерва.Имя Тогда
		ПоказатьЗначение(, ТекущиеДанные.ЗаказКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Управление.ТекущиеДанные;
	
	Если ТекущиеДанные.Выбран Тогда
		ТекущиеДанные.РазмещеноВЗаказахИзменение = ТекущиеДанные.РазмещеноВЗаказах;
		ТекущиеДанные.ДолгосрочныйРезервИзменение = ТекущиеДанные.ДолгосрочныйРезерв;
	Иначе
		ТекущиеДанные.РазмещеноВЗаказахИзменение = 0;
		ТекущиеДанные.ДолгосрочныйРезервИзменение = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДолгосрочныйРезервИзменениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Управление.ТекущиеДанные;
	
	Если ТекущиеДанные.ДолгосрочныйРезервИзменение > 0 Или
		ТекущиеДанные.РазмещеноВЗаказахИзменение > 0 Тогда
		
		ТекущиеДанные.Выбран = Истина;
		
	Иначе
		
		ТекущиеДанные.Выбран = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеРазмещеноВЗаказахИзменениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Управление.ТекущиеДанные;
	
	Если ТекущиеДанные.ДолгосрочныйРезервИзменение > 0 Или
		ТекущиеДанные.РазмещеноВЗаказахИзменение > 0 Тогда
		
		ТекущиеДанные.Выбран = Истина;
		
	Иначе
		
		ТекущиеДанные.Выбран = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТоварыВыбратьВсе(Команда)
	
	ТоварыВыбратьВсеНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтменитьВыделение(Команда)
	
	ТоварыВыбратьВсеНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРезевы(Команда)
	
	ЗаполнитьРезевыНаСервере();
	
	Строки = Резервы.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Элементы.Резервы.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПрогноз(Команда)
	
	РаспределитьПрогнозНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьРезервы(Команда)
	
	СоздатьРезервыНаСервере();
	
	Строки = Резервы.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Элементы.Резервы.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтогиПоНоменклатуре(Команда)
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не заполнен Период';
								|en = 'Не заполнен Период'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не заполнена Организация';
								|en = 'Не заполнена Организация'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не заполнен Склад';
								|en = 'Не заполнен Склад'"));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСводныеДанныеНоменклатуры();
	
	Строки = Товары.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Элементы.Товары.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВыбратьВсе(Команда)
	
	УправлениеВыбратьВсеНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеОтменитьВыделение(Команда)
	
	УправлениеВыбратьВсеНаСервере(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеОбновить(Команда)
	
	ОбновитьТаблицуУправление();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВысвободить(Команда)
	
	УправлениеИзменитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеИзменитьПартнераДатуОтгрузки(Команда)
	
	ТекущиеДанные = Элементы.Управление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено И Управление.Количество() > 0 Тогда
		ТекущиеДанные = Управление[0];
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрано ни одной строки для изменения';
								|en = 'No rows selected to change'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Партнер, ДатаОтгрузки");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПартнерДатаОтгрузкиОкончаниеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.бг_ФормированиеДолгосрочныхРезервов.Форма.ФормаВыбораПартнера", ПараметрыФормы, ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерДатаОтгрузкиОкончаниеВыбора(ДанныеДляИзменения, ДополнительныеПараметры) Экспорт
	
	Если ДанныеДляИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеИзменитьНаСервере(ДанныеДляИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	АдресФайла = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлЗавершение", ЭтотОбъект);
	
	НачатьПомещениеФайла(ОписаниеОповещения,АдресФайла,"",,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат И ЗначениеЗаполнено(Адрес) Тогда
		
		ПрочитатьФайлНаСервере(Адрес);
		
		Строки = Товары.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			Элементы.Товары.Развернуть(Строка.ПолучитьИдентификатор());
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КФормированию(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаФормирование;
	
	ЗаполнитьРезевыНаСервере();
	
	Строки = Резервы.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл
		Элементы.Резервы.Развернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартнеровПоКаналамПродаж(Команда)
	ЗаполнитьПартнеровПоКаналамПродажНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РезервыПрогноз.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Резервы.ЭтоИтог");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварнаяКатегория.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ДетальнаяЗапись");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина,,,));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ОтборПоВидуНоменклатуры = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидНоменклатурыАлкогольнаяПродукция");
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ВидНоменклатуры", ОтборПоВидуНоменклатуры);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Товары.НайтиПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ТекущиеДанные.ТоварнаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ТоварнаяКатегория");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьПодчиненные(Идентификатор)
	
	ТекущиеДанные = Товары.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные.ДетальнаяЗапись Тогда
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Строки = Родитель.ПолучитьЭлементы();
		
		ЕстьОтмеченныеСтроки = Ложь;
		
		Для Каждого Строка Из Строки Цикл
			
			Если Строка.Выбран Тогда
				ЕстьОтмеченныеСтроки = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Родитель.Выбран = ЕстьОтмеченныеСтроки;
		
	Иначе
		
		Строки = ТекущиеДанные.ПолучитьЭлементы();
		
		Для Каждого Строка Из Строки Цикл
			Строка.Выбран = ТекущиеДанные.Выбран;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	ЗаполнитьСводныеДанныеНоменклатуры();
	
	ОбновитьТаблицуУправление();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		Организация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Организация),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Склад",
		Склад,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Склад),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
КонецПроцедуры

#Область ЗагрузкаИзФайла

&НаСервере
Процедура ПрочитатьФайлНаСервере(Адрес)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(Адрес);
	АдресНаСервере = ПолучитьИмяВременногоФайла("xlsx");
	ДвоичныеДанные.Записать(АдресНаСервере);
	
	Данные = Новый ТабличныйДокумент;
	Данные.Прочитать(АдресНаСервере, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПрочитатьФайлВТаблицу("Данные", МенеджерВременныхТаблиц, "Данные");
	
	ЗаполнитьСводныеДанныеНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФайлВТаблицу(ИмяДокумента, МенеджерВременныхТаблиц, ИмяТаблицы)
	
	ПараметрыТабличногоДокумента = ПараметрыТабличногоДокумента(ИмяДокумента);
	
	Если ПараметрыТабличногоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПЗ = Новый ПостроительЗапроса;
	ПЗ.ИсточникДанных = Новый ОписаниеИсточникаДанных(ПараметрыТабличногоДокумента.Область);
	ПЗ.ДобавлениеПредставлений = ТипДобавленияПредставлений.Добавлять;
	ПЗ.ЗаполнитьНастройки();
	ПЗ.Выполнить();
	
	ТаблицаЗначений = ПЗ.Результат.Выгрузить();
	
	Товары.ПолучитьЭлементы().Очистить();
	
	КолонкаТоварнаяКатегория = "";
	КолонкаНоменклатура = "";
	КолонкаПартнер = "";
	
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		
		Если СтрНайти(Колонка.Имя, "Категория") > 0 Тогда
			КолонкаТоварнаяКатегория = Колонка.Имя;
		КонецЕсли;
		
		Если СтрНайти(Колонка.Имя, "Номенклатура") > 0 Тогда
			КолонкаНоменклатура = Колонка.Имя;
		КонецЕсли;
		
		Если СтрНайти(Колонка.Имя, "Партнер") > 0 Тогда
			КолонкаПартнер = Колонка.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(КолонкаТоварнаяКатегория) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не найдена колонка с товарной категорией (EK SKU). Название колонки должно содержать слово ""категория""';
								|en = 'Column with product category (EK SKU) not found. The column name must contain the word ""category""'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаНоменклатура) Тогда
		ОбщегоНазначения.СообщитьПользователю(
		
		НСтр("ru = 'Не найдена колонка с номенклатурой. Название колонки должно содержать слово ""номенклатура""';
								|en = 'Item column not found. The column name must contain the word ""Item""'"));
			
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицу(ТаблицаЗначений, КолонкаТоварнаяКатегория, КолонкаНоменклатура, КолонкаПартнер);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицу(ТаблицаЗначений, КолонкаТоварнаяКатегория, КолонкаНоменклатура, КолонкаПартнер)
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		
		НоваяСтрока = Товары.ПолучитьЭлементы().Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ТоварнаяКатегорияСтрока = Строка[КолонкаТоварнаяКатегория];
		НоваяСтрока.НоменклатураСтрока = Строка[КолонкаНоменклатура];
		НоваяСтрока.ПартнерСтрока = Строка[КолонкаПартнер];
		
		ЗаполнитьДанныеСтроки(НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтроки(НоваяСтрока)
	
	Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураСтрока) Тогда
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(НоваяСтрока.НоменклатураСтрока);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ТоварнаяКатегорияСтрока) Тогда
		НоваяСтрока.ТоварнаяКатегория = Справочники.ТоварныеКатегории.НайтиПоНаименованию(НоваяСтрока.ТоварнаяКатегорияСтрока);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ПартнерСтрока) Тогда
		НоваяСтрока.Партнер = НайтиПартнера(НоваяСтрока.ПартнерСтрока);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) И Не ЗначениеЗаполнено(НоваяСтрока.ТоварнаяКатегория) Тогда
		НоваяСтрока.ТоварнаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ТоварнаяКатегория");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоваяСтрока.ПрогнозВБутылках)
		И ЗначениеЗаполнено(НоваяСтрока.ПрогнозВДкЛитрах)
		И ЗначениеЗаполнено(НоваяСтрока.ТоварнаяКатегория) Тогда
		
		ОбъемЕдиницыВЛитрах = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ТоварнаяКатегория, "бг_Объем");
		
		Если ЗначениеЗаполнено(ОбъемЕдиницыВЛитрах)
			И ЗначениеЗаполнено(ОбъемЕдиницыВЛитрах.Емкость) Тогда
			НоваяСтрока.ПрогнозВБутылках = Окр(НоваяСтрока.ПрогнозВДкЛитрах * 10 / ОбъемЕдиницыВЛитрах.Емкость, 0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПартнера(ПартнерСтрока)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Наименование ПОДОБНО &ПартнерСтрока
	|	И НЕ Партнеры.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнеры.Клиент УБЫВ";
	
	Запрос.УстановитьПараметр("ПартнерСтрока", ПартнерСтрока);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПараметрыТабличногоДокумента(ИмяДокумента)
	
	ПараметрыТабличногоДокумента = Новый Структура;
	
	Если ИмяДокумента = "Данные" Тогда
		
		ПараметрыТабличногоДокумента.Вставить("Область", ЭтотОбъект[ИмяДокумента].Область());
		ПараметрыТабличногоДокумента.Вставить("УдалитьСтрок", 0);
		
	КонецЕсли;
	
	Возврат ПараметрыТабличногоДокумента;
	
КонецФункции

#КонецОбласти

#Область ФормированиеРезервов

&НаСервере
Процедура ТоварыВыбратьВсеНаСервере(Признак)
	
	Строки = Товары.ПолучитьЭлементы();
	
	Для Каждого Строка Из Строки Цикл
		
		Строка.Выбран = Признак;
		
		Подстроки = Строка.ПолучитьЭлементы();
		
		Для Каждого Подстрока Из Подстроки Цикл
			Подстрока.Выбран = Признак;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСводныеДанныеНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Вт.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	Вт.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Вт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ТоварнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Реквизиты.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	Реквизиты.Ссылка КАК Номенклатура
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	ВтТовары КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Реквизиты
	|		ПО ДД.Номенклатура = Реквизиты.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Реквизиты.ТоварнаяКатегория,
	|	Реквизиты.Ссылка
	|ИЗ
	|	ВтТовары КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Реквизиты
	|		ПО ДД.ТоварнаяКатегория = Реквизиты.ТоварнаяКатегория
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.Характеристика.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДД.Свободно КАК ОстатокПоЗаказам,
	|	0 КАК СвободныйОстаток
	|ПОМЕСТИТЬ Вт
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ДД.Номенклатура = Товары.Номенклатура
	|ГДЕ
	|	ДД.Склад = &Склад
	|	И ДД.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
	|	И ДД.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ДД.ЗаказНаПоступление ССЫЛКА Документ.ЗаказПоставщику
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.Номенклатура.ТоварнаяКатегория,
	|	ДД.Номенклатура,
	|	ДД.УпаковкаПаллета,
	|	-(ДД.УПоставщикаОборот - ДД.ОтмененоОборот - ДД.ПоступилоОборот - ДД.ВыбылоОборот),
	|	0
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура
	|					ИЗ
	|						Товары КАК Товары)
	|				И ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ДД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.ТоварнаяКатегория,
	|	ДД.Номенклатура,
	|	ДД.Характеристика.бг_УпаковкаПаллета,
	|	0,
	|	ДД.Свободно
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|		ПО ДД.Номенклатура = Товары.Номенклатура
	|ГДЕ
	|	ДД.Склад = &Склад
	|	И ДД.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И ДД.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	Вт.Номенклатура КАК Номенклатура,
	|	Вт.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СУММА(Вт.ОстатокПоЗаказам) КАК ОстатокПоЗаказам,
	|	СУММА(Вт.СвободныйОстаток) КАК СвободныйОстаток,
	|	0 КАК Прогноз,
	|	ЛОЖЬ КАК Выбран
	|ИЗ
	|	Вт КАК Вт
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт.ТоварнаяКатегория,
	|	Вт.Номенклатура,
	|	Вт.УпаковкаПаллета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварнаяКатегория,
	|	СвободныйОстаток,
	|	ОстатокПоЗаказам";
	
	ЗначениеРеквизитаФормы = РеквизитФормыВЗначение("Товары");
	Запрос.УстановитьПараметр("Товары", ОбщегоНазначенияУТ.ДанныеДерева(ЗначениеРеквизитаФормы, 0));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Строки = Товары.ПолучитьЭлементы();
	
	Для Каждого Строка Из Строки Цикл
		
		ДетальныеСтроки = Строка.ПолучитьЭлементы();
		ДетальныеСтроки.Очистить();
		
		Если Не ЗначениеЗаполнено(Строка.ТоварнаяКатегория)
			И Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Отбор = Новый Структура("ТоварнаяКатегория", Строка.ТоварнаяКатегория);
		
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Отбор.Вставить("Номенклатура", Строка.Номенклатура);
		КонецЕсли;
		
		Строка.СвободныйОстаток = 0;
		Строка.ОстатокПоЗаказам  = 0;
		
		Распределить = Строка.ПрогнозВБутылках + Строка.Дефицит;
		
		ТекОстатки = ТаблицаОстатков.Скопировать(Отбор);
		ТекОстатки.Сортировать("СвободныйОстаток Убыв, ОстатокПоЗаказам Убыв");
		
		Для Каждого СтрокаОстатка Из ТекОстатки Цикл
			
			Если Распределить = 0 Или СтрокаОстатка.СвободныйОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущееКоличество = Мин(Распределить, СтрокаОстатка.СвободныйОстаток);
			
			Распределить = Распределить - ТекущееКоличество;
			СтрокаОстатка.Прогноз = ТекущееКоличество;
			СтрокаОстатка.Выбран = Истина;
			
		КонецЦикла;
		
		Если Распределить > 0 Тогда
			
			Для Каждого СтрокаОстатка Из ТекОстатки Цикл
				
				Если Распределить = 0 Или СтрокаОстатка.ОстатокПоЗаказам = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТекущееКоличество = Мин(Распределить, СтрокаОстатка.ОстатокПоЗаказам);
				
				Распределить = Распределить - ТекущееКоличество;
				СтрокаОстатка.Прогноз = СтрокаОстатка.Прогноз + ТекущееКоличество;
				СтрокаОстатка.Выбран = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекОстатки.Свернуть("ТоварнаяКатегория, Номенклатура, УпаковкаПаллета, Выбран","ОстатокПоЗаказам, СвободныйОстаток, Прогноз");
		ТекОстатки.Сортировать("Выбран Убыв, СвободныйОстаток Убыв, ОстатокПоЗаказам Убыв");
		
		Строка.ПрогнозВБутылках = 0;
		Строка.Выбран = Ложь;
		
		Для Каждого СтрокаОстатка Из ТекОстатки Цикл
			
			НоваяСтрока = ДетальныеСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
			НоваяСтрока.Партнер = Строка.Партнер;
			НоваяСтрока.ДетальнаяЗапись = Истина;
			
			Строка.СвободныйОстаток = Строка.СвободныйОстаток + СтрокаОстатка.СвободныйОстаток;
			Строка.ОстатокПоЗаказам = Строка.ОстатокПоЗаказам + СтрокаОстатка.ОстатокПоЗаказам;;
			
			Если СтрокаОстатка.Выбран Тогда
				НоваяСтрока.ПрогнозВБутылках = СтрокаОстатка.Прогноз;
				Строка.Выбран = Истина;
			КонецЕсли;
			
			Строка.ПрогнозВБутылках = Строка.ПрогнозВБутылках + НоваяСтрока.ПрогнозВБутылках;
			
		КонецЦикла;
		
		Строка.Дефицит = Распределить;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезевыНаСервере()
	
	ЗаполнитьПартнеров();
	ЗаполнитьДетальныеДанныеПоРезервам();
	РаспределитьПрогнозНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнеров()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТовары.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВтПартнеры
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|ГДЕ
	|	ВтТовары.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПартнеры.Партнер КАК Партнер,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаказКлиента.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))) КАК Заказ
	|ПОМЕСТИТЬ ВтРезервы
	|ИЗ
	|	ВтПартнеры КАК ВтПартнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО (ЗаказКлиента.Партнер = ВтПартнеры.Партнер)
	|			И (ЗаказКлиента.бг_ДолгосрочныйРезерв)
	|			И (ЗаказКлиента.Проведен)
	|			И (ЗаказКлиента.бг_КаналПродаж <> ЗНАЧЕНИЕ(Справочник.БитКаналыПродаж.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПартнеры.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРезервы.Партнер КАК ПартнерРезерва,
	|	ВтРезервы.Заказ.бг_КаналПродаж КАК КаналПродаж
	|ИЗ
	|	ВтРезервы КАК ВтРезервы
	|
	|УПОРЯДОЧИТЬ ПО
	|	КаналПродаж,
	|	ВтРезервы.Партнер";
	
	ЗначениеРеквизитаФормы = РеквизитФормыВЗначение("Товары");
	ДеревоТовары = ОбщегоНазначенияУТ.ДанныеДерева(ЗначениеРеквизитаФормы, 1);
	
	Запрос.УстановитьПараметр("Товары", ДеревоТовары.Скопировать(Новый Структура("Выбран", Истина)));
	
	Результат = Запрос.Выполнить();
	
	ПрогнозЗаданПоПартнерам = Ложь;
	Если Не Результат.Пустой() Тогда
		Партнеры.Загрузить(Результат.Выгрузить());
		ПрогнозЗаданПоПартнерам = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДетальныеДанныеПоРезервам()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.УпаковкаПаллета КАК УпаковкаПаллета,
	|	Товары.Партнер КАК Партнер,
	|	Товары.ПрогнозВБутылках КАК Прогноз
	|ПОМЕСТИТЬ ВтВтТовары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.УпаковкаПаллета КАК УпаковкаПаллета,
	|	Товары.Партнер КАК Партнер,
	|	Товары.Прогноз КАК Прогноз
	|ПОМЕСТИТЬ ВтТовары
	|ИЗ
	|	ВтВтТовары КАК Товары
	|ГДЕ
	|	(Товары.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ИЛИ НЕ &ПрогнозЗаданПоПартнерам)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.УпаковкаПаллета КАК УпаковкаПаллета
	|ПОМЕСТИТЬ ВтТоварыСводно
	|ИЗ
	|	ВтТовары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Партнеры.ПартнерРезерва КАК ПартнерРезерва
	|ПОМЕСТИТЬ ВтВсеПартнеры
	|ИЗ
	|	&Партнеры КАК Партнеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройка.ПартнерОтгрузки КАК ПартнерОтгрузки,
	|	Настройка.ПартнерРезерва КАК ПартнерРезерва
	|ПОМЕСТИТЬ ВтПартнеры
	|ИЗ
	|	ВтВсеПартнеры КАК ВтВсеПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ПартнерыДолгосрочныхРезервов КАК Настройка
	|		ПО ВтВсеПартнеры.ПартнерРезерва = Настройка.ПартнерРезерва
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВтВсеПартнеры.ПартнерРезерва,
	|	ВтВсеПартнеры.ПартнерРезерва
	|ИЗ
	|	ВтВсеПартнеры КАК ВтВсеПартнеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДД.ДолгосрочныйРезерв КАК ДолгосрочныйРезерв,
	|	ДД.УПоставщикаОборот - ДД.ОтмененоОборот - ДД.ПоступилоОборот - ДД.ВыбылоОборот КАК Количество
	|ПОМЕСТИТЬ ВтРаспределенныеПоступления
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			,
	|			(Номенклатура, УпаковкаПаллета) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура,
	|						Товары.УпаковкаПаллета
	|					ИЗ
	|						ВтТоварыСводно КАК Товары)
	|				И ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ДД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|	РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВтПартнеры.ПартнерРезерва КАК Партнер,
	|	0 КАК Продажи,
	|	0 КАК ПродажиПланируемые,
	|	РаспределениеЗапасов.Зарезервировано КАК ДолгосрочныйРезерв,
	|	0 КАК РазмещеноВЗаказах,
	|	0 КАК Прогноз
	|ПОМЕСТИТЬ ВтДанные
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Док
	|		ПО РаспределениеЗапасов.ЗаказНаОтгрузку = Док.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыСводно КАК ВтТоварыСводно
	|		ПО РаспределениеЗапасов.Номенклатура = ВтТоварыСводно.Номенклатура
	|			И РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета = ВтТоварыСводно.УпаковкаПаллета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПартнеры КАК ВтПартнеры
	|		ПО (Док.Партнер = ВтПартнеры.ПартнерОтгрузки)
	|ГДЕ
	|	РаспределениеЗапасов.Склад = &Склад
	|	И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|	И Док.бг_ДолгосрочныйРезерв
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура,
	|	ВтТовары.УпаковкаПаллета,
	|	ВтПартнеры.ПартнерРезерва,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВтТовары.Прогноз
	|ИЗ
	|	ВтТовары КАК ВтТовары,
	|	ВтПартнеры КАК ВтПартнеры
	|ГДЕ
	|	НЕ &ПрогнозЗаданПоПартнерам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура,
	|	ВтТовары.УпаковкаПаллета,
	|	ВтТовары.Партнер,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ВтТовары.Прогноз
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|ГДЕ
	|	&ПрогнозЗаданПоПартнерам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.Номенклатура,
	|	ДД.УпаковкаПаллета,
	|	ВтПартнеры.ПартнерРезерва,
	|	0,
	|	0,
	|	0,
	|	ДД.Количество,
	|	0
	|ИЗ
	|	ВтРаспределенныеПоступления КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Док
	|		ПО ДД.ДолгосрочныйРезерв = Док.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыСводно КАК ВтТоварыСводно
	|		ПО ДД.Номенклатура = ВтТоварыСводно.Номенклатура
	|			И ДД.УпаковкаПаллета = ВтТоварыСводно.УпаковкаПаллета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПартнеры КАК ВтПартнеры
	|		ПО (Док.Партнер = ВтПартнеры.ПартнерОтгрузки)
	|ГДЕ
	|	Док.Склад = &Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.Номенклатура,
	|	Строки.Серия.бг_УпаковкаПаллета,
	|	ВтПартнеры.ПартнерРезерва,
	|	Строки.Количество,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Строки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Док
	|		ПО (Док.Ссылка = Строки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыСводно КАК ВтТоварыСводно
	|		ПО Строки.Номенклатура = ВтТоварыСводно.Номенклатура
	|			И Строки.Серия.бг_УпаковкаПаллета = ВтТоварыСводно.УпаковкаПаллета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПартнеры КАК ВтПартнеры
	|		ПО (Док.Партнер = ВтПартнеры.ПартнерОтгрузки)
	|ГДЕ
	|	Док.Склад = &Склад
	|	И Док.Проведен
	|	И Док.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Строки.Номенклатура,
	|	Строки.бг_УпаковкаПаллета,
	|	ВтПартнеры.ПартнерРезерва,
	|	0,
	|	Остатки.ЗаказаноОстаток,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Строки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК Док
	|		ПО Строки.Ссылка = Док.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыСводно КАК ВтТоварыСводно
	|		ПО (ВтТоварыСводно.Номенклатура = Строки.Номенклатура)
	|			И (ВтТоварыСводно.УпаковкаПаллета = Строки.бг_УпаковкаПаллета)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(, ) КАК Остатки
	|		ПО Строки.Ссылка = Остатки.ЗаказКлиента
	|			И Строки.КодСтроки = Остатки.КодСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПартнеры КАК ВтПартнеры
	|		ПО (Док.Партнер = ВтПартнеры.ПартнерОтгрузки)
	|ГДЕ
	|	Строки.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ Док.бг_ДолгосрочныйРезерв
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура КАК Номенклатура,
	|	РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	СУММА(РаспределениеЗапасов.Свободно) КАК ОстатокПоЗаказам,
	|	0 КАК СвободныйОстаток,
	|	0 КАК Прогноз
	|ПОМЕСТИТЬ ВтДанныеПоНоменклатуре
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыСводно КАК Строки
	|		ПО РаспределениеЗапасов.Номенклатура = Строки.Номенклатура
	|			И РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета = Строки.УпаковкаПаллета
	|ГДЕ
	|	РаспределениеЗапасов.Склад = &Склад
	|	И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
	|	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И РаспределениеЗапасов.ЗаказНаПоступление ССЫЛКА Документ.ЗаказПоставщику
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.Номенклатура,
	|	ДД.УпаковкаПаллета,
	|	-ДД.Количество,
	|	0,
	|	0
	|ИЗ
	|	ВтРаспределенныеПоступления КАК ДД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета,
	|	0,
	|	СУММА(РаспределениеЗапасов.Свободно),
	|	0
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыСводно КАК ВтТоварыСводно
	|		ПО РаспределениеЗапасов.Номенклатура = ВтТоварыСводно.Номенклатура
	|			И РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета = ВтТоварыСводно.УпаковкаПаллета
	|ГДЕ
	|	РаспределениеЗапасов.Склад = &Склад
	|	И РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И РаспределениеЗапасов.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеЗапасов.Номенклатура,
	|	РаспределениеЗапасов.Характеристика.бг_УпаковкаПаллета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТовары.Номенклатура,
	|	ВтТовары.УпаковкаПаллета,
	|	0,
	|	0,
	|	СУММА(ВтТовары.Прогноз)
	|ИЗ
	|	ВтТовары КАК ВтТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТовары.Номенклатура,
	|	ВтТовары.УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанныеПоНоменклатуре.Номенклатура КАК Номенклатура,
	|	ВтДанныеПоНоменклатуре.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СУММА(ВтДанныеПоНоменклатуре.ОстатокПоЗаказам) КАК ОстатокПоЗаказам,
	|	СУММА(ВтДанныеПоНоменклатуре.СвободныйОстаток) КАК СвободныйОстаток,
	|	СУММА(ВтДанныеПоНоменклатуре.Прогноз) КАК Прогноз
	|ИЗ
	|	ВтДанныеПоНоменклатуре КАК ВтДанныеПоНоменклатуре
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанныеПоНоменклатуре.УпаковкаПаллета,
	|	ВтДанныеПоНоменклатуре.Номенклатура
	|ИТОГИ
	|	СУММА(ОстатокПоЗаказам),
	|	СУММА(СвободныйОстаток),
	|	СУММА(Прогноз)
	|ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДанные.Номенклатура КАК Номенклатура,
	|	ВтДанные.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВтДанные.Партнер КАК Партнер,
	|	СУММА(ВтДанные.Продажи) КАК Продажи,
	|	СУММА(ВтДанные.ПродажиПланируемые) КАК ПродажиПланируемые,
	|	СУММА(ВтДанные.ДолгосрочныйРезерв) КАК ДолгосрочныйРезерв,
	|	СУММА(ВтДанные.РазмещеноВЗаказах) КАК РазмещеноВЗаказах,
	|	СУММА(ВтДанные.Прогноз) КАК Прогноз
	|ИЗ
	|	ВтДанные КАК ВтДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДанные.Номенклатура,
	|	ВтДанные.Партнер,
	|	ВтДанные.УпаковкаПаллета";
	
	ЗначениеРеквизитаФормы = РеквизитФормыВЗначение("Товары");
	ДеревоТовары = ОбщегоНазначенияУТ.ДанныеДерева(ЗначениеРеквизитаФормы, 1);
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Товары", ДеревоТовары.Скопировать(Новый Структура("Выбран", Истина)));
	Запрос.УстановитьПараметр("Партнеры", Партнеры.Выгрузить());
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ПрогнозЗаданПоПартнерам", ПрогнозЗаданПоПартнерам);
	
	Результаты = Запрос.ВыполнитьПакет();
	ВыборкаНоменклатура = Результаты[Результаты.ВГраница() - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДанныеПоПартнерам = Результаты[Результаты.ВГраница()].Выбрать();
	
	Отбор = Новый Структура("Номенклатура, УпаковкаПаллета");
	
	Резервы.ПолучитьЭлементы().Очистить();
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаПаллета = ВыборкаНоменклатура.Выбрать();
		
		Пока ВыборкаПаллета.Следующий() Цикл
			
			НоваяСтрокаНоменклатура = Резервы.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатура, ВыборкаНоменклатура);
			
			НоваяСтрокаНоменклатура.ЭтоИтог = Истина;
			
			ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПаллета);
			
			Пока ДанныеПоПартнерам.НайтиСледующий(Отбор) Цикл
				
				НоваяСтрока = НоваяСтрокаНоменклатура.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоПартнерам);
				
				НоваяСтрока.ОсталосьОтгрузить = НоваяСтрока.Прогноз - НоваяСтрока.Продажи
							- НоваяСтрока.ДолгосрочныйРезерв
							- НоваяСтрока.РазмещеноВЗаказах - НоваяСтрока.ПродажиПланируемые;
				
			КонецЦикла;
			
			ДанныеПоПартнерам.Сбросить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПрогнозНаСервере()
	
	РассчитатьПрогнозСУчетомРезерва();
	
	РаспределитьПрогнозПоОстаткамИтерация("СвободныйОстаток");
	
	РаспределитьПрогнозПоОстаткамИтерация("ОстатокПоЗаказам");
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиСтрокиРезерва(Идентификатор)
	
	ТекущаяСтрока = Резервы.НайтиПоИдентификатору(Идентификатор); 
	ТекущаяСтрока.ОсталосьОтгрузить = ТекущаяСтрока.Прогноз - ТекущаяСтрока.ДолгосрочныйРезерв - ТекущаяСтрока.РазмещеноВЗаказах - ТекущаяСтрока.ПродажиПланируемые; 
	
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Родитель.Прогноз = 0;
	Родитель.ОсталосьОтгрузить = 0;
	
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		Родитель.Прогноз = Родитель.Прогноз + Строка.Прогноз;
		Родитель.ОсталосьОтгрузить = Родитель.ОсталосьОтгрузить + Строка.ОсталосьОтгрузить;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПрогнозСУчетомРезерва()
	
	СтрокиТоваров = Резервы.ПолучитьЭлементы();
	
	Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
		
		СтрокаТовара.ПрогнозСУчетомРезерва = 0;
		
		Строки = СтрокаТовара.ПолучитьЭлементы();
		
		Для Каждого Строка Из Строки Цикл
			
			Если НеУчитыватьРанееСозданныеРезервы Тогда
				
				Строка.ПрогнозСУчетомРезерва = Строка.Прогноз;
				
			Иначе
				
				Строка.ПрогнозСУчетомРезерва = Строка.Прогноз - Строка.Продажи
				- Строка.ДолгосрочныйРезерв - Строка.РазмещеноВЗаказах - Строка.ПродажиПланируемые;
				
			КонецЕсли;
			
			Если Строка.ПрогнозСУчетомРезерва < 0 Тогда
				Строка.ПрогнозСУчетомРезерва = 0;
			КонецЕсли;
			
			СтрокаТовара.ПрогнозСУчетомРезерва = СтрокаТовара.ПрогнозСУчетомРезерва + Строка.ПрогнозСУчетомРезерва;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПрогнозПоОстаткамИтерация(Итерация)
	
	СтрокиТоваров = Резервы.ПолучитьЭлементы();
	
	Для Каждого СтрокаТовара Из СтрокиТоваров Цикл
		
		Коэффициенты = Новый Массив;
		
		Строки = СтрокаТовара.ПолучитьЭлементы();
		
		Для Каждого Строка Из Строки Цикл
			
			Коэффициенты.Добавить(Строка.ПрогнозСУчетомРезерва);
			
		КонецЦикла;
		
		Если Итерация = "СвободныйОстаток" Тогда
			Распределить = Мин(СтрокаТовара.ПрогнозСучетомРезерва, СтрокаТовара.СвободныйОстаток);
			СтрокаТовара.РаспределеноИзОстатков = 0;
		Иначе
			Распределить = Мин(СтрокаТовара.ПрогнозСучетомРезерва - СтрокаТовара.РаспределеноИзОстатков, СтрокаТовара.ОстатокПоЗаказам);
			СтрокаТовара.Распределено = 0;
		КонецЕсли;
	
		Результат = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Распределить, Коэффициенты, 0);
		
		Индекс = 0;
		
		Для Каждого Строка Из Строки Цикл
			
			Если Итерация = "СвободныйОстаток" Тогда
				Строка.РаспределеноИзОстатков = ?(Результат = Неопределено, 0, Результат[Индекс]);
				СтрокаТовара.РаспределеноИзОстатков = СтрокаТовара.РаспределеноИзОстатков + Строка.РаспределеноИзОстатков;
			Иначе
				Строка.Распределено = ?(Результат = Неопределено, 0, Результат[Индекс]) + Строка.РаспределеноИзОстатков;
				СтрокаТовара.Распределено = СтрокаТовара.Распределено + Строка.Распределено;
			КонецЕсли;
			
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РезервыПрогнозПриИзмененииНаСервере(Идентификатор = Неопределено)
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		РассчитатьИтогиСтрокиРезерва(Идентификатор);
		
	Иначе
		
		СтрокиНоменклатура = Резервы.ПолучитьЭлементы();
		
		Для Каждого СтрокаНоменклатура Из СтрокиНоменклатура Цикл
			
			Строки = СтрокаНоменклатура.ПолучитьЭлементы();
			
			Для Каждого Строка Из Строки Цикл
				РассчитатьИтогиСтрокиРезерва(Строка.ПолучитьИдентификатор());
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаспределитьПрогнозНаСервере();
	
КонецПроцедуры

#Область СозданиеДокументов

&НаСервере
Процедура СоздатьРезервыНаСервере()
	
	СоздатьДокументыРезервов();
	
	ЗаполнитьРезевыНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ШаблонТаблицыКФормированию()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДД.Количество КАК РаспределеноИзОстатков,
	|	ДД.Количество КАК Распределено,
	|	ДД.Ссылка.Партнер КАК Партнер,
	|	ДД.Ссылка.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДД.Ссылка.бг_КаналПродаж КАК КаналПродаж,
	|	ДД.Ссылка.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДД";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ШаблонТаблицыБудущихПоступлений()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДД.бг_ЗаказПоставщикуИсточникОбеспечения КАК ЗаказПоставщику,
	|	ДД.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДД";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура СоздатьДокументыРезервов()
	
	ДанныеПоПартнерам = Новый Соответствие;
	Для Каждого Строка Из Партнеры Цикл
		
		ДанныеПоПартнерам.Вставить(Строка.ПартнерРезерва, Новый Структура("КаналПродаж, Комментарий", Строка.КаналПродаж, Строка.Комментарий));
		
	КонецЦикла;
	
	ТаблицаКФормированию = ШаблонТаблицыКФормированию();
	
	СтрокиНоменклатура = Резервы.ПолучитьЭлементы();
	
	Для Каждого СтрокаНоменклатура Из СтрокиНоменклатура Цикл
		
		Строки = СтрокаНоменклатура.ПолучитьЭлементы();
		
		Для Каждого Строка Из Строки Цикл
			
			Если Не ЗначениеЗаполнено(Строка.Распределено) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаКФормированию.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.ДатаОтгрузки = Период.ДатаОкончания;
			
			Если ДанныеПоПартнерам[Строка.Партнер] <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоПартнерам[Строка.Партнер]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИзмененныеДокументы = Новый Структура;
	ИзмененныеДокументы.Вставить("СтарыеЗаказыКлиентов", Новый Соответствие);
	ИзмененныеДокументы.Вставить("НовыеЗаказыКлиентов", Новый Соответствие);
	
	СформироватьРезервыПоТаблице(ИзмененныеДокументы, ТаблицаКФормированию);
	
	ПровестиДокументы(ИзмененныеДокументы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРезервыПоТаблице(ИзмененныеДокументы, ТаблицаКФормированию, ТаблицаБудущихПоступлений = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаБудущихПоступлений = Неопределено Тогда
		ТаблицаБудущихПоступлений = ТаблицаБудущихПоступлений(ТаблицаКФормированию);
	КонецЕсли;
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого Строка Из ТаблицаКФормированию Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Распределено) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокОбъект = ТекущийДокументРезерва(Строка, ИзмененныеДокументы.НовыеЗаказыКлиентов);
		
		Если ЗначениеЗаполнено(Строка.РаспределеноИзОстатков) Тогда
			
			НоваяСтрока = ДокОбъект.Товары.Добавить();
			НоваяСтрока.Количество = Строка.РаспределеноИзОстатков;
			НоваяСтрока.КоличествоУпаковок = Строка.РаспределеноИзОстатков;
			НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
			
			ЗаполнитьРеквизитыСтрокиЗаказаКлиента(ДокОбъект, НоваяСтрока, Строка, КэшированныеЗначения);
			
		КонецЕсли;
		
		ПодобратьИзБудущихПоступлений(ДокОбъект, Строка, ТаблицаБудущихПоступлений, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьИзБудущихПоступлений(ДокОбъект, Данные, ТаблицаБудущихПоступлений, КэшированныеЗначения)
	
	Если Данные.Распределено - Данные.РаспределеноИзОстатков <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Количество = Данные.Распределено - Данные.РаспределеноИзОстатков;
	
	Отбор = Новый Структура("Номенклатура, УпаковкаПаллета");
	ЗаполнитьЗначенияСвойств(Отбор, Данные);
	СтрокиОстатков = ТаблицаБудущихПоступлений.НайтиСтроки(Отбор);
	
	СтрокиКУдалению = Новый Массив;
	
	Для Каждого Строка Из СтрокиОстатков Цикл
		
		Если Количество = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НовоеКоличество = Мин(Строка.Количество, Количество);
		
		НоваяСтрока = ДокОбъект.Товары.Добавить();
		НоваяСтрока.Количество = НовоеКоличество;
		НоваяСтрока.КоличествоУпаковок = НовоеКоличество;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		НоваяСтрока.бг_ЗаказПоставщикуИсточникОбеспечения = Строка.ЗаказПоставщику;
		
		ЗаполнитьРеквизитыСтрокиЗаказаКлиента(ДокОбъект, НоваяСтрока, Строка, КэшированныеЗначения);
		
		Количество = Количество - НовоеКоличество;
		Строка.Количество = Строка.Количество - НовоеКоличество;
		
		Если Строка.Количество = 0 Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ТаблицаБудущихПоступлений.Удалить(Строка);
	КонецЦикла;
	
	Если Количество <> 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Не удалось обеспечить резерв из будущих поступлений.
			|Возможно часть товара уже зарезервирована или поступила на склад';
			|en = 'Не удалось обеспечить резерв из будущих поступлений.
			|Возможно часть товара уже зарезервирована или поступила на склад'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаБудущихПоступлений(КОбособлению)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.УпаковкаПаллета КАК УпаковкаПаллета
	|ПОМЕСТИТЬ ВтТаблицаКОбособлению
	|ИЗ
	|	&КОбособлению КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.УпаковкаПаллета КАК УпаковкаПаллета
	|ПОМЕСТИТЬ ВтПозицииКОбособлению
	|ИЗ
	|	ВтТаблицаКОбособлению КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.Характеристика.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДД.ЗаказНаПоступление КАК ЗаказНаПоступление,
	|	ДД.Назначение КАК Назначение,
	|	ДД.Свободно КАК Количество
	|ПОМЕСТИТЬ ВтРезультат
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтПозицииКОбособлению КАК Строки
	|		ПО ДД.Номенклатура = Строки.Номенклатура
	|			И ДД.Характеристика.бг_УпаковкаПаллета = Строки.УпаковкаПаллета
	|ГДЕ
	|	ДД.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
	|	И ДД.ЗаказНаПоступление ССЫЛКА Документ.ЗаказПоставщику
	|	И ДД.Свободно > 0
	|	И ДД.Склад = &Склад
	|	И ДД.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.Номенклатура,
	|	ДД.УпаковкаПаллета,
	|	ДД.ЗаказПоставщику,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	-(ДД.УПоставщикаОборот - ДД.ОтмененоОборот - ДД.ПоступилоОборот - ДД.ВыбылоОборот)
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			,
	|			(Номенклатура, УпаковкаПаллета) В
	|				(ВЫБРАТЬ
	|					Товары.Номенклатура,
	|					Товары.УпаковкаПаллета
	|				ИЗ
	|					ВтПозицииКОбособлению КАК Товары)
	|				И ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ДД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРезультат.Номенклатура КАК Номенклатура,
	|	ВтРезультат.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВтРезультат.ЗаказНаПоступление КАК ЗаказПоставщику,
	|	ВтРезультат.Назначение КАК Назначение,
	|	СУММА(ВтРезультат.Количество) КАК Количество
	|ИЗ
	|	ВтРезультат КАК ВтРезультат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтРезультат.Назначение,
	|	ВтРезультат.Номенклатура,
	|	ВтРезультат.УпаковкаПаллета,
	|	ВтРезультат.ЗаказНаПоступление
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВтРезультат.Количество) > 0";
	
	Запрос.УстановитьПараметр("КОбособлению", КОбособлению);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	ТаблицаБудущихПоступлений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаБудущихПоступлений;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыСтрокиЗаказаКлиента(ДокОбъект, НоваяСтрока, Строка, КэшированныеЗначения)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
		ДокОбъект,
		Документы.ЗаказКлиента));
		
	НоваяСтрока.Номенклатура = Строка.Номенклатура;
	НоваяСтрока.бг_УпаковкаПаллета = Строка.УпаковкаПаллета;
	НоваяСтрока.ДатаОтгрузки = ДокОбъект.ДатаОтгрузки;
	НоваяСтрока.Склад = Склад;
	
	НоваяСтрока.Цена = 1;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокОбъект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", НоваяСтрока.Склад, ПараметрыУказанияСерий));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ТекущийДокументРезерва(Данные, НовыеРезервы)
	
	Если НовыеРезервы[Данные.Партнер] <> Неопределено Тогда
		Возврат НовыеРезервы[Данные.Партнер];
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Дата", ТекущаяДатаСеанса());
	ДанныеЗаполнения.Вставить("Партнер", Данные.Партнер);
	ДанныеЗаполнения.Вставить("Организация", Организация);
	ДанныеЗаполнения.Вставить("Склад", Склад);
	ДанныеЗаполнения.Вставить("бг_ДолгосрочныйРезерв", Истина);
	ДанныеЗаполнения.Вставить("НеОтгружатьЧастями", Истина);
	ДанныеЗаполнения.Вставить("СкидкиРассчитаны", Истина);
	ДанныеЗаполнения.Вставить("ДатаОтгрузки", Данные.ДатаОтгрузки);
	ДанныеЗаполнения.Вставить("Соглашение");
	ДанныеЗаполнения.Вставить("Контрагент");
	ДанныеЗаполнения.Вставить("Грузополучатель");
	ДанныеЗаполнения.Вставить("Комментарий", Данные.Комментарий);
	ДанныеЗаполнения.Вставить("бг_КаналПродаж", Данные.КаналПродаж);
	
	ДанныеСоглашения = Обработки.бг_ФормированиеДолгосрочныхРезервов.ДанныеПартнераДляФормированияРезервов(Данные.Партнер);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеСоглашения);
	
	ДокОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	
	СсылкаНового = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокОбъект.Ссылка).ПолучитьСсылку();
	ДокОбъект.УстановитьСсылкуНового(СсылкаНового);
	
	ЗаполнитьЗначенияСвойств(ДокОбъект, ДанныеЗаполнения);
	
	ДокОбъект.Заполнить(Неопределено);
	
	НовыеРезервы.Вставить(Данные.Партнер, ДокОбъект);
	
	Возврат ДокОбъект;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Управление

&НаСервере
Процедура ОбновитьТаблицуУправление()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиента.Партнер КАК Партнер,
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.Характеристика.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДД.Зарезервировано КАК ДолгосрочныйРезерв,
	|	0 КАК РазмещеноВЗаказах,
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиента.Склад КАК Склад,
	|	ЗаказКлиента.Назначение КАК Назначение
	|ПОМЕСТИТЬ ВтРезультат
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ДД.ЗаказНаОтгрузку = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиента.бг_ДолгосрочныйРезерв
	|	И (ЗаказКлиента.ДатаОтгрузки < &ДатаОтгрузки
	|			ИЛИ &ЛюбаяДатаОтгрузки)
	|	И (ЗаказКлиента.Партнер = &Партнер
	|			ИЛИ &ЛюбойПартнер)
	|	И (ДД.Номенклатура = &Номенклатура
	|			ИЛИ &ЛюбаяНоменклатура)
	|	И (ДД.Номенклатура.ТоварнаяКатегория = &ТоварнаяКатегория
	|			ИЛИ &ЛюбаяТоварнаяКатегория)
	|	И (ДД.Склад = &Склад
	|			ИЛИ &ЛюбойСклад)
	|	И ДД.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|	И ЗаказКлиента.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.ДолгосрочныйРезерв.ДатаОтгрузки,
	|	ДД.ДолгосрочныйРезерв.Партнер,
	|	ДД.Номенклатура,
	|	ДД.УпаковкаПаллета,
	|	0,
	|	ДД.УПоставщикаОборот - ДД.ОтмененоОборот - ДД.ПоступилоОборот - ДД.ВыбылоОборот,
	|	ДД.ДолгосрочныйРезерв.Ссылка,
	|	ДД.ДолгосрочныйРезерв.Склад,
	|	ДД.ДолгосрочныйРезерв.Назначение
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(, , , ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ДД
	|ГДЕ
	|	(ДД.ДолгосрочныйРезерв.ДатаОтгрузки < &ДатаОтгрузки
	|			ИЛИ &ЛюбаяДатаОтгрузки)
	|	И (ДД.ДолгосрочныйРезерв.Партнер = &Партнер
	|			ИЛИ &ЛюбойПартнер)
	|	И (ДД.Номенклатура = &Номенклатура
	|			ИЛИ &ЛюбаяНоменклатура)
	|	И (ДД.Номенклатура.ТоварнаяКатегория = &ТоварнаяКатегория
	|			ИЛИ &ЛюбаяТоварнаяКатегория)
	|	И (ДД.ДолгосрочныйРезерв.Склад = &Склад
	|			ИЛИ &ЛюбойСклад)
	|	И ДД.ДолгосрочныйРезерв.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРезультат.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВтРезультат.Партнер КАК Партнер,
	|	ВтРезультат.Номенклатура КАК Номенклатура,
	|	ВтРезультат.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СУММА(ВтРезультат.ДолгосрочныйРезерв) КАК ДолгосрочныйРезерв,
	|	СУММА(ВтРезультат.РазмещеноВЗаказах) КАК РазмещеноВЗаказах,
	|	ВтРезультат.ЗаказКлиента КАК ЗаказКлиента,
	|	ВтРезультат.Склад КАК Склад,
	|	ВтРезультат.Назначение КАК Назначение
	|ИЗ
	|	ВтРезультат КАК ВтРезультат
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтРезультат.Номенклатура,
	|	ВтРезультат.Партнер,
	|	ВтРезультат.Назначение,
	|	ВтРезультат.УпаковкаПаллета,
	|	ВтРезультат.Склад,
	|	ВтРезультат.ЗаказКлиента,
	|	ВтРезультат.ДатаОтгрузки
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВтРезультат.ДолгосрочныйРезерв) <> 0
	|		ИЛИ СУММА(ВтРезультат.РазмещеноВЗаказах) <> 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнер,
	|	Номенклатура,
	|	УпаковкаПаллета,
	|	ДатаОтгрузки";
	
	Запрос.УстановитьПараметр("ДатаОтгрузки", ОтборДатаОтгрузки);
	Запрос.УстановитьПараметр("ЛюбаяДатаОтгрузки", Не ЗначениеЗаполнено(ОтборДатаОтгрузки));
	
	Запрос.УстановитьПараметр("Номенклатура", ОтборНоменклатура);
	Запрос.УстановитьПараметр("ЛюбаяНоменклатура", Не ЗначениеЗаполнено(ОтборНоменклатура));
	
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ОтборТоварнаяКатегория);
	Запрос.УстановитьПараметр("ЛюбаяТоварнаяКатегория", Не ЗначениеЗаполнено(ОтборТоварнаяКатегория));
	
	Запрос.УстановитьПараметр("Партнер", ОтборПартнер);
	Запрос.УстановитьПараметр("ЛюбойПартнер", Не ЗначениеЗаполнено(ОтборПартнер));
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ЛюбойСклад", Не ЗначениеЗаполнено(Склад));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Управление.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Управление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВыбратьВсеНаСервере(Признак)
	
	Для Каждого Строка Из Управление Цикл
		
		Строка.Выбран = Признак;
		
		Если Строка.Выбран Тогда
			Строка.РазмещеноВЗаказахИзменение = Строка.РазмещеноВЗаказах;
			Строка.ДолгосрочныйРезервИзменение = Строка.ДолгосрочныйРезерв;
		Иначе
			Строка.РазмещеноВЗаказахИзменение = 0;
			Строка.ДолгосрочныйРезервИзменение = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСРезервами

&НаСервере
Процедура УправлениеИзменитьНаСервере(ДанныеДляИзменения = Неопределено)
	
	ИзмененныеДокументы = Новый Структура;
	ИзмененныеДокументы.Вставить("СтарыеЗаказыКлиентов", Новый Соответствие);
	ИзмененныеДокументы.Вставить("НовыеЗаказыКлиентов", Новый Соответствие);
	
	ТаблицаБудущихПоступлений = ШаблонТаблицыБудущихПоступлений();
	
	ВысвободитьРезервы(ИзмененныеДокументы, ТаблицаБудущихПоступлений);
	
	СоздатьНовыеРезервы(ИзмененныеДокументы, ДанныеДляИзменения, ТаблицаБудущихПоступлений);
	
	ПровестиДокументы(ИзмененныеДокументы);
	
	ОбновитьТаблицуУправление();
	
КонецПроцедуры

&НаСервере
Процедура ВысвободитьРезервы(ИзмененныеДокументы, ТаблицаБудущихПоступлений)
	
	Для Каждого Строка Из Управление Цикл
		
		Если Не Строка.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		ВысвободитьСвободныеРезервы(Строка, ИзмененныеДокументы.СтарыеЗаказыКлиентов, ТаблицаБудущихПоступлений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВысвободитьСвободныеРезервы(Строка, СтарыеЗаказыКлиентов, ТаблицаБудущихПоступлений)
	
	ДокОбъект = СтарыеЗаказыКлиентов[Строка.ЗаказКлиента];
	
	Если ДокОбъект = Неопределено Тогда
		ДокОбъект = Строка.ЗаказКлиента.ПолучитьОбъект();
		СтарыеЗаказыКлиентов.Вставить(Строка.ЗаказКлиента, ДокОбъект);
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
		ДокОбъект,
		Документы.ЗаказКлиента));
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Строка.Номенклатура);
	Отбор.Вставить("бг_УпаковкаПаллета", Строка.УпаковкаПаллета);
	Отбор.Вставить("Отменено", Ложь);
	
	НайденныеСтроки = ДокОбъект.Товары.НайтиСтроки(Отбор);
	
	ДолгосрочныйРезервИзменение = Строка.ДолгосрочныйРезервИзменение;
	РазмещеноВЗаказахИзменение = Строка.РазмещеноВЗаказахИзменение;
	
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		
		Если СтрокаТЧ.Отменено Или ДолгосрочныйРезервИзменение = 0 И РазмещеноВЗаказахИзменение = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			
			НовоеКоличество = Мин(ДолгосрочныйРезервИзменение, СтрокаТЧ.Количество);
			ДолгосрочныйРезервИзменение = ДолгосрочныйРезервИзменение - НовоеКоличество;
			
		ИначеЕсли СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда
			
			НовоеКоличество = Мин(РазмещеноВЗаказахИзменение, СтрокаТЧ.Количество);
			РазмещеноВЗаказахИзменение = РазмещеноВЗаказахИзменение - НовоеКоличество;
			
			НоваяСтрока = ТаблицаБудущихПоступлений.Добавить();
			НоваяСтрока.Количество = НовоеКоличество;
			НоваяСтрока.Номенклатура = СтрокаТЧ.Номенклатура;
			НоваяСтрока.УпаковкаПаллета = СтрокаТЧ.бг_УпаковкаПаллета;
			НоваяСтрока.ЗаказПоставщику = СтрокаТЧ.бг_ЗаказПоставщикуИсточникОбеспечения;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТЧ.Количество > НовоеКоличество Тогда
			
			НоваяСтрока = ДокОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КодСтроки");
			
			НоваяСтрока.Количество = СтрокаТЧ.Количество - НовоеКоличество;
			СтрокаТЧ.Количество = НовоеКоличество;
			
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			
		КонецЕсли;
		
		СтрокаТЧ.Отменено = Истина;
		СтрокаТЧ.ПричинаОтмены = ПричинаОтмены();
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаТЧ.Склад, ПараметрыУказанияСерий));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовыеРезервы(ИзмененныеДокументы, ДанныеДляИзменения, ТаблицаБудущихПоступлений)
	
	Если ДанныеДляИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКФормированию = ШаблонТаблицыКФормированию();
	
	Для Каждого Строка Из Управление Цикл
		
		Если Не Строка.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКФормированию.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.РаспределеноИзОстатков = Строка.ДолгосрочныйРезервИзменение;
		НоваяСтрока.Распределено = Строка.ДолгосрочныйРезервИзменение + Строка.РазмещеноВЗаказахИзменение;
		
		НоваяСтрока.Партнер = ДанныеДляИзменения.Партнер;
		НоваяСтрока.ДатаОтгрузки = ДанныеДляИзменения.ДатаОтгрузки;
		НоваяСтрока.КаналПродаж = ДанныеДляИзменения.КаналПродаж;
		НоваяСтрока.Комментарий = ДанныеДляИзменения.Комментарий;
		
	КонецЦикла;
	
	СформироватьРезервыПоТаблице(ИзмененныеДокументы, ТаблицаКФормированию, ТаблицаБудущихПоступлений);
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументы(ИзмененныеДокументы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Если ИзмененныеДокументы.Свойство("СтарыеЗаказыКлиентов") Тогда
		
		Для Каждого Строка Из ИзмененныеДокументы.СтарыеЗаказыКлиентов Цикл
			
			ДокОбъект = Строка.Значение;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИзмененныеДокументы.Свойство("НовыеЗаказыКлиентов") Тогда
		
		Для Каждого Строка Из ИзмененныеДокументы.НовыеЗаказыКлиентов Цикл
			
			ДокОбъект = Строка.Значение;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция ПричинаОтмены()
	
	Возврат бг_КонстантыПовтИсп.ЗначениеКонстанты("ПричинаОтменыДолгосрочногоРезерва");
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ПартнерыПартнерПриИзмененииНаСервере(Идентификатор)
	
	ТекущиеДанные = Партнеры.НайтиПоИдентификатору(Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиента.бг_КаналПродаж КАК КаналПродаж
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Партнер = &ПартнерРезерва
	|	И ЗаказКлиента.Проведен
	|	И ЗаказКлиента.бг_КаналПродаж <> ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка)
	|	И ЗаказКлиента.бг_ДолгосрочныйРезерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиента.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ПартнерРезерва", ТекущиеДанные.ПартнерРезерва);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекущиеДанные.КаналПродаж =  Выборка.КаналПродаж;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнеровПоКаналамПродажНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиента.Партнер КАК ПартнерРезерва,
	|	ЗаказКлиента.бг_КаналПродаж КАК КаналПродаж
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.бг_КаналПродаж В(&КаналыПродаж)
	|	И ЗаказКлиента.Проведен
	|	И ЗаказКлиента.бг_ДолгосрочныйРезерв
	|	И ЗаказКлиента.бг_КаналПродаж <> ЗНАЧЕНИЕ(Справочник.БитКаналыПродаж.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КаналПродаж,
	|	ПартнерРезерва";
	
	Запрос.УстановитьПараметр("КаналыПродаж", Партнеры.Выгрузить().ВыгрузитьКолонку("КаналПродаж"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Партнеры.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Партнеры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти