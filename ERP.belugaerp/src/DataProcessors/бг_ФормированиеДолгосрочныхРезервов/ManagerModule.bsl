

#Область ОписаниеПеременных

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Формирует задание на отложенную обработку приходного ордера. В рамках отложенной обработки обновляются данные о резервах.
//
// Параметры:
//  Источник - ДокументСсылка.ПриходныйОрдерНаТовары - ссылка на документ
//  Отказ - Булево - Признак неуспешного выполнения процедуры
//
Процедура СинхронизироватьЗависимыеДокументыПриходногоОрдера(Источник, Отказ) Экспорт
	
	Если Не ТребуетсяСинхронизацияЗаказовПоПриходномуОрдеру(Источник, Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Попытка
			
			СинхронизироватьЗаказыКлиента(Источник.Ссылка);
			
		Исключение
			
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось актуализировать резервы по %1.
					       |По причине: %2
						   |';
					 |en = 'Failed to update reserve by %1.
					       |Reason: %2
						   |'",	
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Источник,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииАктуализироватьРезервыПриПоступленииТовара(),
				УровеньЖурналаРегистрации.Ошибка,
				Источник.Метаданные(),
				Источник,
				ТекстСообщения);
				
			ВызватьИсключение ТекстСообщения;
			
		КонецПопытки;
		
	Иначе
		
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Источник.Ссылка,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктуализироватьРезервыПриПоступленииТовара);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет данные о резервах по приходному ордеру. Вызывается при обработки очереди на отложенную обработку.
//
// Параметры:
//  Источник - ДокументСсылка.ПриходныйОрдерНаТовары - ссылка на документ
//  ВариантОбработки - Вариант отложенной обработки
//  Отказ - Булево - Признак неуспешного выполнения процедуры
//  ДополнительныеСведения - Структура - Дополнительные параметры
//
Процедура АктуализироватьРезервыПриПоступленииТовара(Источник, ВариантОбработки, Отказ, ДополнительныеСведения) Экспорт
	
	Если ВариантОбработки <> Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктуализироватьРезервыПриПоступленииТовара
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		СинхронизироватьЗаказыКлиента(Источник);
		
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		ШаблонСообщения = 
			НСтр("ru = 'Не удалось актуализировать резервы по %1.
				       |По причине: %2
					   |';
				 |en = 'Failed to update reserve by %1.
				       |Reason: %2
					   |'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Источник,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрацииАктуализироватьРезервыПриПоступленииТовара(),
			УровеньЖурналаРегистрации.Ошибка,
			Источник.Метаданные(),
			Источник,
			ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
КонецПроцедуры

Функция ДанныеПартнераДляФормированияРезервов(Партнер) Экспорт
	
	Результат = Новый Структура("Соглашение, Контрагент, Грузополучатель");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Ссылка КАК Соглашение,
	|	ДД.Контрагент КАК Контрагент,
	|	ДД.Контрагент КАК Грузополучатель
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК ДД
	|ГДЕ
	|	ДД.Партнер = &Партнер
	|	И НЕ ДД.ПометкаУдаления
	|	И ДД.бг_ДляДолгосрочныхРезервов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Соглашения = Результаты[0].Выбрать();
	
	Если Соглашения.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Соглашения);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеДляНового = Результаты[1].Выбрать();
	
	Если Не ДанныеДляНового.Следующий() Тогда
		
		ВызватьИсключение НСтр("ru = 'Не найден контрагент для создания служебного соглашения для формирования резервов';
								|en = 'Не найден контрагент для создания служебного соглашения для формирования резервов'");
	КонецЕсли;
	
	СпрОбъект = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
	СпрОбъект.Заполнить(ДанныеДляНового.Контрагент);
	
	СпрОбъект.Наименование = "Для долгосрочных резервов";
	СпрОбъект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Закрыто;
	СпрОбъект.бг_ДляДолгосрочныхРезервов = Истина;
	СпрОбъект.ИспользуютсяДоговорыКонтрагентов = Ложь;
	СпрОбъект.Контрагент = ДанныеДляНового.Контрагент;
	
	СпрОбъект.Записать();
	
	ЗаполнитьЗначенияСвойств(Результат, Соглашения);
	Результат.Контрагент = СпрОбъект.Контрагент;
	Результат.Соглашение = СпрОбъект.Ссылка;
	Результат.Грузополучатель = СпрОбъект.Контрагент;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий
// Код процедур и функций
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СинхронизацияЗаказаКлиентаРезерва

Функция ТребуетсяСинхронизацияЗаказовПоПриходномуОрдеру(Источник, Отказ)
	
	Если Источник.ОбменДанными.Загрузка
		Или Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("бг_ОтключитьСинхронизациюЗависимыхДокументов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("бг_ТребуетсяОтложеннаяОбработка")
		И Источник.ДополнительныеСвойства.бг_ТребуетсяОтложеннаяОбработка Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СинхронизироватьЗаказыКлиента(Источник)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапросаДанныеРезервовПоПриходномуОрдеру();
	
	Запрос.УстановитьПараметр("ПриходныйОрдер", Источник);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТаблицаЗависимыхДокументов = Результаты[Результаты.ВГраница()].Выгрузить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить("ДокументОбъект.ЗаказКлиента");
	
	ТаблицаЗависимыхДокументов.Колонки.Добавить("ЗависимыйДокументОбъект", Новый ОписаниеТипов(МассивТипов));
	ТаблицаЗависимыхДокументов.Колонки.Добавить("ЗависимыйДокументИзменен", Новый ОписаниеТипов("Булево"));
	
	СоответствиеСтрок = Новый Соответствие;
	Для Каждого СтрокаСЗависимымДокументом Из ТаблицаЗависимыхДокументов Цикл
		СоответствиеСтрок.Вставить(СтрокаСЗависимымДокументом.ЗависимыйДокумент, СтрокаСЗависимымДокументом);
	КонецЦикла;
	
	Реквизиты = Результаты[Результаты.ВГраница() - 1].Выбрать();
	Реквизиты.Следующий();
	
	ТоварыКПоступлению = Результаты[Результаты.ВГраница() - 2].Выгрузить();
	ТоварыОрдера = Результаты[Результаты.ВГраница() - 3].Выгрузить();
	
	Если ТаблицаЗависимыхДокументов.Количество() > 0 Тогда
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказКлиента");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаЗависимыхДокументов;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ЗависимыйДокумент");
			Блокировка.Заблокировать();
			
		Исключение
			
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось заблокировать связаные документы по %1.
					       |По причине: %2
						   |';
					 |en = 'Failed to block document %1.
					       |Reason: %2
						   |'",	
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Источник,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииАктуализироватьРезервыПриПоступленииТовара(),
				УровеньЖурналаРегистрации.Ошибка,
				ТаблицаЗависимыхДокументов[0].ЗависимыйДокумент.Метаданные(),
				Источник,
				ТекстСообщения);
				
			ВызватьИсключение ТекстСообщения;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОтразитьРаспределениеЗапасовДвижения(Источник, Реквизиты);
	
	Если ТаблицаЗависимыхДокументов.Количество() > 0 Тогда
		
		ОбновитьЗависимыеДокументыРезервов(Источник, СоответствиеСтрок, Реквизиты, ТоварыКПоступлению, ТоварыОрдера);
		
	КонецЕсли;
	
	Для Каждого СтрокаСЗависимымДокументом Из ТаблицаЗависимыхДокументов Цикл 
		
		Если Не СтрокаСЗависимымДокументом.ЗависимыйДокументИзменен Тогда
			Продолжить;
		КонецЕсли;
		
		ЗависимыйДокументОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект;
		ЗависимыйДокументОбъект.ДополнительныеСвойства.Вставить("бг_ПропуститьКонтрольЗаказовИсточниковОбеспечения");
		
		Попытка
			
			ЗависимыйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось записать документ %1.
					       |По причине: %2
						   |';
					 |en = 'Failed to block document %1.
					       |Reason: %2
						   |'",	
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ЗависимыйДокументОбъект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииАктуализироватьРезервыПриПоступленииТовара(),
				УровеньЖурналаРегистрации.Ошибка,
				ЗависимыйДокументОбъект.Метаданные(),
				ЗависимыйДокументОбъект.Ссылка,
				ТекстСообщения);
			
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьЗависимыеДокументыРезервов(Источник, СоответствиеСтрок, Реквизиты, ТоварыКПоступлению, ТоварыОрдера)
	
	ВосстановитьРанееПринятыеТовары(Источник, СоответствиеСтрок);
	
	ТолькоВосстановление = Не Реквизиты.Проведен Или Реквизиты.Статус <> Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	Если ТолькоВосстановление Тогда
		Возврат;
	КонецЕсли;
	
	ОтборОбщий = Новый Структура("Номенклатура, бг_УпаковкаПаллета");
	ОтборТЧ = Новый Структура("Номенклатура, бг_УпаковкаПаллета");
	
	Для Каждого СтрокаРаспределения Из ТоварыОрдера Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборОбщий, СтрокаРаспределения);
		ЗаполнитьЗначенияСвойств(ОтборТЧ, СтрокаРаспределения);
		
		ОтборТЧ.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
		ОтборТЧ.Вставить("бг_ЗаказПоставщикуИсточникОбеспечения", Реквизиты.ЗаказПоставщику);
		ОтборТЧ.Вставить("Отменено", Ложь);
		
		СтрокиКПоступлению = ТоварыКПоступлению.НайтиСтроки(ОтборОбщий);
		Удалить = Новый Массив;
		
		Для Каждого СтрокаКПоступлению Из СтрокиКПоступлению Цикл
			
			Если СтрокаРаспределения.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаСЗависимымДокументом = СоответствиеСтрок[СтрокаКПоступлению.ЗаказКлиента];
			
			Если СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = Неопределено Тогда
				СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокумент.ПолучитьОбъект();
			КонецЕсли;
			
			ДокОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект;
			
			СтрокиЗаказа = ДокОбъект.Товары.НайтиСтроки(ОтборТЧ);
			
			Для Каждого Строка Из СтрокиЗаказа Цикл
				
				НовоеКоличество = Мин(СтрокаРаспределения.Количество, Строка.Количество);
				
				Если НовоеКоличество = 0 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаСЗависимымДокументом.ЗависимыйДокументИзменен = Истина;
				
				Если Строка.Количество > НовоеКоличество Тогда
					
					НоваяСтрока = ДокОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "КодСтроки");
					
					НоваяСтрока.Количество = Строка.Количество - НовоеКоличество;
					Строка.Количество = НовоеКоличество;
					
					СтруктураДействий = Новый Структура;
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСумму");
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
					
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
					
				КонецЕсли;
				
				Строка.бг_ПриходныйОрдерОбособленногоОбеспечения = Источник.Ссылка;
				Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
				
				СтрокаРаспределения.Количество = СтрокаРаспределения.Количество - НовоеКоличество;
				СтрокаКПоступлению.Количество = СтрокаКПоступлению.Количество - НовоеКоличество;
				
				НеОбеспечиватьСтрокуРезерва(ДокОбъект, Строка, СоответствиеСтрок);
				
			КонецЦикла;
			
			Если СтрокаКПоступлению.Количество = 0 Тогда
				Удалить.Добавить(СтрокаКПоступлению);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка Из Удалить Цикл
			ТоварыКПоступлению.Удалить(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьРанееПринятыеТовары(Источник, СоответствиеСтрок)
	
	Для Каждого Строка Из СоответствиеСтрок Цикл
		
		СтрокаСЗависимымДокументом = Строка.Значение;
		
		Если Не СтрокаСЗависимымДокументом.ТребуетсяВосстановление Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокумент.ПолучитьОбъект();
		
		ДокОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект;
		
		Для Каждого СтрокаТЧ Из ДокОбъект.Товары Цикл
			
			Если СтрокаТЧ.бг_ПриходныйОрдерОбособленногоОбеспечения = Источник.Ссылка Тогда
				
				СтрокаТЧ.бг_ПриходныйОрдерОбособленногоОбеспечения = Неопределено;
				СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
				
				СтрокаСЗависимымДокументом.ЗависимыйДокументИзменен = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НеОбеспечиватьСтрокуРезерва(ЗаказКлиента, Данные, СоответствиеСтрок)
	
	Если ЗаказКлиента.бг_ДолгосрочныйРезерв Или Не ЗначениеЗаполнено(Данные.бг_ЗаказКлиентаИсточникОбеспечения) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСЗависимымДокументом = СоответствиеСтрок[Данные.бг_ЗаказКлиентаИсточникОбеспечения];
	
	Если СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = Неопределено Тогда
		СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	ДокОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект;
	
	ОтборТЧ = Новый Структура;
	
	ОтборТЧ.Вставить("Номенклатура", Данные.Номенклатура);
	ОтборТЧ.Вставить("бг_УпаковкаПаллета", Данные.бг_УпаковкаПаллета);
	ОтборТЧ.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
	ОтборТЧ.Вставить("бг_ЗаказПоставщикуИсточникОбеспечения", Данные.бг_ЗаказПоставщикуИсточникОбеспечения);
	ОтборТЧ.Вставить("Отменено", Ложь);
	
	СтрокиЗаказа = ДокОбъект.Товары.НайтиСтроки(ОтборТЧ);
	
	Распределить = Данные.Количество;
	
	Для Каждого Строка Из СтрокиЗаказа Цикл
		
		Если Распределить = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаСЗависимымДокументом.ЗависимыйДокументИзменен = Истина;
		
		НовоеКоличество = Мин(Распределить, Строка.Количество);
		
		Если Строка.Количество > НовоеКоличество Тогда
			
			НоваяСтрока = ДокОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "КодСтроки");
			
			НоваяСтрока.Количество = Строка.Количество - НовоеКоличество;
			Строка.Количество = НовоеКоличество;
			
			СтруктураДействий = Новый Структура;
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокОбъект);
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			
		КонецЕсли;
		
		Строка.бг_ПриходныйОрдерОбособленногоОбеспечения = Данные.бг_ПриходныйОрдерОбособленногоОбеспечения;
		Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;
		
		Распределить = Распределить - НовоеКоличество;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииАктуализироватьРезервыПриПоступленииТовара() Экспорт 
	
	Возврат НСтр("ru = 'Актуализировать резервы при поступлении товара';
	             |en = 'Update inventory upon receipt of goods'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция ТекстЗапросаДанныеРезервовПоПриходномуОрдеру()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДД.Проведен КАК Проведен,
	|	ДД.Распоряжение КАК Приобретение,
	|	ДД.Статус КАК Статус,
	|	ПриобретениеТоваровУслуг.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ПО ДД.Распоряжение = ПриобретениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ДД.Ссылка = &ПриходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.ЗаказКлиента КАК ЗависимыйДокумент,
	|	ДД.ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДД.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ ВтЗависимыеДокументы
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			,
	|			ЗаказПоставщику В
	|				(ВЫБРАТЬ
	|					ДД.ЗаказПоставщику
	|				ИЗ
	|					Реквизиты КАК ДД)) КАК ДД
	|ГДЕ
	|	ДД.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДД.ДолгосрочныйРезерв,
	|	ДД.ДолгосрочныйРезерв.ДатаОтгрузки,
	|	ДД.ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			,
	|			ЗаказПоставщику В
	|				(ВЫБРАТЬ
	|					ДД.ЗаказПоставщику
	|				ИЗ
	|					Реквизиты КАК ДД)) КАК ДД
	|ГДЕ
	|	ДД.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗависимыйДокумент,
	|	ЗаказПоставщику
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДД.Ссылка КАК ЗаказКлиента
	|ПОМЕСТИТЬ ВтЗаказыКВосстановлению
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДД
	|ГДЕ
	|	ДД.бг_ПриходныйОрдерОбособленногоОбеспечения = &ПриходныйОрдер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.Серия.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	СУММА(ДД.Количество) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыПриходногоОрдера
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ДД
	|ГДЕ
	|	ДД.Ссылка = &ПриходныйОрдер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДД.Номенклатура,
	|	ДД.Серия.бг_УпаковкаПаллета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	бг_УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.Ссылка КАК ЗаказКлиента,
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	ДД.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДД.Количество КАК Количество
	|ПОМЕСТИТЬ ВтОжидаемыеТовары
	|ИЗ
	|	ВтЗависимыеДокументы КАК ВтЗависимыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ДД
	|		ПО ВтЗависимыеДокументы.ЗависимыйДокумент = ДД.Ссылка
	|			И ВтЗависимыеДокументы.ЗаказПоставщику = ДД.бг_ЗаказПоставщикуИсточникОбеспечения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТоварыПриходногоОрдера КАК ТоварыОрдера
	|		ПО (ТоварыОрдера.Номенклатура = ДД.Номенклатура)
	|			И (ТоварыОрдера.бг_УпаковкаПаллета = ДД.бг_УпаковкаПаллета)
	|ГДЕ
	|	НЕ ДД.Отменено
	|	И ДД.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
	|	И ДД.бг_ПриходныйОрдерОбособленногоОбеспечения = ЗНАЧЕНИЕ(Документ.ПриходныйОрдерНаТовары.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДД.Ссылка,
	|	ДД.Номенклатура,
	|	ДД.бг_УпаковкаПаллета,
	|	ДД.ДатаОтгрузки,
	|	ДД.Количество
	|ИЗ
	|	ВтЗависимыеДокументы КАК ВтЗависимыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ДД
	|		ПО ВтЗависимыеДокументы.ЗависимыйДокумент = ДД.Ссылка
	|			И ВтЗависимыеДокументы.ЗаказПоставщику = ДД.бг_ЗаказПоставщикуИсточникОбеспечения
	|ГДЕ
	|	НЕ ДД.Отменено
	|	И ДД.бг_ПриходныйОрдерОбособленногоОбеспечения = &ПриходныйОрдер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыПриходногоОрдера.Номенклатура КАК Номенклатура,
	|	ВтТоварыПриходногоОрдера.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	ВтТоварыПриходногоОрдера.Количество КАК Количество
	|ИЗ
	|	ВтТоварыПриходногоОрдера КАК ВтТоварыПриходногоОрдера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТоварыИЗаказы.ЗаказКлиента КАК ЗаказКлиента,
	|	ВтТоварыИЗаказы.Номенклатура КАК Номенклатура,
	|	ВтТоварыИЗаказы.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	ВтТоварыИЗаказы.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВтТоварыИЗаказы.ЗаказКлиента.бг_ДолгосрочныйРезерв КАК ЭтоРезерв,
	|	СУММА(ВтТоварыИЗаказы.Количество) КАК Количество
	|ИЗ
	|	ВтОжидаемыеТовары КАК ВтТоварыИЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтТоварыИЗаказы.ЗаказКлиента,
	|	ВтТоварыИЗаказы.Номенклатура,
	|	ВтТоварыИЗаказы.бг_УпаковкаПаллета,
	|	ВтТоварыИЗаказы.ДатаОтгрузки,
	|	ВтТоварыИЗаказы.ЗаказКлиента.бг_ДолгосрочныйРезерв
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоРезерв,
	|	ДатаОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Проведен КАК Проведен,
	|	Реквизиты.Приобретение КАК Приобретение,
	|	Реквизиты.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Реквизиты.Статус КАК Статус
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЗависимыеДокументы.ЗависимыйДокумент КАК ЗависимыйДокумент,
	|	ВтЗависимыеДокументы.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВтЗависимыеДокументы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ВЫБОР
	|		КОГДА ВтЗаказыКВосстановлению.ЗаказКлиента ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ТребуетсяВосстановление
	|ИЗ
	|	ВтЗависимыеДокументы КАК ВтЗависимыеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаказыКВосстановлению КАК ВтЗаказыКВосстановлению
	|		ПО ВтЗависимыеДокументы.ЗависимыйДокумент = ВтЗаказыКВосстановлению.ЗаказКлиента";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Ссылка, Реквизиты)
	
	ИмяРегистра = "РаспределениеЗапасовДвижения";
	НаборЗаписей = РегистрыНакопления.РаспределениеЗапасовДвижения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Записывать = Истина;
	
	Если Реквизиты.Проведен Тогда
		
		ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(
			Ссылка, ИмяРегистра);
		ТаблицаДанных = ТаблицыДляДвижений["Таблица" + ИмяРегистра];
		
		НаборЗаписей.Загрузить(ТаблицаДанных);
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьТекстСообщениямиПользователю(ТекстСообщения) 
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Сообщение Из Сообщения Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + Сообщение.Текст;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

#КонецОбласти