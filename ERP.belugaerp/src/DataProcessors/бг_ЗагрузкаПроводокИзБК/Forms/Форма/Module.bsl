#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК Ссылка,
		|	ФизическиеЛица.бг_КодБК КАК КодБК,
		|	ФизическиеЛица.Пол КАК Пол,
		|	ФизическиеЛица.ФИО КАК ФИО,
		|	ФизическиеЛица.Фамилия КАК Фамилия,
		|	ФизическиеЛица.Имя КАК Имя,
		|	ФизическиеЛица.Отчество КАК Отчество,
		|	ФизическиеЛица.Инициалы КАК Инициалы
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.бг_КодБК <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ПеременнаяСоответствиеФизическихЛицКодамБК = Новый Соответствие;	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		КлючевыеПоляФизическогоЛица = Новый Структура(
			"Ссылка, Пол, ФИО, Фамилия, Имя, Отчество, Инициалы");
		ЗаполнитьЗначенияСвойств(КлючевыеПоляФизическогоЛица, ВыборкаДетальныеЗаписи);
		ПеременнаяСоответствиеФизическихЛицКодамБК.Вставить(ВыборкаДетальныеЗаписи.КодБК,
			КлючевыеПоляФизическогоЛица);
	КонецЦикла;
	
	СоответствиеФизическихЛицКодамБК = Новый ФиксированноеСоответствие(ПеременнаяСоответствиеФизическихЛицКодамБК);
	ПериодРегистрации = НачалоМесяца(ТекущаяДата());   
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант("ФизическоеЛицоПоУмолчанию, ПодразделениеПоУмолчанию");
	ФизическоеЛицоПоУмолчанию = ЗначенияКонстант.ФизическоеЛицоПоУмолчанию;
	ПодразделениеПоУмолчанию = ЗначенияКонстант.ПодразделениеПоУмолчанию;
	
	//В системе Босс-Кадровик у каждого справочника свой предопределенный код
	КодТаблицыСправочникаПодразделения = "11";
	КодТаблицыСправочникаФизическиеЛица = "12";
	КодТаблицыСправочникаСтатьиЗатрат = "15";
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредставлениеПериодаРасчетов = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузкаФизическихЛиц(Команда)
	
	Индекс = 0;
	КоличествоСтрок = ТаблицаАнализаФизическихЛиц.Количество();
	
	Для Каждого СтрокаФайлаФизическиеЛица Из ТаблицаАнализаФизическихЛиц Цикл
		
		ДанныеСтроки = Новый Структура("Фамилия, Имя, Отчество, ФИО, Пол, Инициалы, бг_КодБК");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаФайлаФизическиеЛица);
		
		Если СтрокаФайлаФизическиеЛица.РезультатСравнения = "Создать новое физическое лицо" Тогда
			
			СтрокаФайлаФизическиеЛица.ФизическоеЛицо = СоздатьИзменитьФизическоеЛицо(ДанныеСтроки);
			СтрокаФайлаФизическиеЛица.РезультатОбработки = "Создано физическое лицо";
			
			ПеременнаяСоответствиеФизическихЛицКодамБК = Новый Соответствие(СоответствиеФизическихЛицКодамБК);	
				
			КлючевыеПоляФизическогоЛица = Новый Структура(
				"Ссылка, Пол, ФИО, Фамилия, Имя, Отчество, Инициалы");
			ЗаполнитьЗначенияСвойств(КлючевыеПоляФизическогоЛица, СтрокаФайлаФизическиеЛица);
			КлючевыеПоляФизическогоЛица.Ссылка = СтрокаФайлаФизическиеЛица.ФизическоеЛицо;
			
			ПеременнаяСоответствиеФизическихЛицКодамБК.Вставить(СтрокаФайлаФизическиеЛица.бг_КодБК,
				КлючевыеПоляФизическогоЛица);
			
			СоответствиеФизическихЛицКодамБК = Новый ФиксированноеСоответствие(ПеременнаяСоответствиеФизическихЛицКодамБК);
			
		ИначеЕсли СтрокаФайлаФизическиеЛица.РезультатСравнения = "Изменить физическое лицо" Тогда
			
			СоздатьИзменитьФизическоеЛицо(ДанныеСтроки, СтрокаФайлаФизическиеЛица.ФизическоеЛицо);
			СтрокаФайлаФизическиеЛица.РезультатОбработки = "Изменено физическое лицо";
			
			ПеременнаяСоответствиеФизическихЛицКодамБК = Новый Соответствие(СоответствиеФизическихЛицКодамБК);	
				
			КлючевыеПоляФизическогоЛица = Новый Структура(
				"Ссылка, Пол, ФИО, Фамилия, Имя, Отчество, Инициалы");
			ЗаполнитьЗначенияСвойств(КлючевыеПоляФизическогоЛица, СтрокаФайлаФизическиеЛица);
			КлючевыеПоляФизическогоЛица.Ссылка = СтрокаФайлаФизическиеЛица.ФизическоеЛицо;
			
			ПеременнаяСоответствиеФизическихЛицКодамБК.Вставить(СтрокаФайлаФизическиеЛица.бг_КодБК,
				КлючевыеПоляФизическогоЛица);
			
			СоответствиеФизическихЛицКодамБК = Новый ФиксированноеСоответствие(ПеременнаяСоответствиеФизическихЛицКодамБК);
			
		КонецЕсли;
		
		ТекстТекущегоСостояния = НСтр(СтрШаблон("ru='Загружена строка файла : %1 из %2'", Индекс, КоличествоСтрок));
		Состояние(ТекстТекущегоСостояния, Индекс / КоличествоСтрок * 100);
		
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеПоЗарплате(Команда)
	
	ТекстОшибки = "";
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = НСтр("ru='Не указана организация!'") + Символы.ПС;
	КонецЕсли;	
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтражениеЗарплатыВФинансовомУчете)
		Или ЗначениеЗаполнено(НачислениеОценочныхОбязательствПоОтпускам) Тогда
		
		ОповещениеЗавершения = Новый ОписаниеОповещения("ЗагрузитьФайлЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеЗавершения, 
			НСтр(СтрШаблон("ru='Перезаполнить документ отражения заработной платы %1 и %2?'", 
				ОтражениеЗарплатыВФинансовомУчете,
				НачислениеОценочныхОбязательствПоОтпускам)),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		
		ЗагрузитьФайлЗавершение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайл(Команда)
	
	ВыполненныйТекущийШаг = 0;
	Для Индекс = 1 По 30 Цикл
		Элементы["ТаблицаФайлаКолонка" + Индекс].Видимость = Ложь;
		Элементы["ТаблицаФайла1Колонка" + Индекс].Видимость = Ложь;
	КонецЦикла;
	
	ДанныеФайла = ДанныеФайла(ФайлТХТ);
	Если ДанныеФайла = Ложь Тогда
		ПоказатьПредупреждение(, "Не удалось прочитать файл");
		Возврат;
	КонецЕсли;
	
	ВыполненныйТекущийШаг = 0;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознатьСубконто(Команда)
	
	ТаблицаЗначенийСубконто.Очистить();
	РаспознатьСубконтоНаСервере();
	
	ВыполненныйТекущийШаг = 1;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьТаблицуПроводок(Команда)
	
	СоответствиеСубконто = Новый Соответствие;
	Для Каждого СтрокаТЧ Из ТаблицаЗначенийСубконто Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ЗначениеСубконто) Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеСубконто.Вставить(СтрокаТЧ.КлючСубконто, СтрокаТЧ.ЗначениеСубконто);
	КонецЦикла;
	
	ТаблицаПроводки.Очистить();
	Для Каждого СтрокаТЧ Из ТаблицаФайла Цикл
		
		Проводка = ТаблицаПроводки.Добавить();
		Проводка.СчетДт = СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Dt")];
		Проводка.СчетКт = СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Kt")];
		
		КоличествоЗаполненныхСубконтоДт = 0;
		Для Индекс = 1 По 3 Цикл
			
			КлючСубконто = СтрокаТЧ["Колонка" + 
				СоответствиеКолонокТекущегоФайла.Получить(СтрШаблон("sub%1_Dt_kod", Индекс))];
			Если ЗначениеЗаполнено(КлючСубконто) Тогда
				КоличествоЗаполненныхСубконтоДт = Индекс;
				Проводка["ЗначениеСубконтоДт" + Индекс] = СтрокаТЧ["Колонка" + 
					СоответствиеКолонокТекущегоФайла.Получить(СтрШаблон("sub%1_Dt_name", Индекс))];
				ЗначениеСубконто = СоответствиеСубконто.Получить(КлючСубконто);
				Проводка["НеРаспознаноЗначениеСубконтоДт" + Индекс] = Не ЗначениеЗаполнено(ЗначениеСубконто);
				
				Если Лев(КлючСубконто, 2) = "03" Тогда
					Проводка["НеРаспознаноЗначениеСубконтоДт" + Индекс] = Ложь;
				КонецЕсли;
				
				Если Проводка["НеРаспознаноЗначениеСубконтоДт" + Индекс] Тогда
					Проводка.ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		КоличествоЗаполненныхСубконтоКт = 0;
		Для Индекс = 1 По 3 Цикл
			
			КлючСубконто = СтрокаТЧ["Колонка" + 
				СоответствиеКолонокТекущегоФайла.Получить(СтрШаблон("sub%1_Kt_kod", Индекс))];
			Если ЗначениеЗаполнено(КлючСубконто) Тогда
				КоличествоЗаполненныхСубконтоКт = Индекс;
				Проводка["ЗначениеСубконтоКт" + Индекс] = СтрокаТЧ["Колонка" + 
					СоответствиеКолонокТекущегоФайла.Получить(СтрШаблон("sub%1_Kt_name", Индекс))];
				ЗначениеСубконто = СоответствиеСубконто.Получить(КлючСубконто);
				Проводка["НеРаспознаноЗначениеСубконтоКт" + Индекс] = Не ЗначениеЗаполнено(ЗначениеСубконто);
				
				Если Лев(КлючСубконто, 2) = "03" Тогда
					Проводка["НеРаспознаноЗначениеСубконтоКт" + Индекс] = Ложь;
				КонецЕсли;
				
				Если Проводка["НеРаспознаноЗначениеСубконтоКт" + Индекс] Тогда
					Проводка.ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Проводка.КоличествоЗаполненныхСубконтоДт = КоличествоЗаполненныхСубконтоДт;
		Проводка.КоличествоЗаполненныхСубконтоКт = КоличествоЗаполненныхСубконтоКт;
		Попытка
			Проводка.СуммаПроводки = Число(СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]);
		Исключение
			Проводка.НеСопоставленыСчета = Истина;
			ПоказатьПредупреждение(, "В колонке сумма указано значение = " 
				+ СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]);
			Продолжить;
		КонецПопытки;
		
		СчетДт = Проводка.СчетДт;
		СчетКт = Проводка.СчетКт;
		
		//Загрузка проводки "Дт 20, 23, 25, 26, 44 Кт 70"
		Если (Лев(СчетДт, 2) = "20"
			Или Лев(СчетДт, 2) = "23"
			Или Лев(СчетДт, 2) = "25"
			Или Лев(СчетДт, 2) = "26"
			Или Лев(СчетДт, 2) = "44")
			И Лев(СчетКт, 2) = "70" Тогда
			
			ЗагрузкаПроводки_НачислениеЗарплаты(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 20, 23, 25, 26, 44 Кт 69.*"
		ИначеЕсли (Лев(СчетДт, 2) = "20"
			Или Лев(СчетДт, 2) = "23"
			Или Лев(СчетДт, 2) = "25"
			Или Лев(СчетДт, 2) = "26"
			Или Лев(СчетДт, 2) = "44")
			И Лев(СчетКт, 2) = "69" Тогда
			
			ЗагрузкаПроводки_НачислениеСтраховыхВзносов(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 20, 23, 25, 26, 44 Кт 96.*"
		ИначеЕсли (Лев(СчетДт, 2) = "20"
			Или Лев(СчетДт, 2) = "23"
			Или Лев(СчетДт, 2) = "25"
			Или Лев(СчетДт, 2) = "26"
			Или Лев(СчетДт, 2) = "44")
			И Лев(СчетКт, 2) = "96" Тогда
			
			ЗагрузкаПроводки_НачислениеРезерваОтпуска(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 96.* Кт 70"
		ИначеЕсли Лев(СчетДт, 2) = "96"
			И Лев(СчетКт, 2) = "70" Тогда
			
			ЗагрузкаПроводки_ИспользованиеОтпускаЗаСчетРезерва(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 96.* Кт 69.*"
		ИначеЕсли Лев(СчетДт, 2) = "96"
			И Лев(СчетКт, 2) = "69" Тогда
			
			ЗагрузкаПроводки_ИспользованиеСтраховыхВзносовЗаСчетРезерва(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 70 Кт 68.01"
		ИначеЕсли Лев(СчетДт, 2) = "70"
			И Лев(СчетКт, 5) = "68.01" Тогда
			
			ЗагрузкаПроводки_НачислениеНДФЛ(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 70 Кт 76.41"
		ИначеЕсли Лев(СчетДт, 2) = "70"
			И (Лев(СчетКт, 5) = "76.41" 
				Или Лев(СчетКт, 2) = "71"
				Или Лев(СчетКт, 2) = "73" 
				Или Лев(СчетКт, 5) = "76.05"
				Или Лев(СчетКт, 5) = "76.01") Тогда
			
			ЗагрузкаПроводки_Удержание(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 69.01 Кт *"
		ИначеЕсли Лев(СчетДт, 5) = "69.01"
			Или Лев(СчетДт, 5) = "69.09" Тогда
			
			ЗагрузкаПроводки_НачислениеЗаСчетФСС(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 60.01 Кт 68.01.1"
		ИначеЕсли Лев(СчетДт, 5) = "60.01"
			И Лев(СчетКт, 7) = "68.01.1" Тогда
			
			ЗагрузкаПроводки_НачислениеНДФЛКонтрагента(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 60.01 Кт 68"
		ИначеЕсли Лев(СчетДт, 2) = "60"
			И Лев(СчетКт, 2) = "68" Тогда
			
			ЗагрузкаПроводки_НачислениеНДФЛСДоговораГПХ(СтрокаТЧ, СоответствиеСубконто, Проводка); 
			
		//Загрузка проводки "Дт 20, 26, 44.01.1 Кт 68.01.1"
		ИначеЕсли Лев(СчетДт, 2) = "20"
			Или Лев(СчетДт, 2) = "26"
			Или Лев(СчетДт, 7) = "44.01.1"
			И Лев(СчетКт, 5) = "60.01" Тогда
			
			ЗагрузкаПроводки_НачислениеЗарплатыКонтрагенту(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 20, 23, 25, 26, 44 Кт 60"
		ИначеЕсли (Лев(СчетДт, 2) = "20"
			Или Лев(СчетДт, 2) = "23"
			Или Лев(СчетДт, 2) = "25"
			Или Лев(СчетДт, 2) = "26"
			Или Лев(СчетДт, 2) = "44")
			И Лев(СчетКт, 2) = "60" Тогда
			
			ЗагрузкаПроводки_НачислениеПоДоговорамГПХ(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 20, 23, 25, 26, 44 Кт 76.05"
		ИначеЕсли (Лев(СчетДт, 2) = "20"
				Или Лев(СчетДт, 2) = "23"
				Или Лев(СчетДт, 2) = "25"
				Или Лев(СчетДт, 2) = "26"
				Или Лев(СчетДт, 2) = "44")
			И Лев(СчетКт, 5) = "76.05" Тогда   
			
			ЗагрузкаПроводки_НачислениеЗарплатыКонтрагенту(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		//Загрузка проводки "Дт 76.05 Кт68.01"
		ИначеЕсли Лев(СчетДт, 5) = "76.05"
			И Лев(СчетКт, 5) = "68.01" Тогда
			
			ЗагрузкаПроводки_НачислениеНДФЛКонтрагента(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		ИначеЕсли Лев(СчетДт, 5) = "91.02" Тогда
			
			ЗагрузкаПроводки_НачислениеПрочиеРасходы(СтрокаТЧ, СоответствиеСубконто, Проводка);
			
		Иначе
			
			Проводка.НеСопоставленыСчета = Истина;
						
		КонецЕсли;
		
		Если Проводка.НеСопоставленыСчета Тогда
			Проводка.ЕстьОшибки = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	ВыполненныйТекущийШаг = 2;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознатьИСравнитьФизическиеЛица(Команда)
	
	ТаблицаАнализаФизическихЛиц.Очистить();
	
	Индекс = 0;
	КоличествоСтрок = ТаблицаФайла.Количество();
	
	Для Каждого СтрокаФайлаФизическиеЛица Из ТаблицаФайла Цикл
		
		КодБК =  СокрЛП(СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("KodBK")]);
		Индекс = Индекс + 1;
		
		РасшифровкаПолей = РасшифроватьСтрокуФизическогоЛица(СтрокаФайлаФизическиеЛица);
		
		НоваяСтрока = ТаблицаАнализаФизическихЛиц.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РасшифровкаПолей);
		
		Если НеобходимоСоздатьИзменитьФизическоеЛицо(КодБК, РасшифровкаПолей) Тогда
			
			ТекущиеДанныеФизическогоЛица = СоответствиеФизическихЛицКодамБК.Получить(КодБК);

			Если ЗначениеЗаполнено(ТекущиеДанныеФизическогоЛица) Тогда
				НайденноеФизЛицо = ТекущиеДанныеФизическогоЛица.Ссылка;								
			Иначе
				НайденноеФизЛицо = ФизическоеЛицоПоФИО(РасшифровкаПолей.ФИО);				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НайденноеФизЛицо) Тогда
				НоваяСтрока.РезультатСравнения = "Создать новое физическое лицо";
			Иначе
				НоваяСтрока.РезультатСравнения = "Изменить физическое лицо";
				НоваяСтрока.ФизическоеЛицо = НайденноеФизЛицо;
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.РезультатСравнения = "Не изменять физическое лицо";
			
		КонецЕсли;
		
		ТекстТекущегоСостояния = НСтр(СтрШаблон("ru='Проанализирована строка файла : %1 из %2'", Индекс, КоличествоСтрок));
		Состояние(ТекстТекущегоСостояния, Индекс / КоличествоСтрок * 100);
		
	КонецЦикла;		
	
	ТекущийШагФизическиеЛица = 1;
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Функция ФизическоеЛицоПоФИО(ФИО)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(ВЫРАЗИТЬ(ФизическиеЛица.бг_КодБК КАК СТРОКА(25))) = """"
	|	И НЕ ФизическиеЛица.ПометкаУдаления
	|	И НЕ ФизическиеЛица.ЭтоГруппа
	|	И СОКРЛП(ФизическиеЛица.ФИО) = &ФИО";
	
	Запрос.УстановитьПараметр("ФИО", СокрЛП(ФИО));
    Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ФизическоеЛицо
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКШагу1ЗагрузкаФизическихЛиц(Команда)
	
	ТекущийШагФизическиеЛица = 0;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагу1ЗагрузкаПроводок(Команда)
	
	ВыполненныйТекущийШаг = 0;
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКШагу2ЗагрузкаПроводок(Команда)
	
	ВыполненныйТекущийШаг = 1;
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МесяцНачисленияПриИзменении(Элемент)
	
	ПериодРегистрации = НачалоМесяца(МесяцНачисления.ДатаНачала);
	МесяцНачисления.ДатаНачала = ПериодРегистрации;
	МесяцНачисления.ДатаОкончания = КонецМесяца(ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлТХТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= ложь;
	Диалог					= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок		= "Выберите файл с проводками из БК";
	Диалог.Фильтр			= "Табличный документ (*.csv)|*.csv|Текстовый документ (*.txt)|*.txt";			
	
	Диалог.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка,
		ПериодРегистрации, ПредставлениеПериодаРасчетов);
	ПериодРегистрации = НачалоМесяца(ПериодРегистрации);
КонецПроцедуры

&НаКлиенте
Процедура ПериодРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПериодРасчетовНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Значение, РежимВыбораПериода", ПериодРегистрации, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор, , ,
		ОбработчикЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСубконто1ЗначениеСубконтоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаЗначенийСубконто.ТекущиеДанные;
	
	ТипМетаданных = ТипМетаданныхСтрокой(ТекущиеДанные.ЗначениеСубконто);
	Если ТипМетаданных = "Справочник" Тогда
		ОткрытьФорму("Справочник." + ТекущиеДанные.ТипЗначенияСубконто + ".ФормаВыбора",,Элемент);
	ИначеЕсли ТипМетаданных = "Документ" Тогда
		ОткрытьФорму("Документ." + ТекущиеДанные.ТипЗначенияСубконто + ".ФормаВыбора",,Элемент);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперации1ПриИзменении(Элемент)
	
	ФайлТХТ = "";
	ВыполненныйТекущийШаг = 0;
	ТекущийШагФизическиеЛица = 0;
	
	ТаблицаАнализаФизическихЛиц.Очистить();
	ТаблицаФайла.Очистить();
	ТаблицаЗначенийСубконто.Очистить();
	ТаблицаПроводки.Очистить();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВзносыПодробноПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПриНачисленииРезерваНУРавноБУ1ПриИзменении(Элемент)
	
	Для Каждого СтрокаТЧ Из ТаблицаПроводки Цикл
		
		Если ПриНачисленииРезерваНУРавноБУ Тогда
			СтрокаТЧ.СуммаРезерваНУ = СтрокаТЧ.СуммаРезерва; 
			СтрокаТЧ.СуммаРезерваСтраховыхВзносовНУ = СтрокаТЧ.СуммаРезерваСтраховыхВзносов; 
			СтрокаТЧ.СуммаРезерваФССНесчастныеСлучаиНУ = СтрокаТЧ.СуммаРезерваФССНесчастныеСлучаи; 
		Иначе
			СтрокаТЧ.СуммаРезерваНУ = 0;
			СтрокаТЧ.СуммаРезерваСтраховыхВзносовНУ = 0; 
			СтрокаТЧ.СуммаРезерваФССНесчастныеСлучаиНУ = 0; 
		КонецЕсли;
		
		Если СтрокаТЧ.ВидОперации = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы")
			Или СтрокаТЧ.ВидОперации = ПредопределенноеЗначение(
				"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства") Тогда
			
			Если ПриНачисленииРезерваНУРавноБУ Тогда
				СтрокаТЧ.ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы"); 
			Иначе
				СтрокаТЧ.ВидОперации = ПредопределенноеЗначение(
					"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства"); 
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;			
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПроводки1ПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФильтрФизическихЛицПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	Если ФильтрФизическихЛиц = 1 Тогда
		ОтборСтрок.Вставить("РезультатСравнения", "Создать новое физическое лицо");
	ИначеЕсли ФильтрФизическихЛиц = 2 Тогда
		ОтборСтрок.Вставить("РезультатСравнения", "Изменить физическое лицо");
	ИначеЕсли ФильтрФизическихЛиц = 3 Тогда
		ОтборСтрок.Вставить("РезультатСравнения", "Не изменять физическое лицо");
	КонецЕсли;
	Элементы.ТаблицаАнализаФизическихЛиц.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоПроводкиСОшибкамиПриИзменении(Элемент)
	
	ОтборСтрок = Новый Структура;
	Если ТолькоПроводкиСОшибками Тогда
		ОтборСтрок.Вставить("ЕстьОшибки", Истина);
	КонецЕсли;
	Элементы.ТаблицаПроводки1.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИфункции

#Область ОбщиеПроцедурыФункции_ЧтениеФайла

&НаКлиенте
Функция ДанныеФайла(ИмяФайла)
	
	// Проверка на наличие имени файла
	Если ПустаяСтрока(ИмяФайла) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Файл не найден'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Открыть файл, создать текстовый документ, прочитать
	ПотокСтрок = ПолучитьПотокЧтенияСтрок(ИмяФайла);
	Если ПотокСтрок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;		  
	
	ТаблицаФайла.Очистить();
	
	// Чтение строки из файла тхт / csv
	СтрокаИзФайла = ПотокСтрок.ПолучитьСтроку(1);
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИзФайла,";");
	
	СоответствиеКолонок = Новый Соответствие;
	Для ИндексКолонки = 1 По МассивКолонок.Количество() Цикл 
		Элементы["ТаблицаФайлаКолонка" + ИндексКолонки].Заголовок = МассивКолонок[ИндексКолонки - 1];
		Элементы["ТаблицаФайлаКолонка" + ИндексКолонки].Видимость = Истина;
		Элементы["ТаблицаФайла1Колонка" + ИндексКолонки].Заголовок = МассивКолонок[ИндексКолонки - 1];
		Элементы["ТаблицаФайла1Колонка" + ИндексКолонки].Видимость = Истина;
		СоответствиеКолонок.Вставить(МассивКолонок[ИндексКолонки - 1], ИндексКолонки);
	КонецЦикла;
	
	СоответствиеКолонокТекущегоФайла = Новый ФиксированноеСоответствие(СоответствиеКолонок);
	
	// Последовательное чтение строк текстового файла
	КоличествоСтрок = ПотокСтрок.КоличествоСтрок();
	Для Индекс = 2 По КоличествоСтрок Цикл
		
		// Обработка нажатия Ctrl + Break
		ОбработкаПрерыванияПользователя();
		
		СтрокаИзФайла = ПотокСтрок.ПолучитьСтроку(Индекс);
		МассивДанныхТекущейСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаИзФайла,";");
		
		ТекущаяСтрокаДанных = ТаблицаФайла.Добавить();
		Для ИндексКолонки = 1 По МассивКолонок.Количество() Цикл 
			ТекущаяСтрокаДанных["Колонка" + ИндексКолонки] = МассивДанныхТекущейСтроки[ИндексКолонки - 1];	  
		КонецЦикла;
		
		ТекстТекущегоСостояния = НСтр(СтрШаблон("ru='Обработка строки файла : %1 из %2'", Индекс, КоличествоСтрок));
		Состояние(ТекстТекущегоСостояния, Индекс / КоличествоСтрок * 100);
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПолучитьПотокЧтенияСтрок(ИмяФайла)
	
	Попытка

		ТекстовыйФайл = Новый Файл(ИмяФайла);
		Если ТекстовыйФайл.Существует() = Ложь Тогда
			ПоказатьПредупреждение(, НСтр(СтрШаблон("ru='Файл %1 не существует'", ИмяФайла)));
			Возврат Неопределено;
		КонецЕсли;
		
		ПотокЧтенияСтрок = Новый ТекстовыйДокумент();
		ПотокЧтенияСтрок.Прочитать(ИмяФайла);
		
	Исключение
		
		ПоказатьПредупреждение(, НСтр(СтрШаблон("ru='Файл %1 не прочитан'", ИмяФайла))); 
		Возврат Неопределено;
		
	КонецПопытки;
	
	// Возвращает текст, извлеченный из файла
	Возврат ПотокЧтенияСтрок;

КонецФункции 

&НаКлиенте
Процедура ВыборФайлаЗавершение(РезультатВыбора, Параметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		ФайлТХТ = "";
		Возврат;
	КонецЕсли;
	
	ФайлТХТ = РезультатВыбора[0];
	
	Если ЗначениеЗаполнено(ФайлТХТ) Тогда
		ПрочитатьФайл(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайлЗавершение(РезультатВыбора, Параметры) Экспорт
	
	Если Не РезультатВыбора = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДокумент();
	ОповеститьОбИзменении(ОтражениеЗарплатыВФинансовомУчете);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыФункции_ЗагрузкаФизическихЛиц

&НаКлиенте
Функция РасшифроватьСтрокуФизическогоЛица(СтрокаФайлаФизическиеЛица)
	
	КлючевыеПоляФизическогоЛица = Новый Структура(
		"Пол, ФИО, Фамилия, Имя, Отчество, Инициалы, бг_КодБК");
	
	Если СокрЛП(СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Sex")]) = "М" Тогда
		КлючевыеПоляФизическогоЛица.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
	Иначе
		КлючевыеПоляФизическогоЛица.Пол = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Женский");
	КонецЕсли;	
	
	КлючевыеПоляФизическогоЛица.ФИО = СтрШаблон("%1 %2 %3", 
										СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name")],
										СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name_i")],
										СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name_o")]);
										
	КлючевыеПоляФизическогоЛица.Фамилия = СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name")];
	КлючевыеПоляФизическогоЛица.Имя = СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name_i")];
	КлючевыеПоляФизическогоЛица.Отчество = СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name_o")];
	КлючевыеПоляФизическогоЛица.Инициалы = СтрШаблон("%1. %2.", 
										Лев(ВРег(СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name_i")]),1),
										Лев(ВРег(СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Name_o")]),1));
	КлючевыеПоляФизическогоЛица.бг_КодБК = СокрЛП(СтрокаФайлаФизическиеЛица["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("KodBK")]);
	
	Возврат КлючевыеПоляФизическогоЛица;
	
КонецФункции

&НаКлиенте
Функция НеобходимоСоздатьИзменитьФизическоеЛицо(КодБК, РасшифровкаПолей)
	
	ТекущиеДанныеФизическогоЛица = СоответствиеФизическихЛицКодамБК.Получить(КодБК);
	Если ТекущиеДанныеФизическогоЛица = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	КлючевыеПоляФизическогоЛица = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
		"Пол,ФИО,Фамилия,Имя,Отчество,Инициалы", ",");
	
	ЕстьОтличия = Ложь;
	Для Каждого ИмяПоля Из КлючевыеПоляФизическогоЛица Цикл
		Если Не ТекущиеДанныеФизическогоЛица[ИмяПоля] = РасшифровкаПолей[ИмяПоля] Тогда
			ЕстьОтличия = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОтличия;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьИзменитьФизическоеЛицо(РасшифровкаПолей, СсылкаНаФизическоеЛицо = Неопределено)
	
	Если Не СсылкаНаФизическоеЛицо = Неопределено Тогда
		
		ФизическоеЛицоОбъект = СсылкаНаФизическоеЛицо.ПолучитьОбъект();
		ЗаписатьФИОВРегистр(ФизическоеЛицоОбъект, Ложь);
		ЗаписатьФизическоеЛицо(ФизическоеЛицоОбъект, РасшифровкаПолей);
		
	Иначе
		
		ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		ЗаписатьФизическоеЛицо(ФизическоеЛицоОбъект, РасшифровкаПолей);
		ЗаписатьФИОВРегистр(ФизическоеЛицоОбъект, Истина);
		
	КонецЕсли;
	
	Возврат ФизическоеЛицоОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьФИОВРегистр(ФизическоеЛицоОбъект, ЭтоНовый)
	
	МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ФизическоеЛицоОбъект, "Фамилия, Имя, Отчество, Инициалы");
	МенеджерЗаписи.ФИОСлужебные = ФизическоеЛицоОбъект.ФИО;
	
	Если ЭтоНовый Тогда
		МенеджерЗаписи.Период = Дата(1980, 1, 1);
	Иначе
		МенеджерЗаписи.Период = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьФизическоеЛицо(ФизическоеЛицоОбъект, РасшифровкаПолей)
	
	ФизическоеЛицоОбъект.Наименование = РасшифровкаПолей.ФИО;
	ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект, РасшифровкаПолей);
	
	ФизическоеЛицоОбъект.НаименованиеСлужебное = ФизическоеЛицоОбъект.Наименование;
	ФизическоеЛицоОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыФункции_ТаблицаКонстант

&НаСервере
Функция ЗагрузитьТаблицуИзМакетаТипыДанных(МакетСоставаПоказателей, ИмяОбласти) 
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Kod", ОбщегоНазначения.ОписаниеТипаСтрока(2));
	ТаблицаДанных.Колонки.Добавить("name", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДанных.Колонки.Добавить("name1C", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДанных.Колонки.Добавить("Type1C", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДанных.Колонки.Добавить("ПолеПоиска", ОбщегоНазначения.ОписаниеТипаСтрока(25));
	ТаблицаДанных.Колонки.Добавить("ОтборПоВладельцу", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Область.Имя = ИмяОбласти Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			
			Для Индекс = ВерхОбласти По НизОбласти Цикл
				НовСтрока = ТаблицаДанных.Добавить();
				НовСтрока.Kod 			= СокрЛП(МакетСоставаПоказателей.Область(Индекс, 1).Текст);
				НовСтрока.name 			= СокрЛП(МакетСоставаПоказателей.Область(Индекс, 2).Текст);
				НовСтрока.name1C 		= СокрЛП(МакетСоставаПоказателей.Область(Индекс, 3).Текст);
				НовСтрока.Type1C 		= СокрЛП(МакетСоставаПоказателей.Область(Индекс, 4).Текст);
				НовСтрока.ПолеПоиска 	= СокрЛП(МакетСоставаПоказателей.Область(Индекс, 5).Текст);
				НовСтрока.ОтборПоВладельцу = ?(СокрЛП(МакетСоставаПоказателей.Область(Индекс, 6).Текст) = "Да", Истина, Ложь);
			КонецЦикла;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
    Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицуИзМакетаЗаменяемыеСтатьиЗатрат(МакетСоставаПоказателей, ИмяОбласти) 
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Тикет", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаДанных.Колонки.Добавить("ЧтоЗаменяем", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаДанных.Колонки.Добавить("НаЧтоЗаменяем", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Область.Имя = ИмяОбласти Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
					НовСтрока = ТаблицаДанных.Добавить();
					НовСтрока.Тикет = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
					НовСтрока.ЧтоЗаменяем = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.НаЧтоЗаменяем = СокрЛП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
    Возврат ТаблицаДанных;
	
КонецФункции

&НаСервере
Процедура ДобавитьВСоответствиеДляПоиска(СоответствияИскомыхДанных, ИскомоеЗначение, ИсключенияСтатейЗатрат, Тикет, ИскомоеЗначениеПредставление)
	
	Если Не ЗначениеЗаполнено(ИскомоеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СоставИскомогоЗначения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИскомоеЗначение, "^");
	
	Если СоставИскомогоЗначения.Количество() = 1 Тогда
		//Частная ситуация
		КодФизическогоЛица = СоставИскомогоЗначения[0];
		СоставИскомогоЗначения = Новый Массив(3);
		СоставИскомогоЗначения[0] = КодТаблицыСправочникаФизическиеЛица;
		СоставИскомогоЗначения[2] = КодФизическогоЛица;
	КонецЕсли;
	
	Если СоставИскомогоЗначения.Количество() <> 3 Тогда 
		//Значение субконто передается по маске Kod^ТикетЮЛ^ПолеПоиска
		Возврат;
	КонецЕсли;
	
	СоответствиеИскомыхДанных = СоответствияИскомыхДанных.Получить(СоставИскомогоЗначения[0]);
	Если СоответствиеИскомыхДанных = Неопределено Тогда
		СоответствиеИскомыхДанных = Новый Соответствие;
	КонецЕсли;
	
	Если СоставИскомогоЗначения[0] = КодТаблицыСправочникаСтатьиЗатрат Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Тикет", Тикет);
		Отбор.Вставить("ЧтоЗаменяем", СоставИскомогоЗначения[2]); 
		
		СтрокиЗамен = ИсключенияСтатейЗатрат.НайтиСтроки(Отбор);
		
		Если СтрокиЗамен.Количество() = 0 Тогда
			ПолеПоиска = СоставИскомогоЗначения[2];
		Иначе
			ПолеПоиска = СтрокиЗамен[0].НаЧтоЗаменяем;
		КонецЕсли;
		
	Иначе
		
		ПолеПоиска = СоставИскомогоЗначения[2];
		
	КонецЕсли;

	Если СоответствиеИскомыхДанных.Получить(ИскомоеЗначение) = Неопределено Тогда
		
		ПредставлениеПоиска = Новый Структура("ПолеПоиска, Представление", 
			ПолеПоиска, ИскомоеЗначениеПредставление);
		СоответствиеИскомыхДанных.Вставить(ИскомоеЗначение, ПредставлениеПоиска);
	КонецЕсли;
	
	СоответствияИскомыхДанных.Вставить(СоставИскомогоЗначения[0], СоответствиеИскомыхДанных);
	
КонецПроцедуры

&НаСервере
Процедура РаспознатьСубконтоНаСервере()
	
	Тикет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	МакетПоказателей = ОбработкаОбъект.ПолучитьМакет("МакетТипыДанных");
  	ТипыДанных =  ЗагрузитьТаблицуИзМакетаТипыДанных(МакетПоказателей,"ТипыДанных");
	
	МакетПоказателей = ОбработкаОбъект.ПолучитьМакет("МакетЗаменяемыеСтатьиЗатрат");
	ИсключенияСтатейЗатрат = ЗагрузитьТаблицуИзМакетаЗаменяемыеСтатьиЗатрат(МакетПоказателей,"ЗаменяемыеСтатьиЗатрат");	
	
	СоответствияИскомыхДанных = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из ТаблицаФайла Цикл
		ДобавитьВСоответствиеДляПоиска(СоответствияИскомыхДанных, 
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub1_Dt_kod")], 
			ИсключенияСтатейЗатрат, 
			Тикет,
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub1_Dt_name")]);	
		ДобавитьВСоответствиеДляПоиска(СоответствияИскомыхДанных, 
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub2_Dt_kod")], 
			ИсключенияСтатейЗатрат, 
			Тикет,
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub2_Dt_name")]);	
		ДобавитьВСоответствиеДляПоиска(СоответствияИскомыхДанных, 
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub3_Dt_kod")], 
			ИсключенияСтатейЗатрат, 
			Тикет,
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub3_Dt_name")]);	
		ДобавитьВСоответствиеДляПоиска(СоответствияИскомыхДанных, 
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub1_Kt_kod")], 
			ИсключенияСтатейЗатрат, 
			Тикет,
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub1_Kt_name")]);	
		ДобавитьВСоответствиеДляПоиска(СоответствияИскомыхДанных, 
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub2_Kt_kod")], 
			ИсключенияСтатейЗатрат, 
			Тикет,
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub2_Kt_name")]);	
		ДобавитьВСоответствиеДляПоиска(СоответствияИскомыхДанных, 
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub3_Kt_kod")], 
			ИсключенияСтатейЗатрат, 
			Тикет,
			СтрокаТЧ["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub3_Kt_name")]);	
	КонецЦикла;
	
	Для Каждого КлючЗначение Из СоответствияИскомыхДанных Цикл
		
		СтрокиНастройки = ТипыДанных.НайтиСтроки(Новый Структура("Kod", КлючЗначение.Ключ));
		
		Для Каждого СтрокаНастройки Из СтрокиНастройки Цикл
			Если СтрокаНастройки.Type1C = "Справочник" Тогда
				ЗаполнитьЗначенияСубконтоСправочник(СтрокаНастройки, КлючЗначение);
			ИначеЕсли СтрокаНастройки.Type1C = "Документ" Тогда
				ЗаполнитьЗначенияСубконтоДокумент(СтрокаНастройки, КлючЗначение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗагрузитьДокумент()
	
	Тикет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс");
	МесяцУчета = Формат((Год(ПериодРегистрации) * 12 + Месяц(ПериодРегистрации)), "ЧЦ=15; ЧГ=0");
	
	НачатьТранзакцию();
	Если Не ЗначениеЗаполнено(ОтражениеЗарплатыВФинансовомУчете) Тогда
		
		ДокументОтраженияЗарплаты = Документы.ОтражениеЗарплатыВФинансовомУчете.СоздатьДокумент();
		ДокументОтраженияЗарплаты.Дата = КонецМесяца(ПериодРегистрации);
		ДокументОтраженияЗарплаты.Организация = Организация;
		ДокументОтраженияЗарплаты.ПериодРегистрации = ПериодРегистрации;
		ДокументОтраженияЗарплаты.Комментарий = НСтр("ru='Отражение в учете за '") + Формат(ПериодРегистрации, "ДФ='MMMM yyyy ''г.'''");
		ДокументОтраженияЗарплаты.Сводно = Истина;
		ДокументОтраженияЗарплаты.Ответственный = Пользователи.ТекущийПользователь();
		
		ВладелецНастройки = ДокументОтраженияЗарплаты.ПолучитьСсылкуНового();
		
	Иначе
		
		ДокументОтраженияЗарплаты = ОтражениеЗарплатыВФинансовомУчете.ПолучитьОбъект();
		Если ДокументОтраженияЗарплаты.Проведен Тогда
			ДокументОтраженияЗарплаты.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		ВладелецНастройки = ОтражениеЗарплатыВФинансовомУчете;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачислениеОценочныхОбязательствПоОтпускам) Тогда
		
		ДокументНачисленияРезерва = Документы.НачислениеОценочныхОбязательствПоОтпускам.СоздатьДокумент();
		ДокументНачисленияРезерва.Дата = КонецМесяца(ПериодРегистрации);
		ДокументНачисленияРезерва.Организация = Организация;
		ДокументНачисленияРезерва.ПериодРегистрации = ПериодРегистрации;
		ДокументНачисленияРезерва.Комментарий = НСтр("ru='Отражение в учете за '") + Формат(ПериодРегистрации, "ДФ='MMMM yyyy ''г.'''");
		ДокументНачисленияРезерва.Ответственный = Пользователи.ТекущийПользователь();
		
	Иначе
		
		ДокументНачисленияРезерва = НачислениеОценочныхОбязательствПоОтпускам.ПолучитьОбъект();
		Если ДокументНачисленияРезерва.Проведен Тогда
			ДокументНачисленияРезерва.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОтраженияЗарплаты.НачисленнаяЗарплатаИВзносы.Очистить();	
	ДокументОтраженияЗарплаты.НачисленныйНДФЛ.Очистить();	
	ДокументОтраженияЗарплаты.УдержаннаяЗарплата.Очистить();	
	
	ДокументНачисленияРезерва.ОценочныеОбязательства.Очистить();
	
	ТаблицаУдержаннаяЗарплата = ДокументОтраженияЗарплаты.УдержаннаяЗарплата.Выгрузить(,
		"ПодразделениеПредприятия, Контрагент, ВидОперации, ФизическоеЛицо, Сумма, НастройкаСчетовУчета, СтатьяАктивовПассивов"); 
	ТаблицаУдержаннаяЗарплата.Очистить();
	ТаблицаУдержаннаяЗарплата.Колонки.Добавить("СчетКт", 
		ОбщегоНазначения.ОписаниеТипаСтрока(10));
	ТаблицаУдержаннаяЗарплата.Колонки.Добавить("ДоговорКонтрагента", 
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаУдержаннаяЗарплата.Колонки.Добавить("бг_ИсполнительныйЛист", 
		Новый ОписаниеТипов("ДокументСсылка.ИсполнительныйЛист"));
		
	Для Каждого Проводка из ТаблицаПроводки Цикл
		
		Если Проводка.НеСопоставленыСчета Тогда
			Продолжить;
		КонецЕсли;
		
		Если Проводка.ЭтоРезервОтпуска Тогда
			НоваяСтрока = ДокументНачисленияРезерва.ОценочныеОбязательства.Добавить();
		ИначеЕсли Проводка.ИмяТабличнойЧасти = "УдержаннаяЗарплата" Тогда
			НоваяСтрока = ТаблицаУдержаннаяЗарплата.Добавить();
		Иначе
			НоваяСтрока = ДокументОтраженияЗарплаты[Проводка.ИмяТабличнойЧасти].Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Проводка);
			
	КонецЦикла;
	
	//Свернем табличные части
	ДокументОтраженияЗарплаты.НачисленнаяЗарплатаИВзносы.Свернуть(
		"ПодразделениеПредприятия, ВидОперации, СпособОтраженияЗарплатыВБухучете, СпособРасчетов," +
		"бг_Контрагент, бг_ДоговорКонтрагента",
		"Сумма, ВзносыВсего, ПФРСтраховая, ПФРНакопительная, ПФРПоСуммарномуТарифу, ФСС, ФФОМС, ТФОМС," +
		"ФССНесчастныеСлучаи, ПФРДоПредельнойВеличины, ПФРСПревышения, ВзносыПоЕдиномуТарифу");
	ДокументОтраженияЗарплаты.НачисленныйНДФЛ.Свернуть(
		"ВидОперации, ТипНалога, СпособРасчетов, РегистрацияВНалоговомОргане," +
		"бг_Контрагент, бг_ДоговорКонтрагента, ПодразделениеПредприятия", 
		"Сумма");
	ТаблицаУдержаннаяЗарплата.Свернуть(
		"ПодразделениеПредприятия, Контрагент, ВидОперации, ФизическоеЛицо, СчетКт, " +
		"НастройкаСчетовУчета, ДоговорКонтрагента, СтатьяАктивовПассивов, бг_ИсполнительныйЛист", 
		"Сумма");

	ТаблицаУдержаннаяЗарплата.ЗаполнитьЗначения(
		бг_КонстантыПовтИсп.ЗначениеКонстанты("СтатьяПассивовПоУмолчанию"),
		"СтатьяАктивовПассивов");	
	
	Для каждого Проводка Из ТаблицаУдержаннаяЗарплата Цикл
		
		Если Проводка.ВидОперации 
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм") Тогда
			
			Проводка.НастройкаСчетовУчета = НастройкаСчетовУчета(
				ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами"),
				ВладелецНастройки,
				Проводка.ФизическоеЛицо);

		ИначеЕсли Проводка.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ПрочиеУдержания") 
			И Лев(Проводка.СчетКт, 5) = "73.02" Тогда	
			
			Проводка.НастройкаСчетовУчета = НастройкаСчетовУчета(
				ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоВозмещениюМатериальногоУщерба"),
				ВладелецНастройки,
				Проводка.ФизическоеЛицо);

		ИначеЕсли Проводка.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ПрочиеУдержания") 
			И Лев(Проводка.СчетКт, 2) = "73" Тогда	
			
			Проводка.НастройкаСчетовУчета = НастройкаСчетовУчета(
				ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоПрочимОперациям"),
				ВладелецНастройки,
				Проводка.ФизическоеЛицо);
			
		ИначеЕсли Проводка.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ПрочиеУдержания") 
			И Лев(Проводка.СчетКт, 5) = "76.01" Тогда	
			
			Проводка.НастройкаСчетовУчета = НастройкаСчетовУчета(
				ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованию"),
				ВладелецНастройки,
				Проводка.Контрагент,
				Проводка.ДоговорКонтрагента);
				
		ИначеЕсли Проводка.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты") Тогда	
			
			Проводка.НастройкаСчетовУчета = НастройкаСчетовУчета(
				ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументамРаботников"),
				ВладелецНастройки,
				Проводка.Контрагент,
				Проводка.бг_ИсполнительныйЛист);
				
		ИначеЕсли Проводка.ВидОперации
			= ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.Профвзносы") Тогда	
			
			Проводка.НастройкаСчетовУчета = НастройкаСчетовУчета(
				ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников"),
				ВладелецНастройки,
				Проводка.Контрагент);
				
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументОтраженияЗарплаты.УдержаннаяЗарплата.Загрузить(ТаблицаУдержаннаяЗарплата);
	
	ДокументНачисленияРезерва.ОценочныеОбязательства.Свернуть(
		"СпособОтраженияЗарплатыВБухучете, МестоВСтруктуреПредприятия",
		"СуммаРезерва, СуммаРезерваНУ, СуммаРезерваСтраховыхВзносов, СуммаРезерваСтраховыхВзносовНУ, " + 
		"СуммаРезерваФССНесчастныеСлучаи, СуммаРезерваФССНесчастныеСлучаиНУ");
	
	Для Каждого СтрокаТЧ Из ДокументОтраженияЗарплаты.НачисленнаяЗарплатаИВзносы Цикл
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ДокументОтраженияЗарплаты.НачисленныйНДФЛ Цикл
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	Для Каждого СтрокаТЧ Из ДокументНачисленияРезерва.ОценочныеОбязательства Цикл
		СтрокаТЧ.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЦикла;
	
	ДокументОтраженияЗарплаты.Записать(РежимЗаписиДокумента.Запись);
	ОтражениеЗарплатыВФинансовомУчете = ДокументОтраженияЗарплаты.Ссылка;
	
	ДокументНачисленияРезерва.Записать(РежимЗаписиДокумента.Запись);
	НачислениеОценочныхОбязательствПоОтпускам = ДокументНачисленияРезерва.Ссылка;
	ЗафиксироватьТранзакцию();
	
	Попытка
		ДокументОтраженияЗарплаты.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	
	Попытка
		ДокументНачисленияРезерва.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаСчетовУчета(СчетУчета, 
	ВладелецНастройки,
	Субконто1 = Неопределено,
	Субконто2 = Неопределено,
	Субконто3 = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиСчетовУчетаПрочихОпераций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетовУчетаПрочихОпераций
		|ГДЕ
		|	НастройкиСчетовУчетаПрочихОпераций.СчетУчета = &СчетУчета
		|	И НастройкиСчетовУчетаПрочихОпераций.ВладелецНастройки = &ВладелецНастройки
		|	И ВЫБОР
		|			КОГДА &Субконто1 = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НастройкиСчетовУчетаПрочихОпераций.Субконто1 = &Субконто1
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Субконто2 = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НастройкиСчетовУчетаПрочихОпераций.Субконто2 = &Субконто2
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Субконто3 = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НастройкиСчетовУчетаПрочихОпераций.Субконто3 = &Субконто3
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ВладелецНастройки", ВладелецНастройки);
	Запрос.УстановитьПараметр("Субконто1", Субконто1);
	Запрос.УстановитьПараметр("Субконто2", Субконто2);
	Запрос.УстановитьПараметр("Субконто3", Субконто3);
	Запрос.УстановитьПараметр("СчетУчета", СчетУчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяНастройка = Справочники.НастройкиСчетовУчетаПрочихОпераций.СоздатьЭлемент();
	НоваяНастройка.ВладелецНастройки = ВладелецНастройки;
	НоваяНастройка.СчетУчета = СчетУчета;
	НоваяНастройка.Субконто1 = Субконто1;
	НоваяНастройка.Субконто2 = Субконто2;
	НоваяНастройка.Субконто3 = Субконто3;
	НоваяНастройка.Записать();   
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НоваяНастройка.Ссылка;
	
КонецФункции

#Область ОбщиеПроцедурыФункции_ЗагрузкаПроводок

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеЗарплаты(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.НачисленоДоход"); 
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда");
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_ИспользованиеОтпускаЗаСчетРезерва(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия", "11");
	
	Если ПодразделениеПредприятия = Неопределено Тогда
		ПодразделениеПредприятия = ПодразделениеПоУмолчанию;
	КонецЕсли;
	НоваяСтрока.ПодразделениеПредприятия = ПодразделениеПредприятия;

	Если ПриНачисленииРезерваНУРавноБУ Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы"); 
	Иначе
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства"); 
	КонецЕсли;
	
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда");
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеРезерваОтпуска(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.МестоВСтруктуреПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете");  
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	
	ЗначениеСубконтоКт1 = Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub1_Kt_name")];
	Если ЗначениеСубконтоКт1 = "Резерв по неиспользованным отпускам" Тогда
		НоваяСтрока.СуммаРезерва = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		Если ПриНачисленииРезерваНУРавноБУ Тогда
			НоваяСтрока.СуммаРезерваНУ = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		КонецЕсли; 
	ИначеЕсли ЗначениеСубконтоКт1 = "Резервы на отпуск, страховые взносы" Тогда
		НоваяСтрока.СуммаРезерваСтраховыхВзносов = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		Если ПриНачисленииРезерваНУРавноБУ Тогда
			НоваяСтрока.СуммаРезерваСтраховыхВзносовНУ = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		КонецЕсли; 
	ИначеЕсли ЗначениеСубконтоКт1 = "Страхование НС и ТП" Тогда
		НоваяСтрока.СуммаРезерваФССНесчастныеСлучаи = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		Если ПриНачисленииРезерваНУРавноБУ Тогда
			НоваяСтрока.СуммаРезерваФССНесчастныеСлучаиНУ = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		КонецЕсли;  
	Иначе
		НоваяСтрока.СуммаРезерва = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		Если ПриНачисленииРезерваНУРавноБУ Тогда
			НоваяСтрока.СуммаРезерваНУ = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
		КонецЕсли;  
	КонецЕсли;
	НоваяСтрока.ЭтоРезервОтпуска = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеСтраховыхВзносов(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПоЗарплате.НачисленоДоход"); 
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.ВзносыВсего = НоваяСтрока.ВзносыВсего + Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда");
	
	СчетКт = Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Kt")];
	СуммаПроводки = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	
	Если СчетКт = "69.01" Тогда
		НоваяСтрока.ФСС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.1" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.7" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.2" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.03.1" Тогда
		НоваяСтрока.ФФОМС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.03.2" Тогда
		НоваяСтрока.ТФОМС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.11" Тогда
		НоваяСтрока.ФССНесчастныеСлучаи = СуммаПроводки;
	ИначеЕсли СчетКт = "69.09" Тогда
		НоваяСтрока.ВзносыПоЕдиномуТарифу = СуммаПроводки;
	Иначе
		НоваяСтрока.НеСопоставленыСчета = Истина; 
	КонецЕсли;
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеЗаСчетФСС(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия");
	Если Не ЗначениеЗаполнено(НоваяСтрока.ПодразделениеПредприятия) Тогда
		 НоваяСтрока.ПодразделениеПредприятия = ПодразделениеПоУмолчанию;
	КонецЕсли;
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПоЗарплате.РасходыПоСтрахованиюФСС"); 
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.ВзносыВсего = НоваяСтрока.ВзносыВсего + Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда");
	
	СчетКт = Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Kt")];
	СуммаПроводки = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	
	Если СчетКт = "69.01" Тогда
		НоваяСтрока.ФСС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.1" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.7" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.2" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.03.1" Тогда
		НоваяСтрока.ФФОМС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.03.2" Тогда
		НоваяСтрока.ТФОМС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.11" Тогда
		НоваяСтрока.ФССНесчастныеСлучаи = СуммаПроводки;
	ИначеЕсли СчетКт = "69.09" Тогда
		НоваяСтрока.ВзносыПоЕдиномуТарифу = СуммаПроводки;
	ИначеЕсли СчетКт = "70" Тогда
		НоваяСтрока.Сумма = СуммаПроводки;
		НоваяСтрока.ВзносыВсего = НоваяСтрока.ВзносыВсего - СуммаПроводки;
	Иначе
		НоваяСтрока.НеСопоставленыСчета = Истина; 
	КонецЕсли;
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_ИспользованиеСтраховыхВзносовЗаСчетРезерва(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия", "11");
	
	Если ПодразделениеПредприятия = Неопределено Тогда
		ПодразделениеПредприятия = ПодразделениеПоУмолчанию;
	КонецЕсли;
	НоваяСтрока.ПодразделениеПредприятия = ПодразделениеПредприятия;
	
	Если ПриНачисленииРезерваНУРавноБУ Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательстваИРезервы"); 
	Иначе
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.ЕжегодныйОтпускОценочныеОбязательства"); 
	КонецЕсли;
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.ВзносыВсего = НоваяСтрока.ВзносыВсего + Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда");
	
	СчетКт = Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Kt")];
	СуммаПроводки = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	
	Если СчетКт = "69.01" Тогда
		НоваяСтрока.ФСС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.1" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.7" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.02.2" Тогда
		НоваяСтрока.ПФРДоПредельнойВеличины = СуммаПроводки;
	ИначеЕсли СчетКт = "69.03.1" Тогда
		НоваяСтрока.ФФОМС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.03.2" Тогда
		НоваяСтрока.ТФОМС = СуммаПроводки;
	ИначеЕсли СчетКт = "69.11" Тогда
		НоваяСтрока.ФССНесчастныеСлучаи = СуммаПроводки;
	ИначеЕсли СчетКт = "69.09" Тогда
		НоваяСтрока.ВзносыПоЕдиномуТарифу = СуммаПроводки;
	Иначе
		НоваяСтрока.НеСопоставленыСчета = Истина; 
	КонецЕсли;
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеНДФЛ(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПоЗарплате.НДФЛ"); 
	НоваяСтрока.СпособРасчетов = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.РегистрацияВНалоговомОргане = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"РегистрацииВНалоговомОргане"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленныйНДФЛ";
	
	СчетКт = Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Kt")];
	
	Если СчетКт = "68.01.1" Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.НДФЛ");
	ИначеЕсли СчетКт = "68.01.2" Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.НДФЛСПревышения");
	Иначе
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.НДФЛ");
	КонецЕсли;
	
КонецПроцедуры   

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеНДФЛСДоговораГПХ(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов"); 
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение(
		"Перечисление.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами"); 
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленныйНДФЛ";
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеПоДоговорамГПХ(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов"); 
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами");
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_Удержание(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	СчетКт = СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("Kt")]);
	
	Если СчетКт = "76.41" Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.АлиментыПрочиеИсполнительныеЛисты"); 
	ИначеЕсли Лев(СчетКт, 2) = "71" Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.УдержаниеНеизрасходованныхПодотчетныхСумм"); 
	ИначеЕсли Лев(СчетКт, 2) = "73" Или Лев(СчетКт, 5) = "76.01" Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.ПрочиеУдержания"); 
	ИначеЕсли СчетКт = "76.05" Тогда
		НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
			"Перечисление.ВидыОперацийПоЗарплате.Профвзносы"); 
	КонецЕсли;
	
	ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия", КодТаблицыСправочникаПодразделения);     
	Если ПодразделениеПредприятия = Неопределено Тогда
		ПодразделениеПредприятия = ПодразделениеПоУмолчанию;
	КонецЕсли;
	НоваяСтрока.ПодразделениеПредприятия = ПодразделениеПредприятия; 
	НоваяСтрока.Контрагент = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"Контрагенты");
	НоваяСтрока.ДоговорКонтрагента = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"ДоговорыКонтрагентов");
	
	Если СчетКт = "71.01" Или СчетКт = "73.02" Тогда
		ФизическоеЛицо = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
			"ФизическиеЛица", КодТаблицыСправочникаФизическиеЛица, , Ложь);		
	Иначе
		ФизическоеЛицо = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
			"ФизическиеЛица", КодТаблицыСправочникаФизическиеЛица);
	КонецЕсли;
	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ФизическоеЛицоПоУмолчанию;
	КонецЕсли;
	НоваяСтрока.ФизическоеЛицо = ФизическоеЛицо;

	НоваяСтрока.бг_ИсполнительныйЛист = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"ИсполнительныйЛист", Неопределено, "Документ");	
	
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.ИмяТабличнойЧасти = "УдержаннаяЗарплата";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеЗарплатыКонтрагенту(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.ДоходыКонтрагентов"); 
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами");
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	НоваяСтрока.бг_Контрагент = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"Контрагенты");
	НоваяСтрока.бг_ДоговорКонтрагента = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"ДоговорыКонтрагентов");  
	НоваяСтрока.Контрагент = НоваяСтрока.бг_Контрагент;
	НоваяСтрока.ДоговорКонтрагента = НоваяСтрока.бг_ДоговорКонтрагента;
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеНДФЛКонтрагента(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийПоЗарплате.НДФЛДоходыКонтрагентов"); 
	НоваяСтрока.СпособРасчетов = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.РегистрацияВНалоговомОргане = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"РегистрацииВНалоговомОргане"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленныйНДФЛ";
	
	НоваяСтрока.бг_Контрагент = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"Контрагенты");
	НоваяСтрока.бг_ДоговорКонтрагента = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"ДоговорыКонтрагентов");  
	НоваяСтрока.Контрагент = НоваяСтрока.бг_Контрагент;
	НоваяСтрока.ДоговорКонтрагента = НоваяСтрока.бг_ДоговорКонтрагента;
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.РасчетыСКонтрагентами");
	НоваяСтрока.ПодразделениеПредприятия = ПодразделениеПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаПроводки_НачислениеПрочиеРасходы(Проводка, ЗначенияСубконто, НоваяСтрока)
	
	НоваяСтрока.ПодразделениеПредприятия = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СтруктураПредприятия"); 
	НоваяСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоЗарплате.НачисленоДоход"); 
	НоваяСтрока.СпособРасчетов = ПредопределенноеЗначение("Перечисление.СпособыРасчетовСФизическимиЛицами.ОплатаТруда");
	НоваяСтрока.СпособОтраженияЗарплатыВБухучете = ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, 
		"СпособыОтраженияЗарплатыВБухУчете"); 
	НоваяСтрока.Сумма = Число(СокрЛП(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("summa")]));
	НоваяСтрока.ИмяТабличнойЧасти = "НачисленнаяЗарплатаИВзносы";
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПериодРасчетовНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = НачалоМесяца(ВыбранныйПериод);
	ПредставлениеПериодаРасчетов = ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеСубконтоПоТипуДанных(Проводка, ЗначенияСубконто, ИмяМетаданного, КодТипа = Неопределено, ТипМетаданных = "Справочник", 
	ИскатьЗначенияДт = Истина, ИскатьЗначенияКт = Истина)
	
	МассивЗначенийСубконтоПроводки = Новый Массив;
	Если ИскатьЗначенияДт Тогда
		МассивЗначенийСубконтоПроводки.Добавить(
			ЗначенияСубконто.Получить(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub1_Dt_kod")]));
		МассивЗначенийСубконтоПроводки.Добавить(
			ЗначенияСубконто.Получить(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub2_Dt_kod")]));
		МассивЗначенийСубконтоПроводки.Добавить(
			ЗначенияСубконто.Получить(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub3_Dt_kod")]));
	КонецЕсли;
	Если ИскатьЗначенияКт Тогда	
		МассивЗначенийСубконтоПроводки.Добавить(
			ЗначенияСубконто.Получить(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub1_Kt_kod")]));
		МассивЗначенийСубконтоПроводки.Добавить(
			ЗначенияСубконто.Получить(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub2_Kt_kod")]));
		МассивЗначенийСубконтоПроводки.Добавить(
			ЗначенияСубконто.Получить(Проводка["Колонка" + СоответствиеКолонокТекущегоФайла.Получить("sub3_Kt_kod")]));
	КонецЕсли;
	
	ТипДанных = Тип(СтрШаблон("%1Ссылка.%2", ТипМетаданных, ИмяМетаданного));    
	
	ЕстьСубконтоИскомогоТипа = Ложь;
	Если Не КодТипа = Неопределено Тогда  
		МассивЗначений = Новый Массив;
		Для ИтераторСубконто = 1 По 3 Цикл
			КодЗначенияСубконто = Проводка["Колонка" + 
				СоответствиеКолонокТекущегоФайла.Получить(СтрШаблон("sub%1_Dt_kod", ИтераторСубконто))];
			Если ЗначениеЗаполнено(КодЗначенияСубконто) Тогда 
				МассивЗначений.Добавить(КодЗначенияСубконто);
			КонецЕсли;
		КонецЦикла;   
		Для ИтераторСубконто = 1 По 3 Цикл
			КодЗначенияСубконто = Проводка["Колонка" + 
				СоответствиеКолонокТекущегоФайла.Получить(СтрШаблон("sub%1_Kt_kod", ИтераторСубконто))];
			Если ЗначениеЗаполнено(КодЗначенияСубконто) Тогда 
				МассивЗначений.Добавить(КодЗначенияСубконто);
			КонецЕсли;
		КонецЦикла; 
		
		Для каждого ИскомоеЗначение Из МассивЗначений Цикл
		
			СоставИскомогоЗначения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ИскомоеЗначение, "^");
			
			Если СоставИскомогоЗначения.Количество() = 1 Тогда
				//Частная ситуация
				КодФизическогоЛица = СоставИскомогоЗначения[0];
				СоставИскомогоЗначения = Новый Массив(3);
				СоставИскомогоЗначения[0] = КодТаблицыСправочникаФизическиеЛица;
				СоставИскомогоЗначения[2] = КодФизическогоЛица;
			КонецЕсли;   
			
			Если СоставИскомогоЗначения.Количество() = 3 
				И СоставИскомогоЗначения[0] = КодТипа Тогда
				ЕстьСубконтоИскомогоТипа = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЗначениеСубконто Из МассивЗначенийСубконтоПроводки Цикл
		Если ТипЗнч(ЗначениеСубконто) = ТипДанных Тогда
			Возврат ЗначениеСубконто;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЕстьСубконтоИскомогоТипа Тогда
		Возврат ПредопределенноеЗначение(СтрШаблон("%1.%2.ПустаяСсылка", ТипМетаданных, ИмяМетаданного));
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если ВидОперации = 0 Тогда
		
		Элементы.ПанельВидаОперации.ТекущаяСтраница = Элементы.ЗагрузкаФизическихЛиц;
		
		Если ТекущийШагФизическиеЛица = 0 Тогда
			Элементы.ШагиЗагрузкиФизическихЛиц.ТекущаяСтраница = Элементы.Шаг1ЗагрузкаФизическихЛиц;
			Элементы.РаспознатьИСравнитьФизическиеЛица.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ШагиЗагрузкиФизическихЛиц.ТекущаяСтраница = Элементы.Шаг2ЗагрузкаФизическихЛиц;
			Элементы.ЗагрузкаФизическихЛицКнопка.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ПанельВидаОперации.ТекущаяСтраница = Элементы.ЗагрузкаПроводокПоЗарплате;
		
		Если ВыполненныйТекущийШаг = 0 Тогда
			Элементы.РаспознатьСубконто.КнопкаПоУмолчанию = Истина;
			Элементы.ШагиЗагрузкиПроводокПоЗарплате.ТекущаяСтраница = Элементы.ТаблицаФайл;
		ИначеЕсли ВыполненныйТекущийШаг = 1 Тогда
			Элементы.ПодготовитьТаблицуПроводок.КнопкаПоУмолчанию = Истина;
			Элементы.ШагиЗагрузкиПроводокПоЗарплате.ТекущаяСтраница = Элементы.ТаблицаСубконто;
		ИначеЕсли ВыполненныйТекущийШаг = 2 Тогда
			Элементы.ЗагрузитьДанныеПоЗарплате.КнопкаПоУмолчанию = Истина;
			Элементы.ШагиЗагрузкиПроводокПоЗарплате.ТекущаяСтраница = Элементы.ТаблицаПроводки;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СуммыВзносов.Видимость = ВзносыПодробно;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСубконтоСправочник(СтрокаНастройки, ИскомыеДанные)

	Если СтрокаНастройки.ОтборПоВладельцу 
		И Не ЗначениеЗаполнено(Организация) Тогда
		
		ВызватьИсключение
			НСтр("ru='Используется субконто, с поиском по организации. Обязательно укажите организацию'");		
	КонецЕсли;
	
	ИскомыеЗначенияДанных = Новый Массив;
	Для Каждого СоставИскомогоЗначения Из ИскомыеДанные.Значение Цикл
		ИскомыеЗначенияДанных.Добавить(СоставИскомогоЗначения.Значение.ПолеПоиска);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка КАК Ссылка,
		|	ТаблицаСправочника." + СтрокаНастройки.ПолеПоиска + " КАК ПолеПоиска
		|ИЗ
		|	Справочник." + СтрокаНастройки.name1C + " КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника." + СтрокаНастройки.ПолеПоиска + "  В(&ИскомыеЗначенияДанных)";
	
	Если СтрокаНастройки.ОтборПоВладельцу Тогда
		Запрос.Текст = Запрос.Текст + " И ТаблицаСправочника.Владелец = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИскомыеЗначенияДанных", ИскомыеЗначенияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	НайденныеЗначенияСубконто = РезультатЗапроса.Выгрузить();
	НайденныеЗначенияСубконто.Индексы.Добавить("ПолеПоиска");
	
	Для Каждого СоставИскомогоЗначения Из ИскомыеДанные.Значение Цикл
		
		Если СтрокаНастройки.ПолеПоиска = "Код" Тогда
			НайденноеЗначение = НайденныеЗначенияСубконто.Найти(
				СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
					СоставИскомогоЗначения.Значение.ПолеПоиска, 
					Метаданные.Справочники[СтрокаНастройки.name1C].ДлинаКода, 
					" ", 
					"Справа"), 
				"ПолеПоиска");  
		Иначе
			НайденноеЗначение = НайденныеЗначенияСубконто.Найти(
				СоставИскомогоЗначения.Значение.ПолеПоиска, 
				"ПолеПоиска");
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗначенийСубконто.Добавить();
		НоваяСтрока.КлючСубконто = СоставИскомогоЗначения.Ключ;
		НоваяСтрока.ТипЗначенияСубконто = СтрокаНастройки.name1C;
		НоваяСтрока.ПредставлениеТипаСубконто = Метаданные.Справочники[СтрокаНастройки.name1C].Синоним;
		НоваяСтрока.ПредставлениеСубконто = СоставИскомогоЗначения.Значение.Представление;
		
		Если Не НайденноеЗначение = Неопределено Тогда
			НоваяСтрока.ЗначениеСубконто = НайденноеЗначение.Ссылка;
		Иначе
			НоваяСтрока.ЗначениеСубконто = Справочники[СтрокаНастройки.name1C].ПустаяСсылка();
			НоваяСтрока.НеобходимоЗаполнить = Истина;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияСубконтоДокумент(СтрокаНастройки, ИскомыеДанные)

	ИскомыеЗначенияДанных = Новый Массив;
	Для Каждого СоставИскомогоЗначения Из ИскомыеДанные.Значение Цикл
		ИскомыеЗначенияДанных.Добавить(СоставИскомогоЗначения.Значение.ПолеПоиска);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Ссылка КАК Ссылка,
		|	ТаблицаДокумента." + СтрокаНастройки.ПолеПоиска + " КАК ПолеПоиска
		|ИЗ
		|	Документ." + СтрокаНастройки.name1C + " КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента." + СтрокаНастройки.ПолеПоиска + "  В(&ИскомыеЗначенияДанных)";
	
	Запрос.УстановитьПараметр("ИскомыеЗначенияДанных", ИскомыеЗначенияДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	НайденныеЗначенияСубконто = РезультатЗапроса.Выгрузить();
	НайденныеЗначенияСубконто.Индексы.Добавить("ПолеПоиска");
	
	Для Каждого СоставИскомогоЗначения Из ИскомыеДанные.Значение Цикл
		
		НайденноеЗначение = НайденныеЗначенияСубконто.Найти(
			СоставИскомогоЗначения.Значение.ПолеПоиска, 
			"ПолеПоиска");
		
		НоваяСтрока = ТаблицаЗначенийСубконто.Добавить();
		НоваяСтрока.КлючСубконто = СоставИскомогоЗначения.Ключ;
		НоваяСтрока.ТипЗначенияСубконто = СтрокаНастройки.name1C;
		НоваяСтрока.ПредставлениеТипаСубконто = Метаданные.Документы[СтрокаНастройки.name1C].Синоним;
		НоваяСтрока.ПредставлениеСубконто = СоставИскомогоЗначения.Значение.Представление;
		
		Если Не НайденноеЗначение = Неопределено Тогда
			НоваяСтрока.ЗначениеСубконто = НайденноеЗначение.Ссылка;
		Иначе
			НоваяСтрока.ЗначениеСубконто = Документы[СтрокаНастройки.name1C].ПустаяСсылка();
			НоваяСтрока.НеобходимоЗаполнить = Истина;
		КонецЕсли;
		
	КонецЦикла;			
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипМетаданныхСтрокой(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
	
	ТипМетаданных = Неопределено;
	Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ТипМетаданных = "Справочник";
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ТипМетаданных = "Документ";
	КонецЕсли;
	
	Возврат ТипМетаданных;
	
КонецФункции

#КонецОбласти
