
#Область ОбработчикиСобытийФормы
	  
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ИнициализироватьНастройки();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");   

КонецПроцедуры          

#КонецОбласти

#Область ОбработчикиКомандФормы
	  
&НаКлиенте
Процедура ВыгрузитьДанные(Команда)
	
	Объект.АвтоматическаяВыгрузкаПоРасписанию = Ложь;
	Если Не ПроверитьПараметрыВыгрузки() Тогда 
		Возврат;
	КонецЕсли; 
	
	МассивАдресовФайловВоВременномХранилище = Новый Массив;
	ВыгрузитьДанныеНаСервере(МассивАдресовФайловВоВременномХранилище);
	Для Каждого СтруктураИнформацияОФайле Из МассивАдресовФайловВоВременномХранилище Цикл 
		СоздатьНесуществующиеПодкаталоги(СтруктураИнформацияОФайле.ПутьФайла);
		Если Не ЗначениеЗаполнено(СтруктураИнформацияОФайле.АдресВоВременномХранилище) Тогда 
			Попытка
				СоздатьКаталог(СтруктураИнформацияОФайле.ПутьФайла);
			Исключение
				Сообщить("Не удалось создать каталог " + СтруктураИнформацияОФайле.ПутьФайла);
			КонецПопытки;	
		Иначе
			СохраняемыйФайл = ПолучитьИзВременногоХранилища(СтруктураИнформацияОФайле.АдресВоВременномХранилище);
			СохраняемыйФайл.Записать(СтруктураИнформацияОФайле.ПутьФайла);
			Если СтруктураИнформацияОФайле.Свойство("ПутьФайла2") Тогда 
				СохраняемыйФайл.Записать(СтруктураИнформацияОФайле.ПутьФайла2);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры          

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьЗначениеОтметки(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	
	УстановитьЗначениеОтметки(Ложь);	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуДляОбмена(Команда) 
	
	СохранитьНастройкуДляОбменаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНастройкуДляОбмена(Команда) 
	
	ЗагрузитьНастройкуДляОбменаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПодробныйСписокВыгружаемыхОбъектовПриИзменении(Элемент)
	
	Объект.ВыгружаемыеОбъекты.Очистить();
	
	Если ПодробныйСписокВыгружаемыхОбъектов Тогда
		Для Каждого СтрокаТЧ Из Объект.ОбъектыВыгрузки Цикл 
			Если СтрокаТЧ.Включен Тогда 
				ЗаполнитьЗначенияСвойств(Объект.ВыгружаемыеОбъекты.Добавить(), СтрокаТЧ);		
			КонецЕсли;
		КонецЦикла;
	Иначе      
		Для Каждого СтрокаТЧ Из Объект.ГруппыВыгрузки Цикл 
			ЗаполнитьЗначенияСвойств(Объект.ВыгружаемыеОбъекты.Добавить(), СтрокаТЧ);		
		КонецЦикла;	
	КонецЕсли;                                    		
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыеОбъектыОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыгружаемыеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если НЕ ПодробныйСписокВыгружаемыхОбъектов Тогда 
		//Проставляем отметку в таблице групп
		МассивНайденныхСтрок = Объект.ГруппыВыгрузки.НайтиСтроки(Новый Структура("КодГруппы", ТекущиеДанные.КодГруппы));		
		Для Каждого СтрокаМассива Из МассивНайденныхСтрок Цикл 
			СтрокаМассива.Отметка = ТекущиеДанные.Отметка;
		КонецЦикла;
		
		//Проставляем отметку в объектах выгрузки по данному коду группы
		МассивНайденныхСтрок = Объект.ОбъектыВыгрузки.НайтиСтроки(Новый Структура("КодГруппы", ТекущиеДанные.КодГруппы));		
		Для Каждого СтрокаМассива Из МассивНайденныхСтрок Цикл 
			СтрокаМассива.Отметка = ТекущиеДанные.Отметка;
		КонецЦикла;              		
	Иначе
		//Проставляем отметку в объектах выгрузки
		МассивНайденныхСтрок = Объект.ОбъектыВыгрузки.НайтиСтроки(Новый Структура("Название", ТекущиеДанные.Название));		
		Для Каждого СтрокаМассива Из МассивНайденныхСтрок Цикл 
			СтрокаМассива.Отметка = ТекущиеДанные.Отметка;
		КонецЦикла;  
		
		//Подготовим отметку для группы выгрузки
		МассивНайденныхСтрок = Объект.ОбъектыВыгрузки.НайтиСтроки(Новый Структура("КодГруппы", ТекущиеДанные.КодГруппы));			
		ОтметкаДляГруппыВыгрузки = Истина;
		Для Каждого СтрокаМассива Из МассивНайденныхСтрок Цикл 
			Если Не СтрокаМассива.Отметка Тогда 
				ОтметкаДляГруппыВыгрузки = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		//Установим ОтметкуДляГруппыВыгрузки в таблице групп
		МассивНайденныхСтрок = Объект.ГруппыВыгрузки.НайтиСтроки(Новый Структура("КодГруппы", ТекущиеДанные.КодГруппы));		
		Для Каждого СтрокаМассива Из МассивНайденныхСтрок Цикл 
			СтрокаМассива.Отметка = ОтметкаДляГруппыВыгрузки;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Заголовок = "Выберите путь к данным";
	ДиалогОткрытияФайла.Каталог = Объект.КаталогДанных;		
	ДиалогОткрытияФайла.Показать(Новый ОписаниеОповещения("КаталогДанныхЗавершениеВыбора", ЭтотОбъект));	

КонецПроцедуры

#Область ОбработчикиСобытийТаблицаФилиалы

&НаКлиенте
Процедура ФилиалыАктивныйПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Филиалы.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда 
		Если ТекущиеДанные.Активный Тогда 
			Объект.АктивныйФилиал = ТекущиеДанные.Филиал; 
			МассивНайденныхСтрокАктивныйФилиал = Объект.Филиалы.НайтиСтроки(Новый Структура("Активный", Истина));
			Для Каждого НайденнаяСтрокаАктивныйФилиал Из МассивНайденныхСтрокАктивныйФилиал Цикл 
				Если Не НайденнаяСтрокаАктивныйФилиал = ТекущиеДанные Тогда 
					НайденнаяСтрокаАктивныйФилиал.Активный = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры  

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(МассивАдресовФайловВоВременномХранилище)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ВыгрузитьДанные(МассивАдресовФайловВоВременномХранилище);	

КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() Тогда
		Объект.КаталогДанных = ВыбранныеФайлы[0];
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(Объект.КаталогДанных) Тогда 
		Если Не Прав(Объект.КаталогДанных, 1) = "\" Тогда 
			Объект.КаталогДанных = Объект.КаталогДанных + "\";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеОтметки(ЗначениеОтметки)

	//устанавливаем значение отметки для отображаемого списка выгружаемых объектов
	Для Каждого СтрокаТЧ Из Объект.ВыгружаемыеОбъекты Цикл 
		СтрокаТЧ.Отметка = ЗначениеОтметки;		
	КонецЦикла;
	
	//устанавливаем значение отметки для групп выгрузки
	Для Каждого СтрокаТЧ Из Объект.ГруппыВыгрузки Цикл 
		СтрокаТЧ.Отметка = ЗначениеОтметки;		
	КонецЦикла;
	
	//устанавливаем значение отметки для объектов выгрузки
	Для Каждого СтрокаТЧ Из Объект.ОбъектыВыгрузки Цикл 
		СтрокаТЧ.Отметка = ЗначениеОтметки;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьПараметрыВыгрузки()
	
	Если Не ЗначениеЗаполнено(Объект.АктивныйФилиал) Тогда 
		Сообщить("Не выбран филиал!");		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция СоздатьНесуществующиеПодкаталоги(Знач ПутьКФайлу) Экспорт
		
	МассивНовыхПодкаталогов	= Новый Массив;
	
	ЭтоФайл	= 1;
	Файл = Новый Файл(ПутьКФайлу);
	Пока Файл.Существует() = 0 Цикл
		Если ЭтоФайл = 1 Тогда
			ЭтоФайл	= 0;
		Иначе
			МассивНовыхПодкаталогов.Добавить(ПутьКФайлу);
		КонецЕсли;
		
		КоличествоСимволовПутьКФайлу = СтрДлина(ПутьКФайлу);
		Пока КоличествоСимволовПутьКФайлу > 1 Цикл
			Если Сред(ПутьКФайлу, КоличествоСимволовПутьКФайлу, 1) <> "\" Тогда
				КоличествоСимволовПутьКФайлу = КоличествоСимволовПутьКФайлу - 1;
				Продолжить;
			КонецЕсли;
			
			ПутьКФайлу = Лев(ПутьКФайлу, КоличествоСимволовПутьКФайлу - 1);
			Прервать;
		КонецЦикла;
		
		Если СтрДлина(ПутьКФайлу) <= 1 Тогда
			Прервать;
		КонецЕсли;
		
		Файл = Новый Файл(ПутьКФайлу);
	КонецЦикла;
	
	КоличествоСоздаваемыхПодкаталогов = МассивНовыхПодкаталогов.Количество();
	Пока КоличествоСоздаваемыхПодкаталогов > 0 Цикл
		Попытка
			СоздатьКаталог(МассивНовыхПодкаталогов.Получить(КоличествоСоздаваемыхПодкаталогов-1));
		Исключение
			Возврат 0;
		КонецПопытки;
		
		КоличествоСоздаваемыхПодкаталогов = КоличествоСоздаваемыхПодкаталогов - 1;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкуДляОбменаНаСервере() 
	
	Настройки = Новый Структура();
	Настройки.Вставить("Период",              		Объект.Период);
	Настройки.Вставить("Пользователь",        		Объект.Пользователь);
	Настройки.Вставить("КаталогДанных",       		Объект.КаталогДанных);
	Настройки.Вставить("КомпоновщикНастроек", 		Объект.КомпоновщикНастроек.Настройки);
	Настройки.Вставить("СегментПартнеров", 			Объект.СегментПартнеров);
	Настройки.Вставить("ВыгружатьТолькоReferences", Объект.ВыгружатьТолькоReferences);
	Настройки.Вставить("Филиалы",             		Объект.Филиалы.Выгрузить());
	Настройки.Вставить("ОбъектыВыгрузки",     		Объект.ОбъектыВыгрузки.Выгрузить()); 
	Настройки.Вставить("ГруппыВыгрузки",      		Объект.ГруппыВыгрузки.Выгрузить());
	Настройки.Вставить("ВыгружаемыеОбъекты",  		Объект.ВыгружаемыеОбъекты.Выгрузить());
	Настройки.Вставить("АктивныйФилиал",      		Объект.АктивныйФилиал);
	
	ИмяНастройки = "Настройки_" + СтрЗаменить(Строка(Объект.Пользователь)," ", "");//имя должно быть без пробелов
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("Чикаго", Настройки, ИмяНастройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкуДляОбменаНаСервере() 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ОбработкаОбъект.НастройкаОбменаЗагружена() Тогда 
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");  
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
