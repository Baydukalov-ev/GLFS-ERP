#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мТипXMLБибилиотеки;
Перем мДокXML;
Перем мЛогXML;        
Перем мGroupLogXML;
Перем мСчетчикВыгрузки;
Перем мКолвоОбъектов;
Перем мИспользоватьЛогСообщений;
Перем мТаблицаОтчета;
Перем мМакетОтчета;
Перем мСтрокаСообщения;
Перем мСтрокаЧасовойПояс;
Перем мМассивАдресовФайловВоВременномХранилище;
Перем мМассивВыгружаемыхТоваров;
Перем мМассивВыгружаемыхОрганизаций;
Перем мМассивВыгружаемыхСотрудников;
Перем мМассивВыгружаемыхСкладов;
Перем мМассивВыгружаемыхВидовЦен;
Перем мМассивВыгружаемыхКонтрагентов;
Перем мМакетКомпоновки;
Перем мВыборкаКонтрагенты;
Перем мТаблицаКонтактнойИнформацииКонтрагентов;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция НастройкаОбменаЗагружена() Экспорт
	
	ИмяНастройки = "Настройки_" + СтрЗаменить(Строка(Пользователь)," ", "");//имя должно быть без пробелов
	Настройки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("Чикаго", ИмяНастройки);
	
	Если Настройки = Неопределено Тогда
		
		Возврат Ложь;
		
	Иначе  
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки, "Период, 
														|Пользователь, 
														|АктивныйФилиал, 
														|КаталогДанных,
														|СегментПартнеров,
														|ВыгружатьТолькоReferences");
		
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.КомпоновщикНастроек);		
		Филиалы.Загрузить(Настройки.Филиалы);
		ОбъектыВыгрузки.Загрузить(Настройки.ОбъектыВыгрузки);
		ГруппыВыгрузки.Загрузить(Настройки.ГруппыВыгрузки);
		ВыгружаемыеОбъекты.Загрузить(Настройки.ВыгружаемыеОбъекты);
		
		Возврат Истина;		
		
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область Инициализация

Процедура ИнициализироватьНастройки() Экспорт
	
	АвтоматическаяВыгрузкаПоРасписанию = Истина;
	лТаблица = ПолучитьМакет("Настройки");	
	//////////////////////////////
	//1 - Общие настройки		//
	//////////////////////////////
	//Если пПолностью = 1 Тогда
	лОбласть = лТаблица.ПолучитьОбласть("ОбщиеНастройки");
	лВысота	 = лОбласть.ВысотаТаблицы;
	//	
	//	мИнфоКомпания			= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Компания:");
	ИнфоКодДистрибьютора = ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Дистрибьютор:");
	//	мИнфоВерсия				= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Версия:");
	//	мИнфоДата				= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Дата:");
	//	
	//	мИнфоКаталогДанных		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Каталог обмена:");
	//	мИнфоИмяКомпьютера		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Имя компьютера:");
	//	мИмяПользователя		= ПрочитатьНастройкуИзТаблицы(лОбласть, лВысота, "Имя пользователя:");
	//КонецЕсли;
	
	//////////////////////////////
	//2 - Объекты выгрузки		//
	//////////////////////////////
	
	лОбласть	= лТаблица.ПолучитьОбласть("ОбъектыВыгрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	
	////инициализация списка выгружаемых объектов
	//Если ОбъектыВыгрузки.Колонки.Найти("Название") 		= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Название"); 		КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("Представление") = Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Представление"); 	КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("Отметка") 		= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Отметка"); 			КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("КодГруппы") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("КодГруппы"); 		КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("ТипОбъектов") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("ТипОбъектов"); 		КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("XMLСекция") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("XMLСекция"); 		КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("Процедура") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Процедура"); 		КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("ПоУмолчанию") 	= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("ПоУмолчанию"); 		КонецЕсли;
	//Если ОбъектыВыгрузки.Колонки.Найти("Включен") 		= Неопределено	Тогда ОбъектыВыгрузки.Колонки.Добавить("Включен"); 			КонецЕсли;
	
	//ПрежниеОбъектыВыгрузки	= Новый ТаблицаЗначений();
	//ПрежниеОбъектыВыгрузки	= ОбъектыВыгрузки.Скопировать();
	
	Для р = 1 По лВысота Цикл
		лНазвание	= лОбласть.Область(р, 4, р, 4).Текст;
		Если лНазвание = "" Тогда
			Продолжить;
		КонецЕсли;
		
		лСтрока	= ОбъектыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока = Неопределено Тогда
			лСтрока	= ОбъектыВыгрузки.Добавить();
			лСтрока.Название	= лНазвание;
			лСтрока.Отметка		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		КонецЕсли;
		
		лСтрока.Представление	= лОбласть.Область(р, 6, р, 6).Текст;
		лСтрока.КодГруппы		= лОбласть.Область(р, 7, р, 7).Текст;
		лСтрока.XMLСекция		= лОбласть.Область(р, 8, р, 8).Текст;
		лСтрока.ТипОбъектов		= лОбласть.Область(р, 9, р, 9).Текст;
		лСтрока.Процедура		= лОбласть.Область(р, 10, р, 10).Текст;
		лСтрока.ПоУмолчанию		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);	//включить в выгрузку по умолчанию
		лСтрока.Включен			= ?(лОбласть.Область(р, 5, р, 5).Текст = "X", Ложь, Истина);	//не отображать (служебные)
		
		//лСтрока	= ПрежниеОбъектыВыгрузки.Найти(лНазвание, "Название");
		//Если лСтрока <> Неопределено Тогда
		//	ПрежниеОбъектыВыгрузки.Удалить(лСтрока);
		//КонецЕсли;
	КонецЦикла;
	
	//Для Каждого лСтрокаПрежняя Из ПрежниеОбъектыВыгрузки Цикл
	//	лНазвание	= лСтрокаПрежняя.Название;
	//	лСтрока		= ОбъектыВыгрузки.Найти(лНазвание, "Название");
	//	Если лСтрока <> Неопределено Тогда
	//		ОбъектыВыгрузки.Удалить(лСтрока);
	//	КонецЕсли;
	//КонецЦикла;
	
	//////////////////////////////
	//3 - Группы выгрузки		//
	//////////////////////////////
	
	лОбласть	= лТаблица.ПолучитьОбласть("ГруппыВыгрузки");
	лВысота		= лОбласть.ВысотаТаблицы;
	//
	//Если ГруппыВыгрузки.Колонки.Найти("Название") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("Название"); КонецЕсли;
	//Если ГруппыВыгрузки.Колонки.Найти("Представление") = Неопределено	Тогда ГруппыВыгрузки.Колонки.Добавить("Представление"); КонецЕсли;
	//Если ГруппыВыгрузки.Колонки.Найти("Отметка") = Неопределено			Тогда ГруппыВыгрузки.Колонки.Добавить("Отметка"); КонецЕсли;
	//Если ГруппыВыгрузки.Колонки.Найти("КодГруппы") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("КодГруппы"); КонецЕсли;
	//Если ГруппыВыгрузки.Колонки.Найти("ТипОбъектов") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("ТипОбъектов"); КонецЕсли;
	//Если ГруппыВыгрузки.Колонки.Найти("ПоУмолчанию") = Неопределено		Тогда ГруппыВыгрузки.Колонки.Добавить("ПоУмолчанию"); КонецЕсли;
	//
	//ПрежниеГруппыВыгрузки	= Новый ТаблицаЗначений();
	//ПрежниеГруппыВыгрузки	= ГруппыВыгрузки.Скопировать();
	//
	Для р = 1 По лВысота Цикл
		лНазвание	= лОбласть.Область(р, 4, р, 4).Текст;
		Если лНазвание = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если лОбласть.Область(р, 5, р, 5).Текст = "X" Тогда
			Продолжить;
		КонецЕсли;
		
		лСтрока	= ГруппыВыгрузки.Найти(лНазвание, "Название");
		Если лСтрока = Неопределено Тогда
			лСтрока	= ГруппыВыгрузки.Добавить();
			лСтрока.Название	= лНазвание;
			лСтрока.Отметка		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		КонецЕсли;
		
		лПоУмолчанию	= 1;
		Если лОбласть.Область(р, 3, р, 3).Текст = "X" Тогда
			лПоУмолчанию	= 0;
		КонецЕсли;
		
		лСтрока.Представление	= лОбласть.Область(р, 6, р, 6).Текст;
		лСтрока.КодГруппы		= лОбласть.Область(р, 7, р, 7).Текст;
		лСтрока.ТипОбъектов		= лОбласть.Область(р, 9, р, 9).Текст;
		лСтрока.ПоУмолчанию		= ?(лОбласть.Область(р, 3, р, 3).Текст = "X", Ложь, Истина);
		
		//лСтрока	= ПрежниеГруппыВыгрузки.Найти(лНазвание, "Название");
		//Если лСтрока <> Неопределено Тогда
		//	ПрежниеГруппыВыгрузки.Удалить(лСтрока);
		//КонецЕсли;
	КонецЦикла;
	//
	//Для Каждого лСтрокаПрежняя Из ПрежниеГруппыВыгрузки Цикл
	//	лНазвание	= лСтрокаПрежняя.Название;
	//	лСтрока		= ГруппыВыгрузки.Найти(лНазвание, "Название");
	//	Если лСтрока <> Неопределено Тогда
	//		ГруппыВыгрузки.Удалить(лСтрока);
	//	КонецЕсли;
	//КонецЦикла; 
	
	//////////////////////////////
	//4 - Список филиалов		//
	//////////////////////////////
	//Если пПолностью = 1 Тогда
	//	ПрежниеФилиалы = новый("ТаблицаЗначений");
	//	Если СписокФилиалов.Количество() > 0 Тогда
	//		ПрежниеФилиалы = СписокФилиалов.Скопировать();	
	//	КонецЕсли;
	//	СписокФилиалов.Очистить();
	//		
	//	Если СписокФилиалов.Колонки.Найти("Филиал")=Неопределено Тогда
	//		СписокФилиалов.Колонки.Добавить("Филиал", Новый ОписаниеТипов(Новый КвалификаторыСтроки(50)), "Филиал", 50);
	//	КонецЕсли;
	//	Если СписокФилиалов.Колонки.Найти("Активный")=Неопределено Тогда
	//		нм = Новый Массив;
	//		нм.Добавить(Тип("Булево"));
	//		СписокФилиалов.Колонки.Добавить("Активный", Новый ОписаниеТипов(нм));
	//	КонецЕсли;
		
	лОбласть	= лТаблица.ПолучитьОбласть("Филиалы");
	лВысота		= лОбласть.ВысотаТаблицы;
	
	Для р = 1 По лВысота Цикл
		мНазваниеФилиала = лОбласть.Область(р, 3, р, 3).Текст;
		
		новыйФилиал_стр = Филиалы.Добавить();
		новыйФилиал_стр.Филиал = СокрЛП(мНазваниеФилиала);
		новыйФилиал_стр.Активный = ложь;
		
		//Если ПрежниеФилиалы.Количество() <> 0 тогда
		//	найденнаяСтрока = ПрежниеФилиалы.Найти(новыйФилиал_стр.Филиал,"Филиал");
		//	Если НайденнаяСтрока <> неопределено тогда
		//		новыйФилиал_стр.Активный = найденнаястрока.Активный;
		//	КонецЕсли;
		//КонецЕсли;
		
	КонецЦикла;				
		
	//КонецЕсли;
	
	//Заполним таблицу выгружаемых объектов
	Для Каждого СтрокаТЧ Из ГруппыВыгрузки Цикл 
		ЗаполнитьЗначенияСвойств(ВыгружаемыеОбъекты.Добавить(), СтрокаТЧ);
		МассивНайденныхСтрокОбъектыВыгрузки = ОбъектыВыгрузки.НайтиСтроки(Новый Структура("КодГруппы", СтрокаТЧ.КодГруппы));
		Для каждого НайденнаяСтрока Из МассивНайденныхСтрокОбъектыВыгрузки Цикл 
			НайденнаяСтрока.Отметка = СтрокаТЧ.Отметка;				
		КонецЦикла;
	КонецЦикла;  
	
	//////////////////////////////
	//5 - Отбор		            //
	//////////////////////////////                     
	СхемаКомпоновки = ПолучитьМакет("ФильтрыВыгрузки");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор);	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);	
	
КонецПроцедуры

//****************************************
Функция ПрочитатьНастройкуИзТаблицы(пОбласть, пВысота, пНазвание) Экспорт
	
	лЗначение	= "";
	Для р = 1 По пВысота Цикл
		лНазвание	= пОбласть.Область(р, 3, р, 3).Текст;
		Если лНазвание = пНазвание Тогда
			лЗначение	= пОбласть.Область(р, 4, р, 4).Текст;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат лЗначение;
	
КонецФункции	//ПрочитатьНастройкуИзТаблицы()

#КонецОбласти   

#Область ВыгрузкаДанных

Процедура ВыгрузитьДанные(МассивАдресовФайловВоВременномХранилище = Неопределено) Экспорт
	
	//РегСостоянияОбъектов = "син_ст_СостоянияОбъектов";
	Если Не АвтоматическаяВыгрузкаПоРасписанию Тогда 
		мМассивАдресовФайловВоВременномХранилище = Новый Массив;
	КонецЕсли;
	
    мТаблицаОтчета 				= Новый ТабличныйДокумент();
	СгенерированныеФайлы.Очистить();
	//Если мКонстантаНесколькоФилиалов тогда //Для СМ ДВ
	//	Если Пользователь = мКонстантаОсновнойПользовательВВ тогда
	//		РегСостоянияОбъектов = "син_ст_СостоянияОбъектов";
	//	ИначеЕсли Пользователь = мКонстантаОсновнойПользовательДВ тогда
	//		РегСостоянияОбъектов = "син_ст_СостоянияОбъектовДВ";
	//	ИначеЕсли Пользователь = мКонстантаОсновнойПользовательНХ тогда	
	//		РегСостоянияОбъектов = "син_ст_СостоянияОбъектовНХ";
	//	ИначеЕсли Пользователь = мКонстантаОсновнойПользовательАТ тогда
	//		РегСостоянияОбъектов = "син_ст_СостоянияОбъектовАТ";
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Прав(мКаталогДанных, 1) <> "\" Тогда
	//	мКаталогДанных	= мКаталогДанных + "\";
	//КонецЕсли;
	//
	отчОткрытьОтчет();
	отчДобавитьВОтчет("Выгрузка данных  для ""ST-Чикаго""", "Заголовок", 1, 1);
	
	ПолучитьТипXMLБибилиотеки();
	
	Если мТипXMLБибилиотеки = "" Тогда
		Сообщить("Не обнаружено библиотек для работы с xml-данными!");
		Возврат;
	КонецЕсли;
		
	Если НЕ ОбязательныеФильтрыУстановлены() Тогда
		отчЗакрытьОтчет();
		Возврат;
	КонецЕсли;
	//мДатаОбработки				= ДатаКонца;
	
	//////////////////////////////////////////////////////
	////СОЗДАНИЕ ПУСТЫХ ЗАГОТОВОК ФАЙЛОВ (начало)
	//////////////////////////////////////////////////////
	////необходимо, чтобы не завалилась репликация
	//////////////////////////////////////////////////////
	// 
	Если АвтоматическаяВыгрузкаПоРасписанию Тогда 		
		Файл = Новый Файл(КаталогДанных + "confirmation");
		Если НЕ Файл.Существует() Тогда
			Попытка
				СоздатьКаталог(КаталогДанных + "confirmation");
			Исключение
				СообщитьПодробно("Не удалось создать каталог " + КаталогДанных + "confirmation", 0, 0, 3, "Ошибка");
			КонецПопытки;
		КонецЕсли;
	Иначе
		мМассивАдресовФайловВоВременномХранилище.Добавить(Новый Структура("ПутьФайла, АдресВоВременномХранилище", КаталогДанных + "confirmation"));;
	КонецЕсли;
	
	ПолноеИмяФайлаЛога	= КаталогДанных + "confirmationslog.xml";
	Файл = Новый Файл(ПолноеИмяФайлаЛога);
	Если Не Файл.Существует() Тогда
		мДокXML = Новый COMОбъект(мТипXMLБибилиотеки);
		node = мДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		мДокXML.preserveWhiteSpace = 1;
		мДокXML.AppendChild(node);
		
		group = мДокXML.CreateElement("confirmationslog");
		мДокXML.AppendChild(group);
		group1 = мДокXML.CreateElement("confirmations");
		group.AppendChild(group1);
		
		Попытка     
			Если АвтоматическаяВыгрузкаПоРасписанию Тогда
				Если НужноВыполнятьВыгрузку(ПолноеИмяФайлаЛога) Тогда
					мДокXML.Save(ПолноеИмяФайлаЛога);
				КонецЕсли;
			Иначе
				ДобавитьАдресФайлаВременногоХранилищаВМассив(мДокXML, КаталогДанных + "confirmationslog.xml");	
			КонецЕсли;
		Исключение
			СообщитьПодробно(ПолноеИмяФайлаЛога, 0, 0, 3, "Ошибка");
			СообщитьПодробно(ОписаниеОшибки(), 0, 0, 3, "Ошибка");
		КонецПопытки;
	КонецЕсли;
	
	//////////Попытка
	//////////	chicago = мДокXML.DocumentElement.selectSingleNode("chicago");
	//////////Исключение
	//////////КонецПопытки;
	
	////////////////////////////////////////////////////
	//СОЗДАНИЕ ПУСТЫХ ЗАГОТОВОК ФАЙЛОВ (конец)
	////////////////////////////////////////////////////
	//необходимо, чтобы не завалилась репликация
	////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, предварительная (начало)
	////////////////////////////////////////////////////	
	Если АвтоматическаяВыгрузкаПоРасписанию Тогда 		
		Файл = Новый Файл(КаталогДанных + "intlogs");
		Если Файл.Существует() = 0 Тогда
			Попытка
				СоздатьКаталог(КаталогДанных + "intlogs");
			Исключение
				Сообщить("Не удалось создать каталог " + КаталогДанных + "intlogs", СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	Иначе
		мМассивАдресовФайловВоВременномХранилище.Добавить(Новый Структура("ПутьФайла, АдресВоВременномХранилище", КаталогДанных + "intlogs"));		
	КонецЕсли;

	ПолноеИмяФайлаXMLЛога = КаталогДанных + "logdataexchangeaudit.xml";
	Если СоздатьНесуществующиеПодкаталоги(ПолноеИмяФайлаXMLЛога) = 0 Тогда
		Сообщить("Не удалось создать файл " + ПолноеИмяФайлаXMLЛога, СтатусСообщения.Важное);
	КонецЕсли;

	мЛогXML = Новый COMОбъект(мТипXMLБибилиотеки);

	мGroupLogXML = XMLВыполнитьОперацию("СоздатьXML", мЛогXML, , "LogDataExchangeAudits");
	мGroupLogXML.SetAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	мGroupLogXML.SetAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, предварительная (конец)
	////////////////////////////////////////////////////
	
	//СообщитьПодробно("", 0, 0, 1);
	СообщитьПодробно("Выгрузка данных для ""ST-Чикаго""...", 0, 3, 1);
	отчДобавитьВОтчетСтроку("за период с " + Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	отчДобавитьВОтчетСтроку("Каталог данных:  " + КаталогДанных);
	//
	
	
	ВыгрузитьСправочники();		//создаем файл выгрузки references.xml
	
	ВыгрузитьРегистры();		//создаем файл выгрузки registers.xml
	//
	//ВыгрузитьДокументы();		//создаем файл выгрузки documents.xml
	//
	СообщитьПодробно("Выгрузка данных для ""ST-Чикаго"" завершена.", 0, 3, 1);
	отчДобавитьВОтчет("Выгрузка данных  завершена", "Заголовок", 1, 1);
	отчЗакрытьОтчет();
	//СообщитьПодробно("", 0, 0, 1);
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (начало)
	////////////////////////////////////////////////////
		
	мЛогXML.AppendChild(мGroupLogXML);
	
	ИмяФайлаXMLЛога 		= КаталогДанных + "logdataexchangeaudit.xml";
	ИмяФайлаXMLЛогаКопия 	= КаталогДанных + СоздатьИмяФайлаИзШаблона("intlogs\logdataexchangeauditYYYYMMDDHHMMSS.xml");
	Если АвтоматическаяВыгрузкаПоРасписанию Тогда
		Если НужноВыполнятьВыгрузку(ИмяФайлаXMLЛога) Тогда
			мЛогXML.Save(ИмяФайлаXMLЛога);
			мЛогXML.Save(ИмяФайлаXMLЛогаКопия);
		КонецЕсли;
	Иначе     
		ДобавитьАдресФайлаВременногоХранилищаВМассив(мЛогXML, ИмяФайлаXMLЛога, ИмяФайлаXMLЛогаКопия);
	КонецЕсли;
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (конец)
	////////////////////////////////////////////////////
	
	Если Не АвтоматическаяВыгрузкаПоРасписанию Тогда 
		МассивАдресовФайловВоВременномХранилище = мМассивАдресовФайловВоВременномХранилище;
	КонецЕсли;
	
КонецПроцедуры 

#Область ПредварительныеЗапросы

//Процедура ПолучитьДоступныеЭлементыСправочника(ИмяОбъектаВыгрузки, МассивВыгружаемыхЭлементов, ТекстСообщенияНачалаВыгрузки, ИмяНабораДанных, ИмяПоляВыборки) Экспорт
//	
//	МассивВыгружаемыхЭлементов = Новый Массив;
//	Если ОбъектыВыгрузки.НайтиСтроки(Новый Структура("Название, Включен, Отметка", ИмяОбъектаВыгрузки, Истина, Истина)).Количество() = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СообщитьПодробно(ТекстСообщенияНачалаВыгрузки, 1, 1, 1);
//		
//	Запрос = Новый Запрос(мМакетКомпоновки.НаборыДанных[ИмяНабораДанных].Запрос);
//	Для Каждого ЗначениеПараметра Из мМакетКомпоновки.ЗначенияПараметров Цикл 
//		Если СтрНайти(Запрос.Текст, "&" + ЗначениеПараметра.Имя) > 0 Тогда
//			Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);			
//		КонецЕсли;
//	КонецЦикла;
//	
//	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
//		МассивВыгружаемыхЭлементов.Добавить(ВыборкаДетальныеЗаписи[ИмяПоляВыборки]);		
//	КонецЦикла;

//КонецПроцедуры

//Процедура ПредварительныеЗапросы() Экспорт
//	
//	СКД = ПолучитьМакет("ФильтрыВыгрузки");
//	СКД_КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
//	СКД_КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
//	СКД_КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
//	
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	мМакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, СКД_КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

//	//Номенклатура
//	ПолучитьДоступныеЭлементыСправочника("Товары", мМассивВыгружаемыхТоваров, "Запрос по доступным товарам...", "Номенклатура", "Товары"); 
//	Если мМассивВыгружаемыхТоваров.Количество() = 0 Тогда 
//		ПолучитьДоступныеЭлементыСправочника("ГруппыТоваров", мМассивВыгружаемыхТоваров, "Запрос по доступным товарам...", "Номенклатура", "Товары"); 
//	КонецЕсли;  
//	
//	//Организации
//	ПолучитьДоступныеЭлементыСправочника("Фирмы", мМассивВыгружаемыхОрганизаций, "Запрос по доступным организациям...", "Организации", "Фирмы"); 
//	Если мМассивВыгружаемыхОрганизаций.Количество() = 0 Тогда
//		ПолучитьДоступныеЭлементыСправочника("СвоиЮрЛица", мМассивВыгружаемыхОрганизаций, "Запрос по доступным организациям...", "Организации", "Фирмы"); 
//	КонецЕсли;
//	
//	//ФизическиеЛица
//	ПолучитьДоступныеЭлементыСправочника("Сотрудники", мМассивВыгружаемыхСотрудников, "Запрос по доступным сотрудникам...", "Сотрудники", "Сотрудники"); 
//	
//	//Склады 
//	ПолучитьДоступныеЭлементыСправочника("Склады", мМассивВыгружаемыхСкладов, "Запрос по доступным складам...", "Склады", "Склады"); 
//	
//	//ВидыЦен
//	ПолучитьДоступныеЭлементыСправочника("ТипыЦен", мМассивВыгружаемыхВидовЦен, "Запрос по доступным видам цен...", "ВидыЦен", "ВидыЦен"); 
//	
//	//Контрагенты
//	ПолучитьДоступныеЭлементыСправочника("Покупатели", мМассивВыгружаемыхКонтрагентов, "Запрос по доступным покупателям...", "Контрагенты", "Покупатели");  
//	Если мМассивВыгружаемыхКонтрагентов.Количество() = 0 Тогда 
//		ПолучитьДоступныеЭлементыСправочника("ФормальныеПокупатели", мМассивВыгружаемыхКонтрагентов, "Запрос по доступным покупателям...", "Контрагенты", "Покупатели");  
//	КонецЕсли; 
//	
//	мВыборкаКонтрагенты = Неопределено;
//	мТаблицаКонтактнойИнформацииКонтрагентов = Неопределено;
//	
//КонецПроцедуры

Функция ПолучитьЗапросВыгружаемогоСправочника(ИмяОбъектаВыгрузки, ИмяНабораДанных, ФильтрУстановлен = Ложь) Экспорт
	
	Если ОбъектыВыгрузки.НайтиСтроки(Новый Структура("Название, Включен, Отметка", ИмяОбъектаВыгрузки, Истина, Истина)).Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос(мМакетКомпоновки.НаборыДанных[ИмяНабораДанных].Запрос);
	Для Каждого ЗначениеПараметра Из мМакетКомпоновки.ЗначенияПараметров Цикл 
		Если СтрНайти(Запрос.Текст, "&" + ЗначениеПараметра.Имя) > 0 Тогда
			Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ЗначениеПараметра.Значение);			
			ФильтрУстановлен = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Запрос;

КонецФункции

Функция ОбязательныеФильтрыУстановлены() Экспорт
	
	СКД = ПолучитьМакет("ФильтрыВыгрузки");
	СКД_КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	СКД_КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	СКД_КомпоновщикНастроек.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	мМакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, СКД_КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

	//Номенклатура (только с отбором)           
	ФильтрПоНоменклатуреУстановлен = Ложь;
	ЗапросНоменклатура = ПолучитьЗапросВыгружаемогоСправочника("Товары", "Номенклатура", ФильтрПоНоменклатуреУстановлен);
	Если ЗапросНоменклатура = Неопределено Тогда 
		ЗапросНоменклатура = ПолучитьЗапросВыгружаемогоСправочника("ГруппыТоваров", "Номенклатура", ФильтрПоНоменклатуреУстановлен); 
	КонецЕсли;
	Если ЗапросНоменклатура = Неопределено Тогда 
		ЗапросНоменклатура = ПолучитьЗапросВыгружаемогоСправочника("Остатки", "Номенклатура", ФильтрПоНоменклатуреУстановлен); 
	КонецЕсли;

	//Организации
	ФильтрПоОрганизациямУстановлен = Ложь;
	ЗапросОрганизации = ПолучитьЗапросВыгружаемогоСправочника("Фирмы", "Организации", ФильтрПоОрганизациямУстановлен);
	Если ЗапросОрганизации = Неопределено Тогда 
		ЗапросОрганизации = ПолучитьЗапросВыгружаемогоСправочника("СвоиЮрЛица", "Организации", ФильтрПоОрганизациямУстановлен); 
	КонецЕсли;
	Если ЗапросОрганизации = Неопределено Тогда 
		ЗапросОрганизации = ПолучитьЗапросВыгружаемогоСправочника("Остатки", "Организации", ФильтрПоОрганизациямУстановлен); 
	КонецЕсли;
	
	//ФизическиеЛица
	ФильтрПоФизическимЛицамУстановлен = Ложь;
	ЗапросФизическиеЛица = ПолучитьЗапросВыгружаемогоСправочника("Сотрудники", "Сотрудники", ФильтрПоФизическимЛицамУстановлен);
	
	//Склады
	ФильтрПоСкладамУстановлен = Ложь;
	ЗапросСклады = ПолучитьЗапросВыгружаемогоСправочника("Склады", "Склады", ФильтрПоСкладамУстановлен);
	Если ЗапросСклады = Неопределено Тогда 
		ЗапросСклады = ПолучитьЗапросВыгружаемогоСправочника("Остатки", "Склады", ФильтрПоСкладамУстановлен); 
	КонецЕсли;
	
	//ВидыЦен
	ЗапросВидыЦен = ПолучитьЗапросВыгружаемогоСправочника("ТипыЦен", "ВидыЦен"); 
	
	//Контрагенты
	ФильтрПоКонтрагентамУстановлен = Ложь;
	ЗапросКонтрагенты = ПолучитьЗапросВыгружаемогоСправочника("Покупатели", "Контрагенты", ФильтрПоКонтрагентамУстановлен);
	Если ЗапросКонтрагенты = Неопределено Тогда 
		ЗапросКонтрагенты = ПолучитьЗапросВыгружаемогоСправочника("ФормальныеПокупатели", "Контрагенты", ФильтрПоКонтрагентамУстановлен); 
	КонецЕсли;
	
	ФильтрыУстановлены = Истина;
	
	Если Не ЗапросНоменклатура = Неопределено и НЕ ФильтрПоНоменклатуреУстановлен Тогда 
		СообщитьПодробно("Не установлен обязательный фильтр по товарам!", 2, 0, 4);	
		ФильтрыУстановлены = Ложь;
	КонецЕсли;
	
	Если Не ЗапросОрганизации = Неопределено и НЕ ФильтрПоОрганизациямУстановлен Тогда 
		СообщитьПодробно("Не установлен обязательный фильтр по фирмам!", 2, 0, 4);	
		ФильтрыУстановлены = Ложь;
	КонецЕсли;
	
	Если Не ЗапросФизическиеЛица = Неопределено и НЕ ФильтрПоФизическимЛицамУстановлен Тогда 
		СообщитьПодробно("Не установлен обязательный фильтр по сотрудникам!", 2, 0, 4);	
		ФильтрыУстановлены = Ложь;
	КонецЕсли;
	
	Если Не ЗапросСклады = Неопределено и НЕ ФильтрПоСкладамУстановлен Тогда 
		СообщитьПодробно("Не установлен обязательный фильтр по складам!", 2, 0, 4);	
		ФильтрыУстановлены = Ложь;
	КонецЕсли;    
	
	Если Не ЗапросКонтрагенты = Неопределено и НЕ ФильтрПоКонтрагентамУстановлен Тогда 
		СообщитьПодробно("Не установлен обязательный фильтр по контрагентам!", 2, 0, 4);	
		ФильтрыУстановлены = Ложь;
	КонецЕсли;
	
	//Если Не ФильтрыУстановлены Тогда 
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если Не ЗапросНоменклатура = Неопределено Тогда 
		ВыполнитьЗапросВыгружаемогоСправочника(ЗапросНоменклатура, "Товары", мМассивВыгружаемыхТоваров);
	КонецЕсли;
	
	Если Не ЗапросОрганизации = Неопределено Тогда 
		ВыполнитьЗапросВыгружаемогоСправочника(ЗапросОрганизации, "Фирмы", мМассивВыгружаемыхОрганизаций);
	КонецЕсли;
	
	Если Не ЗапросФизическиеЛица = Неопределено Тогда 
		ВыполнитьЗапросВыгружаемогоСправочника(ЗапросФизическиеЛица, "Сотрудники", мМассивВыгружаемыхСотрудников);
	КонецЕсли;
	
	Если Не ЗапросСклады = Неопределено Тогда 
		ВыполнитьЗапросВыгружаемогоСправочника(ЗапросСклады, "Склады", мМассивВыгружаемыхСкладов);
	КонецЕсли;
	
	Если Не ЗапросКонтрагенты = Неопределено Тогда 
		ЗапросКонтрагенты.УстановитьПараметр("СегментПартнеров", СегментПартнеров);
		ЗапросКонтрагенты.УстановитьПараметр("МассивОрганизаций", мМассивВыгружаемыхОрганизаций);
		ВыполнитьЗапросВыгружаемогоСправочника(ЗапросКонтрагенты, "Покупатели", мМассивВыгружаемыхКонтрагентов);
	КонецЕсли;
	
	Если Не ЗапросВидыЦен = Неопределено Тогда
		ЗапросВидыЦен.УстановитьПараметр("МассивОрганизаций", мМассивВыгружаемыхОрганизаций);
		ЗапросВидыЦен.УстановитьПараметр("МассивКонтрагентов", мМассивВыгружаемыхКонтрагентов);
		ВыполнитьЗапросВыгружаемогоСправочника(ЗапросВидыЦен, "ВидыЦен", мМассивВыгружаемыхВидовЦен);
	КонецЕсли;
	
	мВыборкаКонтрагенты = Неопределено;
	мТаблицаКонтактнойИнформацииКонтрагентов = Неопределено;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьЗапросВыгружаемогоСправочника(Запрос, ИмяПоляВыборки, МассивВыгружаемыхЭлементов)
	
	МассивВыгружаемыхЭлементов = Новый Массив;
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		МассивВыгружаемыхЭлементов.Добавить(ВыборкаДетальныеЗаписи[ИмяПоляВыборки]);		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти   

#Область ВыгрузкаСправочников

Функция ЕдиницаПоКлассификаторуКоробка()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Код = ""8751""";
	ВыборкаКоробка = Запрос.Выполнить().Выбрать();
	Если ВыборкаКоробка.Следующий() Тогда 
		Возврат ВыборкаКоробка.Ссылка;		
	КонецЕсли;

КонецФункции // УпаковкаКоробка()

Процедура ВыгрузитьСправочники() Экспорт
		
	лБылаВыгрузка		= 0;
	лИмяФайлаВыгрузки	= "references.xml";
	
	мДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);
	group = XMLВыполнитьОперацию("СоздатьXML", мДокXML, лИмяФайлаВыгрузки, "references", "Справочники");
	
	Для Каждого СтрокаТЧОбъектВыгрузки Из ОбъектыВыгрузки Цикл
		Если СтрокаТЧОбъектВыгрузки.ТипОбъектов <> "С" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ (СтрокаТЧОбъектВыгрузки.Включен и СтрокаТЧОбъектВыгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
		
		//лНазвание		= СтрокаТЧОбъектВыгрузки.Название;
		//лПредставление	= СтрокаТЧОбъектВыгрузки.Представление;
		//лXMLСекция		= СтрокаТЧОбъектВыгрузки.XMLСекция;
			
		Если лБылаВыгрузка = 0 Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("Справочники"		, "Текст");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр1");
			лСЗнДанные.Добавить(""					, "Параметр2");
			отчДобавитьВОтчет(лСЗнДанные, "Шапка");
			лБылаВыгрузка	= 1;
		КонецЕсли;
		
		мКолвоОбъектов	= 0;
		лДатаНачала		= ТекущаяДата();
		лВремяНачала	= XMLВернутьВремя();
		СообщитьПодробно("Выгрузка данных """ + СтрокаТЧОбъектВыгрузки.Представление + """...", 1, 1, 1);
		
		лПроцедура	= СтрокаТЧОбъектВыгрузки.Процедура;
		мСчетчикВыгрузки = 0;
		Выполнить(лПроцедура + "(group, СтрокаТЧОбъектВыгрузки.XMLСекция)");
		
		лСЗнДанные	= Новый СписокЗначений();
		лСЗнДанные.Добавить(СтрокаТЧОбъектВыгрузки.Представление	, "Текст");
		лСЗнДанные.Добавить(лВремяНачала	, "Параметр1");
		лСЗнДанные.Добавить(мКолвоОбъектов	, "Параметр2");
		отчДобавитьВОтчет(лСЗнДанные, "Действие");
		
		СообщитьПодробно("Выгрузка данных """ + СтрокаТЧОбъектВыгрузки.Представление + """ завершена." + " Выгружено элементов: " + мСчетчикВыгрузки, 1, 1, 1);
		
		ВывестиВXMLЛог(лДатаНачала, лВремяНачала, СтрокаТЧОбъектВыгрузки.XMLСекция + "; Выгружено объектов; " + мКолвоОбъектов);

	КонецЦикла;
	
	Если xmlВыполнитьОперацию("СохранитьXML", мДокXML, лИмяФайлаВыгрузки, group) = 0 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры	//ВыгрузитьСправочники()

Процедура ВыгрузитьСпрСтавкиНДС(group, XMLСекция)
	
	//<VATRates> <!--ставки НДС-->
	//	<vatrate>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование ставки НДС-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<rate/>		<!--процент ставки НДС (15, 4)-->
	//	</vatrate>
	//</VATRates>
	
	VATRates = мДокXML.CreateElement("VATRates");

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка,
		|	СтавкиНДС.Порядок + 1 КАК Порядок,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СтавкиНДС.Ссылка) КАК Представление,
		|	ВЫБОР
		|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|			ТОГДА 18
		|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|			ТОГДА 10
		|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|			ТОГДА 0
		|		КОГДА СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
		|				ИЛИ СтавкиНДС.Ссылка = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
		|			ТОГДА 20
		|	КОНЕЦ КАК rate
		|ИЗ
		|	Перечисление.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	НЕ СтавкиНДС.Ссылка В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Если АктивныйФилиал = "Белуга Маркет Восток" или АктивныйФилиал = "Белуга Маркет Хабаровск" тогда
		//Выгружаем нулевой ндс	
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0), ", ""); 
	КонецЕсли;	
	
	ВыборкаСтавкиНДС = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСтавкиНДС.Следующий() Цикл
		vatrate	= ДобавитьОбъект(мДокXML, ВыборкаСтавкиНДС.Представление, "vatrate");
		
		ДобавитьПотомка(vatrate, "code"		, ВыборкаСтавкиНДС.Порядок);
		ДобавитьПотомка(vatrate, "name"		, ВыборкаСтавкиНДС.Представление);
		ДобавитьПотомка(vatrate, "deleted"	, 0);	
		ДобавитьПотомка(vatrate, "rate"		, ВыборкаСтавкиНДС.rate);
		
		ДобавитьНоду(VATRates, vatrate);		
	КонецЦикла;


	ДобавитьНоду(group, VATRates);
	
КонецПроцедуры	//ВыгрузитьСпрСтавкиНДС()

Процедура ВыгрузитьСпрОКЕИ(group, XMLСекция)
	
	//<units>	 <!--единицы измерения товаров-->
	//	<unit>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование единицы измерения-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<shortname/>	<!--краткое наименование единицы измерения-->
	//	</unit>
	//</units>
	
	units = мДокXML.CreateElement("units");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения,
		|	УпаковкиЕдиницыИзмерения.Код КАК Код,
		|	УпаковкиЕдиницыИзмерения.Наименование КАК Наименование,
		|	УпаковкиЕдиницыИзмерения.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
		|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	И УпаковкиЕдиницыИзмерения.Код В (""796 "", ""868 "", ""8751 "")";
	
	Если НЕ АктивныйФилиал = "Белуга Маркет Восток" тогда //выгружаем только шт, коробки и бутылки
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И УпаковкиЕдиницыИзмерения.Код В (""796 "", ""868 "", ""8751 "")", "");
	КонецЕсли;
	
	ВыборкаЕдиницИзмерения = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЕдиницИзмерения.Следующий() Цикл
		
		unit	= ДобавитьОбъект(мДокXML, ВыборкаЕдиницИзмерения.Наименование, "unit");
		
		ДобавитьПотомка(unit, "code"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаЕдиницИзмерения.ЕдиницаИзмерения));
		ДобавитьПотомка(unit, "name"		, ?(СокрЛП(ВыборкаЕдиницИзмерения.НаименованиеПолное) = "", ВыборкаЕдиницИзмерения.Наименование, ВыборкаЕдиницИзмерения.НаименованиеПолное));
		ДобавитьПотомка(unit, "deleted"		, 0);	
		ДобавитьПотомка(unit, "shortname"	, ВыборкаЕдиницИзмерения.Наименование);
		
		ДобавитьНоду(units, unit);
	
	КонецЦикла;
	
	ДобавитьНоду(group, units);
	
КонецПроцедуры

Процедура ВыгрузитьСпрВалюты(group, XMLСекция)
	
	//<currencies> <!--валюты-->
	//	<currency>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование nvarchar(50)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<currencycode/>		<!--международный код-->
	//		<notation/>		<!--международная нотация-->
	//		<isbasecurrency/>	<!--признак того, что валюта явлется основной-->
	//		<rate/>			<!--курс по отношению к основной валюте-->
	//	</currency>
	//</currencies>
	
	currencies = мДокXML.CreateElement("currencies");
	
#Область ВыгрузкаВсехВалютНеИспользуется
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Валюты.Ссылка КАК Валюта,
	//	|	Валюты.Код КАК Код,
	//	|	Валюты.Наименование КАК Наименование,
	//	|	Валюты.НаименованиеПолное КАК НаименованиеПолное,
	//	|	КурсыВалютСрезПоследних.Курс КАК КурсВалюты,
	//	|	ВЫБОР
	//	|		КОГДА ВалютаРегламентированногоУчета.Значение ЕСТЬ NULL
	//	|			ТОГДА 0
	//	|		ИНАЧЕ 1
	//	|	КОНЕЦ КАК ВалютаРегламентированногоУчета
	//	|ИЗ
	//	|	Справочник.Валюты КАК Валюты
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	//	|		ПО Валюты.Ссылка = КурсыВалютСрезПоследних.Валюта
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	//	|		ПО Валюты.Ссылка = ВалютаРегламентированногоУчета.Значение"; 	
	//Запрос.УстановитьПараметр("Период", Период.ДатаОкончания);
	//
	//ВыборкаВалюты = Запрос.Выполнить().Выбрать();
	//	
	//Пока ВыборкаВалюты.Следующий() Цикл
	//				
	//	currency	= ДобавитьОбъект(мДокXML, ВыборкаВалюты.Наименование, "currency");
	//	
	//	ДобавитьПотомка(currency, "code"			, СТ_ЗначениеВСтрокуВнутр(ВыборкаВалюты.Валюта));
	//	ДобавитьПотомка(currency, "name"			, СокрЛП(ВыборкаВалюты.НаименованиеПолное));
	//	ДобавитьПотомка(currency, "deleted"			, 0);	
	//	ДобавитьПотомка(currency, "currencycode"	, ВыборкаВалюты.Код);
	//	ДобавитьПотомка(currency, "notation"		, СокрЛП(ВыборкаВалюты.Наименование));
	//	ДобавитьПотомка(currency, "isbasecurrency"	, ВыборкаВалюты.ВалютаРегламентированногоУчета);
	//	ДобавитьПотомка(currency, "rate"			, ВыборкаВалюты.КурсВалюты);
	//	
	//	ДобавитьНоду(currencies, currency);
	//	
	//КонецЦикла;
#КонецОбласти

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Валюты.Ссылка КАК Валюта,
		|	Валюты.Код КАК Код,
		|	Валюты.Наименование КАК Наименование,
		|	Валюты.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Валюты КАК Валюты
		|ГДЕ
		|	Валюты.Код = ""643""";
	
	Запрос.УстановитьПараметр("Период", Период.ДатаОкончания);
	
	ВыборкаВалюты = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаВалюты.Следующий() Цикл
					
		currency	= ДобавитьОбъект(мДокXML, ВыборкаВалюты.Наименование, "currency");
		
		ДобавитьПотомка(currency, "code"			, СТ_ЗначениеВСтрокуВнутр(ВыборкаВалюты.Валюта));
		ДобавитьПотомка(currency, "name"			, СокрЛП(ВыборкаВалюты.НаименованиеПолное));
		ДобавитьПотомка(currency, "deleted"			, 0);	
		ДобавитьПотомка(currency, "currencycode"	, ВыборкаВалюты.Код);
		ДобавитьПотомка(currency, "notation"		, СокрЛП(ВыборкаВалюты.Наименование));
		ДобавитьПотомка(currency, "isbasecurrency"	, 1);
		ДобавитьПотомка(currency, "rate"			, 1);
		
		ДобавитьНоду(currencies, currency);
		
	КонецЦикла;
	
	ДобавитьНоду(group, currencies);
	
КонецПроцедуры

Процедура ВыгрузитьСпрТипыЦен(group, XMLСекция)
	
	//<pricetypes>  <!--типы цен-->
	//	<pricetype>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование типа цен-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<basecode/>	<!--код базового типа цен-->
	//		<rate/>		<!--процент наценки к базовому типу цены (15,4)-->
	//		<currencycode/>	<!--код валюты-->
	//	</pricetype>
	//</pricetypes>
	
	pricetypes	= мДокXML.CreateElement("pricetypes");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК ВидЦен,
	|	ВидыЦен.Наименование КАК Наименование,
	|	ВидыЦен.ВалютаЦены КАК ВалютаЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка В(&МассивВидовЦен)";
	Запрос.УстановитьПараметр("МассивВидовЦен",мМассивВыгружаемыхВидовЦен);
	ВыборкаВидыЦен = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаВидыЦен.Следующий() Цикл
		
		pricetype	= ДобавитьОбъект(мДокXML, ВыборкаВидыЦен.Наименование, "pricetype");
		
		ДобавитьПотомка(pricetype, "code"			, СТ_ЗначениеВСтрокуВнутр(ВыборкаВидыЦен.ВидЦен));
		ДобавитьПотомка(pricetype, "name"			, ВыборкаВидыЦен.Наименование);
		ДобавитьПотомка(pricetype, "deleted"		, 0);		
		ДобавитьПотомка(pricetype, "basecode"		, "");
		ДобавитьПотомка(pricetype, "rate"			, "");	
		ДобавитьПотомка(pricetype, "currencycode"	, СТ_ЗначениеВСтрокуВнутр(ВыборкаВидыЦен.ВалютаЦены));
		
		ДобавитьНоду(pricetypes, pricetype);
		
	КонецЦикла;
	//
	//НовыйОбъектБД - Справочники.син_ст_КонстантыОбмена. В УПП выгружаются типы цен участвующие в оборотах продаж за период + 
	//+ тип цены из констант син_ст_КонстантыОбмена["ОсновнойТипЦен"].Значение
	//Сейчас же из ЕРП выгружаются все виды цен
	//
	
	//// выгружаем только один тип цены - из настроек констант
	//// проверяем, выгружен ли тип по умолчанию
	//Если мИспользоватьКонстанты и ЗначениеЗаполнено(мКонстантаТипЦен)Тогда
	//	Если лСЗнВыгруженныеТипыЦен.НайтиПоЗначению(мКонстантаТипЦен) = Неопределено Тогда
	//		// не задан в отборе, добавляем принудительно
	//		pricetype	= ДобавитьОбъект(мДокXML, Строка(мКонстантаТипЦен), "pricetype");
	//		
	//		ДобавитьПотомка(pricetype, "code"			, СТ_ЗначениеВСтрокуВнутр(мКонстантаТипЦен));
	//		ДобавитьПотомка(pricetype, "name"			, СокрЛП(мКонстантаТипЦен.Наименование));
	//		ДобавитьПотомка(pricetype, "deleted"		, 0);
	//		ДобавитьПотомка(pricetype, "basecode"		, "");
	//		ДобавитьПотомка(pricetype, "rate"			, "");	
	//		ДобавитьПотомка(pricetype, "currencycode"	, СТ_ЗначениеВСтрокуВнутр(мКонстантаТипЦен.ВалютаЦены));
	//		
	//		ДобавитьНоду(pricetypes, pricetype);
	//		лСЗнВыгруженныеТипыЦен.Добавить(мКонстантаТипЦен);
	//	КонецЕсли;
	//КонецЕсли;
	
	ДобавитьНоду(group, pricetypes);
	
КонецПроцедуры

Процедура ВыгрузитьСпрСклады(group, XMLСекция)
	
	//<stores> <!--склады-->
	//	<store>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование склада-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<storekeepercode/>	<!-- код кладовщика - emloyees-->
	//		<storetype/>		<!--тип склада - 1=Автомобиль,2=Наземный,3=Временный-->
	//	</store>
	//</stores>
	
	НайденныйСклад = мМассивВыгружаемыхСкладов.Найти(
		бг_КонстантыПовтИсп.ЗначениеКонстанты("ОсновнойСкладОтгрузки", Пользователь));
	stores	= мДокXML.CreateElement("stores");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Склад,
		|	Склады.Представление КАК Представление,
		|	Склады.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В (&МассивСкладов)";
	
	Запрос.УстановитьПараметр("МассивСкладов", мМассивВыгружаемыхСкладов); 
	ВыборкаСклады = Запрос.Выполнить().Выбрать();
		
	Пока ВыборкаСклады.Следующий() Цикл		
			
		store	= ДобавитьОбъект(мДокXML, ВыборкаСклады.Представление, "store");
		
		ДобавитьПотомка(store, "code"			, СТ_ЗначениеВСтрокуВнутр(ВыборкаСклады.Склад));
		ДобавитьПотомка(store, "name"			, СокрЛП(ВыборкаСклады.Наименование));
		ДобавитьПотомка(store, "deleted"		, 0);		
		ДобавитьПотомка(store, "storetype"		, 2);
		
		ДобавитьНоду(stores, store);
		
	КонецЦикла;

	//Доделать выгрузку значения умолчанию из константы
	//Если мИспользоватьКонстанты Тогда
	//	//проверяем, выгружен ли тип по умолчанию
	//	Если лСЗнВыгруженныеСклады.НайтиПоЗначению(мКонстантаСклад) = Неопределено Тогда
	//		// не задан в отборе, добавляем принудительно
	//		store	= ДобавитьОбъект(ДокXML, Строка(мКонстантаСклад), "store");
	//		
	//		ДобавитьПотомка(store, "code"			, СТ_ЗначениеВСтрокуВнутр(мКонстантаСклад));
	//		ДобавитьПотомка(store, "name"			, СокрЛП(мКонстантаСклад.Наименование));
	//		ДобавитьПотомка(store, "deleted"		, 0);
	//		
	//		ДобавитьПотомка(store, "storetype"		, 2);
	//		
	//		ДобавитьНоду(stores, store);
	//		лСЗнВыгруженныеСклады.Добавить(мКонстантаСклад);
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
	ДобавитьНоду(group, stores);
	
КонецПроцедуры

Процедура ВыгрузитьСпрСотрудники(group, XMLСекция)
	
	//<employees>
	//	<employee>   <!--сотрудники-->
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--намименование сотрудника nvarchar(50)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<firstname/>	<!--имя сотрудника nvarchar(50)-->
	//		<lastname/>		<!--фамилия сотрудника nvarchar(50)-->
	//		<middlename/>	<!--отчество сотрудника nvarchar(50)-->
	//		<address/>		<!--адрес прописки nvarchar(255)-->
	//		<factaddress/>	<!--адрес проживания nvarchar(255)-->
	//		<INN/>			<!--номер налогоплательщика nvarchar(12)-->
	//		<passport/>		<!--документ, удостоверяющий личность nvarchar(50)-->
	//		<phone/>		<!--телефон nvarchar(50)-->
	//	</employee>
	//</employees>
	
	employees	= мДокXML.CreateElement("employees");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	ФизическиеЛица.Представление КАК Представление,
		|	ФизическиеЛица.Представление КАК Наименование
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|   ФизическиеЛица.Ссылка В (&МассивФизЛиц)";
	
	Запрос.УстановитьПараметр("МассивФизЛиц", мМассивВыгружаемыхСотрудников);
	ВыборкаФизическиеЛица = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаФизическиеЛица.Следующий() Цикл
		
		employee	= ДобавитьОбъект(мДокXML, ВыборкаФизическиеЛица.Представление, "employee");
		
		ДобавитьПотомка(employee, "code"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаФизическиеЛица.ФизическоеЛицо));
		ДобавитьПотомка(employee, "name"		, СокрЛП(ВыборкаФизическиеЛица.Наименование));
		ДобавитьПотомка(employee, "deleted"		, 0);
		
		ДобавитьНоду(employees, employee);	
	КонецЦикла;
		
	ДобавитьНоду(group, employees);
	
КонецПроцедуры

Процедура ВыгрузитьСпрФирмы(group, XMLСекция)
	
	//<firms>	<!--фирмы-->
	//	<firm>
	//		<code/>				<!--код элемента в УС-->
	//		<name/>				<!--наименование фирмы-->
	//		<deleted/>			<!--признак того, что элемент был удален-->
	//		
	//		<bankaccount/>			<!--расчетный счет-->
	//		<ownjuridicalpersoncode/>	<!--код юридического лица - ownjuridicalpersons-->
	//	</firm>
	//</firms>
	
	firms	= мДокXML.CreateElement("firms");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.Наименование КАК Наименование,
		|	Организации.Представление КАК Представление
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&МассивОрганизаций)";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", мМассивВыгружаемыхОрганизаций);
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		//Доделать отбор
		//Если НЕ ПодходитПоОтбору("Фирмы", лЭлемент) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		firm	= ДобавитьОбъект(мДокXML, Строка(ВыборкаОрганизации.Представление), "firm");
		
		ДобавитьПотомка(firm, "code"					, СТ_ЗначениеВСтрокуВнутр(ВыборкаОрганизации.Организация));
		ДобавитьПотомка(firm, "name"					, СокрЛП(ВыборкаОрганизации.Наименование));
		ДобавитьПотомка(firm, "deleted"					, 0);
		
		//Доделать ОсновнойБанковскийСчет
		//Если ЗначениеЗаполнено(лСпр.ОсновнойБанковскийСчет) Тогда
		//	ДобавитьПотомка(firm, "bankaccount"			, СокрЛП(лСпр.ОсновнойБанковскийСчет.НомерСчета));
		//КонецЕсли;
		ДобавитьПотомка(firm, "ownjuridicalpersoncode"	, СТ_ЗначениеВСтрокуВнутр(ВыборкаОрганизации.Организация));
		
		ДобавитьНоду(firms, firm);
		
	КонецЦикла;
	
	//Доделать выгрузку значения умолчанию из константы
	//Если мИспользоватьКонстанты и ЗначениеЗаполнено(мКонстантаФирма)Тогда
	//	// проверяем, выгружен ли тип по умолчанию
	//	Если лСЗнВыгруженныеФирмы.НайтиПоЗначению(мКонстантаФирма) = Неопределено Тогда
	//		// не задан в отборе, добавляем принудительно
	//		firm	= ДобавитьОбъект(ДокXML, Строка(мКонстантаФирма), "firm");
	//		
	//		ДобавитьПотомка(firm, "code"					, СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма));
	//		ДобавитьПотомка(firm, "name"					, СокрЛП(мКонстантаФирма.Наименование));
	//		ДобавитьПотомка(firm, "deleted"					, 0);
	//		
	//		Если ЗначениеЗаполнено(мКонстантаФирма.ОсновнойБанковскийСчет) Тогда
	//			ДобавитьПотомка(firm, "bankaccount"			, СокрЛП(мКонстантаФирма.ОсновнойБанковскийСчет.НомерСчета));
	//		КонецЕсли;
	//		ДобавитьПотомка(firm, "ownjuridicalpersoncode"	, СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма));
	//		
	//		ДобавитьНоду(firms, firm);
	//		
	//		// добавялем в список значений
	//		лСЗнВыгруженныеФирмы.Добавить(мКонстантаФирма);
	//	КонецЕсли;
	//КонецЕсли;
	//
	ДобавитьНоду(group, firms);
	
КонецПроцедуры

Процедура ВыгрузитьСпрСвоиЮрЛица(group, XMLСекция)
	
	//<ownjuridicalpersons>			<!--юридические лица-->
	//	<ownjuridicalperson>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование юридического лица nvarchar(30)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<address/>		<!--улица, дом, квартира nvarchar(30)-->
	//		<factaddress/>		<!--улица, дом, квартира nvarchar(30)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		
	//		<juridicalname/>	<!--официальное наименование юр. лица nvarchar(30)-->
	//		<INN/>			<!--номер налогоплательщика nvarchar(12)-->
	//		<INNNumber/>		<!--номер свидетельства налогоплательщика nvarchar(10)-->
	//		<VATStatus/>		<!--является ли плательщиком НДС, 1=является, 0=не является-->
	//		
	//		<chiefcode/>		<!--код руководителя - emloyees-->
	//		<accountantcode/>	<!--код главного бухгалтера - emloyees-->
	//		<cashiercode/>		<!--код кассира - emloyees-->
	//	</ownjuridicalperson>
	//</ownjuridicalpersons>
	
	ownjuridicalpersons	= мДокXML.CreateElement("ownjuridicalpersons");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.Наименование КАК Наименование,
		|	Организации.НаименованиеПолное КАК НаименованиеПолное,
		|	Организации.ИНН КАК ИНН,
		|	Организации.КПП КАК КПП,
		|	Организации.Представление КАК Представление
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В (&МассивОрганизаций)";
	
	Запрос.УстановитьПараметр("МассивОрганизаций", мМассивВыгружаемыхОрганизаций);
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать();
	
	ЮрАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	ФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;

	Пока ВыборкаОрганизации.Следующий() Цикл
		
		//Доделать отбор
		//Если НЕ ПодходитПоОтбору("Фирмы", лЭлемент) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ownjuridicalperson	= ДобавитьОбъект(мДокXML, Строка(ВыборкаОрганизации.Представление), "ownjuridicalperson");
		
		ДобавитьПотомка(ownjuridicalperson, "code"			, СТ_ЗначениеВСтрокуВнутр(ВыборкаОрганизации.Организация));
		ДобавитьПотомка(ownjuridicalperson, "name"			, СокрЛП(ВыборкаОрганизации.Наименование));
		ДобавитьПотомка(ownjuridicalperson, "deleted"		, 0);
		
		ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ВыборкаОрганизации.Организация, ЮрАдресОрганизации,,ТекущаяДата());	
		ДобавитьПотомка(ownjuridicalperson, "address"		, СокрЛП(ПредставлениеАдреса));
		          
		ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(ВыборкаОрганизации.Организация, ФактАдресОрганизации,,ТекущаяДата());	
		ДобавитьПотомка(ownjuridicalperson, "factaddress"	, ПредставлениеАдреса);
		
		ДобавитьПотомка(ownjuridicalperson, "phone"			, "");
		
		//ДобавитьПотомка(ownjuridicalperson, "postindex"		, "");
		
		ДобавитьПотомка(ownjuridicalperson, "juridicalname"	, СокрЛП(ВыборкаОрганизации.НаименованиеПолное));
		ДобавитьПотомка(ownjuridicalperson, "INN"			, СокрЛП(ВыборкаОрганизации.ИНН));
		ДобавитьПотомка(ownjuridicalperson, "INNNumber"		, СокрЛП(ВыборкаОрганизации.КПП));
		ДобавитьПотомка(ownjuridicalperson, "VATStatus"		, 1);
		
		//ДобавитьПотомка(ownjuridicalperson, "chiefcode"		, "");
		//ДобавитьПотомка(ownjuridicalperson, "accountantcode", "");
		//ДобавитьПотомка(ownjuridicalperson, "cashiercode"	, "");
		
		ДобавитьНоду(ownjuridicalpersons, ownjuridicalperson);
		
	КонецЦикла;
	
	//Доделать выгрузку значения умолчанию из константы
	//Если мИспользоватьКонстанты и ЗначениеЗаполнено(мКонстантаФирма) Тогда
	//	// проверяем, выгружен ли тип по умолчанию
	//	Если лСЗнВыгруженныеЮрЛица.НайтиПоЗначению(мКонстантаФирма) = Неопределено Тогда
	//		// не задан в отборе, добавляем принудительно
	//		ownjuridicalperson	= ДобавитьОбъект(ДокXML, Строка(мКонстантаФирма), "ownjuridicalperson");
	//		
	//		ДобавитьПотомка(ownjuridicalperson, "code"			, СТ_ЗначениеВСтрокуВнутр(мКонстантаФирма));
	//		ДобавитьПотомка(ownjuridicalperson, "name"			, СокрЛП(мКонстантаФирма.Наименование));
	//		ДобавитьПотомка(ownjuridicalperson, "deleted"		, 0);
	//		
	//		лАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(мКонстантаФирма, "Юридический");
	//		ДобавитьПотомка(ownjuridicalperson, "address"		, СокрЛП(лАдрес));
	//		
	//		лАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(мКонстантаФирма, "Фактический");
	//		ДобавитьПотомка(ownjuridicalperson, "factaddess"	, СокрЛП(лАдрес));
	//		
	//		ДобавитьПотомка(ownjuridicalperson, "address"		, СокрЛП(лАдрес));
	//		ДобавитьПотомка(ownjuridicalperson, "factaddess"	, СокрЛП(лАдрес));
	//		ДобавитьПотомка(ownjuridicalperson, "phone"			, "");
	//		ДобавитьПотомка(ownjuridicalperson, "postindex"		, "");
	//		
	//		ДобавитьПотомка(ownjuridicalperson, "juridicalname"	, СокрЛП(мКонстантаФирма.НаименованиеПолное));
	//		ДобавитьПотомка(ownjuridicalperson, "INN"			, СокрЛП(мКонстантаФирма.ИНН));
	//		ДобавитьПотомка(ownjuridicalperson, "INNNumber"		, СокрЛП(мКонстантаФирма.КПП));
	//		ДобавитьПотомка(ownjuridicalperson, "VATStatus"		, 1);
	//		
	//		ДобавитьПотомка(ownjuridicalperson, "chiefcode"		, "");
	//		ДобавитьПотомка(ownjuridicalperson, "accountantcode", "");
	//		ДобавитьПотомка(ownjuridicalperson, "cashiercode"	, "");
	//		
	//		ДобавитьНоду(ownjuridicalpersons, ownjuridicalperson);
	//		//лСЗнВыгруженныеЮрЛица.Добавить(мКонстантаФирма);
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
	ДобавитьНоду(group, ownjuridicalpersons);
	
КонецПроцедуры

Процедура ВыгрузитьСпрТовары(group, XMLСекция)
	
	//<SKUs> <!-- stock keeping units - товары -->
	//	<SKU>
	//		<code/>			<!--код элемента в УС-->
	//		<name/>			<!--наименование товара nvarchar(100)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<article/>		<!--артикул товара (уникальный смысловой код) nvarchar(15)-->
	
	//		<producercode/>	<!--код ЕК из упаковки-коробки номенклатуры, если таковая была найдена-->
	
	//		<shortname/>	<!--краткое наименование товара (для КПК) (15 символов)-->
	//		<parentcode/>	<!--код группы товара - SKUgroups-->
	//	 	<SKUType/>		<!-- тип товара -->
	//		
	//		<baseunitcode/>		<!--код базовой единицы измерения для товара - units-->
	//		<activeunitcode/>	<!--код активной единицы измерения для товара - units-->
	//		<weight/>			<!--вес базовой единицы измерения товара-->
	//		<VATRateCode/>		<!--код ставки НДС для товара - VATRates-->
	//		
	//		<classifier1code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier2code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier3code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier4code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier5code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier6code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier7code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier8code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier9code/>	<!--код классификатора для товара - classifiers-->
	//		<classifier10code/>	<!--код классификатора для товара - classifiers-->
	//		
	//		<countrycode/>		<!--Страна происхожения-->
	//		<GTD/>				<!--номер Грузовой Таможенной Декларации-->
	//		
	//		<units>			<!--единицы измерения для товара-->
	//			<unit>
	//				<code/>		<!--код единицы измерения-->
	//				<rate/>		<!--коэффициент пересчета в базовую (15,6)-->
	//				<barcode/>	<!--штрихкод-->
	//			</unit>
	//		</units>
	//		
	//		<prices>
	//			<price>
	//				<pricetypecode/>	<!--код типа цен - pricetypes-->
	//				<paytypecode/>		<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->
	//				<unitcode/>		<!--код единицы измерения для товара - units-->
	//				
	//				<price/>		<!--цена (15, 4)-->
	//			</price>
	//		</prices>
	//
	//		<activityhistory>
	//			<event>
	//				<eventtype/>	<!--тип события, 0 - Деактивация, 1 - Активация-->
	//				<eventdate/>	<!--дата события-->
	//			</event>
	//		</activityhistory>
	//	</SKU>
	//</SKUs>
	
	SKUs = мДокXML.CreateElement("SKUs");
	
	ЕдиницаПоКлассификаторуКоробка = ЕдиницаПоКлассификаторуКоробка();
	
	Если ЕдиницаПоКлассификаторуКоробка = Неопределено Тогда 
		СообщитьПодробно("Выгрузка справочника ""Товары"" не может быть произведена, поскольку не найдена единица по классификатору ""Коробка"" с кодом 8751", 1, 0, 1);	
		Возврат;
	КонецЕсли;		 
	
	Запрос	= Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.Представление КАК Представление,
	|	Номенклатура.Родитель КАК Родитель,
	|	Номенклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	Номенклатура.ЕдиницаИзмерения.Объем КАК Емкость,
	|	ЕСТЬNULL(Номенклатура.ТоварнаяКатегория.бг_Объем.Емкость / 10, Номенклатура.ОбъемДАЛ) КАК ОбъемДАЛ,
	|	ВЫБОР
	|		КОГДА НЕ Номенклатура.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				И НЕ Номенклатура.ЕдиницаИзмерения.Знаменатель = 0
	|			ТОГДА Номенклатура.ЕдиницаИзмерения.Числитель / Номенклатура.ЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентБазовойЕдиницыИзмерения,
	|	Номенклатура.СтавкаНДС.ПеречислениеСтавкаНДС КАК ПеречислениеСтавкаНДС
	|ПОМЕСТИТЬ СпрНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|		ПО Номенклатура.ТоварнаяКатегория = ТоварныеКатегории.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатур)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК УпаковкаКоробка,
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры КАК бг_КодЕК_Номенклатуры,
	|	УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель КАК КоличествоВКоробке
	|ПОМЕСТИТЬ НоменклатураИмеющаяУпаковкиКоробки
	|ИЗ
	|	СпрНоменклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО СпрНоменклатура.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|			И (НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления)
	|			И (УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаПоКлассификаторуКоробка)
	|			И (УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры <> """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Наименование КАК Наименование,
	|	СпрНоменклатура.Представление КАК Представление,
	|	СпрНоменклатура.Родитель КАК Родитель,
	|	СпрНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	|	СпрНоменклатура.Код КАК Код,
	|	СпрНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	СпрНоменклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	СпрНоменклатура.Емкость КАК Емкость,
	|	СпрНоменклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	СпрНоменклатура.КоэффициентБазовойЕдиницыИзмерения КАК КоэффициентБазовойЕдиницыИзмерения,
	|	СпрНоменклатура.ПеречислениеСтавкаНДС КАК ПеречислениеСтавкаНДС,
	|	ЕСТЬNULL(НоменклатураИмеющаяУпаковкиКоробки.УпаковкаКоробка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаКоробка,
	|	ЕСТЬNULL(НоменклатураИмеющаяУпаковкиКоробки.бг_КодЕК_Номенклатуры, """") КАК бг_КодЕК_Номенклатуры,
	|	ЕСТЬNULL(НоменклатураИмеющаяУпаковкиКоробки.КоличествоВКоробке, 0) КАК КоличествоВКоробке
	|ИЗ
	|	СпрНоменклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураИмеющаяУпаковкиКоробки КАК НоменклатураИмеющаяУпаковкиКоробки
	|		ПО СпрНоменклатура.Номенклатура = НоменклатураИмеющаяУпаковкиКоробки.Номенклатура";
	
	Запрос.УстановитьПараметр("МассивНоменклатур",				мМассивВыгружаемыхТоваров);
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификаторуКоробка", ЕдиницаПоКлассификаторуКоробка);
	
	ВыборкаНоменклатура	= Запрос.Выполнить().Выбрать();
	
	//цены

	Запрос	= Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры25СрезПоследних.Номенклатура.ЕдиницаИзмерения КАК Номенклатура_ЕдиницаИзмерения,
	|	ЦеныНоменклатуры25СрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатуры25СрезПоследних.Упаковка.ЕдиницаИзмерения КАК Упаковка_ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период, Номенклатура В (&МассивНоменклатур) И ВидЦены В (&МассивВидовЦен)) КАК ЦеныНоменклатуры25СрезПоследних";
	Запрос.УстановитьПараметр("Период", КонецДня(ТекущаяДатаСеанса()) + 1);
	Запрос.УстановитьПараметр("МассивВидовЦен",мМассивВыгружаемыхВидовЦен);
	Запрос.УстановитьПараметр("МассивНоменклатур", мМассивВыгружаемыхТоваров);
	ВыборкаЦены	= Запрос.Выполнить().Выбрать();
	
	Перечисления_СтавкиНДС = Перечисления.СтавкиНДС;
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		SKU	= ДобавитьОбъект(мДокXML, ВыборкаНоменклатура.Представление, "SKU");
		
		Если ЗначениеЗаполнено(ВыборкаНоменклатура.УпаковкаКоробка) Тогда
			ДобавитьПотомка(SKU, "code"				, СТ_ЗначениеВСтрокуВнутр(ВыборкаНоменклатура.УпаковкаКоробка));
			ДобавитьПотомка(SKU, "name"				, ВыборкаНоменклатура.Наименование + " (" + ВыборкаНоменклатура.КоличествоВКоробке + ")");
		Иначе
			ДобавитьПотомка(SKU, "code"				, СТ_ЗначениеВСтрокуВнутр(ВыборкаНоменклатура.Номенклатура));
			ДобавитьПотомка(SKU, "name"				, ВыборкаНоменклатура.Наименование);
		КонецЕсли;
		
		ДобавитьПотомка(SKU, "deleted"			, 0);
		ДобавитьПотомка(SKU, "article"			, СокрЛП(ВыборкаНоменклатура.Код));
		
       	ДобавитьПотомка(SKU, "producercode"		, ВыборкаНоменклатура.бг_КодЕК_Номенклатуры);

		ДобавитьПотомка(SKU, "shortname"		, "");
		ДобавитьПотомка(SKU, "parentcode"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаНоменклатура.Родитель));
		ДобавитьПотомка(SKU, "SKUType"			, 30);
		
		ИдентификаторБазовойЕдиницы = СТ_ЗначениеВСтрокуВнутр(ВыборкаНоменклатура.БазоваяЕдиницаИзмерения);
		ДобавитьПотомка(SKU, "baseunitcode"		, ИдентификаторБазовойЕдиницы);
		ДобавитьПотомка(SKU, "activeunitcode"	, ИдентификаторБазовойЕдиницы);
		ДобавитьПотомка(SKU, "activeunitcodemt"	, ИдентификаторБазовойЕдиницы);
		
		ДобавитьПотомка(SKU, "weight"			, ВыборкаНоменклатура.ОбъемДАЛ);
		
		ДобавитьПотомка(SKU, "merchparticipation", 3);
		
		ИндексСтавкиНДС = ?(ЗначениеЗаполнено(ВыборкаНоменклатура.ПеречислениеСтавкаНДС), Перечисления_СтавкиНДС.Индекс(ВыборкаНоменклатура.ПеречислениеСтавкаНДС) + 1, 0);
		ДобавитьПотомка(SKU, "VATRateCode"		, ИндексСтавкиНДС);
		//ДобавитьПотомка(SKU, "VATRateCode"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаНоменклатура.СтавкаНДС)); 

		СтруктураБазовойЕдиницыИзмерения = Новый Структура("БазоваяЕдиница, КоэффициентБазовойЕдиницы, ИдентификаторБазовойЕдиницы", ВыборкаНоменклатура.БазоваяЕдиницаИзмерения, ВыборкаНоменклатура.КоэффициентБазовойЕдиницыИзмерения, ИдентификаторБазовойЕдиницы);
		
		ВыгрузитьПодчСпрЕдиницыИзмерения(SKU, ВыборкаНоменклатура, СтруктураБазовойЕдиницыИзмерения);
		ВыгрузитьПодчСпрЦены(SKU, ВыборкаНоменклатура.Номенклатура, ВыборкаЦены);
		
		ВыборкаЦены.Сбросить();
		
		ДобавитьНоду(SKUs, SKU);
		
	КонецЦикла;
	
	ДобавитьНоду(group, SKUs);
	
КонецПроцедуры 

Функция ВыгрузитьПодчСпрЕдиницыИзмерения(group, ВыборкаНоменклатура, СтруктураБазовойЕдиницыИзмерения) Экспорт
		
	//		<units>			<!--единицы измерения для товара-->
	//			<unit>
	//				<code/>	<!--код единицы измерения-->
	//				<rate/>	<!--коэффициент пересчета в базовую (15,6)-->
	//				<barcode/>	<!--штрихкод-->
	//			</unit>
	//		</units>
	
	units	= мДокXML.CreateElement("units");       
	
	// В.Беличенко для "Белуга Маркет Владивосток" из-за хаоса в единицах измерения. все приводим к типа базовым, пересчитывая коэффициены других единиц
	// в соответствии с коэффициентом ЕдиницыХраненияОстатков товара, а саму ЕдиницуХраненияОстатков выгружаем с Коэфф. = 1
	коэффБазовойНеБазовой = 1;
	Если АктивныйФилиал = "Белуга Маркет Владивосток" или АктивныйФилиал = "Белуга Маркет Восток" 
		или АктивныйФилиал ="Белуга Маркет Хабаровск" Тогда
		коэффБазовойНеБазовой = СтруктураБазовойЕдиницыИзмерения.КоэффициентБазовойЕдиницы;
	КонецЕсли;
	
	МассивВыгруженныеЕдИзм	= Новый Массив;
	
	//Сначала выгрузим базовую ед измерения
	Если АктивныйФилиал ="Белуга Маркет Хабаровск" Тогда
		
		unit = мДокXML.CreateElement("unit");
		
		ДобавитьПотомка(unit, "code" , СтруктураБазовойЕдиницыИзмерения.ИдентификаторБазовойЕдиницы);
		//Доделать - понятие базовой единицы - скорее всего имеется ввиду базовая например бут, но не классификатор, А СООТВЕТСТВУЮЩАЯ КЛАССИФИКАТОРУ
		ДобавитьПотомка(unit, "rate" , 1);
		
		ДобавитьПотомка(unit, "barcode"	, "");
		
		units.AppendChild(unit);
		
		МассивВыгруженныеЕдИзм.Добавить(СтруктураБазовойЕдиницыИзмерения.БазоваяЕдиница);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаПоКлассификатору,
	|	УпаковкиЕдиницыИзмерения.Числитель / УпаковкиЕдиницыИзмерения.Знаменатель КАК Коэффициент
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления  
	|	И УпаковкиЕдиницыИзмерения.Владелец = &Номенклатура";
	
	Если ЗначениеЗаполнено(ВыборкаНоменклатура.бг_КодЕК_Номенклатуры) Тогда
		//Если данный товар выгружаем в разрезе кодов ЕК, то нужно выгрузить лишь упаковки имеющие такой же ЕК, а так же головную упаковку бутылку не имеющую заполненного кода ЕК
		Запрос.Текст = Запрос.Текст +  " И (УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &бг_КодЕК_Номенклатуры
		|			ИЛИ УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = """")";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ВыборкаНоменклатура.Номенклатура);
	Запрос.УстановитьПараметр("бг_КодЕК_Номенклатуры", ВыборкаНоменклатура.бг_КодЕК_Номенклатуры);
	
	Если АктивныйФилиал = "Белуга Маркет Восток" тогда  //Макраусова А.Ю. выгружаем только шт, коробки и бутылки 
		Запрос.Текст = Запрос.Текст +  " И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения В 
		| (Выбрать УпаковкиЕдиницыИзмерения.Ссылка Из Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения 
		|	ГДЕ УпаковкиЕдиницыИзмерения.Код В (""796 "", ""868 "", ""8751 ""))";
	КонецЕсли;
	
	ВыборкаЕдиницИзмерения = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЕдиницИзмерения.Следующий() Цикл
			
		Если АктивныйФилиал <> "Белуга Маркет Владивосток" и АктивныйФилиал <> "Белуга Маркет Восток"  
			и АктивныйФилиал <> "Белуга Маркет Хабаровск" Тогда 
			Если ВыборкаЕдиницИзмерения.Коэффициент < 1 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если МассивВыгруженныеЕдИзм.Найти(ВыборкаЕдиницИзмерения.ЕдиницаПоКлассификатору) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВыгруженныеЕдИзм.Добавить(ВыборкаЕдиницИзмерения.ЕдиницаПоКлассификатору);
		
		// В.Беличенко изменил на выгрузку пересчитанного коэффициента, приведенного к базовым, которые не базовые
		// например, для "Белуга Маркет Владивосток", коэффицинеты будут в основном пересчитанные
		
		Коэффициент = ВыборкаЕдиницИзмерения.Коэффициент;
		
		//Доделать / вопрос: По идее не актуально:
		Если АктивныйФилиал = "Белуга Маркет Владивосток" или АктивныйФилиал = "Белуга Маркет Восток"  
			или АктивныйФилиал ="Белуга Маркет Хабаровск" Тогда
			Если ВыборкаЕдиницИзмерения.ЕдиницаПоКлассификатору = СтруктураБазовойЕдиницыИзмерения.БазоваяЕдиница Тогда
				Коэффициент = 1;
			ИначеЕсли Не коэффБазовойНеБазовой = 0 Тогда 
				Коэффициент = Коэффициент / коэффБазовойНеБазовой;
			КонецЕсли;
		КонецЕсли;
		
		unit = мДокXML.CreateElement("unit");	
		ДобавитьПотомка(unit, "code"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаЕдиницИзмерения.ЕдиницаПоКлассификатору));
		ДобавитьПотомка(unit, "rate"		, Коэффициент);
		ДобавитьПотомка(unit, "barcode"	, "");		
		units.AppendChild(unit);
		
	КонецЦикла;
	
	ДобавитьНоду(group, units);
	
КонецФункции	//ВыгрузитьПодчСпрЕдиницыИзмерения()

Функция ВыгрузитьПодчСпрЦены(group, Номенклатура, ВыборкаЦены) Экспорт
		
	//		<prices>
	//			<price>
	//				<pricetypecode/>	<!--код типа цен - pricetypes-->
	//				<paytypecode/>		<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->
	//				<unitcode/>		<!--код единицы измерения для товара - units-->
	//				
	//				<price/>		<!--цена (15, 4)-->
	//			</price>
	//		</prices>
	
	prices	= мДокXML.CreateElement("prices");
	
	//лЦена	= 0;
	//лСтруктура	= Новый Структура("Номенклатура", Номенклатура);
	//лСтрокиЦен	= пТЗнЦены.НайтиСтроки(лСтруктура);	
	
	////////////////////////////////////////////
	////1 - фиксированные цены из регистра сведений
	////////////////////////////////////////////
	Пока ВыборкаЦены.НайтиСледующий(Номенклатура, "Номенклатура") Цикл 
       		
		Если ВыборкаЦены.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаЦены.Упаковка_ЕдиницаИзмерения) Тогда 
			ЕдиницаИзмеренияПредставление = СТ_ЗначениеВСтрокуВнутр(ВыборкаЦены.Упаковка_ЕдиницаИзмерения);
		Иначе                                                                                        
			ЕдиницаИзмеренияПредставление = СТ_ЗначениеВСтрокуВнутр(ВыборкаЦены.Номенклатура_ЕдиницаИзмерения);
		КонецЕсли;
		
		ВидЦеныПредставление	= СТ_ЗначениеВСтрокуВнутр(ВыборкаЦены.ВидЦены);
		
		price = мДокXML.CreateElement("price");
		
		ДобавитьПотомка(price, "pricetypecode"	, ВидЦеныПредставление);
		ДобавитьПотомка(price, "paytypecode"	, 2);
		ДобавитьПотомка(price, "unitcode"		, ЕдиницаИзмеренияПредставление);
		ДобавитьПотомка(price, "price"			, ВыборкаЦены.Цена);
		
		prices.AppendChild(price);
		
	КонецЦикла;
	
	//// выгрузим расчетные типы цен Доделать / уточнить про расчетные цены нужны или нет
	//лЕдиница	 = пРодитель.ЕдиницаХраненияОстатков;
	//лЕдиницаОКЕИ = пРодитель.ЕдиницаХраненияОстатков.ЕдиницаПоКлассификатору;
		
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВидыЦен.Ссылка КАК ВидЦены
	//	|ИЗ
	//	|	Справочник.ВидыЦен КАК ВидыЦен
	//	|ГДЕ
	//	|	НЕ ВидыЦен.СпособЗаданияЦены = ЗНАЧЕНИЕ(Перечисление.СпособыЗаданияЦен.Вручную)";
	//
	//ВыборкаРасчетныеВидыЦен = Запрос.Выполнить().Выбрать();
	//
	//Пока ВыборкаРасчетныеВидыЦен.Следующий() Цикл
	//	//Для каждого лСпр из тзнТипыЦен Цикл
	////	
	////	
	//	Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура,,ВыборкаРасчетныеВидыЦен.ВидЦены,мДатаОбработки,лЕдиница);
	////	
	////	price = ДокXML.CreateElement("price");
	////	
	////	ДобавитьПотомка(price, "pricetypecode"	, СТ_ЗначениеВСтрокуВнутр(лТипЦен));
	////	ДобавитьПотомка(price, "paytypecode"	, 2);
	////	ДобавитьПотомка(price, "unitcode"		, СТ_ЗначениеВСтрокуВнутр(лЕдиницаОКЕИ));
	////	ДобавитьПотомка(price, "price"			, лЦена);
	////	
	////	prices.AppendChild(price);
	////	
	//КонецЦикла;	
	
	ДобавитьНоду(group, prices);
	
КонецФункции // ВыгрузитьПодчСпрЦены()

Процедура ВыгрузитьСпрТипыТорговыхТочек(group, XMLСекция)
	
КонецПроцедуры

Процедура ВыгрузитьСпрПокупатели(group, XMLСекция)
	
	//<buyers> <!--покупатели-->
	//	<buyer>
	//		<code/>			<!--код элемента в УС-->
	//		<innercode/>	<!--код элемента в Чикаго-->
	//		<producercode/>	<!--код производителя-->
	//		<name/>			<!--наименование покупателя-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<address/>		<!--улица, дом, квартира nvarchar(120)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		<contactperson/>	<!--контактное лицо nvarchar(50)-->
	//		
	//		<pricetypecode/>	<!--тип цен для покупателя-->
	//		<creditlimit/>		<!--лимит кредита покупателя в основной валюте системы (15, 4)-->
	//		<creditdeadline/>	<!--срок кредита покупателя в днях-->
	//		
	//		<classifier1code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier2code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier3code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier4code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier5code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier6code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier7code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier8code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier9code/>	<!--код классификатора для покупателя - classifiers-->
	//		<classifier10code/>	<!--код классификатора для покупателя - classifiers-->
	//		
	//		<counteragents>
	//			<counteragent>
	//				<counteragentcode/>	<!--код контрагента-->
	//			</counteragent>
	//		</counteragents>
	//	</buyer>
	//</buyers>
	
	ЮрАдресКонтрагента = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	
	ИнициализироватьВыборкуКонтрагентов();
	ИнициализироватьТаблицуКонтактнойИнформацииКонтрагентов();
	
	buyers = мДокXML.CreateElement("buyers");
	
	Пока мВыборкаКонтрагенты.Следующий() Цикл
		
		buyer	= ДобавитьОбъект(мДокXML, мВыборкаКонтрагенты.Представление, "buyer");
		
		ДобавитьПотомка(buyer, "code"			, СТ_ЗначениеВСтрокуВнутр(мВыборкаКонтрагенты.Контрагент));
		ДобавитьПотомка(buyer, "name"			, СокрЛП(мВыборкаКонтрагенты.Наименование));
		ДобавитьПотомка(buyer, "deleted"		, 0);
		
		//ПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(мВыборкаКонтрагенты.Контрагент, ЮрАдресКонтрагента,,ТекущаяДата());	
		ПредставлениеАдреса = ПолучитьПредставлениеАдресаКонтрагента(мВыборкаКонтрагенты.Контрагент, Истина);	
	 
		ДобавитьПотомка(buyer, "address"		, ПредставлениеАдреса);
		ДобавитьПотомка(buyer, "postindex"		, "");
		ДобавитьПотомка(buyer, "phone"			, "");
				
		ВыгрузитьПодчСпрКонтрагенты(buyer, мВыборкаКонтрагенты.Контрагент);
		
		ДобавитьНоду(buyers, buyer);
		
	КонецЦикла;
	
	ДобавитьНоду(group, buyers);
	
КонецПроцедуры

Процедура ВыгрузитьПодчСпрКонтрагенты(group, Контрагент) Экспорт
		
	counteragents	= мДокXML.CreateElement("counteragents");
	
	counteragent = мДокXML.CreateElement("counteragent");
	
	ДобавитьПотомка(counteragent, "counteragentcode"	, СТ_ЗначениеВСтрокуВнутр(Контрагент));
	
	counteragents.AppendChild(counteragent);
	
	ДобавитьНоду(group, counteragents);
	
КонецПроцедуры	//ВыгрузитьПодчСпрКонтрагенты()

Процедура ВыгрузитьСпрФормальныеПокупатели(group, XMLСекция)
	
	//<counteragents>	<!--контрагенты (формальные покупатели)-->
	//	<counteragent>
	//		<code/>			<!--код элемента в УС-->
	//		<innercode/>	<!--код элемента в Чикаго-->
	//		<producercode/>	<!--код производителя-->
	//		<name/>			<!--наименование контрагента nvarchar(30)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<address/>		<!--улица, дом, квартира-nvarchar(120)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		
	//		<type/>			<!--признак, является ли юрлицом или физлицом. 1=ЮЛ, 0=ФЛ-->
	//		<juridicalname/>	<!--юридическое наименование nvarchar(30)-->
	//		<INN/>			<!--номер налогоплательщика nvarchar(12)-->
	//		<INNNumber/>		<!--номер свидетельства налогоплательщика nvarchar(10)-->
	//		<VATStatus/>		<!--является ли плательщиком НДС, 1=является, 0=не является-->
	//		<bankaccount/>		<!--расчетный счет nvarchar(14)-->
	//	</counteragent>
	//</counteragents>
	
	ЮрАдресКонтрагента = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	ПеречислениеЮрЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");	
	ИнициализироватьВыборкуКонтрагентов();
	ИнициализироватьТаблицуКонтактнойИнформацииКонтрагентов();
	
	counteragents = мДокXML.CreateElement("counteragents");
	
	Пока мВыборкаКонтрагенты.Следующий() Цикл
			
		counteragent	= ДобавитьОбъект(мДокXML, мВыборкаКонтрагенты.Представление, "counteragent");
		
		ДобавитьПотомка(counteragent, "code"			, СТ_ЗначениеВСтрокуВнутр(мВыборкаКонтрагенты.Контрагент));	
				
		ДобавитьПотомка(counteragent, "producercode"	, СокрЛП(мВыборкаКонтрагенты.бг_КодКлиентаSY));
		ДобавитьПотомка(counteragent, "name"			, СокрЛП(мВыборкаКонтрагенты.Наименование));
		ДобавитьПотомка(counteragent, "deleted"			, 0);
		
	 	ПредставлениеАдреса = ПолучитьПредставлениеАдресаКонтрагента(мВыборкаКонтрагенты.Контрагент, Ложь);
		
		ДобавитьПотомка(counteragent, "address"			, ПредставлениеАдреса);
		ДобавитьПотомка(counteragent, "phone"			, "");
		
		ДобавитьПотомка(counteragent, "type"			, ?(мВыборкаКонтрагенты.ЮрФизЛицо = ПеречислениеЮрЛицо, 1, 0));
		ДобавитьПотомка(counteragent, "juridicalname"	, СокрЛП(мВыборкаКонтрагенты.НаименованиеПолное));
		ДобавитьПотомка(counteragent, "INN"				, мВыборкаКонтрагенты.ИНН);
		ДобавитьПотомка(counteragent, "INNNumber"		, мВыборкаКонтрагенты.КПП);
		ДобавитьПотомка(counteragent, "VATStatus"		, "F");
		ДобавитьПотомка(counteragent, "distributorcode"	, СокрЛП(мВыборкаКонтрагенты.КодПартнера));
		
		// атрибут Поставщик  
		СтруктураАтрибутов = Новый Структура("КодАтрибута, ИмяАтрибута, ТипАтрибута, ЗначениеАтрибута", "Post", "Поставщик", "bool", ?(мВыборкаКонтрагенты.Поставщик, 1, 0));		
		ВыгрузитьПодчАтрибуты(counteragent, СтруктураАтрибутов);
		
		ДобавитьНоду(counteragents, counteragent);
		
	КонецЦикла;
	
	ДобавитьНоду(group, counteragents);	
	
КонецПроцедуры

Процедура ВыгрузитьСпрТорговыеТочки(group, XMLСекция)
	
	//<buypoints>	<!--торговые точки-->
	//	<buypoint>
	//		<code/>			<!--код элемента в УС-->
	//		<innercode/>	<!--код элемента в Чикаго-->
	//		<producercode/>	<!--код производителя-->
	//		<name/>			<!--наименование торговой точки nvarchar(30)-->
	//		<deleted/>		<!--признак того, что элемент был удален-->
	//		
	//		<buyercode/>		<!--код покупателя, которому принадлежит торговая точка - buyers-->
	//		<buypointtypecode/>	<!--код типа торговой точки - buypointtypes-->
	//		
	//		<address/>		<!--улица, дом, квартира nvarchar(120)-->
	//		<postindex/>		<!--почтовый индекс nvarchar(5)-->
	//		<phone/>		<!--телефон nvarchar(16)-->
	//		<contactperson/>	<!--контактное лицо nvarchar(50)-->
	//		
	//		<juridicalname/>	<!--вывеска nvarchar(30)-->
	//		<discountRate/>		<!--процент скидки торговой точке-->
	//		<creditlimit/>		<!--лимит кредита торговой точки в основной валюте системы (15, 4)-->
	//		<creditdeadline/>	<!--срок кредита торговой точки в днях-->
	//		
	//		<classifier1code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier2code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier3code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier4code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier5code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier6code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier7code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier8code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier9code/>	<!--код классификатора для ТТ - classifiers-->
	//		<classifier10code/>	<!--код классификатора для ТТ - classifiers-->
	//
	//		<skupricetypes>
	//			<skupricetype>
	//				<SKUcode/>			<!--код товара (если не указан код классификатора) - SKUs-->
	//				<skuclassifier/>	<!--код товара (если не указан код классификатора) - classifiers-->
	//				<pricetypecode/>	<!--код типа цен - pricetypes-->
	//			</skupricetype>
	//		</skupricetypes>
	//
	//		<activityhistory>
	//			<event>
	//				<eventtype/>	<!--тип события, 0 - Деактивация, 1 - Активация-->
	//				<eventdate/>	<!--дата события-->
	//			</event>
	//		</activityhistory>
	//	</buypoint>
	//</buypoints>
	
	buypoints = мДокXML.CreateElement("buypoints");
	
	//Стоп листы
	filters = мДокXML.CreateElement("filters");
	filter	= ДобавитьОбъект(мДокXML, "ТТ в стопе", "filter");
	
	ДобавитьПотомка(filter, "code"				, "ТТ в стопе");
	ДобавитьПотомка(filter, "name"				, "ТТ в стопе");
	ДобавитьПотомка(filter, "color"				, 255);
	ДобавитьПотомка(filter, "filtertype"		, 18);
	ДобавитьПотомка(filter, "needcolor"			, 1);
	ДобавитьПотомка(filter, "priority"			, 1);
	ДобавитьПотомка(filter, "usebpfilterzones"  , 1);
	ДобавитьПотомка(filter, "deleted"  			, 0);
	ДобавитьПотомка(filter, "useboldfontstyle" 	, 0);
	ДобавитьПотомка(filter, "useforallsku" 		, 0);
	ДобавитьПотомка(filter, "isbuypointcolorable",1);
	ДобавитьПотомка(filter, "isskucolorable" 	, 0);
	
	ДобавитьНоду(filters, filter);
	ДобавитьНоду(group, filters);
	
	// создаем список ТТ фильтра
	zones = мДокXML.CreateElement("zones");
	zone	= ДобавитьОбъект(мДокXML, "ТТ в стопе", "zone");
	
	ДобавитьПотомка(zone, "code"		, "ТТ в стопе");
	ДобавитьПотомка(zone, "name"		, "ТТ в стопе");
	ДобавитьПотомка(zone, "filtercode"	, "ТТ в стопе");
	ДобавитьПотомка(zone, "deleted"  	, 0);
	
	zonebuypoints = мДокXML.CreateElement("zonebuypoints");
	
	//тзнВремПокупателиВсе = тзнПокупателиВсе.Скопировать(, "Контрагент");
	//тзнВремПокупателиВсе.Свернуть("Контрагент",);
	//
	//тзнТТВСтопе = ВыполнитьЗапросПоСтопам(тзнВремПокупателиВсе.ВыгрузитьКолонку("Контрагент"));
	тзнТТВСтопе	= Новый ТаблицаЗначений;
	
	ВидНоменклатурыАлкогольнаяПродукция = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидНоменклатурыАлкогольнаяПродукция");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Контрагент КАК Контрагент,
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Соглашение.ВидЦен КАК ВидЦены,
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Договор.ДатаОкончанияДействия КАК ДатаОкончанияДействияДоговора
	|ПОМЕСТИТЬ ВТ_ВидыЦенПоРегистру
	|ИЗ
	|	РегистрСведений.бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры КАК бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры
	|ГДЕ
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Организация В(&МассивОрганизаций)
	|	И бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Контрагент В(&МассивКонтрагентов)
	|	И НЕ бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Договор.ПометкаУдаления
	|	И бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ДоговорыКонтрагентов.бг_Соглашение.ВидЦен) КАК ВидЦены,
	|	МАКСИМУМ(ДоговорыКонтрагентов.ДатаОкончанияДействия) КАК ДатаОкончанияДействияДоговора
	|ПОМЕСТИТЬ ВТ_ВидыЦенПоДействующимДоговорам
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.ПометкаУдаления
	|	И ДоговорыКонтрагентов.Контрагент В(&МассивКонтрагентов)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Организация В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыКонтрагентов.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битПунктыНазначения.Ссылка КАК ПунктНазначения,
	|	битПунктыНазначения.Представление КАК Представление,
	|	битПунктыНазначения.ПометкаУдаления КАК ПометкаУдаления,
	|	битПунктыНазначения.Адрес КАК Адрес,
	|	битПунктыНазначения.Код КАК Код,
	|	битПунктыНазначения.КодТТSY КАК КодТТSY,
	|	битПунктыНазначения.КаналПродаж.Наименование КАК НаименованиеКаналаПродаж,
	|	битПунктыНазначения.Наименование КАК Наименование,
	|	битПунктыНазначения.КПП КАК КПП,
	|	ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Контрагенты).ГоловнойКонтрагент КАК Контрагент,
	|	ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Контрагенты).ГоловнойКонтрагент.Наименование КАК Контрагент_Наименование,
	|	ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Контрагенты).ГоловнойКонтрагент.ПометкаУдаления КАК Контрагент_ПометкаУдаления,
	|	ЕСТЬNULL(ВТ_ВидыЦенПоРегистру.ВидЦены, ВТ_ВидыЦенПоДействующимДоговорам.ВидЦены) КАК ВидЦены,
	|	битПунктыНазначения.ЭтоАльтернативныйАдрес КАК ЭтоАльтернативныйАдрес,
	|	ВЫБОР
	|		КОГДА ВТ_ВидыЦенПоРегистру.ВидЦены ЕСТЬ NULL
	|			ТОГДА ВТ_ВидыЦенПоДействующимДоговорам.ДатаОкончанияДействияДоговора
	|		ИНАЧЕ ВТ_ВидыЦенПоРегистру.ДатаОкончанияДействияДоговора
	|	КОНЕЦ КАК ДатаОкончанияДействияДоговора
	|ПОМЕСТИТЬ ВТ_ПунктыНазначенияСВидамиЦен
	|ИЗ
	|	Справочник.битПунктыНазначения КАК битПунктыНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыЦенПоДействующимДоговорам КАК ВТ_ВидыЦенПоДействующимДоговорам
	|		ПО (ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Контрагенты).ГоловнойКонтрагент = ВТ_ВидыЦенПоДействующимДоговорам.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыЦенПоРегистру КАК ВТ_ВидыЦенПоРегистру
	|		ПО (ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Контрагенты).ГоловнойКонтрагент = ВТ_ВидыЦенПоРегистру.Контрагент)
	|ГДЕ
	|	битПунктыНазначения.Клиент.ГоловнойКонтрагент В(&МассивКонтрагентов)
	|	И битПунктыНазначения.КодТТSY <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПунктыНазначенияСВидамиЦен.ПунктНазначения КАК ПунктНазначения,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Представление КАК Представление,
	|	ВТ_ПунктыНазначенияСВидамиЦен.ПометкаУдаления КАК ПометкаУдаления,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Адрес КАК Адрес,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Код КАК Код,
	|	ВТ_ПунктыНазначенияСВидамиЦен.КодТТSY КАК КодТТSY,
	|	ВТ_ПунктыНазначенияСВидамиЦен.НаименованиеКаналаПродаж КАК НаименованиеКаналаПродаж,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Наименование КАК Наименование,
	|	ВТ_ПунктыНазначенияСВидамиЦен.КПП КАК КПП,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Контрагент КАК Контрагент,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Контрагент_Наименование КАК Контрагент_Наименование,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Контрагент_ПометкаУдаления КАК Контрагент_ПометкаУдаления,
	|	ВТ_ПунктыНазначенияСВидамиЦен.ВидЦены КАК ВидЦены,
	|	ЕСТЬNULL(бг_ЛицензииПунктовНазначенияСрезПоследних.Лицензия, """") КАК Лицензия,
	|	бг_ЛицензииПунктовНазначенияСрезПоследних.Лицензия.ДатаНачала КАК ДатаНачалаСрокаДействия,
	|	бг_ЛицензииПунктовНазначенияСрезПоследних.Лицензия.ДатаОкончания КАК ДатаОкончанияСрокаДействия,
	|	бг_ЛицензииПунктовНазначенияСрезПоследних.Лицензия.бг_ДатаПрекращенияДействия КАК ДатаПрекращенияДействия,
	|	ВТ_ПунктыНазначенияСВидамиЦен.ЭтоАльтернативныйАдрес КАК ЭтоАльтернативныйАдрес,
	|	ВТ_ПунктыНазначенияСВидамиЦен.ДатаОкончанияДействияДоговора КАК ДатаОкончанияДействияДоговора
	|ИЗ
	|	ВТ_ПунктыНазначенияСВидамиЦен КАК ВТ_ПунктыНазначенияСВидамиЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЛицензииПунктовНазначения.СрезПоследних(
	|				,
	|				ПунктНазначения В
	|					(ВЫБРАТЬ
	|						ВТ_ПунктыНазначения.ПунктНазначения
	|					ИЗ
	|						ВТ_ПунктыНазначенияСВидамиЦен КАК ВТ_ПунктыНазначения)) КАК бг_ЛицензииПунктовНазначенияСрезПоследних
	|		ПО ВТ_ПунктыНазначенияСВидамиЦен.ПунктНазначения = бг_ЛицензииПунктовНазначенияСрезПоследних.ПунктНазначения
	|ГДЕ
	|	НЕ ВТ_ПунктыНазначенияСВидамиЦен.ЭтоАльтернативныйАдрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПунктыНазначенияСВидамиЦен.ПунктНазначения КАК ПунктНазначения,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Контрагент КАК Контрагент,
	|	ВТ_ПунктыНазначенияСВидамиЦен.Адрес КАК Адрес
	|ИЗ
	|	ВТ_ПунктыНазначенияСВидамиЦен КАК ВТ_ПунктыНазначенияСВидамиЦен
	|ГДЕ
	|	ВТ_ПунктыНазначенияСВидамиЦен.ЭтоАльтернативныйАдрес";
	
	Запрос.УстановитьПараметр("МассивКонтрагентов", мМассивВыгружаемыхКонтрагентов);	
	Запрос.УстановитьПараметр("МассивОрганизаций", мМассивВыгружаемыхОрганизаций);
    Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатурыАлкогольнаяПродукция);
	
	Результаты = Запрос.ВыполнитьПакет();
	АльтернативныеПунктыНазначения = Результаты[Результаты.Количество() - 1].Выгрузить();
	ВыборкаПунктыНазначения = Результаты[Результаты.Количество() - 2].Выбрать();
		
	Пока ВыборкаПунктыНазначения.Следующий() Цикл
			
		buypoint	= ДобавитьОбъект(мДокXML, ВыборкаПунктыНазначения.Представление, "buypoint");
		
		ДобавитьПотомка(buypoint, "code"			, СТ_ЗначениеВСтрокуВнутр(ВыборкаПунктыНазначения.ПунктНазначения));
		
		//МАкраусова А.Ю. Контрагент + наименование ТТ 
		Если АктивныйФилиал = "Белуга Маркет Восток" 
			или АктивныйФилиал = "Белуга Маркет Хабаровск" или АктивныйФилиал = "Белуга Маркет Владивосток" 
			или АктивныйФилиал = "Белуга Маркет Запад" или АктивныйФилиал = "Белуга Маркет" или АктивныйФилиал = "Алкотрейд СМ" тогда
			НаименованиеТТ = ВыборкаПунктыНазначения.Контрагент_Наименование +", "+ ВыборкаПунктыНазначения.Наименование; 
		Иначе
			НаименованиеТТ = ВыборкаПунктыНазначения.Наименование;  
		КонецЕсли;	 
		ДобавитьПотомка(buypoint, "name"			, НаименованиеТТ);
		
		// (Ирина Дроздова) 13.01.2015 
		//ДобавитьПотомка(buypoint, "deleted"   , 0);
		Если АктивныйФилиал = "Белуга Маркет Владивосток" или АктивныйФилиал ="Белуга Маркет Хабаровск" или АктивныйФилиал = "Белуга Маркет Восток" или АктивныйФилиал ="Белуга Маркет Запад" или АктивныйФилиал = "Белуга Маркет" или АктивныйФилиал = "Алкотрейд СМ" тогда
			ДобавитьПотомка(buypoint, "deleted"   , ?(ВыборкаПунктыНазначения.Контрагент_ПометкаУдаления, 1, ?(ВыборкаПунктыНазначения.ПометкаУдаления, 1, 0)));
		Иначе
			ДобавитьПотомка(buypoint, "deleted"   , 0);
		КонецЕсли;
		
		ДобавитьПотомка(buypoint, "buyercode"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаПунктыНазначения.Контрагент));
		
		
		ДобавитьПотомка(buypoint, "address"			, ВыборкаПунктыНазначения.Адрес);
		ДобавитьПотомка(buypoint, "postindex"		, "");
		ДобавитьПотомка(buypoint, "phone"			, "");
		
		Если АктивныйФилиал = "Белуга Маркет Восток" или АктивныйФилиал = "Белуга Маркет Запад" или АктивныйФилиал = "Белуга Маркет" или АктивныйФилиал = "Алкотрейд СМ" или АктивныйФилиал ="Белуга Маркет Хабаровск" 
			 или АктивныйФилиал = "Белуга Маркет Владивосток" тогда
			ДобавитьПотомка(buypoint, "juridicalname"	, НаименованиеТТ);
		Иначе	
			ДобавитьПотомка(buypoint, "juridicalname"	, ВыборкаПунктыНазначения.Наименование);
		КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаПунктыНазначения.ВидЦены) Тогда 
	 	ДобавитьПотомка(buypoint, "pricetypecode"	, СТ_ЗначениеВСтрокуВнутр(ВыборкаПунктыНазначения.ВидЦены));        
	Иначе
		ДобавитьПотомка(buypoint, "pricetypecode"	, "");        
	КонецЕсли;
	
		Если ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаОкончанияДействияДоговора) И ВыборкаПунктыНазначения.ДатаОкончанияДействияДоговора < НачалоДня(ТекущаяДата()) Тогда
			ДобавитьПотомка(buypoint, "isinstoplist", 0);
			ВыгрузитьПодчЗонуФильтраСтоп(zonebuypoints, zone, ВыборкаПунктыНазначения.ПунктНазначения);
		Иначе
			ДобавитьПотомка(buypoint, "isinstoplist", 0);
		КонецЕсли;
	//	
	//	лДопустимоеЧислоДнейЗадолженностиСин	= ?(лДог.КонтролироватьЧислоДнейЗадолженности, лДог.ДопустимоеЧислоДнейЗадолженности, "");
	//	Если АктивныйФилиал = "Белуга Маркет Владивосток" или АктивныйФилиал = "Белуга Маркет Восток" тогда  //CAS-279968-K8V1
	//		лДопустимаяСуммаЗадолженностиСин		= ?(лДог.КонтролироватьСуммуЗадолженности, лДог.ДопустимаяСуммаЗадолженности, 0);
	//	Иначе
	//	    лДопустимаяСуммаЗадолженностиСин		= ?(лДог.КонтролироватьСуммуЗадолженности, лДог.ДопустимаяСуммаЗадолженности, "");
	//	КонецЕсли;
	//	
	//	ДобавитьПотомка(buypoint, "creditlimit"		, лДопустимаяСуммаЗадолженностиСин);
	//	ДобавитьПотомка(buypoint, "creditdeadline"	, лДопустимоеЧислоДнейЗадолженностиСин);
		ДобавитьПотомка(buypoint, "creditlimit"		, ""); //Вопрос по основному договору как корректно получить?
		ДобавитьПотомка(buypoint, "creditdeadline"	, "");	
 		
        КодТТSY = ВыборкаПунктыНазначения.КодТТSY;
		КодТТSY = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодТТSY, 9, "0", "Слева");
		ДобавитьПотомка(buypoint, "producercode"	, КодТТSY);
		ДобавитьПотомка(buypoint, "distributorcode"	, ВыборкаПунктыНазначения.Код);
		
		Если Не ЗначениеЗаполнено(ВыборкаПунктыНазначения.ВидЦены) Тогда 
			ВыгрузитьПодчЗонуФильтраСтоп(zonebuypoints, zone, ВыборкаПунктыНазначения.ПунктНазначения);
		КонецЕсли;
				
		////****** алкогольная лицензия ****
		СрокЛицензии = "";
		//ЛицензияПунктаНазначения =  ВыборкаПунктыНазначения.Лицензия;
		Если НЕ ЗначениеЗаполнено(ВыборкаПунктыНазначения.Лицензия) тогда
			СрокЛицензии = "Не указан";
		Иначе
			//***ID*** CAS-301256-K8C5
			Если АктивныйФилиал = "Белуга Маркет Владивосток" тогда
				Если ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаНачалаСрокаДействия) И (ТекущаяДата() <= ВыборкаПунктыНазначения.ДатаНачалаСрокаДействия) тогда
					СрокЛицензии = ТекущаяДата();
				Иначе
					Если ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаПрекращенияДействия) И ((ВыборкаПунктыНазначения.ДатаПрекращенияДействия < ВыборкаПунктыНазначения.ДатаОкончанияСрокаДействия) ИЛИ НЕ ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаПрекращенияДействия)) тогда
						СрокЛицензии = ВыборкаПунктыНазначения.ДатаПрекращенияДействия;
					КонецЕсли;                       
					Если НЕ ЗначениеЗаполнено(СрокЛицензии) тогда
						СрокЛицензии = ?(ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаОкончанияСрокаДействия), ВыборкаПунктыНазначения.ДатаОкончанияСрокаДействия, "Без ограничения");
					КонецЕсли;
				КонецЕсли;				
			Иначе	
				Если ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаОкончанияСрокаДействия) тогда
					СрокЛицензии = ВыборкаПунктыНазначения.ДатаОкончанияСрокаДействия;
					Если ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаПрекращенияДействия) И (ВыборкаПунктыНазначения.ДатаПрекращенияДействия < ВыборкаПунктыНазначения.ДатаОкончанияСрокаДействия) тогда
						СрокЛицензии = ВыборкаПунктыНазначения.ДатаПрекращенияДействия;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПунктыНазначения.ДатаПрекращенияДействия) тогда
					СрокЛицензии = ВыборкаПунктыНазначения.ДатаПрекращенияДействия;
				Иначе
					СрокЛицензии = "Без ограничений";
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СрокЛицензии) И ТипЗнч(СрокЛицензии) = Тип("Дата") тогда
			СрокЛицензии = Формат(СрокЛицензии, "ДЛФ = Д");
		КонецЕсли;
	
		// В.Беличенко добавил атрибуты СрокЛицензии и ТипТТ
		МассивАтрибутов = Новый Массив;	
		МассивАтрибутов.Добавить(Новый Структура("КодАтрибута, ИмяАтрибута, ТипАтрибута, ЗначениеАтрибута", "СрокЛицензии", "Срок лицензии", "string", СрокЛицензии));	
		МассивАтрибутов.Добавить(Новый Структура("КодАтрибута, ИмяАтрибута, ТипАтрибута, ЗначениеАтрибута", "BPType", "Тип ТТ", "string", СокрЛП(ВыборкаПунктыНазначения.НаименованиеКаналаПродаж)));		
		МассивАтрибутов.Добавить(Новый Структура("КодАтрибута, ИмяАтрибута, ТипАтрибута, ЗначениеАтрибута", "КПП", "КПП", "string", СокрЛП(ВыборкаПунктыНазначения.КПП)));		
		МассивАтрибутов.Добавить(Новый Структура("КодАтрибута, ИмяАтрибута, ТипАтрибута, ЗначениеАтрибута", "КПП", "КПП", "string", СокрЛП(ВыборкаПунктыНазначения.КПП)));
		ДобавитьДанныеПоАльтернативнымТорговымТочкам(МассивАтрибутов, ВыборкаПунктыНазначения, АльтернативныеПунктыНазначения);
		ВыгрузитьПодчАтрибуты(buypoint, МассивАтрибутов);
 					
		ДобавитьНоду(buypoints, buypoint);
	КонецЦикла;
	
	ДобавитьНоду(group, buypoints);	
	
	ДобавитьНоду(zone, zonebuypoints);
	ДобавитьНоду(zones, zone);
	ДобавитьНоду(group, zones);
	
КонецПроцедуры

Процедура ДобавитьДанныеПоАльтернативнымТорговымТочкам(МассивАтрибутов, ВыборкаПунктыНазначения, АльтернативныеПунктыНазначения)

	СтруктураАтрибута = Новый Структура("КодАтрибута, ИмяАтрибута, ТипАтрибута, ЗначениеАтрибута");

	СтруктураПоиска = Новый Структура("Контрагент", ВыборкаПунктыНазначения.Контрагент);
	НайденныеСтроки = АльтернативныеПунктыНазначения.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
	
		СтруктураАтрибута.КодАтрибута		= "Alt_Address";
		СтруктураАтрибута.ИмяАтрибута		= "Альтернативный адрес доставки";
		СтруктураАтрибута.ТипАтрибута		= "multilist";
		СтруктураАтрибута.ЗначениеАтрибута	= НайденнаяСтрока.Адрес;
		
		МассивАтрибутов.Добавить(СтруктураАтрибута);
	
	КонецЦикла;

КонецПроцедуры

Функция ВыгрузитьПодчЗонуФильтраСтоп(zonebuypoints, group, пКодТТ)

	fz_buypoint = мДокXML.CreateElement("buypoint");
	
	ДобавитьПотомка(fz_buypoint, "buypointcode"	, СТ_ЗначениеВСтрокуВнутр(пКодТТ));
	
	zonebuypoints.AppendChild(fz_buypoint);

КонецФункции

Процедура ВыгрузитьСпрКассы(group, XMLСекция)
	
КонецПроцедуры

Процедура ВыгрузитьСпрАгенты(group, XMLСекция)
	
КонецПроцедуры

Процедура ВыгрузитьСпрМаршруты(group, XMLСекция)
	
КонецПроцедуры

Процедура ВыгрузитьСпрГруппыТоваров(group, XMLСекция)
	
	//<SKUgroups>	 <!--группы товаров-->
	//	<SKUgroup>
	//		<code/>		<!--код элемента в УС-->
	//		<name/>		<!--наименование группы-->
	//		<deleted/>	<!--признак того, что элемент был удален-->
	//		
	//		<parentcode/>	<!--код группы-родителя-->
	//	</SKUgroup>
	//</SKUgroups>
	
	//группы
	
	SKUgroups	= мДокXML.CreateElement("SKUgroups");
	
	Запрос	= Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	      	               |	Номенклатура.Ссылка КАК Ссылка,
						   |	Номенклатура.Представление КАК Представление,
						   |	Номенклатура.Наименование КАК Наименование,
						   |	Номенклатура.Родитель КАК Родитель
	      	               |ИЗ
	      	               |	Справочник.Номенклатура КАК Номенклатура
						   |ГДЕ
						   |	Номенклатура.Ссылка В(&МассивНоменклатур)
	      	               |ИТОГИ ПО
	      	               |	Ссылка ТОЛЬКО ИЕРАРХИЯ");
	
	Запрос.УстановитьПараметр("МассивНоменклатур",мМассивВыгружаемыхТоваров); 
	
	ВыборкаГруппы	= Запрос.Выполнить().Выбрать();
	
	ВыгруженныеГруппы = Новый Массив;
	
	Пока ВыборкаГруппы.Следующий() Цикл
		
		Если ВыборкаГруппы.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыгруженныеГруппы.Найти(ВыборкаГруппы.Ссылка)<>Неопределено тогда
			Продолжить;
		КонецЕсли;	
		
		SKUgroup	= ДобавитьОбъект(мДокXML, Строка(ВыборкаГруппы.Представление), "SKUgroup");
		
		ДобавитьПотомка(SKUgroup, "code"		, СТ_ЗначениеВСтрокуВнутр(ВыборкаГруппы.Ссылка));
		ДобавитьПотомка(SKUgroup, "name"		, СокрЛП(ВыборкаГруппы.Наименование));
		ДобавитьПотомка(SKUgroup, "deleted"		, 0);
		
		ИДРодителя = ?(ЗначениеЗаполнено(ВыборкаГруппы.Родитель), СТ_ЗначениеВСтрокуВнутр(ВыборкаГруппы.Родитель), "");
		ДобавитьПотомка(SKUgroup, "parentcode"	, ИДРодителя);
		
		ДобавитьНоду(SKUgroups, SKUgroup);
		
		ВыгруженныеГруппы.Добавить(ВыборкаГруппы.Ссылка);
			
	КонецЦикла;
	
	ДобавитьНоду(group, SKUgroups);
	
КонецПроцедуры

Процедура ВыгрузитьСпрОКСМ(group, XMLСекция)
	
КонецПроцедуры

Процедура ВыгрузитьСпрКлассификаторы(group, XMLСекция)
	
КонецПроцедуры

Процедура ВыгрузитьСпрВидыОплат(group, XMLСекция)
	
КонецПроцедуры

//ВыгрузитьДокПродажи
//ВыгрузитьДокВозвраты
//ВыгрузитьДокПриходы
//ВыгрузитьДокПеремещения
//ВыгрузитьРегОстатки
//ВыгрузитьРегДолги


#КонецОбласти

#Область ВыгрузкаРегистров

Процедура ВыгрузитьРегистры() Экспорт
		
	лБылаВыгрузка		= 0;
		
	Для Каждого СтрокаТЧОбъектВыгрузки Из ОбъектыВыгрузки Цикл
		Если Найти(СтрокаТЧОбъектВыгрузки.ТипОбъектов, "Р") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ (СтрокаТЧОбъектВыгрузки.Включен И СтрокаТЧОбъектВыгрузки.Отметка) Тогда
			Продолжить;
		КонецЕсли;
				
		Если лБылаВыгрузка = 0 Тогда
			лСЗнДанные	= Новый СписокЗначений();
			лСЗнДанные.Добавить("Регистры"			, "Текст");
			лСЗнДанные.Добавить(XMLВернутьВремя()	, "Параметр1");
			лСЗнДанные.Добавить(""					, "Параметр2");
			отчДобавитьВОтчет(лСЗнДанные, "Шапка");
			лБылаВыгрузка	= 1;
		КонецЕсли;
		
		мДокXML	= Новый COMОбъект(мТипXMLБибилиотеки);    
		ИмяФайлаВыгрузки = СтрокаТЧОбъектВыгрузки.XMLСекция + ".xml";
		group = XMLВыполнитьОперацию("СоздатьXML", мДокXML, ИмяФайлаВыгрузки, "registers", "Регистры");
		
		мКолвоОбъектов	= 0;
		лВремяНачала	= XMLВернутьВремя();
		СообщитьПодробно("Выгрузка данных """ + СтрокаТЧОбъектВыгрузки.Представление + """...", 1, 1, 1);	
		мСчетчикВыгрузки = 0;
		Выполнить(СтрокаТЧОбъектВыгрузки.Процедура + "(group)");
		
		лСЗнДанные	= Новый СписокЗначений();
		лСЗнДанные.Добавить(СтрокаТЧОбъектВыгрузки.Представление	, "Текст");
		лСЗнДанные.Добавить(лВремяНачала	, "Параметр1");
		лСЗнДанные.Добавить(мКолвоОбъектов	, "Параметр2");
		отчДобавитьВОтчет(лСЗнДанные, "Действие");
		
		Если xmlВыполнитьОперацию("СохранитьXML", мДокXML, ИмяФайлаВыгрузки, group) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СообщитьПодробно("Выгрузка данных """ + СтрокаТЧОбъектВыгрузки.Представление + """ завершена. Выгружено элементов:"+мСчетчикВыгрузки, 1, 1, 1);
		
	КонецЦикла;
	
	//Если xmlВыполнитьОперацию("СохранитьXML", ДокXML, лИмяФайлаВыгрузки, group) = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
КонецПроцедуры	//ВыгрузитьРегистры()

//По упаковкам
Процедура ВыгрузитьРегОстатки(group) Экспорт
	
	//<rests>
	//	<SKU>
	//		<skucode/>		<!--Код товара-->
	//		<storecode/>	<!--Код склада-->
	//		<firmcode/>		<!--Код фирмы-->
	//		<period/>		<!--Дата остатка товара-->
	//		<quantity/>		<!--Количество-->
	//	</SKU>
	//</rests>
	
	rests	= мДокXML.CreateElement("rests");
    
	лДатаНачала		= ТекущаяДата();
	лВремяНачала	= XMLВернутьВремя();
	
	ОсновнойСкладОтгрузки = бг_КонстантыПовтИсп.ЗначениеКонстанты("ОсновнойСкладОтгрузки", Пользователь);
	КаналПродажХорека = бг_КонстантыПовтИсп.ЗначениеКонстанты("КаналПродажХорека", Пользователь);
	
	ЕдиницаПоКлассификаторуКоробка = ЕдиницаПоКлассификаторуКоробка();
	
	Если ЕдиницаПоКлассификаторуКоробка = Неопределено Тогда 
		СообщитьПодробно("Выгрузка справочника ""Товары"" не может быть произведена, поскольку не найдена единица по классификатору ""Коробка"" с кодом 8751", 1, 0, 1);	
		Возврат;
	КонецЕсли;		 
	
	Запрос	= Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК УпаковкаКоробка
	|ПОМЕСТИТЬ НоменклатураИмеющаяУпаковкиКоробки
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец В(&МассивНоменклатур)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры <> """"
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаПоКлассификаторуКоробка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_ХарактеристикиУпаковокПаллет.Номенклатура КАК Номенклатура,
	|	бг_ХарактеристикиУпаковокПаллет.УпаковкаПаллета КАК УпаковкаПаллета,
	|	бг_ХарактеристикиУпаковокПаллет.Характеристика КАК Характеристика,
	|	бг_ХарактеристикиУпаковокПаллет.УпаковкаПаллета.Родитель КАК УпаковкаКоробка
	|ПОМЕСТИТЬ ХарактеристикиУпаковокПаллет
	|ИЗ
	|	РегистрСведений.бг_ХарактеристикиУпаковокПаллет КАК бг_ХарактеристикиУпаковокПаллет
	|ГДЕ
	|	бг_ХарактеристикиУпаковокПаллет.Номенклатура В(&МассивНоменклатур)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_ПриоритетыКаналовПродажДолгосрочныхРезервов.Организация КАК Организация,
	|	бг_ПриоритетыКаналовПродажДолгосрочныхРезервов.КаналПродаж КАК КаналПродаж
	|ПОМЕСТИТЬ ПриоритетыКаналовПродажДолгосрочныхРезервов
	|ИЗ
	|	РегистрСведений.бг_ПриоритетыКаналовПродажДолгосрочныхРезервов КАК бг_ПриоритетыКаналовПродажДолгосрочныхРезервов
	|ГДЕ
	|	бг_ПриоритетыКаналовПродажДолгосрочныхРезервов.ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго)
	|	И бг_ПриоритетыКаналовПродажДолгосрочныхРезервов.Организация В(&МассивОрганизаций)
	|
	|СГРУППИРОВАТЬ ПО
	|	бг_ПриоритетыКаналовПродажДолгосрочныхРезервов.КаналПродаж,
	|	бг_ПриоритетыКаналовПродажДолгосрочныхРезервов.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Состояние КАК Состояние,
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ИнформацияОДоступности.Характеристика КАК Характеристика,
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ИнформацияОДоступности.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	ИнформацияОДоступности.Свободно КАК Свободно,
	|	ИнформацияОДоступности.Зарезервировано КАК Зарезервировано
	|ПОМЕСТИТЬ ИнформацияОДоступностиОбщая
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.Состояние В (ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе), ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве))
	|	И (ИнформацияОДоступности.Свободно <> 0
	|			ИЛИ ИнформацияОДоступности.Зарезервировано <> 0)
	|	И ИнформацияОДоступности.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ИнформацияОДоступности.Номенклатура В(&МассивНоменклатур)
	|	И ИнформацияОДоступности.Склад В(&МассивСкладов)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.Склад КАК Справочник.Склады).бг_Организация В (&МассивОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ИнформацияОДоступности.Характеристика КАК Характеристика,
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ИнформацияОДоступности.Свободно КАК Остаток,
	|	ЕСТЬNULL(ИнформацияОДоступности.ЗаказНаОтгрузку.бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка)) КАК КаналПродаж
	|ПОМЕСТИТЬ ИнформацияОДоступностиУточнённая
	|ИЗ
	|	ИнформацияОДоступностиОбщая КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.Состояние В (ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе))
	|	И ИнформацияОДоступности.Свободно <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ИнформацияОДоступности.Характеристика КАК Характеристика,
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ИнформацияОДоступности.Зарезервировано КАК Остаток,
	|	ЕСТЬNULL(ИнформацияОДоступности.ЗаказНаОтгрузку.бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка)) КАК КаналПродаж
	|ПОМЕСТИТЬ ИнформацияОДоступностиДолгосрочныеРезервы
	|ИЗ
	|	ИнформацияОДоступностиОбщая КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.Состояние В (ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве))
	|	И ИнформацияОДоступности.Зарезервировано <> 0
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв = ИСТИНА
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация В (&МассивОрганизаций)
	|	И (ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация, ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ПунктНазначения.КаналПродаж) В
	|			(ВЫБРАТЬ
	|				ПриоритетыКаналовПродажДолгосрочныхРезервов.Организация КАК Организация,
	|				ПриоритетыКаналовПродажДолгосрочныхРезервов.КаналПродаж КАК КаналПродаж
	|			ИЗ
	|				ПриоритетыКаналовПродажДолгосрочныхРезервов КАК ПриоритетыКаналовПродажДолгосрочныхРезервов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураИмеющаяУпаковкиКоробки.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(НоменклатураИмеющаяУпаковкиКоробки.УпаковкаКоробка) КАК УпаковкаКоробка
	|ПОМЕСТИТЬ НоменклатураСУпаковкамиНоБезХарактеристик
	|ИЗ
	|	НоменклатураИмеющаяУпаковкиКоробки КАК НоменклатураИмеющаяУпаковкиКоробки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХарактеристикиУпаковокПаллет КАК ХарактеристикиУпаковокПаллет
	|		ПО НоменклатураИмеющаяУпаковкиКоробки.Номенклатура = ХарактеристикиУпаковокПаллет.Номенклатура
	|ГДЕ
	|	ХарактеристикиУпаковокПаллет.Номенклатура ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураИмеющаяУпаковкиКоробки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиУпаковокПаллет.УпаковкаКоробка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаКоробка,
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.Склад КАК Справочник.Склады).бг_Организация КАК Организация,
	|	СУММА(ИнформацияОДоступности.Остаток) КАК Остаток,
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.Остаток, 0) КАК ДолгосрочныйРезерв,
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка)) КАК КаналПродаж
	|ИЗ
	|	ИнформацияОДоступностиУточнённая КАК ИнформацияОДоступности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХарактеристикиУпаковокПаллет КАК ХарактеристикиУпаковокПаллет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураИмеющаяУпаковкиКоробки КАК НоменклатураИмеющаяУпаковкиКоробки
	|			ПО (НоменклатураИмеющаяУпаковкиКоробки.Номенклатура = ХарактеристикиУпаковокПаллет.Номенклатура)
	|				И (НоменклатураИмеющаяУпаковкиКоробки.УпаковкаКоробка = ХарактеристикиУпаковокПаллет.УпаковкаКоробка)
	|		ПО (ИнформацияОДоступности.Номенклатура = ХарактеристикиУпаковокПаллет.Номенклатура)
	|			И (ИнформацияОДоступности.Характеристика = ХарактеристикиУпаковокПаллет.Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнформацияОДоступностиДолгосрочныеРезервы КАК ИнформацияОДоступностиДолгосрочныеРезервы
	|		ПО (ИнформацияОДоступности.Номенклатура = ИнформацияОДоступностиДолгосрочныеРезервы.Номенклатура)
	|			И (ИнформацияОДоступности.Характеристика = ИнформацияОДоступностиДолгосрочныеРезервы.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ХарактеристикиУпаковокПаллет.УпаковкаКоробка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
	|	ИнформацияОДоступности.Номенклатура,
	|	ИнформацияОДоступности.Склад,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.Склад КАК Справочник.Склады).бг_Организация,
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.Остаток, 0),
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Номенклатура,
	|	НоменклатураСУпаковкамиНоБезХарактеристик.УпаковкаКоробка,
	|	ИнформацияОДоступности.Склад,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.Склад КАК Справочник.Склады).бг_Организация,
	|	СУММА(ИнформацияОДоступности.Остаток),
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.Остаток, 0),
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
	|ИЗ
	|	ИнформацияОДоступностиУточнённая КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НоменклатураСУпаковкамиНоБезХарактеристик КАК НоменклатураСУпаковкамиНоБезХарактеристик
	|		ПО (ИнформацияОДоступности.Номенклатура = НоменклатураСУпаковкамиНоБезХарактеристик.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИнформацияОДоступностиДолгосрочныеРезервы КАК ИнформацияОДоступностиДолгосрочныеРезервы
	|		ПО (ИнформацияОДоступности.Номенклатура = ИнформацияОДоступностиДолгосрочныеРезервы.Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияОДоступности.Номенклатура,
	|	ИнформацияОДоступности.Склад,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.Склад КАК Справочник.Склады).бг_Организация,
	|	НоменклатураСУпаковкамиНоБезХарактеристик.УпаковкаКоробка,
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка)),
	|	ЕСТЬNULL(ИнформацияОДоступностиДолгосрочныеРезервы.Остаток, 0)";
	
	Запрос.УстановитьПараметр("ЕдиницаПоКлассификаторуКоробка",	ЕдиницаПоКлассификаторуКоробка);
	Запрос.УстановитьПараметр("МассивНоменклатур",				мМассивВыгружаемыхТоваров);
	Запрос.УстановитьПараметр("МассивСкладов",					мМассивВыгружаемыхСкладов);
	Запрос.УстановитьПараметр("МассивОрганизаций",				мМассивВыгружаемыхОрганизаций);
	
	лДатаДляВывода = Формат(Период.ДатаНачала,"ДЛФ=Д");
	лОстатокНаДату = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		SKU = ДобавитьОбъект(мДокXML, "Остаток №X", "SKU");
		
		Если ЗначениеЗаполнено(Выборка.УпаковкаКоробка) Тогда
			skucode = СТ_ЗначениеВСтрокуВнутр(Выборка.УпаковкаКоробка);
		Иначе
			skucode = СТ_ЗначениеВСтрокуВнутр(Выборка.Номенклатура);
		КонецЕсли;
		
		Если Выборка.Склад = ОсновнойСкладОтгрузки
			И Выборка.КаналПродаж <> КаналПродажХорека Тогда
			quantity = Выборка.Остаток + Выборка.ДолгосрочныйРезерв;
		Иначе
			quantity = Выборка.Остаток;
		КонецЕсли;
			
		storecode = СТ_ЗначениеВСтрокуВнутр(Выборка.Склад);
		firmcode = СТ_ЗначениеВСтрокуВнутр(Выборка.Организация);
		period = лДатаДляВывода;
		
		ДобавитьПотомка(SKU, "skucode"		, skucode);
		ДобавитьПотомка(SKU, "storecode"	, storecode);
		ДобавитьПотомка(SKU, "firmcode"		, firmcode);
		ДобавитьПотомка(SKU, "period"		, period);
		ДобавитьПотомка(SKU, "quantity"		, quantity);

		ДобавитьНоду(rests, SKU);
	
		Если Выборка.Склад = ОсновнойСкладОтгрузки Тогда
			
			SKU = ДобавитьОбъект(мДокXML, "Остаток №X", "SKU");
			
			ДобавитьПотомка(SKU, "skucode"		, skucode);
			ДобавитьПотомка(SKU, "storecode"	, "Хорека");
			ДобавитьПотомка(SKU, "firmcode"		, firmcode);
			ДобавитьПотомка(SKU, "period"		, period);
			ДобавитьПотомка(SKU, "quantity"		, Выборка.Остаток + Выборка.ДолгосрочныйРезерв);
			
			ДобавитьНоду(rests, SKU);
			
		КонецЕсли;
		
		лОстатокНаДату = лОстатокНаДату + Выборка.Остаток;
		
	КонецЦикла;

	СообщитьПодробно("Остаток товаров на "+Формат(лДатаДляВывода,"ДЛФ=Д")+": "+лОстатокНаДату, 2, 1, 1);
	
	ВывестиВXMLЛог(лДатаНачала, лВремяНачала, "rests; Выгружено остатков на "+Формат(лДатаДляВывода, "ДФ=""гггг-ММ-дд""")+"; "+лОстатокНаДату);
		
	ДобавитьНоду(group, rests);

КонецПроцедуры

Процедура ВыгрузитьРегДолги(group) Экспорт

	
	
КонецПроцедуры
	
#КонецОбласти   

#КонецОбласти   


#Область ФормированиеОтчетаПоВыгрузке

Процедура отчДобавитьВОтчет(пСЗнДанные = "", пСекция = "Действие", пВыводитьДату = 0, пВыводитьВремя = 0) Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	Если пСЗнДанные = "" Тогда
		Возврат;
	КонецЕсли;
	
	лОбласть = мМакетОтчета.ПолучитьОбласть(пСекция + "|Вертикальная");
	Если ТипЗнч(пСЗнДанные) = Тип("СписокЗначений") Тогда
		лОбласть.Параметры.Текст		= пСЗнДанные.Получить(0).Значение;
		лОбласть.Параметры.Параметр1	= пСЗнДанные.Получить(1).Значение;
		лОбласть.Параметры.Параметр2	= пСЗнДанные.Получить(2).Значение;
		мТаблицаОтчета.Вывести(лОбласть);
		
		Для р = 4 По пСЗнДанные.Количество() Цикл
			лОбласть	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Реквизит");
			лОбласть.Параметры.Реквизит	= пСЗнДанные.Получить(р-1).Значение;
			мТаблицаОтчета.Присоединить(лОбласть);
		КонецЦикла;
	Иначе
		лОбласть.Параметры.Текст		= пСЗнДанные;
		лОбласть.Параметры.Параметр1	= ?(пВыводитьДату = 0, "", XMLВернутьДату());
		лОбласть.Параметры.Параметр2	= ?(пВыводитьВремя = 0, "", XMLВернутьВремя());
		мТаблицаОтчета.Вывести(лОбласть);
	КонецЕсли;
	
КонецПроцедуры	//отчДобавитьВОтчет()

//*******************************************
Процедура отчДобавитьВОтчетСтроку(пСтрока = "", пСекция = "Информация") Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	Если пСтрока = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если пСекция = "Ошибка" Тогда
		Если пСтрока = мСтрокаСообщения Тогда
			Возврат;
		КонецЕсли;
		мСтрокаСообщения	= пСтрока;
	КонецЕсли;
	
	ОбластьМакета	= мМакетОтчета.ПолучитьОбласть(пСекция + "|Вертикальная");
	ОбластьМакета.Параметры.Текст		= пСтрока;
	мТаблицаОтчета.Вывести(ОбластьМакета);
	
КонецПроцедуры	//отчДобавитьВОтчетСтроку()

Функция отчПолучитьИмяФайлаОтчета(Дата) Экспорт
	
	ДатаСтрокой		= ПреобразоватьДатуВСтроку(Дата);
	КаталогОтчетов	= КаталогДанных + "reports\";
	ИмяФайла		= СокрЛП("  "+Строка(ИнфоКодДистрибьютора) + "_" + ДатаСтрокой + ".mxl");
	ПолноеИмяФайла	= КаталогОтчетов + ИмяФайла;
	
	СоздатьНесуществующиеПодкаталоги(ПолноеИмяФайла);
	
	Возврат ПолноеИмяФайла;
	
КонецФункции	//отчПолучитьИмяФайлаОтчета()

Процедура СообщитьПодробно(пТекcтСообщения = "", пчОтступ = 1, пПоказыватьВремя = 0, пВыводить = 1, пСекция = "Информация") Экспорт
	
	Если (пПоказыватьВремя = 1) или (пПоказыватьВремя = 3) Тогда
		пТекcтСообщения = XMLВернутьВремя() + "  " + пТекcтСообщения;
	КонецЕсли;
	
	Если (пПоказыватьВремя = 2) или (пПоказыватьВремя = 3) Тогда
		пТекcтСообщения = XMLВернутьДату() + "  " + пТекcтСообщения;
	КонецЕсли;
	
	Для р = 1 По пчОтступ Цикл
		пТекcтСообщения = Символы.Таб + пТекcтСообщения;
	КонецЦикла;
	
	Если (пВыводить = 1) или (пВыводить = 3) или (пВыводить = 4) Тогда
		Если Не АвтоматическаяВыгрузкаПоРасписанию Тогда 
			Сообщить(пТекcтСообщения);
		КонецЕсли;
	КонецЕсли;
	
	//Если (пВыводить = 4) Тогда
	//	Если Не АвтоматическаяВыгрузкаПоРасписанию Тогда
	//		Сообщить(пТекcтСообщения);
	//	КонецЕсли;
	//КонецЕсли;
	
	Если (пВыводить = 2) или (пВыводить = 3) или (пВыводить = 4) Тогда
		отчДобавитьВОтчетСтроку(пТекcтСообщения, пСекция);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОбъект(пДокXML, пПредставление, пXMLСекция, пСообщать = Истина) Экспорт
	мСчетчикВыгрузки = мСчетчикВыгрузки + 1;
	мКолвоОбъектов	= мКолвоОбъектов + 1;
	object	= пДокXML.CreateElement(пXMLСекция);
	
	Возврат object;
	
КонецФункции	//ДобавитьОбъект()

Процедура отчОткрытьОтчет() Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	//мНаименованиеОтчета	= "" + ТекущаяДата() + ": отчет по синхронизации с ""ST-Чикаго""";
	мТаблицаОтчета.Очистить();
	
	ПолноеИмяФайла = отчПолучитьИмяФайлаОтчета(ТекущаяДата());
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		мТаблицаОтчета.Прочитать(ПолноеИмяФайла);
	КонецЕсли;
	
	мСтрокаСообщения	= "";
	ОбластьПустая_Вертикальная	= мМакетОтчета.ПолучитьОбласть("Пустая|Вертикальная");
	мТаблицаОтчета.Вывести(ОбластьПустая_Вертикальная);
	
КонецПроцедуры	//отчОткрытьОтчет()

Процедура отчЗакрытьОтчет() Экспорт
	
	Если Не мИспользоватьЛогСообщений Тогда
		Возврат;
	КонецЕсли;
	
	//лНаименованиеОтчета	= "" + ДатаКонца + ": отчет по синхронизации с ""ST-Чикаго""";
	
	лПолноеИмяФайла	= отчПолучитьИмяФайлаОтчета(ТекущаяДата());
	//мТаблицаОтчета.ТолькоПросмотр	= Истина;
	//мТаблицаОтчета.Показать(лНаименованиеОтчета, "");
	мТаблицаОтчета.Вывод	= ИспользованиеВывода.Разрешить;
	ПутьФайла = СтрЗаменить(лПолноеИмяФайла, """", "");
	Если АвтоматическаяВыгрузкаПоРасписанию Тогда 
		Если НужноВыполнятьВыгрузку(ПутьФайла) Тогда
			мТаблицаОтчета.Записать(ПутьФайла);
		КонецЕсли;
	Иначе  
		Если НужноВыполнятьВыгрузку(ПутьФайла) Тогда
			мМассивАдресовФайловВоВременномХранилище.Добавить(Новый Структура("ПутьФайла, АдресВоВременномХранилище", ПутьФайла,  ПоместитьВоВременноеХранилище(мТаблицаОтчета)));			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	//отчЗакрытьОтчет()

Функция ПреобразоватьДатуВСтроку(пДата) Экспорт
	
	лДень	= Строка(День(пДата));
	лМесяц	= Строка(Месяц(пДата));
	лГод	= Строка(Год(пДата));
	
	Если СтрДлина(лДень) < 2 Тогда
		лДень	= "0" + лДень;
	КонецЕсли;
	
	Если СтрДлина(лМесяц) < 2 Тогда
		лМесяц	= "0" + лМесяц;
	КонецЕсли;
	
	Если СтрДлина(лГод) < 2 Тогда
		лГод	= "0" + лГод;
	КонецЕсли;
	
	Возврат лГод + лМесяц + лДень;
	
КонецФункции	//ПреобразоватьДатуВСтроку()

#КонецОбласти

#Область ПроцедурыРаботыСXML

Функция ПолучитьТипXMLБибилиотеки() Экспорт
	
	мТипXMLБибилиотеки	= "";
	
	СписокТипыXML	= Новый СписокЗначений();
	СписокТипыXML.Добавить("MSXML2.DOMDocument.4.0");
	СписокТипыXML.Добавить("MSXML2.DOMDocument");
	
	Для Каждого мТипXMLБибилиотеки Из СписокТипыXML Цикл
		Попытка
			ТестовыйXML = Новый COMОбъект(мТипXMLБибилиотеки);
		Исключение
			мТипXMLБибилиотеки = "";
			Продолжить;
		КонецПопытки;
		Прервать;
	КонецЦикла;
	
КонецФункции

Функция XMLВыполнитьОперацию(пТипОперации, пДокXML, пПараметр1 = "", пПараметр2 = "", пПараметр3 = "") Экспорт
	
	Если пТипОперации = "СоздатьXML" Тогда
		
		пДокXML	= ПолучитьCOMОбъект("", мТипXMLБибилиотеки);
		node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
		пДокXML.preserveWhiteSpace = 1;
		пДокXML.AppendChild(node);
		
		group = пДокXML.CreateElement(пПараметр2);
		
		Возврат group;
		
	ИначеЕсли пТипОперации = "СохранитьXML" Тогда
		
		лИмяФайлаВыгрузки	= пПараметр1;
		group				= пПараметр2;
		
		Если group.childNodes().length() = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		пДокXML.AppendChild(group);
		
		лПолноеИмяФайлаВыгрузки	= КаталогДанных + лИмяФайлаВыгрузки;
		Если СоздатьНесуществующиеПодкаталоги(лПолноеИмяФайлаВыгрузки) = 0 Тогда
			СообщитьПодробно("Не удалось сохранить файл #1" + лПолноеИмяФайлаВыгрузки, 2, 0, 2, "Ошибка");
			Возврат 0;
		КонецЕсли;
		
		Если АвтоматическаяВыгрузкаПоРасписанию Тогда 
			Попытка
				Если НужноВыполнятьВыгрузку(лПолноеИмяФайлаВыгрузки) Тогда
					пДокXML.Save(лПолноеИмяФайлаВыгрузки);
				КонецЕсли;
			Исключение
				СообщитьПодробно("Не удалось сохранить файл #2" + лПолноеИмяФайлаВыгрузки, 2, 0, 2, "Ошибка");
				СообщитьПодробно(ОписаниеОшибки(), 2, 0, 2, "Ошибка")
			КонецПопытки;
		Иначе            
			ДобавитьАдресФайлаВременногоХранилищаВМассив(пДокXML, лПолноеИмяФайлаВыгрузки);		
		КонецЕсли;
	
		Возврат 1;
		
	ИначеЕсли пТипОперации = "ЗаписатьLog" Тогда
		
		лИмяФайлаВыгрузкиДляЛога	= пПараметр1;
		лИмяФайлаЛога				= пПараметр2;
		
		лПолноеИмяФайлаЛога	= КаталогДанных + лИмяФайлаЛога;
		лФайл	= Новый Файл(лПолноеИмяФайлаЛога);
		Если лФайл.Существует() Тогда
			пДокXML.Load(лПолноеИмяФайлаЛога);
		Иначе
			пДокXML	= ПолучитьCOMОбъект("", мТипXMLБибилиотеки);
			node = пДокXML.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
			пДокXML.preserveWhiteSpace = 1;
			пДокXML.AppendChild(node);
		КонецЕсли;
		
		Попытка
			group	= пДокXML.selectSingleNode("fileslog");
			Если group = Неопределено Тогда
				group = пДокXML.CreateElement("fileslog");
				пДокXML.AppendChild(group);
			КонецЕсли;
		Исключение
			group = пДокXML.CreateElement("fileslog");
			пДокXML.AppendChild(group);
		КонецПопытки;
		
		Попытка
			chicago = group.selectSingleNode("chicago");
			Если chicago = Неопределено Тогда
				chicago = пДокXML.CreateElement("chicago");
				group.AppendChild(chicago);
			КонецЕсли;
		Исключение
			chicago = пДокXML.CreateElement("chicago");
			group.AppendChild(chicago);
		КонецПопытки;
		
		Попытка
			client = group.selectSingleNode("client");
			Если client = Неопределено Тогда
				client = пДокXML.CreateElement("client");
				group.AppendChild(client);
			КонецЕсли;
		Исключение
			client = пДокXML.CreateElement("client");
			group.AppendChild(client);
		КонецПопытки;
		
		лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		Пока лПозиция <> 0 Цикл
			лИмяФайлаВыгрузкиДляЛога	= Сред(лИмяФайлаВыгрузкиДляЛога, лПозиция + 1);
			лПозиция	= Найти(лИмяФайлаВыгрузкиДляЛога, "\");
		КонецЦикла;
		Если Прав(лИмяФайлаВыгрузкиДляЛога, 4) = ".xml" Тогда
			лИмяФайлаВыгрузкиДляЛога	= Лев(лИмяФайлаВыгрузкиДляЛога, СтрДлина(лИмяФайлаВыгрузкиДляЛога) - 4);
		КонецЕсли;
		Node = пДокXML.CreateElement(лИмяФайлаВыгрузкиДляЛога);
		Node.SetAttribute("status", "false");
		client.AppendChild(Node);
		
		Если АвтоматическаяВыгрузкаПоРасписанию Тогда
			Если НужноВыполнятьВыгрузку("filelog.xml") Тогда
				пДокXML.Save(КаталогДанных + "filelog.xml");
			КонецЕсли;
		Иначе
			ДобавитьАдресФайлаВременногоХранилищаВМассив(пДокXML, КаталогДанных + "filelog.xml");	
		КонецЕсли;
		
		Возврат 1;
		
	КонецЕсли;
	
КонецФункции	//XMLВыполнитьОперацию()

Функция НужноВыполнятьВыгрузку(ИмяФайлаВыгрузки)

	Если ВыгружатьТолькоReferences Тогда
		Возврат СтрНайти(ИмяФайлаВыгрузки, "references") <> 0;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

Функция XMLВернутьДату(пДата = "", пОбратныйФормат = 0) Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	Если пОбратныйФормат = 1 Тогда
		лДата	= Формат(пДата, "ДФ=""гггг.ММ.дд""");
	Иначе
		лДата	= Формат(пДата, "ДФ=""дд.ММ.гггг""");
	КонецЕсли;
	
	Возврат лДата;
	
КонецФункции	//XMLВернутьДату()

Функция XMLВернутьВремя(пДата = "") Экспорт
	
	Если пДата = "" Тогда
		пДата	= ТекущаяДата();
	КонецЕсли;
	
	лЧас	= Строка(Час(пДата));
	лМин	= Строка(Минута(пДата));
	лСек	= Строка(Секунда(пДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лВремя	= лЧас + ":" + лМин + ":" + лСек;
	
	Возврат лВремя;
	
КонецФункции	//XMLВернутьВремя()

// Процедура делает запись в XML-лог обмена
// Параметры:
//
//BeginDate - дата начала выполнения события, если параметр не задан, заполняется текущей датой
//BeginTime - время начала выполнения события, если параметр не задан, заполняется текущим временем
//
//Description - здесь будет вся информация о событии загрузки или выгрузки через разделитель "точка с запятой".  ";"
//Содержание поля Description:
//	Интеграция с УС; Операция обмена; Объект (как в xml); Описание информации; Количественная мера информации
//Пример Description:
//	Интеграция с УС; Выгрузка данных; currencies; Выгружено элементов; 5 
//
//ID - внешний код, может отсутствовать. Можно использовать когда ошибка в каком-то документе
//
//State - Описывает состояние события. Ошибка, В процессе или Успешно. Для нас интересны только Ошибка (сработает автоинформатор) и событие Успешно. 
//Возможные значения:
//	Audit_State_Fail        Ошибка
//	Audit_State_Progress    В процессе
//	Audit_State_Success    	Успешно
//
//Reason
//Возможные значения:
//	Audit_Reason_Error            	Ошибка данных
//	Audit_Reason_NoConnect        	Отсутствие связи
//	Audit_Reason_NoDataForObject    Нет данных для загрузки по текущему БО
//	Audit_Reason_NotDataForImport   Нет данных для загрузки
//	Audit_Reason_Null            	Пустое значение
//	Audit_Reason_SystemFail        	Сбой системы
//
//EventType - Тип события
//	всегда Audit_Type_ERP_to_Chicago	Обозначает выгрузку из УС в Чикаго
Процедура ВывестиВXMLЛог(BeginDate="", BeginTime="", Description="", ID="", State="Audit_State_Success", Reason="Audit_Reason_Null", EventType="Audit_Type_ERP_to_Chicago")
		
	Если (Description="") И (ID="") Тогда
		Возврат;
	КонецЕсли;
	
	BeginDate = ?(BeginDate="", ТекущаяДата(), BeginDate); 
	BeginTime = ?(BeginTime="", XMLВернутьВремя(), BeginTime);
	
	лDescription = СокрЛП("Интеграция с УС; Выгрузка данных; "+ Description);
			
	LogDataExchangeAudit = мЛогXML.CreateElement("LogDataExchangeAudit");

	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "State"		, State);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "EventType"	, EventType);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "BeginDate"	, ДатаВФорматеXMLЛога(BeginDate, BeginTime));
	
	//EndDate = ЛогXML.CreateElement("EndDate");
	//EndDate.SetAttribute("xsi:nil", "true");
	//LogDataExchangeAudit.AppendChild(EndDate);
	
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "EndDate"		, ДатаВФорматеXMLЛога(ТекущаяДата(),XMLВернутьВремя()));
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "ID"			, ID);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "Description"	, лDescription);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "Reason"		, Reason);
	xmlЛогДобавитьПотомка(LogDataExchangeAudit, "IsUpdate"		, "true");
	
	мGroupLogXML.AppendChild(LogDataExchangeAudit);
	
КонецПроцедуры

Процедура ДобавитьПотомка(pParent, пНазвание, пЗначение) Экспорт
	
	Попытка
		XMLДобавитьПотомка(pParent, пНазвание, пЗначение);
	Исключение
		СообщитьПодробно("ОШИБКА: " + пНазвание + " - " + пЗначение, 2, 0, 2, "Ошибка");
	КонецПопытки;
	
КонецПроцедуры	//ДобавитьПотомка()

Процедура ДобавитьНоду(pParent, pChild) Экспорт
	
	Если pChild.childNodes().length() > 0 Тогда
		pParent.AppendChild(pChild);
	КонецЕсли;
	
КонецПроцедуры	//ДобавитьНоду()

Процедура XMLДобавитьПотомка(pParent, пНазвание, пЗначение) Экспорт
	
	child		= мДокXML.CreateElement(пНазвание);
	child.text	= пЗначение;
	pParent.AppendChild(child);
	
КонецПроцедуры	//XMLДобавитьПотомка()

Процедура xmlЛогДобавитьПотомка(pParent, пНазвание, пЗначение)

	пДокВладелец= pParent.ownerDocument;
	Если пДокВладелец = Неопределено Тогда
		пДокВладелец = pParent; 
	КонецЕсли;
	
	child		= пДокВладелец.CreateElement(пНазвание);
	child.text	= пЗначение;
	pParent.AppendChild(child);
    	
КонецПроцедуры	//xmlДобавитьПотомка()

Функция ДатаВФорматеXMLЛога(пДата, пВремя)
	
	лСтрокаДата = Формат(пДата, "ДФ=""гггг-ММ-дд""");
	лСтрокаВремя 	= пВремя;
	
	Возврат лСтрокаДата + "T" + лСтрокаВремя + мСтрокаЧасовойПояс;
	
КонецФункции

Процедура ВыгрузитьПодчАтрибуты(group, Атрибуты) Экспорт

	//			<attribute>
	//				<attributecode/>	<!--код дополнительного атрибута-->
	//				<name/>				<!--название атрибута-->
	//				<valuetype/>		<!--тип значения (bool(13), integer(14), string(15), double(16), datetime(17))-->
	//				<value/>			<!--значение дополнительного атрибута-->
	//			</attribute>
	//		</attributes>
	
	attributes	= мДокXML.CreateElement("attributes");
	Если ТипЗнч(Атрибуты) = Тип("Структура") Тогда 
		ДобавитьУзелПодчиненныхАтрибутов(attributes, Атрибуты);			
	Иначе
		Для Каждого Атрибут Из Атрибуты Цикл
			ДобавитьУзелПодчиненныхАтрибутов(attributes, Атрибут);	
		КонецЦикла;		
	КонецЕсли;	
	
	ДобавитьНоду(group, attributes);
	
КонецПроцедуры	//ВыгрузитьПодчАтрибуты()

Процедура ДобавитьУзелПодчиненныхАтрибутов(attributes, Атрибут)
	
	attribute = мДокXML.CreateElement("attribute");
	
	ДобавитьПотомка(attribute, "attributecode"	, Атрибут.КодАтрибута);
	ДобавитьПотомка(attribute, "name"			, Атрибут.ИмяАтрибута);
	ДобавитьПотомка(attribute, "valuetype"		, Атрибут.ТипАтрибута);
	ДобавитьПотомка(attribute, "value"			, Атрибут.ЗначениеАтрибута);
	
	attributes.AppendChild(attribute);	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайламиИКаталогами

Функция СоздатьНесуществующиеПодкаталоги(Знач ПутьКФайлу) Экспорт
	
	Если Не АвтоматическаяВыгрузкаПоРасписанию Тогда 
		Возврат 1;
	КонецЕсли;
	
	МассивНовыхПодкаталогов	= Новый Массив;
	
	ЭтоФайл	= 1;
	Файл = Новый Файл(ПутьКФайлу);
	Пока Файл.Существует() = 0 Цикл
		Если ЭтоФайл = 1 Тогда
			ЭтоФайл	= 0;
		Иначе
			МассивНовыхПодкаталогов.Добавить(ПутьКФайлу);
		КонецЕсли;
		
		КоличествоСимволовПутьКФайлу = СтрДлина(ПутьКФайлу);
		Пока КоличествоСимволовПутьКФайлу > 1 Цикл
			Если Сред(ПутьКФайлу, КоличествоСимволовПутьКФайлу, 1) <> "\" Тогда
				КоличествоСимволовПутьКФайлу = КоличествоСимволовПутьКФайлу - 1;
				Продолжить;
			КонецЕсли;
			
			ПутьКФайлу = Лев(ПутьКФайлу, КоличествоСимволовПутьКФайлу - 1);
			Прервать;
		КонецЦикла;
		
		Если СтрДлина(ПутьКФайлу) <= 1 Тогда
			Прервать;
		КонецЕсли;
		
		Файл = Новый Файл(ПутьКФайлу);
	КонецЦикла;
	
	КоличествоСоздаваемыхПодкаталогов = МассивНовыхПодкаталогов.Количество();
	Пока КоличествоСоздаваемыхПодкаталогов > 0 Цикл
		Попытка
			СоздатьКаталог(МассивНовыхПодкаталогов.Получить(КоличествоСоздаваемыхПодкаталогов-1));
		Исключение
			Возврат 0;
		КонецПопытки;
		
		КоличествоСоздаваемыхПодкаталогов = КоличествоСоздаваемыхПодкаталогов - 1;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции	//СоздатьНесуществующиеПодкаталоги()

Функция СоздатьИмяФайлаИзШаблона(пШаблонФайлаВыгрузки) Экспорт
	
	лИмяФайлаВыгрузки	= пШаблонФайлаВыгрузки;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "ДФ=yyyyMMdd");
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 5);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "DD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 7);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "DD", лСтрЗамены);
	КонецЕсли;
	
	лДата	= ТекущаяДата();
	лЧас	= Строка(Час(лДата));
	лМин	= Строка(Минута(лДата));
	лСек	= Строка(Секунда(лДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMM");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HH");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HH", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "SS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "SS", лСтрЗамены);
	КонецЕсли;
	
	Возврат лИмяФайлаВыгрузки;
	
КонецФункции	//СоздатьИмяФайлаИзШаблона()

Процедура ДобавитьАдресФайлаВременногоХранилищаВМассив(Файл, ПутьФайла, ПутьФайла2 = "")
	
	Если НЕ НужноВыполнятьВыгрузку(ПутьФайла) Тогда
		Возврат;
	КонецЕсли;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	Файл.Save(ИмяВременногоФайла);           
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	СтруктураВМассив = Новый Структура;
	СтруктураВМассив.Вставить("ПутьФайла", ПутьФайла);
	СтруктураВМассив.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	Если НЕ ПутьФайла2 = "" Тогда 
		СтруктураВМассив.Вставить("ПутьФайла2", ПутьФайла2);
	КонецЕсли;
	
	мМассивАдресовФайловВоВременномХранилище.Добавить(СтруктураВМассив);			
	УдалитьФайлы(ИмяВременногоФайла);	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СТ_ЗначениеВСтрокуВнутр(пЭлемент) Экспорт
	
	Если пЭлемент = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(пЭлемент) Тогда
		Возврат "";
	КонецЕсли; 
	//{"#",47e6dd42-cd5c-4e3a-9bc4-14816ed53d38,31:00000000000000000000000000000000}
	
	ОбъектУПП = РегистрыСведений.бг_СоответствиеОбъектовУПП.ОбъектУПП(пЭлемент);
	Если ОбъектУПП = Неопределено Тогда
		лСтрока	= ЗначениеВСтрокуВнутр(пЭлемент);
	Иначе
		лСтрока	= ОбъектУПП;
	КонецЕсли;
	
	лДвоеточие	= Найти(лСтрока, ":");
	Если лДвоеточие > 0 Тогда
		лСтрока	= Сред(лСтрока, лДвоеточие+1);
	КонецЕсли;
	лСтрока	= СтрЗаменить(лСтрока, "}", "");
	
	Возврат лСтрока;
	
КонецФункции

Функция ПолучитьПредставлениеАдресаКонтрагента(ТекущийКонтрагент, ФорматироватьПредставлениеАдреса)
	
	ПредставлениеАдреса = "";	
	
	НайденнаяСтрокаКонтактнойИнформации = мТаблицаКонтактнойИнформацииКонтрагентов.Найти(ТекущийКонтрагент, "Объект");
	Если Не НайденнаяСтрокаКонтактнойИнформации = Неопределено Тогда 
		ПредставлениеАдреса = НайденнаяСтрокаКонтактнойИнформации.Представление;
		Если ФорматироватьПредставлениеАдреса Тогда 
			ФорматироватьПредставлениеАдресаКонтрагента(ПредставлениеАдреса);
		Иначе
			ПредставлениеАдреса = СокрЛП(ПредставлениеАдреса);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
		
КонецФункции

Процедура ФорматироватьПредставлениеАдресаКонтрагента(лАдрес)

	лАдрес = СокрЛП(лАдрес);
	
	Если СтрДлина(лАдрес)>85 тогда
		
		НомерСимвола=0;
		КолЗапятых=0;
		
		Пока НомерСимвола<300 цикл
			НомерСимвола=НомерСимвола+1;
			Если Сред(лАдрес,НомерСимвола,1)="," тогда
				КолЗапятых=КолЗапятых+1;
			КонецЕсли;
			
			Если КолЗапятых=3 тогда
				прервать;
			КонецЕсли;					
		КонецЦикла;
		
		Если КолЗапятых=3 тогда
			лАдрес=СокрЛП(Сред(лАдрес,НомерСимвола+1,200));	
		Иначе
			лАдрес=СокрЛП(Прав(лАдрес,80));			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ИнициализироватьВыборкуКонтрагентов()

	Если мВыборкаКонтрагенты = Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.Представление КАК Представление,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.бг_КодКлиентаSY КАК бг_КодКлиентаSY,
		|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Партнер.Код КАК КодПартнера,
		|	Контрагенты.Партнер.Поставщик КАК Поставщик
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка В (&МассивКонтрагентов)";		
		Запрос.УстановитьПараметр("МассивКонтрагентов", мМассивВыгружаемыхКонтрагентов);		
		мВыборкаКонтрагенты = Запрос.Выполнить().Выбрать();		
	Иначе
		мВыборкаКонтрагенты.Сбросить();
	КонецЕсли;
	
КонецПроцедуры 

Процедура ИнициализироватьТаблицуКонтактнойИнформацииКонтрагентов()
	
	Если мТаблицаКонтактнойИнформацииКонтрагентов = Неопределено Тогда 
		МассивТипыКИ = Новый Массив;
		МассивТипыКИ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
		
		МассивВидыКИ = Новый Массив;
		МассивВидыКИ.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
		
		мТаблицаКонтактнойИнформацииКонтрагентов = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(мМассивВыгружаемыхКонтрагентов, МассивТипыКИ, МассивВидыКИ, ТекущаяДата()); 
		мТаблицаКонтактнойИнформацииКонтрагентов.Индексы.Добавить("Объект");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

мМакетОтчета 				= ПолучитьМакет("Лог");
мСчетчикВыгрузки 			= 0;
мИспользоватьЛогСообщений 	= Истина;   

КонстантаЧасовойПояс = 3; //НовыйОбъектБД    
НомерЧасовогоПоясаСтрокой = Строка(Макс(КонстантаЧасовойПояс,-КонстантаЧасовойПояс));
ДобавитьЛидирующийНоль = ?(СтрДлина(НомерЧасовогоПоясаСтрокой)=1,1,0);
мСтрокаЧасовойПояс			= ?(КонстантаЧасовойПояс<0,"-","+") + ?(ДобавитьЛидирующийНоль=1,"0","") + НомерЧасовогоПоясаСтрокой + ":00"; 

#КонецЕсли