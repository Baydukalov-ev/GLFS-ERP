
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСтатусыМарок();
	
	НовыйСтатусМарок = Перечисления.бг_СтатусыАкцизныхМарок.Выбыла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьМаркиБезОстатков(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("ru='Не заполнена организация'");
		Возврат;
	КонецЕсли;
	
	Если ПомеченныеСтроки(Объект.СтатусыМарок).Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("ru='Не заполнены текуще статусы марок к отбору'");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМаркиБезОстатковНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировки(Команда)
	
	Если Не ЗначениеЗаполнено(НовыйСтатусМарок) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("ru='Не заполнен новый статус марок'");
		Возврат;
	КонецЕсли;
	
	ПомеченныеСтрокиСерии = ПомеченныеСтроки(Товары);
	
	Если ПомеченныеСтрокиСерии.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("ru='Не отмечены серии к созданию корректировок'");
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеВопроса = Новый ОписаниеОповещения("СоздатьКорректировкиЗавершение", ЭтотОбъект);
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru='Будут изменены статусы по %1 сериям. Продолжить?'"),
		ПомеченныеСтрокиСерии.Количество());
	
	ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьКорректировкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Элементы.Товары.ТекущийЭлемент = Элементы.ТоварыКорректировкаРегистров Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КорректировкаРегистров) Тогда
		ПоказатьЗначение(, ТекущиеДанные.КорректировкаРегистров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСтатусыМарок()
	
	ВсеСтатусыМарок = бг_ДвижениеМарокИнтеграция.СтатусыМарок();
	
	ОтмечаемыеСтатусыМарокПоУмолчанию = Новый Массив;
	ОтмечаемыеСтатусыМарокПоУмолчанию.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.НаБалансе);
	
	Для каждого СтатусМарки Из ВсеСтатусыМарок Цикл
		
		НоваяСтрока = Объект.СтатусыМарок.Добавить();
		НоваяСтрока.СтатусМарки = СтатусМарки;
		
		НоваяСтрока.Пометка = ОтмечаемыеСтатусыМарокПоУмолчанию.Найти(СтатусМарки) <> Неопределено;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМаркиБезОстатковНаСервере()
	
	МаркиБезОстатков = МаркиБезОстатков();
	
	Товары.Загрузить(МаркиБезОстатков.МаркиСвернутые);
	КоличествоИтог = Товары.Итог("Количество");

	Для каждого СтрокаТовары Из Товары Цикл
		СтрокаТовары.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МаркиБезОстатков(СерииОтбор = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаркиБезОстатков = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Серия КАК Серия,
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток) КАК ВНаличииОстаток
	|ПОМЕСТИТЬ СерииСОстатком
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК
	|		ТоварыНаСкладахОстатки
	|ГДЕ
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток > 0
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.бг_Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СерииБезОстатка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	НЕ СерииНоменклатуры.Ссылка В
	|		(ВЫБРАТЬ
	|			СерииСОстатком.Серия КАК Серия
	|		ИЗ
	|			СерииСОстатком КАК СерииСОстатком)
	|	И &УсловиеСерииОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки
	|ПОМЕСТИТЬ ГУИДыМарок
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииБезОстатка КАК СерииБезОстатка
	|		ПО бг_ДвижениеМарок.Серия = СерииБезОстатка.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|		ПО бг_ДвижениеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
	|		И (бг_ИдентификаторыМарок.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_ДвижениеМарокСрезПоследних.ГУИДМарки КАК ГУИДМарки,
	|	бг_ДвижениеМарокСрезПоследних.Серия КАК Серия,
	|	бг_ДвижениеМарокСрезПоследних.КодУпаковки КАК КодУпаковки,
	|	бг_ДвижениеМарокСрезПоследних.СтатусМарки КАК СтатусМарки
	|ПОМЕСТИТЬ ДвижениеМарокСрезПоследних
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок.СрезПоследних(, ГУИДМарки В
	|		(ВЫБРАТЬ
	|			ГУИДыМарок.ГУИДМарки КАК ГУИДМарки
	|		ИЗ
	|			ГУИДыМарок КАК ГУИДыМарок)) КАК бг_ДвижениеМарокСрезПоследних
	|ГДЕ
	|	бг_ДвижениеМарокСрезПоследних.СтатусМарки В (&СтатусыМарок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеМарокСрезПоследних.Серия КАК Серия,
	|	СерииБезОстатка.Номенклатура КАК Номенклатура,
	|	ДвижениеМарокСрезПоследних.ГУИДМарки КАК ГУИДМарки,
	|	ДвижениеМарокСрезПоследних.КодУпаковки КАК КодУпаковки,
	|	1 КАК Количество
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	ДвижениеМарокСрезПоследних КАК ДвижениеМарокСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииБезОстатка КАК СерииБезОстатка
	|		ПО ДвижениеМарокСрезПоследних.Серия = СерииБезОстатка.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.Серия КАК Серия,
	|	Марки.Номенклатура КАК Номенклатура,
	|	Марки.ГУИДМарки КАК ГУИДМарки,
	|	Марки.КодУпаковки КАК КодУпаковки,
	|	Марки.Количество КАК Количество
	|ИЗ
	|	Марки КАК Марки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.Серия КАК Серия,
	|	Марки.Номенклатура КАК Номенклатура,
	|	СУММА(Марки.Количество) КАК Количество
	|ИЗ
	|	Марки КАК Марки
	|СГРУППИРОВАТЬ ПО
	|	Марки.Номенклатура,
	|	Марки.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Серия";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтатусыМарок", ВыбранныеСтатусыМарок());
	
	Если СерииОтбор <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСерииОтбор", "СерииНоменклатуры.Ссылка В(&СерииОтбор)");
		Запрос.УстановитьПараметр("СерииОтбор", СерииОтбор);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСерииОтбор", "Истина");
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Марки = РезультатыЗапроса[5].Выгрузить();
	МаркиСвернутые = РезультатыЗапроса[6].Выгрузить();
	
	МаркиБезОстатков.Вставить("Марки", Марки);
	МаркиБезОстатков.Вставить("МаркиСвернутые", МаркиСвернутые);
	
	Возврат МаркиБезОстатков;

КонецФункции

&НаСервере
Функция ВыбранныеСтатусыМарок()
	
	ВыбранныеСтатусыМарок = Новый Массив;
	
	Для каждого СтрокаСтатусыМарок Из ПомеченныеСтроки(Объект.СтатусыМарок) Цикл
		ВыбранныеСтатусыМарок.Добавить(СтрокаСтатусыМарок.СтатусМарки);
	КонецЦикла;
	
	Возврат ВыбранныеСтатусыМарок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПомеченныеСтроки(Таблица)
	
	Возврат Таблица.НайтиСтроки(Новый Структура("Пометка", Истина));
	
КонецФункции

&НаСервере
Процедура СоздатьКорректировкиНаСервере()
	
	ОтмеченныеСтроки = ПомеченныеСтроки(Товары);
	
	СерииОтбор = Новый Массив;
	
	Для каждого СтрокаТовары Из ОтмеченныеСтроки Цикл
		СерииОтбор.Добавить(СтрокаТовары.Серия);
	КонецЦикла;
	
	МаркиБезОстатков = МаркиБезОстатков(СерииОтбор);
	
	МаркиБезОстатков.Марки.Индексы.Добавить("Серия");
	
	Для каждого СтрокаТовары Из ОтмеченныеСтроки Цикл
		СоздатьКорректировкуНаСервере(СтрокаТовары, МаркиБезОстатков.Марки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКорректировкуНаСервере(СтрокаТовары, Марки)
	
	СтрокаТовары.КорректировкаРегистров = Неопределено;
	
	НайденныеМарки = Марки.НайтиСтроки(Новый Структура("Серия", СтрокаТовары.Серия));
	
	ДокументКорректировка = Документы.КорректировкаРегистров.СоздатьДокумент();
	ДокументКорректировка.Дата = ТекущаяДатаСеанса();
	ДокументКорректировка.Ответственный = Пользователи.ТекущийПользователь();
	ДокументКорректировка.Комментарий = СтрШаблон(
		НСтр("ru='Корректировка остатков марок проданных партий АП по серии %1'"),
		СтрокаТовары.Серия);
	ДокументКорректировка.Операция = Перечисления.ОперацииКорректировкиРегистров.РучнаяКорректировка;
	
	ДокументКорректировка.ТаблицаРегистров.Добавить().Имя = "бг_ДвижениеМарок";
	
	Для каждого СтрокаМарки Из НайденныеМарки Цикл
		Запись = ДокументКорректировка.Движения.бг_ДвижениеМарок.Добавить();
		Запись.Период = ДокументКорректировка.Дата;
		ЗаполнитьЗначенияСвойств(Запись, СтрокаМарки);
		Запись.СтатусМарки = НовыйСтатусМарок;
	КонецЦикла;
	
	Если НеРегистрироватьМаркиКВыгрузке Тогда
		ДокументКорректировка.Движения.бг_ДвижениеМарок.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	КонецЕсли;
	
	ДокументКорректировка.Записать();
	
	СтрокаТовары.КорректировкаРегистров = ДокументКорректировка.Ссылка;
	
	ОбщегоНазначения.СообщитьПользователю(
		СтрШаблон(НСтр("ru='Успешно создана %1'"), ДокументКорректировка.Ссылка),
		ДокументКорректировка.Ссылка);
	
КонецПроцедуры

#КонецОбласти
