#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьРолиИсполнителей();
	УстановитьВидимостьЭлементов();

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокЗаказов.КоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокКонтрагентыПриАктивизацииСтроки(Элемент)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КредитныеЛимиты, 
		"Контрагент.ГоловнойКонтрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока, 
		ВидСравненияКомпоновкиДанных.Равно, , Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОтсрочкиПлатежа, 
		"Контрагент.ГоловнойКонтрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока, 
		ВидСравненияКомпоновкиДанных.Равно, , Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокПунктыНазначения, 
		"Клиент.ГоловнойКонтрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока, 
		ВидСравненияКомпоновкиДанных.Равно, , Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиСогласования, 
		"ДопАналитика.ГоловнойКонтрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока, 
		ВидСравненияКомпоновкиДанных.Равно, , Истина);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиСогласования, 
		"ДопАналитика", Элементы.СписокПунктыНазначения.ТекущаяСтрока, 
		ВидСравненияКомпоновкиДанных.Равно, , Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СписокПунктыНазначенияПриАктивизацииЯчейки(Элемент)
	ОтборПоПунктуНазначения = ЭтаФорма.ТекущийЭлемент.Имя = "СписокПунктыНазначения";

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиСогласования, 
		"ДопАналитика.ГоловнойКонтрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока, 
		ВидСравненияКомпоновкиДанных.Равно, , Не ОтборПоПунктуНазначения);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(НастройкиСогласования, 
		"ДопАналитика", Элементы.СписокПунктыНазначения.ТекущаяСтрока, 
		ВидСравненияКомпоновкиДанных.Равно, , ОтборПоПунктуНазначения);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказовПриАктивизацииСтроки(Элемент)
	Элементы.ИсторияИзменений.Видимость = Ложь;
	Элементы.СостояниеВзаиморасчетов.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокПунктыНазначенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура("Контрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока);
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокПунктыНазначения" Тогда
		ЗначенияЗаполнения.Вставить("ПунктНазначения", Элементы.СписокПунктыНазначения.ТекущаяСтрока);
	КонецЕсли;	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.битПунктыНазначения.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура КредитныеЛимитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура("Контрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока);
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокПунктыНазначения" Тогда
		ЗначенияЗаполнения.Вставить("ПунктНазначения", Элементы.СписокПунктыНазначения.ТекущаяСтрока);
	КонецЕсли;	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.бг_КредитныеЛимиты.ФормаЗаписи", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ОтсрочкиПлатежаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура("Контрагент", Элементы.СписокКонтрагенты.ТекущаяСтрока);
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокПунктыНазначения" Тогда
		ЗначенияЗаполнения.Вставить("ПунктНазначения", Элементы.СписокПунктыНазначения.ТекущаяСтрока);
	КонецЕсли;	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.бг_ОтсрочкиПлатежаПокупателям.ФормаЗаписи", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСогласованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	ЗначенияЗаполнения = Новый Структура;
	Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокПунктыНазначения" Тогда
		ЗначенияЗаполнения.Вставить("ПунктНазначения", Элементы.СписокПунктыНазначения.ТекущаяСтрока);
	КонецЕсли;	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("РегистрСведений.бг_НастройкиСогласованияЗаказовКлиентов.ФормаЗаписи", ПараметрыФормы);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьСтатусСогласовано(Команда)
	УстановитьРезультатСогласования(ПредопределенноеЗначение("Перечисление.бг_РезультатыСогласования.Согласовано"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПринудительно(Команда)
	УстановитьРезультатСогласования(
		ПредопределенноеЗначение("Перечисление.бг_РезультатыСогласования.СогласованоПринудительно"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтклонено(Команда)
	УстановитьРезультатСогласования(ПредопределенноеЗначение("Перечисление.бг_РезультатыСогласования.НеСогласовано"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОчистить(Команда)
	УстановитьРезультатСогласования(ПредопределенноеЗначение("Перечисление.бг_РезультатыСогласования.ПустаяСсылка"));
КонецПроцедуры

&НаКлиенте
Процедура АвтоСогласование(Команда)
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокЗаказов);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АвтоСогласованиеСервер(ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокЗаказов);
	РассчитатьСкидкиНаценкиНаСервере(ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	Элементы.ИсторияИзменений.Видимость = Истина;
	
	ЗаказКлиента = Элементы.СписокЗаказов.ТекущаяСтрока;
	ИсторияСогласованияНаСервере(ЗаказКлиента);
КонецПроцедуры

&НаКлиенте
Процедура СостояниеВзаиморасчетов(Команда)
	Элементы.СостояниеВзаиморасчетов.Видимость = Истина;
	СостояниеВзаиморасчетовНаСервере(Элементы.СписокЗаказов.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийДляСБ(Команда)
	Оповещение = Новый ОписаниеОповещения("ДобавитьКомментарийЗавершение", ЭтаФорма);
	ПоказатьВводСтроки(Оповещение, , "Ввод комментария для службы безопасности", 0, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		ПунктНазначения = Элементы.СписокЗаказов.ТекущиеДанные.ПунктНазначения;
		КомментарийДляСБНаСервере(Результат, ПунктНазначения);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаОтсрочкиПлатежа(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокЗаказов);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Разрядность = 3;
	Оповещение = Новый ОписаниеОповещения("КорректировкаОтсрочкиПлатежаЗавершение", ЭтаФорма);
	ПоказатьВводЧисла(Оповещение, , "Ввод корректировки отсрочки платежа", Разрядность, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаОтсрочкиПлатежаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Не Результат = Неопределено Тогда
		
		ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокЗаказов);
		Для Каждого Документ Из ВыделенныеСтроки Цикл
			КорректировкаОтсрочкиПлатежаСервер(Документ, Результат);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ОчиститьСообщения();
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокЗаказов, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокЗаказов);
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормыИсторииИзменений(ЗаказКлиента)
    
    ПараметрыКлючаЗаписи = Новый Структура;
    ПараметрыКлючаЗаписи.Вставить("ЗаказКлиента", ЗаказКлиента);
    
    КлючЗаписи = РегистрыСведений.бг_СогласованиеЗаказовКлиентов.СоздатьКлючЗаписи(ПараметрыКлючаЗаписи);
    Возврат Новый Структура("Данные", КлючЗаписи);

КонецФункции
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	// Отключим видимость всех глобальных команд, кроме истории изменений
	Если Элементы.Найти("ГруппаГлобальныеКоманды") <> Неопределено Тогда
		Для Каждого ПодчиненныйЭлемент Из Элементы.ГруппаГлобальныеКоманды.ПодчиненныеЭлементы Цикл
			Если ПодчиненныйЭлемент.Имя <> "ФормаОбщаяКомандаИсторияИзменений" Тогда
				ПодчиненныйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// кнопка "Автосогласование"
	Если Не Пользователи.ЭтоПолноправныйПользователь()
		И РолиИсполнителя.НайтиСтроки(Новый Структура("КК", Истина)) = 0
		И РолиИсполнителя.НайтиСтроки(Новый Структура("ФК", Истина)) = 0 Тогда
		Элементы.СписокЗаказовАвтоСогласование.Видимость = Ложь;
	КонецЕсли;
	
	// кнопка "Корректировка отсрочки платежа"
	Элементы.СписокЗаказовКорректировкаОтсрочкиПлатежа.Видимость = 
		Пользователи.РолиДоступны("бг_ИзменениеОтсрочекПлатежейПокупателям");

КонецПроцедуры

&НаСервере
Процедура ИсторияСогласованияНаСервере(ЗаказКлиента)
	
	ОбновитьИсторию(ЗаказКлиента);

	ИсторияИзменений.Очистить();
	
	Отбор = Новый Структура("ЗаказКлиента", ЗаказКлиента);
	КлючЗаписи = РегистрыСведений.бг_СогласованиеЗаказовКлиентов.СоздатьКлючЗаписи(Отбор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Данные", КлючЗаписи);
	Версии = ИсторияДанных.ВыбратьВерсии(Отбор);
	
	ИсторияИзмененийКолонки = ИсторияИзменений.Выгрузить().Колонки;
	
	Для Каждого Версия Из Версии Цикл
		НоваяСтрока = ИсторияИзменений.Добавить();
		НоваяСтрока.ВидИзменения = Версия.ВидИзмененияДанных;
		Если Версия.Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВерсии = ИсторияДанных.ПолучитьДанныеВерсии(КлючЗаписи, Версия.НомерВерсии);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Версия);
		Для Каждого ЭлементДанныеВерсии Из ДанныеВерсии Цикл
			Если ИсторияИзмененийКолонки.Найти(ЭлементДанныеВерсии.Ключ) <> Неопределено Тогда
				Если ТипЗнч(ЭлементДанныеВерсии.Значение) = Тип("ФиксированнаяСтруктура")
					И ЗначениеЗаполнено(ЭлементДанныеВерсии.Значение.Ссылка) Тогда
					НоваяСтрока[ЭлементДанныеВерсии.Ключ] = ЭлементДанныеВерсии.Значение.Представление;
				Иначе
					НоваяСтрока[ЭлементДанныеВерсии.Ключ] = ЭлементДанныеВерсии.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиНаценкиНаСервере(ВыделенныеСтроки)
	
	Для Каждого ДокументСсылка Из ВыделенныеСтроки Цикл
		Попытка
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();

			СтруктураПараметры = СкидкиНаценкиЗаполнениеСервер.НовыйПараметрыРассчитать();
			СтруктураПараметры.ПрименятьКОбъекту				 = Истина;
			СтруктураПараметры.ТолькоПредварительныйРасчет		 = Ложь;
			ПримененныеСкидки = СкидкиНаценкиЗаполнениеСервер.Рассчитать(ДокументОбъект, СтруктураПараметры);
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, 
				РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОбщегоНазначения.СообщитьПользователю(
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке),
				ДокументСсылка);

			ЗаписьЖурналаРегистрации(ИнформацияОбОшибке,
				УровеньЖурналаРегистрации.Предупреждение,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура АвтоСогласованиеСервер(ВыделенныеСтроки)
	
	Для Каждого ДокументСсылка Из ВыделенныеСтроки Цикл
		РегистрыСведений.бг_СогласованиеЗаказовКлиентов.АвтоСогласованиеЗаказа(ДокументСсылка);
	КонецЦикла;

	Элементы.СписокЗаказов.Обновить();
КонецПроцедуры

&НаСервере
Функция ИдентификаторОбработки()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектОбработка.Метаданные().ПолноеИмя();
КонецФункции

&НаСервере
Процедура ЗаполнитьРолиИсполнителей()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсполнителиЗадач.ОсновнойОбъектАдресации КАК Организация,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияДополнительныхКонстант.Константа.Идентификатор = &РольКредитныйКонтролер
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК КК,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияДополнительныхКонстант.Константа.Идентификатор = &РольФинансовыйКонтролер
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ФК,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗначенияДополнительныхКонстант.Константа.Идентификатор = &РольСлужбаБезопасности
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК СБ
	|ИЗ
	|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗначенияДополнительныхКонстант КАК ЗначенияДополнительныхКонстант
	|		ПО ИсполнителиЗадач.РольИсполнителя = ЗначенияДополнительныхКонстант.Значение
	|ГДЕ
	|	ИсполнителиЗадач.Исполнитель = &Исполнитель
	|	И ИсполнителиЗадач.ОсновнойОбъектАдресации ССЫЛКА Справочник.Организации
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсполнителиЗадач.ОсновнойОбъектАдресации";
	
	Запрос.УстановитьПараметр("РольКредитныйКонтролер", "РольКредитныйКонтролер");
	Запрос.УстановитьПараметр("РольФинансовыйКонтролер", "РольФинансовыйКонтролер");
	Запрос.УстановитьПараметр("РольСлужбаБезопасности", "РольСлужбаБезопасности");
	Запрос.УстановитьПараметр("Исполнитель", Пользователи.ТекущийПользователь());
	ТаблицаРолиИсполнителя = Запрос.Выполнить().Выгрузить();

	РолиИсполнителя.Загрузить(ТаблицаРолиИсполнителя);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатСогласования(РезультатСогласования)
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокЗаказов);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если РолиИсполнителя.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'У пользователя отсутствуют роли для согласования заказов клиентов!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьРезультатСогласованияЗавершение", ЭтаФорма, 
		Новый Структура("ЗаказыКлиентов, РезультатСогласования", ВыделенныеСтроки, РезультатСогласования));
	СтруктураПараметров = Новый Структура("РезультатСогласования", РезультатСогласования);
	ОткрытьФорму(ИдентификаторОбработки() + ".Форма.ФормаРучноеСогласование",
		СтруктураПараметров,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатСогласованияЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(ВозвращенноеЗначение) Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеПараметры.Вставить("Комментарий", ВозвращенноеЗначение.Комментарий);
	ДополнительныеПараметры.Вставить("КК", ВозвращенноеЗначение.КК);
	ДополнительныеПараметры.Вставить("СБ", ВозвращенноеЗначение.СБ);
	ДополнительныеПараметры.Вставить("ФК", ВозвращенноеЗначение.ФК);
	УстановитьРезультатСогласованияНаСервере(ДополнительныеПараметры);
	
	Элементы.СписокЗаказов.Обновить();

КонецПроцедуры

&НаСервере
Процедура УстановитьРезультатСогласованияНаСервере(ДополнительныеПараметры)
    
	ЗаказыКлиентов = ДополнительныеПараметры.ЗаказыКлиентов;
	ДанныеПоЗаказамКлиентов = ДанныеПоЗаказамКлиентов(ЗаказыКлиентов);
	
	Для Каждого СтрокаЗаказКлиента Из ДанныеПоЗаказамКлиентов Цикл
		ЗаказКлиента = СтрокаЗаказКлиента.Ссылка;
		
		Если СтрокаЗаказКлиента.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
			ШаблонСообщения = НСтр("ru = 'Заказ уже закрыт! Состояние согласования менять нельзя. %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаказКлиента); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		РолиПоОрганизации = РолиПоОрганизации(РолиИсполнителя, СтрокаЗаказКлиента.Организация);
		
		Если РолиПоОрганизации = Неопределено Тогда
			Продолжить;
		ИначеЕсли ПроверитьВозможностьСогласования(СтрокаЗаказКлиента) = Ложь Тогда
			Продолжить;
		Иначе
			УстановитьРезультатСогласованияПоЗаказу(СтрокаЗаказКлиента, ДополнительныеПараметры, РолиПоОрганизации);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРезультатСогласованияПоЗаказу(СтрокаЗаказКлиента, ДополнительныеПараметры, РолиПоОрганизации)

	СтруктураРолей = Новый Структура("КК, ФК, СБ");
	РезультатСогласования = ДополнительныеПараметры.РезультатСогласования;
	СогласованоПринудительно = Перечисления.бг_РезультатыСогласования.СогласованоПринудительно;
	ЗаказКлиента = СтрокаЗаказКлиента.Ссылка;
	НовоеСостояниеСогласования = Новый Структура;
	
	Для Каждого Роль Из СтруктураРолей Цикл
		Ключ = Роль.Ключ;
		
		Если РезультатСогласования = СогласованоПринудительно
			И Не РолиПоОрганизации.КК 
			И Не РолиПоОрганизации.СБ 
			Тогда // принудительно может согласовывать только КК или СБ
			Продолжить;
		ИначеЕсли РезультатСогласования = Перечисления.бг_РезультатыСогласования.Согласовано
			И СтрокаЗаказКлиента["РезультатСогласования" + Ключ] = Перечисления.бг_РезультатыСогласования.АвтоСогласование
			Тогда // уже прошло автосогласование
			Продолжить;
		ИначеЕсли (РезультатСогласования = Перечисления.бг_РезультатыСогласования.НеСогласовано
			Или РезультатСогласования = СогласованоПринудительно)
			И ДополнительныеПараметры[Ключ] <> Истина 
			Тогда // если отказ или принудительное согласование, то выбираются пользователем виды согласования
			Продолжить;
		КонецЕсли;
		
		// Согласование ставим лишь там, где требуется виза
		Если РезультатСогласования = Перечисления.бг_РезультатыСогласования.Согласовано Тогда
			НастройкиСогласованияЗаказа = 
				РегистрыСведений.бг_НастройкиСогласованияЗаказовКлиентов.НастройкиСогласования(ЗаказКлиента);
			Если НастройкиСогласованияЗаказа["ТребуетсяВиза" + Ключ] = Ложь Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если РолиПоОрганизации[Роль.Ключ] Тогда
			НовоеСостояниеСогласования.Вставить("РезультатСогласования" + Ключ, РезультатСогласования);
			Если ЗначениеЗаполнено(ДополнительныеПараметры.Комментарий) Тогда
				НовоеСостояниеСогласования.Вставить("Комментарий" + Ключ, ДополнительныеПараметры.Комментарий);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Общий результат согласования
	Если (РезультатСогласования = Перечисления.бг_РезультатыСогласования.ПустаяСсылка()
		Или РезультатСогласования = СогласованоПринудительно)
		И (РолиПоОрганизации.КК Или РолиПоОрганизации.СБ) Тогда
		НовоеСостояниеСогласования.Вставить("РезультатСогласования", РезультатСогласования);
	КонецЕсли;
	
	РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ЗаписатьНовоеСостояние(ЗаказКлиента, 
		НовоеСостояниеСогласования);

КонецПроцедуры


&НаСервере
Функция ПроверитьВозможностьСогласования(СтрокаЗаказКлиента)
	ЗаказКлиента = СтрокаЗаказКлиента.Ссылка;

	РезультатПроверки = Истина;
	Если Не СтрокаЗаказКлиента.Проведен Тогда
		ШаблонСообщения = НСтр("ru = 'Заказ не проведен!: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗаказКлиента); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Если СтрокаЗаказКлиента.ЛицензияПросрочена = Истина Тогда
		ШаблонСообщения = НСтр("ru = 'Cрок действия лицензии контрагента %1 по отношению к планируемой дате отгрузки %2
			|превышает количество дней %3 установленные в константе ""Минимальное количество дней до окончания лицензии""!
			|Невозможно изменить статус согласования!: %4'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
			СтрокаЗаказКлиента.Контрагент, 
			СтрокаЗаказКлиента.ДатаОтгрузки,
			СтрокаЗаказКлиента.МинимальноеКоличествоДнейДоОкончанияЛицензии,
			ЗаказКлиента);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		РезультатПроверки = Ложь;
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции

&НаСервере
Функция РолиПоОрганизации(РолиИсполнителя, Организация)

	РолиПоОрганизации = РолиИсполнителя.НайтиСтроки(Новый Структура("Организация", Организация));
	Если РолиПоОрганизации.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	РолиПоОрганизации = РолиПоОрганизации[0];
	
	Возврат РолиПоОрганизации;

КонецФункции // ()

&НаСервере
Функция ДанныеПоЗаказамКлиентов(ЗаказыКлиентов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыКлиента.Ссылка КАК Ссылка,
	|	&МинимальноеКоличествоДнейДоОкончанияЛицензии КАК МинимальноеКоличествоДнейДоОкончанияЛицензии,
	|	ВЫБОР
	|		КОГДА ЗаказыКлиента.бг_Лицензия = ЗНАЧЕНИЕ(Справочник.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РАЗНОСТЬДАТ(ЗаказыКлиента.ДатаОтгрузки, ЗаказыКлиента.бг_Лицензия.бг_ДатаПрекращенияДействия, ДЕНЬ) <= &МинимальноеКоличествоДнейДоОкончанияЛицензии
	|	КОНЕЦ КАК ЛицензияПросрочена,
	|	ЗаказыКлиента.Проведен КАК Проведен,
	|	ЗаказыКлиента.Контрагент КАК Контрагент,
	|	ЗаказыКлиента.Организация КАК Организация,
	|	ЗаказыКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	бг_СогласованиеЗаказовКлиентов.РезультатСогласованияКК КАК РезультатСогласованияКК,
	|	бг_СогласованиеЗаказовКлиентов.РезультатСогласованияСБ КАК РезультатСогласованияСБ,
	|	бг_СогласованиеЗаказовКлиентов.РезультатСогласованияФК КАК РезультатСогласованияФК,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказыКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_СогласованиеЗаказовКлиентов КАК бг_СогласованиеЗаказовКлиентов
	|		ПО ЗаказыКлиента.Ссылка = бг_СогласованиеЗаказовКлиентов.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО ЗаказыКлиента.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|ГДЕ
	|	ЗаказыКлиента.Ссылка В(&ЗаказыКлиентов)";
	
	
	Запрос.УстановитьПараметр("ЗаказыКлиентов", ЗаказыКлиентов);
	Запрос.УстановитьПараметр("КаналПродажСобственнаяРозница", 
		бг_КонстантыПовтИсп.ЗначениеКонстанты("КаналПродажСобственнаяРозница"));
	Запрос.УстановитьПараметр("МинимальноеКоличествоДнейДоОкончанияЛицензии", 
		бг_КонстантыПовтИсп.ЗначениеКонстанты("МинимальноеКоличествоДнейДоОкончанияЛицензии"));
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура СостояниеВзаиморасчетовНаСервере(ЗаказКлиента)

	Если ЗаказКлиента <> Неопределено Тогда
		СостояниеВзаиморасчетов.Очистить();
		Запрос = РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ЗапросАвтоСогласование(ЗаказКлиента);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Таблица = ТаблицаСостояниеВзаиморасчетов(ЗаказКлиента, Выборка);
			СостояниеВзаиморасчетов.Вывести(Таблица);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ТаблицаСостояниеВзаиморасчетов(ЗаказПокупателя, СтруктураВзаиморасчетов)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.бг_СогласованиеЗаказовКлиентов.ПолучитьМакет("ПФ_MXL_СтруктураВзаиморасчетов");
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Заполнить(СтруктураВзаиморасчетов);
	
	СтруктураРазрезов = Новый Структура("ПоКонтрагенту, ПоДоговору, ПоПунктуНазначения");
	Для Каждого Разрез Из СтруктураРазрезов Цикл
		Если ЗначениеЗаполнено(СтруктураВзаиморасчетов["КредитныйЛимит" + Разрез.Ключ]) Тогда
			Область.Параметры["ОстатокЛимита" + Разрез.Ключ] = СтруктураВзаиморасчетов["КредитныйЛимит" + Разрез.Ключ]
				- СтруктураВзаиморасчетов["Долг" + Разрез.Ключ] - СтруктураВзаиморасчетов["Заказано" + Разрез.Ключ];
		КонецЕсли; 
		Если СтруктураВзаиморасчетов["Долг" + Разрез.Ключ] <> 0 Тогда
			Область.Параметры["ПроцентПДЗ_" + Разрез.Ключ] = 
				СтруктураВзаиморасчетов["ПДЗ_" + Разрез.Ключ] / СтруктураВзаиморасчетов["Долг" + Разрез.Ключ] * 100;
		КонецЕсли;
			
		Область.Параметры["РазностьПДЗ_" + Разрез.Ключ] = 
			СтруктураВзаиморасчетов["ПДЗ_" + Разрез.Ключ] - СтруктураВзаиморасчетов.ДопустимаяЗадолженность;

	КонецЦикла; 

	Область.Параметры.Комментарий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПокупателя, "Комментарий");

	//Область.Параметры.КомментарийДополнение = "";
	СтруктураКомментариев = Новый Структура("ПричинаАвтоОтказаФК, ПричинаНеСогласованияФК, ПричинаАвтоОтказаКК");
	Для Каждого ЭлементКомментария Из СтруктураКомментариев Цикл
		Комментарий = СтруктураВзаиморасчетов[ЭлементКомментария.Ключ];
		Если ЗначениеЗаполнено(Комментарий)
			//И Найти(Область.Параметры.КомментарийДополнение, Комментарий) = 0 Тогда
			//Область.Параметры.КомментарийДополнение = Область.Параметры.КомментарийДополнение
			//	+ ?(Область.Параметры.КомментарийДополнение = "", "", Символы.ПС) + Комментарий;
			И Найти(Область.Параметры.Комментарий, Комментарий) = 0 Тогда
			Область.Параметры.Комментарий = Область.Параметры.Комментарий
				+ ?(Область.Параметры.Комментарий = "", "", Символы.ПС) + Комментарий;
		КонецЕсли; 
	КонецЦикла; 
	
	ТабличныйДокумент.Вывести(Область);
	
	Возврат ТабличныйДокумент;
КонецФункции

&НаСервере
Процедура КомментарийДляСБНаСервере(Результат, ПунктНазначения)
	РегистрыСведений.бг_КомментарииПоПунктамНазначения.ДобавитьКомментарий(ПунктНазначения, 
		Перечисления.бг_ИсточникиКомментариев.Координатор, Результат);						 
КонецПроцедуры

&НаСервере
Процедура КорректировкаОтсрочкиПлатежаСервер(Заказ, КорректировкаОтсрочки)
	
	ДокументыРеализации = бг_ЗаказыКлиентов.ДокументыРеализацииПоЗаказу(Заказ);
	Если ДокументыРеализации.Найти(Истина, "Проведен") <> Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Уже есть проведенные документы реализации по документу %1.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Заказ);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Заказ);
		Возврат;
		
	КонецЕсли;

	НачатьТранзакцию();
	Попытка
		
		ДокументОбъект = Заказ.ПолучитьОбъект();
		ДокументОбъект.бг_КорректировкаОтсрочкиПлатежа = КорректировкаОтсрочки;
		ДокументОбъект.Записать(?(ДокументОбъект.Проведен, 
			РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		
		Для Каждого ДокументРеализации Из ДокументыРеализации Цикл
			ДокументОбъект = ДокументРеализации.ПолучитьОбъект();
			ДокументОбъект.бг_КорректировкаОтсрочкиПлатежа = КорректировкаОтсрочки;
			ДокументОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение

		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить корректировку отсрочки платежа для документа %1.
			|%2'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Заказ, ИнформацияОбОшибке());
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Заказ);
		
		ЗаписьЖурналаРегистрации("Не удалось установить корректировку отсрочки платежа", 
			УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсторию(ЗаказКлиента)

	ЗначенияКлюча = Новый Структура("ЗаказКлиента", ЗаказКлиента);
	КлючЗаписи = РегистрыСведений.бг_СогласованиеЗаказовКлиентов.СоздатьКлючЗаписи(ЗначенияКлюча);
	ИсторияДанных.ОбновитьИсторию(КлючЗаписи);
	
КонецПроцедуры

#КонецОбласти


