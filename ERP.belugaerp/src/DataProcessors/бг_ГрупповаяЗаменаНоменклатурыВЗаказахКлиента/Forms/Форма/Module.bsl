
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокЗаказовКлиентаПослеУдаления(Элемент)
	
	ОчиститьСообщения();
	
	ЗаполнитьСписокЗаказовРазрешенныхДляИзменения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор заказов клиента"));
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПослеВыбораЗаказовКлиента", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаВыбора",
		ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор,,, ОповещениеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = Объект.СписокЗаказовКлиента.НайтиСтроки(
		Новый Структура("ЗаказКлиента", ВыбранноеЗначение));
	
	Если НайденнаяСтрока.Количество() > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Этот заказ уже выбран!'"), 60);
	Иначе
		НоваяСтрока = Объект.СписокЗаказовКлиента.Добавить();
		НоваяСтрока.ЗаказКлиента = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИсходнаяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СписокЗаменыНоменклатуры.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПаллетаПоУмолчанию(ТекущаяСтрока, "НоменклатураИсходная", "УпаковкаПаллетаИсходная");

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураЗаменаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СписокЗаменыНоменклатуры.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПаллетаПоУмолчанию(ТекущаяСтрока, "НоменклатураЗамена", "УпаковкаПаллетаЗамена");

КонецПроцедуры

&НаКлиенте
Процедура ПаллетаПоУмолчанию(ТекущаяСтрока, Номенклатура, УпаковкаПаллета)
	
	ПаллетаПоУмолчанию = бг_НоменклатураВызовСервера.ПаллетизацияНоменклатурыПоУмолчанию(
		ТекущаяСтрока[Номенклатура]);
		
	ТекущаяСтрока[УпаковкаПаллета] = ПаллетаПоУмолчанию;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗамену(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.СписокЗаказовРазрешенныхДляИзменения.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Нет доступных документов для изменения'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаменуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПослеВыбораЗаказовКлиента(Результат, Параметры) Экспорт
	
	ЗаполнитьСписокЗаказовРазрешенныхДляИзменения();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЗаказовРазрешенныхДляИзменения()
	
	Объект.СписокЗаказовРазрешенныхДляИзменения.Очистить();
	
	СписокДокументов = Объект.СписокЗаказовКлиента.Выгрузить(, "ЗаказКлиента");
	
	ШаблонСообщения = НСтр("ru = 'Документ: %1 - %2.'");

	Для Каждого Документ Из СписокДокументов Цикл
		
		ЕстьНеобеспеченныеПозицииВЗаказе= бг_ЗаказыКлиентов.ЕстьНеобеспеченныеПозицииВЗаказе(Документ.ЗаказКлиента);
		
		Если Не ЕстьНеобеспеченныеПозицииВЗаказе Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ШаблонСообщения, Документ.ЗаказКлиента, НСтр("ru = 'отсутствуют необеспеченные позиции'")),
				Документ.ЗаказКлиента);
		Иначе
			НоваяСтрока = Объект.СписокЗаказовРазрешенныхДляИзменения.Добавить();
			НоваяСтрока.ЗаказКлиента = Документ.ЗаказКлиента;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаменуНаСервере()
	
	БылиЗамены = Ложь;
	
	НоменклатураДляЗамены = НоменклатураДляЗамены();
	
	СписокДокументов = Объект.СписокЗаказовРазрешенныхДляИзменения.Выгрузить(, "ЗаказКлиента");
	
	Для Каждого Документ Из СписокДокументов Цикл
		
		ЗаказКлиентаОбъект = Документ.ЗаказКлиента.ПолучитьОбъект();
		
		Для Каждого СтрокаЗамены Из НоменклатураДляЗамены Цикл
			
			Если Не СтрокаЗамены.ОдинаковаяСкюМТ Тогда
				
				Если Не ОтключитьКонтрольПоСКЮМТ Тогда
					ШаблонСообщения = НСтр(
						"ru = 'Замена не может быть выполнена. В номенклатурах: %1 и %2 различные ЕК СКЮ: %3 - %4'");
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(ШаблонСообщения, СтрокаЗамены.НоменклатураИсходная,
							СтрокаЗамены.НоменклатураЗамена, СтрокаЗамены.СКЮ_МТНоменклатураИсходная, СтрокаЗамены.СКЮ_МТНоменклатураЗамена),
						Документ.ЗаказКлиента);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаменитьНоменклатуру(ЗаказКлиентаОбъект, СтрокаЗамены, БылиЗамены);
		КонецЦикла;
		
		Если БылиЗамены Тогда
			
			бг_ЗаказыКлиентов.ОбработатьТЧТовары(ЗаказКлиентаОбъект);
			бг_ЗаказыКлиентов.ПересчитатьКоличествоКоробокИПаллетВТЧ(ЗаказКлиентаОбъект.Товары);
			
			ЗаписатьДокумент(ЗаказКлиентаОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьНоменклатуру(ЗаказКлиентаОбъект, СтрокаЗамены, БылиЗамены)
	
	НайденныеСтроки = ЗаказКлиентаОбъект.Товары.НайтиСтроки(
		Новый Структура("Номенклатура", СтрокаЗамены.НоменклатураИсходная));
		
	ТекстСообщения= НСтр("ru = 'В документе: %1 выполнена замена товара: %2 на %3,
		|выполнена замена паллет: %4 на %5'");
	
	Для Каждого СтрокаДокумента Из НайденныеСтроки Цикл
		
		Если СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению
			Или СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			Или СтрокаДокумента.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления Тогда
			
			СтрокаДокумента.Номенклатура = СтрокаЗамены.НоменклатураЗамена;
			СтрокаДокумента.бг_УпаковкаПаллета = СтрокаЗамены.УпаковкаПаллетаЗамена;
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстСообщения, ЗаказКлиентаОбъект.Ссылка, СтрокаДокумента.Номенклатура,
					СтрокаЗамены.НоменклатураЗамена, СтрокаДокумента.бг_УпаковкаПаллета, СтрокаЗамены.УпаковкаПаллетаЗамена),
				ЗаказКлиентаОбъект.Ссылка);
		Иначе
			
			ШаблонСообщения= НСтр("ru = 'В документе: %1 не выполнена замена товара: %2 на %3,
				|не выполнена замена паллет: %4 на %5. Вариант обеспечения - %6'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ШаблонСообщения, ЗаказКлиентаОбъект.Ссылка, СтрокаДокумента.Номенклатура,
					СтрокаЗамены.НоменклатураЗамена, СтрокаДокумента.бг_УпаковкаПаллета,
					СтрокаЗамены.УпаковкаПаллетаЗамена, СтрокаДокумента.ВариантОбеспечения),
				ЗаказКлиентаОбъект.Ссылка);
			
		КонецЕсли;
		
		БылиЗамены = Истина;
		
	КонецЦикла;
		
	Если Не БылиЗамены Тогда
		
		ШаблонСообщения = НСтр(
			"ru = 'В документе: %1 не выполнена замена товара: %2, не выполнена замена паллет: %3.
			|Не найдены выбранные товары в документе'");
		
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			ШаблонСообщения, ЗаказКлиентаОбъект.Ссылка, СтрокаЗамены.НоменклатураЗамена, СтрокаЗамены.УпаковкаПаллетаЗамена),
			ЗаказКлиентаОбъект.Ссылка);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокумент(ЗаказКлиентаОбъект)
	
	Если ЗаказКлиентаОбъект.Проведен Тогда
			
		Попытка
				
			ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);

		Исключение
				
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Групповая замена номенклатуры в заказах клиента'"),
				УровеньЖурналаРегистрации.Ошибка,,,	
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
		КонецПопытки;
			
	Иначе
			
		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция НоменклатураДляЗамены()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокНоменклатурыИсходной.УпаковкаПаллетаИсходная КАК УпаковкаПаллетаИсходная,
	|	СписокНоменклатурыИсходной.НоменклатураИсходная КАК НоменклатураИсходная,
	|	СписокНоменклатурыИсходной.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ СписокНоменклатурыИсходной
	|ИЗ
	|	&СписокНоменклатурыИсходной КАК СписокНоменклатурыИсходной
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураИсходная,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНоменклатурыЗамены.УпаковкаПаллетаЗамена КАК УпаковкаПаллетаЗамена,
	|	СписокНоменклатурыЗамены.НоменклатураЗамена КАК НоменклатураЗамена,
	|	СписокНоменклатурыЗамены.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ СписокНоменклатурыЗамены
	|ИЗ
	|	&СписокНоменклатурыЗамены КАК СписокНоменклатурыЗамены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатураЗамена,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокНоменклатурыЗамены.НоменклатураЗамена.ТоварнаяКатегория.бг_СкюМТ КАК СКЮ_МТНоменклатураЗамена,
	|	СписокНоменклатурыИсходной.НоменклатураИсходная.ТоварнаяКатегория.бг_СкюМТ КАК СКЮ_МТНоменклатураИсходная,
	|	ЕСТЬNULL(СписокНоменклатурыЗамены.НоменклатураЗамена.ТоварнаяКатегория.бг_СкюМТ =
	|		СписокНоменклатурыИсходной.НоменклатураИсходная.ТоварнаяКатегория.бг_СкюМТ, Ложь) КАК ОдинаковаяСкюМТ,
	|	СписокНоменклатурыИсходной.НоменклатураИсходная КАК НоменклатураИсходная,
	|	СписокНоменклатурыИсходной.УпаковкаПаллетаИсходная КАК УпаковкаПаллетаИсходная,
	|	СписокНоменклатурыЗамены.УпаковкаПаллетаЗамена КАК УпаковкаПаллетаЗамена,
	|	СписокНоменклатурыЗамены.НоменклатураЗамена КАК НоменклатураЗамена
	|ИЗ
	|	СписокНоменклатурыИсходной КАК СписокНоменклатурыИсходной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокНоменклатурыЗамены КАК СписокНоменклатурыЗамены
	|		ПО СписокНоменклатурыИсходной.НомерСтроки = СписокНоменклатурыЗамены.НомерСтроки";
	
	Запрос.УстановитьПараметр("СписокНоменклатурыЗамены", 
		Объект.СписокЗаменыНоменклатуры.Выгрузить(, "НомерСтроки, УпаковкаПаллетаЗамена, НоменклатураЗамена"));
	Запрос.УстановитьПараметр("СписокНоменклатурыИсходной",
		 Объект.СписокЗаменыНоменклатуры.Выгрузить(, "НомерСтроки, УпаковкаПаллетаИсходная, НоменклатураИсходная"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти