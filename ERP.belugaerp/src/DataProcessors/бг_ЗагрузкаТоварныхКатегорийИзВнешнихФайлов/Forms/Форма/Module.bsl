
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.Заголовок) Тогда
		ВызватьИсключение НСтр("ru = 'Предусмотрено открытие обработки только из форм объектов.';
								|en = 'Data processor can be opened only from object forms.'");
	КонецЕсли;
	
	ИнициализироватьТабличныйДокумент();
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодНСИПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ТоварнаяКатегория = ТоварнаяКатегорияПоКодуНСИ(ТекущиеДанные.КодНСИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварнаяКатегорияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.КодНСИ = КодНСИТоварнойКатегории(ТекущиеДанные.ТоварнаяКатегория);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ЗаполненыТоварнаяКатегорияКодНСИ = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст);
			
	Если Не ЗаполненыТоварнаяКатегорияКодНСИ Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.';
													|en = 'You must copy columns to the table from an external file.'"));
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...';
					|en = 'Entered data is being mapped with the infobase data. Please wait...'"),,,БиблиотекаКартинок.Информация32);
	СопоставитьДанныеТабличногоДокументаСДаннымиИБ();
	
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТовары(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		АдресТоваровВХранилище = ПоместитьТоварыВХранилище();
		Закрыть(АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если РаботаСТабличнымиЧастямиКлиент.ВыбранаСтрокаДляВыполненияКоманды(Элементы.Товары) Тогда
		СкопироватьСтрокиНаСервере();
		РаботаСТабличнымиЧастямиКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	РаботаСТабличнымиЧастями.СкопироватьСтрокиВБуферОбмена(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Колонки = "ТоварнаяКатегория,Количество";
	ТаблицаТоваров = РаботаСТабличнымиЧастями.СтрокиИзБуфераОбмена( , Колонки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		РаботаСТабличнымиЧастями.ЕстьСтрокиВБуфереОбмена());
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискИСопоставлениеТоварныхКатегорий

&НаСервере
Процедура ДобавитьПодобраннуюТоварнуюКатегорию(КодСтроки, НайденнаяТоварнаяКатегория)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТоварнаяКатегория", НайденнаяТоварнаяКатегория);
	СтруктураОтбора.Вставить("КодСтроки", КодСтроки);
	
	ПодобранныеРанееТоварныеКатегории = ПодобранныеТоварныеКатегории.НайтиСтроки(СтруктураОтбора);
	Если ПодобранныеРанееТоварныеКатегории.Количество() = 0 Тогда
		ПодобраннаяСтрока = ПодобранныеТоварныеКатегории.Добавить();
		ПодобраннаяСтрока.КодСтроки = КодСтроки;
		ПодобраннаяСтрока.ТоварнаяКатегория = НайденнаяТоварнаяКатегория;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСДаннымиИБ()
	
	УточнениеТоварныхКатегорий.Очистить();
	ПодобранныеТоварныеКатегории.Очистить();
	НайденныеСтроки = ПодобранныеТоварныеКатегории.Выгрузить();
	
	Объект.Товары.Очистить();
	
	ТаблицаТоварныхКатегорий = ПолучитьДанныеИБПОТоварнымКатегориям();
	
	НомераКолонок = Новый Соответствие;
	НомерКолонки = 1;
	
	НомераКолонок.Вставить("КолонкаКодНСИ", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаТоварнаяКатегория", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	НомерКолонки = НомерКолонки +1;
	НомераКолонок.Вставить("КолонкаКоличество", "C" + Формат(НомерКолонки, "ЧН=0; ЧГ=0"));
	
	КолонкаТоварнаяКатегория = НомераКолонок.Получить("КолонкаТоварнаяКатегория");
	КолонкаКодНСИ = НомераКолонок.Получить("КолонкаКодНСИ");
	КолонкаКоличество = НомераКолонок.Получить("КолонкаКоличество");
	
	ВысотаШапки = 1;
	НомерСтроки = ВысотаШапки + 1 ;
	
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненыТоварнаяКатегорияКодНСИ = 
		ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаКодНСИ).Текст)
		Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаТоварнаяКатегория).Текст);
	
	ЗаполненныеТоварныеКатегории = Новый Массив;
	Пока ЗаполненыТоварнаяКатегорияКодНСИ Цикл
		
		НоваяСтрока = УточнениеТоварныхКатегорий.Добавить();
		Количество = 0;
		НоваяСтрока.КодСтроки = НомерСтроки;
		
		Попытка
			НоваяСтрока.КодНСИ = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаКодНСИ).Текст;
			НоваяСтрока.ТоварнаяКатегорияНаименование = 
				ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаТоварнаяКатегория).Текст;
			Количество = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаКоличество).Текст;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(
			НоваяСтрока.Количество,
			Количество,
			НомерСтроки,
			"Количество",
			ВысотаШапки);
		
		СтрокаПоискаКодНСИ = ВРег(СтрЗаменить(НоваяСтрока.КодНСИ, " ", "")); 
		СтрокаПоискаТоварнаяКатегория = ВРег(СтрЗаменить(НоваяСтрока.ТоварнаяКатегорияНаименование, " ", ""));
		
		ЗаполненКодНСИ = ЗначениеЗаполнено(НоваяСтрока.КодНСИ);
		ЗаполненаТоварнаяКатегория = ЗначениеЗаполнено(НоваяСтрока.ТоварнаяКатегорияНаименование);
		
		Если ЗаполненКодНСИ 
			И ЗаполненаТоварнаяКатегория Тогда
			
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("КодНСИПоиск", СтрокаПоискаКодНСИ);
			ОтборСтрок.Вставить("НаименованиеПоиск", СтрокаПоискаТоварнаяКатегория);
			НайденнаяТоварнаяКатегорияПоКлючу = ТаблицаТоварныхКатегорий.НайтиСтроки(ОтборСтрок);
			Если НайденнаяТоварнаяКатегорияПоКлючу.Количество() = 0 Тогда
				ОтборСтрок = Новый Структура("КодНСИПоиск", СтрокаПоискаКодНСИ);
				НайденнаяТоварнаяКатегорияПоКлючу = ТаблицаТоварныхКатегорий.НайтиСтроки(ОтборСтрок);
				Если НайденнаяТоварнаяКатегорияПоКлючу.Количество() = 0 Тогда
					ОтборСтрок = Новый Структура("НаименованиеПоиск", СтрокаПоискаТоварнаяКатегория);
					НайденнаяТоварнаяКатегорияПоКлючу = ТаблицаТоварныхКатегорий.НайтиСтроки(ОтборСтрок);
				КонецЕсли;
			КонецЕсли;
			Для Каждого ТоварнаяКатегорияПоКлючу Из НайденнаяТоварнаяКатегорияПоКлючу Цикл
				ДобавитьПодобраннуюТоварнуюКатегорию(НомерСтроки, ТоварнаяКатегорияПоКлючу.ТоварнаяКатегория);
			КонецЦикла;
			
		ИначеЕсли ЗаполненКодНСИ 
			И Не ЗаполненаТоварнаяКатегория Тогда
			
			ОтборСтрок = Новый Структура("КодНСИПоиск", СтрокаПоискаКодНСИ);
			НайденнаяТоварнаяКатегорияПоКлючу = ТаблицаТоварныхКатегорий.НайтиСтроки(ОтборСтрок);
			Для Каждого ТоварнаяКатегорияПоКлючу Из НайденнаяТоварнаяКатегорияПоКлючу Цикл
				ДобавитьПодобраннуюТоварнуюКатегорию(НомерСтроки, ТоварнаяКатегорияПоКлючу.ТоварнаяКатегория);
			КонецЦикла;
			
		ИначеЕсли Не ЗаполненКодНСИ 
			И ЗаполненаТоварнаяКатегория Тогда
			
			ОтборСтрок = Новый Структура("НаименованиеПоиск", СтрокаПоискаТоварнаяКатегория);
			НайденнаяТоварнаяКатегорияПоКлючу = ТаблицаТоварныхКатегорий.НайтиСтроки(ОтборСтрок);
			Для Каждого ТоварнаяКатегорияПоКлючу Из НайденнаяТоварнаяКатегорияПоКлючу Цикл
				ДобавитьПодобраннуюТоварнуюКатегорию(НомерСтроки, ТоварнаяКатегорияПоКлючу.ТоварнаяКатегория);
			КонецЦикла;
			
		КонецЕсли;
		
		// Заполнение ТЧ Товары.
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.ЗагружаемаяТоварнаяКатегория = НоваяСтрока.ТоварнаяКатегорияНаименование;
		НоваяСтрокаТовары.ЗагружаемыйКодНСИ = НоваяСтрока.КодНСИ;
		НоваяСтрокаТовары.Количество = НоваяСтрока.Количество;
		НоваяСтрокаТовары.КодСтроки = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, НоваяСтрока, ,"КодНСИ");
		
		ОтборСтрок = Новый Структура("КодСтроки", НомерСтроки);
		МассивПодобранныхТоварныхКатегорий = ПодобранныеТоварныеКатегории.НайтиСтроки(ОтборСтрок);
		
		Если МассивПодобранныхТоварныхКатегорий.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, МассивПодобранныхТоварныхКатегорий.Получить(0));
			ЗаполненныеТоварныеКатегории.Добавить(НоваяСтрокаТовары.ТоварнаяКатегория);
		ИначеЕсли МассивПодобранныхТоварныхКатегорий.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'По данным для поиска в строке %НомерСтроки% совпадений не найдено.';
								|en = 'No matches by data for search in line %НомерСтроки%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ТекстОшибки = НСтр("ru = 'По данным для поиска в строке %НомерСтроки% найдено несколько совпадений.';
								|en = 'Several matches are found by data for search in line %НомерСтроки%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки-ВысотаШапки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненыТоварнаяКатегорияКодНСИ = 
				ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаКодНСИ).Текст)
				Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер 
					+ КолонкаТоварнаяКатегория).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	КодыНСИ = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗаполненныеТоварныеКатегории, "бг_КодНСИ");
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.КодНСИ = КодыНСИ.Получить(СтрокаТовары.ТоварнаяКатегория); 
	КонецЦикла;
	
	УточнениеТоварныхКатегорий.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИБПОТоварнымКатегориям()
	
	Результат = Новый Структура;
	ТаблицаТоварныхКатегорий = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварныеКатегории.бг_КодНСИ КАК КодНСИ,
	|	ТоварныеКатегории.Наименование КАК Наименование,
	|	ТоварныеКатегории.Ссылка КАК ТоварнаяКатегория
	|ИЗ
	|	Справочник.ТоварныеКатегории КАК ТоварныеКатегории";
	
	РезультатЗапроса =Запрос.Выполнить();
	
	Для Каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		ТаблицаТоварныхКатегорий.Колонки.Добавить(КолонкаРезультата.Имя);
	КонецЦикла;
	ТаблицаТоварныхКатегорий.Колонки.Добавить("КодНСИПоиск");
	ТаблицаТоварныхКатегорий.Колонки.Добавить("НаименованиеПоиск");
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаТоварныхКатегорий.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.КодНСИПоиск = ВРег(СтрЗаменить(НоваяСтрока.КодНСИ, " ", ""));
		НоваяСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(НоваяСтрока.Наименование, " ", ""));
	КонецЦикла;
	
	
	Возврат ТаблицаТоварныхКатегорий;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = 
		Обработки.бг_ЗагрузкаТоварныхКатегорийИзВнешнихФайлов.ПолучитьМакет("МакетЗагрузкиДанных");
	ТабличныйДокумент.Очистить();
	
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("КодНСИ");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("ТоварнаяКатегория");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть("Количество");
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()

	Товары = Объект.Товары.Выгрузить();
	ТоварыДляПереноса = Товары.СкопироватьКолонки();
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		НоваяСтрока = ТоварыДляПереноса.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		ТоварнаяКатегория = НоваяСтрока.ТоварнаяКатегория;
		Если ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
			НоваяСтрока.КодНСИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяКатегория, "бг_КодНСИ");
		Иначе
			НоваяСтрока.КодНСИ = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТоварыДляПереноса);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПрисвоитьЧисловоеЗначениеПриЗаполненииТЧ(Приемник, 
												СтрокаИсточникЧисловогоЗначения,
												АбсолютныйНомерСтроки,
												НазваниеКолонки,
												ВысотаШапки = 0)
	
	ЗначениеДляПриведения = СтрЗаменить(СтрокаИсточникЧисловогоЗначения, " ", "");
	Если ЗначениеЗаполнено(ЗначениеДляПриведения) Тогда
		ДопустимыеТипы = Новый Массив;
		ДопустимыеТипы.Добавить(Тип("Число"));
		ДопустимыеТипы.Добавить(Тип("ОписаниеТипов"));
		ОписаниеТиповЧисло = Новый ОписаниеТипов(ДопустимыеТипы);
		ПриведенноеЗначение = ОписаниеТиповЧисло.ПривестиЗначение(ЗначениеДляПриведения);
		Если Не ПриведенноеЗначение = Неопределено Тогда
			Приемник = ПриведенноеЗначение;
		Иначе
			ТекстОшибки = 
				НСтр("ru = 'В строке %НомерСтроки%, колонке ""%Колонка%"" введено значение ""%Значение%"", не являющееся числом.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", АбсолютныйНомерСтроки-ВысотаШапки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Колонка%", НазваниеКолонки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Значение%", СтрокаИсточникЧисловогоЗначения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	Иначе
		Приемник = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодНСИТоварнойКатегории(ТоварнаяКатегория)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
		КодНСИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяКатегория, "бг_КодНСИ");
	Иначе
		КодНСИ = "";
	КонецЕсли;
	
	Возврат КодНСИ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТоварнаяКатегорияПоКодуНСИ(КодНСИ)
	
	Возврат бг_ОбщегоНазначенияСервер.ТоварнаяКатегорияПоКодуНСИ(КодНСИ);
	
КонецФункции

#КонецОбласти

#КонецОбласти
