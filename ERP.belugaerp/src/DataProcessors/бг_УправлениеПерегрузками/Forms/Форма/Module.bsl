
#Область ОбработчикиСобытийФормы
	
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УстановитьЗаголовок();
	УправлениеДинамическимиСписками();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_бг_ДанныеПерегрузок" Тогда
		Элементы.ДанныеПерегрузок.Обновить();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьТекущимЗначением(Команда)
	ТекущиеДанные = Элементы.СопоставленныеДанные.ТекущиеДанные;
	ИмяЭлемента = Элементы.СопоставленныеДанные.ТекущийЭлемент.Имя;
	Колонки = СопоставленныеДанныеКолонкиДляЗаполнения();
	Если Не ТекущиеДанные = Неопределено 
		И Не Колонки[ИмяЭлемента] = Неопределено Тогда 
		ТекущееЗначение = ТекущиеДанные[Колонки[ИмяЭлемента]];
		Для каждого СтрокаДанные Из СопоставленныеДанные Цикл
			СтрокаДанные[Колонки[ИмяЭлемента]] = ТекущееЗначение;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМаршрутныйЛист(Команда)
	Отбор = Новый Структура("Организация, ВидДокумента", 
		Организация, ПредопределенноеЗначение("Перечисление.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист"));
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Отбор", Отбор);
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	РезультатВыбора = Новый ОписаниеОповещения("ЗагрузитьМаршрутныйЛистЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.битМаршрутныйЛист.ФормаВыбора", ПараметрыПодбора, ЭтотОбъект, , , , 
		РезультатВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМаршрутныйЛистЗавершение(РезультатВыбора, ПараметрыВыбора) Экспорт 
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ЗаполнитьЗагруженныеДанныеПоМаршрутномуЛисту(РезультатВыбора, Истина);
		Элементы.ГруппаСтраницыЗагрузки.ТекущаяСтраница = Элементы.СтраницаРезультатСопоставления;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМаршрутныйЛист(Команда)
	Отбор = Новый Структура("Организация, ВидДокумента", 
		Организация, ПредопределенноеЗначение("Перечисление.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист"));
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Отбор", Отбор);
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	РезультатВыбора = Новый ОписаниеОповещения("ДобавитьМаршрутныйЛистЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.битМаршрутныйЛист.ФормаВыбора", ПараметрыПодбора, ЭтотОбъект, , , , 
		РезультатВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМаршрутныйЛистЗавершение(РезультатВыбора, ПараметрыВыбора) Экспорт 
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ЗаполнитьЗагруженныеДанныеПоМаршрутномуЛисту(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНакладныеВыгрузитьВЕГАИС(Команда)
	ВыделенныеСтроки = Элементы.ДанныеПерегрузок.ВыделенныеСтроки;
	
	Если Не ВыделенныеСтроки.Количество() > 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Выберите строки для формирования'"));
		Возврат;
	КонецЕсли;
	СформироватьДокументыЕГАИСНаСервере(ВыделенныеСтроки);
	Элементы.ДанныеПерегрузок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	СопоставленныеДанныеУстановитьПометки(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УбратьПометки(Команда)
	СопоставленныеДанныеУстановитьПометки(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура АнализДанных(Команда)
	АнализИменКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);    
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Прочитать табличный документ из файла'"); 
	ДиалогВыбораФайла.Фильтр    = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;

	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтаФорма);
	ДиалогВыбораФайла.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
		ИмяФайла = ВыбранныеФайлы[0];
		АдресРезультата = ПрочитатьФайлExcel(ИмяФайла);
		ЗаполнитьЗагруженныеДанныеНаСервере(АдресРезультата, ИмяФайла);
		Элементы.ГруппаСтраницыЗагрузки.ТекущаяСтраница = Элементы.СтраницаНастройки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДанные(Команда)
	Если ЕстьВсеДанныеДляСопоставления() Тогда
		СопоставитьДанныеСервер();
		Элементы.ГруппаСтраницыЗагрузки.ТекущаяСтраница = Элементы.СтраницаРезультатСопоставления;
	Иначе 
		ПоказатьПредупреждение( , НСтр("ru='Не все данные указаны'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьПерегрузки(Команда)
	ЗафиксироватьПерегрузкиНасервере();
	Оповестить("Запись_бг_ДанныеПерегрузок"); 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры
	
&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	УстановитьЗаголовок();
	УправлениеДинамическимиСписками();
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияПриИзменении(Элемент)
	УправлениеДинамическимиСписками();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПериодПриИзменении(Элемент)
	УправлениеДинамическимиСписками();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиСопоставленныеДанныеФормы

&НаКлиенте
Процедура СопоставленныеДанныеОтметкаПриИзменении(Элемент)
	//Элементы.СопоставитьДанные.
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаДанныхВРегистр
	
&НаСервере
Процедура ОтметитьОшибкиОчиститьЗагружено() 
	Для каждого СтрокаСопоставления Из СопоставленныеДанные Цикл
		Ошибки = Новый Массив;
		СтрокаСопоставления.ТекстОшибки = "";
		СтрокаСопоставления.ЕстьОшибки = Ложь;
		СтрокаСопоставления.Загружено = Ложь;
		Если СтрокаСопоставления.Пометка Тогда
			Если СтрокаСопоставления.МаршрутныйЛист = ПредопределенноеЗначение("Документ.битМаршрутныйЛист.ПустаяСсылка") Тогда 
				Ошибки.Добавить(НСтр("ru='Не заполнен (не найден) Маршрутный лист'"));
			КонецЕсли;
			Если СтрокаСопоставления.ДокументРеализации = ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка") Тогда
				Ошибки.Добавить(НСтр("ru='Не заполнена (не найдена) Реализация'"));
			КонецЕсли;
			Если СтрокаСопоставления.ДатаПерегрузки = Дата(1, 1, 1) Тогда
				Ошибки.Добавить(НСтр("ru='Не указана дата перегрузки'"));
			КонеЦесли;
			Если СтрокаСопоставления.НомерПерегрузки = 0 Тогда
				Ошибки.Добавить(НСтр("ru='Не указан номер перегрузки'"));
			КонеЦесли;      
			ТипДоставки = Лев(СтрокаСопоставления.ТипДоставки, 3);
			ЭтоАвтотранспорт = ТипДоставки = "413";
			Если Не(ТипДоставки = "410" Или ТипДоставки = "411"
				Или ТипДоставки = "412" Или ТипДоставки = "413"	Или ТипДоставки = "419") Тогда
				Ошибки.Добавить(НСтр("ru='Не правильно указан тип доставки, тип доставки должен начинаться на: 410, 411, 412, 413, 419'"));
			КонецЕсли;
			Если СтрокаСопоставления.АдресПерегрузки = "" Тогда
				Ошибки.Добавить(НСтр("ru='Не указан адрес перегрузки'"));
			КонеЦесли;      
			Если СтрокаСопоставления.Водитель = "" И ЭтоАвтотранспорт Тогда
				Ошибки.Добавить(НСтр("ru='Не указан водитель'"));
			КонеЦесли;
			Если ЭтоАвтотранспорт Тогда
				Если СтрокаСопоставления.РегистрационныйНомерТС = "" Тогда
					Ошибки.Добавить(НСтр("ru='Не указан номер ТС'"));
				Иначе                                                                          
					Отказ = Ложь;
					Справочники.ТранспортныеСредства.бг_ПроверитьПреобразоватьГосНомерКШаблону(СтрокаСопоставления.РегистрационныйНомерТС, 
						Отказ);
					Если Отказ Тогда
						Ошибки.Добавить(НСтр("ru='Гос. номер ТС указан неверно'"));
					КонецЕсли;
				КонеЦесли;      
			КонецЕсли;
			Если Не СтрокаСопоставления.РегистрационныйНомерПрицепа = "" Тогда
				Отказ = Ложь;
				Справочники.ТранспортныеСредства.бг_ПроверитьПреобразоватьГосНомерКШаблону(СтрокаСопоставления.РегистрационныйНомерПрицепа,
					Отказ);
				Если Отказ Тогда
					Ошибки.Добавить(НСтр("ru='Гос. номер прицепа указан неверно'"));
				КонецЕсли;
			КонеЦесли;      
			СтрокаСопоставления.ЕстьОшибки = Ошибки.Количество() > 0;
			СтрокаСопоставления.ТекстОшибки = СтрСоединить(Ошибки, "; ");
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьПерегрузкиНаСервере() 
	ОтметитьОшибкиОчиститьЗагружено();
	Отбор = Новый Структура("Пометка, ЕстьОшибки", Истина, Ложь);
	ТаблицаИсточник = СопоставленныеДанные.Выгрузить(Отбор);
	СтруктураПоиска = Новый Структура("Пометка, ДокументРеализации, НомерПерегрузки, МаршрутныйЛист");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИсточник", ТаблицаИсточник);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерПерегрузки КАК НомерПерегрузки,
	|	Таблица.ДатаПерегрузки КАК ДатаПерегрузки,
	|	Таблица.МаршрутныйЛист КАК МаршрутныйЛист,
	|	Таблица.ДокументРеализации КАК ДокументРеализации,
	|	Таблица.ОрганизаторПеревозки КАК ОрганизаторПеревозки,
	|	Таблица.Перевозчик КАК Перевозчик,
	|	Таблица.АдресПерегрузки КАК АдресПерегрузки,
	|	Таблица.ТипДоставки КАК ТипДоставки,
	|	Таблица.МаркаТС КАК МаркаТС,
	|	Таблица.РегистрационныйНомерТС КАК РегистрационныйНомерТС,
	|	Таблица.РегистрационныйНомерПрицепа КАК РегистрационныйНомерПрицепа,
	|	Таблица.Водитель КАК Водитель,
	|	Таблица.Экспедитор КАК Экспедитор
	|ПОМЕСТИТЬ втИсходныеДанные
	|ИЗ
	|	&ТаблицаИсточник КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	втИсходныеДанные.МаршрутныйЛист КАК МаршрутныйЛист,
	|	втИсходныеДанные.ДокументРеализации КАК Объект,
	|	втИсходныеДанные.НомерПерегрузки КАК НомерПерегрузки,
	|	втИсходныеДанные.ДатаПерегрузки КАК ДатаПерегрузки,
	|	втИсходныеДанные.ТипДоставки КАК ТипДоставки,
	|	втИсходныеДанные.Перевозчик КАК Перевозчик,
	|	втИсходныеДанные.МаркаТС КАК МаркаТС,
	|	втИсходныеДанные.РегистрационныйНомерТС КАК РегистрационныйНомерТС,
	|	втИсходныеДанные.РегистрационныйНомерПрицепа КАК РегистрационныйНомерПрицепа,
	|	втИсходныеДанные.ОрганизаторПеревозки КАК Заказчик,
	|	втИсходныеДанные.Водитель КАК Водитель,
	|	втИсходныеДанные.АдресПерегрузки КАК ПунктПогрузки,
	|	втИсходныеДанные.Экспедитор КАК Экспедитор,
	|	ЕСТЬNULL(ТТНИсходящаяЕГАИС.ПунктРазгрузки, """") КАК ПунктРазгрузки
	|ИЗ
	|	втИсходныеДанные КАК втИсходныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО втИсходныеДанные.ДокументРеализации = ТТНИсходящаяЕГАИС.ДокументОснование
	|			И (НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления)";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеПерегрузокНаборЗаписей = РегистрыСведений.бг_ДанныеПерегрузок.СоздатьНаборЗаписей();
		ДанныеПерегрузокНаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		ДанныеПерегрузокНаборЗаписей.Отбор.МаршрутныйЛист.Установить(Выборка.МаршрутныйЛист);
		ДанныеПерегрузокНаборЗаписей.Отбор.Объект.Установить(Выборка.Объект);
		ДанныеПерегрузокНаборЗаписей.Отбор.НомерПерегрузки.Установить(Выборка.НомерПерегрузки);
		НоваяЗапись = ДанныеПерегрузокНаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);   
		СтруктураПоиска.Пометка = Истина;  
		СтруктураПоиска.ДокументРеализации = Выборка.Объект;
		ЗагруженныеСтроки = СопоставленныеДанные.НайтиСтроки(СтруктураПоиска);
		Для каждого ЗагруженнаяСтрока Из ЗагруженныеСтроки Цикл
			ЗагруженнаяСтрока.Загружено = Истина;
		КонецЦикла;
		ДанныеПерегрузокНаборЗаписей.Записать(Истина);
	КонецЦикла;  
КонецПроцедуры

#КонецОбласти

#Область СопоставлениеДанных
	
&НаСервере
Процедура АнализИменКолонок()
	ИменаКолонок = Новый Массив;
	Для КолонкаИндекс = 1 По ЗагруженныеДанные.ШиринаТаблицы Цикл
		ИменаКолонок.Добавить(ЗагруженныеДанные.Область(НомерПервойСтрокиСДанными, КолонкаИндекс).Текст);
	КонецЦикла;

	НастройкиКолонок.Очистить();          
	Для Индекс = 0 По ИменаКолонок.ВГраница() Цикл
		ИменаКолонок[Индекс] = НРег(ИменаКолонок[Индекс]);
	КонецЦикла;
	ДобавитьСтрокуРеквизита("НомерПерегрузки", "Номер перегрузки", ИменаКолонок, Истина);
	ДобавитьСтрокуРеквизита("ДатаПерегрузки", "Дата перегрузки; Дата перегруза", ИменаКолонок);
	ДобавитьСтрокуРеквизита("НомерМаршрутногоЛиста", "Номер маршрутного листа", ИменаКолонок, Истина);
	ДобавитьСтрокуРеквизита("НомерРеализации", "Номер реализации; Номер ТТН", ИменаКолонок);
	ДобавитьСтрокуРеквизита("ОрганизаторПеревозки", 
		"Организатор перевозки (Заказчик а/м); Организатор перевозки; Наименование клиента на портале FM Logistic", ИменаКолонок);
	ДобавитьСтрокуРеквизита("Перевозчик", "Перевозчик; Название компании перевозчика", ИменаКолонок);
	ДобавитьСтрокуРеквизита("АдресПерегрузки", "Адрес перегрузки; Место погрузки", ИменаКолонок);
	ДобавитьСтрокуРеквизита("ТипДоставки", "Тип доставки; Тип транспорта", ИменаКолонок);
	ДобавитьСтрокуРеквизита("Автомобиль", "Автомобиль", ИменаКолонок, Истина);
	ДобавитьСтрокуРеквизита("НомерАвтомобиля", "Номер автомобиля", ИменаКолонок);
	ДобавитьСтрокуРеквизита("НомерПрицепа", "Номер прицепа", ИменаКолонок);
	ДобавитьСтрокуРеквизита("ФИОВодителя", "ФИО водителя", ИменаКолонок);
	ДобавитьСтрокуРеквизита("ФИОЭкспедитора", "ФИО экспедитора", ИменаКолонок);

	НомерПервойСтрокиСДанными = НомерПервойСтрокиСДанными + 1;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуРеквизита(ИмяРеквизита, ТекстПоиска, ИменаКолонок, Игнорировать = Ложь)
	СтрокиПоиска = СтрРазделить(ТекстПоиска, ";", Ложь);
	НомерКолонки = 0;
	Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
		СтрокаПоиска = НРег(СокрЛП(СтрокаПоиска));
		РезультатПоиска = ИменаКолонок.Найти(СтрокаПоиска);
		Если Не РезультатПоиска = Неопределено Тогда
			НомерКолонки = РезультатПоиска + 1;
			Прервать;
		КонецЕсли;   
	КонецЦикла;    
	Если НомерКолонки = 0 И Игнорировать Тогда
		НомерКолонки = - 1;		
	КонецЕсли;
	НоваяСтрока = НастройкиКолонок.Добавить();
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.НомерКолонки = НомерКолонки;
КонецПроцедуры

&НаКлиенте
Функция ЕстьВсеДанныеДляСопоставления()
	Отказ = Ложь; 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = НСтр("ru='Укажите организацию'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Организация", , Отказ);
	КонецЕсли;
	Для каждого СтрокаНастройки Из НастройкиКолонок Цикл
		Если СтрокаНастройки.НомерКолонки = 0 Тогда
			ТекстОшибки = НСтр("ru='Для реквизита %1 укажите номер колонки источника, или укажите ""-1"", чтобы игнорировать'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтрокаНастройки.ИмяРеквизита);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "НастройкиКолонокНомерКолонки", , Отказ);
		КонецЕсли;
	КонецЦикла;	
	Возврат Не Отказ;
КонецФункции

&НаСервере
Процедура СопоставитьДанныеСервер()
	НомераКолонок = Новый Соответствие;
	Для каждого СтрокаНастройки Из НастройкиКолонок Цикл
		НомераКолонок.Вставить(СтрокаНастройки.ИмяРеквизита, СтрокаНастройки.НомерКолонки);
	КонецЦикла;       
	КэшМаршрутныеЛисты = Неопределено; КэшРеализации = Неопределено;
	СопоставленныеДанные.Очистить();
	ОпределятьНомераПерегрузокПоРегистру = НомераКолонок["НомерПерегрузки"] < 0;
	ОпределятьМЛПоНакладной = НомераКолонок["НомерМаршрутногоЛиста"] < 0;
	Для ИндексСтроки = НомерПервойСтрокиСДанными По ЗагруженныеДанные.ВысотаТаблицы Цикл
		НоваяСтрока = СопоставленныеДанные.Добавить();
		ОпределитьДату(НоваяСтрока.ДатаПерегрузки, ИндексСтроки, НомераКолонок["ДатаПерегрузки"]);
		ОпределитьМаршрутныйЛист(НоваяСтрока.НомерМаршрутногоЛиста, НоваяСтрока.МаршрутныйЛист, 
			ИндексСтроки, НомераКолонок["НомерМаршрутногоЛиста"], КэшМаршрутныеЛисты);
		ОпределитьРеализацию(НоваяСтрока.НомерРеализации, НоваяСтрока.ДокументРеализации, 
			ИндексСтроки, НомераКолонок["НомерРеализации"], КэшРеализации);
		ОпределитьЧисло(НоваяСтрока.НомерПерегрузки, ИндексСтроки, НомераКолонок["НомерПерегрузки"]);
		ОпределитьСтроку(НоваяСтрока.ОрганизаторПеревозки, ИндексСтроки, НомераКолонок["ОрганизаторПеревозки"]);
		ОпределитьСтроку(НоваяСтрока.Перевозчик, ИндексСтроки, НомераКолонок["Перевозчик"]);
		ОпределитьСтроку(НоваяСтрока.АдресПерегрузки, ИндексСтроки, НомераКолонок["АдресПерегрузки"]);
		ОпределитьСтроку(НоваяСтрока.ТипДоставки, ИндексСтроки, НомераКолонок["ТипДоставки"]);
		ОпределитьСтроку(НоваяСтрока.МаркаТС, ИндексСтроки, НомераКолонок["Автомобиль"]);
		ОпределитьСтроку(НоваяСтрока.РегистрационныйНомерТС, ИндексСтроки, НомераКолонок["НомерАвтомобиля"]);
		ОпределитьСтроку(НоваяСтрока.РегистрационныйНомерПрицепа, ИндексСтроки, НомераКолонок["НомерПрицепа"]);
		ОпределитьСтроку(НоваяСтрока.Водитель, ИндексСтроки, НомераКолонок["ФИОВодителя"]);
		ОпределитьСтроку(НоваяСтрока.Экспедитор, ИндексСтроки, НомераКолонок["ФИОЭкспедитора"]);
	КонецЦикла;
	Если ОпределятьНомераПерегрузокПоРегистру Тогда
		НомераПерегрузок = РегистрыСведений.бг_ДанныеПерегрузок.ОпределитьНомераПерегрузок(
			СопоставленныеДанные.Выгрузить().ВыгрузитьКолонку("ДокументРеализации"));
		Для каждого СтрокаДанные Из СопоставленныеДанные Цикл
			СтрокаДанные.НомерПерегрузки = НомераПерегрузок[СтрокаДанные.ДокументРеализации] + 1;
		КонецЦикла;
	КонецЕсли;
	Если ОпределятьМЛПоНакладной Тогда
		МаршрутныеЛистыСоответствие = МаршрутныеЛистыНакладных(СопоставленныеДанные.Выгрузить().ВыгрузитьКолонку("ДокументРеализации"));
		Для каждого СтрокаДанные Из СопоставленныеДанные Цикл
			СтрокаДанные.МаршрутныйЛист = МаршрутныеЛистыСоответствие[СтрокаДанные.ДокументРеализации];
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция МаршрутныеЛистыНакладных(Накладные)
	Результат = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Накладные", Накладные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование) КАК МаршрутныйЛист,
	|	битМаршрутныйЛистЗаказы.ДокументОтгрузки КАК ДокументОтгрузки
	|ИЗ
	|	Документ.битМаршрутныйЛист.Заказы КАК битМаршрутныйЛистЗаказы
	|ГДЕ
	|	битМаршрутныйЛистЗаказы.Ссылка.Проведен 
	|	И битМаршрутныйЛистЗаказы.ДокументОтгрузки В(&Накладные)
	|
	|СГРУППИРОВАТЬ ПО
	|	битМаршрутныйЛистЗаказы.ДокументОтгрузки";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл  
		Результат.Вставить(Выборка.ДокументОтгрузки, Выборка.МаршрутныйЛист);
	КонецЦикла;                                                              
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОпределитьСтроку(Результат, НомерСтроки, НомерКолонки)
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		Результат = ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст;
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура ОпределитьЧисло(Результат, НомерСтроки, НомерКолонки, ЧислоЗнаков = 10, ЧислоЗнаковПослеЗапятой = 0)
	Результат = 0;
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		ТипЗначенияЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(ЧислоЗнаков, ЧислоЗнаковПослеЗапятой);
		Результат = ТипЗначенияЧисло.ПривестиЗначение(ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст);
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура ОпределитьДату(Результат, НомерСтроки, НомерКолонки, ЗначениеПоУмолчанию = Неопределено)
	Результат = ЗначениеПоУмолчанию;
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		Значение = ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст;
		Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение);
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура ОпределитьМаршрутныйЛист(Значение, ЗначениеСсылка, НомерСтроки, НомерКолонки, Кэш)
	Результат = Неопределено;
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		Значение = ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст;
		Если Кэш = Неопределено Тогда
			Кэш = Новый Соответствие;
		КонецЕсли;     
		Результат = Кэш[Значение];
		Если Результат = Неопределено Тогда
			Результат = ДокументПоНомеру(Значение, "битМаршрутныйЛист");
			Кэш.Вставить(Значение, Результат);
		КонецЕсли;                                                         
	КонецЕсли;   
	ЗначениеСсылка = Результат;
КонецПроцедуры

&НаСервере
Процедура ОпределитьРеализацию(Значение, ЗначениеСсылка, НомерСтроки, НомерКолонки, Кэш)
	Результат = Неопределено;
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		Значение = ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст;
		Если Кэш = Неопределено Тогда
			Кэш = Новый Соответствие;
		КонецЕсли;     
		Результат = Кэш[Значение];
		Если Результат = Неопределено Тогда
			Результат = ДокументПоНомеру(Значение, "РеализацияТоваровУслуг");
			Кэш.Вставить(Значение, Результат);
		КонецЕсли;                                                         
	КонецЕсли;   
	ЗначениеСсылка = Результат;
КонецПроцедуры

Функция ДокументПоНомеру(НомерДокумента, ИмяДокумента)
	Результат = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаДокумента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.битМаршрутныйЛист КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Номер = &Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.Дата УБЫВ",
		"битМаршрутныйЛист",
		ИмяДокумента);
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ЗагруженныеДанные

&НаСервере
Процедура ЗаполнитьЗагруженныеДанныеПоМаршрутномуЛисту(МаршрутныйЛист, Очищать = Ложь)
	Если ТипЗнч(МаршрутныйЛист) = Тип("ДокументСсылка.битМаршрутныйЛист") Тогда
		МаршрутныйЛистПараметр = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МаршрутныйЛист);
	Иначе 
		МаршрутныйЛистПараметр = МаршрутныйЛист;
	КонецЕсли;
	Если Очищать Тогда
		СопоставленныеДанные.Очистить();
		ЗагруженныеДанные.Очистить();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛистПараметр);
	Запрос.УстановитьПараметр("УжеЗагруженные",	СопоставленныеДанные.Выгрузить(, "МаршрутныйЛист").ВыгрузитьКолонку("МаршрутныйЛист"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битМаршрутныйЛист.Ссылка КАК Рейс
	|ПОМЕСТИТЬ втРейсы
	|ИЗ
	|	Документ.битМаршрутныйЛист КАК битМаршрутныйЛист
	|ГДЕ
	|	битМаршрутныйЛист.ДокументОснование В(&МаршрутныйЛист)
	|	И НЕ битМаршрутныйЛист.ДокументОснование В(&УжеЗагруженные)
	|	И битМаршрутныйЛист.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.Рейс)
	|	И НЕ битМаршрутныйЛист.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1 КАК НомерПерегрузки,
	|	НАЧАЛОПЕРИОДА(битМаршрутныйЛистЗаказы.Ссылка.ЗагрузкаДатаУбытия, ДЕНЬ) КАК ДатаПерегрузки,
	|	битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Номер КАК НомерМаршрутногоЛиста,
	|	битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование КАК МаршрутныйЛист,
	|	битМаршрутныйЛистЗаказы.ДокументОтгрузки.Номер КАК НомерРеализации,
	|	битМаршрутныйЛистЗаказы.ДокументОтгрузки КАК ДокументРеализации,
	|	битМаршрутныйЛистЗаказы.Ссылка.Организация.Наименование КАК ОрганизаторПеревозки,
	|	битМаршрутныйЛистЗаказы.Ссылка.Перевозчик.Наименование КАК Перевозчик,
	|	""413"" КАК ТипДоставки,
	|	ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Автомобиль.бг_Марка.Наименование, """") КАК МаркаТС,
	|	ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Автомобиль.Код, """") КАК РегистрационныйНомерТС,
	|	ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Прицеп.Код, """") КАК РегистрационныйНомерПрицепа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Водитель.ФИО, """") = """"
	|			ТОГДА ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Водитель.Наименование, """")
	|		ИНАЧЕ ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Водитель.ФИО, """")
	|	КОНЕЦ КАК Водитель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Экспедитор.ФИО, """") = """"
	|			ТОГДА ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Экспедитор.Наименование, """")
	|		ИНАЧЕ ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка.ДокументОснование.Экспедитор.ФИО, """")
	|	КОНЕЦ КАК Экспедитор
	|ИЗ
	|	Документ.битМаршрутныйЛист.Заказы КАК битМаршрутныйЛистЗаказы
	|ГДЕ
	|	битМаршрутныйЛистЗаказы.Ссылка В
	|			(ВЫБРАТЬ
	|				втРейсы.Рейс
	|			ИЗ
	|				втРейсы)"; 
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СопоставленныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайлExcel(ИмяФайла) 
	ТекстСостояние = НСтр("ru = 'Загрузка данных...'");
	Состояние(ТекстСостояние);
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	Возврат ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ЗаполнитьЗагруженныеДанныеНаСервере(АдресРезультата, ИмяФайла)
	НомерПервойСтрокиСДанными = 0;
	ЗагруженныеДанные.Очистить();
	СопоставленныеДанные.Очистить();
    Если Прав(ИмяФайла, 3) = "xls" Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
	КонецЕсли;
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресРезультата);
	ДанныеФайла.Записать(ИмяВременногоФайла);
	ЗагруженныеДанные.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	УдалитьФайлы(ИмяВременногоФайла);
	
	УбратьПробелыОпределитьНомерПервойСтрокиСДанными();
	АнализИменКолонок();
КонецПроцедуры          

&НаСервере
Процедура УбратьПробелыОпределитьНомерПервойСтрокиСДанными()
	Для СтрокаИндекс = 1 По ЗагруженныеДанные.ВысотаТаблицы Цикл
		ЕстьЗаполненныеЗначения = Ложь;
		Для КолонкаИндекс = 1 По ЗагруженныеДанные.ШиринаТаблицы Цикл
			Значение = СокрЛП(ЗагруженныеДанные.Область(СтрокаИндекс, КолонкаИндекс).Текст);
			ЕстьЗаполненныеЗначения = ЕстьЗаполненныеЗначения Или Не ПустаяСтрока(Значение);
			ЗагруженныеДанные.Область(СтрокаИндекс, КолонкаИндекс).Текст = Значение;
		КонецЦикла;
		Если НомерПервойСтрокиСДанными = 0 И ЕстьЗаполненныеЗначения Тогда
			НомерПервойСтрокиСДанными = СтрокаИндекс;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Прочее 

&НаСервере
Процедура СформироватьДокументыЕГАИСНаСервере(ВыделенныеСтроки)
	СтрокаКолонок = РегистрыСведений.бг_ДанныеПерегрузок.ИзмеренияРегистраСтрока();
	ИсходныеДанные = РегистрыСведений.бг_ДанныеПерегрузок.СоздатьНаборЗаписей().Выгрузить( , СтрокаКолонок);
	Для каждого КлючЗаписиРегистра Из ВыделенныеСтроки Цикл
		НоваяСтрока = ИсходныеДанные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписиРегистра);
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Организация КАК Организация,
	|	Таблица.МаршрутныйЛист КАК МаршрутныйЛист,
	|	Таблица.Объект КАК Объект,
	|	Таблица.НомерПерегрузки КАК НомерПерегрузки
	|ПОМЕСТИТЬ втИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведенийбг_ДанныеПерегрузок.Организация КАК Организация,
	|	РегистрСведенийбг_ДанныеПерегрузок.МаршрутныйЛист КАК МаршрутныйЛист,
	|	РегистрСведенийбг_ДанныеПерегрузок.Объект КАК Объект,
	|	РегистрСведенийбг_ДанныеПерегрузок.НомерПерегрузки КАК НомерПерегрузки,
	|	РегистрСведенийбг_ДанныеПерегрузок.ИзмененоПравоСобственности КАК ТоварВПутиПринадлежитГрузополучателю,
	|	РегистрСведенийбг_ДанныеПерегрузок.Перевозчик КАК Перевозчик,
	|	ВЫБОР РегистрСведенийбг_ДанныеПерегрузок.ТипДоставки
	|		КОГДА ""410""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыТранспортаЕГАИС.Авиарейс)
	|		КОГДА ""411""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыТранспортаЕГАИС.МорскойКонтейнер)
	|		КОГДА ""412""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыТранспортаЕГАИС.ЖелезнодорожныйВагон)
	|		КОГДА ""413""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыТранспортаЕГАИС.Автомобиль)
	|		ИНАЧЕ 
	|			ЗНАЧЕНИЕ(Перечисление.ТипыТранспортаЕГАИС.Прочее)
	|	КОНЕЦ КАК ТипТранспорта,
	|	РегистрСведенийбг_ДанныеПерегрузок.РегистрационныйНомерТС КАК НомерТранспортногоСредства,
	|	РегистрСведенийбг_ДанныеПерегрузок.РегистрационныйНомерПрицепа КАК Прицеп,
	|	РегистрСведенийбг_ДанныеПерегрузок.Заказчик КАК Заказчик,
	|	РегистрСведенийбг_ДанныеПерегрузок.Водитель КАК Водитель,
	|	РегистрСведенийбг_ДанныеПерегрузок.ПунктПогрузки КАК ПунктПогрузки,
	|	РегистрСведенийбг_ДанныеПерегрузок.ПунктРазгрузки КАК ПунктРазгрузки,
	|	РегистрСведенийбг_ДанныеПерегрузок.Перенаправление КАК Перенаправление,
	|	РегистрСведенийбг_ДанныеПерегрузок.Экспедитор КАК Экспедитор,
	|	РегистрСведенийбг_ДанныеПерегрузок.Количество КАК Количество,
	|	РегистрСведенийбг_ДанныеПерегрузок.ТНЕГАИС КАК ТНЕГАИС,
	|	РегистрСведенийбг_ДанныеПерегрузок.Комментарий КАК Комментарий,
	|	ЕСТЬNULL(ТТНИсходящаяЕГАИС.Ссылка, НЕОПРЕДЕЛЕНО) КАК ТТНИсходящая,
	|	ЕСТЬNULL(ТТНИсходящаяЕГАИС.бг_ДатаФиксацииЕГАИС, ДатаВремя(1, 1, 1)) КАК ДатаФиксацииЕГАИС,
	|	ЕСТЬNULL(ТТНИсходящаяЕГАИС.бг_НомерФиксацииЕГАИС, """") КАК НомерФиксацииЕГАИС,
	|	ЕСТЬNULL(СтатусыДокументовЕГАИСТТНИсходящая.Статус, НЕОПРЕДЕЛЕНО) КАК СтатусТТНИсходящая
	|ИЗ
	|	РегистрСведений.бг_ДанныеПерегрузок КАК РегистрСведенийбг_ДанныеПерегрузок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО (ТТНИсходящаяЕГАИС.ДокументОснование = РегистрСведенийбг_ДанныеПерегрузок.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИСТТНИсходящая
	|		ПО (ТТНИсходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИСТТНИсходящая.Документ)
	|ГДЕ
	|	(РегистрСведенийбг_ДанныеПерегрузок.Организация, РегистрСведенийбг_ДанныеПерегрузок.МаршрутныйЛист, РегистрСведенийбг_ДанныеПерегрузок.Объект, РегистрСведенийбг_ДанныеПерегрузок.НомерПерегрузки) В
	|			(ВЫБРАТЬ
	|				втИсходныеДанные.Организация,
	|				втИсходныеДанные.МаршрутныйЛист,
	|				втИсходныеДанные.Объект,
	|				втИсходныеДанные.НомерПерегрузки
	|			ИЗ
	|				втИсходныеДанные)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПерегрузки";
	РезультатЗапроса = Запрос.Выполнить();
	ТекстОшибкиНетТТН = НСтр("ru='Для документа %1 не создана ТТН исходящая'");
	ТекстОшибкиПодтвержден = НСтр("ru='Документ %1 пропущен. %2 уже подверждена контрагентом'");
	ТекстОшибкиНеверныйСтатус = НСтр("ru='Документ %1 пропущен. %2 в статусе %3. Формируется только для статуса ""Обрабатывается клиентом""'");
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ТТНИсходящая) Тогда             
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибкиНетТТН, Выборка.Объект));
			Продолжить;
		КонецЕсли;
		Если Выборка.СтатусТТНИсходящая = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден Тогда             
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибкиПодтвержден, Выборка.Объект, Выборка.ТТНИсходящая));
			Продолжить;
		КонецЕсли;
		Если Не (Выборка.СтатусТТНИсходящая = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом 
			Или (Выборка.СтатусТТНИсходящая = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС 
			И Не Выборка.ДатаФиксацииЕГАИС = Дата(1, 1, 1) И Не Выборка.НомерФиксацииЕГАИС = "")) Тогда             
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибкиНеверныйСтатус, 
				Выборка.Объект, Выборка.ТТНИсходящая, Выборка.СтатусТТНИсходящая));
			Продолжить;
		КонецЕсли;
		СоздатьИОтправитьДокументТН(Выборка, Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция РеквизитыИзРегистра()
	Результат = "ТоварВПутиПринадлежитГрузополучателю, Перевозчик, НомерТранспортногоСредства, Прицеп, Водитель,
		|ПунктПогрузки, ПунктРазгрузки, Перенаправление, Экспедитор, Комментарий, ТипТранспорта";
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СоздатьИОтправитьДокументТН(ДанныеИсточник, Отправлять)
	Попытка
		НачатьТранзакцию();
		ДокументОбъект = Документы.ТранспортнаяНакладнаяЕГАИС.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеИсточник.ТТНИсходящая);   
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументОбъект.ДатаТН = ДокументОбъект.Дата;
		ДокументОбъект.НомерТН = ДокументОбъект.Номер;
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеИсточник, РеквизитыИзРегистра());
		Если ЗначениеЗаполнено(ДанныеИсточник.Заказчик) Тогда
			ДокументОбъект.Заказчик = ДанныеИсточник.Заказчик;
		КонецЕсли; 
		ЗаполнитьТранспортныеНакладные(ДокументОбъект, ДанныеИсточник);
		ОбработатьСтроковыеПоляТНЕГАИС(ДокументОбъект);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		РегистрыСведений.бг_ДанныеПерегрузок.УстановитьДокументЕГАИС(
			РегистрыСведений.бг_ДанныеПерегрузок.СтруктураИзмерений(ДанныеИсточник),
			ДокументОбъект.Ссылка);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = НСтр("ru='Не удалось создать Транспортную наклдадную ЕГАИС по причине %1'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстОшибки, ОписаниеОшибки()));
	КонецПопытки;
	Если Отправлять Тогда
		ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(
			ДокументОбъект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"));
	КонецЕсли;
КонецПроцедуры  

&НаСервере                                                             
Процедура ОбработатьСтроковыеПоляТНЕГАИС(ДокументОбъект)
	ДокументОбъект.Идентификатор = СокрЛП(ДокументОбъект.Идентификатор);
	ДокументОбъект.ИдентификаторЕГАИС = СокрЛП(ДокументОбъект.ИдентификаторЕГАИС);
	ДокументОбъект.НомерТН = СокрЛП(ДокументОбъект.НомерТН);
	ДокументОбъект.Перевозчик = СокрЛП(ДокументОбъект.Перевозчик);
	ДокументОбъект.НомерТранспортногоСредства = СокрЛП(ДокументОбъект.НомерТранспортногоСредства);
	ДокументОбъект.Прицеп = СокрЛП(ДокументОбъект.Прицеп);
	ДокументОбъект.Заказчик = СокрЛП(ДокументОбъект.Заказчик);
	ДокументОбъект.Водитель = СокрЛП(ДокументОбъект.Водитель);
	ДокументОбъект.ПунктПогрузки = СокрЛП(ДокументОбъект.ПунктПогрузки);
	ДокументОбъект.ПунктРазгрузки = СокрЛП(ДокументОбъект.ПунктРазгрузки);
	ДокументОбъект.Перенаправление = СокрЛП(ДокументОбъект.Перенаправление);
	ДокументОбъект.Экспедитор = СокрЛП(ДокументОбъект.Экспедитор);
КонецПроцедуры

&НаСервере                                                             
Процедура ЗаполнитьТранспортныеНакладные(ДокументОбъект, ДанныеИсточник)
	ДокументОбъект.ТранспортныеНакладные.Очистить();
	НоваяСтрока = ДокументОбъект.ТранспортныеНакладные.Добавить();
	НоваяСтрока.ДокументОснование = ДокументОбъект.ТоварноТранспортнаяНакладная;
	Если ДанныеИсточник.НомерПерегрузки > 1 Тогда
		ТНЕГАИС = РегистрыСведений.бг_ДанныеПерегрузок.ТранспортныеНакладныеОбъекта(ДанныеИсточник.Объект, ДанныеИсточник.НомерПерегрузки);
		Для каждого ТранспортнаяНакладная Из ТНЕГАИС Цикл 
			НоваяСтрока = ДокументОбъект.ТранспортныеНакладные.Добавить();
			НоваяСтрока.ДокументОснование = ТранспортнаяНакладная;
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

&НаСервере                                                             
Процедура УстановитьЗаголовок()
	Заголовок = НСтр("ru='Управление перегрузками %1'");
	ЭтотОбъект.Заголовок = СтрШаблон(Заголовок, Организация);
КонецПроцедуры

&НаСервере
Процедура УправлениеДинамическимиСписками()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДанныеПерегрузок, "Организация", Организация, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДанныеПерегрузок, "ОтборПоСтатусам", ВариантОтображения, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДанныеПерегрузок, "ДатаНачала", ОтборПериод.ДатаНачала, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДанныеПерегрузок, "ДатаОкончания", ОтборПериод.ДатаОкончания, Истина);
	Элементы.ДанныеПерегрузок.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СопоставленныеДанныеУстановитьПометки(Пометка)
	Для каждого СтрокаДанных Из СопоставленныеДанные Цикл
		СтрокаДанных.Пометка = Пометка;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СопоставленныеДанныеКолонкиДляЗаполнения()
	Результат = Новый Соответствие;
	Результат.Вставить("СопоставленныеДанныеНомерПерегрузки", "НомерПерегрузки");
	Результат.Вставить("СопоставленныеДанныеДатаПерегрузки", "ДатаПерегрузки");
	Результат.Вставить("СопоставленныеДанныеАдресПерегрузки", "АдресПерегрузки");
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти