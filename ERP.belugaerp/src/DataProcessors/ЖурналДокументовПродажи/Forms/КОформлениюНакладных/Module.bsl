
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	бг_ИзменитьТекстЗапросаСпискаРаспоряжений();
	бг_ДобавитьРеквизиты();
	бг_ДобавитьЭлементыВСписокРаспоряжений();
	бг_ДобавитьКомандыЕГАИС();
	бг_ДобавитьКомандуПеренестиДатуОтгрузки();
	бг_ДобавитьКомандуПечатиНарядЗаданиеПоРасходномуОрдеру();
	бг_ДобавитьКомандуПересчитатьСкидкиВРеализацииТоваров();
	
	ИспользуемыеТипыДокументов = Новый Массив();
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаказКлиента")); 

    // СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокРаспоряженияНаОформлениеКоманднаяПанель;
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	бг_УстановитьВидимостьКоманд(); 
	бг_ЗаполнитьСписокВыбораПоСостояниюПечати();
	бг_ЗаполнитьСписокВыбораСостояниеРасхожденияСуммыЗаказаИРеализации();
	бг_ОтключитьПолнотекстовыйПоискСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
&ИзменениеИКонтроль("ОформитьПродажу")
Процедура бг_ОформитьПродажу()

	ЗаполнитьСписокДокументовПоДаннымФормы();

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	ДополнительныеПараметры.Вставить("МассивСсылок", СписокРаспоряжений);
	ДополнительныеПараметры.Вставить("ПоОрдерам", ПоОрдерам);
	ДополнительныеПараметры.Вставить("Склад", Склад);
	ДополнительныеПараметры.Вставить("КлючОбъекта", "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных/ТекущиеДанные");
#Вставка
	ДополнительныеПараметры.Вставить("Отпустил"			, ЭтотОбъект.бг_Отпустил);
	ДополнительныеПараметры.Вставить("ОтпустилДолжность", ЭтотОбъект.бг_ОтпустилДолжность);
	ДополнительныеПараметры.Вставить("Руководитель"		, ЭтотОбъект.бг_Руководитель);
	ДополнительныеПараметры.Вставить("ГлавныйБухгалтер"	, ЭтотОбъект.бг_ГлавныйБухгалтер);
	ДополнительныеПараметры.Вставить("Автор"			, ЭтотОбъект.бг_Автор);
	ДополнительныеПараметры.Вставить("ДоверенностьНомер", ЭтотОбъект.бг_ДоверенностьНомер);
	ДополнительныеПараметры.Вставить("ДоверенностьДата" , ЭтотОбъект.бг_ДоверенностьДата);
	ДополнительныеПараметры.Вставить("ДоверенностьВыдана" , ЭтотОбъект.бг_ДоверенностьВыдана);
	ДополнительныеПараметры.Вставить("ДоверенностьЛицо" , ЭтотОбъект.бг_ДоверенностьЛицо);

#КонецВставки
	
	ПродажиКлиент.СформироватьКомплектДокументовВызов(Неопределено, ДополнительныеПараметры);

	Элементы.СписокРаспоряженияНаОформление.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура бг_ОформитьПоЗаказамВместо(Команда)
  бг_ЗаполнитьОтветственныхЛиц();
КонецПроцедуры

&НаКлиенте
&Вместо("ОформитьПоОтгрузке")
Процедура бг_ОформитьПоОтгрузке(Команда)
	бг_ЗаполнитьОтветственныхЛиц(Истина);
КонецПроцедуры

&НаКлиенте
Процедура бг_ОформитьПоЗаказамПослеЗаполненияОтветственныхЛиц(ОформлениеПоОрдерам)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.РеализацияТоваровУслуг.КОформлениюНакладных.Команда.ОформитьПоЗаказам");
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	Если Не ОбщегоНазначенияУТКЛиент.ВыбраныДокументыКОформлению(ВыделенныеСтроки, ПараметрыЖурнала("Накладные")) Тогда
		Возврат;
	КонецЕсли;
	
	ПоОрдерам = ОформлениеПоОрдерам;
	ОформитьПродажу();	
    
КонецПроцедуры

&НаКлиенте
Процедура бг_ЗаполнитьОтветственныхЛиц(ПоОрдерам = Ложь)
	
	ТекстВопроса = НСтр("ru = 'Изменить ответственных лиц в документе?'",
		ОбщегоНазначенияКлиент.КодОсновногоЯзыка());
		
	ОповещениеПослеВопроса = Новый ОписаниеОповещения("бг_ЗаполнитьОтветственныхЛицЗавершение", ЭтотОбъект,ПоОрдерам);
	ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
    
КонецПроцедуры

&НаКлиенте
Процедура бг_ЗаполнитьОтветственныхЛицЗавершение(Результат, ПоОрдерам) Экспорт
		
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		бг_ОформитьПоЗаказамПослеЗаполненияОтветственныхЛиц(ПоОрдерам);
		Возврат;
	КонецЕсли;	

	ДанныеТранспортнойИнформации = бг_ДанныеТранспортнойИнформации();
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Отпустил"			, ЭтотОбъект.бг_Отпустил);  
	СтруктураПараметров.Вставить("ОтпустилДолжность", ЭтотОбъект.бг_Отпустил);
	СтруктураПараметров.Вставить("Руководитель"		, ЭтотОбъект.бг_Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер"	, ЭтотОбъект.бг_ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("Организация"		, ЭтотОбъект.Организация); 
	СтруктураПараметров.Вставить("Дата"				, ТекущаяДата());
	СтруктураПараметров.Вставить("Автор"			, ЭтотОбъект.бг_Автор);
	
	Если ДанныеТранспортнойИнформации <> Неопределено Тогда
		СтруктураПараметров.Вставить("ДоверенностьВыдана", ДанныеТранспортнойИнформации.Перевозчик);
		СтруктураПараметров.Вставить("ДоверенностьЛицо" , ДанныеТранспортнойИнформации.Водитель);
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("бг_ОтветственныеЛицаПриИзмененииЗавершение", ЭтотОбъект, ПоОрдерам);
		ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.бг_ФормаЗаполненеияОтветственныхЛицВДокументе", 
		СтруктураПараметров,
		ЭтаФорма,,,, 
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		

КонецПроцедуры

&НаКлиенте
Процедура бг_ОтветственныеЛицаПриИзмененииЗавершение(ВозвращенноеЗначение, ПоОрдерам) Экспорт 
	
	Если Не ВозвращенноеЗначение = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ВозвращенноеЗначение);
	КонецЕсли;
	
	бг_ОформитьПоЗаказамПослеЗаполненияОтветственныхЛиц(ПоОрдерам);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СписокРаспоряженияНаОформление);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СписокРаспоряженияНаОформление, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СписокРаспоряженияНаОформление);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура бг_ОформитьТТНИсходящаяЕГАИС(Команда)
		
	ОчиститьСообщения();
	
	Если Не ИнтеграцияИСКлиент.ВыборСтрокиСпискаКорректен(Элементы.СписокРаспоряженияНаОформление, Истина) Тогда
		Возврат;
	КонецЕсли;
   
	бг_ОформитьТТНИсходящуюЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПередатьТТНИсходящаяЕГАИС(Команда)
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	СписокДокументов = Новый Массив; 
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		СписокДокументов.Добавить(НайденнаяСтрока.бг_ТТНИсходящаяЕГАИС);
	КонецЦикла;
	
	Если СписокДокументов.Количество() Тогда
		бг_ПередатьДанныеЕГАИС(СписокДокументов);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура бг_ПечатьНарядЗаданиеПоРасходномуОрдеру(Команда)
	
	ОчиститьСообщения();

	РасходныеОрдераНаТовары = Неопределено;
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	
	СписокДокументов = Новый Массив; 
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		СписокДокументов.Добавить(НайденнаяСтрока);
	КонецЦикла;
	
	Если СписокДокументов.Количество() Тогда
		РасходныеОрдераНаТовары = бг_РасходныеОрдераНаТоварыНаСервере(СписокДокументов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасходныеОрдераНаТовары) Тогда
		ТекстСообщения = НСтр("ru = 'Нет расходных ордеров на товары. Печать недоступна.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Обработка.бг_ПечатьНарядЗаданий", 
		"бг_НарядЗадание", 
		РасходныеОрдераНаТовары, 
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПеренестиДатуОтгрузки(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	
	СписокДокументов = Новый Массив;

	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.бг_ТТНИсходящаяЕГАИС) Тогда
			
			Если МожноИзменитьДатуОтгрузки(НайденнаяСтрока.бг_ТТНИсходящаяЕГАИС) Тогда
				СписокДокументов.Добавить(НайденнаяСтрока.бг_ТТНИсходящаяЕГАИС);
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
	
		Если ЗначениеЗаполнено(НайденнаяСтрока.бг_РеализацияТоваровУслуг) Тогда
			СписокДокументов.Добавить(НайденнаяСтрока.бг_РеализацияТоваровУслуг);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.бг_РасходныйОрдерНаТовары) Тогда
			СписокДокументов.Добавить(НайденнаяСтрока.бг_РасходныйОрдерНаТовары);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.Распоряжение) Тогда
			СписокДокументов.Добавить(НайденнаяСтрока.Распоряжение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("бг_ПеренестиДатуОтгрузкиЗавершение", ЭтотОбъект, СписокДокументов);
		
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.бг_ФормаЗаполненияПричиныПереносаДатыОтгрузки",,,,,,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура бг_ПересчитатьСкидкиВРеализацииТоваров(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	
	СписокДокументов = Новый Массив;

	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);

		Если ЗначениеЗаполнено(НайденнаяСтрока.бг_РеализацияТоваровУслуг) Тогда
				СписокДокументов.Добавить(НайденнаяСтрока.бг_РеализацияТоваровУслуг);
		КонецЕсли;
	
	КонецЦикла;
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	бг_ПересчитатьСкидкиВРеализацииТоваровСервер(СписокДокументов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ИзменитьТекстЗапросаСпискаРаспоряжений()
	
	ТекстЗапросаИсходный = СписокРаспоряженияНаОформление.ТекстЗапроса;
	
	ПозицияСлова = СтрНайти(ТекстЗапросаИсходный, СтрШаблон(
		"%1%2%3",
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ", Символы.ПС, "	ТоварыКОтгрузке.ДокументОтгрузки КАК Распоряжение,"),
		НаправлениеПоиска.СКонца);
	
	Если ПозицияСлова > 0 Тогда
		
		ТекстЗапросаДоВставляемойСтроки = Лев(ТекстЗапросаИсходный, ПозицияСлова - 1);
		ВставляемаяСтрока = бг_ТекстЗапросаДополнительныеСведенияПоЗаказамКлиентов();
		
		ТекстЗапросаИзмененный = СтрШаблон(
			"%1%2",
			ТекстЗапросаДоВставляемойСтроки,
			ВставляемаяСтрока);
			
	КонецЕсли;
	
	СписокРаспоряженияНаОформление.ТекстЗапроса = ТекстЗапросаИзмененный;

КонецПроцедуры

&НаСервереБезКонтекста
Функция бг_ТекстЗапросаДополнительныеСведенияПоЗаказамКлиентов()

	// За основу взят текст типового результирующего запроса. Добавила поля и соедение с РС СостоянияОригиналовПервичныхДокументов,
	// бг_СогласованиеЗаказовКлиентов, бг_ДополнительныеСведенияПоЗаказамКлиентов.
	// Внесенные изменения обрамлены #Вставка и #КонецВставки.
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
//#Вставка
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.МаршрутныйЛист, ЗНАЧЕНИЕ(Документ.битМаршрутныйЛист.ПустаяСсылка)) КАК бг_МаршрутныйЛист,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.ОтражениеФактаПоРасходномуОрдеру, ЗНАЧЕНИЕ(Документ.битОтражениеФактаПоРасходномуОрдеру.ПустаяСсылка)) КАК бг_ОтражениеФактаПоРасходномуОрдеру,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.ОтражениеФактаПоРасходномуОрдеруНомер, """") КАК бг_НомерОтражениеФакта,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.ПроцентСборки, 0) КАК бг_ПроцентСборки,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.РасходныйОрдер, ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)) КАК бг_РасходныйОрдерНаТовары,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.РасходныйОрдерНомер, """") КАК бг_РасходныйОрдерНомер,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.РеализацияТоваровУслугНомер, """") КАК бг_НомерРТиУ,
	|	бг_ДополнительныеСведенияПоЗаказамКлиентов.ДатаОтгрузки КАК бг_ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.РеализацияТоваровУслуг = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.СуммаЗаказаИРеализацииСовпадают
	|			ТОГДА 1
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК бг_СуммаЗаказаИРеализацииСовпадают,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.РеализацияТоваровУслуг, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)) КАК бг_РеализацияТоваровУслуг,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.СтатусSolvoОтражениеФактаПоРасходномуОрдеру, ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.бг_СтатусыОтгрузкиSolvo.ПустаяСсылка)) КАК бг_СтатусSolvo,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.ТТНИсходящаяЕГАИС, ЗНАЧЕНИЕ(Документ.ТТНИсходящаяЕГАИС.ПустаяСсылка)) КАК бг_ТТНИсходящаяЕГАИС,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.ТТНИсходящаяЕГАИСНомер, """") КАК бг_НомерТТН,
	|	ЕСТЬNULL(бг_ДополнительныеСведенияПоЗаказамКлиентов.ТТНИсходящаяЕГАИССтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ПустаяСсылка)) КАК бг_СтатусТТНИсходящаяЕГАИС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияОригиналовПервичныхДокументов.Владелец, 0) = 0
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК бг_НарядЗаданиеРаспечатано,
	|	ЕСТЬNULL(бг_СогласованиеЗаказовКлиентов.РезультатСогласования, ЗНАЧЕНИЕ(Перечисление.бг_РезультатыСогласования.ПустаяСсылка)) КАК бг_Согласование,
//#КонецВставки
	|	ВЫБОР
	|		КОГДА НЕ ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки
//#Вставка
	|		ИНАЧЕ бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента
//#КонецВставки
	|	КОНЕЦ КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки
	|		ИНАЧЕ бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента
	|	КОНЕЦ КАК Ссылка,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ТоварыКОтгрузке.ДокументОтгрузки
//#Вставка
	|		ИНАЧЕ бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента
//#КонецВставки
	|	КОНЕЦ КАК ЗаказКлиента,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.ПометкаУдаления
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).ПометкаУдаления
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ПометкаУдаления
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ПометкаУдаления
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).ПометкаУдаления
	|	КОНЕЦ КАК ПометкаУдаления,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Номер
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Номер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Номер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Номер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Дата
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Дата
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Дата
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Дата
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Дата
	|	КОНЕЦ КАК ДатаДокумента,
//#Вставка
	|	ВЫБОР
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ТИПЗНАЧЕНИЯ(бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента)
	|		ИНАЧЕ ТИПЗНАЧЕНИЯ(ТоварыКОтгрузке.ДокументОтгрузки)
	|	КОНЕЦ КАК ТипРаспоряжения,
//#КонецВставки
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Проведен
//#КонецВставки	
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Проведен
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Проведен
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Проведен
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Проведен
	|	КОНЕЦ КАК Проведен,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Партнер
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Партнер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Партнер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Партнер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Партнер
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Контрагент
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Контрагент
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Контрагент
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Контрагент
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Организация
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Организация
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Соглашение
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Соглашение
	|	КОНЕЦ КАК Соглашение,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Договор
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Договор
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Договор
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Договор
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Договор
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Сделка
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Сделка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Сделка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Сделка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Сделка
	|	КОНЕЦ КАК Сделка,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Валюта
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Валюта
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Валюта
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Валюта
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Валюта
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.СуммаДокумента
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).СуммаДокумента
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СуммаЗамены
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СуммаДокумента
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДокумента,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.ГрафикОплаты
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).ГрафикОплаты
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ГрафикОплаты
	|	КОНЕЦ КАК ГрафикОплаты,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Склад
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Склад
	|	КОНЕЦ КАК СкладШапки,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ТоварыКОтгрузке.Склад
//#Вставка
	|		ИНАЧЕ бг_ДополнительныеСведенияПоЗаказамКлиентов.Склад
//#КонецВставки
	|	КОНЕЦ КАК Склад,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Статус
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Статус
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Статус
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Статус
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Менеджер
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Менеджер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Менеджер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Менеджер
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Менеджер
	|	КОНЕЦ КАК Менеджер,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.ДокументОснование
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).ДокументОснование
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).ЗаказКлиента
	|	КОНЕЦ КАК ДокументОснование,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Приоритет
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Приоритет
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Приоритет
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.ХозяйственнаяОперация
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Касса
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Касса
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Касса
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Касса
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК Касса,
	|	ВЫБОР
//#Вставка
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.СпособДоставки
//#КонецВставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки
	|		КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).СпособДоставки
	|	КОНЕЦ КАК СпособДоставки,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ТоварыКОтгрузке.СостояниеНакладнойВрем
//#Вставка
	|		КОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.РеализацияТоваровУслуг <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	|			ТОГДА 0
//#КонецВставки
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СостояниеНакладной,
	|	ВЫБОР
	|		КОГДА НЕ ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ТоварыКОтгрузке.СостояниеОрдераВрем
//#Вставка
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ бг_ДополнительныеСведенияПоЗаказамКлиентов.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|						ИЛИ бг_ДополнительныеСведенияПоЗаказамКлиентов.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|							И бг_ДополнительныеСведенияПоЗаказамКлиентов.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке > &ТекущаяДата
	|					ТОГДА 4
	|				КОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.РасходныйОрдер <> ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
//#КонецВставки
	|	КОНЕЦ КАК СостояниеОрдера,
	|	ВЫБОР
	|		КОГДА ВЫБОР
//#Вставка
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|					ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Приоритет
//#КонецВставки
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Приоритет
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Приоритет
	|			КОНЕЦ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания)
	|			ТОГДА 0
	|		КОГДА ВЫБОР
//#Вставка
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ЕСТЬ NULL
	|					ТОГДА бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента.Приоритет
//#КонецВставки
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаказКлиента).Приоритет
	|				КОГДА ТоварыКОтгрузке.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
	|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузке.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Приоритет
	|			КОНЕЦ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.Приоритеты КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания УБЫВ)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КартинкаПриоритет
	|ИЗ
	|	ВтНовыеОрдера КАК ТоварыКОтгрузке
//#Вставка
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов КАК бг_ДополнительныеСведенияПоЗаказамКлиентов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОригиналовПервичныхДокументов КАК СостоянияОригиналовПервичныхДокументов
	|			ПО (СостоянияОригиналовПервичныхДокументов.Владелец = бг_ДополнительныеСведенияПоЗаказамКлиентов.РасходныйОрдер
	|					И СостоянияОригиналовПервичныхДокументов.ПервичныйДокумент = ""бг_НарядЗадание""
	|					И НЕ СостоянияОригиналовПервичныхДокументов.Владелец ЕСТЬ NULL
	|					И СостоянияОригиналовПервичныхДокументов.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияОригиналовПервичныхДокументов.ФормаНапечатана))
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_СогласованиеЗаказовКлиентов КАК бг_СогласованиеЗаказовКлиентов
	|			ПО (бг_СогласованиеЗаказовКлиентов.ЗаказКлиента = бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента)
	|		ПО (ТоварыКОтгрузке.ДокументОтгрузки = бг_ДополнительныеСведенияПоЗаказамКлиентов.ЗаказКлиента)";
//#КонецВставки

КонецФункции

&НаСервере
Процедура бг_ДобавитьЭлементыВСписокРаспоряжений()
	
	Элементы.СписокРаспоряженияНаОформлениеСостояниеВыполнения.Видимость = Ложь;
	
	ТипЭлемента = Тип("ПолеФормы");
	
	ГруппаОтборы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
			ЭтотОбъект,
			"бг_Отборы",
			ЭтаФорма,,
			Элементы.ГруппаБыстрыеОтборы);
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СостоянияОригиналовПервичныхДокументов) Тогда 
		
		СостояниеПечатиНарядЗадания = Элементы.Добавить(
			"бг_СостояниеПечатиНарядЗадания",
			ТипЭлемента,
			Элементы["бг_Отборы"]);
		СостояниеПечатиНарядЗадания.ПутьКДанным = "бг_СостояниеПечатиНарядЗадания";
		СостояниеПечатиНарядЗадания.Вид = ВидПоляФормы.ПолеВвода; 	
		СостояниеПечатиНарядЗадания.РежимВыбораИзСписка = Истина;
		СостояниеПечатиНарядЗадания.КнопкаОчистки = Истина;
		СостояниеПечатиНарядЗадания.Заголовок = НСтр("ru='Состояние печати наряд-задания'");
		СостояниеПечатиНарядЗадания.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		СостояниеПечатиНарядЗадания.ПодсказкаВвода = НСтр("ru='Состояние печати наряд-задания'");
		СостояниеПечатиНарядЗадания.Ширина = 23;
		СостояниеПечатиНарядЗадания.РастягиватьПоГоризонтали = Ложь; 
		СостояниеПечатиНарядЗадания.УстановитьДействие("ПриИзменении", "бг_СостояниеПечатиНарядЗаданияПриИзменении");
	
		КолонкаНарядЗаданиеРаспечатано = Элементы.Вставить(
			"бг_НарядЗаданиеРаспечатано",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		КолонкаНарядЗаданиеРаспечатано.Вид = ВидПоляФормы.ПолеКартинки;
		КолонкаНарядЗаданиеРаспечатано.КартинкаЗначений = БиблиотекаКартинок.РасхожденияПоОтгрузке;
		КолонкаНарядЗаданиеРаспечатано.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаНарядЗаданиеРаспечатано.Подсказка = НСтр("ru='Состояние печати наряд-задания'");
		КолонкаНарядЗаданиеРаспечатано.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_НарядЗаданиеРаспечатано";
		КолонкаНарядЗаданиеРаспечатано.КартинкаШапки = БиблиотекаКартинок.Печать;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов) Тогда
		
		СостояниеРасхожденияСуммыЗаказаИРеализации = Элементы.Добавить(
			"бг_СостояниеРасхожденияСуммыЗаказаИРеализации",
			ТипЭлемента,
			Элементы["бг_Отборы"]);
		СостояниеРасхожденияСуммыЗаказаИРеализации.ПутьКДанным = "бг_СостояниеРасхожденияСуммыЗаказаИРеализации";
		СостояниеРасхожденияСуммыЗаказаИРеализации.Вид = ВидПоляФормы.ПолеВвода;
		СостояниеРасхожденияСуммыЗаказаИРеализации.РежимВыбораИзСписка = Истина;
		СостояниеРасхожденияСуммыЗаказаИРеализации.КнопкаОчистки = Истина;
		СостояниеРасхожденияСуммыЗаказаИРеализации.Заголовок = НСтр("ru='Состояние соответствия суммы заказа и реализации'");
		СостояниеРасхожденияСуммыЗаказаИРеализации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		СостояниеРасхожденияСуммыЗаказаИРеализации.ПодсказкаВвода = НСтр("ru='Состояние соответствия суммы заказа и реализации'");
		СостояниеРасхожденияСуммыЗаказаИРеализации.Ширина = 23;
		СостояниеРасхожденияСуммыЗаказаИРеализации.РастягиватьПоГоризонтали = Ложь;
		СостояниеРасхожденияСуммыЗаказаИРеализации.УстановитьДействие("ПриИзменении",
			"бг_СостояниеРасхожденияСуммыЗаказаИРеализацииПриИзменении");

		ДатаОтгрузки = Элементы.Добавить(
			"бг_ДатаОтгрузкиОтбор",
			ТипЭлемента,
			Элементы["бг_Отборы"]);
		ДатаОтгрузки.ПутьКДанным = "бг_ДатаОтгрузкиОтбор";
		ДатаОтгрузки.Вид = ВидПоляФормы.ПолеВвода;
		ДатаОтгрузки.КнопкаОчистки = Истина;
		ДатаОтгрузки.Заголовок = НСтр("ru='Дата отгрузки'");
		ДатаОтгрузки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ДатаОтгрузки.ПодсказкаВвода = НСтр("ru='Дата отгрузки'");
		ДатаОтгрузки.Ширина = 10;
		ДатаОтгрузки.РастягиватьПоГоризонтали = Ложь;
		ДатаОтгрузки.УстановитьДействие("ПриИзменении",
			"бг_ДатаОтгрузкиПриИзменении");
		
		КолонкаСуммаЗаказаИРеализацииСовпадают = Элементы.Вставить(
			"бг_СуммаЗаказаИРеализацииСовпадают",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента);
		КолонкаСуммаЗаказаИРеализацииСовпадают.Вид = ВидПоляФормы.ПолеКартинки;
		КолонкаСуммаЗаказаИРеализацииСовпадают.КартинкаЗначений = БиблиотекаКартинок.СтатусыВыполненияЭтаповЗакрытияМесяца;
		КолонкаСуммаЗаказаИРеализацииСовпадают.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		КолонкаСуммаЗаказаИРеализацииСовпадают.Подсказка = НСтр("ru='Сумма заказа и реализации совпадают'");
		КолонкаСуммаЗаказаИРеализацииСовпадают.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_СуммаЗаказаИРеализацииСовпадают";
		КолонкаСуммаЗаказаИРеализацииСовпадают.КартинкаШапки = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
		
		КолонкаПроцентСборки = Элементы.Вставить(
			"бг_ПроцентСборки",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		КолонкаПроцентСборки.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаПроцентСборки.Заголовок = НСтр("ru='% сборки'");
		КолонкаПроцентСборки.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_ПроцентСборки"; 
		КолонкаПроцентСборки.Ширина = 6;
		КолонкаПроцентСборки.РастягиватьПоГоризонтали = Ложь;
		
		КолонкаДатаОтгрузки = Элементы.Вставить(
			"бг_ДатаОтгрузки",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента);
		КолонкаДатаОтгрузки.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаДатаОтгрузки.Заголовок = НСтр("ru='Дата отгрузки'");
		КолонкаДатаОтгрузки.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_ДатаОтгрузки";
		КолонкаДатаОтгрузки.Ширина = 6;
		КолонкаДатаОтгрузки.РастягиватьПоГоризонтали = Ложь;
		
		ЭтаФорма.СписокРаспоряженияНаОформление.УстановитьОбязательноеИспользование("бг_ДатаОтгрузки", Истина);

		КолонкаМаршрутныйЛист = Элементы.Вставить(
			"бг_МаршрутныйЛист",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		КолонкаМаршрутныйЛист.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаМаршрутныйЛист.Заголовок = НСтр("ru='Маршрутный лист'");
		КолонкаМаршрутныйЛист.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_МаршрутныйЛист";
		КолонкаМаршрутныйЛист.Ширина = 13;
		КолонкаМаршрутныйЛист.РастягиватьПоГоризонтали = Ложь;
		
		КолонкаНомерРТиУ = Элементы.Вставить(
			"бг_НомерРТиУ",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		КолонкаНомерРТиУ.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаНомерРТиУ.Заголовок = НСтр("ru='Номер РТиУ'");
		КолонкаНомерРТиУ.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_НомерРТиУ";
		КолонкаНомерРТиУ.Ширина = 10;
		КолонкаНомерРТиУ.РастягиватьПоГоризонтали = Ложь;
		
		КолонкаРеализацияТоваровУслуг = Элементы.Вставить(
			"бг_РеализацияТоваровУслуг",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеМенеджер); 
		КолонкаРеализацияТоваровУслуг.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаРеализацияТоваровУслуг.Заголовок = НСтр("ru='РТиУ'");
		КолонкаРеализацияТоваровУслуг.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_РеализацияТоваровУслуг";
	    КолонкаРеализацияТоваровУслуг.Ширина = 10;
		КолонкаРеализацияТоваровУслуг.РастягиватьПоГоризонтали = Ложь;
	    ЭтаФорма.СписокРаспоряженияНаОформление.УстановитьОбязательноеИспользование("бг_РеализацияТоваровУслуг", Истина);
		
		КолонкаНомерТТН = Элементы.Вставить(
			"бг_НомерТТН",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		КолонкаНомерТТН.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаНомерТТН.Заголовок = НСтр("ru='Номер ТТН'");
		КолонкаНомерТТН.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_НомерТТН";
		КолонкаНомерТТН.Ширина = 10;
		КолонкаНомерТТН.РастягиватьПоГоризонтали = Ложь;
		
		КолонкаСтатусТТНИсходящаяЕГАИС = Элементы.Вставить(
			"бг_СтатусТТНИсходящаяЕГАИС",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
			КолонкаСтатусТТНИсходящаяЕГАИС.Вид = ВидПоляФормы.ПолеНадписи;
			КолонкаСтатусТТНИсходящаяЕГАИС.Заголовок = НСтр("ru='Статус ТТН'");
		КолонкаСтатусТТНИсходящаяЕГАИС.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_СтатусТТНИсходящаяЕГАИС";
		КолонкаСтатусТТНИсходящаяЕГАИС.Ширина = 10;
		КолонкаСтатусТТНИсходящаяЕГАИС.РастягиватьПоГоризонтали = Ложь;
		
		КолонкаТТНИсходящаяЕГАИС = Элементы.Вставить(
			"бг_ТТНИсходящаяЕГАИС",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеМенеджер); 
		КолонкаТТНИсходящаяЕГАИС.Вид = ВидПоляФормы.ПолеНадписи;
		КолонкаТТНИсходящаяЕГАИС.Заголовок = НСтр("ru='ТТН'");
		КолонкаТТНИсходящаяЕГАИС.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_ТТНИсходящаяЕГАИС";
		КолонкаТТНИсходящаяЕГАИС.Ширина = 10;
		КолонкаТТНИсходящаяЕГАИС.РастягиватьПоГоризонтали = Ложь;
		
		ЭтаФорма.СписокРаспоряженияНаОформление.УстановитьОбязательноеИспользование("бг_ТТНИсходящаяЕГАИС", Истина);
		
		бг_НомерОтражениеФакта = Элементы.Вставить(
			"бг_НомерОтражениеФакта",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		бг_НомерОтражениеФакта.Вид = ВидПоляФормы.ПолеНадписи;
		бг_НомерОтражениеФакта.Заголовок = НСтр("ru='Номер отражения факта'");
		бг_НомерОтражениеФакта.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_НомерОтражениеФакта";
		бг_НомерОтражениеФакта.Ширина = 10;
		бг_НомерОтражениеФакта.РастягиватьПоГоризонтали = Ложь;
		
		бг_РасходныйОрдерНомер = Элементы.Вставить(
			"бг_РасходныйОрдерНомер",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		бг_РасходныйОрдерНомер.Вид = ВидПоляФормы.ПолеНадписи;
		бг_РасходныйОрдерНомер.Заголовок = НСтр("ru='Номер расходного ордера'");
		бг_РасходныйОрдерНомер.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_РасходныйОрдерНомер";
		бг_РасходныйОрдерНомер.Ширина = 10;
		бг_РасходныйОрдерНомер.РастягиватьПоГоризонтали = Ложь;
		
		бг_РасходныйОрдерНаТовары = Элементы.Вставить(
			"бг_РасходныйОрдерНаТовары",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеМенеджер); 
		бг_РасходныйОрдерНаТовары.Вид = ВидПоляФормы.ПолеНадписи;
		бг_РасходныйОрдерНаТовары.Заголовок = НСтр("ru='Расходный ордер'");
		бг_РасходныйОрдерНаТовары.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_РасходныйОрдерНаТовары";
		бг_РасходныйОрдерНаТовары.Ширина = 10;
		бг_РасходныйОрдерНаТовары.РастягиватьПоГоризонтали = Ложь;
		
		ЭтаФорма.СписокРаспоряженияНаОформление.УстановитьОбязательноеИспользование("бг_РасходныйОрдерНаТовары", Истина);
		
		бг_СтатусSolvo = Элементы.Вставить(
			"бг_СтатусSolvo",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		бг_СтатусSolvo.Вид = ВидПоляФормы.ПолеНадписи;
		бг_СтатусSolvo.Заголовок = НСтр("ru='Статус - Solvo'");
		бг_СтатусSolvo.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_СтатусSolvo";
		бг_СтатусSolvo.Ширина = 10;
		бг_СтатусSolvo.РастягиватьПоГоризонтали = Ложь;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.бг_СогласованиеЗаказовКлиентов) Тогда
		
		бг_Согласование = Элементы.Вставить(
			"бг_Согласование",
			ТипЭлемента,
			Элементы.СписокРаспоряженияНаОформление,
			Элементы.СписокРаспоряженияНаОформлениеСуммаДокумента); 
		бг_Согласование.Вид = ВидПоляФормы.ПолеНадписи;
		бг_Согласование.Заголовок = НСтр("ru='Согласование'");
		бг_Согласование.ПутьКДанным = "СписокРаспоряженияНаОформление.бг_Согласование";
		бг_Согласование.Ширина = 10;
		бг_Согласование.РастягиватьПоГоризонтали = Ложь;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура бг_СостояниеПечатиНарядЗаданияПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(ЭтотОбъект.бг_СостояниеПечатиНарядЗадания), Число(ЭтотОбъект.бг_СостояниеПечатиНарядЗадания), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"бг_НарядЗаданиеРаспечатано",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ЭтотОбъект.бг_СостояниеПечатиНарядЗадания));
		
КонецПроцедуры

&НаКлиенте
Процедура бг_СостояниеРасхожденияСуммыЗаказаИРеализацииПриИзменении(Элемент)
	
	Состояние = ?(ЗначениеЗаполнено(
		ЭтотОбъект.бг_СостояниеРасхожденияСуммыЗаказаИРеализации),
		Число(ЭтотОбъект.бг_СостояниеРасхожденияСуммыЗаказаИРеализации), 0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"бг_СуммаЗаказаИРеализацииСовпадают",
		Состояние,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ЭтотОбъект.бг_СостояниеРасхожденияСуммыЗаказаИРеализации));
		
КонецПроцедуры

&НаКлиенте
Процедура бг_ДатаОтгрузкиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРаспоряженияНаОформление,
		"бг_ДатаОтгрузки",
		ЭтотОбъект.бг_ДатаОтгрузкиОтбор,
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(ЭтотОбъект.бг_ДатаОтгрузкиОтбор));
		
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьСписокВыбораПоСостояниюПечати()
	
	СписокВыбора = Элементы.бг_СостояниеПечатиНарядЗадания.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("0", НСтр("ru = 'Наряд-задание распечатано'"), Ложь, БиблиотекаКартинок.ОформленаНакладная);
	СписокВыбора.Добавить("4", НСтр("ru = 'Необходимо распечатать наряд-задание'"), Ложь, БиблиотекаКартинок.ПустаяКартинка);
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьСписокВыбораСостояниеРасхожденияСуммыЗаказаИРеализации()
	
	СписокВыбора = Элементы["бг_СостояниеРасхожденияСуммыЗаказаИРеализации"].СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("4", НСтр("ru = 'Отличается сумма заказа и реализации'"),
		Ложь, БиблиотекаКартинок.ВосклицательныйЗнакКрасный);
	СписокВыбора.Добавить("1", НСтр("ru = 'Сумма заказа и реализации совпадают'"),
		Ложь, БиблиотекаКартинок.ОформленаНакладная);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура бг_ДобавитьКомандуПеренестиДатуОтгрузки()
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов) Тогда
	
		ГруппаКоманд = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
			ЭтотОбъект,
			"бг_ГруппаДействий",
			Элементы.СписокРаспоряженияНаОформление.КоманднаяПанель,
			ВидГруппыФормы.Подменю);
			
		ГруппаКоманд.Заголовок = НСтр("ru= 'Действия'");
		ГруппаКоманд.Картинка = БиблиотекаКартинок.ОформитьПродажу;
	
		КнопкаПеренестиДатуОтгрузки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
			ЭтотОбъект,
			"бг_ПеренестиДатуОтгрузки",
			Элементы["бг_ГруппаДействий"],
			НСтр("ru = 'Перенести дату отгрузки'"),
			"бг_ПеренестиДатуОтгрузки",
			"бг_ПеренестиДатуОтгрузки",,
			ВидКнопкиФормы.КнопкаКоманднойПанели);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьКомандыЕГАИС()
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ТТНИсходящаяЕГАИС) Тогда
	
		ГруппаКоманд = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
			ЭтотОбъект,
			"бг_ГруппаДействияЕГАИС",
			Элементы.СписокРаспоряженияНаОформление.КоманднаяПанель,
			ВидГруппыФормы.Подменю);
			
		ГруппаКоманд.Заголовок = НСтр("ru= 'ЕГАИС'");
		ГруппаКоманд.Картинка = БиблиотекаКартинок.ОформитьПродажу;
	
		КнопкаОформитьТТНИсходящаяЕГАИС = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
			ЭтотОбъект,
			"бг_ОформитьТТНИсходящаяЕГАИС",
			Элементы.бг_ГруппаДействияЕГАИС,
			НСтр("ru = 'Оформить ТТН'"),
			"бг_ОформитьТТНИсходящаяЕГАИС",
			"бг_ОформитьТТНИсходящаяЕГАИС",
			,
			ВидКнопкиФормы.КнопкаКоманднойПанели);

		КнопкаОформитьТТНИсходящаяЕГАИС.Картинка = БиблиотекаКартинок.ОформитьПоРаспоряжению;
    	
		КнопкаПередатьТТНИсходящаяЕГАИС = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
			ЭтотОбъект,
			"бг_ПередатьТТНИсходящаяЕГАИС",
			Элементы.бг_ГруппаДействияЕГАИС,
			НСтр("ru = 'Передать данные'"),
			"бг_ПередатьТТНИсходящаяЕГАИС",
			"бг_ПередатьТТНИсходящаяЕГАИС",
			,
			ВидКнопкиФормы.КнопкаКоманднойПанели);
		
		КнопкаПередатьТТНИсходящаяЕГАИС.Картинка = БиблиотекаКартинок.ИсходящийЗапросГосИС;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьКомандуПечатиНарядЗаданиеПоРасходномуОрдеру()
	
	ИмяКоманды       = "бг_ПечатьНарядЗаданиеПоРасходномуОрдеру";
	ЗаголовокКоманды = НСтр("ru = 'Наряд-задание'");
	
	КнопкаКомандаПечать = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект, ИмяКоманды,
		Элементы.СписокРаспоряженияНаОформлениеКоманднаяПанель,	
		ЗаголовокКоманды,
		ИмяКоманды,
		ИмяКоманды,
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);
		
	КнопкаКомандаПечать.Отображение = ОтображениеКнопки.КартинкаИТекст;	
	КнопкаКомандаПечать.Картинка = БиблиотекаКартинок.Печать;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьКомандуПересчитатьСкидкиВРеализацииТоваров()
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов) Тогда
	
		ПересчитатьСкидкиВРеализацииТоваров = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
			ЭтотОбъект,
			"бг_ПересчитатьСкидкиВРеализацииТоваров",
			Элементы["бг_ГруппаДействий"],
			НСтр("ru = 'Пересчитать скидки в реализации товаров'"),
			"бг_ПересчитатьСкидкиВРеализацииТоваров",
			"бг_ПересчитатьСкидкиВРеализацииТоваров",,
			ВидКнопкиФормы.КнопкаКоманднойПанели);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_УстановитьВидимостьКоманд()
	
	Элементы.ПодменюПечать.Видимость = Ложь;
	Элементы.ПодменюСоздатьНаОсновании.Видимость = Ложь;
		
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьРеквизиты()
	
	ДобавляемыеРеквизиты = Новый Массив;

	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_СостояниеПечатиНарядЗадания",
			ОбщегоНазначения.ОписаниеТипаСтрока(50),
			, // Путь
			НСтр("ru='Состояние печати наряд-задания'"),
			Ложь));

	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_СостояниеРасхожденияСуммыЗаказаИРеализации",
			ОбщегоНазначения.ОписаниеТипаСтрока(50),,
			НСтр("ru='Состояние соответствия суммы заказа и реализации'"),
			Ложь));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ДатаОтгрузкиОтбор",
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),,
			НСтр("ru='Дата отгрузки'"),
			Ложь));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_Руководитель",
			Новый ОписаниеТипов("СправочникСсылка.ОтветственныеЛицаОрганизаций"),,
			НСтр("ru='Руководитель'"),
			Ложь));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ГлавныйБухгалтер",
			Новый ОписаниеТипов("СправочникСсылка.ОтветственныеЛицаОрганизаций"),,
			НСтр("ru='Главный бухгалтер'"),
			Ложь)); 
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_Отпустил",
			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"),,
			НСтр("ru='Отпустил'"),
			Ложь));			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ОтпустилДолжность",
			ОбщегоНазначения.ОписаниеТипаСтрока(500),,
			НСтр("ru='Отпустил должность'"),
			Ложь));		
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_Автор",
			Новый ОписаниеТипов("СправочникСсылка.Пользователи"),,
			НСтр("ru='Автор'"),
			Ложь));	
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ДоверенностьНомер",
			ОбщегоНазначения.ОписаниеТипаСтрока(15),,
			НСтр("ru='Номер'"),
			Ложь));
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ДоверенностьДата",
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),,
			НСтр("ru='Дата'"),
			Ложь));
		
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ДоверенностьВыдана",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),,
			НСтр("ru='Кем выдана'"),
			Ложь));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ДоверенностьЛицо",
			ОбщегоНазначения.ОписаниеТипаСтрока(100),,
			НСтр("ru='Кому выдана'"),
			Ложь));
			
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ГрупповоеСозданиеТТНИсходящуюЕГАИС
 
&НаКлиенте
Процедура бг_ОформитьТТНИсходящуюЕГАИС()

	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;
	
	СписокДокументов = Новый Массив; 
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		СписокДокументов.Добавить(НайденнаяСтрока);
	КонецЦикла;
	
	Если СписокДокументов.Количество() Тогда
		бг_ОформитьТТНИсходящуюЕГАИСНаСервере(СписокДокументов)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ОформитьТТНИсходящуюЕГАИСНаСервере(Распоряжения)
    	
	Для Каждого СтрокаРаспоряжение Из Распоряжения Цикл 
		
		ЗапрещеноСоздатьТТНИсходящаяЕГАИС = Ложь;
		
		Если Не ЗначениеЗаполнено(СтрокаРаспоряжение.бг_РеализацияТоваровУслуг) Тогда
			ТекстОшибки = СтрШаблон((НСтр("ru = 'Не создан документ ""Реализация товаров и услуг"" для заказа номер %1. 
						|Создание ТТН ЕГАИС (исходящая) невозможно'")),
						СтрокаРаспоряжение.Номер);		
			ЗапрещеноСоздатьТТНИсходящаяЕГАИС = Истина;	
		ИначеЕсли ЗначениеЗаполнено(СтрокаРаспоряжение.бг_ТТНИсходящаяЕГАИС) Тогда 
			ТекстОшибки = СтрШаблон((НСтр("ru = 'ТТН ЕГАИС (исходящая) для документа ""%1"" уже создан'")),
						СтрокаРаспоряжение.бг_РеализацияТоваровУслуг);
			ЗапрещеноСоздатьТТНИсходящаяЕГАИС = Истина;	
		КонецЕсли;
		
		Если ЗапрещеноСоздатьТТНИсходящаяЕГАИС Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, СтрокаРаспоряжение.Распоряжение); 
			Продолжить;
		КонецЕсли;	
		
		Попытка
			ПродажиСервер.бг_СоздатьДокументТТНИсходящаяЕГАИС(СтрокаРаспоряжение.бг_РеализацияТоваровУслуг);					
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки)
		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры
 
#КонецОбласти

#Область ПередатьДанныеЕГАИС

&НаКлиенте
Процедура бг_ПередатьДанныеЕГАИС(СписокДокументов)
	
	СписокТТНКПередаче = бг_СписокТТНКПередаче(СписокДокументов);
	
	Если СписокТТНКПередаче = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Команда не может быть выполнена для указанных документов.'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТТН Из СписокТТНКПередаче Цикл
		ИнтеграцияЕГАИСКлиент.ПодготовитьКПередаче(
			СтрокаТТН.Документ,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			ЭтотОбъект.УникальныйИдентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция бг_СписокТТНКПередаче(СписокДокументов)
		
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	(СтатусыДокументовЕГАИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные)
	|		ИЛИ СтатусыДокументовЕГАИС.ДальнейшееДействие2 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные)
	|		ИЛИ СтатусыДокументовЕГАИС.ДальнейшееДействие3 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные))
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик)
	|	И СтатусыДокументовЕГАИС.Документ.Проведен
	|	И НЕ СтатусыДокументовЕГАИС.Документ.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.Документ В (&СписокДокументов)";

	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);

	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Результат.Пустой() Тогда
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат.Выгрузить());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаспоряженияДляПечатиРасходныхОрдеровНаТовары

&НаСервере
Функция бг_РасходныеОрдераНаТоварыНаСервере(Распоряжения)
	
	ДокументыОтгрузки = ОбщегоНазначения.ВыгрузитьКолонку(Распоряжения, "Ссылка", Истина);	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТоварыКОтгрузке.Регистратор КАК РасходныйОрдерНаТовары
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|ГДЕ
		|	ТоварыКОтгрузке.ДокументОтгрузки В(&ДокументыОтгрузки)
		|	И ТИПЗНАЧЕНИЯ(ТоварыКОтгрузке.Регистратор) = ТИП(Документ.РасходныйОрдерНаТовары)";
	
	Запрос.УстановитьПараметр("ДокументыОтгрузки", ДокументыОтгрузки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат ОбщегоНазначения.ВыгрузитьКолонку(РезультатЗапроса.Выгрузить(), "РасходныйОрдерНаТовары")
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДанныеТранспортнойИнформации

&НаКлиенте
Функция бг_ДанныеТранспортнойИнформации()
	
	ДанныеТранспортнойИнформации = Неопределено;
	
	ВыделенныеСтроки = Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки;

	СписокМаршрутныхЛистов = Новый Массив; 
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		НайденнаяСтрока = Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(Строка);
		СписокМаршрутныхЛистов.Добавить(НайденнаяСтрока.бг_МаршрутныйЛист);
	КонецЦикла;
	
	Если СписокМаршрутныхЛистов.Количество() Тогда
		ДанныеТранспортнойИнформации = бг_ДанныеТранспортнойИнформацииНаСервере(СписокМаршрутныхЛистов);
	КонецЕсли;
	
	Возврат ДанныеТранспортнойИнформации;
	
КонецФункции

&НаСервере
Функция бг_ДанныеТранспортнойИнформацииНаСервере(СписокМаршрутныхЛистов)
	
	ДанныеТранспортнойИнформации = Неопределено;
	
	СписокМаршрутныхЛистов = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(
		СписокМаршрутныхЛистов);
		
	Если СписокМаршрутныхЛистов.Количество() = 1 Тогда
		
		ЗаказыКлиентов = Документы.битМаршрутныйЛист.ЗаказыКлиентов(СписокМаршрутныхЛистов[0]);
		
		Если ЗаказыКлиентов.Количество() > 0 Тогда
			
			ДанныеТранспортнойИнформации = РегистрыСведений.бг_ТранспортнаяИнформация.ТранспортнаяИнформация(
				ЗаказыКлиентов[0]);
		
			Возврат ДанныеТранспортнойИнформации;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДанныеТранспортнойИнформации;
	
КонецФункции

#КонецОбласти

#Область ПереносДатыОтгрузки

&НаСервере
Функция МожноИзменитьДатуОтгрузки(ТТНИсходящаяЕГАИС)
	
	ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ТТНИсходящаяЕГАИС);
	
	СтатусыОтмены = Документы.ТТНИсходящаяЕГАИС.КонечныеСтатусы();
	
	Если ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик
		Или ТекущееСостояние.Статус = СтатусыОтмены[0]
		Или ТекущееСостояние.Статус = СтатусыОтмены[1] Тогда
		Возврат Истина;
	Иначе
		
		ТекстОшибки = СтрШаблон(НСтр(
			"ru = 'Перенос даты отгрузки невозможен. Есть проведенная ТТН в статусе - %1'"), ТекущееСостояние.Статус);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ТТНИсходящаяЕГАИС);
		
		Возврат Ложь;
		
	КонецЕсли;
	


КонецФункции

&НаСервере
Процедура бг_ПеренестиДатуОтгрузкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВозвращенноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДополнительныеПараметры, "Дата");
	
	Для Каждого ДокументСсылка Из ДополнительныеПараметры Цикл
		
		ТипДокумента = ТипЗнч(ДокументСсылка);
		
		ДатаДокумента = ДатаДокументов.Получить(ДокументСсылка);
		
		Если ТипДокумента = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			
			ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
					
					ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
					
					ДокументОбъект.ПометкаУдаления = Истина;
					
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Исключение
						ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
							НСтр("ru = 'Удаление ТТН при групповом переносе даты отгрузки (АРМ - Накладные к оформлению)'"),
							УровеньЖурналаРегистрации.Ошибка,,,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
						
					Продолжить;
				
		КонецЕсли;
			
		Если ДатаДокумента = ВозвращенноеЗначение.ДатаОтгрузки Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Если ТипДокумента <> Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ДокументОбъект.Дата = ВозвращенноеЗначение.ДатаОтгрузки;
		КонецЕсли;
		
		Если ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента")
			Или ТипДокумента = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ДокументОбъект.ДатаОтгрузки = ВозвращенноеЗначение.ДатаОтгрузки;
		КонецЕсли;
		
		Если ДокументОбъект.Проведен Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
					НСтр("ru = 'Групповой перенос даты отгрузки в документах (АРМ - Накладные к оформлению)'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура бг_ПересчитатьСкидкиВРеализацииТоваровСервер(СписокДокументов)
	
	Для Каждого ДокументСсылка Из СписокДокументов Цикл
		Документы.РеализацияТоваровУслуг.бг_ПересчитатьСкидкиВРеализацииТоваров(ДокументСсылка,, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура бг_ОтключитьПолнотекстовыйПоискСписка()

 	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ОтключитьПолнотекстовыйПоискСпискаФормы(
		Элементы.СписокРаспоряженияНаОформление);
	
КонецПроцедуры

#КонецОбласти


