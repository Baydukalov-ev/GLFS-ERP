
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	бг_ДобавитьРеквизитТипВнешнейСкладскойСистемы();
	бг_ДобавитьРеквизитыMobileSmarts();
	бг_ДобавитьЭлементыMobileSmarts();
	бг_УстановитьВидимостьРеквизитовMobileSmarts();
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

&НаСервере
&После("СкладПомещениеПриИзмененииСервер")
Процедура бг_СкладПомещениеПриИзмененииСервер()
	
	бг_ОбновитьРеквизитыMobileSmartsПоСкладу();
	бг_УстановитьВидимостьРеквизитовMobileSmarts();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкиОрдеров

&НаСервере
&ИзменениеИКонтроль("СоздатьОрдераСервер")
Процедура бг_СоздатьОрдераСервер()
	Если НЕ НазначитьЗонуОтгрузки Тогда
		ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ПустаяСсылка();
	КонецЕсли;

	Получатели = Новый Соответствие;
	ЗаданияНаПеревозку = Новый Массив;

	СтруктураПараметровСозданияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
	
#Вставка
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить(
		"бг_Исполнитель",
		ЭтотОбъект["бг_Исполнитель"]);
		
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить(
		"бг_КонтролироватьСерии",
		ЭтотОбъект["бг_КонтролироватьСерии"]);
		
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить(
		"бг_РазрешитьПараллельнуюСборку",
		ЭтотОбъект["бг_РазрешитьПараллельнуюСборку"]);
		
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить(
		"бг_ОбязательнаяАгрегация",
		ЭтотОбъект["бг_ОбязательнаяАгрегация"]);
#КонецВставки
	
	СтруктураПараметровСозданияРасходныхОрдеров.Склад = Склад;
	Если ПоОдномуПомещению Тогда
		СтруктураПараметровСозданияРасходныхОрдеров.Помещение = ПомещениеДляСозданияРасходныхОрдеров;
	КонецЕсли;	
	СтруктураПараметровСозданияРасходныхОрдеров.ЗонаОтгрузки = ЗонаОтгрузки;

	Если ПоВсемРаспоряжениям = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйЗапрос.Получатель КАК Получатель
		|ИЗ
		|	(ВЫБРАТЬ
		|		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
		|		РаспоряженияКОтгрузке.Получатель КАК Получатель,
		|		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
		|		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
		|		РаспоряженияКОтгрузке.Назначение КАК Назначение,
		|		РаспоряженияКОтгрузке.Серия КАК Серия
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК РаспоряженияКОтгрузке
		|	ГДЕ
		|		(&ОформлятьСначалаНакладные
		|					И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
		|				ИЛИ НЕ &ОформлятьСначалаНакладные
		|					И РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
		|				ИЛИ РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
		|				ИЛИ РаспоряженияКОтгрузке.СобраноОстаток <> 0)) КАК ВложенныйЗапрос";

		ДатаОтгрузкиДляЗапроса = ?(ЗначениеЗаполнено(ДатаОтгрузки),
		КонецДня(ДатаОтгрузки) + 1,
		ДатаОтгрузки);

		ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить()
		= Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;

		Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные);
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("ДатаОтгрузки", ДатаОтгрузкиДляЗапроса);

		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			Получатели.Вставить(Выборка.Получатель, Новый Массив);
		КонецЦикла;
	Иначе
		Для Каждого СтрИД Из Элементы.РаспоряженияНаОтгрузку.ВыделенныеСтроки Цикл

			СтрТабл = РаспоряженияНаОтгрузку.НайтиПоИдентификатору(СтрИД);

			Если СтрТабл = Неопределено Тогда
				ТекстПредупреждения = НСтр("ru = 'Выберите распоряжение на отгрузку товаров.';
				|en = 'Select a goods shipment reference.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
				Возврат;
			КонецЕсли;

			Если ТипЗнч(СтрТабл.Распоряжение) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
				СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = СтрТабл.Распоряжение;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
				|	ЗаданиеНаПеревозкуРаспоряжения.ПолучательОтправитель КАК Получатель
				|ИЗ
				|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
				|ГДЕ
				|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	Получатель";	
				Запрос.УстановитьПараметр("Ссылка", СтрТабл.Распоряжение);

				Выборка =  Запрос.Выполнить().Выбрать();
				Пока Выборка.СледующийПоЗначениюПоля("Получатель") Цикл
					СтруктураПараметровСозданияРасходныхОрдеров.Получатель = Выборка.Получатель;
					Пока Выборка.Следующий() Цикл
						СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку.Добавить(Выборка.Распоряжение);	
					КонецЦикла;
					СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров);
				КонецЦикла;

				Если ОтображениеДеталейОтгрузка Тогда
					Получатели.Очистить();
					Прервать;
				КонецЕсли;
			Иначе
				МассивРаспоряжений = Получатели.Получить(СтрТабл.Получатель);
				Если МассивРаспоряжений = Неопределено Тогда
					МассивРаспоряжений = Новый Массив;
					Получатели.Вставить(СтрТабл.Получатель, МассивРаспоряжений);
				КонецЕсли;
				МассивРаспоряжений.Добавить(СтрТабл.Распоряжение);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;

	Если Получатели.Количество() > 0 Тогда

		Если ОтображениеДеталейОтгрузка Тогда
			СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = ТекущееЗаданиеНаПеревозкуОтгрузка;
		Иначе
			СтруктураПараметровСозданияРасходныхОрдеров.ЗаданиеНаПеревозку = Неопределено;
		КонецЕсли;

		Для Каждого Получатель Из Получатели Цикл
			СтруктураПараметровСозданияРасходныхОрдеров.Получатель = Получатель.Ключ;
			СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку = Получатель.Значение;		
			СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров);
		КонецЦикла;	
	КонецЕсли;

	УстановитьОтборыВОсновныхСписках();

	Если ФильтрОрдеров = "ПоТекущемуРаспоряжению" Тогда
		Если ТипЗнч(ТекущееРаспоряжениеНаОтгрузку) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка", Неопределено,,,Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "ЗаданиеНаПеревозку", ТекущееРаспоряжениеНаОтгрузку,,,Истина);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
			|ГДЕ
			|	(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
			|			ИЛИ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ЗаданиеНаПеревозку = &Распоряжение)";
			Запрос.УстановитьПараметр("Распоряжение", ТекущееРаспоряжениеНаОтгрузку);
			РасходныеОрдера = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "Ссылка", РасходныеОрдера, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ОрдераВРаботе, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура бг_ДобавитьРеквизитТипВнешнейСкладскойСистемы()

	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ТипВнешнейСкладскойСистемы",
			Новый ОписаниеТипов("ПеречислениеСсылка.бг_ТипыВнешнихСкладскихСистем")));

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);		
			
КонецПроцедуры

#Область MobileSmarts

&НаСервере
Процедура бг_ДобавитьРеквизитыMobileSmarts()

	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_Исполнитель",
			Метаданные.Документы.РасходныйОрдерНаТовары.Реквизиты.бг_Исполнитель.Тип,
			, // Путь
			Метаданные.Документы.РасходныйОрдерНаТовары.Реквизиты.бг_Исполнитель.Синоним,
			Истина));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_КонтролироватьСерии",
			Новый ОписаниеТипов("Булево"),
			, // Путь
			Метаданные.Документы.РасходныйОрдерНаТовары.Реквизиты.бг_КонтролироватьСерии.Синоним,
			Истина));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_РазрешитьПараллельнуюСборку",
			Новый ОписаниеТипов("Булево"),
			, // Путь
			Метаданные.Документы.РасходныйОрдерНаТовары.Реквизиты.бг_РазрешитьПараллельнуюСборку.Синоним,
			Истина));
			
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_ОбязательнаяАгрегация",
			Новый ОписаниеТипов("Булево"),
			, // Путь
			Метаданные.Документы.РасходныйОрдерНаТовары.Реквизиты.бг_ОбязательнаяАгрегация.Синоним,
			Истина));
			
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);		
			
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыMobileSmarts()

	// Группа реквизитов ордера MobileSmarsts
	ГруппаРеквизитыОрдераMobileSmarts = Элементы.Вставить(
		"бг_ГруппаРеквизитыОрдераMobileSmarts",
		Тип("ГруппаФормы"),
		, // Родитель
		Элементы.ГруппаСтраницы);
		
	ГруппаРеквизитыОрдераMobileSmarts.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРеквизитыОрдераMobileSmarts.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаРеквизитыОрдераMobileSmarts.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	ГруппаРеквизитыОрдераMobileSmarts.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.Картинка;
	
	ГруппаРеквизитыОрдераMobileSmarts.Заголовок = НСтр(
		СтрШаблон(
			"ru = '%1'; en = '%1'",
			"Реквизиты ордера для Mobile Smarts"));
		
	ГруппаРеквизитыОрдераMobileSmarts.Скрыть();
	
	// Реквизиты ордера	
	ПолеИсполнитель = Элементы.Добавить(
		"бг_Исполнитель",
		Тип("ПолеФормы"),
		ГруппаРеквизитыОрдераMobileSmarts);
	ПолеИсполнитель.ПутьКДанным = "бг_Исполнитель";
	ПолеИсполнитель.Вид = ВидПоляФормы.ПолеВвода;
	
	ПолеКонтролироватьСерии = Элементы.Добавить(
		"бг_КонтролироватьСерии",
		Тип("ПолеФормы"),
		ГруппаРеквизитыОрдераMobileSmarts);
	ПолеКонтролироватьСерии.ПутьКДанным = "бг_КонтролироватьСерии";
	ПолеКонтролироватьСерии.Вид = ВидПоляФормы.ПолеФлажка;
		
	ПолеРазрешитьПараллельнуюСборку = Элементы.Добавить(
		"бг_РазрешитьПараллельнуюСборку",
		Тип("ПолеФормы"),
		ГруппаРеквизитыОрдераMobileSmarts);
	ПолеРазрешитьПараллельнуюСборку.ПутьКДанным = "бг_РазрешитьПараллельнуюСборку";
	ПолеРазрешитьПараллельнуюСборку.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеРазрешитьПараллельнуюСборку.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	ПолеОбязательнаяАгрегация = Элементы.Добавить(
		"бг_ОбязательнаяАгрегация",
		Тип("ПолеФормы"),
		ГруппаРеквизитыОрдераMobileSmarts);
	ПолеОбязательнаяАгрегация.ПутьКДанным = "бг_ОбязательнаяАгрегация";
	ПолеОбязательнаяАгрегация.Вид = ВидПоляФормы.ПолеФлажка;
	ПолеОбязательнаяАгрегация.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
КонецПроцедуры

&НаСервере
Процедура бг_УстановитьВидимостьРеквизитовMobileSmarts()

	Элементы.бг_ГруппаРеквизитыОрдераMobileSmarts.Видимость =
		ЭтотОбъект["бг_ТипВнешнейСкладскойСистемы"] 
			= Перечисления.бг_ТипыВнешнихСкладскихСистем.MobileSmarts;

КонецПроцедуры

&НаСервере
Процедура бг_ОбновитьРеквизитыMobileSmartsПоСкладу()

	Если ЗначениеЗаполнено(Склад) Тогда
		
		ЗначенияРеквизитовСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Склад,
			"бг_ТипВнешнейСкладскойСистемы, бг_ОбязательнаяАгрегацияПриОтгрузке");
			
		ЭтотОбъект["бг_ТипВнешнейСкладскойСистемы"] = ЗначенияРеквизитовСклада.бг_ТипВнешнейСкладскойСистемы;
		ЭтотОбъект["бг_ОбязательнаяАгрегация"] = ЗначенияРеквизитовСклада.бг_ОбязательнаяАгрегацияПриОтгрузке;
			
	Иначе
			
		ЭтотОбъект["бг_ТипВнешнейСкладскойСистемы"] = Неопределено;
		ЭтотОбъект["бг_ОбязательнаяАгрегация"] = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец MobileSmarts

#КонецОбласти
