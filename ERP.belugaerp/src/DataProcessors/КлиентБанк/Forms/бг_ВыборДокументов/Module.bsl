
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаДокументов.Колонки.Добавить("Номер", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	ТаблицаДокументов.Колонки.Добавить("ПлательщикСчет", ОбщегоНазначения.ОписаниеТипаСтрока(34));
	ТаблицаДокументов.Колонки.Добавить("ПолучательСчет", ОбщегоНазначения.ОписаниеТипаСтрока(34));
	ТаблицаДокументов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДокументов.Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаДокументов.Колонки.Добавить("Исходящий", Новый ОписаниеТипов("Булево"));
	
	ИндексСтроки = 0;
	Для каждого СтрокаВыписка Из Параметры.ДокументыВыписки Цикл
		
		НС = ТаблицаДокументов.Добавить();
		НС.ИндексСтроки = ИндексСтроки;
		НС.ПлательщикСчет = СтрокаВыписка.ПлательщикСчет;
		НС.ПолучательСчет = СтрокаВыписка.ПолучательСчет;
		НС.Номер = СтрокаВыписка.Номер;
		
		Если ЗначениеЗаполнено(СтрокаВыписка.ДатаСписано) Тогда
			НС.Исходящий = Истина;
		КонецЕсли;
		
		НС.Дата = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(СтрокаВыписка.Дата);
		Если Не ЗначениеЗаполнено(НС.Дата) Тогда
			НС.Дата = ДенежныеСредстваКлиентСервер.ПолучитьДатуИзСтроки(
				?(НС.Исходящий, СтрокаВыписка.ДатаСписано, СтрокаВыписка.ДатаПоступило));
		КонецЕсли;
		
		НС.Сумма = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаВыписка.Сумма);
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексСтроки,
	|	ТаблицаДокументов.Дата,
	|	ТаблицаДокументов.Номер,
	|	ТаблицаДокументов.Исходящий,
	|	ТаблицаДокументов.Сумма,
	|	ТаблицаДокументов.ПолучательСчет,
	|	ТаблицаДокументов.ПлательщикСчет
	|ПОМЕСТИТЬ ТаблицаДокументов
	|
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|";
	
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексСтроки КАК ИндексСтроки,
	|	ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.ТипПлатежногоДокумента, СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента) КАК ТипПлатежногоДокумента,
	|	ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.ХозяйственнаяОперация, СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация) КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.СтатьяДвиженияДенежныхСредств, СписаниеБезналичныхДенежныхСредств.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
	|	ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредств.Ссылка, СписаниеБезналичныхДенежныхСредств.Ссылка) КАК ДокументСсылка
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|		ПО (СписаниеБезналичныхДенежныхСредств.ДатаВходящегоДокумента = ТаблицаДокументов.Дата)
	|			И (СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента = ТаблицаДокументов.Номер)
	|			И (СписаниеБезналичныхДенежныхСредств.СуммаДокумента = ТаблицаДокументов.Сумма)
	|			И (СписаниеБезналичныхДенежныхСредств.ПометкаУдаления = ЛОЖЬ)
	|			И ТаблицаДокументов.Исходящий = ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
	|		ПО (ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента = ТаблицаДокументов.Дата)
	|			И (ПоступлениеБезналичныхДенежныхСредств.НомерВходящегоДокумента = ТаблицаДокументов.Номер)
	|			И (ПоступлениеБезналичныхДенежныхСредств.СуммаДокумента = ТаблицаДокументов.Сумма)
	|			И (ПоступлениеБезналичныхДенежныхСредств.ПометкаУдаления = ЛОЖЬ)
	|			И ТаблицаДокументов.Исходящий = ЛОЖЬ
	|ГДЕ
	|	(НЕ ПоступлениеБезналичныхДенежныхСредств.Ссылка ЕСТЬ NULL
	|			ИЛИ НЕ СписаниеБезналичныхДенежныхСредств.Ссылка ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.ИндексСтроки КАК ИндексСтроки,
	|	ДанныеДокументов.ТипПлатежногоДокумента КАК ТипПлатежногоДокумента,
	|	ДанныеДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокументов.ДокументСсылка КАК ДокументСсылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств, СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)) КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|		ПО (ДанныеДокументов.ДокументСсылка = ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|		ПО (ДанныеДокументов.ДокументСсылка = СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.ИндексСтроки,
	|	ДанныеДокументов.ТипПлатежногоДокумента,
	|	ДанныеДокументов.ХозяйственнаяОперация,
	|	ДанныеДокументов.СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокументов.ДокументСсылка";
	
	тзДокументы = Запрос.Выполнить().Выгрузить();
	
	СобственныеСчета = СобственныеСчета(Параметры.БанковскийСчет);
	
	ИндексСтроки = 0;
	Для каждого СтрокаВыписка Из Параметры.ДокументыВыписки Цикл
	
		НС = ТаблицаДокументыВыписки.Добавить();
		ЗаполнитьЗначенияСвойств(НС, СтрокаВыписка);
		
		НС.СуммаЧисло = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаВыписка.Сумма);
		
		ИсходящийПлатеж = ЗначениеЗаполнено(СтрокаВыписка.ДатаСписано);
		НС.Исходящий = ИсходящийПлатеж;
		НС.ТипДокумента = ТипПлатежногоДокумента(СтрокаВыписка.Операция, ИсходящийПлатеж);
		НС.ВидОперации = ВидОперацииДокумента(СтрокаВыписка, ИсходящийПлатеж, СобственныеСчета);
		НС.СтатьяДДС = СтатьяДДСПоУмолчанию(СтрокаВыписка, ИсходящийПлатеж);
		
		Если Не ЗначениеЗаполнено(СтрокаВыписка.Плательщик) Тогда
			НС.Плательщик = СтрокаВыписка.Плательщик;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаВыписка.Получатель) Тогда
			НС.Получатель = СтрокаВыписка.Получатель;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаВыписка.ПлательщикРасчСчет) Тогда
			НС.ПлательщикРасчСчет = СтрокаВыписка.ПлательщикСчет;
		КонецЕсли;
		СтрокиДокументы = тзДокументы.НайтиСтроки(Новый Структура("ИндексСтроки", ИндексСтроки));
		Если СтрокиДокументы.Количество() > 0 Тогда
			НС.ДокументСсылка = СтрокиДокументы.Получить(0).ДокументСсылка;
			НС.ВидОперации = СтрокиДокументы.Получить(0).ХозяйственнаяОперация;
			НС.ТипДокумента = СтрокиДокументы.Получить(0).ТипПлатежногоДокумента;
			НС.СтатьяДДС = СтрокиДокументы.Получить(0).СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыВыпискиВидОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДокументыВыписки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТаблицаДокументыВыпискиВидОперации.СписокВыбора.Очистить();
	ВидыХозОпераций = ВидыХозяйственныхОпераций(ТекущиеДанные.Исходящий);
	Элементы.ТаблицаДокументыВыпискиВидОперации.СписокВыбора.ЗагрузитьЗначения(ВидыХозОпераций);
	Элементы.ТаблицаДокументыВыпискиВидОперации.СписокВыбора.Вставить(0,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка"),
		"Очистить",,
		БиблиотекаКартинок.Очистить);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументыВыпискиСтатьяДДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.ТаблицаДокументыВыписки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуВыбораСтатьиДДС();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаУстановитьФлажки(Команда)
	
	Для каждого СтрокаТаблицы Из ТаблицаДокументыВыписки Цикл
		СтрокаТаблицы.Загружать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьФлажки(Команда)
	
	Для каждого СтрокаВыписка Из ТаблицаДокументыВыписки Цикл
		СтрокаВыписка.Загружать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	СтрокиКЗагрузке = ТаблицаДокументыВыписки.НайтиСтроки(Новый Структура("Загружать", Истина));
	КоличествоДокументовДляЗагрузки = СтрокиКЗагрузке.Количество();
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Выбрано %1 документов. Загрузить?'"), КоличествоДокументовДляЗагрузки);
	Если КоличествоДокументовДляЗагрузки = 0 Тогда
		ТекстВопроса = НСтр("ru = 'Не выбраны документы для загрузки. Зарыть форму?'");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ДокументыВыбраны", КоличествоДокументовДляЗагрузки > 0);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьОбработкаОтвета", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения,
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработкаОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ДокументыВыбраны Тогда
			ЭтаФорма.Закрыть(ПолучитьАдресВоВременномХранилище());
		Иначе
			ЭтаФорма.Закрыть(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьНезагруженные(Команда)
	
	Для каждого СтрокаВыписка Из ТаблицаДокументыВыписки Цикл
		СтрокаВыписка.Загружать = Не ЗначениеЗаполнено(СтрокаВыписка.ДокументСсылка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидОперации(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаДокументыВыписки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = ТаблицаДокументыВыписки[ВыделенныеСтроки[0]];
	
	ВидыХозОпераций = ВидыХозяйственныхОпераций(ПерваяСтрока.Исходящий);
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(ВидыХозОпераций);
	СписокВыбора.Вставить(0,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка"),
		"Очистить",,
		БиблиотекаКартинок.Очистить);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКолонки", "ВидОперации");
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатьюДДС(Команда)
	
	ОткрытьФормуВыбораСтатьиДДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтатьиДДС()
	
	ВыделенныеСтроки = Элементы.ТаблицаДокументыВыписки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = ТаблицаДокументыВыписки[ВыделенныеСтроки[0]];
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКолонки", "СтатьяДДС");
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	Отбор = Новый Структура;
	Если ПерваяСтрока.Исходящий Тогда
		Отбор.Вставить("ТолькоРасходДенежныхСредств");
	ИначеЕсли Не ПерваяСтрока.Исходящий Тогда
		Отбор.Вставить("ТолькоПоступленияДенежныхСредств");
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.СтатьиДвиженияДенежныхСредств.ФормаВыбора",
		ПараметрыВыбора,
		ЭтаФорма,
		ЭтаФорма,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборЗначенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовоеЗначение = Результат;
	Если ТипЗнч(Результат) = Тип("ЭлементСпискаЗначений") Тогда
		НовоеЗначение = Результат.Значение;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
		
		 ТаблицаДокументыВыписки[СтрокаТаблицы][ДополнительныеПараметры.ИмяКолонки] = НовоеЗначение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресВоВременномХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДокументыВыписки.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ТипПлатежногоДокумента(Операция, ИсходящийПлатеж)
	
	ТипыПлатежныхДокументов = Перечисления.ТипыПлатежныхДокументов;
	
	ТипыПлатежныхДокументовПоступления = Новый Соответствие;
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовПоступления.Вставить("ПЛАТЕЖНЫЙОРДЕР", ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("БАНКОВСКИЙОРДЕР", ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовПоступления.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	ТипыПлатежныхДокументовСписания = Новый Соответствие;
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕПОРУЧЕНИЕ", ТипыПлатежныхДокументов.ПлатежноеПоручение);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНОЕТРЕБОВАНИЕ", ТипыПлатежныхДокументов.ПлатежноеТребование);
	ТипыПлатежныхДокументовСписания.Вставить("ПЛАТЕЖНЫЙОРДЕР", ТипыПлатежныхДокументов.ПлатежныйОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("БАНКОВСКИЙОРДЕР", ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("МЕМОРИАЛЬНЫЙОРДЕР", ТипыПлатежныхДокументов.БанковскийОрдер);
	ТипыПлатежныхДокументовСписания.Вставить("ИНКАССОВОЕПОРУЧЕНИЕ", ТипыПлатежныхДокументов.ИнкассовоеПоручение);
	
	ТипСтрокой = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(Операция), " ", "")), "Ё", "Е");
	
	ТипПлатежногоДокумента = Неопределено;
	
	Если ИсходящийПлатеж Тогда
		ТипПлатежногоДокумента = ТипыПлатежныхДокументовСписания.Получить(ТипСтрокой);
	Иначе
		ТипПлатежногоДокумента = ТипыПлатежныхДокументовПоступления.Получить(ТипСтрокой);
	КонецЕсли;
	
	Если ТипПлатежногоДокумента = Неопределено Тогда
		ТипПлатежногоДокумента = ТипыПлатежныхДокументов.ПлатежноеПоручение;
	КонецЕсли;
	
	Возврат ТипПлатежногоДокумента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыХозяйственныхОпераций(ЭтоИсходящийПлатеж)
	
	ВидыОпераций = Новый Массив;
	
	Если ЭтоИсходящийПлатеж Тогда
		
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеТаможне"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаАрендодателю"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоКредитам"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймов"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту"));
		
	Иначе
		
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПогашениеЗаймаСотрудником"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтАрендодателя"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленныхДС"));
		ВидыОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту"));		
		
	КонецЕсли;
	
	Возврат ВидыОпераций;
	
КонецФункции

&НаСервереБезКонтекста
Функция СобственныеСчета(БанковскийСчет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.БИКБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка ТОГДА
	|			БанковскиеСчета.СВИФТБанка
	|		ИНАЧЕ
	|			БанковскиеСчета.Банк.СВИФТБИК
	|	КОНЕЦ КАК СВИФТ
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|	ПО
	|		БанковскиеСчетаОрганизаций.Владелец = БанковскиеСчета.Владелец
	|		И БанковскиеСчетаОрганизаций.Ссылка = &БанковскийСчет
	|	
	|ГДЕ
	|	БанковскиеСчета.Ссылка <> &БанковскийСчет
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатусыСоставителейТаможенныхПлатежей()
	
	СтатусыСоставителейТаможенныхПлатежей = Новый Массив;
	СтатусыСоставителейТаможенныхПлатежей.Добавить("06");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("16");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("17");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("18");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("19");
	СтатусыСоставителейТаможенныхПлатежей.Добавить("20");
	
	Возврат СтатусыСоставителейТаможенныхПлатежей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидОперацииДокумента(СтрокаВыписка, Исходящий, СобственныеСчета)
	
	СтатусыСоставителейТаможенныхПлатежей = СтатусыСоставителейТаможенныхПлатежей();
	
	ВидОперации = Неопределено;
	
	// Хоз. операция по виду оплаты
	Если СтрокаВыписка.ВидОплаты = "03" Тогда
		ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
	ИначеЕсли СтрокаВыписка.ВидОплаты = "04" Тогда
		ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
	ИначеЕсли СтрокаВыписка.ВидОплаты = "13" Тогда
		Если Исходящий Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
		Иначе
			ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
		КонецЕсли;
	КонецЕсли;
	
	// Переводы
	Если Исходящий Тогда
		
		Если ЗначениеЗаполнено(СтрокаВыписка.ПолучательБИК) Тогда
			СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаВыписка.ПолучательСчет, СтрокаВыписка.ПолучательБИК);
		ИначеЕсли ЗначениеЗаполнено(СтрокаВыписка.ПолучательСВИФТ) Тогда
			СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаВыписка.ПолучательСчет, СтрокаВыписка.ПолучательСВИФТ);
		Иначе
			СтруктураПоиска = Новый Структура("НомерСчета", СтрокаВыписка.ПолучательСчет);
		КонецЕсли;
		
		СобственныеСчетаПолучатели = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
		Если СобственныеСчетаПолучатели.Количество() > 0 Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
			Если Не ЗначениеЗаполнено(СтрокаВыписка.ДатаСписано) Тогда
				Возврат ВидОперации;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(СтрокаВыписка.ПлательщикБИК) Тогда
			СтруктураПоиска = Новый Структура("НомерСчета, БИК", СтрокаВыписка.ПлательщикСчет, СтрокаВыписка.ПлательщикБИК);
		ИначеЕсли ЗначениеЗаполнено(СтрокаВыписка.ПлательщикСВИФТ) Тогда
			СтруктураПоиска = Новый Структура("НомерСчета, СВИФТ", СтрокаВыписка.ПлательщикСчет, СтрокаВыписка.ПлательщикСВИФТ);
		Иначе
			СтруктураПоиска = Новый Структура("НомерСчета", СтрокаВыписка.ПлательщикСчет);
		КонецЕсли;
		
		СобственныеСчетаОтправители = СобственныеСчета.НайтиСтроки(СтруктураПоиска);
		Если СобственныеСчетаОтправители.Количество() > 0 Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
			Если Не ЗначениеЗаполнено(СтрокаВыписка.ДатаПоступило) Тогда
				Возврат ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Инкассация
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		
		БалансовыйСчет = Лев(СтрокаВыписка.ПлательщикСчет, 5);
		Если БалансовыйСчет    = "20202" // поступление/списание наличных из кассы
			Или БалансовыйСчет = "20208" // поступление/списание наличных из банкомата, устройства Cash-in
		Тогда
			Если Исходящий Тогда
				ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
			Иначе
				ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Платеж в бюджет
	Если ЗначениеЗаполнено(СтрокаВыписка.СтатусСоставителя) Тогда
		
		ВидПеречисленияВБюджет = Неопределено;
		
		Если СтатусыСоставителейТаможенныхПлатежей.Найти(СтрокаВыписка.СтатусСоставителя) <> Неопределено Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж;
		ИначеЕсли СтрокаВыписка.СтатусСоставителя = "08" Тогда
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		Иначе
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		КонецЕсли;
		
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж И Исходящий Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж И Исходящий Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж И Исходящий Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		Если Исходящий Тогда
			ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
		Иначе
			ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидОперации;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатьяДДСПоУмолчанию(СтрокаВыписка, ИсходящийПлатеж)
	
	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
