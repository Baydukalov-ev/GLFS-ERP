
#Область ОбработчикиКомандФормы

&НаКлиенте
&ИзменениеИКонтроль("ЗагрузитьДокументы")
Процедура бг_ЗагрузитьДокументы(Команда)
	
#Вставка
	Отказ = Ложь;
	ПредварительныйВыборДокументов = бг_ИспользоватьПредварительныйВыборДокументов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
#КонецВставки
	
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		
		Если Не Счет.Пометка Или Счет.Загружается Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = "";
		
		//++ Локализация
		Если Счет.ПрямойОбмен Тогда
			
			Если Не ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для банковского счета %1 не настроен прямой обмен с банком. Подключите сервис 1С:ДиректБанк, или воспользуйтесь выгрузкой в файл.';
						|en = 'Direct exchange is not set up for bank account %1. Connect 1C:DirectBank service or export to file.'"), Счет.Ссылка);
			ИначеЕсли Не ЗначениеЗаполнено(Счет.ДатаНачалаЗагрузки) Или Не ЗначениеЗаполнено(Счет.ДатаКонцаЗагрузки) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для банковского счета %1 не задан период загрузки выписки. Выберите период.';
						|en = 'Statement import period is not specified for bank account %1. Select a period.'"), Счет.Ссылка);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ПослеПолученияВыпискиБанка", ЭтотОбъект);
				ОбменСБанкамиКлиент.ПолучитьВыписку(Оповещение, Счет.Ссылка, Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
			КонецЕсли;
		Иначе
		//-- Локализация
			Если ЗначениеЗаполнено(Счет.НастройкаОбмена) Тогда
				#Если НЕ ВебКлиент Тогда
				ПрочитатьДанныеВыписки(Счет);
				#Иначе
				ПрочитатьДанныеВыпискиЗагрузить(Счет);
				#КонецЕсли
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для банковского счета %1 не выбран файл выписки в настройке обмена. Выберите файл.';
						|en = 'Statement file is not selected for bank account %1 in the exchange setting. Select a file.'"), Счет.Ссылка);
			КонецЕсли;
		//++ Локализация
		КонецЕсли;
		//-- Локализация
		
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,, Элементы.БанковскиеСчетаНастройкаОбмена.Имя);
		КонецЕсли;
	КонецЦикла;
	
#Вставка
	Если ПредварительныйВыборДокументов Тогда
		бг_ЗагрузитьДокументыСПредварительнымВыбором();
		Возврат;
	КонецЕсли;
#КонецВставки
	
	ЗагрузитьНаСервере(); // Загрузка из файлов
	
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		Если Не Счет.Загружается Тогда
			Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
		КонецЕсли;
	КонецЦикла;
	
	Тик = 0;
	ПодключитьОбработчикОжидания("ОбработатьЗавершениеЗагрузки", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныепроцедурыИФункции

&НаКлиенте
Функция бг_ИспользоватьПредварительныйВыборДокументов(Отказ)
	
	ПредварительныйВыборДокументов = Ложь;
	
	ЗагружаемыеСчета = Новый Соответствие;
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		Если Не Счет.Пометка Или Счет.Загружается Тогда
			Продолжить;
		КонецЕсли;
		ЗагружаемыеСчета.Вставить(Счет);
		ИспользованиеДопОтборов = бг_КонстантыПовтИсп.ЗначениеКонстанты(
			"ИспользованиеДопОтборовПоПоступлениюСписаниюДС", Счет.Организация);
		Если ИспользованиеДопОтборов = Истина Тогда
			ПредварительныйВыборДокументов = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗагружаемыеСчета.Количество() = 0 Тогда
		Отказ = Истина;
	ИначеЕсли ЗагружаемыеСчета.Количество() > 1 И ПредварительныйВыборДокументов Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, 
			НСтр("ru = 'Должен быть отмечен только один счет, 
				|так как включена настройка предварительного 
				|выбора документов для загрузки.'"));
	КонецЕсли;
	
	Возврат ПредварительныйВыборДокументов;
	
КонецФункции

&НаКлиенте
Процедура бг_ЗагрузитьДокументыСПредварительнымВыбором()
	
	ДокументыВыписки = Новый массив;
	Для каждого Счет Из Объект.БанковскиеСчета Цикл
		
		Если Не Счет.Пометка Или Счет.Загружается Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Счет.ПрямойОбмен Тогда
			
			Если ВРег(Счет.ФорматОбмена) = ВРег("1CClientBankExchange") Тогда
				ДанныеВыписки = ДенежныеСредстваКлиентСервер.РазобратьФайлВыписки1CClientBankExchange(Счет.Выписка.СтрокиВыписки);
			Иначе
				ДанныеВыписки = ДенежныеСредстваКлиентСервер.РазобратьФайлВыписки(Счет.Выписка.СтрокиВыписки);
			КонецЕсли;
			
			Если ДанныеВыписки = Неопределено Тогда
				
				ЗагрузитьНаСервере();
			
				Для каждого Счет Из Объект.БанковскиеСчета Цикл
					Если Не Счет.Загружается Тогда
						Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
					КонецЕсли;
				КонецЦикла;
				
				Тик = 0;
				ПодключитьОбработчикОжидания("ОбработатьЗавершениеЗагрузки", 1, Истина);
				
			Иначе
				
				Для каждого Выписка Из ДанныеВыписки.ДокументыВыписки Цикл
					ДокументыВыписки.Добавить(Выписка);
				КонецЦикла;
	
				ОткрытьФорму("Обработка.КлиентБанк.Форма.бг_ВыборДокументов", 
					Новый Структура("ДокументыВыписки, БанковскийСчет", ДокументыВыписки, Счет.Ссылка),
					ЭтотОбъект, ЭтотОбъект,,,
					Новый ОписаниеОповещения("бг_ВыборДокументовЗакрытие", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВыборДокументовЗакрытие(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	Иначе
        
		Для каждого Счет Из Объект.БанковскиеСчета Цикл
			Если Не Счет.Пометка Тогда
				Продолжить;
			КонецЕсли;
			Счет.Выписка.СтрокиВыписки = бг_ПреобразоватьСтрокиВыписки(Счет.Выписка.СтрокиВыписки, Результат);
		КонецЦикла;
		
		ЗагрузитьНаСервере();
		
		Для каждого Счет Из Объект.БанковскиеСчета Цикл
			Если Не Счет.Загружается Тогда
				Счет.ПериодЗагрузки = Новый СтандартныйПериод(Счет.ДатаНачалаЗагрузки, Счет.ДатаКонцаЗагрузки);
			КонецЕсли;
		КонецЦикла;
		
		Тик = 0;
		ПодключитьОбработчикОжидания("ОбработатьЗавершениеЗагрузки", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция бг_ПреобразоватьСтрокиВыписки(СтрокиВыписки, АдресТаблицаДокументыВыписки)

	ТаблицаДокументыВыписки = ПолучитьИзВременногоХранилища(АдресТаблицаДокументыВыписки);
	
	НоваяВыписка = Новый Массив;
	СтрокиДокумента = Неопределено;	
	СтруктураДокумента = Неопределено;
	
	Для каждого СтрокаВыписки Из СтрокиВыписки Цикл
		
		Тег = "";
		Значение = Неопределено;
		Если СтрНайти(ВРег(СтрокаВыписки), ВРег("СекцияДокумент=")) <> 0 Тогда
			СтрокиДокумента = Новый Массив;
			СтруктураДокумента = Новый Структура;			
		ИначеЕсли СтрНайти(ВРег(СтрокаВыписки), ВРег("КонецДокумента")) <> 0 Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номер", СтруктураДокумента.Номер);
			СтруктураПоиска.Вставить("Дата", СтруктураДокумента.Дата);
			СтруктураПоиска.Вставить("Сумма", СтруктураДокумента.Сумма);
			
			Если СтруктураДокумента.Свойство("НазначениеПлатежа") Тогда
				СтруктураПоиска.Вставить("НазначениеПлатежа", СтруктураДокумента.НазначениеПлатежа);
			КонецЕсли;
			
			Если СтруктураДокумента.Свойство("ПлательщикРасчСчет") Тогда
				СтруктураПоиска.Вставить("ПлательщикРасчСчет", СтруктураДокумента.ПлательщикРасчСчет);
			ИначеЕсли СтруктураДокумента.Свойство("ПлательщикСчет") Тогда
				СтруктураПоиска.Вставить("ПлательщикРасчСчет", СтруктураДокумента.ПлательщикСчет);
			КонецЕсли;
			
			СтруктураПоиска.Вставить("ПолучательСчет", СтруктураДокумента.ПолучательСчет);
			СтрокиПоиск = ТаблицаДокументыВыписки.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиПоиск.Количество() > 0 И СтрокиПоиск.Получить(0).Загружать = Истина Тогда
				ВидОперации = СтрокиПоиск.Получить(0).ВидОперации;
				СтатьяДДС = СтрокиПоиск.Получить(0).СтатьяДДС;
				СтрокиДокумента.Добавить("бг_ВидОперации=" + ЗначениеВСтрокуВнутр(ВидОперации));
				СтрокиДокумента.Добавить("бг_СтатьяДДС=" + ЗначениеВСтрокуВнутр(СтатьяДДС));
				СтрокиДокумента.Добавить("бг_Загружать=ИСТИНА");
				Для каждого СтрокаДокумент Из СтрокиДокумента Цикл
					НоваяВыписка.Добавить(СтрокаДокумент);
				КонецЦикла;
				НоваяВыписка.Добавить(СтрокаВыписки);
			Иначе
				СтрокиДокумента.Добавить("бг_Загружать=ЛОЖЬ");
				Для каждого СтрокаДокумент Из СтрокиДокумента Цикл
					НоваяВыписка.Добавить(СтрокаДокумент);
				КонецЦикла;
				НоваяВыписка.Добавить(СтрокаВыписки);
			КонецЕсли;
			СтрокиДокумента = Неопределено;	
			СтруктураДокумента = Неопределено;	
			Продолжить;
		ИначеЕсли СтруктураДокумента <> Неопределено Тогда
			бг_РазобратьТеговуюСтроку(СтрокаВыписки, Тег, Значение);
			Если ЗначениеЗаполнено(Тег) Тогда
				СтруктураДокумента.Вставить(Тег, Значение);
			КонецЕсли;
		КонецЕсли;
		Если СтрокиДокумента <> Неопределено Тогда
			СтрокиДокумента.Добавить(СтрокаВыписки);
		Иначе
			НоваяВыписка.Добавить(СтрокаВыписки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяВыписка;

КонецФункции

&НаСервере
Функция бг_РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = СтрНайти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРег(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат Не ПустаяСтрока(Тег);
	
КонецФункции

#КонецОбласти
