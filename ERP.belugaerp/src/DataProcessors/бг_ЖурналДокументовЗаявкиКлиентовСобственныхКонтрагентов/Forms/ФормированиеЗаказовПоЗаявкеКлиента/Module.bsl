#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаявкаКлиента = Неопределено;
	Параметры.Свойство("ЗаявкаКлиента", ЗаявкаКлиента);
	
	Если Не ЗначениеЗаполнено(ЗаявкаКлиента) 
		Или Не ВозможноФормированиеЗаказаПоЗаявке(ЗаявкаКлиента) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Объект.ЗаявкаКлиента = ЗаявкаКлиента; 
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьДанныеПоЗаявкеКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьСформированныеЗаказы();
	УстановитьОтборНеподтвержденныхПозиций();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказКлиента" Тогда
		ЗаполнитьСформированныеЗаказы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	ГрузополучательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияПриИзменении(Элемент)
	
	ПунктНазначенияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаДоставкиПриИзменении(Элемент)
	
	РассчитатьДатуОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	РассчитатьДатуДоставки();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = ДатаОтгрузки;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = ЭтотОбъект;
	
	// ЭлектронноеВзаимодействие.СервисEDI	
	Если Не РедактированиеРеквизитовEDIКлиентСервер.РеквизитДоступенДляРедактирования(ЭтотОбъект, "Поставщик") Тогда
		ПараметрыВыбораСоглашения.Организация = Объект.Организация;
	КонецЕсли;
	
	Если Не РедактированиеРеквизитовEDIКлиентСервер.РеквизитДоступенДляРедактирования(ЭтотОбъект, "Покупатель") Тогда
		ПараметрыВыбораСоглашения.Контрагент = Объект.Контрагент;
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СервисEDI
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	СоглашениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ДоговорПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьНеподтвержденныеПозицииПриИзменении(Элемент)
	
	УстановитьОтборНеподтвержденныхПозиций();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодПозицииЗаказа = "";
		ТекущиеДанные.СверхЗаявки = Истина;
		ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбеспечитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущиеДанные.КОбеспечению = ТекущиеДанные.Количество - ТекущиеДанные.Обеспечено - ТекущиеДанные.Обеспечить;
	ТекущиеДанные.Вес = ТекущиеДанные.Обеспечить * ТекущиеДанные.ВесЕдиницы;
	ТекущиеДанные.Объем = ТекущиеДанные.Обеспечить * ТекущиеДанные.ОбъемЕдиницы;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварнаяКатегорияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ТоварыТоварнаяКатегорияПриИзмененииНаСервере(ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПримечаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ПримечаниеИзменено = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСформированныеЗаказы

&НаКлиенте
Процедура СформированныеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаЗаказа = Элементы.СформированныеЗаказы.ТекущиеДанные;
	ЗаказСсылка  = СтрокаЗаказа.ЗаказКлиента;
	ПоказатьЗначение(Неопределено, ЗаказСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьФормируемыйЗаказ(Команда) 
	ЗаполнитьФормируемыйЗаказНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормируемыйЗаказ(Команда)
	ОчиститьФормируемыйЗаказНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоступныеОстатки(Команда)
	ПересчитатьДоступныеОстаткиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказ(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьСтрокиОбеспечить = Ложь;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.Обеспечить > 0 Тогда
			ЕстьСтрокиОбеспечить = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьСтрокиОбеспечить Тогда
		ТекстСообщения = НСтр("ru = 'Нет заполненных строк к формированию. Заказ не сформирован'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СформироватьЗаказНаСервере();
	
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСформированныеЗаказы(Команда)
	
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьКомментарииВЗаявку(Команда)
	
	ЗаписатьКомментарииВЗаявкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТоварыПоЗаявке(Команда)
	
	ОбновитьТоварыПоЗаявкеНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЦветФонаЗаголовков = ЦветаСтиля.ЦветФонаУдачнойОтправки;
	Элементы.ГруппаФормируемыйЗаказ.ЦветФонаЗаголовка = ЦветФонаЗаголовков;
	Элементы.ТоварыОбеспечить.ЦветФонаЗаголовка = ЦветФонаЗаголовков;
	Элементы.ТоварыОбъем.ЦветФонаЗаголовка = ЦветФонаЗаголовков;
	Элементы.ТоварыВес.ЦветФонаЗаголовка = ЦветФонаЗаголовков;
	
	УсловноеОформление.Элементы.Очистить();
	
	// Выделим фоном "Внимание" ячейки в неподтвержденных строках. 
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличество.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.НулевоеПодтверждение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаВнимание);
	
	// Выделим жирным шрифтом и цветом ячейки, в которых отредактировано примечание.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПримечание.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ПримечаниеИзменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВнимание);
	
	// Запретим редактирование примечания в строках с незаполненным кодом позиции заказа.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПримечание.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КодПозицииЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНеподтвержденныхПозиций()
	
	Если СкрыватьНеподтвержденныеПозиции Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("НулевоеПодтверждение", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВозможноФормированиеЗаказаПоЗаявке(ЗаявкаКлиента)
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗаявкаКлиента,
		"Проведен,ИсточникЗаказа,СтатусЗаявкиКлиентаСобственногоКонтрагента");
	
	Статус = РеквизитыЗаявки.СтатусЗаявкиКлиентаСобственногоКонтрагента;
	ИсточникЗаказа = РеквизитыЗаявки.ИсточникЗаказа;
	
	Если Не РеквизитыЗаявки.Проведен Тогда
		ШаблонОшибки = НСтр("ru = '%1 не проведена. Формирование заказа запрещено.'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ЗаявкаКлиента);
	ИначеЕсли ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		ШаблонОшибки = НСтр("ru = '%1 источник заказ - %2. Формирование заказа запрещено.'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ЗаявкаКлиента, ИсточникЗаказа);
	ИначеЕсли Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Отменена Тогда
		ШаблонОшибки = НСтр("ru = '%1 отменена. Формирование заказа запрещено.'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ЗаявкаКлиента);
	Иначе
		ТекстОшибки = "";
	КонецЕсли;
	
	ВозможноФормированиеЗаказа = ПустаяСтрока(ТекстОшибки);
	Если Не ВозможноФормированиеЗаказа Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат ВозможноФормированиеЗаказа; 
	
КонецФункции

#Область ПроцедурыИФункцииАвтоматическогоЗаполнения

&НаСервере
Процедура ЗаполнитьДанныеПоЗаявкеКлиента()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеЗаявкиКлиента = Документы.битЗаявкаКлиента.РеквизитыЗаявкиКлиентаДляФормированияЗаказов(
		Объект.ЗаявкаКлиента);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаявкиКлиента);
	Комментарий = "";
	
	ЗаполнитьДанныеСоглашенияИДоговора();
	
	ПунктНазначенияПриИзмененииНаСервере();
	
	ЗаполнитьТоварыПоЗаявке();
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.ДоступныйОстаток = 0;
	КонецЦикла;
	ЗаполнитьДоступныеОстатки(ДанныеЗаявкиКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСоглашенияИДоговора()
	
	СоглашениеДоговор = бг_ЗаказыКлиентов.СоглашениеИДоговорСКлиентомПоВидуНоменклатуры(
		Организация, 
		Контрагент,
		бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидНоменклатурыАлкогольнаяПродукция"));
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СоглашениеДоговор);
	
	ЗаполнитьВидПеревозкиПоДоговору();
	Если Не ЗначениеЗаполнено(ВидПеревозки) Тогда
		ВидПеревозки = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидПеревозкиАвто");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ВидЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ВидЦен");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоЗаявке()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаКлиента", Объект.ЗаявкаКлиента);
	Запрос.Текст = ТекстЗапросаТоварыПоЗаявке(); 
	
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ЗаполнитьВесОбъемЕдиницыВСтроке(СтрокаТЧ, КэшированныеЗначения);
		СтрокаТЧ.КОбеспечению = СтрокаТЧ.Количество - СтрокаТЧ.Обеспечено - СтрокаТЧ.Обеспечить;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаТоварыПоЗаявке(ТоварнаяКатегория = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория.бг_КодНСИ КАК КодНСИ,
	|	ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория.Наименование КАК ТоварнаяКатегорияНаименование,
	|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки КАК КодСтрокиЗаявки,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыЗаказов
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка.бг_ЗаявкаКлиента = &ЗаявкаКлиента
	|	И ЗаказКлиентаТовары.Ссылка.Проведен
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И &УсловиеЗаказКлиентаТоварнаяКатегория
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория,
	|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки,
	|	ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория.бг_КодНСИ,
	|	ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория.Наименование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварнаяКатегория,
	|	КодСтрокиЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаКлиентаТовары.КодПозицииЗаказа КАК КодПозицииЗаказа,
	|	ЗаявкаКлиентаТовары.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ЗаявкаКлиентаТовары.ТоварнаяКатегория.бг_КодНСИ КАК КодНСИ,
	|	ЗаявкаКлиентаТовары.ТоварнаяКатегория.Наименование КАК ТоварнаяКатегорияНаименование,
	|	ЗаявкаКлиентаТовары.Количество КАК Количество,
	|	ЗаявкаКлиентаТовары.КоличествоПервичное КАК КоличествоПервичное,
	|	ЗаявкаКлиентаТовары.Примечание КАК Примечание
	|ПОМЕСТИТЬ ТоварыЗаявки
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК ЗаявкаКлиентаТовары
	|ГДЕ
	|	ЗаявкаКлиентаТовары.Ссылка = &ЗаявкаКлиента
	|	И ЗаявкаКлиентаТовары.Ссылка.Проведен
	|	И ЗаявкаКлиентаТовары.Ссылка.ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент)
	|	И ЗаявкаКлиентаТовары.Ссылка.СтатусЗаявкиКлиентаСобственногоКонтрагента <> ЗНАЧЕНИЕ(Перечисление.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Отменена)
	|	И &УсловиеЗаявкаКлиентаТоварнаяКатегория
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварнаяКатегория,
	|	КодПозицииЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ТоварыЗаявки.ТоварнаяКатегория, ТоварыЗаказов.ТоварнаяКатегория) КАК ТоварнаяКатегория,
	|	ЕСТЬNULL(ТоварыЗаявки.КодНСИ, ТоварыЗаказов.КодНСИ) КАК КодНСИ,
	|	ЕСТЬNULL(ТоварыЗаявки.ТоварнаяКатегорияНаименование, ТоварыЗаказов.ТоварнаяКатегорияНаименование) КАК ТоварнаяКатегорияНаименование,
	|	ЕСТЬNULL(ТоварыЗаявки.КодПозицииЗаказа, ТоварыЗаказов.КодСтрокиЗаявки) КАК КодПозицииЗаказа,
	|	ЕСТЬNULL(ТоварыЗаявки.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ТоварыЗаявки.КоличествоПервичное, 0) КАК КоличествоПервичное,
	|	ЕСТЬNULL(ТоварыЗаказов.Количество, 0) КАК Обеспечено,
	|	ЕСТЬNULL(ТоварыЗаявки.Примечание, """") КАК Примечание,
	|	ВЫБОР
	|		КОГДА ТоварыЗаявки.КодПозицииЗаказа ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СверхЗаявки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыЗаявки.Количество, 0) = 0
	|				И НЕ ТоварыЗаявки.КодПозицииЗаказа ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НулевоеПодтверждение
	|ИЗ
	|	ТоварыЗаявки КАК ТоварыЗаявки
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыЗаказов КАК ТоварыЗаказов
	|		ПО ТоварыЗаявки.ТоварнаяКатегория = ТоварыЗаказов.ТоварнаяКатегория
	|			И ТоварыЗаявки.КодПозицииЗаказа = ТоварыЗаказов.КодСтрокиЗаявки
	|			И (ТоварыЗаявки.КодПозицииЗаказа <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварнаяКатегорияНаименование";
	
	Если ТоварнаяКатегория = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗаказКлиентаТоварнаяКатегория", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗаявкаКлиентаТоварнаяКатегория", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&УсловиеЗаказКлиентаТоварнаяКатегория",
			"ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория = &ТоварнаяКатегория");
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса, "&УсловиеЗаявкаКлиентаТоварнаяКатегория",
			"ЗаявкаКлиентаТовары.ТоварнаяКатегория = &ТоварнаяКатегория");
	КонецЕсли; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВесОбъемЕдиницыВСтроке(СтрокаТЧ, КэшированныеЗначения = Неопределено)
	
	СтрокаТЧ.ВесЕдиницы = 0;
	СтрокаТЧ.ОбъемЕдиницы = 0;
	
	Если Не ЗначениеЗаполнено(СтрокаТЧ.ТоварнаяКатегория) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбУпаковке = ДанныеОбУпаковкеТоварнойКатегории(СтрокаТЧ.ТоварнаяКатегория, КэшированныеЗначения);
	
	СтрокаТЧ.ВесЕдиницы = ДанныеОбУпаковке.Вес;
	СтрокаТЧ.ОбъемЕдиницы = ДанныеОбУпаковке.Объем;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОбУпаковкеТоварнойКатегории(ТоварнаяКатегория, КэшированныеЗначения = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОбУпаковке = Новый Структура("Вес,Объем", 0, 0);
	
	Если Не ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
		Возврат ДанныеОбУпаковке;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварнаяКатегория);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Номенклатура
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И ВЫРАЗИТЬ(УпаковкиЕдиницыИзмерения.Владелец КАК Справочник.Номенклатура).ТоварнаяКатегория = &ТоварнаяКатегория
	|	И УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|	И УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.Конечная)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДанныеОбУпаковке;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ДанныеОбУпаковке = ОбработкаТабличнойЧастиСервер.ДанныеОбУпаковке(
		Выборка.Номенклатура,
		Выборка.Упаковка,
		КэшированныеЗначения);
	
	Возврат ДанныеОбУпаковке;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеОстатки(ДанныеЗаявкиКлиента)
	
	ДанныеПоНоменклатуре = бг_ЗаказыКлиентов.ДанныеПоНоменклатуре(ДанныеЗаявкиКлиента);
	ОбеспечиватьИзОжидаемыхПоступлений = ДанныеЗаявкиКлиента.ОбеспечиватьИзОжидаемыхПоступлений;
	
	ОтборСтрокТовары = Новый Структура("КодНСИ");
	Для Каждого СтрокаДанныеПоНоменклатуре Из ДанныеПоНоменклатуре Цикл
		ОтборСтрокТовары.Вставить("КодНСИ", СтрокаДанныеПоНоменклатуре.КодДляПоискаНоменклатуры);
		НайденныеСтрокиТовары = Объект.Товары.НайтиСтроки(ОтборСтрокТовары);
		Для Каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
			СтрокаТовары.ДоступныйОстаток = ДоступныйОстатокСтрокиДанныхПоНоменклатуре(
				СтрокаДанныеПоНоменклатуре,
				ОбеспечиватьИзОжидаемыхПоступлений);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДоступныйОстатокСтрокиДанныхПоНоменклатуре(СтрокаДанныеПоНоменклатуре, ОбеспечиватьИзОжидаемыхПоступлений)
	
	ДоступныйОстаток = 0;
	ИмяКолонкиКоличества = "Количество";
	
	ДоступныйОстаток = ДоступныйОстаток 
		+ СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервы.Итог(ИмяКолонкиКоличества);
	ДоступныйОстаток = ДоступныйОстаток 
		+ СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыСтороннихПартнеров.Итог(ИмяКолонкиКоличества);
	ДоступныйОстаток = ДоступныйОстаток 
		+ СтрокаДанныеПоНоменклатуре.СвободныеОстатки.Итог(ИмяКолонкиКоличества);
	ДоступныйОстаток = ДоступныйОстаток 
		+ СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыПоКаналамПродаж.Итог(ИмяКолонкиКоличества);
	
	Если ОбеспечиватьИзОжидаемыхПоступлений Тогда
		ДоступныйОстаток = ДоступныйОстаток 
			+ СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыВЗаказахПоставщикам.Итог(ИмяКолонкиКоличества);
		ДоступныйОстаток = ДоступныйОстаток 
			+ СтрокаДанныеПоНоменклатуре.ЧужиеДолгосрочныеРезервыВЗаказахПоставщикам.Итог(ИмяКолонкиКоличества);
		ДоступныйОстаток = ДоступныйОстаток 
			+ СтрокаДанныеПоНоменклатуре.СвободныеОстаткиВЗаказахПоставщикам.Итог(ИмяКолонкиКоличества);
	КонецЕсли;
	
	Возврат ДоступныйОстаток; 
	
КонецФункции

&НаСервере
Процедура РассчитатьДатуДоставки()
	
	ДатаДоставки = ДатаОтгрузки + СрокДоставки * ДлинаСуток();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДатуОтгрузки()
	
	ДатаОтгрузки = ДатаДоставки - СрокДоставки * ДлинаСуток();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДлинаСуток()
	
	Возврат 60 * 60 *24;
	
КонецФункции

&НаСервере
Процедура РассчитатьСрокДоставки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ПунктРазгрузкиОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "бг_ПунктНазначения");
	Иначе
		ПунктРазгрузкиОрганизации = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПунктРазгрузкиОрганизации) 
		Или Не ЗначениеЗаполнено(ПунктНазначения) Тогда
		СрокДоставки = 0;
		Возврат; 
	КонецЕсли;
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ПунктРазгрузкиОрганизации", ПунктРазгрузкиОрганизации);
	Запрос.УстановитьПараметр("ПунктРазгрузки", ПунктНазначения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасстояниеДоПунктовРазгрузки.СрокДоставки КАК СрокДоставки
	|ИЗ
	|	РегистрСведений.бг_РасстояниеДоПунктовРазгрузки КАК РасстояниеДоПунктовРазгрузки
	|ГДЕ
	|	РасстояниеДоПунктовРазгрузки.ПунктРазгрузкиОрганизации = &ПунктРазгрузкиОрганизации
	|	И РасстояниеДоПунктовРазгрузки.ПунктРазгрузки = &ПунктРазгрузки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СрокДоставки = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СрокДоставки = Выборка.СрокДоставки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидПеревозкиПоДоговору(ВидПеревозкиДоговора = Неопределено) 
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПеревозкиДоговора = Неопределено Тогда
		ВидПеревозкиДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "бг_ВидПеревозки");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПеревозкиДоговора) Тогда
		ВидПеревозки = ВидПеревозкиДоговора; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормируемыйЗаказНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.Количество > СтрокаТЧ.Обеспечено Тогда
			НеобходимоОбеспечить = СтрокаТЧ.Количество - СтрокаТЧ.Обеспечено;
			МожноОбеспечить = Мин(НеобходимоОбеспечить, СтрокаТЧ.ДоступныйОстаток);
			СтрокаТЧ.Обеспечить = СтрокаТЧ.Количество - СтрокаТЧ.Обеспечено;
		Иначе
		    СтрокаТЧ.Обеспечить = 0;
		КонецЕсли;
		
		СтрокаТЧ.КОбеспечению = СтрокаТЧ.Количество - СтрокаТЧ.Обеспечено - СтрокаТЧ.Обеспечить;
		СтрокаТЧ.Вес = СтрокаТЧ.Обеспечить * СтрокаТЧ.ВесЕдиницы;
		СтрокаТЧ.Объем = СтрокаТЧ.Обеспечить * СтрокаТЧ.ОбъемЕдиницы;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФормируемыйЗаказНаСервере()
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Обеспечить = 0;
		СтрокаТЧ.КОбеспечению = СтрокаТЧ.Количество - СтрокаТЧ.Обеспечено - СтрокаТЧ.Обеспечить;
		СтрокаТЧ.Вес = 0;
		СтрокаТЧ.Объем = 0; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДоступныеОстаткиНаСервере()
	
	ДанныеЗаявкиКлиента = ДанныеЗаявкиКлиентаСУчетомИзмененийФормы("ПересчетОстатков");
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.ДоступныйОстаток = 0;
	КонецЦикла;
	ЗаполнитьДоступныеОстатки(ДанныеЗаявкиКлиента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСобытийЭлементовИКмандФормы

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Соглашение = Неопределено;
	Договор = Неопределено;
	
	ЗаполнитьДанныеСоглашенияИДоговора();
	
	ПересчитатьДоступныеОстаткиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	РассчитатьСрокДоставки();
	РассчитатьДатуОтгрузки();
	
	ПересчитатьДоступныеОстаткиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииНаСервере()
	
	РеквизитыЗаказа = ДанныеЗаказаДляЗаполненияПунктаНазначенияИЛицензии();
	бг_УчетАлкоголя.ЗаполнитьПунктНазначенияИЛицензиюВДокументе(РеквизитыЗаказа);
	
	ПунктНазначения = РеквизитыЗаказа.бг_ПунктНазначения;
	Лицензия = РеквизитыЗаказа.бг_Лицензия;
	
	РассчитатьСрокДоставки();
	РассчитатьДатуОтгрузки();
	
КонецПроцедуры

&НаСервере
Процедура ПунктНазначенияПриИзмененииНаСервере()
	
	РассчитатьСрокДоставки();
	РассчитатьДатуОтгрузки();
	
	Если ЗначениеЗаполнено(ПунктНазначения) Тогда
		Грузополучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктНазначения, "Клиент");
	КонецЕсли;
	
	РеквизитыЗаказа = ДанныеЗаказаДляЗаполненияПунктаНазначенияИЛицензии();
	бг_УчетАлкоголя.ЗаполнитьЛицензиюВДокументе(РеквизитыЗаказа);
	
	Лицензия = РеквизитыЗаказа.бг_Лицензия;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаказаДляЗаполненияПунктаНазначенияИЛицензии()
	
	РеквизитыЗаказа = Новый Структура();
	РеквизитыЗаказа.Вставить("Дата", ТекущаяДатаСеанса());
	РеквизитыЗаказа.Вставить("Контрагент", Контрагент);
	РеквизитыЗаказа.Вставить("Грузополучатель", Грузополучатель);
	РеквизитыЗаказа.Вставить("бг_ПунктНазначения", ПунктНазначения);
	РеквизитыЗаказа.Вставить("бг_Лицензия", Лицензия);
	
	Возврат РеквизитыЗаказа;
	
КонецФункции

&НаСервере
Процедура СоглашениеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "бг_Договор,ВидЦен");
		
		ДоговорСоглашения = РеквизитыСоглашения.бг_Договор;
		Если ЗначениеЗаполнено(ДоговорСоглашения) Тогда
			Договор = ДоговорСоглашения;
			ЗаполнитьВидПеревозкиПоДоговору();
		КонецЕсли; 
		
		ВидЦен = РеквизитыСоглашения.ВидЦен;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Договор) Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "бг_Соглашение,бг_ВидПеревозки");
		
		СоглашениеДоговора = РеквизитыДоговора.бг_Соглашение;
		Если ЗначениеЗаполнено(СоглашениеДоговора) Тогда
			Соглашение = СоглашениеДоговора;
		КонецЕсли;
		
		ЗаполнитьВидПеревозкиПоДоговору(РеквизитыДоговора.бг_ВидПеревозки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыТоварнаяКатегорияПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТоварнаяКатегория = ТекущаяСтрока.ТоварнаяКатегория;
	Если Не ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтараяТоварнаяТоварнаяКатегория = бг_ОбщегоНазначенияСервер.ТоварнаяКатегорияПоКодуНСИ(ТекущаяСтрока.КодНСИ);
	Если ТоварнаяКатегория = СтараяТоварнаяТоварнаяКатегория Тогда
		// Ничего менять не надо.
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьВозможностьПримененияТоварнойКатегории(ТекущаяСтрока, ТоварнаяКатегория, Отказ);
	Если Отказ Тогда
		// Восстановим старое знаячение товарной категории.
		ТекущаяСтрока.ТоварнаяКатегория = СтараяТоварнаяТоварнаяКатегория;
		Возврат;
	КонецЕсли;
	
	// Установим новые значения служебных реквизитов строки. 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаТоварыПоЗаявке(ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ЗаявкаКлиента", Объект.ЗаявкаКлиента);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварнаяКатегория);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Выбрана новая категория, которой нет ни в заявке, ни в заказах по заявке.
		ТекущаяСтрока.СверхЗаявки = Истина;
		ТекущаяСтрока.Обеспечено = 0;
		ТекущаяСтрока.КодПозицииЗаказа = "";
		ТекущаяСтрока.НулевоеПодтверждение = Ложь;
		ТекущаяСтрока.ПримечаниеИзменено = Ложь;
		ТекущаяСтрока.Примечание = "";
	Иначе
		// Выбрана товарная категория, которая уже есть либо в заявке, либо в заказах по заявке.
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Выборка);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			ЗаполнитьВесОбъемЕдиницыВСтроке(СтрокаТЧ, КэшированныеЗначения);
		КонецЦикла;
	КонецЕсли; 
	
	ТекущаяСтрока.КОбеспечению = ТекущаяСтрока.Количество - ТекущаяСтрока.Обеспечено - ТекущаяСтрока.Обеспечить;
	
	// Пересчитаем вес и объем.
	ЗаполнитьВесОбъемЕдиницыВСтроке(ТекущаяСтрока);
	ТекущаяСтрока.Вес = ТекущаяСтрока.Обеспечить * ТекущаяСтрока.ВесЕдиницы;
	ТекущаяСтрока.Объем = ТекущаяСтрока.Обеспечить * ТекущаяСтрока.ОбъемЕдиницы;
	
	// Пересчитаем доступный остаток.
	ДанныеЗаявкиКлиента = ДанныеЗаявкиКлиентаСУчетомИзмененийФормы("ПересчетОстатков", ТоварнаяКатегория);
	ТекущаяСтрока.ДоступныйОстаток = 0;
	ЗаполнитьДоступныеОстатки(ДанныеЗаявкиКлиента);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВозможностьПримененияТоварнойКатегории(ТекущаяСтрока, ТоварнаяКатегория, Отказ)
	
	ОтборСтрок = Новый Структура("ТоварнаяКатегория", ТоварнаяКатегория);
	НайденныеСтроки = Объект.Товары.НайтиСтроки(ОтборСтрок);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Выбранная товарная категория ""%1"" уже присутствует в списке товаров.
			|Дублировать товарные категории запрещено, оставлено старое значение в строке.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТоварнаяКатегория);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ТоварнаяКатегория);
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверим, что у выбранной товарной категории задан уникальный код НСИ.
	КодНСИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяКатегория, "бг_КодНСИ");
	Если Не ЗначениеЗаполнено(КодНСИ) Тогда
		ШаблонСообщения = НСтр("ru = 'У выбранной товарной категории ""%1"" не задан Код НСИ.
			|Использованиет таких товарных категорий запрещено, оставлено старое значение в строке.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТоварнаяКатегория);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ТоварнаяКатегория);
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ПроверочнаяТоварнаяКатегория = бг_ОбщегоНазначенияСервер.ТоварнаяКатегорияПоКодуНСИ(КодНСИ);
	Если Не ЗначениеЗаполнено(ПроверочнаяТоварнаяКатегория) Тогда
		ШаблонСообщения = НСтр("ru = 'У выбранной товарной категории ""%1"" не задан неуникальный Код НСИ.
			|Использованиет таких товарных категорий запрещено, оставлено старое значение в строке.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТоварнаяКатегория);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ТоварнаяКатегория);
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Товарную категорию можно использовать.
	// Установим новые значения связанных реквизитов строки.
	ТекущаяСтрока.КодНСИ = КодНСИ;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьКомментарииВЗаявкуНаСервере()
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ПримечаниеИзменено", Истина));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаявкаКлиентаОбъект = Объект.ЗаявкаКлиента.ПолучитьОбъект();
	
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		
		СтрокаЗаявки = ЗаявкаКлиентаОбъект.Товары.Найти(СтрокаТЧ.КодПозицииЗаказа, "КодПозицииЗаказа");
		Если СтрокаЗаявки <> Неопределено Тогда
			СтрокаЗаявки.Примечание = СтрокаТЧ.Примечание;
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		ЗаявкаКлиентаОбъект.ОбменДанными.Загрузка = Истина;
		ЗаявкаКлиентаОбъект.ДополнительныеСвойства.Вставить("бг_ОтключитьСинхронизациюЗависимыхДокументов");
		ЗаявкаКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		// Так как в режиме загрузки версии объектов не создаются, создадим версию.
		ЗаявкаКлиентаОбъект.ОбменДанными.Загрузка = Ложь;
		ЗаявкаКлиентаОбъект.ДополнительныеСвойства.Вставить(
			"ВерсионированиеОбъектовКомментарийКВерсии",
			КомментарийКВерсиямОбъектов());
		ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(ЗаявкаКлиентаОбъект, РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Не удалось записать отредактированные комментарии в документ %1.
									|По причине: %2'");
		ТекстСообщения = СтрШаблон(
			ШаблонСообщения,
			Объект.ЗаявкаКлиента, 
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстСообщения; 
		
	КонецПопытки;
	
	// После записи комментариев в заявку сбросим флаги.
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СтрокаТЧ.ПримечаниеИзменено = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТоварыПоЗаявкеНаСервере()
	
	ЗаполнитьТоварыПоЗаявке();
	ПересчитатьДоступныеОстаткиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеЗаказаКлиента

&НаСервере
Процедура СформироватьЗаказНаСервере()
	
	ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	
	ЗаполнитьШапкуЗаказаКлиента(ДокументОбъект);
	
	ДанныеЗаявкиКлиента = ДанныеЗаявкиКлиентаСУчетомИзмененийФормы("ФормированиеЗаказа");
	
	ДанныеПоНоменклатуре = бг_ЗаказыКлиентов.ДанныеПоНоменклатуре(ДанныеЗаявкиКлиента);
	ТоварыЗаказКлиента = бг_ЗаказыКлиентов.ТЧТоварыЗаказаКлиента(ДанныеЗаявкиКлиента, ДанныеПоНоменклатуре);
	
	ЗаполнитьТЧТоварыЗаказаКлиента(ДокументОбъект, ТоварыЗаказКлиента, ДанныеЗаявкиКлиента);
	
	ДозаполнитьЗаказКлиентаПередЗаписью(ДокументОбъект);
	
	ЗаписатьЗаказКлиентаВИБ(ДокументОбъект);
	
	// Заказ успешно сформирован. Перенесем количество из колонки "Обеспечить" в колонку "Обеспечено"
	// и, кроме того, заполним новые значения в зависимые колонки.
	БылиТоварыСверхЗаявки = Ложь;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		ВключеноВЗаказ = СтрокаТЧ.Обеспечить;
		Если ВключеноВЗаказ <= 0 Тогда
			// По этой строке заказ не формировали.
			Продолжить;
		КонецЕсли;
		Если СтрокаТЧ.СверхЗаявки Тогда
			БылиТоварыСверхЗаявки = Истина;
		КонецЕсли;
		СтрокаТЧ.ДоступныйОстаток = СтрокаТЧ.ДоступныйОстаток - ВключеноВЗаказ; 
		СтрокаТЧ.Обеспечено = СтрокаТЧ.Обеспечено + ВключеноВЗаказ;
		СтрокаТЧ.Обеспечить = 0;
		СтрокаТЧ.Вес = 0;
		СтрокаТЧ.Объем = 0;
		СтрокаТЧ.КОбеспечению = СтрокаТЧ.Количество - СтрокаТЧ.Обеспечено;
	КонецЦикла;
	
	Если БылиТоварыСверхЗаявки Тогда
		// Если были замены товарных категорий, то после формирования заказа восстановим
		// данные по товарам заявки, чтобы отобразить и товары заявки, и товары сверх заявки.
		ОбновитьТоварыПоЗаявкеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуЗаказаКлиента(ДокументОбъект)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	КонецЕсли;
	
	ДокументОбъект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент;
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	ДокументОбъект.Партнер = Партнер;
	ДокументОбъект.Контрагент = Контрагент;
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.бг_ЗаявкаКлиента = Объект.ЗаявкаКлиента;
	ДокументОбъект.Склад = Склад;
	ДокументОбъект.ЦенаВключаетНДС = Истина; 
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ДокументОбъект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(
		ДокументОбъект.Организация);
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	ДокументОбъект.ДатаСогласования = ТекущаяДатаСеанса();
	ДокументОбъект.Согласован = Истина;
	ДокументОбъект.Комментарий = Комментарий;
	
	ДокументОбъект.Соглашение = Соглашение;
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ДокументОбъект.Соглашение);
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ДокументОбъект.Договор = Договор;
	Иначе
		ДокументОбъект.Договор = Неопределено;
	КонецЕсли;
	
	ДокументОбъект.ЦенаВключаетНДС = УсловияПродаж.ЦенаВключаетНДС;
	ДокументОбъект.ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ЗаполнитьЗначенияСвойств(
				ДокументОбъект,
				УсловияПродаж,
				"ГруппаФинансовогоУчета,ТребуетсяЗалогЗаТару,ФормаОплаты,ГрафикОплаты");
	Если ЗначениеЗаполнено(ДокументОбъект.ГрафикОплаты) И Не ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты) Тогда
		ДокументОбъект.ФормаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ГрафикОплаты, "ФормаОплаты");
	КонецЕсли;
	
	НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(
		ДокументОбъект.НаправлениеДеятельности,
		ДокументОбъект.Соглашение,
		ДокументОбъект.Договор);
	
	ДокументОбъект.Грузополучатель = Грузополучатель;
	ДокументОбъект.бг_ПунктНазначения = ПунктНазначения;
	ДокументОбъект.бг_Лицензия = Лицензия;
	
	ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ДокументОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ДокументОбъект.НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = ДокументОбъект.Организация;
	СтруктураПараметров.БанковскийСчет = ДокументОбъект.БанковскийСчет;
	ДокументОбъект.БанковскийСчет = 
		ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	ДокументОбъект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		ДокументОбъект.Контрагент, , 
		ДокументОбъект.БанковскийСчетКонтрагента);
		
	ДокументОбъект.МаксимальныйКодСтроки = 0;
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ЗаявкаКлиента,
		"НомерПоДаннымКлиента,ДатаПоДаннымКлиента");
	ДокументОбъект.НомерПоДаннымКлиента = РеквизитыЗаявки.НомерПоДаннымКлиента;
	ДокументОбъект.ДатаПоДаннымКлиента = РеквизитыЗаявки.ДатаПоДаннымКлиента;

	ДокументОбъект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетов(
										Истина,,
										ДокументОбъект.Соглашение,
										ДокументОбъект.Договор);	
	
	Если ДокументОбъект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ДокументОбъект.ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ДокументОбъект);
	Иначе
		ДокументОбъект.ИдентификаторПлатежа = Неопределено;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") Тогда
		ДокументОбъект.СкидкиРассчитаны = Истина;
	КонецЕсли;

	ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ДокументОбъект, Ложь);
	ДокументОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(
		ДокументОбъект.Менеджер,
		ДокументОбъект.Подразделение);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ДокументОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТоварыЗаказаКлиента(ДокументОбъект, ТоварыЗаказКлиента, ДанныеЗаявкиКлиента)
	
	СтруктураДействийЗаполнитьЦену = Новый Структура;
	СтруктураДействийЗаполнитьЦену.Вставить(
		"ЗаполнитьЦенуПродажи", 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(ДокументОбъект));
	МассивОшибок = Новый Массив; 
	
	СтруктураДействий = СтруктураДействийДляОбработкиСтрокТоваровЗаказаКлиента(ДокументОбъект);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовары Из ТоварыЗаказКлиента Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		// Пересчитаем цены по виду цен.
		НоваяСтрока.ВидЦены = ВидЦен;
		ЗаполнитьЦенуВСтрокеТЧТоварыЗаказаКлиента(
			ДокументОбъект,
			НоваяСтрока,
			ВидЦен,
			СтруктураДействийЗаполнитьЦену,
			КэшированныеЗначения,
			МассивОшибок);
		
		НоваяСтрока.КодСтроки = 0;
		НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
		
		// Заполнение цен, ставок НДС, пересчет количества единиц и сумм в ТЧ Товары. 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				НоваяСтрока,
				СтруктураДействий, 
				КэшированныеЗначения);
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщения = Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦенуВСтрокеТЧТоварыЗаказаКлиента(ДокументОбъект, 
													СтрокаТЧ,
													ВидЦены,
													СтруктураДействий,
													КэшированныеЗначения,
													МассивОшибок)
	
	СтрокаТЧ.ВидЦены = ВидЦены;
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
			СтрокаТЧ, 
			СтруктураДействий, 
			КэшированныеЗначения);
	
	Если СтрокаТЧ.Цена = 0 Тогда
		
		НомерСтроки = ДокументОбъект.Товары.Индекс(СтрокаТЧ) + 1;
		ШаблонСообщения = 
			НСтр("ru = 'Стр. %1, для товара ""%2"" не задана цена ""%3"" на дату %4.';
				 |en = 'Стр. %1, для товара ""%2"" не задана цена ""%3"" на дату %4.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			НомерСтроки,
			СтрокаТЧ.Номенклатура,
			ВидЦены,
			Формат(ДокументОбъект.Дата, "ДФ=dd.MM.yyyy"));
		
		МассивОшибок.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру действий для обработки добавленных при формировании заказов клиентов строк ТЧ Товары.
//
&НаСервере
Функция СтруктураДействийДляОбработкиСтрокТоваровЗаказаКлиента(ДокументОбъект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ДокументОбъект);
	ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(
		ДокументОбъект,
		Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	Возврат СтруктураДействий;
	
КонецФункции

&НаСервере
Процедура ДозаполнитьЗаказКлиентаПередЗаписью(ДокументОбъект)

	бг_ЗаказыКлиентов.УстановитьФлагНеОтгружатьЧастямиИДатуОтгрузкиВЗаказе(ДокументОбъект);
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		// Новый номер устанавливаем после заполнения шапки, чтобы сработали механизмы префиксации.
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
		ДокументОбъект,
		Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ДокументОбъект, "Товары");
	ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаказКлиентаВИБ(ДокументОбъект)
	
	ЗаписатьКомментарииВЗаявкуНаСервере();
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ВидПеревозки", ВидПеревозки);
	ДокументОбъект.ДополнительныеСвойства.Вставить(
		"ВерсионированиеОбъектовКомментарийКВерсии",
		КомментарийКВерсиямОбъектов());
	
	НачатьТранзакцию();
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Не удалось провести документ %1.'");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка) 
			+ Символы.ПС  
			+ НСтр("ru = 'По причине: '")
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения; 
		
	КонецПопытки;
	
	ШаблонСообщения = НСтр("ru = 'Записан и проведен документ %1.'");
	ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка); 
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка);
	
	Если ДокументОбъект.Проведен Тогда
		ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСформированныеЗаказы()
	
	СформированныеЗаказы.Очистить();
	
	СтрокиЗаказов = ПолучитьСведенияПоСформированнымЗаказам(Объект.ЗаявкаКлиента);
	Для Каждого СтрокаЗаказов Из СтрокиЗаказов Цикл
		ЗаполнитьЗначенияСвойств(СформированныеЗаказы.Добавить(), СтрокаЗаказов);
	КонецЦикла;
	
	СформированныеЗаказыКоличествоСтрок = СформированныеЗаказы.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведенияПоСформированнымЗаказам(ЗаявкаКлиента)
	
	Возврат Обработки.бг_ЖурналДокументовЗаявкиКлиентовСобственныхКонтрагентов.СведенияПоСформированнымЗаказам(
			ЗаявкаКлиента, Истина);
	
КонецФункции

// Возвращает комментарий к версиям объектов, записываемых из формы обработки.
//
//  Возвращаемое значение:
//    Строка - комментарий к версии.
//
&НаСервереБезКонтекста
Функция КомментарийКВерсиямОбъектов()
	
	Возврат НСтр("ru = 'АРМ Формирование заказов по заявке (предзаказу) клиента'");
	
КонецФункции

&НаСервере
Функция ДанныеЗаявкиКлиентаСУчетомИзмененийФормы(Режим, ТоварнаяКатегория = Неопределено)
	
	ДанныеЗаявкиКлиента = Документы.битЗаявкаКлиента.РеквизитыЗаявкиКлиентаДляФормированияЗаказов(
		Объект.ЗаявкаКлиента);
	
	// Заменим реквизиты заявки, которые можно указать в АРМе, на те, которые указанны.
	ДанныеЗаявкиКлиента.Склад = Склад;
	ДанныеЗаявкиКлиента.Организация = Организация;
	ДанныеЗаявкиКлиента.Партнер = Партнер;
	ДанныеЗаявкиКлиента.Контрагент = Контрагент;
	ДанныеЗаявкиКлиента.ПунктНазначения = ПунктНазначения;
	
	// Товары получены по данным заявки, надо перезаполнить данными, указанными в АРМе.
	ДанныеЗаявкиКлиента.Товары.Очистить();
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если Режим = "ФормированиеЗаказа"
			И СтрокаТЧ.Обеспечить <= 0 Тогда
			// Если формируем заказ, то вклюяаем только позиции, указанные для формирования заказа.
			Продолжить;
		ИначеЕсли Режим = "ПересчетОстатков"
			И ТоварнаяКатегория <> Неопределено
			И СтрокаТЧ.ТоварнаяКатегория <> ТоварнаяКатегория Тогда
			// Если передана товарная категория, то остатки пересчитываем только для нее.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = ДанныеЗаявкиКлиента.Товары.Добавить();
		НоваяСтрокаТовары.ДатаОтгрузки = ДатаОтгрузки;
		НоваяСтрокаТовары.КодДляПоискаНоменклатуры = СтрокаТЧ.КодНСИ; 
		НоваяСтрокаТовары.КодНСИ = СтрокаТЧ.КодНСИ;
		НоваяСтрокаТовары.КодПозицииЗаказа = СтрокаТЧ.КодПозицииЗаказа;
		НоваяСтрокаТовары.Количество = СтрокаТЧ.Обеспечить;
		НоваяСтрокаТовары.ТоварнаяКатегория = СтрокаТЧ.ТоварнаяКатегория;
		
	КонецЦикла;
	
	Возврат ДанныеЗаявкиКлиента;
	
КонецФункции 

#КонецОбласти

#КонецОбласти
