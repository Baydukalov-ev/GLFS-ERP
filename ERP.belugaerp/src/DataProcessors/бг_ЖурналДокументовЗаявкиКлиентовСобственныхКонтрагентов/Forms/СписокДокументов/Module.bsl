#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	НавигационнаяСсылка = "e1cib/app/Обработка.бг_ЖурналДокументовЗаявкиКлиентовСобственныхКонтрагентов";
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("ВариантПериода") Тогда
			Период.Вариант = СтруктураБыстрогоОтбора.ВариантПериода;
		Иначе
			Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Период") И ЗначениеЗаполнено(Параметры.Период) Тогда
		Период = Параметры.Период;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ДокументСсылка.битЗаявкаКлиента");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗаказКлиента" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСформированныеЗаказы", 0.2, Истина);
	ИначеЕсли ИмяСобытия = "Запись_битЗаявкаКлиента" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьСформированныеЗаказы", 0.2, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
	Иначе  
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить(
			"ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент"));
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Документ.битЗаявкаКлиента.ФормаОбъекта", СтруктураПараметров);
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформированныеЗаказы

// Открытие формы созданного заказа.
//
&НаКлиенте
Процедура СформированныеЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаЗаказа = Элементы.СформированныеЗаказы.ТекущиеДанные;
	ЗаказСсылка  = СтрокаЗаказа.ЗаказКлиента;
	ПоказатьЗначение(Неопределено, ЗаказСсылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Период = ВыбранноеЗначение;
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСформированныеЗаказы(Команда)
	
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиНаСформированныеЗаказы(Команда)
	
	Для Каждого СтрокаТЧ Из СформированныеЗаказы Цикл
		Если СтрокаТЧ.ВозможноПодтверждениеЗаказа Тогда
			СтрокаТЧ.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкиССформированныхЗаказов(Команда)
	
	Для Каждого СтрокаТЧ Из СформированныеЗаказы Цикл
		Если СтрокаТЧ.ВозможноПодтверждениеЗаказа Тогда
			СтрокаТЧ.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьКоличествоВЗаявках(Команда)
	
	ИмяФормыРедактирования = ПолучитьПолноеИмяФормы("ПодтверждениеКоличестваВЗаявкахКлиентов");
	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму(ИмяФормыРедактирования, ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказы(Команда)
	
	// Открываем форму формирования заказов и передаем туда ссылку на заявку клиента.
	МассивВыделенныеЗаявки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	
	Если МассивВыделенныеЗаявки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыРедактирования = ПолучитьПолноеИмяФормы("ФормированиеЗаказовПоЗаявкеКлиента");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаявкаКлиента", МассивВыделенныеЗаявки.Получить(0));
	ОткрытьФорму(ИмяФормыРедактирования, ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧастичноеПодтверждениеЗаявки(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ОтправитьПодтверждениеЗаявкиНаСервере(ТекущиеДанные.Ссылка, Истина);
	Элементы.Список.Обновить();
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолноеПодтверждениеЗаявки(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ОтправитьПодтверждениеЗаявкиНаСервере(ТекущиеДанные.Ссылка, Ложь);
	Элементы.Список.Обновить();
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	// Запретим редактирование пометки в строках сформированных заказов, 
	// по которым невозможно подтверждение.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СформированныеЗаказыПометка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СформированныеЗаказы.ВозможноПодтверждениеЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтбор()
	
	УстановитьОтборПоПериоду();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПериоду()
	
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода",
		Период.ДатаНачала);
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		Период.ДатаОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСформированныеЗаказы()
	
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСформированныеЗаказы()
	
	СформированныеЗаказы.Очистить();
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() <> 0 Тогда
		ДанныеСтрокиЗаявки = Элементы.Список.ТекущиеДанные;
		СтрокиЗаказов = ПолучитьСведенияПоСформированнымЗаказам(ДанныеСтрокиЗаявки.Ссылка);
		Для Каждого СтрокаЗаказов Из СтрокиЗаказов Цикл
			ЗаполнитьЗначенияСвойств(СформированныеЗаказы.Добавить(), СтрокаЗаказов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСведенияПоСформированнымЗаказам(ЗаявкаКлиента)
	
	Возврат Обработки.бг_ЖурналДокументовЗаявкиКлиентовСобственныхКонтрагентов.СведенияПоСформированнымЗаказам(
			ЗаявкаКлиента);
	
КонецФункции

&НаКлиенте
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список)
	
	МассивСсылок = Новый Массив;
	
	Для н = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		
		Если ТипЗнч(Список.ВыделенныеСтроки[н]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[н]);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат МассивСсылок;
	
КонецФункции 

// Возвращает полный путь к форме внешней обработки, отчета или любого объекта метаданных в виде
//  ВнешняяОбработка.ИмяВнешнейОбработки.Форма.ИмяФормыОбработки
//  Обработка.ИмяОбъекта.Форма.ИмяФормыОбработки
//
// Параметры:
//  ИмяФормыОбработки - Строка - имя формы объекта
//
// Возвращаемое значение:
//  Строка - полный путь к форме
//
&НаКлиенте
Функция ПолучитьПолноеИмяФормы(ИмяФормыОбработки)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтотОбъект.ИмяФормы);
	Пока Сред(ЭтотОбъект.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл 
		ПозицияТочки = ПозицияТочки - 1;
	КонецЦикла;
	
	Возврат Лев(ЭтотОбъект.ИмяФормы, ПозицияТочки) + ИмяФормыОбработки;
	
КонецФункции

&НаСервере
Процедура ОтправитьПодтверждениеЗаявкиНаСервере(ЗаявкаКлиента, ЧастичноеПодтверждение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЧастичноеПодтверждение Тогда
		ОтборЗаказов = Новый Структура("Пометка", Истина);
		ПодтверждаемыеЗаказы = СформированныеЗаказы.Выгрузить(ОтборЗаказов).ВыгрузитьКолонку("ЗаказКлиента");
		Если ПодтверждаемыеЗаказы.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбраны заказы для отправки подтверждения.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	Иначе
		ПодтверждаемыеЗаказы = Новый Массив;
		СтрокиЗаказов =  
			Обработки.бг_ЖурналДокументовЗаявкиКлиентовСобственныхКонтрагентов.СведенияПоСформированнымЗаказам(
				ЗаявкаКлиента, Ложь, Истина);
		Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
			ПодтверждаемыеЗаказы.Добавить(СтрокаЗаказа.ЗаказКлиента);
		КонецЦикла;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Документы.битЗаявкаКлиента.ОтправитьПодтверждениеЗаявкиКлиентаСобственногоКонтрагента(
			ЗаявкаКлиента,
			ПодтверждаемыеЗаказы,
			ЧастичноеПодтверждение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ШаблонСообщения = НСтр("ru = '%1 по предзаказу %2 не отправлено. 
									|По причине: %3.'"); 
		ТекстСообщения = СтрШаблон(
			ШаблонСообщения,
			?(ЧастичноеПодтверждение, НСтр("ru = 'Частичное подтверждение'"), НСтр("ru = 'Подтверждение/закрытие'")),
			ЗаявкаКлиента, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
