#Область ОбработчикиСобытийЭлементовФормы 

&НаКлиенте
Процедура ПутьККаталогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = ПутьККаталогу;
	ДиалогВыбораКаталога.Заголовок = НСтр("ru='Выберите каталог'");
	
	ОповещениеЗавершенияВыбора = Новый ОписаниеОповещения("ВыборКаталогаЗавершение", ЭтотОбъект);
	
	ДиалогВыбораКаталога.Показать(ОповещениеЗавершенияВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Партнер = ?(
		ЗначениеЗаполнено(Контрагент), 
		ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"), 
		ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиФайлыВКаталоге(Команда)

	ОчиститьСписок(Неопределено);
	
	Если ПустаяСтрока(ПутьККаталогу) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не указан путь к каталогу. Поиск файлов невозможен.'"));
		Возврат;
	КонецЕсли;
	
	КаталогПоиска = Новый Файл(ПутьККаталогу);
	
	Если Не КаталогПоиска.Существует() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Указан несуществующий каталог.'"));
		Возврат;	
	КонецЕсли;
	
	МаскаФайлов = "*.xml";
	
	ОповещениеОкончанияПоискаФайлов = Новый ОписаниеОповещения("НайтиФайлыВКаталогеЗавершение", ЭтотОбъект);
	
	НачатьПоискФайлов(ОповещениеОкончанияПоискаФайлов, ПутьККаталогу, МаскаФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписок(Команда)
	
	НайденныеФайлыСписок.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВыделенныеФайлы(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.НайденныеФайлыСписок.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбраны файлы к загрузке.'"));
		Возврат;	
	КонецЕсли;
	
	СоответствиеДанныхФайлам = ДанныеФайлов(ВыделенныеСтроки);
	СоздатьЗаказыКлиентам(СоответствиеДанныхФайлам);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеНоменклатуры(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.НайденныеФайлыСписок.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не выбраны файлы к проверке.'"));
		Возврат;	
	КонецЕсли;
	
	СоответствиеДанныхФайлам = ДанныеФайлов(ВыделенныеСтроки);
	
	ОшибкиПоискаНоменклатуры = ПроверитьСоответствиеНоменклатурыКонтрагентов(СоответствиеДанныхФайлам);
	
	Если ОшибкиПоискаНоменклатуры.Количество() <> 0 Тогда
		ОткрытьФормуПредставленияОшибокСозданияЗаказов(ОшибкиПоискаНоменклатуры);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Ошибок не найдено.'"));	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНайденныеФайлы

&НаКлиенте
Процедура НайденныеФайлыСписокПриАктивизацииСтроки(Элемент)
	
	СодержимоеВыбранногоФайла = Новый ТекстовыйДокумент;
	
	ВыделенныеСтроки = Элементы.НайденныеФайлыСписок.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеСодержимого = "";
	СтрокаРазделения = СтрокаРазделенияСодержимогоФайлов();
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		ВыделенныйФайл = НайденныеФайлыСписок.НайтиПоИдентификатору(Идентификатор);
		
		ТекстСодержимого = ТекстСодержимогоФайла(ВыделенныйФайл.Значение);
		
		ПредставлениеСодержимого = ПредставлениеСодержимого 
			+ ?(ПустаяСтрока(ПредставлениеСодержимого), "", СтрокаРазделения) 
			+ ТекстСодержимого;
		
	КонецЦикла;
	
	СодержимоеВыбранногоФайла.ВставитьСтроку(1, ПредставлениеСодержимого);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатыОбработки

&НаКлиенте
Процедура РезультатыОбработкиФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РезультатыОбработкиФайлов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекущиеДанные.ОшибкиПриСоздании) Тогда
		
		ОшибкиСоздания = СтрРазделить(ТекущиеДанные.ОшибкиПриСоздании, Символы.ПС, Ложь);
		
		ОшибкиПоискаНоменклатуры = Новый Соответствие;
		ОшибкиПоискаНоменклатуры.Вставить(ТекущиеДанные.ПутьКФайлу, ОшибкиСоздания);
		
		ОткрытьФормуПредставленияОшибокСозданияЗаказов(ОшибкиПоискаНоменклатуры);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеЗаказовКлиентов

 &НаСервере
Процедура СоздатьЗаказыКлиентам(ДанныеФайлов)
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		ДанныеДокумента = ДанныеФайла.Значение;
		
		ТаблицаТоваров = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ДанныеДокумента.Товары);
				
		Если ТаблицаТоваров.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru='%1 был пропущен. Отсутствуют товары в файле.'"), 
				ДанныеФайла.Ключ));
			Продолжить;	
		КонецЕсли;
		
		Отбор = Новый Структура("ПутьКФайлу", ДанныеФайла.Ключ);
		
		СтрокиРезультата = РезультатыОбработкиФайлов.НайтиСтроки(Отбор);
		
		ЕстьЗапись = СтрокиРезультата.Количество() <> 0;
		СтрокаРезультата = ?(ЕстьЗапись, СтрокиРезультата[0], Неопределено);
			
		ЗаказКлиентаОбъект = ?(
			СтрокаРезультата <> Неопределено
				И ЗначениеЗаполнено(СтрокаРезультата.ЗаказКлиента), 
			СтрокаРезультата.ЗаказКлиента.ПолучитьОбъект(), 
			Документы.ЗаказКлиента.СоздатьДокумент());
			
		ЗаполнитьШапкуЗаказа(ЗаказКлиентаОбъект, ДанныеДокумента);	
		
		ОшибкиЗаполнения = Новый Массив;	
		ЗаполнитьТабличнуюЧастьЗаказа(ЗаказКлиентаОбъект, ТаблицаТоваров, ОшибкиЗаполнения); 
		
		ЗаполнитьУсловияПродажи(ЗаказКлиентаОбъект);
		
		ЗаказКлиентаСсылка = Неопределено;
		
		Если ОшибкиЗаполнения.Количество() = 0 Тогда
			Попытка
				ЗаказКлиентаОбъект.Записать();
				ЗаказКлиентаСсылка = ЗаказКлиентаОбъект.Ссылка;
			Исключение
				ОшибкиЗаполнения.Добавить(
					ПодробноеПредставлениеОшибки(
						ИнформацияОбОшибке()));	
			КонецПопытки;
		КонецЕсли;
		
		ДобавитьСтрокуВРезультат(
			ЗаказКлиентаСсылка, 
			СтрокаРезультата, 
			ДанныеФайла.Ключ, 
			ОшибкиЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШапкуЗаказа(ЗаказКлиентаОбъект, ДанныеДокумента)

	ДатаДокумента = ДатаПоСтроке(ДанныеДокумента.ДатаЗаказа);
	
	ЗаказКлиентаОбъект.Дата = ДатаДокумента;
	ЗаказКлиентаОбъект.ДатаПоДаннымКлиента = ДатаДокумента;
	ЗаказКлиентаОбъект.НомерПоДаннымКлиента = ДанныеДокумента.НомерЗаказа;
	ЗаказКлиентаОбъект.ДатаОтгрузки = ДатаПоСтроке(ДанныеДокумента.ДатаДоставки);
	ЗаказКлиентаОбъект.Организация = Организация;
	ЗаказКлиентаОбъект.Контрагент = Контрагент;
	ЗаказКлиентаОбъект.Партнер = Партнер;
	ЗаказКлиентаОбъект.Грузополучатель = Контрагент;
	ЗаказКлиентаОбъект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.ТвойДом;
	
	бг_УчетАлкоголя.ЗаполнитьПунктНазначенияИЛицензиюВДокументе(ЗаказКлиентаОбъект);
	
	ЗаказКлиентаОбъект.Заполнить(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьЗаказа(ЗаказКлиентаОбъект, ТаблицаТоваров, ОшибкиЗаполнения)
	
	ЗаказКлиентаОбъект.Товары.Очистить();
	
	НайденнаяНоменклатураКонтрагентов = НоменклатураКонтрагентовПоТаблицеФайла(ТаблицаТоваров);
	
	Отбор = Новый Структура("КодНоменклатурыКонтрагента");
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		НайденнаяСтрокаНоменклатуры = Неопределено;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		СтрокиНайденнойНоменклатуры = НайденнаяНоменклатураКонтрагентов.НайтиСтроки(Отбор);
		
		Если СтрокиНайденнойНоменклатуры.Количество() <> 0 Тогда
			НайденнаяСтрокаНоменклатуры = СтрокиНайденнойНоменклатуры[0];	
		КонецЕсли;
		
		Если НайденнаяСтрокаНоменклатуры = Неопределено 
			Или Не ЗначениеЗаполнено(НайденнаяСтрокаНоменклатуры.Номенклатура) Тогда
			
			СформироватьОшибкуПоискаНоменклатуры(ОшибкиЗаполнения, СтрокаТаблицы);
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаЗаказа = ЗаказКлиентаОбъект.Товары.Добавить();
		
		СтрокаЗаказа.НоменклатураПартнера = НайденнаяСтрокаНоменклатуры.НоменклатураПартнера;
		СтрокаЗаказа.Номенклатура = НайденнаяСтрокаНоменклатуры.Номенклатура;
		
		КоличествоТовара = Число(СтрокаТаблицы.Количество);
		
		СтрокаЗаказа.Количество = КоличествоТовара;
		СтрокаЗаказа.КоличествоУпаковок = КоличествоТовара;
		СтрокаЗаказа.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		
		СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(
			СтрокаЗаказа.Номенклатура, 
			ЗаказКлиентаОбъект.НалогообложениеНДС, 
			ЗаказКлиентаОбъект.Организация, 
			ЗаказКлиентаОбъект.Дата);
			
		СтрокаЗаказа.СтавкаНДС = СтавкаНДС;
			
		ЧислоСтавки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка");
		
		ЦенаЗаказа = Число(СтрокаТаблицы.Цена);
		
		СтрокаЗаказа.бг_ЦенаEDI = ЦенаЗаказа;
		
		СтрокаЗаказа.Цена = ?(
			Не ЗаказКлиентаОбъект.ЦенаВключаетНДС 
				И ЗначениеЗаполнено(ЧислоСтавки), 
				ЦенаЗаказа * 100 / (100 + ЧислоСтавки), 
				ЦенаЗаказа);
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиентаОбъект);
		
		СтруктураДействий = Новый Структура;
			
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
				
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЗаказа, СтруктураДействий, Неопределено);
						
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажи(ЗаказКлиентаОбъект)
	
	ВидНоменклатуры = ОпределитьВидНоменклатурыЗаказа(ЗаказКлиентаОбъект);
	
	ДанныеПродажи = СоглашениеИДоговорПоВидуНоменклатуры(ВидНоменклатуры);	
	ЗаполнитьЗначенияСвойств(ЗаказКлиентаОбъект, ДанныеПродажи);
	
	Если ЗначениеЗаполнено(ДанныеПродажи.Соглашение) Тогда
		ЗаказКлиентаОбъект.ЗаполнитьУсловияПродажПоСоглашению(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьВидНоменклатурыЗаказа(ЗаказКлиентаОбъект)

	ТоварыДокумента = ЗаказКлиентаОбъект.Товары.ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Номенклатура.ВидНоменклатуры) КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В (&ТоварыДокумента)";
	
	Запрос.УстановитьПараметр("ТоварыДокумента", ТоварыДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.ВидНоменклатуры; 
		
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СоглашениеИДоговорПоВидуНоменклатуры(ВидНоменклатуры)
	
	ДанныеПродажи = Новый Структура("Соглашение,Договор");
	
	Если ВидНоменклатуры = Неопределено Тогда
		Возврат ДанныеПродажи;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияИДоговоры.Соглашение КАК Соглашение,
	|	СоглашенияИДоговоры.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры КАК СоглашенияИДоговоры
	|ГДЕ
	|	СоглашенияИДоговоры.Организация = &Организация
	|	И СоглашенияИДоговоры.Контрагент = &Контрагент
	|	И СоглашенияИДоговоры.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеПродажи, Выборка);
		
	КонецЕсли;
	
	Возврат ДанныеПродажи;
	
КонецФункции

&НаКлиенте
Функция ИнициализироватьДанныеДокумента()

	Возврат Новый Структура(
				"ДатаДоставки, 
				|ДатаЗаказа, 
				|НомерЗаказа, 
				|НомерДоговора, 
				|ДатаДоговора, 
				|Товары");
	
КонецФункции

&НаКлиенте
Функция ИнициализироватьДанныеТовара()
	
	Возврат Новый Структура(
				"ЕдиницаИзмерения, 
				|Цена, 
				|Количество, 
				|Наименование, 
				|КодНоменклатурыКонтрагента, 
				|Штрихкод, 
				|НомерСтроки");
	
КонецФункции

#КонецОбласти

#Область РазборXML

&НаКлиенте
Функция ДанныеФайлов(ВыбранныеФайлы)

	СоответствиеДанныхФайлов = Новый Соответствие;
	
	Для Каждого Идентификатор Из ВыбранныеФайлы Цикл
		
		ДанныеФайла = НайденныеФайлыСписок.НайтиПоИдентификатору(Идентификатор);	
		
		ДанныеДокумента = ИнициализироватьДанныеДокумента();	
		
		ТоварыДокумента = Новый Массив;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ДанныеФайла.Значение);
		
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
	
				ПрочитатьДанныеШапкиДокумента(ЧтениеXML, ДанныеДокумента);
				ПрочитатьДанныеДоговораДокумента(ЧтениеXML, ДанныеДокумента);
				ПрочитатьДанныеТовараДокумента(ЧтениеXML, ТоварыДокумента);	
					
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
				Если ЧтениеXML.Имя="Document-Order" Тогда
					Прервать;
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;	
		
		ЧтениеXML.Закрыть();
		
		ДанныеДокумента.Товары = ТоварыДокумента;
		
		СоответствиеДанныхФайлов.Вставить(ДанныеФайла.Значение, ДанныеДокумента);
				
	КонецЦикла;	
	
	Возврат СоответствиеДанныхФайлов;
	
КонецФункции

&НаКлиенте
Функция ТекстСодержимогоФайла(ПутьКФайлу)
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	Пока ЧтениеXML.Прочитать() Цикл
		ЗаписьXML.ЗаписатьТекущий(ЧтениеXML);
	КонецЦикла;
	
	Возврат ЗаписьXML.Закрыть();	
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеШапкиДокумента(ЧтениеXML, ДанныеДокумента)

	Если ЧтениеXML.Имя <> "Order-Header" 
		Или ЧтениеXML.КоличествоАтрибутов() = 0 Тогда	
		Возврат;	
	КонецЕсли;
		
	Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		
		Если ЧтениеXML.Имя = "OrderNumber" Тогда
			ДанныеДокумента.НомерЗаказа =  ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "OrderDate" Тогда
			ДанныеДокумента.ДатаЗаказа =  ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "ExpectedDeliveryDate" Тогда
			ДанныеДокумента.ДатаДоставки =  ЧтениеXML.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеДоговораДокумента(ЧтениеXML, ДанныеДокумента)
	
	Если ЧтениеXML.Имя <> "Contract" 
		Или ЧтениеXML.КоличествоАтрибутов() = 0 Тогда	
		Возврат;	
	КонецЕсли;
	
	Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		
		Если ЧтениеXML.Имя = "Number" Тогда
			ДанныеДокумента.НомерДоговора =  ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "Date" Тогда
			ДанныеДокумента.ДатаДоговора =  ЧтениеXML.Значение;
		КонецЕсли;
		
	КонецЦикла;
						
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеТовараДокумента(ЧтениеXML, ТоварыДокумента)

	Если ЧтениеXML.Имя <> "Line-Item" 
		Или ЧтениеXML.КоличествоАтрибутов() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТовара = ИнициализироватьДанныеТовара();
	
	Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		
		Если ЧтениеXML.Имя = "LineNumber" Тогда
			ДанныеТовара.НомерСтроки = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "EAN" Тогда
			ДанныеТовара.Штрихкод = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "BuyerItemCode" Тогда
			ДанныеТовара.КодНоменклатурыКонтрагента = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "ItemDescription" Тогда
			ДанныеТовара.Наименование = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "OrderQuantity" Тогда
			ДанныеТовара.Количество = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "OrderNetpr" Тогда
			ДанныеТовара.Цена = ЧтениеXML.Значение;
		ИначеЕсли ЧтениеXML.Имя = "UnitOfMeasure" Тогда
			ДанныеТовара.ЕдиницаИзмерения = ЧтениеXML.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ТоварыДокумента.Добавить(ДанныеТовара);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыборКаталогаЗавершение(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт

	Если ВыбранныйКаталог <> Неопределено 
		И ВыбранныйКаталог.Количество() <> 0 Тогда
		
		ПутьККаталогу = ВыбранныйКаталог[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыВКаталогеЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт

	Если НайденныеФайлы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не найдено ни одного файла'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл	
		НайденныеФайлыСписок.Добавить(НайденныйФайл.ПолноеИмя);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаРазделенияСодержимогоФайлов()
	
	ШаблонРазделения = 
		"
		|
		|%1
		|
		|";
	
	Возврат СтрШаблон(ШаблонРазделения, ";");
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВРезультат(ЗаказКлиента, СтрокаРезультата, ПутьКФайлу, ОшибкиЗаполнения)
	
	ДобавляемаяСтрока = ?(
		СтрокаРезультата = Неопределено, 
		РезультатыОбработкиФайлов.Добавить(), 
		СтрокаРезультата);
	
	ДобавляемаяСтрока.ПутьКФайлу = ПутьКФайлу;
	ДобавляемаяСтрока.ЗаказКлиента = ЗаказКлиента;
	ДобавляемаяСтрока.ОшибкиПриСоздании = СтрСоединить(ОшибкиЗаполнения, Символы.ПС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПредставленияОшибокСозданияЗаказов(ОшибкиПоискаНоменклатуры)

	ОткрытьФорму(
		"Обработка.бг_ЗагрузкаЗаказовКлиентовСПорталаТвойДом.Форма.ФормаОшибок", 
		Новый Структура("ОшибкиПоискаСоответствийНоменклатуры", 
		ОшибкиПоискаНоменклатуры), 
		ЭтотОбъект,,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОшибкуПоискаНоменклатуры(ОшибкиЗаполнения, СтрокаТаблицы)

	ШаблонОшибки = НСтр(
		"ru='	Для номенклатуры %1 по коду %2 не найдено соответствия в справочнике ""Номенклатура контрагентов""'");
	
	ОшибкиЗаполнения.Добавить(
		СтрШаблон(
			ШаблонОшибки, 
			СтрокаТаблицы.Наименование, 
			СтрокаТаблицы.КодНоменклатурыКонтрагента));
	
КонецПроцедуры

&НаСервере
Функция НоменклатураКонтрагентовПоТаблицеФайла(ТаблицаТоваровФайла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваровФайла.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента
	|ПОМЕСТИТЬ ТаблицаТоваровФайла
	|ИЗ
	|	&ТаблицаТоваровФайла КАК ТаблицаТоваровФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураПартнера,
	|	НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента В
	|			(ВЫБРАТЬ
	|				ТаблицаТоваровФайла.КодНоменклатурыКонтрагента
	|			ИЗ
	|				ТаблицаТоваровФайла КАК ТаблицаТоваровФайла)
	|	И НоменклатураКонтрагентов.Владелец = &Партнер
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураКонтрагентов.Номенклатура,
	|	НоменклатураКонтрагентов.Ссылка,
	|	НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("ТаблицаТоваровФайла", ТаблицаТоваровФайла);
		
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаПоСтроке(ДатаСтрокой)

	Возврат Дата(СтрЗаменить(ДатаСтрокой, "-", ""));	
	
КонецФункции 
	
&НаСервере
Функция ПроверитьСоответствиеНоменклатурыКонтрагентов(СоответствиеДанныхФайлам)
	
	СоответствиеОшибок = Новый Соответствие;
	
	Для Каждого ДанныеФайла Из СоответствиеДанныхФайлам Цикл
		
		ДанныеДокумента = ДанныеФайла.Значение;
		
		ТаблицаТоваров = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ДанныеДокумента.Товары);
				
		Если ТаблицаТоваров.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru='%1 был пропущен. Отсутствуют товары в файле.'"), 
				ДанныеФайла.Ключ));
			Продолжить;	
		КонецЕсли;
		
		НайденнаяНоменклатураКонтрагентов = НоменклатураКонтрагентовПоТаблицеФайла(ТаблицаТоваров);
		
		Отбор = Новый Структура("КодНоменклатурыКонтрагента");
		
		ОшибкиЗаполнения = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
			НайденнаяСтрокаНоменклатуры = Неопределено;
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
			СтрокиНайденнойНоменклатуры = НайденнаяНоменклатураКонтрагентов.НайтиСтроки(Отбор);
			
			Если СтрокиНайденнойНоменклатуры.Количество() <> 0 Тогда
				НайденнаяСтрокаНоменклатуры = СтрокиНайденнойНоменклатуры[0];	
			КонецЕсли;
			
			Если НайденнаяСтрокаНоменклатуры = Неопределено 
				Или Не ЗначениеЗаполнено(НайденнаяСтрокаНоменклатуры.Номенклатура) Тогда
				
				СформироватьОшибкуПоискаНоменклатуры(ОшибкиЗаполнения, СтрокаТаблицы);
				
				Продолжить;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если ОшибкиЗаполнения.Количество() <> 0 Тогда
			СоответствиеОшибок.Вставить(ДанныеФайла.Ключ, ОшибкиЗаполнения);	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеОшибок;
	
КонецФункции

#КонецОбласти