#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АнализДанных(Команда)
	АнализИменКолонок();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);    
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Прочитать табличный документ из файла'"); 
	ДиалогВыбораФайла.Фильтр    = "Все файлы Excel (*.xls, *.xlsx)|*.xls; *.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;

	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтаФорма);
	ДиалогВыбораФайла.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() > 0 Тогда
		ИмяФайла = ВыбранныеФайлы[0];
		АдресРезультата = ПрочитатьФайлExcel(ИмяФайла);
		ЗаполнитьЗагруженныеДанныеНаСервере(АдресРезультата);
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьДанные(Команда)
	Если ЕстьВсеДанныеДляСопоставления() Тогда
		СопоставитьДанныеСервер();
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРезультатСопоставления;
	Иначе 
		ПоказатьПредупреждение( , НСтр("ru='Не все данные указаны'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДаты(Команда)
	ОповещениеОтвет = Новый ОписаниеОповещения("ЗагрузитьДатыЗавершение", ЭтотОбъект);
	РежимДиалога = Новый СписокЗначений;
	РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Загрузить'"));
	РежимДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
	ПоказатьВопрос(ОповещениеОтвет, НСтр("ru='Загрузить даты?'"), РежимДиалога, , КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДатыЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗагрузитьДатыНаСервере();
		ПоказатьПредупреждение(, НСтр("ru='Даты загружены'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СопоставленныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СопоставленныеДанныеДокументЗаказПриИзменении(Элемент)
	ЗаменитьЗначениеВТаблице("НомерДокументаЗаказ", "ДокументЗаказ");
КонецПроцедуры

&НаКлиенте
Процедура СопоставленныеДанныеДокументМаршрутныйЛистПриИзменении(Элемент)
	ЗаменитьЗначениеВТаблице("НомерДокументаМаршрутныйЛист", "ДокументМаршрутныйЛист");
КонецПроцедуры

#КонецОбласти                            

#Область СлужебныеПроцедурыИФункции     

&НаКлиенте
Процедура ЗаменитьЗначениеВТаблице(ИмяСтрока, ИмяСсылка)
	СтрокаИсточник = Элементы.СопоставленныеДанные.ТекущиеДанные;
	Если Не СтрокаИсточник = Неопределено Тогда
		ЗначениеПоиска = СтрокаИсточник[ИмяСтрока];
		ЗначениеЗамены = СтрокаИсточник[ИмяСсылка];
		СтрокиКЗамене = СопоставленныеДанные.НайтиСтроки(Новый Структура(ИмяСтрока, ЗначениеПоиска));
		Для каждого СтрокаЗамены Из СтрокиКЗамене Цикл
			СтрокаЗамены[ИмяСсылка] = ЗначениеЗамены;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#Область РаботаСExcel
	
&НаКлиенте
Функция ПрочитатьФайлExcel(ИмяФайла) Экспорт
	ТекстСостояние = НСтр("ru = 'Загрузка данных...'");
	Состояние(ТекстСостояние);
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	Возврат ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОтметитьНезаполненныеЗначенияОчиститьЗагруженоОшибки() 
	Для каждого СтрокаСопоставления Из СопоставленныеДанные Цикл
		Ошибки = Новый Массив;
		Если Не ЗначениеЗаполнено(СтрокаСопоставления.ДокументЗаказ) Тогда
			Ошибки.Добавить(НСтр("ru='Не заполнен документ заказ'"));
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаСопоставления.ДокументМаршрутныйЛист) Тогда
			Ошибки.Добавить(НСтр("ru='Не заполнен документ маршрутный лист'"));
		КонецЕсли;
	    Если Ошибки.Количество() Тогда
			СтрокаСопоставления.ЕстьНезаполненныеЗначения = Истина;
			СтрокаСопоставления.ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
		Иначе 
			СтрокаСопоставления.ЕстьНезаполненныеЗначения = Ложь;
			СтрокаСопоставления.ТекстОшибки = ""
		КонецЕсли;
		СтрокаСопоставления.Загружено = Ложь;
		СтрокаСопоставления.ЕстьОшибки = Ложь;
	КонецЦикла
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДатыНаСервере() 
	ОтметитьНезаполненныеЗначенияОчиститьЗагруженоОшибки();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеИсточник", 
		СопоставленныеДанные.Выгрузить(Новый Структура("ЕстьНезаполненныеЗначения", Ложь), "ДокументМаршрутныйЛист"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ДокументМаршрутныйЛист КАК МаршрутныйЛист
	|ПОМЕСТИТЬ втДанныеИсточник
	|ИЗ
	|	&ДанныеИсточник КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(битМаршрутныйЛист.Ссылка) КАК Рейс,
	|	битМаршрутныйЛист.ДокументОснование КАК МаршрутныйЛист
	|ПОМЕСТИТЬ втРейсы
	|ИЗ
	|	Документ.битМаршрутныйЛист КАК битМаршрутныйЛист
	|ГДЕ
	|	битМаршрутныйЛист.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.Рейс)
	|	И битМаршрутныйЛист.Проведен
	|	И битМаршрутныйЛист.ДокументОснование В
	|			(ВЫБРАТЬ
	|				втДанныеИсточник.МаршрутныйЛист
	|			ИЗ
	|				втДанныеИсточник)
	|
	|СГРУППИРОВАТЬ ПО
	|	битМаршрутныйЛист.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеИсточник.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ЕСТЬNULL(втРейсы.Рейс, НЕОПРЕДЕЛЕНО) КАК Рейс
	|ИЗ
	|	втДанныеИсточник КАК втДанныеИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРейсы КАК втРейсы
	|		ПО втДанныеИсточник.МаршрутныйЛист = втРейсы.МаршрутныйЛист";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл                                                                                 
		СтруктураПоиска = Новый Структура("ЕстьНезаполненныеЗначения, ДокументМаршрутныйЛист", Ложь, Выборка.МаршрутныйЛист);
		СтрокиМЛ = СопоставленныеДанные.НайтиСтроки(СтруктураПоиска);
		Если Не ЗначениеЗаполнено(Выборка.Рейс) Тогда                
			Для каждого СтрокаМЛ Из СтрокиМЛ Цикл
				СтрокаМЛ.ТекстОшибки = НСтр("ru='Не найден рейс'");
				СтрокаМЛ.ЕстьОшибки = Истина;
			КонецЦикла;
		Иначе
			Если СтрокиМЛ.Количество() > 0 Тогда
				РейсОбъект = Выборка.Рейс.ПолучитьОбъект(); 
				Изменен = Ложь;
				Для каждого СтрокаМЛ Из СтрокиМЛ Цикл
					СтрокиЗаказы = РейсОбъект.Заказы.НайтиСтроки(Новый Структура("Заказ", СтрокаМЛ.ДокументЗаказ));
					Для каждого СтрокаЗаказ Из СтрокиЗаказы Цикл
						СтрокаЗаказ.ДатаВыгрузкиПрибытие = СтрокаМЛ.Прибытие;
						СтрокаЗаказ.ДатаВыгрузкиУбытие = СтрокаМЛ.Убытие;
						Изменен = Истина;
					КонецЦикла;          
					Если СтрокиЗаказы.Количество() = 0 Тогда
						СтрокаМЛ.ТекстОшибки = НСтр("ru='Не найден заказ в рейсе'");
						СтрокаМЛ.ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЦикла;   
				Если Изменен = Истина Тогда
					Попытка
						РейсОбъект.Записать(РежимЗаписиДокумента.Запись);
						Для каждого СтрокаМЛ Из СтрокиМЛ Цикл
							Если Не СтрокаМЛ.ЕстьОшибки Тогда
								СтрокаМЛ.Загружено = Истина;
							КонецЕсли;
						КонецЦикла;					
					Исключение
						ТекстОшибки = НСтр("ru='Не удалось записать рейс по причине %1'");
						ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибки());
						Для каждого СтрокаМЛ Из СтрокиМЛ Цикл
							Если Не СтрокаМЛ.ЕстьОшибки Тогда
								СтрокаМЛ.ЕстьОшибки = Истина;
								СтрокаМЛ.ТекстОшибки = ТекстОшибки;
							КонецЕсли;
						КонецЦикла;					
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтметитьОшибкиЗагрузки(ТаблицаОшибок)
	СтрокиСОшибками = СопоставленныеДанные.НайтиСтроки(Новый Структура("ЕстьНезаполненныеЗначения, Загружено", Ложь, Ложь));
	СтруктураПоиска = Новый Структура("ПунктПогрузки, ЗонаДоставки, КлассГрузоподъемности, ТипКузова, Период, ДатаОкончания"); 
	ТекстЗаднимЧисломШаблон = НСтр("ru='Загрузка задним числом. Текущий тариф установлен %1'");
	ТекстПересечениеПериодовШаблон = НСтр("ru='Пересечение периодов. Текущий тариф установлен %1'");
	Для каждого СтрокаОшибка Из СтрокиСОшибками Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОшибка);
		СтруктураПоиска.Вставить("ПеревозчикКонтрагент", СтрокаОшибка.Перевозчик);
		НайденныеОшибки = ТаблицаОшибок.НайтиСтроки(СтруктураПоиска);
		Если НайденныеОшибки.Количество() > 0 Тогда
			ТекстОшибкиЗаднимЧислом = ?(Не НайденныеОшибки[0].ЗагрузкаЗаднимЧислом, "", 
				СтрШаблон(ТекстЗаднимЧисломШаблон, НайденныеОшибки[0].ПериодРегистр));
			ТекстОшибкиПересечениеПериодов = ?(Не НайденныеОшибки[0].ПересечениеПериодов, "", 
				СтрШаблон(ТекстПересечениеПериодовШаблон, НайденныеОшибки[0].ПериодРегистр));
			СтрокаОшибка.ЕстьОшибки = Истина;
			СтрокаОшибка.ТекстОшибки = ТекстОшибкиЗаднимЧислом
				+ ?(ТекстОшибкиЗаднимЧислом = "", "", Символы.ПС)
				+ ТекстОшибкиПересечениеПериодов;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УбратьПробелыОпределитьНомерПервойСтрокиСДанными()
	Для СтрокаИндекс = 1 По ЗагруженныеДанные.ВысотаТаблицы Цикл
		ЕстьЗаполненныеЗначения = Ложь;
		Для КолонкаИндекс = 1 По ЗагруженныеДанные.ШиринаТаблицы Цикл
			Значение = СокрЛП(ЗагруженныеДанные.Область(СтрокаИндекс, КолонкаИндекс).Текст);
			ЕстьЗаполненныеЗначения = Не ПустаяСтрока(Значение);
			ЗагруженныеДанные.Область(СтрокаИндекс, КолонкаИндекс).Текст = Значение;
		КонецЦикла;
		Если НомерПервойСтрокиСДанными = 0 И ЕстьЗаполненныеЗначения Тогда
			НомерПервойСтрокиСДанными = СтрокаИндекс;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗагруженныеДанныеНаСервере(АдресРезультата)
	НомерПервойСтрокиСДанными = 0;
	ЗагруженныеДанные.Очистить();
	СопоставленныеДанные.Очистить();

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xlsx");
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресРезультата);
	ДанныеФайла.Записать(ИмяВременногоФайла);
	ЗагруженныеДанные.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	УдалитьФайлы(ИмяВременногоФайла);
	
	УбратьПробелыОпределитьНомерПервойСтрокиСДанными();
	АнализИменКолонок();
КонецПроцедуры          

&НаСервере
Процедура АнализИменКолонок()
	ИменаКолонок = Новый Массив;
	Для КолонкаИндекс = 1 По ЗагруженныеДанные.ШиринаТаблицы Цикл
		ИменаКолонок.Добавить(ЗагруженныеДанные.Область(НомерПервойСтрокиСДанными, КолонкаИндекс).Текст);
	КонецЦикла;

	НастройкиКолонок.Очистить();          
	Для Индекс = 0 По ИменаКолонок.ВГраница() Цикл
		ИменаКолонок[Индекс] = НРег(ИменаКолонок[Индекс]);
	КонецЦикла;

	ДобавитьСтрокуРеквизита("Дата", "Дата", ИменаКолонок);
	ДобавитьСтрокуРеквизита("Номер", "NUMBER; № заказа - № заказа с МЛ", ИменаКолонок);
	ДобавитьСтрокуРеквизита("Прибытие", "Прибытие", ИменаКолонок);
	ДобавитьСтрокуРеквизита("Убытие", "Убытие; Выполнение", ИменаКолонок);

	НомерПервойСтрокиСДанными = НомерПервойСтрокиСДанными + 1;

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуРеквизита(ИмяРеквизита, ТекстПоиска, ИменаКолонок, Игнорировать = Ложь)
	СтрокиПоиска = СтрРазделить(ТекстПоиска, ";", Ложь);
	НомерКолонки = 0;
	Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
		СтрокаПоиска = НРег(СокрЛП(СтрокаПоиска));
		РезультатПоиска = ИменаКолонок.Найти(СтрокаПоиска);
		Если Не РезультатПоиска = Неопределено Тогда
			НомерКолонки = РезультатПоиска + 1;
			Прервать;
		КонецЕсли;   
	КонецЦикла;    
	Если НомерКолонки = 0 И Игнорировать Тогда
		НомерКолонки = - 1;		
	КонецЕсли;
	НоваяСтрока = НастройкиКолонок.Добавить();
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.НомерКолонки = НомерКолонки;
КонецПроцедуры

#Область СопоставлениеДанных

&НаКлиенте
Функция ЕстьВсеДанныеДляСопоставления()
	Отказ = Ложь; 
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстОшибки = НСтр("ru='Укажите организацию'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Организация", , Отказ);
	КонецЕсли;
	Для каждого СтрокаНастройки Из НастройкиКолонок Цикл
		Если СтрокаНастройки.НомерКолонки = 0 Тогда
			ТекстОшибки = НСтр("ru='Для реквизита %1 укажите номер колонки источника'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтрокаНастройки.ИмяРеквизита);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "НастройкиКолонокНомерКолонки", , Отказ);
		КонецЕсли;
	КонецЦикла;	
	Возврат Не Отказ;
КонецФункции

&НаСервере
Процедура СопоставитьДанныеСервер()                     
	НомераКолонок = Новый Соответствие;
	Для каждого СтрокаНастройки Из НастройкиКолонок Цикл
		НомераКолонок.Вставить(СтрокаНастройки.ИмяРеквизита, СтрокаНастройки.НомерКолонки);
	КонецЦикла;       
	КэшМЛ = Неопределено; КэшЗ = Неопределено;
	СопоставленныеДанные.Очистить();                 
	НомерСтроки = 0;                                                                                             
	ТекущийПериод = НачалоГода(ТекущаяДатаСеанса());
	Для ИндексСтроки = НомерПервойСтрокиСДанными По ЗагруженныеДанные.ВысотаТаблицы Цикл
		НоваяСтрока = СопоставленныеДанные.Добавить();
		НомерСтроки = НомерСтроки + 1;
		НоваяСтрока.НомерСтроки = НомерСтроки;
		ОпределитьДату(НоваяСтрока.Период, ИндексСтроки, НомераКолонок["Дата"], ТекущийПериод);
		ОпределитьДату(НоваяСтрока.Прибытие, ИндексСтроки, НомераКолонок["Прибытие"], Дата(1, 1, 1));
		ОпределитьДату(НоваяСтрока.Убытие, ИндексСтроки, НомераКолонок["Убытие"], Дата(1, 1, 1));
		ОпределитьМаршрутныйЛист(НоваяСтрока.НомерДокументаМаршрутныйЛист, НоваяСтрока.Период, 
			НоваяСтрока.ДокументМаршрутныйЛист, ИндексСтроки, НомераКолонок["Номер"], КэшМЛ);
		ОпределитьЗаказ(НоваяСтрока.НомерДокументаЗаказ, НоваяСтрока.Период, 
			НоваяСтрока.ДокументЗаказ, ИндексСтроки, НомераКолонок["Номер"], КэшЗ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОпределитьДату(Результат, НомерСтроки, НомерКолонки, ЗначениеПоУмолчанию = Неопределено)
	Результат = ЗначениеПоУмолчанию;
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		Значение = ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст;
		
		Если СтрДлина(Значение) = 4 Тогда
			Результат = Дата(Значение + "0101");
		ИначеЕсли Не ПустаяСтрока(Значение) Тогда
			Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(Значение, ЧастиДаты.ДатаВремя);
		Иначе 
			// Nop
		КонецЕсли;
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура ОпределитьМаршрутныйЛист(ЗначениеТекст, Период, МаршрутныйЛист, НомерСтроки, НомерКолонки, Кэш)
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		ЗначениеТекст = ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст;
		ПозицияСлэш = СтрНайти(ЗначениеТекст, "/");
		ЗначениеТекст = Прав("0000000000000" + Сред(ЗначениеТекст, ПозицияСлэш + 1), 
			Метаданные.Документы.битМаршрутныйЛист.СтандартныеРеквизиты.Номер.Тип.КвалификаторыСтроки.Длина);
		Если Кэш = Неопределено Тогда
			Кэш = Новый Соответствие;
		КонецЕсли;     
		Результат = Кэш[ЗначениеТекст];
		Если Результат = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	битМаршрутныйЛист.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.битМаршрутныйЛист КАК битМаршрутныйЛист
			|ГДЕ
			|	битМаршрутныйЛист.Номер = &Номер
			|	И НАЧАЛОПЕРИОДА(битМаршрутныйЛист.Дата, ГОД) = НАЧАЛОПЕРИОДА(&Дата, ГОД)
			|	И битМаршрутныйЛист.Организация = &Организация";
			Запрос.УстановитьПараметр("Номер", ЗначениеТекст);
			Запрос.УстановитьПараметр("Дата", Период);
			Запрос.УстановитьПараметр("Организация", Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
			Кэш.Вставить(ЗначениеТекст, Результат);
		КонецЕсли;                               
		МаршрутныйЛист = Результат;
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура ОпределитьЗаказ(ЗначениеТекст, Период, Заказ, НомерСтроки, НомерКолонки, Кэш)
	Если НомерКолонки > 0 И НомерКолонки <= ЗагруженныеДанные.ШиринаТаблицы Тогда
		ЗначениеТекст = ЗагруженныеДанные.Область(НомерСтроки, НомерКолонки).Текст;
		ПозицияСлэш = СтрНайти(ЗначениеТекст, "/");
		ЗначениеТекст = Лев(ЗначениеТекст, ПозицияСлэш - 1);                   
		Если Кэш = Неопределено Тогда
			Кэш = Новый Соответствие;
		КонецЕсли;     
		Результат = Кэш[ЗначениеТекст];
		Если Результат = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Номер = &Номер
			|	И ЗаказКлиента.Организация = &Организация
			|	И НАЧАЛОПЕРИОДА(ЗаказКлиента.Дата, ГОД) = НАЧАЛОПЕРИОДА(&Дата, ГОД)";
			Запрос.УстановитьПараметр("Номер", ЗначениеТекст);
			Запрос.УстановитьПараметр("Дата", Период);
			Запрос.УстановитьПараметр("Организация", Организация);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;
			Кэш.Вставить(ЗначениеТекст, Результат);
		КонецЕсли;                               
		Заказ = Результат;
	КонецЕсли;   
КонецПроцедуры

#КонецОбласти

#КонецОбласти