#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
// Процедура печати документа.
//                
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТОРГ16_ru") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ПФ_MXL_ТОРГ16_ru",
			НСтр("ru = 'Акт о списании товаров (ТОРГ-16)'"),
			СформироватьПечатнуюФормуТОРГ16(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет команду печати печатной формы Задания на отбор (размещение) товаров в коллекцию команд печати документа.
//
// Параметры:
//	КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//	
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - элемент коллекции КомандыПечати, содержащий описание команды печати.
//
Процедура ДобавитьКомандуПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.бг_ПечатьТОРГ16_ВнутреннееПотреблениеТоваров";
	КомандаПечати.Идентификатор = "ПФ_MXL_ТОРГ16_ru";
	КомандаПечати.Представление = НСтр("ru = 'Акт о списании товаров (ТОРГ-16)';
										|en = 'Retirement certificate (TORG-16)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры 

Функция СформироватьПечатнуюФормуТОРГ16(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	НомерДокумента = 0;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_БГ_ТОРГ16";
	
	Если ТипЗнч(МассивОбъектов) = Тип("Соответствие") Тогда
		СтруктураТипов = МассивОбъектов;
	Иначе
		СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	КонецЕсли;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;

		Для Каждого ДокументОснование Из СтруктураОбъектов.Значение Цикл
			
			НомерДокумента = НомерДокумента + 1;
			
			Если НомерДокумента > 1 Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		
			ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыТОРГ16(ПараметрыПечати, ДокументОснование);
						
			Если Не ДанныеДляПечати = Неопределено Тогда
				ЗаполнитьТабличныйДокументТОРГ16(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ДокументОснование);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Заполняет табличный документ печатной формы ТОРГ-16 данными документа, которого нужно распечатать.
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент - табличный документ печатной формы ТОРГ-16,
//	ДанныеДляПечати   - Структура         - структура данных объекта печати:
// 		* РезультатПоШапке   - РезультатЗапроса
// 		* РезультатПоДатам   - РезультатЗапроса
// 		* РезультатПоТоварам - РезультатЗапроса
//	ОбъектыПечати     - СписокЗначений    - список объектов печати,
//	ДокументОснование - ДокументСсылка.ВнутреннееПотреблениеТоваров    - ссылка на документ, который нужно распечатать.
//
Процедура ЗаполнитьТабличныйДокументТОРГ16(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ДокументОснование)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы(
				"Обработка.бг_ПечатьТОРГ16_ВнутреннееПотреблениеТоваров.ПФ_MXL_ТОРГ16_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	Шапка                      = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ТабличнаяЧастьПервогоЛиста = ДанныеДляПечати.РезультатПоДатам.Выбрать();
	ТабличнаяЧастьВторогоЛиста = ДанныеДляПечати.РезультатПоТоварам.Выбрать();
	ТаблицаКурсовВалют         = ДанныеДляПечати.РезультатКурсыВалют;
	
	КоэффициентПересчета = ТаблицаКурсовВалют.Найти(ДокументОснование, "Ссылка");
	КурсВалюты           = ?(ЗначениеЗаполнено(КоэффициентПересчета), КоэффициентПересчета.Курс, 1);
	
	ОбластьШапкаШтрихкод                = Макет.ПолучитьОбласть("ШапкаШтрихкод");
	ОбластьШапкаОснование               = Макет.ПолучитьОбласть("ШапкаОснование");
	ОбластьЗаголовокТаблицыПервогоЛиста = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
	ОбластьСтрокаПервогоЛиста           = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");
	ОбластьЗаголовокТаблицыВторогоЛиста = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
	ОбластьСтрокаВторогоЛиста           = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");
	ОбластьИтого                        = Макет.ПолучитьОбласть("Итого");
	ОбластьПодвал                       = Макет.ПолучитьОбласть("Подвал");
	
	Шапка.Следующий();
	
	ОбластьШапкаШтрихкод.Параметры.Заполнить(Шапка);
	
	ПодразделениеПредставление = СкладыСервер.ПолучитьПредставлениеСклада(Шапка.ПодразделениеПредставление);
	
	СтруктураДанныхШапкиШтрихкод = Новый Структура("ПодразделениеПредставление", ПодразделениеПредставление);
	ОбластьШапкаШтрихкод.Параметры.Заполнить(СтруктураДанныхШапкиШтрихкод);
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапкаШтрихкод,
		Шапка.Ссылка);
	ТабличныйДокумент.Вывести(ОбластьШапкаШтрихкод);
			
	НомерДокументаПечати       = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.Номер);
	ОснованиеНомер             = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Шапка.НомерОснования);
	ФИОРуководителя            = Шапка.Руководитель;
	
	СтруктураДанныхШапкиОснование = Новый Структура;
	СтруктураДанныхШапкиОснование.Вставить("ФИОРуководителя", ФИОРуководителя);
	СтруктураДанныхШапкиОснование.Вставить("НомерДокумента",  НомерДокументаПечати);
	СтруктураДанныхШапкиОснование.Вставить("ОснованиеНомер",  ОснованиеНомер);
	
	ОбластьШапкаОснование.Параметры.Заполнить(Шапка);
	
	Если ЗначениеЗаполнено(Шапка.ДокументОснование) Тогда
		ПредставлениеОснования = Шапка.ДокументОснование.ПолучитьОбъект().Метаданные().Синоним;
		
		СтруктураДанныхШапкиОснование.Вставить("ОснованиеПредставление", ПредставлениеОснования);
	КонецЕсли;
	
	ОбластьШапкаОснование.Параметры.Заполнить(СтруктураДанныхШапкиОснование);
	ТабличныйДокумент.Вывести(ОбластьШапкаОснование);
	
	НомерСтраницы = 0;
	НомерСтроки   = 0;
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(ОбластьСтрокаПервогоЛиста);
	
	Пока ТабличнаяЧастьПервогоЛиста.Следующий() Цикл
		
		НомерСтроки                = НомерСтроки + 1;
		СтруктураСтрокПервогоЛиста = Новый Структура("ДатаСписанияТовара", Шапка.ДатаДокумента);
		
		ОбластьСтрокаПервогоЛиста.Параметры.Заполнить(СтруктураСтрокПервогоЛиста);
		
		Если НомерСтроки = 1 Тогда // первая строка
			
			НомерСтраницы             = НомерСтраницы + 1;
			СтруктураЗаголовкаТаблицы = Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы);
			
			ОбластьЗаголовокТаблицыПервогоЛиста.Параметры.Заполнить(СтруктураЗаголовкаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыПервогоЛиста);
			
		ИначеЕсли НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
			
			НомерСтраницы = НомерСтраницы + 1;
			СтруктураЗаголовкаТаблицы = Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы);
			
			ОбластьЗаголовокТаблицыПервогоЛиста.Параметры.Заполнить(СтруктураЗаголовкаТаблицы);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыПервогоЛиста);
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаПервогоЛиста);
		
	КонецЦикла;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ИтогоСтоимость = 0;
	
	// Выводим многострочную часть документа
	НомерСтроки     = 0;
	КоличествоСтрок = ТабличнаяЧастьВторогоЛиста.Количество();
	
	ДопПараметрыПредставлениеНоменклатуры = 
							НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Пока ТабличнаяЧастьВторогоЛиста.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		ОбластьСтрокаВторогоЛиста.Параметры.Заполнить(ТабличнаяЧастьВторогоЛиста);
		
		ТоварНаименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ТабличнаяЧастьВторогоЛиста.НоменклатураПредставление,
			ТабличнаяЧастьВторогоЛиста.ХарактеристикаПредставление,
			,
			,
			ДопПараметрыПредставлениеНоменклатуры);
		
		ЦенаНеЗадана = НЕ ЗначениеЗаполнено(ТабличнаяЧастьВторогоЛиста.Цена);
		Цена         = ?(ЦенаНеЗадана, 0, ТабличнаяЧастьВторогоЛиста.Цена * КурсВалюты);
		Стоимость    = ?(ЦенаНеЗадана, 0, ТабличнаяЧастьВторогоЛиста.Цена
			* ТабличнаяЧастьВторогоЛиста.КоличествоМест * КурсВалюты);
		
		СтруктураДанныхТовара = Новый Структура;
		СтруктураДанныхТовара.Вставить("ТоварНаименование", ТоварНаименование);
		СтруктураДанныхТовара.Вставить("Цена",              Цена);
		СтруктураДанныхТовара.Вставить("Стоимость",         Стоимость);
		
		ОбластьСтрокаВторогоЛиста.Параметры.Заполнить(СтруктураДанныхТовара);
		
		Если НомерСтроки = 1 Тогда // первая строка
			
			НомерСтраницы             = НомерСтраницы + 1;
			СтруктураЗаголовкаТаблицы = Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы);
			
			ОбластьЗаголовокТаблицыВторогоЛиста.Параметры.Заполнить(СтруктураЗаголовкаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыВторогоЛиста);
			
		Иначе
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрокаВторогоЛиста);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
			КонецЕсли;
			
			Если НомерСтроки <> 1 И Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы             = НомерСтраницы + 1;
				СтруктураЗаголовкаТаблицы = Новый Структура("НомерСтраницы", "Страница " + НомерСтраницы);
				
				ОбластьЗаголовокТаблицыВторогоЛиста.Параметры.Заполнить(СтруктураЗаголовкаТаблицы);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицыВторогоЛиста);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьСтрокаВторогоЛиста);
		
		// Обновим итоги по документу
		ИтогоСтоимость = ИтогоСтоимость + ОбластьСтрокаВторогоЛиста.Параметры.Стоимость;
		
	КонецЦикла;
	
	// Выводим итоги по документу в общем
	СтруктураДанныхИтогов = Новый Структура("Итого", ИтогоСтоимость);
	
	ОбластьИтого.Параметры.Заполнить(СтруктураДанныхИтогов);
	ТабличныйДокумент.Вывести(ОбластьИтого);
	
	// Выводим подвал документа
	МассивВыводимыхОбластей.Очистить();
	МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
	
	Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		НомерСтраницы = НомерСтраницы + 1;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	КопеекЦифрами           = (ИтогоСтоимость - Цел(ИтогоСтоимость)) * 100;
	КопеекЦифрами           = Формат(КопеекЦифрами, "ЧЦ=2; ЧДЦ=0; ЧН='00'");
	СуммаСписанияПрописью   = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(Цел(ИтогоСтоимость),
		Справочники.Валюты.ПустаяСсылка(), Истина);
	ДолжностьПредседателя   = Шапка.ДолжностьРуководителя;
	ФИОПредседателя         = Шапка.Руководитель;
	ДолжностьЧленаКомиссии2 = НСтр("ru = 'Главный бухгалтер';
									|en = 'Chief Accountant'", Метаданные.Языки.Русский.КодЯзыка);
	ФИОЧленаКомиссии2       = Шапка.ГлавныйБухгалтер;
	ДолжностьМОЛ            = Шапка.ДолжностьКладовщика;
	ФИОМОЛ                  = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Кладовщик, Шапка.ДатаДокумента);
	
	СтруктураДанныхПодвала = Новый Структура;
	СтруктураДанныхПодвала.Вставить("КопеекЦифрами",           КопеекЦифрами);
	СтруктураДанныхПодвала.Вставить("СуммаСписанияПрописью",   СуммаСписанияПрописью);
	СтруктураДанныхПодвала.Вставить("ДолжностьПредседателя",   ДолжностьПредседателя);
	СтруктураДанныхПодвала.Вставить("ФИОпредседателя",         ФИОПредседателя);
	СтруктураДанныхПодвала.Вставить("ДолжностьЧленаКомиссии2", ДолжностьЧленаКомиссии2);
	СтруктураДанныхПодвала.Вставить("ФИОЧленаКомиссии2",       ФИОЧленаКомиссии2);
	СтруктураДанныхПодвала.Вставить("ДолжностьМОЛ",            ДолжностьМОЛ);
	СтруктураДанныхПодвала.Вставить("ФИОМОЛ",                  ФИОМОЛ);
	
	ОбластьПодвал.Параметры.Заполнить(Шапка);
	ОбластьПодвал.Параметры.Заполнить(СтруктураДанныхПодвала);
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
КонецПроцедуры

// Функция получает данные для формирования печатной формы ТОРГ-16.
//
// Параметры:
//	ПараметрыПечати   - Структура                                        - структура дополнительных параметров печати,
//	ДокументОснование - ДокументСсылка.ВнутреннееПотреблениеТоваров - ссылка на документ, который нужно распечатать.
//
// Возвращаемое значение:
//	Структура - структура с данными для печати формы ТОРГ-16.
//
Функция ПолучитьДанныеДляПечатнойФормыТОРГ16(ПараметрыПечати, ДокументОснование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПредварительныхДанных = Новый Запрос;
	ЗапросПредварительныхДанных.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ВнутреннееПотреблениеТоваров.ИсправляемыйДокумент.Дата,
	|				ВнутреннееПотреблениеТоваров.Дата)						КАК ДатаДокумента,
	|	ВнутреннееПотреблениеТоваров.Дата									КАК Дата,
	|	ВнутреннееПотреблениеТоваров.Организация                            КАК Организация,
	|	ВнутреннееПотреблениеТоваров.Склад                                  КАК Склад,
	|	ВнутреннееПотреблениеТоваров.ВидЦены                                КАК ВидЦен
	|
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка = &ДокументОснование";
	
	ЗапросПредварительныхДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ПредварительныеДанныеРезультат = ЗапросПредварительныхДанных.Выполнить().Выбрать();
	
	ПредварительныеДанныеРезультат.Следующий();
	
	ДатаДокумента	= ПредварительныеДанныеРезультат.ДатаДокумента;
	Организация		= ПредварительныеДанныеРезультат.Организация;
	Склад			= ПредварительныеДанныеРезультат.Склад;
	ВидЦены			= ПредварительныеДанныеРезультат.ВидЦен;
	
	// Ответственные лица в печатной форме
	СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация,
		КонецДня(ДатаДокумента));
		
	ИспользуетсяЦенообразование25 =
						ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ПредварительныеДанныеРезультат.Дата);
						
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("ДатаЦен",               	ПредварительныеДанныеРезультат.Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент",       	ДокументОснование);
	Запрос.УстановитьПараметр("Руководитель",          	СтруктураОтветственных.Руководитель);
	Запрос.УстановитьПараметр("ДолжностьРуководителя", 	СтруктураОтветственных.РуководительДолжность);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер",      	СтруктураОтветственных.ГлавныйБухгалтер);
    Запрос.УстановитьПараметр("ВидЦен", 			   	ВидЦены);
	
	Запрос.Текст 	= ТекстЗапроса(ИспользуетсяЦенообразование25);			
	Результаты 		= Запрос.ВыполнитьПакет();
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РезультатПоШапке",    Результаты[2]);
	СтруктураВозврата.Вставить("РезультатПоДатам",    Результаты[4]);
	СтруктураВозврата.Вставить("РезультатПоТоварам",  Результаты[4]);
	СтруктураВозврата.Вставить("РезультатКурсыВалют", ТаблицаКурсовВалют(ДокументОснование));
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ТаблицаКурсовВалют(МассивДокументов)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ВнутреннееПотреблениеТоваров.Ссылка КАК Ссылка,
	                      |	НАЧАЛОПЕРИОДА(ВнутреннееПотреблениеТоваров.Дата, ДЕНЬ) КАК Дата,
	                      |	ВнутреннееПотреблениеТоваров.ВидЦены.ВалютаЦены КАК Валюта,
	                      |	ВнутреннееПотреблениеТоваров.Организация.ВалютаРегламентированногоУчета КАК БазоваяВалюта
	                      |ИЗ
	                      |	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	                      |ГДЕ
	                      |	ВнутреннееПотреблениеТоваров.Ссылка В(&МассивДокументов)
	                      |	И ВнутреннееПотреблениеТоваров.ВидЦены.ВалютаЦены <> ВнутреннееПотреблениеТоваров.Организация.ВалютаРегламентированногоУчета
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Валюта,
	                      |	Дата");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Ссылка",    		Новый ОписаниеТипов("ДокументСсылка.ВнутреннееПотреблениеТоваров"));
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",       		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЧислитель",	ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЗнаменатель",	 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата, Выборка.БазоваяВалюта);
		НоваяСтрока.КурсЧислитель = КурсыВалюты.КурсЧислитель;
		НоваяСтрока.КурсЗнаменатель = КурсыВалюты.КурсЗнаменатель;
		
	КонецЦикла;
	
	Возврат ТаблицаКурсовВалют;
	
КонецФункции // ТаблицаКурсовВалют()
 
Функция ТекстЗапроса(ИспользуетсяЦенообразование25)
	
	ДопКолонка             	= ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	ИспользуетсяДопКолонка 	= ЗначениеЗаполнено(ДопКолонка);
				
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваров.Ссылка             КАК Ссылка,
	|	КОЛИЧЕСТВО(ИнвентаризационнаяОпись.Ссылка) КАК Количество
	|
	|ПОМЕСТИТЬ КоличествоИнвентаризационныхОписей
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризационнаяОпись КАК ИнвентаризационнаяОпись
	|		ПО (ВнутреннееПотреблениеТоваров.Дата МЕЖДУ ИнвентаризационнаяОпись.ДатаНачала И ИнвентаризационнаяОпись.ДатаОкончания)
	|			И ВнутреннееПотреблениеТоваров.Склад       = ИнвентаризационнаяОпись.Склад
	|			И ВнутреннееПотреблениеТоваров.Организация = ИнвентаризационнаяОпись.Организация
	|			И (ИнвентаризационнаяОпись.Проведен)
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннееПотреблениеТоваров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КоличествоИнвентаризационныхОписей.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА КоличествоИнвентаризационныхОписей.Количество = 1
	|			ТОГДА ИнвентаризационнаяОпись.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ИнвентаризационнаяОпись.ПустаяСсылка)
	|	КОНЕЦ                                     КАК Основание
	|
	|ПОМЕСТИТЬ ДокументОснование
	|ИЗ
	|	КоличествоИнвентаризационныхОписей КАК КоличествоИнвентаризационныхОписей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИнвентаризационнаяОпись КАК ИнвентаризационнаяОпись
	|		ПО (КоличествоИнвентаризационныхОписей.Ссылка.Дата МЕЖДУ ИнвентаризационнаяОпись.ДатаНачала И ИнвентаризационнаяОпись.ДатаОкончания)
	|			И КоличествоИнвентаризационныхОписей.Ссылка.Склад = ИнвентаризационнаяОпись.Склад
	|			И КоличествоИнвентаризационныхОписей.Ссылка.Организация = ИнвентаризационнаяОпись.Организация
	|			И (ИнвентаризационнаяОпись.Проведен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка                                                     КАК Ссылка,
	|	ЕСТЬNULL(ДокументСписания.ИсправляемыйДокумент.Номер, ДокументСписания.Номер) КАК Номер,
	|	ЕСТЬNULL(ДокументСписания.ИсправляемыйДокумент.Дата, ДокументСписания.Дата) КАК ДатаДокумента,
	|	ДокументСписания.Организация                                        КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Организация.НаименованиеСокращенное) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Организация.КодПоОКПО)               КАК ОрганизацияПоОКПО,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Организация.Префикс)                 КАК Префикс,
	|	ДокументСписания.Склад                                              КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Склад)                               КАК ПодразделениеПредставление,
	|	ДокументСписания.Склад.ТекущийОтветственный                         КАК Кладовщик,
	|	ДокументСписания.Склад.ТекущаяДолжностьОтветственного               КАК ДолжностьКладовщика,
	|	ДокументСписания.Ответственный.ФизическоеЛицо                       КАК Ответственный,
	|	&Руководитель                                                       КАК Руководитель,
	|	&ДолжностьРуководителя                                              КАК ДолжностьРуководителя,
	|	&ГлавныйБухгалтер                                                   КАК ГлавныйБухгалтер,
	|	Документ.Основание.Дата                                             КАК ОснованиеДата,
	|	Документ.Основание.Номер                                            КАК НомерОснования,
	|	Документ.Основание                                                  КАК ДокументОснование
	|ИЗ
	|	ДокументОснование КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ДокументСписания
	|		ПО Документ.Ссылка = ДокументСписания.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
	|	&ТекстЗапросаТоварКод                                       КАК ТоварКод,
	|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
	|	ТоварыСписания.Характеристика                               КАК Характеристика,
	|	ТоварыСписания.Номенклатура.НаименованиеПолное              КАК НоменклатураПредставление,
	|	ТоварыСписания.Характеристика.НаименованиеПолное            КАК ХарактеристикаПредставление,
	|	ТоварыСписания.Номенклатура.ЕдиницаИзмерения.Код            КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыСписания.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	&ТекстЗапросаВес                                            КАК МассаОдногоМеста,
	|	&ПоляДляЦенообразованияВыборка,
	|	ТоварыСписания.Количество                                   КАК КоличествоМест
	|ПОМЕСТИТЬ ТоварыСписания
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ТоварыСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ВидыНоменклатуры.Ссылка = ТоварыСписания.Номенклатура.ВидНоменклатуры
	|ГДЕ
	|	ТоварыСписания.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
	|	ТоварыСписания.ТоварКод                                     КАК ТоварКод,
	|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
	|	ТоварыСписания.НоменклатураПредставление                    КАК НоменклатураПредставление,
	|	ТоварыСписания.ХарактеристикаПредставление                  КАК ХарактеристикаПредставление,
	|	ТоварыСписания.ЕдиницаИзмеренияКодПоОКЕИ                    КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ТоварыСписания.ЕдиницаИзмеренияПредставление                КАК ЕдиницаИзмеренияПредставление,
	|	ТоварыСписания.МассаОдногоМеста                             КАК МассаОдногоМеста,
	|	ТоварыСписания.КоличествоМест                               КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА НЕ &ТекстЗапросаКоэффициентУпаковки ЕСТЬ NULL
	|				И &ТекстЗапросаКоэффициентУпаковки <> 0
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / &ТекстЗапросаКоэффициентУпаковки
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
	|	КОНЕЦ                                                       КАК Цена
	|ИЗ
	|	ТоварыСписания КАК ТоварыСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ &ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатуры
	|		ПО 
	|			&УсловиеСоедиенияЦеныНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыСписания.НомерСтроки";	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЦеныНоменклатуры.Упаковка",
			"ЦеныНоменклатуры.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВес", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ТоварыСписания.Номенклатура.ЕдиницаИзмерения",
			"ТоварыСписания.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаТоварКод", "ТоварыСписания.Номенклатура." +
		?(ИспользуетсяДопКолонка, ДопКолонка, "Код"));
		
	НастройкаЦенообразования = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
	НастройкаЦенообразования.ИсточникТоваров = "ТоварыСписания";
	НастройкаЦенообразования.ПолеУпаковка = "";
		
	ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования,
																				,
																				ИспользуетсяЦенообразование25);
	Если ЗначениеЗаполнено(ТекстЗамены) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка", ТекстЗамены);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка,", "");
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ЦеныНоменклатурыСрезПоследних",
			ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры(
								"ТоварыСписания",
								"&ДатаЦен",
								Новый Структура("ВТаблице", "&ВидЦен"), ИспользуетсяЦенообразование25));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&УсловиеСоедиенияЦеныНоменклатурыСрезПоследних",
			ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
			"ТоварыСписания",
			"ЦеныНоменклатуры",,ИспользуетсяЦенообразование25));
			
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти
	
#КонецЕсли
