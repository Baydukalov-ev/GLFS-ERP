#Область СлужебныеПроцедурыИФункции

#Область Печать

&После("Печать")
Процедура бг_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_ТОРГ12_ОсновнойМакет_ru") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_MXL_ТОРГ12_ОсновнойМакет_ru",
			НСтр("ru = 'Товарная накладная (ТОРГ-12 основной)';
				|en = 'Invoice (TORG-12 general)'"),
			СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бг_УПД534Прослеж_ОсновнойМакет") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"бг_УПД534Прослеж_ОсновнойМакет",
			НСтр("ru = 'Универсальный передаточный документ (УПД - Основной)';
				|en = 'Universal transfer document (UTD - general)'"),
			СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бг_СчетФактура") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"бг_СчетФактура",
			НСтр("ru = 'Счет-фактура (Основной)';
				|en = 'Tax Invoice (General)'"),
			СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бг_УКД") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"бг_УКД",
			НСтр("ru = 'Универсальный корректировочный документ (УКД - основной)';
				|en = 'Universal adjustment document (UAD - general)'"),
			СформироватьПечатнуюФормуУКД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
КонецПроцедуры

#Область Печать_ТОРГ12

&ИзменениеИКонтроль("СформироватьПечатнуюФормуТОРГ12")
Функция бг_СформироватьПечатнуюФормуТОРГ12(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ12_2";
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;
		
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати);
	КонецЦикла;
#Вставка
	ТабличныйДокумент.ПолеСверху = 10;
	ТабличныйДокумент.ПолеСлева  = 10;
	ТабличныйДокумент.ПолеСнизу  = 10;
	ТабличныйДокумент.ПолеСправа = 10;
#КонецВставки
	Возврат ТабличныйДокумент;
	
КонецФункции

&ИзменениеИКонтроль("ЗаполнитьТабличныйДокументТОРГ12")
Процедура бг_ЗаполнитьТабличныйДокументТОРГ12(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати)
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
						И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	
	КоэффициентПересчетаВТонны     = НоменклатураСервер.КоэффициентПересчетаВТонны(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	ДанныеПечати      	= ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВыводитьГТД = ?(ПараметрыПечати.Свойство("ВыводитьГТД"), ПараметрыПечати.ВыводитьГТД, Ложь);
#Вставка
	бг_ПереопределитьМакетТОРГ12 = ?(ПараметрыПечати.Свойство("бг_ПереопределитьМакетТОРГ12"), ПараметрыПечати.бг_ПереопределитьМакетТОРГ12, Ложь);
	бг_ПечатьВВалюте = Ложь;
#КонецВставки
	
	Если ВыводитьГТД Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ГТД_ru");
	Иначе
		Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ru");
	КонецЕсли;
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
#Вставка
 
		Если бг_ПереопределитьМакетТОРГ12 Тогда
			КатегорияМакета = ДанныеПечати.бг_КатегорияМакета; 
			Если КатегорияМакета = Перечисления.бг_КатегорииМакетовПечатныхФорм.Тандер
				Или КатегорияМакета = Перечисления.бг_КатегорииМакетовПечатныхФорм.Метро
				Или КатегорияМакета = Перечисления.бг_КатегорииМакетовПечатныхФорм.МетроРЦ
				Или КатегорияМакета = Перечисления.бг_КатегорииМакетовПечатныхФорм.Перекресток Тогда
			
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У партнера %1 установлена категория макетов ""%2"". Печать ТОРГ-12 для данной категории временно недоступна.'"),
					ДанныеПечати.Ссылка, КатегорияМакета);
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Партнер);
				Продолжить;
			КонецЕсли;
			бг_ПараметрыМакета = бг_ПараметрыМакетаПечатнойФормыТОРГ12(ДанныеПечати);
			бг_ПечатьВВалюте = бг_ПараметрыМакета.ПечатьВВалюте; 
			бг_ПереопределитьОбластиМакета = бг_ПараметрыМакета.ПереопределитьОбластиМакета; 
			Макет = УправлениеПечатью.МакетПечатнойФормы(бг_ПараметрыМакета.ПутьКМакету); 
		КонецЕсли;
#КонецВставки
		
		Если ДанныеПечати.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 установлен статус ""К предоплате"". Печать ТОРГ-12 в данном статусе не требуется.';
					|en = 'Status of the %1 document is set to ""For prepayment"". It is not required to print TORG-12 in this status.'"),
				ДанныеПечати.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют внеоборотные активы. Печать ТОРГ-12 не требуется';
						|en = 'No capital assets in the %1 document. Do not print TORG-12 '"),
					ДанныеПечати.Ссылка);
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 отсутствуют товары. Печать ТОРГ-12 не требуется';
						|en = 'No goods in the %1 document. Printing of TORG-12 is not required'"),
					ДанныеПечати.Ссылка);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент);
		
		НомерСтраницы = 1;
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть докмента
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтандарт   = Макет.ПолучитьОбласть("Строка");
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьВсего            = Макет.ПолучитьОбласть("Всего");
		
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
			ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
		КонецЕсли;
#Вставка
		Если бг_ПереопределитьМакетТОРГ12 И бг_ПереопределитьОбластиМакета Тогда
			ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб" + бг_ПараметрыМакета.ПостфиксОбластейМакета);
			ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка" + бг_ПараметрыМакета.ПостфиксОбластейМакета);
			Если ИспользоватьНаборы Тогда
				ОбластьМакетаНабор = Макет.ПолучитьОбласть("СтрокаНабор" + бг_ПараметрыМакета.ПостфиксОбластейМакета);
				ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие" + бг_ПараметрыМакета.ПостфиксОбластейМакета);
			КонецЕсли;
		КонецЕсли;
#КонецВставки
		
		ВыводШапки = 0;
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьМакета = ОбластьМакетаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьМакета = ОбластьМакетаКомплектующие;
			Иначе
				ОбластьМакета = ОбластьМакетаСтандарт;
			КонецЕсли;
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, Неопределено,,,ВыводитьСерии);
			Иначе
				НомерСтроки = НомерСтроки + 1;
				ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки,,,ВыводитьСерии);
			КонецЕсли;
#Вставка
			Если бг_ПереопределитьМакетТОРГ12 Или бг_ПечатьВВалюте Тогда
				бг_ЗаполнитьРеквизитыСтрокиТовараТОРГ12ОсновнойМакет(
					СтрокаТовары,
					ОбластьМакета,
					бг_ПараметрыЗаполненияСтрокиПечатиТОРГ12ОсновнойМакет(
						ДанныеПечати,
						бг_ПечатьВВалюте));
			КонецЕсли;
#КонецВставки
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				ОбластьМакета.Параметры.СтавкаНДС = НСтр("ru = 'НДС исчисляется налоговым агентом';
														|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка);
				ОбластьМакета.Параметры.СуммаСНДС = "--";
				ОбластьМакета.Параметры.СуммаНДС = "--";
			КонецЕсли;
			
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
				
				ВыводШапки = 2;
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
#Вставка
				СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта);
#КонецВставки
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);
			МассивВыводимыхОбластей.Добавить(ОбластьИтоговПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда
				ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
				ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны);
#Вставка
			Если бг_ПереопределитьМакетТОРГ12 Или бг_ПечатьВВалюте Тогда
				
				бг_ЗаполнитьИтоговыеСуммыВВалютеТОРГ12ОсновнойМакет(
					ИтоговыеСуммы,
					бг_ПараметрыЗаполненияИтоговыеСуммыВВалютеТОРГ12ОсновнойМакет(ДанныеПечати));
					
				бг_ЗаполнитьМассуВесИСуммуВВалютеПрописью(ИтоговыеСуммы, ДанныеПечати.Валюта);
				
				бг_ЗаполнитьРеквизитыПодвалаТОРГ12ОсновнойМакет(
					ДанныеПечати,
					ОбластьПодвала,
					ИтоговыеСуммы,
					НомерСтраницы,
					бг_ПечатьВВалюте);
			КонецЕсли;
#КонецВставки
				МассивВыводимыхОбластей.Добавить(ОбластьВсего);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;
			
			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
				
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице = "--";
					ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице = "--";
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				ОбнулитьИтогиПоСтранице(ИтоговыеСуммы);
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
#Вставка
				Если НомерСтраницы > 1 Тогда
					НомерДатаДокумента = СтрШаблон(
						"К накладной № %1 от %2",
						ДанныеПечати.Номер,
						Формат(ДанныеПечати.Дата,"ДФ=dd.MM.yyyy"));
					СтруктураПараметров.Вставить("НомерДатаДокумента", НомерДатаДокумента);
				КонецЕсли;
				СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта);
#КонецВставки
				ОбластьЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
			КонецЕсли;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
#Вставка
		Если бг_ПечатьВВалюте Тогда
			бг_ЗаполнитьИтоговыеСуммыВВалютеТОРГ12ОсновнойМакет(
				ИтоговыеСуммы,
				бг_ПараметрыЗаполненияИтоговыеСуммыВВалютеТОРГ12ОсновнойМакет(ДанныеПечати));
				
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСВалютаНаСтранице = "--";
			КонецЕсли;
		КонецЕсли;
#КонецВставки
		ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице = "--";
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаНДСНаСтранице = "--";
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);
#Вставка
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ОбластьМакета.Параметры.ИтогоСуммаСНДСВалюта = "--";
		КонецЕсли;
#КонецВставки
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			ОбластьМакета.Параметры.ИтогоСуммаСНДС = "--";
			ОбластьМакета.Параметры.ИтогоСуммаНДС = "--";
		КонецЕсли;
			
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
					ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
#Вставка
		Если бг_ПереопределитьМакетТОРГ12 Или бг_ПечатьВВалюте Тогда
			бг_ЗаполнитьМассуВесИСуммуВВалютеПрописью(ИтоговыеСуммы, ДанныеПечати.Валюта);
		КонецЕсли;
#КонецВставки
		ОбластьПодвала = ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны);
#Вставка
		Если бг_ПереопределитьМакетТОРГ12 Или бг_ПечатьВВалюте Тогда
			 бг_ЗаполнитьРеквизитыПодвалаТОРГ12ОсновнойМакет(ДанныеПечати, ОбластьПодвала, ИтоговыеСуммы, НомерСтраницы, бг_ПечатьВВалюте);
		КонецЕсли;
#КонецВставки
		ТабличныйДокумент.Вывести(ОбластьПодвала);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьРеквизитыПодвалаТОРГ12")
Функция бг_ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати, ИтоговыеСуммы, Макет, КоэффициентПересчетаВТонны)
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	ПолнаяДатаДокумента = СтрЗаменить(Формат(ДанныеПечати.Дата, "ДЛФ=DD"),
		НСтр("ru = 'г.';
			|en = 'year'", Метаданные.Языки.Русский.КодЯзыка),
		НСтр("ru = 'года';
			|en = 'year'", Метаданные.Языки.Русский.КодЯзыка));
	ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);
	ПервыйРазделитель = СтрНайти(ПолнаяДатаДокумента, " ");
	ВторойРазделитель = СтрНайти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаДокументаДень", """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """");
	СтруктураПараметров.Вставить("ДатаДокументаМесяц", Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1));
	СтруктураПараметров.Вставить("ДатаДокументаГод", Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель));
	
	// Главный бухгалтер
	СтруктураПараметров.Вставить("ФИОГлавБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	
	// Отпуск товара разрешил
	СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
	СтруктураПараметров.Вставить("ДолжностьРуководителя", ДанныеПечати.ДолжностьРуководителя);
	
	СтруктураПараметров.Вставить("ФИОКладовщика", ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Кладовщик, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьКладовщика", ДанныеПечати.ДолжностьКладовщика);
	
	// Доверенность
	СтруктураПараметров.Вставить("ДоверенностьНомер", ДанныеПечати.ДоверенностьНомер);
	СтруктураПараметров.Вставить("ДоверенностьДата", Формат(ДанныеПечати.ДоверенностьДата, "ДЛФ=DD"));
	СтруктураПараметров.Вставить("ДоверенностьВыдана", ДанныеПечати.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьЧерезКого", ДанныеПечати.ДоверенностьЛицо);
#Вставка
	бг_ПечатьНаОснованииРТиУ = ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	Если бг_ПечатьНаОснованииРТиУ Тогда
		ШаблонПриказа = НСтр("ru='на основании дов. №%1 от %2'");
		ФорматДаты = "ДФ=dd.MM.yyyy";
		
		ПредставлениеПриказаРуководителя = ?(
			Не ПустаяСтрока(ДанныеПечати.бг_РуководительНомерОснования), 
			СтрШаблон(
				ШаблонПриказа, 
				ДанныеПечати.бг_РуководительНомерОснования, 
				Формат(ДанныеПечати.бг_РуководительДатаОснования, ФорматДаты)), "");
					
		ПредставлениеПриказаГлавногоБухгалтера = ?(
			Не ПустаяСтрока(ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования), 
			СтрШаблон(
				ШаблонПриказа, 
				ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования, 
				Формат(ДанныеПечати.бг_ГлавныйБухгалтерДатаОснования, ФорматДаты)), "");
				
		ЕстьЭкспедитор = ЗначениеЗаполнено(ДанныеПечати.Экспедитор);
		ЕстьВодитель = ЗначениеЗаполнено(ДанныеПечати.ВодительРейса);
		
		Если ЕстьЭкспедитор Тогда
			ДолжностьВодителя = НСтр("ru='экспедитор'");
		Иначе
			ДолжностьВодителя = НСтр("ru='водитель-экспедитор'");
		КонецЕсли;
					
		СтруктураПараметров.Вставить("ПриказРуководитель"		, ПредставлениеПриказаРуководителя);
		СтруктураПараметров.Вставить("ПриказГлавныйБухгалтер"	, ПредставлениеПриказаГлавногоБухгалтера);
		СтруктураПараметров.Вставить("ДолжностьРуководителя"	, ДанныеПечати.бг_ДолжностьРуководитель);
		СтруктураПараметров.Вставить("ГлавныйБухгалтерДолжность", ДанныеПечати.бг_ДолжностьГлавБухгалтер);
		СтруктураПараметров.Вставить("ФИОРуководителя"			, ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
																	ДанныеПечати.бг_РуководительФизЛицо,
																	ДанныеПечати.Дата));
		СтруктураПараметров.Вставить("ФИОГлавБухгалтера"		, ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
																	ДанныеПечати.бг_ГлавныйБухгалтерФизЛицо,
																	ДанныеПечати.Дата));
		СтруктураПараметров.Вставить("бг_ДоверенностьДата"		, Формат(ДанныеПечати.ДоверенностьДата, ФорматДаты));
		СтруктураПараметров.Вставить("ДатаДокумента"			, Формат(ДанныеПечати.Дата, ФорматДаты));
		СтруктураПараметров.Вставить("ФИОГрузПринял"			, ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
																	ДанныеПечати.ДоверенностьЛицо,
																	ДанныеПечати.Дата));
		СтруктураПараметров.Вставить("ГрузПринялДолжность"		, ДолжностьВодителя);
		СтруктураПараметров.Вставить("ДоверенностьДолжность"	, ДолжностьВодителя);
		СтруктураПараметров.Вставить("ДоверенностьЧерезКого"	, ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
																	ДанныеПечати.ДоверенностьЛицо,
																	ДанныеПечати.Дата));
		СтруктураПараметров.Вставить("НомерПоДаннымКлиента"		, ДанныеПечати.НомерПоДаннымКлиента);
		СтруктураПараметров.Вставить("Итогобг_МассаНетто"			, ИтоговыеСуммы.Итогобг_МассаНетто);
		СтруктураПараметров.Вставить("Итогобг_МассаБрутто"		, ИтоговыеСуммы.Итогобг_МассаБрутто);
		Если ИтоговыеСуммы.Итогобг_КоличествоМест > 0 Тогда
			СтруктураПараметров.Вставить("бг_ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.Итогобг_КоличествоМест, ,",,,,,,,,0"));
		КонецЕсли;
	КонецЕсли;
#КонецВставки
	
	Если ИтоговыеСуммы.ИтогоКоличествоМест > 0 Тогда
		СтруктураПараметров.Вставить("ВсегоМестПрописью", ЧислоПрописью(ИтоговыеСуммы.ИтогоКоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаНетто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаНеттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаНетто * ПараметрыМассыПрописью.Коэффициент,
			"ДП=Истина",
			ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	Если ИтоговыеСуммы.ИтогоМассаБрутто > 0 Тогда
		ПараметрыМассыПрописью = ПродажиСервер.ПараметрыМассыПрописью(ИтоговыеСуммы.ИтогоМассаБрутто, КоэффициентПересчетаВТонны);
		СтруктураПараметров.Вставить("МассаБруттоПрописью", ЧислоПрописью(
			ИтоговыеСуммы.ИтогоМассаБрутто * ПараметрыМассыПрописью.Коэффициент,
			"ДП=Истина",
			ПараметрыМассыПрописью.Формат));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписейПрописью);
	СтруктураПараметров.Вставить("СуммаПрописью", ИтоговыеСуммы.СуммаПрописью);
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Возврат ОбластьМакета;

КонецФункции

&ИзменениеИКонтроль("ЗаполнитьРеквизитыШапкиТОРГ12")
Процедура бг_ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати, Макет, ТабличныйДокумент)
	
	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,      ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетОрганизации);
	СведенияОПокупателе       = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,       ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетКонтрагента);
	СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузополучателя);
	СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата,, ДанныеПечати.БанковскийСчетГрузоотправителя);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
#Вставка
	бг_ПечатьНаОснованииРТиУ = ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг");
	Если бг_ПечатьНаОснованииРТиУ Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(СокрЛП("Шапка" + бг_ПостфиксОбластейМакетаТОРГ12(ДанныеПечати)));
	КонецЕсли;
#КонецВставки
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));
	СтруктураПараметров.Вставить("ДатаДокумента", ДанныеПечати.Дата);
	
	Если ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель Тогда
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике));
	Иначе
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
			"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПредставлениеПодразделения", ДанныеПечати.Подразделение);
	СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
		"ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	СтруктураПараметров.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике));
	СтруктураПараметров.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе));
	СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОГрузоотправитель.КодПоОКПО);
	СтруктураПараметров.Вставить("ВидДеятельностиПоОКДП", СведенияОПоставщике.КодОКВЭД);
	СтруктураПараметров.Вставить("ГрузополучательПоОКПО", СведенияОГрузополучателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ПоставщикПоОКПО", СведенияОПоставщике.КодПоОКПО);
	СтруктураПараметров.Вставить("ПлательщикПоОКПО", СведенияОПокупателе.КодПоОКПО);
	СтруктураПараметров.Вставить("ОснованиеНомер", ДанныеПечати.ОснованиеНомер);
	СтруктураПараметров.Вставить("ОснованиеДата", ДанныеПечати.ОснованиеДата);
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер", "");
	СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата", "");
#Вставка
	бг_ЭтоМеждународныйСчетГрузополучателя = СведенияОГрузополучателе.бг_ЭтоМеждународныйСчет;
	бг_ЭтоМеждународныйСчетПлательщика = СведенияОПокупателе.бг_ЭтоМеждународныйСчет;
	
	СписокСведенийГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ОфициальноеНаименование,ИНН,КПП,АдресПунктаНазначенияКонтрагента,Телефоны,НомерСчета,Банк, %1'"),
		?(бг_ЭтоМеждународныйСчетГрузополучателя, "", "БИК,КоррСчет"));
	СписокСведенийПлательщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк, %1'"),
		?(бг_ЭтоМеждународныйСчетПлательщика, "", "БИК,КоррСчет"));

	Если бг_ПечатьНаОснованииРТиУ Тогда
        		СтруктураПараметров.Вставить("ПредставлениеПлательщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОПокупателе, СписокСведенийПлательщика, Не бг_ЭтоМеждународныйСчетПлательщика));
		СтруктураПараметров.Вставить("НомерДокумента", ДанныеПечати.Номер);
		СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер", ДанныеПечати.Номер);
		СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата", ДанныеПечати.Дата);
		СтруктураПараметров.Вставить("Основание", "Договор № " + ДанныеПечати.НомерДоговора +
			" от " + ?(ДанныеПечати.ДатаДоговора = '0001.01.01', "", Формат(ДанныеПечати.ДатаДоговора,"ДФ=dd.MM.yy")));
		СтруктураПараметров.Вставить("ОснованиеНомер", ДанныеПечати.НомерДоговора);
		СтруктураПараметров.Вставить("ОснованиеДата", ДанныеПечати.ДатаДоговора);
		СведенияОПоставщике.Вставить("АдресПунктаНазначенияОрганизации", ДанныеПечати.АдресПунктаНазначения);
		СведенияОПоставщике.Вставить("ТелефонПунктаНазначения", "тел.:" + ДанныеПечати.ТелефонПунктаНазначения);
		СведенияОГрузополучателе.Вставить("АдресПунктаНазначенияКонтрагента", ДанныеПечати.АдресПунктаНазначенияКонтрагента);
		СтруктураПараметров.Вставить("ПредставлениеПоставщика", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОПоставщике,
			"ОфициальноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузополучателе, СписокСведенийГрузополучателя, Не бг_ЭтоМеждународныйСчетГрузополучателя));
		СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, 
				"ОфициальноеНаименование,ИНН,КПП,АдресПунктаНазначенияОрганизации,ТелефонПунктаНазначения,НомерСчета,Банк,БИК,КоррСчет"));
    	КонецЕсли;
#КонецВставки

	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыСтрокиТовараТОРГ12ОсновнойМакет(СтрокаТовары, ОбластьМакета, ДанныеЗаполнения)
	
	Параметры = Новый Структура;
 	
	НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентов.бг_ДанныеНоменклатурыКонтрагентаПоНоменклатуре(
								ДанныеЗаполнения.Партнер, СтрокаТовары.Номенклатура);

	Если ДанныеЗаполнения.ЛицензияПартнера = ПредопределенноеЗначение(
			"Перечисление.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Розничная")
		И ЗначениеЗаполнено(НоменклатураКонтрагента) Тогда
		Артикул =  НоменклатураКонтрагента[0].бг_КодНоменклатурыКонтрагента;								
	ИначеЕсли ЗначениеЗаполнено(НоменклатураКонтрагента) Тогда
		Артикул =  НоменклатураКонтрагента[0].Артикул;
	КонецЕсли;
	
	Параметры.Вставить("Артикул", Артикул);
	
	Если ДанныеЗаполнения.ВыводитьЦеныВИностраннойВалюте Тогда  								
		
		ЦенаВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТовары.Цена,
		                                        ДанныеЗаполнения.Валюта,
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);								

		СуммаБезНДСВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТовары.СуммаБезНДС,
												ДанныеЗаполнения.Валюта,	
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);								


		СуммаСНДСВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТовары.СуммаСНДС,
												ДанныеЗаполнения.Валюта,	
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);								
												
		СуммаНДСВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтрокаТовары.СуммаНДС,
												ДанныеЗаполнения.Валюта,	
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);
												
		Параметры.Вставить("ЦенаВалюта"			, ЦенаВалюта);
		Параметры.Вставить("СуммаБезНДСВалюта"	, СуммаБезНДСВалюта);
		Параметры.Вставить("СуммаСНДСВалюта"	, СуммаСНДСВалюта);
		Параметры.Вставить("СуммаНДСВалюта"		, СуммаНДСВалюта);

	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(Параметры); 
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыПодвалаТОРГ12ОсновнойМакет(ДанныеПечати, ОбластьМакета, ИтоговыеСуммы, НомерСтраницы, ПечатьВВалюте)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("МассаНеттоПрописью", ИтоговыеСуммы.Итогобг_МассаНеттоПрописью);
	СтруктураПараметров.Вставить("МассаБруттоПрописью", ИтоговыеСуммы.Итогобг_МассаБруттоПрописью);
	
	КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 %2';
			|en = '%1 %2'"),
		НомерСтраницы,
		ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе';
				|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
			НСтр("ru = 'листах';
				|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
			НСтр("ru = 'листах';
				|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
	СтруктураПараметров.Вставить("КоличествоЛистовВПриложении", КоличествоСтраниц);
	
	Если ПечатьВВалюте Или ДанныеПечати.бг_КатегорияМакета = 
			ПредопределенноеЗначение("Перечисление.бг_КатегорииМакетовПечатныхФорм.ПустаяСсылка") Тогда 
		КоличествоПартий = бг_КоличествоПартий(ДанныеПечати);
		Если КоличествоПартий <> Неопределено 
			И КоличествоПартий > 0 Тогда
			КоличествоЛистовПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2';
					|en = '%1 %2'"),
				КоличествоПартий,
				ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
					НСтр("ru = 'листе';
						|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
					НСтр("ru = 'листах';
						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
					НСтр("ru = 'листах';
						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), КоличествоПартий));
			СтруктураПараметров.Вставить("КоличествоЛистовПриложения", КоличествоЛистовПриложения);	
		КонецЕсли;
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура бг_ЗаполнитьИтоговыеСуммыВВалютеТОРГ12ОсновнойМакет(ИтоговыеСуммы, ДанныеЗаполнения)

	ИтогоСуммаБезНДСВалютаНаСтранице = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговыеСуммы.ИтогоСуммаБезНДСНаСтранице,
												ДанныеЗаполнения.Валюта,
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);								

	ИтогоСуммаСНДСВалютаНаСтранице = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице,
												ДанныеЗаполнения.Валюта,
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);
												
	ИтогоСуммаБезНДСВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговыеСуммы.ИтогоСуммаБезНДС,
												ДанныеЗаполнения.Валюта,
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);								
												
	ИтогоСуммаСНДСВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговыеСуммы.ИтогоСуммаСНДС,
												ДанныеЗаполнения.Валюта,
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);
												
	ИтогоСуммаНДСВалютаНаСтранице = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговыеСуммы.ИтогоСуммаНДСНаСтранице,
												ДанныеЗаполнения.Валюта,
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);								
												
	ИтогоСуммаНДСВалюта = РаботаСКурсамиВалют.ПересчитатьВВалюту(ИтоговыеСуммы.ИтогоСуммаНДС,
												ДанныеЗаполнения.Валюта,
												ДанныеЗаполнения.ВалютаРег,
												ДанныеЗаполнения.ДатаКурса);
												
	ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДСВалютаНаСтранице"	, ИтогоСуммаБезНДСВалютаНаСтранице);
	ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСВалютаНаСтранице"		, ИтогоСуммаСНДСВалютаНаСтранице);
	ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДСВалюта"				, ИтогоСуммаБезНДСВалюта);
	ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСВалюта"				, ИтогоСуммаСНДСВалюта); 
	ИтоговыеСуммы.Вставить("ИтогоСуммаНДСВалютаНаСтранице"		, ИтогоСуммаНДСВалютаНаСтранице);
	ИтоговыеСуммы.Вставить("ИтогоСуммаНДСВалюта"				, ИтогоСуммаНДСВалюта);
     
КонецПроцедуры

Функция бг_ПараметрыЗаполненияСтрокиПечатиТОРГ12ОсновнойМакет(ДанныеПечати, ПечатьМакетаОбщийДляСетейЭкспорт)
	
	Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация);
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ВалютаРег"						, Валюта); 
	Параметры.Вставить("НомерПоДаннымКлиента"			, ДанныеПечати.НомерПоДаннымКлиента);
	Параметры.Вставить("Валюта"							, ДанныеПечати.Валюта);
	Параметры.Вставить("ДатаКурса"						, ДанныеПечати.Дата);
	Параметры.Вставить("Партнер"						, ДанныеПечати.Партнер);
	Параметры.Вставить("ЛицензияПартнера"				, ДанныеПечати.бг_ТипЛицензии);
	Параметры.Вставить("ВыводитьЦеныВИностраннойВалюте"	, ПечатьМакетаОбщийДляСетейЭкспорт);

	Возврат Параметры;										
	
КонецФункции

Функция бг_ПараметрыЗаполненияИтоговыеСуммыВВалютеТОРГ12ОсновнойМакет(ДанныеПечати)
	
	Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация);
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ВалютаРег"	, Валюта); 
	Параметры.Вставить("Валюта"		, ДанныеПечати.Валюта);
	Параметры.Вставить("ДатаКурса"	, ДанныеПечати.Дата);

	Возврат Параметры;										
	
КонецФункции

Процедура бг_ЗаполнитьМассуВесИСуммуВВалютеПрописью(ИтоговыеСуммы, Валюта)
	
	Если ИтоговыеСуммы.Свойство("ИтогоСуммаСНДСВалюта") Тогда
		ИтоговыеСуммы.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(ИтоговыеСуммы.ИтогоСуммаСНДС, Валюта);
	КонецЕсли;
	
	Если ИтоговыеСуммы.Итогобг_МассаБрутто > 0 Тогда
		ФорматнаяСтрока = ?(ИтоговыеСуммы.Итогобг_МассаБрутто <> Цел(ИтоговыеСуммы.Итогобг_МассаБрутто), 
			"целая, целых, целых, ж, десятая, десятой, десятых, ж, 1", "кг, кг, кг, м, г, г, г, м, 0");
		ИтоговыеСуммы.Итогобг_МассаБруттоПрописью = ЧислоПрописью(
			ИтоговыеСуммы.Итогобг_МассаБрутто,
			"ДП=Истина",
			ФорматнаяСтрока);
	КонецЕсли;
		
	Если ИтоговыеСуммы.ИтогоМассаНетто > 0 Тогда
		ИтоговыеСуммы.Итогобг_МассаНеттоПрописью = ЧислоПрописью(
			ИтоговыеСуммы.Итогобг_МассаНетто,
			"ДП=Истина",
			"кг, кг, кг, м, г, г, г, м, 0");
	КонецЕсли;

КонецПроцедуры

Функция бг_КоличествоПартий(ДанныеПечати)

	ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.бг_ОрганизацияЕГАИСПоОрганизацииИлиКонтрагенту(
						ДанныеПечати.Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслугТовары.Серия) КАК КоличествоСерийНеСобственнойПродукции
	|ПОМЕСТИТЬ бг_СерииНеСобственнойПродукции
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И НЕ РеализацияТоваровУслугТовары.Серия.ПроизводительЕГАИС = &ОрганизацияЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслугТовары.Серия) КАК КоличествоСерий
	|ПОМЕСТИТЬ бг_СерииТоваров
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА бг_СерииНеСобственнойПродукции.КоличествоСерийНеСобственнойПродукции = 0
	|			ТОГДА бг_СерииТоваров.КоличествоСерий * 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПартий
	|ИЗ
	|	бг_СерииНеСобственнойПродукции КАК бг_СерииНеСобственнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ бг_СерииТоваров КАК бг_СерииТоваров
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Ссылка", ДанныеПечати.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.КоличествоПартий
	КонецЦикла;	

	Возврат Неопределено;										
	
КонецФункции

Функция бг_ДолжностиПодписантов(ДанныеПечати)
	
	Подписанты = Новый Массив;
	Подписанты.Добавить(ДанныеПечати.ГлавныйБухгалтерФизЛицо);
	Подписанты.Добавить(ДанныеПечати.РуководительФизЛицо);
	ДолжностиПодписантов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Подписанты, "бг_Должность");
	
	Возврат ДолжностиПодписантов;										
	
КонецФункции

Функция бг_ПараметрыМакетаПечатнойФормыТОРГ12(ДанныеПечати)
	
	ПараметрыМакета = Новый Структура();
	
   	ПереопределитьОбластиМакета = Истина;
	
	ПечатьВВалюте 	= ДанныеПечати.Валюта <> ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(
												ДанныеПечати.Организация);
												
	КатегорияМакета = ДанныеПечати.бг_КатегорияМакета;
						
	Если КатегорияМакета = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.бг_КатегорииМакетовПечатныхФорм.ОбщийДляСетей") Тогда
		ПутьКМакету = ?(ПечатьВВалюте,
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ОсновнойМакетЭкспорт_ru",
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ОсновнойМакет_ru"); 
		ПостфиксОбластейМакета = "Сети";
		ПереопределитьОбластиМакета = Истина;
	ИначеЕсли КатегорияМакета = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.бг_КатегорииМакетовПечатныхФорм.Метро") Тогда 
		
	ИначеЕсли КатегорияМакета = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.бг_КатегорииМакетовПечатныхФорм.МетроРЦ") Тогда		
		
	ИначеЕсли КатегорияМакета = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.бг_КатегорииМакетовПечатныхФорм.Перекресток") Тогда
		
	ИначеЕсли КатегорияМакета = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.бг_КатегорииМакетовПечатныхФорм.Тандер") Тогда
		
	Иначе	
		ПутьКМакету = ?(ПечатьВВалюте,
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ОсновнойМакетЭкспорт_ru",
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_ТОРГ12_ОсновнойМакет_ru");	
		ПостфиксОбластейМакета = "";
	КонецЕсли;	
	
	ПараметрыМакета.Вставить("ПечатьВВалюте"				, ПечатьВВалюте);
	ПараметрыМакета.Вставить("ПутьКМакету"					, ПутьКМакету);
	ПараметрыМакета.Вставить("ПостфиксОбластейМакета"		, ПостфиксОбластейМакета);
	ПараметрыМакета.Вставить("ПереопределитьОбластиМакета"	, ПереопределитьОбластиМакета);

	Возврат ПараметрыМакета;										
	
КонецФункции

Функция бг_ПостфиксОбластейМакетаТОРГ12(ДанныеПечати)

	КатегорияМакета = ДанныеПечати.бг_КатегорияМакета;
						
	Если КатегорияМакета = ОбщегоНазначения.ПредопределенныйЭлемент("Перечисление.бг_КатегорииМакетовПечатныхФорм.ОбщийДляСетей") Тогда
		ПостфиксОбластейМакета = "Сети"; 
	Иначе	
		ПостфиксОбластейМакета = "";	
	КонецЕсли;	
	
	Возврат ПостфиксОбластейМакета;										
	
КонецФункции

#КонецОбласти

#Область Печать_СчетФактура

&ИзменениеИКонтроль("СформироватьПечатнуюФормуСчетФактура")
Функция бг_СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СчетФактура";
	
	СтруктураТиповНаПечать         = Новый Структура;
	МассивСчетФактураВыданный      = Новый Массив;
	МассивСчетФактураКомиссионеру  = Новый Массив;
	МассивСчетФактураПолученный    = Новый Массив;
	ОснованияНаРеализацию          = Новый Массив;
	ОснованияКомиссионеру          = Новый Массив;
	ОснованияСчетФактураПолученный = Новый Массив;
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);
		
		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяОбъекта = "СчетФактураВыданный" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "СчетФактураНаНеподтвержденнуюРеализацию0"
				Или ИмяОбъекта = "СчетФактураВыданныйАванс"
				Или ИмяОбъекта = "СчетФактураНалоговыйАгент" Тогда
				
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, СтруктураОбъектов.Значение);
			
		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера"
				Или (ИмяОбъекта = "ОтчетПоКомиссииМеждуОрганизациями" И ПараметрыПечати.ВидФормы = "Комитент") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
				И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОснованияНаРеализацию.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(
			ОснованияНаРеализацию, ,
			ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Ложь)
		
	КонецЕсли;
	
	Если ОснованияКомиссионеру.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(
			ОснованияКомиссионеру,
			ПараметрыПечати.ПечатьВВалюте);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);
		
		СообщитьОбОшибкахПечатиСчетФактурыПоОснованиям(РезультатАнализа.ТаблицаОшибок, Истина)
		
	КонецЕсли;
	
	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда
		
		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(
			ОснованияСчетФактураПолученный, ПараметрыПечати.ПечатьВВалюте);
		
		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);
		
		СообщитьОбОшибкахПечатиСчетФактурыПолученного(РезультатАнализа.ТаблицаОшибок)
		
	КонецЕсли;
	
	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;
	
	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;
	
	НомерТипаДокумента = 0;
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		
#Вставка
		бг_ПереопределитьМакетСчетФактуры = ?(
				ПараметрыПечати.Свойство("бг_ПереопределитьМакетСчетФактуры"), 
				ПараметрыПечати.бг_ПереопределитьМакетСчетФактуры, 
				Ложь);
				
		Если бг_ПереопределитьМакетСчетФактуры Тогда
			
			ДокументыВВалюте = Новый Массив;
			ДокументыВВалютеРеглУчета = Новый Массив;
			
			ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			
			Для Каждого ДокументСсылка Из СтруктураОбъектов.Значение Цикл
				
				ВалютаОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДокументСсылка, "ДокументОснование.Валюта");
					
				Если ВалютаОснования <> ВалютаРегламентированногоУчета Тогда
					ДокументыВВалюте.Добавить(ДокументСсылка);	
				Иначе	
					ДокументыВВалютеРеглУчета.Добавить(ДокументСсылка);
				КонецЕсли;
				
			КонецЦикла;
			
			бг_ПереопределитьЗаполнениеТабличногоДокументаСчетФактуры(
				ТабличныйДокумент, 
				ДокументыВВалюте,
				ОбъектыПечати,
				ПараметрыПечати,
				Истина);
				
			бг_ПереопределитьЗаполнениеТабличногоДокументаСчетФактуры(
				ТабличныйДокумент, 
				ДокументыВВалютеРеглУчета,
				ОбъектыПечати,
				ПараметрыПечати,
				Ложь);
					
		Иначе	
#КонецВставки
		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, СтруктураОбъектов.Значение);
	
		Если ДанныеДляПечати <> Неопределено Тогда
			ОпцииПечатиСчетаФактуры = Новый Структура;
			ОпцииПечатиСчетаФактуры.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНаАванс",            ДанныеДляПечати.Свойство("СчетФактураНаАванс"));
			ОпцииПечатиСчетаФактуры.Вставить("СчетФактураНалоговыйАгент",     ДанныеДляПечати.Свойство("СчетФактураНалоговыйАгент"));
			ОпцииПечатиСчетаФактуры.Вставить("ПечатьВВалюте",                 ПараметрыПечати.ПечатьВВалюте);
#Вставка
			ОпцииПечатиСчетаФактуры.Вставить("бг_ПереопределитьМакетСчетФактуры", бг_ПереопределитьМакетСчетФактуры);
#КонецВставки

			ЗаполнитьТабличныйДокументСчетФактура(
				ТабличныйДокумент,
				ДанныеДляПечати,
				ОбъектыПечати,
				ОпцииПечатиСчетаФактуры);
		КонецЕсли;
#Вставка
		КонецЕсли;
#КонецВставки
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

КонецФункции

Процедура бг_ПереопределитьЗаполнениеТабличногоДокументаСчетФактуры(ТабличныйДокумент, МассивОбъектов, 
	ОбъектыПечати,ПараметрыПечати, ПечатьВВалюте)

	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
				
	ОпцииПечатиСчетаФактуры = Новый Структура;
	
	ОпцииПечатиСчетаФактуры.Вставить(
		"бг_ПереопределитьМакетСчетФактуры", 
		Истина);
	
	ОпцииПечатиСчетаФактуры.Вставить("ПечатьВВалюте", ПечатьВВалюте);	
	
	ПараметрыПечати.ПечатьВВалюте = ПечатьВВалюте;
	
	ДанныеДляПечати = Документы.СчетФактураВыданный.ПолучитьДанныеДляПечатнойФормыСчетФактура(
		ПараметрыПечати, 
		МассивОбъектов);
	
	Если ДанныеДляПечати <> Неопределено Тогда
		ОпцииПечатиСчетаФактуры.Вставить(
			"НомерСформированВСчетеФактуре", 
			ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
		
		ОпцииПечатиСчетаФактуры.Вставить(
			"СчетФактураНаАванс",            
			ДанныеДляПечати.Свойство("СчетФактураНаАванс"));
		
		ОпцииПечатиСчетаФактуры.Вставить(
			"СчетФактураНалоговыйАгент",     
			ДанныеДляПечати.Свойство("СчетФактураНалоговыйАгент"));
		
		ЗаполнитьТабличныйДокументСчетФактура(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			ОпцииПечатиСчетаФактуры);
	КонецЕсли;
		
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();	
	
КонецПроцедуры	

&ИзменениеИКонтроль("ЗаполнитьТабличныйДокументСчетФактура")
Процедура бг_ЗаполнитьТабличныйДокументСчетФактура(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ОпцииПечатиСчетаФактуры) Экспорт
	
	Перем ВыборкаОснований, ВыборкаКонтрагентов, ВыборкаПоставщиков;
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
	ОпцииПечатиСчетаФактуры.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
					
	Макет451            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура451_ru");
	Макет1137           = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_ru");
	Макет1137_625       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура1137_625_ru");
	Макет981            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура981_ru");
	Макет534            = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура534_ru");
	Макет534_2_5        = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура534");
	Макет534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура534Прослеж");
	МакетКорр           = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_ru");
	МакетКорр_625       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный1137_625_ru");
	МакетКорр_981       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный981_ru");
	МакетКорр_534       = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактураКорректировочный534_ru");
	МакетКорр_534_2_5   = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура534");
	МакетКорр_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_КорректировочныйСчетФактура534Прослеж");
#Вставка
	Макет534_Основной = УправлениеПечатью.МакетПечатнойФормы(
		"Обработка.ПечатьОбщихФорм.ПФ_MXL_СчетФактура534_ОсновнойМакет_ru");
	МакетКорр_534_Основной = УправлениеПечатью.МакетПечатнойФормы(
		"Обработка.ПечатьОбщихФорм.ПФ_MXL_КорректировочныйСчетФактура534_Основной_ru");
	
	бг_ПереопределитьМакетСчетФактуры = ОпцииПечатиСчетаФактуры.бг_ПереопределитьМакетСчетФактуры;
#КонецВставки
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") И Не ДанныеДляПечати.РезультатПоКонтрагентам.Пустой() Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	ПрослеживаемыеТовары = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеТовары = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеТовары.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПостановление914 = ЛОЖЬ;
	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета(ДанныеПечати);
		
#Вставка
		ЭтоСетевойКлиент = 
			ДанныеПечати.бг_КатегорияМакета = Перечисления.бг_КатегорииМакетовПечатныхФорм.ОбщийДляСетей;
#КонецВставки
#Удаление
		Если ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры = ВалютаРегламентированногоУчета Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана валюта: рубли. Не требуется печатать счет-фактуру в иностранной валюте.';
					|en = 'Currency is specified for %1: rubles. No need to print a tax invoice in a foreign currency.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеПечати.ВалютаСчетаФактуры)
			И НЕ ОпцииПечатиСчетаФактуры.ПечатьВВалюте
			И ДанныеПечати.ВалютаСчетаФактуры <> ВалютаРегламентированногоУчета  Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для %1 указана иностранная валюта. Не требуется печатать счет-фактуру в рублях.';
					|en = 'Foreign currency is specified for %1. No need to print the tax invoice in rubles.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
		Иначе
#КонецУдаления				
			
			ДействующиеПостановления = Новый Структура;
			ДействующиеПостановления.Вставить("Постановление914",  Ложь);
			ДействующиеПостановления.Вставить("Постановление1137", Истина);
			ДействующиеПостановления.Вставить("Постановление1137_625", ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить("Постановление981", ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления));
			ДействующиеПостановления.Вставить(
				"Постановление534",
				ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления));
			
			ОпцииПечатиСчетаФактуры.Вставить("ДействующиеПостановления", ДействующиеПостановления);
			
			Если ДанныеПечати.КорректировочныйСчетФактура Тогда
				Если ДействующиеПостановления.Постановление534 Тогда
					ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
					Если ИспользоватьПечатныеФормыСФ2_5 И Не ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
						ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
						Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары, МакетКорр_534Прослеж_2_5, МакетКорр_534_2_5);
					Иначе
						Макет = МакетКорр_534;
					КонецЕсли;
#Вставка
					Если бг_ПереопределитьМакетСчетФактуры Тогда
						Макет = МакетКорр_534_Основной;
					КонецЕсли;
#КонецВставки
					ЕстьПостановление534 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
					Макет = МакетКорр_981;
					ЕстьПостановление981 = Истина;
				ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
					Макет = МакетКорр_625;
					ЕстьПостановление1137_625 = Истина;
				Иначе
					Макет = МакетКорр;
					ЕстьПостановление1137 = Истина;
				КонецЕсли;
			ИначеЕсли ДействующиеПостановления.Постановление914 Тогда
				Макет = Макет451;
				ЕстьПостановление914 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление534 Тогда
				ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
					Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, Макет534Прослеж_2_5, Макет534_2_5);
				Иначе
					Макет = Макет534;
				КонецЕсли;
#Вставка
			Если бг_ПереопределитьМакетСчетФактуры Тогда
				Макет = Макет534_Основной;
			КонецЕсли;
#КонецВставки
				ЕстьПостановление534 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление981 Тогда
				Макет = Макет981;
				ЕстьПостановление981 = Истина;
			ИначеЕсли ДействующиеПостановления.Постановление1137_625 Тогда
				Макет = Макет1137_625;
				ЕстьПостановление1137_625 = Истина;
			Иначе
				Макет = Макет1137;
				ЕстьПостановление1137 = Истина;
			КонецЕсли;
			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
			
			Если (ЕстьПостановление914 И ЕстьПостановление1137)
				ИЛИ (ЕстьПостановление914 И ЕстьПостановление981)
				ИЛИ ((ЕстьПостановление1137 ИЛИ ЕстьПостановление1137_625) И ЕстьПостановление981)
				Или ЕстьПостановление534 И (ЕстьПостановление914
											Или ЕстьПостановление1137
											Или ЕстьПостановление1137_625
											Или ЕстьПостановление981) Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать счетов-фактур, сформированных по разным постановлениям Правительства РФ';
							|en = 'Cannot print tax invoices generated by different decrees of the RF Government at the same time'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			ОпцииПечатиСчетаФактуры.Вставить("Макет", Макет);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ТекстПредставленияКомиссионера = "";
			ВыборкаПоставщиков = Неопределено;
			Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
				И ДанныеПечати.ПеревыставленныйСчетФактура
				И (ЕстьПостановление981 Или ЕстьПостановление534) Тогда
				ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				СведенияОКомиссионере = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
				
				ДополнительноеПредставление = "";
				Если ДействующиеПостановления.Постановление914 И СведенияОКомиссионере.ОфициальноеНаименование <> СведенияОКомиссионере.ПолноеНаименование Тогда
					ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '(%1)';
							|en = '(%1)'"),
						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ПолноеНаименование"));
				КонецЕсли;
				
				ПредставлениеКомиссионера = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1 %2';
						|en = '%1 %2'"),
					СведенияОКомиссионере.ПолноеНаименование,
					ДополнительноеПредставление));
					
				АдресКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1';
						|en = '%1'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес"));
					
				ИННКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1/%2';
						|en = '%1/%2'"),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН", Ложь),
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКомиссионере, "КПП", Ложь));

				ТекстПредставленияКомиссионера = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Составлен комиссионером (агентом):%1, %2, ИНН/КПП: %3';
						|en = 'Completed by consignee (agent):%1, %2, TIN/CRTR: %3'"),
					ПредставлениеКомиссионера, АдресКомиссионера, ИННКомиссионера);

			ИначеЕсли ЕстьПостановление534 Тогда
				ТекстПредставленияКомиссионера = ДанныеПечати.ПредставлениеВыставленКомиссионеру;
			КонецЕсли;
				
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = Новый Структура;
			ЗаполнитьРеквизитыШапкиСчетФактура(
				ДанныеПечати,
				ВыборкаОснований,
				СведенияОбОрганизации,
				ВыборкаКонтрагентов,
				ТабличныйДокумент,
				ОпцииПечатиСчетаФактуры,
				ВыборкаПоставщиков);
			
			// Выводим заголовок таблицы
#Удаление
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
#КонецУдаления
#Вставка
			ИмяОбласти = бг_ИмяОбластиСетевойКлиент(
				"ЗаголовокТаблицы", 
				ЭтоСетевойКлиент, 
				бг_ПереопределитьМакетСчетФактуры);
				
			ЗаголовокТаблицы = Макет.ПолучитьОбласть(ИмяОбласти);
#КонецВставки
			Если ДействующиеПостановления.Постановление914 И Не ДанныеПечати.КорректировочныйСчетФактура Тогда
				СтруктураПараметров = Новый Структура;
				Если ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
					СтруктураПараметров.Вставить("Валюта", ДанныеПечати.Валюта)
				Иначе
					СтруктураПараметров.Вставить("Валюта", ВалютаРегламентированногоУчета);
				КонецЕсли;
				ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			
			// Инициализация итогов в документе
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
			Иначе
				ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			КонецЕсли;
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура И Не ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("СтрокаАвансы");
			Иначе
#Удаление
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть("Строка");
#КонецУдаления
#Вставка
				ИмяОбласти = бг_ИмяОбластиСетевойКлиент(
					"Строка", 
					ЭтоСетевойКлиент, 
					бг_ПереопределитьМакетСчетФактуры);
					
				ОбластьМакетаСтандарт = Макет.ПолучитьОбласть(ИмяОбласти);
#КонецВставки
			КонецЕсли;
#Удаление
			ОбластьИтого = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");
#КонецУдаления
#Вставка
			ИмяОбласти = бг_ИмяОбластиСетевойКлиент(
				"Итого", 
				ЭтоСетевойКлиент, 
				бг_ПереопределитьМакетСчетФактуры);
				
			ОбластьИтого = Макет.ПолучитьОбласть(ИмяОбласти);
				
			ИмяОбласти = бг_ИмяОбластиСетевойКлиент(
				"Подвал", 
				ЭтоСетевойКлиент, 
				бг_ПереопределитьМакетСчетФактуры);
				
			ОбластьПодвала = Макет.ПолучитьОбласть(ИмяОбласти);
#КонецВставки
			ВыводитьОбластьКомиссионера = Ложь;
			
			Если Не ПустаяСтрока(ТекстПредставленияКомиссионера) Тогда
				ОбластьКомиссионера = Макет.ПолучитьОбласть("РеквизитыКомиссионера");
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("ПредставлениеКомиссионера",ТекстПредставленияКомиссионера);
				ОбластьКомиссионера.Параметры.Заполнить(СтруктураПараметров);
				ВыводитьОбластьКомиссионера = Истина;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОбластьМакетаНабор         = Макет.ПолучитьОбласть("Строка");
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("Строка");
				Иначе
#Удаление
					ОбластьМакетаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
#КонецУдаления
#Вставка
					ИмяОбласти = бг_ИмяОбластиСетевойКлиент(
						"СтрокаНабор", 
						ЭтоСетевойКлиент, 
						бг_ПереопределитьМакетСчетФактуры);
						
					ОбластьМакетаНабор = Макет.ПолучитьОбласть(ИмяОбласти);
				
					ИмяОбласти = бг_ИмяОбластиСетевойКлиент(
						"СтрокаКомплектующие", 
						ЭтоСетевойКлиент, 
						бг_ПереопределитьМакетСчетФактуры);
						
					ОбластьМакетаКомплектующие = Макет.ПолучитьОбласть(ИмяОбласти);
#КонецВставки
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации);
			
			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ДействующиеПостановления.Постановление981);
			
			ОперацияОблагаетсяНДСУПокупателя = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати,"НалогообложениеНДС") 
				И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				ОперацияОблагаетсяНДСУПокупателя = Истина;
			КонецЕсли;
			
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
#Вставка	
			СуммыАкцизаДокумента = ДанныеДляПечати.бг_СуммыАкциза.Выгрузить();
			Отбор = Новый Структура("Ссылка, Номенклатура", ДанныеПечати.Ссылка);
			
			ИтогоРазницаСуммаАкцизаУвеличение = 0;
			ИтогоРазницаСуммаАкцизаУменьшение = 0;
#КонецВставки
			ТолькоСтавкаБезНДС = Истина;
			НомерСтроки = 0;
			ПрефиксНабора = "";
			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Пока СтрокаТовары.Следующий() Цикл
			СтрокаБезРасхождений = ДанныеПечати.КорректировочныйСчетФактура
									И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "РазницаБезНДСУвеличение")
									И СтрокаТовары.РазницаБезНДСУвеличение = СтрокаТовары.РазницаБезНДСУменьшение
									И СтрокаТовары.РазницаНДСУвеличение = СтрокаТовары.РазницаНДСУменьшение
									И СтрокаТовары.РазницаСНДСУвеличение = СтрокаТовары.РазницаСНДСУменьшение;
			Если Не СтрокаБезРасхождений Тогда
				Если ПрослеживаемыеТовары <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеТовары.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
				Иначе
					ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
				КонецЕсли;
				
				Если ДанныеПечати.КорректировочныйСчетФактура Тогда
					ОбластьМакета = ОбластьМакетаСтандарт;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьМакета = ОбластьМакетаНабор;
				ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					ОбластьМакета = ОбластьМакетаКомплектующие;
				Иначе
					ОбластьМакета = ОбластьМакетаСтандарт;
				КонецЕсли;
				
				ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс,ЕстьПрослеживаемыеТовары", ДанныеПечати.КорректировочныйСчетФактура, ОпцииПечатиСчетаФактуры.СчетФактураНаАванс, ДанныеПечати.ЕстьПрослеживаемыеТовары);
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					КоличествоСтрок = КоличествоСтрок - 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   ПрослеживаемыеТоварыСтрокаТовары,
													   ОбластьМакета,
													   Неопределено,
													   ПараметрыПечати,
													   ДанныеПечати.КорректировочныйСчетФактура,
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) 
							И ДанныеПечати.КорректировочныйСчетФактура Тогда
							ПрефиксНабора = ОбластьМакета.Параметры.НаименованиеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьМакета, 
													   Неопределено, 
													   ДанныеПечати.КорректировочныйСчетФактура, 
													   ВыводитьКодыТНВЭД, 
													   ВыводитьСерии,
													   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) 
							И ДанныеПечати.КорректировочныйСчетФактура Тогда
							ПрефиксНабора = ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НомерСтроки = НомерСтроки + 1;
					Если ИспользоватьПечатныеФормыСФ2_5 И Не (ОпцииПечатиСчетаФактуры.СчетФактураНаАванс И ДанныеПечати.КорректировочныйСчетФактура) Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   ПрослеживаемыеТоварыСтрокаТовары,
													   ОбластьМакета,
													   СтрокаТовары.НомерСтроки,
													   ПараметрыПечати,
													   ДанныеПечати.КорректировочныйСчетФактура,
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьМакета.Параметры.НаименованиеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьМакета.Параметры.НаименованиеНоменклатуры;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьМакета, 
													   СтрокаТовары.НомерСтроки, 
													   ДанныеПечати.КорректировочныйСчетФактура, 
													   ВыводитьКодыТНВЭД, 
													   ВыводитьСерии,
													   ОпцииПечатиСчетаФактуры.СчетФактураНаАванс);
#Вставка
						НомерАртикулаКонтрагента = Новый Структура(
							"НомерАртикула", 
							?(
								ДанныеПечати.бг_ТипЛицензии = Перечисления.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Розничная, 
								СтрокаТовары.бг_НоменклатураКонтрагентаКод, 
								СтрокаТовары.бг_НоменклатураКонтрагентаАртикул));
								
						ОбластьМакета.Параметры.Заполнить(НомерАртикулаКонтрагента);		
#КонецВставки
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьМакета);
#Вставка
						Отбор.Номенклатура = СтрокаТовары.Номенклатура;
						СтрокиСуммыАкциза = СуммыАкцизаДокумента.НайтиСтроки(Отбор);
						
						Если СтрокиСуммыАкциза.Количество() <> 0 Тогда
							
							СтрокаСуммыАкциза = СтрокиСуммыАкциза[0];
							
							СтруктураЗаполнения = Новый Структура;
							
							СтруктураЗаполнения.Вставить("бг_СуммаАкциза", ?(
								СтрокаСуммыАкциза.бг_СуммаАкциза > 0, 
								СтрокаСуммыАкциза.бг_СуммаАкциза, 
								"без акциза"));
								
							СтруктураЗаполнения.Вставить(
								"бг_СуммаАкцизаДо", 
								СтрокаСуммыАкциза.бг_СуммаАкцизаДо);
								
							СтруктураЗаполнения.Вставить(
								"бг_СуммаАкцизаПосле", 
								СтрокаСуммыАкциза.бг_СуммаАкцизаПосле);
								
							СтруктураЗаполнения.Вставить(
								"бг_СуммаАкцизаУвеличение", 
								СтрокаСуммыАкциза.бг_СуммаАкцизаУвеличение);
								
							СтруктураЗаполнения.Вставить(
								"бг_СуммаАкцизаУменьшение", 
								СтрокаСуммыАкциза.бг_СуммаАкцизаУменьшение);
							
							ОбластьМакета.Параметры.Заполнить(СтруктураЗаполнения);
							
							ИтогоРазницаСуммаАкцизаУвеличение = ИтогоРазницаСуммаАкцизаУвеличение 
								+ СтрокиСуммыАкциза[0].бг_СуммаАкцизаУвеличение;
							ИтогоРазницаСуммаАкцизаУменьшение = ИтогоРазницаСуммаАкцизаУменьшение 
								+ СтрокиСуммыАкциза[0].бг_СуммаАкцизаУменьшение;
						КонецЕсли;	
#КонецВставки
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьМакета.Параметры.ПредставлениеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьМакета.Параметры.ПредставлениеНоменклатуры;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДС",               НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения",    НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСДоИзменения", "--");
						СтруктураПараметров.Вставить("Всего", "--");
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
																		|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", "--");
						СтруктураПараметров.Вставить("СуммаНДСДо", "--");
						СтруктураПараметров.Вставить("СуммаСНДС", "--");
						СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
					КонецЕсли;
					СтруктураПараметров.Вставить("РазницаНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаНДСУвеличение", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
					СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
					Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
						Если ИспользоватьПечатныеФормыСФ2_5 Тогда
							СтруктураПараметров.Вставить("Стоимость", СтрокаТовары.СуммаСНДС);
						Иначе
							СтруктураПараметров.Вставить("СуммаБезНДС", СтрокаТовары.СуммаСНДС);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", НСтр("ru = 'без НДС';
																				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", 0);
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", 0);
					Иначе
						СтруктураПараметров.Вставить("СуммаНДС", 0);
						СтруктураПараметров.Вставить("СуммаНДСДо", 0);
					КонецЕсли;
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				
				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ДействующиеПостановления.Постановление914 
						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс
						ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
						СтруктураПараметров.Вставить("Акциз", "--");
					Иначе
						СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
																	|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				КонецЕсли;
				
				МассивВыводимыхОбластей.Очистить();
				
				Если Не(НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) 
					И ДанныеПечати.КорректировочныйСчетФактура) Тогда
			
					ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
					МассивВыводимыхОбластей.Добавить(ОбластьМакета);
					
					Если НомерСтроки = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
						
						Если ВыводитьОбластьКомиссионера Тогда
							МассивВыводимыхОбластей.Добавить(ОбластьКомиссионера);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						Если Не ДействующиеПостановления.Постановление914 Тогда
							
							ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
							Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
								ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
							Иначе
								ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
							КонецЕсли;
							Если Не ИспользоватьПечатныеФормыСФ2_5 Или ДанныеПечати.КорректировочныйСчетФактура Тогда
								ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
							КонецЕсли;
							ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
							
							ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
							
						КонецЕсли;
						
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
						
					КонецЕсли;
				
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
					Иначе
						РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
			
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета);
			
			Если ДействующиеПостановления.Постановление1137
				И (НЕ ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
				И (НЕ ДанныеПечати.КорректировочныйСчетФактура)
				И ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
													|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
			КонецЕсли;
			
			Если ДанныеПечати.КорректировочныйСчетФактура
				И ТолькоСтавкаБезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", НСтр("ru = 'без НДС';
																			|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", НСтр("ru = 'без НДС';
																			|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru = 'без НДС';
																				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru = 'без НДС';
																				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
			КонецЕсли;
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				Если ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ИтоговыеСуммы.Вставить("ИтогоСтоимость", ИтоговыеСуммы.ИтогоСтоимость);
					Иначе
						ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДС", ИтоговыеСуммы.ИтогоСуммаСНДС);
						ИтоговыеСуммы.Вставить("ИтогоСуммаБезНДСНаСтранице", ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице);
					КонецЕсли;
				КонецЕсли;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
					ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
					Если ИтоговыеСуммы.РазницаСНДСУменьшение <> 0 Тогда
						ИтоговыеСуммы.Вставить("РазницаСНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("РазницаСНДСУменьшениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУменьшениеНаСтранице", "--");
					КонецЕсли;
					Если ИтоговыеСуммы.РазницаСНДСУвеличение <> 0 Тогда
						ИтоговыеСуммы.Вставить("РазницаСНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("РазницаСНДСУвеличениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("РазницаНДСУвеличениеНаСтранице", "--");
					КонецЕсли;
				Иначе
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаНДСНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
					ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
					Если ИтоговыеСуммы.ИтогоРазницаСНДСУменьшение <> 0 Тогда
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшениеНаСтранице", "--");
					КонецЕсли;
					Если ИтоговыеСуммы.ИтогоРазницаСНДСУвеличение <> 0 Тогда
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", "--");
						ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличениеНаСтранице", "--");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
#Вставка
			ИтоговыеСуммы.Вставить(
				"ИтогоРазницаСуммаАкцизаУвеличение", 
				ИтогоРазницаСуммаАкцизаУвеличение);
				
			ИтоговыеСуммы.Вставить(
				"ИтогоРазницаСуммаАкцизаУменьшение", 
				ИтогоРазницаСуммаАкцизаУменьшение);
				
			бг_ЗаполнитьПустыеСтрокиНулями(ИтоговыеСуммы);				
#КонецВставки
			
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				УдалитьВсеОбластиФаксимиле(ОбластьПодвала);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьПодвала);
			
			Если ВыводитьОбластьКомиссионера Тогда
				ТабличныйДокумент.Вывести(ОбластьКомиссионера);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
#Удаление
		КонецЕсли;
#КонецУдаления
		
	КонецЦикла;
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьРеквизитыПодвалаСчетФактура")
Процедура бг_ЗаполнитьРеквизитыПодвалаСчетФактура(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации)

	СтруктураПараметров = Новый Структура;

	Если СведенияОбОрганизации.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		СтруктураПараметров.Вставить("ФИОРуководителя", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
#Вставка
		ШаблонПриказа = НСтр("ru='на основании дов. №%1 от %2'");
		ФорматДаты = "ДФ=dd.MM.yyyy";
		
		СтруктураПараметров.Вставить(
			"бг_ФИОРуководителя", 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.бг_Руководитель, ДанныеПечати.Дата));
		
		СтруктураПараметров.Вставить(
			"бг_ФИОГлавногоБухгалтера", 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.бг_ГлавныйБухгалтер, ДанныеПечати.Дата));
			
		ПредставлениеПриказаРуководителя = ?(
			Не ПустаяСтрока(ДанныеПечати.бг_РуководительНомерОснования), 
			СтрШаблон(
				ШаблонПриказа, 
				ДанныеПечати.бг_РуководительНомерОснования, 
				Формат(ДанныеПечати.бг_РуководительДатаОснования, ФорматДаты)), "");	
				
		ПредставлениеПриказаГлавногоБухгалтера = ?(
			Не ПустаяСтрока(ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования), 
			СтрШаблон(
				ШаблонПриказа, 
				ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования, 
				Формат(ДанныеПечати.бг_ГлавныйБухгалтерДатаОснования, ФорматДаты)), "");
				
		СтруктураПараметров.Вставить(
			"бг_ПриказРуководитель", 
			ПредставлениеПриказаРуководителя);	
						
		СтруктураПараметров.Вставить(
			"бг_ПриказГлавныйБухгалтер", 
			ПредставлениеПриказаГлавногоБухгалтера);
#КонецВставки
	Иначе
		СтруктураПараметров.Вставить("ФИОПБОЮЛ", ДанныеПечати.Руководитель);
		СтруктураПараметров.Вставить("Свидетельство", СведенияОбОрганизации.Свидетельство);
	КонецЕсли;

	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьРеквизитыШапкиСчетФактура")
Процедура бг_ЗаполнитьРеквизитыШапкиСчетФактура(ДанныеПечати, ДанныеОснований, СведенияОПоставщике, ДанныеКонтрагентов, ТабличныйДокумент, ОпцииПечатиСчетаФактуры, ДанныеПоставщиков)

	ДействующиеПостановления = ОпцииПечатиСчетаФактуры.ДействующиеПостановления;
	
	Макет = ОпцииПечатиСчетаФактуры.Макет;
#Удаление
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
#КонецУдаления
#Вставка
	ИмяОбласти = бг_ИмяОбластиСетевойКлиент(
		"Шапка", 
		ДанныеПечати.бг_КатегорияМакета = Перечисления.бг_КатегорииМакетовПечатныхФорм.ОбщийДляСетей, 
		ОпцииПечатиСчетаФактуры.бг_ПереопределитьМакетСчетФактуры);
		
	ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
#КонецВставки
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
#Вставка
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерДоговора", ДанныеПечати.бг_НомерДоговора);
	СтруктураПараметров.Вставить("ДатаДоговора", Формат(ДанныеПечати.бг_ДатаДоговора, "ДФ=dd.MM.yyyy"));
	СтруктураПараметров.Вставить("НомерОснования", ДанныеПечати.бг_НомерОснования);
	СтруктураПараметров.Вставить("ДатаОснования", Формат(ДанныеПечати.бг_ДатаОснования, "ДФ=dd.MM.yyyy"));	
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
#КонецВставки
	
	НомераДаты = Новый Структура("Номер, Дата, НомерИсправления, ДатаИсправления, РеквизитыОснований, НомерИсправленияКорректировочного, ДатаИсправленияКорректировочного");
	
	Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
		НомераДаты.Номер = ДанныеПечати.Номер;
	Иначе
		НомераДаты.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
	КонецЕсли;
	НомераДаты.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД");
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
		НомераДаты.НомерИсправленияКорректировочного = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
		НомераДаты.ДатаИсправленияКорректировочного =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
	Иначе
		НомераДаты.НомерИсправления = ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--");
		НомераДаты.ДатаИсправления =  ?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--");
	КонецЕсли;
	
	Если ДанныеПечати.КорректировочныйСчетФактура Тогда
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ДанныеОснований.НайтиСледующий(СтруктураПоиска);
		СтрокиОснований = ДанныеОснований.Выбрать();
		
		РеквизитыОснований = "";
		
		Пока СтрокиОснований.СледующийПоЗначениюПоля("ИсходныйДокумент") Цикл
			
			Если ОпцииПечатиСчетаФактуры.НомерСформированВСчетеФактуре Тогда
				НомерСчетаФактурыОснования = СтрокиОснований.НомерСчетаФактуры;
			Иначе
				НомерСчетаФактурыОснования = НомерСчетаФактурыНаПечать(СтрокиОснований.НомерСчетаФактуры, ДанныеПечати.ИндексПодразделения);
			КонецЕсли;
			
			ТекстИсходнойСФ = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = ', № %1 от %2, с учетом исправления № %3 от %4';
					|en = ', No. %1 dated %2, considering correction No. %3 dated %4'", Метаданные.Языки.Русский.КодЯзыка),
				НомерСчетаФактурыОснования,
				Формат(СтрокиОснований.ДатаСчетаФактуры, "ДЛФ=ДД; ДП=--"),
				?(ЗначениеЗаполнено(СтрокиОснований.НомерИсправленияСчетаФактуры), СтрокиОснований.НомерИсправленияСчетаФактуры, "--"),
				Формат(СтрокиОснований.ДатаИсправленияСчетаФактуры, "ДЛФ=ДД; ДП=--"));
				
			РеквизитыОснований = РеквизитыОснований + ТекстИсходнойСФ;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(РеквизитыОснований) Тогда
			РеквизитыОснований = Сред(РеквизитыОснований, 3);
		КонецЕсли;
		НомераДаты.РеквизитыОснований = РеквизитыОснований;
		
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(НомераДаты);
	
	СтруктураПараметров = Новый Структура;
	
	// Выводим данные о поставщике.

	Если ДанныеПоставщиков = Неопределено Тогда

		СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
		
		ДополнительноеПредставление = "";
		Если ДействующиеПостановления.Постановление914 И СведенияОПоставщике.ОфициальноеНаименование <> СведенияОПоставщике.ПолноеНаименование Тогда
			ДополнительноеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(%1)';
					|en = '(%1)'"),
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование"));
		КонецЕсли;
		
		ПредставлениеПоставщика = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2';
				|en = '%1 %2'"),
			СведенияОПоставщике.ПолноеНаименование,
			ДополнительноеПредставление));
#Вставка
			Если ОпцииПечатиСчетаФактуры.бг_ПереопределитьМакетСчетФактуры Тогда	
				ПредставлениеПоставщика = СведенияОПоставщике.ОфициальноеНаименование;
			КонецЕсли;
#КонецВставки
			
		АдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));
			
		ИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2';
				|en = '%1%2'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
			?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		
		Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
			СтруктураПараметров.Вставить("НаименованиеПродавца", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПродавца", АдресПоставщика);
			СтруктураПараметров.Вставить("ИННКПППродавца", ИННПоставщика);
		Иначе
			СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПоставщика", АдресПоставщика);
			СтруктураПараметров.Вставить("ИННПоставщика", ИННПоставщика);
		КонецЕсли;
			
		Если НЕ ДанныеПечати.КорректировочныйСчетФактура Тогда
			
			// Выводим данные грузоотправителя.
			ТекстГрузоотправителя = "";
			Если ДанныеПечати.ТолькоУслуги 
			 ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
			 ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
				ТекстГрузоотправителя = "--";
			ИначеЕсли ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель 
			 ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП") Тогда
				ТекстГрузоотправителя = НСтр("ru = 'он же';
											|en = 'same'", Метаданные.Языки.Русский.КодЯзыка);
			Иначе
				ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
					СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
			КонецЕсли;
			
			ПредставлениеГрузоотправителя = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1';
					|en = '%1'"),
				ТекстГрузоотправителя));
			
			СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
			
			
		КонецЕсли;
	
	Иначе
		
		ПредставлениеПоставщика       = "";
		ПредставлениеАдресПоставщика = "";
		ПредставлениеИННПоставщика = "";
		ПредставлениеГрузоотправителя  = "";

		ЕстьГрузоотправитель = НЕ ДанныеПечати.КорректировочныйСчетФактура 
				И НЕ ДанныеПечати.ТолькоУслуги 
				И НЕ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
				И НЕ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент;
		
		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл
			
			СведенияОПоставщике = СтрокаТаблицы.СведенияОПоставщике;
			
			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование", Ложь));
			
			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеАдресПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес", Ложь));
				
			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2%3';
					|en = '%1; %2%3'"),
				ПредставлениеИННПоставщика,
				СтрокаТаблицы.ИНН,
				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
				
				
			Если ЕстьГрузоотправитель Тогда
					СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
					ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1; %2';
						|en = '%1; %2'"),
					ПредставлениеГрузоотправителя,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
			КонецЕсли;
			
		КонецЦикла;
		
		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			Сред(ПредставлениеПоставщика, 3));
		
		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			Сред(ПредставлениеАдресПоставщика, 3));
		
		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			Сред(ПредставлениеИННПоставщика, 3));
			
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));
		
		Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
			СтруктураПараметров.Вставить("НаименованиеПродавца", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПродавца", ПредставлениеАдресПоставщика);
			СтруктураПараметров.Вставить("ИННКПППродавца", ПредставлениеИННПоставщика);
		Иначе
			СтруктураПараметров.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
			СтруктураПараметров.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
			СтруктураПараметров.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
		КонецЕсли;
	
		СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
		
	КонецЕсли;
	
#Вставка
	Если ОпцииПечатиСчетаФактуры.бг_ПереопределитьМакетСчетФактуры Тогда	
		ПредставлениеГрузоотправителя = СтрШаблон(
			НСтр("ru='%1, %2'"), 
			ФормированиеПечатныхФорм.ОписаниеОрганизации(
				СведенияОГрузоотправителе, 
				"ОфициальноеНаименование"),
			ДанныеПечати.бг_АдресГрузоотправителя);
			
		СтруктураПараметров.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);
	КонецЕсли;
#КонецВставки
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
				НСтр("ru = '-- от --';
					|en = '-- dated --'", Метаданные.Языки.Русский.КодЯзыка),
				ДанныеПечати.СтрокаПоДокументу));
		
	СтруктураПараметров.Вставить("ПоДокументу", СтрокаПоДокументу);
	
	ПоДокументуОтгрузки =
		?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "ПредставлениеСтроки5а")
			И ЗначениеЗаполнено(ДанныеПечати.ПредставлениеСтроки5а),
		ДанныеПечати.ПредставлениеСтроки5а,
		НСтр("ru = '-- от --';
			|en = '-- dated --'"));
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 Тогда
		СтруктураПараметров.Вставить("ДокументыОбОтгрузке", ПоДокументуОтгрузки);
	Иначе
		СтруктураПараметров.Вставить("ПоДокументуОтгрузки", ПоДокументуОтгрузки);
	КонецЕсли;
	
	ЕстьГрузополучатель = Не ДанныеПечати.КорректировочныйСчетФактура
		И НЕ (ДанныеПечати.ТолькоУслуги
		ИЛИ (ДействующиеПостановления.Постановление1137 И ОпцииПечатиСчетаФактуры.СчетФактураНаАванс)
		ИЛИ ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент);
	
	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННКПППокупателя = "";
	ПредставлениеГрузополучателя  = "";
	
	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		
		СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;
		
		ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
				|en = '%1; %2'"),
			ПредставлениеПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));
		
		ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
				|en = '%1; %2'"),
			ПредставлениеАдресаПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));
			
		ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2%3';
				|en = '%1; %2%3'"),
			ПредставлениеИННПокупателя,
			СтрокаТаблицы.ИНН,
			?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
		
		Если ЕстьГрузополучатель Тогда
			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
				ПредставлениеГрузополучателя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		Сред(ПредставлениеПокупателя, 3));
	
	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		Сред(ПредставлениеАдресаПокупателя, 3));
	
	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		Сред(ПредставлениеИННПокупателя, 3));
		
	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
			|en = '%1'"),
		?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));
	
	СтруктураПараметров.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("НаименованиеПокупателя", ПредставлениеПокупателя);
		СтруктураПараметров.Вставить("ИННКПППокупателя", ПредставлениеИННПокупателя);
	Иначе
		СтруктураПараметров.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
		СтруктураПараметров.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	КонецЕсли;

	Если Не ДанныеПечати.КорректировочныйСчетФактура Тогда
		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	КонецЕсли;
#Вставка
	Если ОпцииПечатиСчетаФактуры.бг_ПереопределитьМакетСчетФактуры Тогда
			
		ПредставлениеГрузополучателя = СтрШаблон(
			НСтр("ru='%1, %2'"), 
			ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), 
				"ПолноеНаименование"),
			ДанныеПечати.бг_АдресГрузополучателя);
			
		СтруктураПараметров.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);	
			
	КонецЕсли;
#КонецВставки
	
	Если ДействующиеПостановления.Постановление1137 И ЗначениеЗаполнено(ДанныеПечати.Валюта) 
		И ОпцииПечатиСчетаФактуры.ПечатьВВалюте Тогда
		
		СтруктураПараметров.Вставить("Валюта", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, %2';
				|en = '%1, %2'"),
			ДанныеПечати.ВалютаНаименованиеПолное,
			ДанныеПечати.ВалютаКод));
			
	ИначеЕсли ДействующиеПостановления.Постановление1137 Тогда
		СтруктураПараметров.Вставить("Валюта", НСтр("ru = 'Российский рубль, 643';
													|en = 'Russian ruble, 643'", Метаданные.Языки.Русский.КодЯзыка));
	КонецЕсли;
	
	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействующиеПостановления.Постановление981 Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
				|en = '%1'"),
			СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
#Вставка
	ПредставлениеИдентификаторГосКонтракта = ?(
		ПустаяСтрока(ПредставлениеИдентификаторГосКонтракта), 
		"---", 
		ПредставлениеИдентификаторГосКонтракта);
#КонецВставки
	СтруктураПараметров.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);
	
	Если ОпцииПечатиСчетаФактуры.СчетФактураНалоговыйАгент Тогда
		// для печати подвала берем сведения об организации из сведений о покупателе
		СведенияОПоставщике = СведенияОПокупателе;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ОпцииПечатиСчетаФактуры.ИспользоватьПечатныеФормыСФ2_5 И ДанныеПечати.КорректировочныйСчетФактура И Не ОпцииПечатиСчетаФактуры.СчетФактураНаАванс Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ПредставлениеИдентификаторГосКонтракта;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьРеквизитыСтрокиТовара")
Процедура бг_ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры, ВыводитьКодТНВД, ВыводитьСерии, СчетФактураНаАванс)

	ИспользоватьНаборы = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(СтрокаТовары, "ЭтоНабор");
	
	ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
	
	ОбластьМакета.Параметры.Заполнить(СтрокаТовары);
#Вставка
	ДанныеСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТовары);
	бг_ЗаполнитьПустыеСтрокиНулями(ДанныеСтроки);
	
	ОбластьМакета.Параметры.Заполнить(ДанныеСтроки);
#КонецВставки
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КоличествоМест", 0);
	СтруктураПараметров.Вставить("КоличествоВОдномМесте", 0);
	СтруктураПараметров.Вставить("НоменклатураКод", "");
	СтруктураПараметров.Вставить("КодТНВЭД", "--");
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТовары);
	ОкруглитьДоЦелого(СтруктураПараметров.КоличествоМест);
	СтруктураПараметров.Вставить("НомерСтроки", НомерСтроки);
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = СтрокаТовары.ЭтоВозвратнаяТара;	
	ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Если ВыводитьКодТНВД <> Неопределено Тогда
		ДополнительныеПараметрыПолученияНаименованияДляПечати.КодТНВЭД = ?(НЕ ВыводитьКодТНВД.ВыводитьВКолонке И ВыводитьКодТНВД.ВыводитьВСтроке, СтрокаТовары.КодТНВЭД, "");
		Если НЕ ВыводитьКодТНВД.ВыводитьВКолонке Тогда
			СтруктураПараметров.КодТНВЭД = "--";
		КонецЕсли;
	КонецЕсли;
	СерияНаименование = Неопределено;
	Если ВыводитьСерии Тогда
		СерияНаименование = СтрокаТовары.СерияНаименование;
	КонецЕсли;	
	ПредставлениеНоменклатуры =  ПрефиксИПостфикс.Префикс
		+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Строка(СтрокаТовары.НоменклатураНаименование),
			СтрокаТовары.ХарактеристикаНаименование,
			,
			СерияНаименование,
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
		+ ПрефиксИПостфикс.Постфикс;
	
	СтруктураПараметров.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
		
	Если Не ВыводитьКодНоменклатуры Тогда
		СтруктураПараметров.НоменклатураКод = "";
	КонецЕсли;
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
	Если ИспользоватьНаборы
		И СтрокаТовары.ЭтоКомплектующие
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
		   ИЛИ СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	ИначеЕсли ИспользоватьНаборы
		И СтрокаТовары.ЭтоНабор
		И СтрокаТовары.ВариантПредставленияНабораВПечатныхФормах = Перечисления.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие
		И (СтрокаТовары.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих
			ИЛИ СчетФактураНаАванс) Тогда
		// Область должна остаться незаполненной
		ОбластьМакета.Параметры.Заполнить(НаборыСервер.ПустыеДанные());
	КонецЕсли;

КонецПроцедуры

Функция бг_ИмяОбластиСетевойКлиент(ИмяОбласти, ЭтоСетевойКлиент, МакетПереопределяется)

	Если Не ЭтоСетевойКлиент
		Или Не МакетПереопределяется Тогда
		Возврат ИмяОбласти;	
	КонецЕсли;
	
	ИмяОбластиСетевойКлиент = ИмяОбласти + "СетевойКлиент";
	
	Возврат ИмяОбластиСетевойКлиент;
	
КонецФункции	

Процедура бг_ЗаполнитьПустыеСтрокиНулями(ЗаполняемыеСтроки)
	
	ИменаЧисловыхПараметров = бг_ИменаЧисловыхПараметров();
	
	Для Каждого ИмяПараметра Из ИменаЧисловыхПараметров Цикл
		
		Если Не ЗаполняемыеСтроки.Свойство(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗначениеПараметра = ЗаполняемыеСтроки[ИмяПараметра];
		
		Если ЗначениеПараметра = 0 Или ЗначениеПараметра = "--" Тогда
			ЗаполняемыеСтроки[ИмяПараметра] = "0,00";	
		КонецЕсли;	
		
	КонецЦикла;		
	
КонецПроцедуры

Функция бг_ИменаЧисловыхПараметров()

	ИменаЧисловыхПараметров = Новый Массив;
	
	ИменаЧисловыхПараметров.Добавить("РазницаБезНДСУвеличение");
	ИменаЧисловыхПараметров.Добавить("РазницаБезНДСУменьшение");
	ИменаЧисловыхПараметров.Добавить("РазницаНДСУвеличение");
	ИменаЧисловыхПараметров.Добавить("РазницаНДСУменьшение");
	ИменаЧисловыхПараметров.Добавить("РазницаСНДСУвеличение");
	ИменаЧисловыхПараметров.Добавить("РазницаСНДСУменьшение");
	ИменаЧисловыхПараметров.Добавить("СуммаБезНДС");
	ИменаЧисловыхПараметров.Добавить("СуммаБезНДСДо");
	ИменаЧисловыхПараметров.Добавить("СуммаНДС");
	ИменаЧисловыхПараметров.Добавить("СуммаНДСДо");
	ИменаЧисловыхПараметров.Добавить("СуммаСНДС");
	ИменаЧисловыхПараметров.Добавить("СуммаСНДСДо");
	ИменаЧисловыхПараметров.Добавить("Цена");
	ИменаЧисловыхПараметров.Добавить("ЦенаДо");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаСуммаАкцизаУвеличение");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаСуммаАкцизаУменьшение");
	ИменаЧисловыхПараметров.Добавить("ИтогоСуммаНДС");
	ИменаЧисловыхПараметров.Добавить("ИтогоСуммаНДСНаСтранице");
	ИменаЧисловыхПараметров.Добавить("ИтогоСуммаСНДС");
	ИменаЧисловыхПараметров.Добавить("ИтогоСуммаСНДСНаСтранице");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаСНДСУменьшение");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаСНДСУменьшениеНаСтранице");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаНДСУменьшение");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаНДСУменьшениеНаСтранице");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаСНДСУвеличение");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаСНДСУвеличениеНаСтранице");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаНДСУвеличение");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаНДСУвеличениеНаСтранице");
	ИменаЧисловыхПараметров.Добавить("ИтогоСуммаБезНДС");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаБезНДСУвеличение");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаБезНДСУменьшение");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаБезНДСУвеличениеНаСтранице");
	ИменаЧисловыхПараметров.Добавить("ИтогоРазницаБезНДСУменьшениеНаСтранице");
	
	Возврат ИменаЧисловыхПараметров;
	
КонецФункции

#КонецОбласти

#Область Печать_М15

&ИзменениеИКонтроль("ЗаполнитьРеквизитыШапкиМ15")
Процедура бг_ЗаполнитьРеквизитыШапкиМ15(ДанныеПечати, Макет, ТабличныйДокумент)

	// Выводим общие реквизиты шапки
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата, ,ДанныеПечати.БанковскийСчетОрганизации);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации));
	СтруктураПараметров.Вставить("ОрганизацияПоОКПО", СведенияОбОрганизации.КодПоОКПО);
	СтруктураПараметров.Вставить("НомерДокумента", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер));

#Удаление
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,");
#КонецУдаления
#Вставка
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование, ЮридическийАдрес");
#КонецВставки
	СтруктураПараметров.Вставить("КонтрагентНаименование", ПредставлениеКонтрагента);

	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
#Вставка
	бг_ЗаполнитьРеквизитыШапкиМ15_ПередачаСырьяПереработчику(ДанныеПечати, ОбластьМакета);
#КонецВставки
	ТабличныйДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьТабличныйДокументМ15")
Процедура бг_ЗаполнитьТабличныйДокументМ15(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)

	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
	И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_М15_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
#Вставка
	бг_ВыводитьСчетКт = ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("бг_СчетКт") <> Неопределено;
#КонецВставки

	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл

		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.Сбросить();
		Если НЕ ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 печать М-15 не требуется';
				|en = 'It is not required to print M-15 for document %1'"),
				ДанныеПечати.Ссылка);
			Иначе
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют товары. Печать накладной не требуется';
				|en = 'Goods are missing in document %1. Printing of the invoice is not required'"),
				ДанныеПечати.Ссылка);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		// Выводим общие реквизиты шапки
		ЗаполнитьРеквизитыШапкиМ15(ДанныеПечати, Макет, ТабличныйДокумент);

		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);

		НомерСтраницы   = 1;

		// Инициализация итогов в документе
		ИтоговыеСуммы = СтруктураИтоговыеСуммы();

		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;

		// Выводим многострочную часть документа
		ОбластьМакета  = Макет.ПолучитьОбласть("Строка");
		ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");

		НомерСтроки = 0;
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
		ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		ЗаполнитьРеквизитыПодвалаМ15(ОбластьПодвала, ДанныеПечати, ИтоговыеСуммы);

		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;

		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = СтрокаТовары.Количество();
		Пока СтрокаТовары.Следующий() Цикл

			НомерСтроки = НомерСтроки + 1;
			ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьМакета, НомерСтроки, ВыводитьКодНоменклатуры,,ВыводитьСерии);
#Вставка
			бг_ЗаполнитьРеквизитыСтрокиТовара_ПередачаСырьяПереработчику(СтрокаТовары, ОбластьМакета, бг_ВыводитьСчетКт);
#КонецВставки
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьМакета);

			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвала);
			КонецЕсли;

			Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("НомерСтраницы", "Страница " + НомерСтраницы);
				ЗаголовокТаблицы.Параметры.Заполнить(СтруктураПараметров);
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;

			ТабличныйДокумент.Вывести(ОбластьМакета);
			РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);

		КонецЦикла;

		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
		ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		ЗаполнитьРеквизитыПодвалаМ15(ОбластьПодвала, ДанныеПечати, ИтоговыеСуммы);
		ТабличныйДокумент.Вывести(ОбластьПодвала);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Печать_УПД

&ИзменениеИКонтроль("СформироватьПечатнуюФормуУПД")
Функция бг_СформироватьПечатнуюФормуУПД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПД";

	СтруктураТиповНаПечать               = Новый Структура;
	МассивСчетФактураВыданный            = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураКомиссионеру        = Новый Массив; // Массив из ДокументСсылка
	МассивСчетФактураПолученный          = Новый Массив;
	ОснованияНаРеализацию                = Новый Массив;
	ОснованияКомиссионеру                = Новый Массив;
	ОснованияСчетФактураПолученный       = Новый Массив;
	ДокументыБезВыданногоСчетаФактуры    = Новый Массив; // Массив из ДокументСсылка
	ДокументыБезСчетаФактурыКомиссионеру = Новый Массив;
	ДокументыБезПолученногоСчетаФактуры  = Новый Массив; // Массив из ДокументСсылка

	Если ПараметрыПечати = Неопределено Тогда
		ПараметрыПечати = Новый Структура;
	КонецЕсли;

	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		ИмяОбъекта = Сред(СтруктураОбъектов.Ключ, 10);

		Если ИмяОбъекта = "ОтчетКомитентуОСписании" Или ИмяОбъекта = "ОтчетКомиссионераОСписании" Тогда
			Продолжить;
		КонецЕсли;

		Если ИмяОбъекта = "СчетФактураВыданный" Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);

		ИначеЕсли ИмяОбъекта = "СчетФактураКомиссионеру" Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, СтруктураОбъектов.Значение);

		ИначеЕсли ИмяОбъекта = "ОтчетКомиссионера" Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияКомиссионеру, СтруктураОбъектов.Значение);

		Иначе

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияНаРеализацию, СтруктураОбъектов.Значение);

		КонецЕсли;

		Если ПараметрыПечати.Свойство("ДополнитьПолученнымиСчетамиФактуры")
			И ПараметрыПечати.ДополнитьПолученнымиСчетамиФактуры Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактураПолученный, СтруктураОбъектов.Значение);

		КонецЕсли;

	КонецЦикла;

	Если ОснованияНаРеализацию.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(ОснованияНаРеализацию);

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если ОснованияКомиссионеру.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураКомиссионеру.ПолучитьСчетаФактурыНаПечать(ОснованияКомиссионеру);

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураКомиссионеру, РезультатАнализа.СчетаФактурыНаПечать, Истина);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезВыданногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если ОснованияСчетФактураПолученный.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураПолученный.ПолучитьСчетаФактурыНаПечать(ОснованияСчетФактураПолученный);

		ПараметрыПечати.Вставить("МассивСчетФактураПолученный", РезультатАнализа.СчетаФактурыНаПечать);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда
				ДокументыБезПолученногоСчетаФактуры.Добавить(СтрокаТаблицыОшибок.ДокументОснование);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;

	Если МассивСчетФактураКомиссионеру.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураКомиссионеру", МассивСчетФактураКомиссионеру);
	КонецЕсли;

	Для Каждого Документ Из ДокументыБезВыданногоСчетаФактуры Цикл

		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;

	КонецЦикла;

	НомерТипаДокумента = 0;

	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;
		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Истина);

		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);

		Если ДанныеДляПечати <> Неопределено Тогда
			ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		КонецЕсли;

	КонецЦикла;

	СтруктураТиповНаПечать.Очистить();
	Для Каждого Документ Из ДокументыБезПолученногоСчетаФактуры Цикл

		ИмяОбъекта = Документ.Метаданные().Имя;
		Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
			МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
			МассивДокументовДляСтруктуры.Добавить(Документ);
		Иначе
			МассивДокументовТипа = Новый Массив;
			МассивДокументовТипа.Добавить(Документ);
			СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
		КонецЕсли;

	КонецЦикла;

	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;

		ПараметрыПечати.Вставить("НеВыводитьУПДПосредника", Ложь);
		ПараметрыПечати.Вставить("НеВыводитьОсновнойУПД", Истина);

		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУПД(ПараметрыПечати, СтруктураОбъектов.Значение);

		ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		
	КонецЦикла;
#Вставка
	ТабличныйДокумент.ПолеСверху	= 10;
	ТабличныйДокумент.ПолеСлева		= 10;
	ТабличныйДокумент.ПолеСнизу		= 10;
	ТабличныйДокумент.ПолеСправа	= 10;
#КонецВставки
	
	Возврат ТабличныйДокумент;

КонецФункции

&ИзменениеИКонтроль("ЗаполнитьРеквизитыШапкиУПД")
Процедура бг_ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОПоставщике, ДанныеКонтрагентов, ОбластьМакета, ДанныеПоставщиков, ОпцииПечати)

	СведенияОГрузоотправителе = СведенияОГрузоотправителе(ДанныеПечати);
	ВыводитьДанныеПоставщика = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
	ВыводитьДанныеПокупателя = Не (ДанныеПечати.СтатусУПД = 2 И ДанныеПечати.ЭтоПередачаНаКомиссию);
#Вставка
    бг_ПереопределитьМакетУПД = Ложь;
	Если ОпцииПечати.Свойство("бг_ПереопределитьМакетУПД") Тогда
		бг_ПереопределитьМакетУПД = ОпцииПечати.бг_ПереопределитьМакетУПД; 
	КонецЕсли;
#КонецВставки
	
	ОбластьМакета.Параметры.Заполнить(ДанныеПечати);

	ПараметрыШапки = Новый Структура;

	Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
		ПараметрыШапки.Вставить("Номер", ДанныеПечати.Номер);
	Иначе
		ПараметрыШапки.Вставить("Номер", НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения));
	КонецЕсли;

	ПараметрыШапки.Вставить("Дата", Формат(ДанныеПечати.Дата, "ДЛФ=ДД"));
	ПараметрыШапки.Вставить("НомерИсправления", ?(ДанныеПечати.Исправление, ДанныеПечати.НомерИсправления, "--"));
	ПараметрыШапки.Вставить("ДатаИсправления",
	?(ДанныеПечати.Исправление, Формат(ДанныеПечати.ДатаИсправления, "ДЛФ=ДД"), "--"));

	// Выводим данные о поставщике.

	Если ДанныеПоставщиков = Неопределено Тогда

		ПредставлениеПоставщика = "--";
		ПредставлениеАдресПоставщика = "--";
		ПредставлениеИННПоставщика = "--";

		Если ВыводитьДанныеПоставщика Тогда
			ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
			|en = '%1'"),
			СведенияОПоставщике.ПолноеНаименование);

			ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1';
			|en = '%1'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес"));

			ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2';
			|en = '%1%2'"),
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ИНН", Ложь),
			?(Не ПустаяСтрока(ДанныеПечати.КПППоставщика), "/" + ДанныеПечати.КПППоставщика, ""));
		КонецЕсли;

		// Выводим данные грузоотправителя.
		ТекстГрузоотправителя = "";
		Если ДанныеПечати.ТолькоУслуги ИЛИ ДанныеПечати.Грузоотправитель = Неопределено Тогда
			ТекстГрузоотправителя = "--";
		ИначеЕсли ВыводитьДанныеПоставщика
			И (ДанныеПечати.Организация = ДанныеПечати.Грузоотправитель
			ИЛИ ТипЗнч(ДанныеПечати.Грузоотправитель) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "КПП") = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Грузоотправитель, "КПП")) Тогда
			ТекстГрузоотправителя = НСтр("ru = 'он же';
			|en = 'same'", Метаданные.Языки.Русский.КодЯзыка);
		Иначе
			ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес");
		КонецЕсли;
#Вставка
		Если бг_ПереопределитьМакетУПД Тогда
			СведенияОГрузоотправителе.Вставить("бг_АдресГрузоотправителя", ДанныеПечати.бг_АдресГрузоотправителя);
			ТекстГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОГрузоотправителе, "ПолноеНаименование,бг_АдресГрузоотправителя");
		КонецЕсли;
#КонецВставки
		
		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
		|en = '%1'"),
		ТекстГрузоотправителя);

	Иначе

		ПредставлениеПоставщика       = "";
		ПредставлениеАдресПоставщика = "";
		ПредставлениеИННПоставщика = "";
		ПредставлениеГрузоотправителя  = "";

		ЕстьГрузоотправитель = НЕ ДанныеПечати.ТолькоУслуги;

		ТаблицаПоставщиков = ТаблицаПоставщиковСчетаФактуры(ДанныеПечати, ДанныеПоставщиков);
		Для Каждого СтрокаТаблицы Из ТаблицаПоставщиков Цикл

			Если ВыводитьДанныеПоставщика Тогда
				СведенияОПоставщикеВрем = СтрокаТаблицы.СведенияОПоставщике;

				ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
				|en = '%1; %2'"),
				ПредставлениеПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ПолноеНаименование", Ложь));

				ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
				|en = '%1; %2'"),
				ПредставлениеАдресПоставщика,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщикеВрем, "ЮридическийАдрес", Ложь));

				ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2%3';
				|en = '%1; %2%3'"),
				ПредставлениеИННПоставщика,
				СтрокаТаблицы.ИНН,
				?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
			КонецЕсли;

			Если ЕстьГрузоотправитель Тогда
				СведенияОГрузоотправителе = СтрокаТаблицы.СведенияОГрузоотправителе;
#Вставка
				Если бг_ПереопределитьМакетУПД Тогда
					СведенияОГрузоотправителе.Вставить("бг_АдресГрузоотправителя", ДанныеПечати.бг_АдресГрузоотправителя);
					ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%1; %2';
						|en = '%1; %2'"),
						ПредставлениеГрузоотправителя,
						ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,бг_АдресГрузоотправителя"));
				Иначе
#КонецВставки
				ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1; %2';
				|en = '%1; %2'"),
				ПредставлениеГрузоотправителя,
				ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправителе, "ПолноеНаименование,ФактическийАдрес", Ложь));
#Вставка
				КонецЕсли;
#КонецВставки
			КонецЕсли;

		КонецЦикла;

		ПредставлениеПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
		|en = '%1'"),
		?(ВыводитьДанныеПоставщика, Сред(ПредставлениеПоставщика, 3), "--"));

		ПредставлениеАдресПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
		|en = '%1'"),
		?(ВыводитьДанныеПоставщика, Сред(ПредставлениеАдресПоставщика, 3), "--"));

		ПредставлениеИННПоставщика = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
		|en = '%1'"),
		?(ВыводитьДанныеПоставщика, Сред(ПредставлениеИННПоставщика, 3), "--"));

		ПредставлениеГрузоотправителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
		|en = '%1'"),
		?(ЕстьГрузоотправитель, Сред(ПредставлениеГрузоотправителя, 3), "--"));

	КонецЕсли;

	ПараметрыШапки.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
	ПараметрыШапки.Вставить("АдресПоставщика", ПредставлениеАдресПоставщика);
	ПараметрыШапки.Вставить("ИННПоставщика", ПредставлениеИННПоставщика);
	ПараметрыШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);

	// Выводим данные грузополучателя и покупателя.
	ТекстГрузополучателя = "--";

	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1';
	|en = '%1'"),
	ТекстГрузополучателя);
	СтрокаПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1';
	|en = '%1'"),
	?(ПустаяСтрока(ДанныеПечати.СтрокаПоДокументу),
	НСтр("ru = '-- от --';
	|en = '-- dated --'", Метаданные.Языки.Русский.КодЯзыка),
	ДанныеПечати.СтрокаПоДокументу));

	ПараметрыШапки.Вставить("ПоДокументу", СтрокаПоДокументу);

	ЕстьГрузополучатель = Не ДанныеПечати.ТолькоУслуги;

	ТаблицаКонтрагентов = ТаблицаКонтрагентовСчетаФактуры(ДанныеПечати, ДанныеКонтрагентов);

	ПредставлениеПокупателя       = "";
	ПредставлениеАдресаПокупателя = "";
	ПредставлениеИННПокупателя    = "";
	ПредставлениеГрузополучателя  = "";

	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл

		Если ВыводитьДанныеПокупателя Тогда
			СведенияОПокупателе = СтрокаТаблицы.СведенияОПокупателе;

			ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
			|en = '%1; %2'"),
			ПредставлениеПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь));

			ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
			|en = '%1; %2'"),
			ПредставлениеАдресаПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес", Ложь));

			ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2%3';
			|en = '%1; %2%3'"),
			ПредставлениеИННПокупателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь),
			?(Не ПустаяСтрока(СтрокаТаблицы.КПП), "/" + СтрокаТаблицы.КПП, ""));
		КонецЕсли;

		Если ЕстьГрузополучатель Тогда
			СведенияОГрузополучателе = СтрокаТаблицы.СведенияОГрузополучателе;
#Вставка
			Если бг_ПереопределитьМакетУПД Тогда
				СведенияОГрузополучателе.Вставить("бг_АдресГрузополучателя", ДанныеПечати.бг_АдресГрузополучателя);
				ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1; %2';
					|en = '%1; %2'"),
					ПредставлениеГрузополучателя,
					ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,бг_АдресГрузополучателя"));
			Иначе
#КонецВставки
			ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1; %2';
			|en = '%1; %2'"),
			ПредставлениеГрузополучателя,
			ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, "ПолноеНаименование,ФактическийАдрес", Ложь));
#Вставка
			КонецЕсли;
#КонецВставки
		КонецЕсли;

	КонецЦикла;

	ПредставлениеПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1';
	|en = '%1'"),
	?(ВыводитьДанныеПокупателя, Сред(ПредставлениеПокупателя, 3), "--"));

	ПредставлениеАдресаПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1';
	|en = '%1'"),
	?(ВыводитьДанныеПокупателя, Сред(ПредставлениеАдресаПокупателя, 3), "--"));

	ПредставлениеИННПокупателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1';
	|en = '%1'"),
	?(ВыводитьДанныеПокупателя, Сред(ПредставлениеИННПокупателя, 3), "--"));

	ПредставлениеГрузополучателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = '%1';
	|en = '%1'"),
	?(ЕстьГрузополучатель, Сред(ПредставлениеГрузополучателя, 3), "--"));

	ПараметрыШапки.Вставить("ПредставлениеПокупателя", ПредставлениеПокупателя);
	ПараметрыШапки.Вставить("АдресПокупателя", ПредставлениеАдресаПокупателя);
	ПараметрыШапки.Вставить("ИННПокупателя", ПредставлениеИННПокупателя);
	ПараметрыШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	ПараметрыШапки.Вставить("Валюта", НСтр("ru = 'Российский рубль, 643';
	|en = 'Russian ruble, 643'", Метаданные.Языки.Русский.КодЯзыка));

	СтруктураПараметровИдентификаторГосКонтракта = Новый Структура("ИдентификаторГосКонтракта");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровИдентификаторГосКонтракта, ДанныеПечати);
	Если ДействуетПостановление981(ДанныеПечати.Дата,ДанныеПечати.ДатаИсправления) Тогда
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
		|en = '%1'"),
		СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	Иначе
		ПредставлениеИдентификаторГосКонтракта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1';
		|en = '%1'"),
		СокрЛП(СтруктураПараметровИдентификаторГосКонтракта.ИдентификаторГосКонтракта));
	КонецЕсли;
	ПараметрыШапки.Вставить("ИдентификаторГосКонтракта", ПредставлениеИдентификаторГосКонтракта);

	ОбластьМакета.Параметры.Заполнить(ПараметрыШапки);

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьТабличныйДокументУПД")
Процедура бг_ЗаполнитьТабличныйДокументУПД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
					И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
	
	МакетУПД = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_ru");
	МакетУПД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент_625_ru");
	МакетУПД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент981_ru");
	МакетУПД_534 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент534_ru");
	МакетУПД_534_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534");
	МакетУПД_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы(
						"ОбщийМакет.ПФ_MXL_УниверсальныйПередаточныйДокумент534Прослеж");
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	ОпцииПечати.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ДанныеДляПечати.Свойство("РезультатПоКонтрагентам") Тогда
		ВыборкаКонтрагентов = ДанныеДляПечати.РезультатПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаКонтрагентов = Неопределено;
	КонецЕсли;
	Если ДанныеДляПечати.Свойство("РезультатПоИсходнымДанным") Тогда
		ВыборкаОснований = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаОснований = Неопределено;
	КонецЕсли;
	ПрослеживаемыеТовары = Неопределено;
	ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Ложь;
	Если ДанныеДляПечати.Свойство("Прослеживаемость") Тогда
		ПрослеживаемыеТовары = ДанныеДляПечати.Прослеживаемость.Выгрузить();
		Если ПрослеживаемыеТовары.Количество() > 0 Тогда
			ЕстьПрослеживаемыеТоварыВТабличнойЧасти = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПостановление534 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
#Вставка
	бг_ПереопределитьМакетУПД = Ложь;
	бг_ЭтоМакет_ОбщийДляСетей = Ложь;
	бг_МакетУПД_534Прослеж_ОсновнойМакет = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйПередаточныйДокумент534Прослеж_ОсновнойМакет_ru");
#КонецВставки

	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.СтатусУПД = 2
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И НЕ ДанныеПечати.ЭтоПередачаНаКомиссию
			И ДанныеПечати.ТребуетсяНаличиеСФ Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2';
					|en = '%2 is not entered for document %1'"),
				ДанныеПечати.Ссылка,
				ДанныеПечати.ПредставлениеДокумента);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
				
			Продолжить;
		КонецЕсли;
		
		Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
				Макет = ?(ЗначениеЗаполнено(ДанныеПечати.ЕстьПрослеживаемыеТовары) И ДанныеПечати.ЕстьПрослеживаемыеТовары Или ЕстьПрослеживаемыеТоварыВТабличнойЧасти, МакетУПД_534Прослеж_2_5, МакетУПД_534_2_5);
			Иначе
				Макет = МакетУПД_534;
			КонецЕсли;
#Вставка
			Если ДанныеДляПечати.Свойство("бг_ИспользоватьПечатныеФормыСФ2_5") Тогда
				ИспользоватьПечатныеФормыСФ2_5 = ДанныеДляПечати.бг_ИспользоватьПечатныеФормыСФ2_5;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						Макет = бг_МакетУПД_534Прослеж_ОсновнойМакет;
						бг_ПереопределитьМакетУПД = ДанныеДляПечати.бг_ПереопределитьМакетУПД;
						ОпцииПечати.Вставить("бг_ПереопределитьМакетУПД", бг_ПереопределитьМакетУПД);
						бг_СуммыАкцизаДокумента = ДанныеДляПечати.бг_СуммыАкциза.Выгрузить();
					КонецЕсли;
			КонецЕсли;
#КонецВставки
			ЕстьПостановление534 = Истина;
		ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_981;
			ЕстьПостановление981 = Истина;
		ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
			Макет = МакетУПД_625;
			ЕстьПостановление1137_625 = Истина;
		Иначе
			Макет = МакетУПД;
			ЕстьПостановление1137 = Истина;
		КонецЕсли;
		Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
		
		Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.';
				|en = 'Cannot print universal transfer documents
				|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
			
			Текст = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
				|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.';
				|en = 'Cannot print universal transfer documents
				|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
				И ЕстьПостановление534 Тогда
			
			ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных передаточных документов,
			|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.';
			|en = 'Cannot simultaneously print universal transfer documents
			|generated before and after the commencement date of RF Government decree No.534 dated 04/02/2021'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
			
			ТабличныйДокумент.Очистить();
			Прервать;
			
		КонецЕсли;
		
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ДанныеДляПечати.Свойство("РезультатПоПоставщикам")
			И ДанныеПечати.ПеревыставленныйСчетФактура Тогда
			ВыборкаПоставщиков = ДанныеДляПечати.РезультатПоПоставщикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КонецЕсли;
		
			
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьШапка,
			ДанныеПечати.Ссылка);
		
		ЗаполнитьРеквизитыШапкиУПД(ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов, ОбластьШапка, ВыборкаПоставщиков, ОпцииПечати);
#Вставка
    	Если бг_ПереопределитьМакетУПД Тогда
		Если ДанныеПечати.бг_КатегорияМакета = ПредопределенноеЗначение(
				"Перечисление.бг_КатегорииМакетовПечатныхФорм.ОбщийДляСетей") Тогда
			бг_ЭтоМакет_ОбщийДляСетей = Истина;
			ОбластьШапкаПродолжениеСети = Макет.ПолучитьОбласть("ШапкаПродолжениеСети");
			бг_ЗаполнитьРеквизитыШапкиПродолжениеСетиУПД(ДанныеПечати, ОбластьШапкаПродолжениеСети);
		КонецЕсли;
	КонецЕсли;
#КонецВставки
		
		НомерСтраницы = 1;
		
		// Инициализация итогов в документе
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
		Иначе
			ИтоговыеСуммы = СтруктураИтоговыеСуммы();
		КонецЕсли;
		
		// Создаем массив для проверки вывода
		МассивВыводимыхОбластей = Новый Массив;
		
		// Выводим многострочную часть документа
		ОбластьСтрокаСтандарт = Макет.ПолучитьОбласть("Строка");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
		КонецЕсли;
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвал, ОбластьПодвалНакладной, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		Иначе
			ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвал, ДанныеПечати, СведенияОбОрганизации, ВыборкаКонтрагентов);
		КонецЕсли;
		
		Если ДанныеДляПечати.РезультатПоШапке.Колонки.Найти("ВыводитьКодНоменклатуры") <> Неопределено Тогда
			ВыводитьКодНоменклатуры = ДанныеПечати.ВыводитьКодНоменклатуры;
		Иначе
			ВыводитьКодНоменклатуры = Истина;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
		ИспользоватьНаборы = Ложь;
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
			ИспользоватьНаборы = Истина;
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("Строка");
			Иначе
				ОбластьСтрокаНабор         = Макет.ПолучитьОбласть("СтрокаНабор");
				ОбластьСтрокаКомплектующие = Макет.ПолучитьОбласть("СтрокаКомплектующие");
			КонецЕсли;
		КонецЕсли;
		
		ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
		
		ОперацияОблагаетсяНДСУПокупателя = Ложь;
		Если ДанныеПечати.СтатусУПД = 1
		И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			ОперацияОблагаетсяНДСУПокупателя = Истина;
		КонецЕсли;
		
		СтрокаТовары = ВыборкаПоДокументам.Выбрать();
		КоличествоСтрок = 0;
		Пока СтрокаТовары.Следующий() Цикл
			Если Не НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		СтрокаТовары.Сбросить();
		
		Если ЕстьПостановление534 Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьШапка.Параметры.ДокументыОбОтгрузке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3';
							|en = 'Item No. %1 # %2 of %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			Иначе
				ОбластьШапка.Параметры.ПоДокументуОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '№ п/п %1 № %2 от %3';
							|en = 'Item No. %1 # %2 of %3'"),
						?(КоличествоСтрок = 1, "1" , "1-" + Формат(КоличествоСтрок, "ЧГ=0")),
						ОбластьШапка.Параметры.Номер,
						ОбластьШапка.Параметры.Дата);
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьШапка);
#Вставка
      	Если бг_ЭтоМакет_ОбщийДляСетей Тогда
			ТабличныйДокумент.Вывести(ОбластьШапкаПродолжениеСети);
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыСети");
		Иначе
#КонецВставки
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
#Вставка
		КонецЕсли;
#КонецВставки
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		ТолькоСтавкаБезНДС = Истина;
		НомерСтроки = 0;
		Пока СтрокаТовары.Следующий() Цикл
			
				Если ПрослеживаемыеТовары <> Неопределено Тогда
					ПрослеживаемыеТоварыСтрокаТовары = ПрослеживаемыеТовары.НайтиСтроки(Новый Структура("НомерСтрокиСФ", СтрокаТовары.НомерСтроки));
				Иначе
					ПрослеживаемыеТоварыСтрокаТовары = Неопределено;
				КонецЕсли;
			
			Если ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
				ИЛИ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				Если СтрокаТовары.Покупатель <> ДанныеПечати.Покупатель
					И СтрокаТовары.Покупатель <> НЕОПРЕДЕЛЕНО Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТовары.Количество = 0 
				И СтрокаТовары.СуммаСНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаНабор;
			ИначеЕсли НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				ОбластьСтрока = ОбластьСтрокаКомплектующие;
			Иначе
				ОбластьСтрока = ОбластьСтрокаСтандарт;
			КонецЕсли;
#Вставка
    		Если бг_ЭтоМакет_ОбщийДляСетей Тогда
        			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаСети");
		КонецЕсли;
		Если бг_ПереопределитьМакетУПД Тогда
			бг_ЗаполнитьРеквизитыСтрокиТовараУПД(СтрокаТовары, ОбластьСтрока, ДанныеПечати, бг_СуммыАкцизаДокумента);
		КонецЕсли;
#КонецВставки
			
			ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс", Ложь, Ложь);
			
			Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, Неопределено, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, Неопределено, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
			Иначе
				НомерСтроки = НомерСтроки + 1;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары, ПрослеживаемыеТоварыСтрокаТовары, ОбластьСтрока, НомерСтроки, ПараметрыПечати, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				Иначе
					ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, ОбластьСтрока, НомерСтроки, , ВыводитьКодыТНВЭД, ВыводитьСерии);
				КонецЕсли;
				ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
																|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Всего", "--");
				Иначе
					СтруктураПараметров.Вставить("СуммаСНДС", "--");
				КонецЕсли;
				ТолькоСтавкаБезНДС = Ложь;
			ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
				СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
																|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
				СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
																|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
			ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
				СтруктураПараметров.Вставить("СуммаНДС", 0);
				ТолькоСтавкаБезНДС = Ложь;
			Иначе
				ТолькоСтавкаБезНДС = Ложь;
			КонецЕсли;
			Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без
					|акциза';
					|en = 'without
					|excise duty'", Метаданные.Языки.Русский.КодЯзыка));
				Иначе
					СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
																|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
			КонецЕсли;
			ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
			
			МассивВыводимыхОбластей.Очистить();
			МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
			
			Если НомерСтроки = КоличествоСтрок Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьИтого);
				МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
				КонецЕсли;
			КонецЕсли;
			
			Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
				Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
					ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
				Иначе
					ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
				КонецЕсли;
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
				Иначе
					ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
				КонецЕсли;
#Вставка
				Если бг_ПереопределитьМакетУПД Тогда
					ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
				КонецЕсли;
#КонецВставки
				
				ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
				Иначе
					РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Выводим итоги по документу
		ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки,
							ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеПечати.Организация));
		
		Если ТолькоСтавкаБезНДС Тогда
			ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
												|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
		КонецЕсли;
		
		Если ОперацияОблагаетсяНДСУПокупателя Тогда
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы.Вставить("ИтогоВсего", "--");
				ИтоговыеСуммы.Вставить("ИтогоВсегоНаСтранице", "--");
			Иначе
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДС", "--");
				ИтоговыеСуммы.Вставить("ИтогоСуммаСНДСНаСтранице", "--");
			КонецЕсли;
		КонецЕсли;
		
		ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
		ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Если строка таблицы одна, то проверим поместится ли все на одной странице
		Если КоличествоСтрок = 1 Тогда
			МассивВыводимыхОбластей = Новый Массив;
			МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
			КонецЕсли;
			Если Не ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
				НомерСтраницы = НомерСтраницы + 1;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ составлен на %1 %2';
				|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
			НомерСтраницы,
			ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
				НСтр("ru = 'листе';
					|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах';
					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
				НСтр("ru = 'листах';
					|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			СтруктураПараметров = Новый Структура("КоличествоЛистов", КоличествоСтраниц);
		Иначе
			СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
		
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			УдалитьВсеОбластиФаксимиле(ОбластьПодвал);
			УдалитьВсеОбластиФаксимиле(ОбластьПодвалНакладной);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
#Вставка
		Если бг_ПереопределитьМакетУПД Тогда
			бг_ЗаполнитьРеквизитыПодвалаУПД_ОсновнойМакет(ОбластьПодвалНакладной, ДанныеПечати);
		КонецЕсли;
#КонецВставки
		Если ИспользоватьПечатныеФормыСФ2_5 Тогда
			ТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
			ДанныеПечати.Ссылка);
			
	КонецЦикла;

КонецПроцедуры

&После("ЗаполнитьРеквизитыПодвалаУПД")
Процедура бг_ЗаполнитьРеквизитыПодвалаУПД(ОбластьПодвала, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеТранспортнаяНакладная", бг_ДанныеТранспортнаяНакладная(ДанныеПечати));
	
	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

&После("ЗаполнитьРеквизитыПодвалаУПД2_5")
Процедура бг_ЗаполнитьРеквизитыПодвалаУПД2_5(ОбластьПодвала, ОбластьПодвалаНакладной, ДанныеПечати, СведенияОбОрганизации, ДанныеКонтрагентов)
	
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
		ДанныеПечати.Контрагент, ДанныеПечати.Дата);
	ПолноеНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование", Ложь);
	ИННКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ИНН", Ложь);
	
	Если Не ПустаяСтрока(ДанныеПечати.бг_КППГоловнойКонтрагент) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1; %2, ИНН/КПП %3/%4';
			|en = '%1; %2, TIN/CRTR %3/%4'", Метаданные.Языки.Русский.КодЯзыка),
		ПредставлениеКонтрагента,
		ПолноеНаименование,
		ИННКонтрагента,
		ДанныеПечати.бг_КППГоловнойКонтрагент);
	ИначеЕсли ЗначениеЗаполнено(ИННКонтрагента) Тогда
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1; %2, ИНН %3';
			|en = '%1; %2, TIN %3'", Метаданные.Языки.Русский.КодЯзыка),
		ПредставлениеКонтрагента,
		ПолноеНаименование,
		ИННКонтрагента);
	Иначе
		ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1; %2';
			|en = '%1; %2'"),
		ПредставлениеКонтрагента,
		ПолноеНаименование);
	КонецЕсли;
	
	ОбластьПодвалаНакладной.Параметры.ПредставлениеКонтрагента = Сред(ПредставлениеКонтрагента, 3);
	
	ШаблонПриказа = НСтр("ru='на основании дов. №%1 от %2'");
	ФорматДаты = "ДФ=dd.MM.yyyy";

	ПредставлениеПриказаРуководителя = ?(
		Не ПустаяСтрока(ДанныеПечати.бг_РуководительНомерОснования),
		СтрШаблон(
			ШаблонПриказа,
			ДанныеПечати.бг_РуководительНомерОснования, 
			Формат(ДанныеПечати.бг_РуководительДатаОснования, ФорматДаты)), "");
				
	ПредставлениеПриказаГлавногоБухгалтера = ?(
		Не ПустаяСтрока(ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования),
		СтрШаблон(
			ШаблонПриказа,
			ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования, 
			Формат(ДанныеПечати.бг_ГлавныйБухгалтерДатаОснования, ФорматДаты)), "");

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеТранспортнаяНакладная", бг_ДанныеТранспортнаяНакладная(ДанныеПечати));
	СтруктураПараметров.Вставить("ПриказРуководитель", ПредставлениеПриказаРуководителя);
	СтруктураПараметров.Вставить("ПриказГлавныйБухгалтер", ПредставлениеПриказаГлавногоБухгалтера);
	СтруктураПараметров.Вставить(
		"ФИОРуководителя",
		ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.бг_Руководитель, ДанныеПечати.Дата));
		
	СтруктураПараметров.Вставить(
		"ФИОГлавногоБухгалтера",
		ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.бг_ГлавныйБухгалтер, ДанныеПечати.Дата));

	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыПодвалаУПД_ОсновнойМакет(ОбластьПодвалаНакладной, ДанныеПечати)
	
	СтруктураПараметров = Новый Структура;
	
	ТекстОснования =  "№ " + ДанныеПечати.бг_НомерДоговора +
		" от " + ?(ДанныеПечати.бг_ДатаДоговора = '0001.01.01', "", Формат(ДанныеПечати.бг_ДатаДоговора,"ДФ=dd.MM.yy"));			
	
	ТекстДанныеТранспортнаяНакладная = "№ " + ДанныеПечати.Номер +
		" от " + Формат(ДанныеПечати.Дата,"ДФ=dd.MM.yy");
	
	СтруктураПараметров.Вставить("Основание"					, ТекстОснования);
	СтруктураПараметров.Вставить("ДанныеТранспортнаяНакладная"	, ТекстДанныеТранспортнаяНакладная);
	
	ЕстьЭкспедитор = ЗначениеЗаполнено(ДанныеПечати.Экспедитор);
	ЕстьВодитель = ЗначениеЗаполнено(ДанныеПечати.ВодительРейса);
	
	Если ЕстьЭкспедитор Тогда
		ДолжностьВодителя = НСтр("ru='экспедитор'");
	Иначе
		ДолжностьВодителя = НСтр("ru='водитель-экспедитор'");
	КонецЕсли;
	
	Если ДанныеПечати.бг_ЭтоСамовывоз Тогда 
		СтруктураПараметров.Вставить("ФИОТоварПолучил" 			, ДанныеПечати.бг_ДоверенностьЛицо);
		СтруктураПараметров.Вставить("ДолжностьТоварПолучил" 	, ДолжностьВодителя);
	КонецЕсли;

	ОбластьПодвалаНакладной.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыШапкиПродолжениеСетиУПД(ДанныеПечати, ОбластьШапка);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерПоставщика"	, "");
	СтруктураПараметров.Вставить("НомерЗаказа"		, ДанныеПечати.бг_НомерПоДаннымКлиента);
	СтруктураПараметров.Вставить("НомерПриемки"		, "");
	
	ОбластьШапка.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыСтрокиТовараУПД(СтрокаТовары, ОбластьМакета, ДанныеПечати, СуммыАкцизаДокумента);
	
	Параметры 	= Новый Структура;
 	СуммаАкциза = 0;

	НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентов.бг_ДанныеНоменклатурыКонтрагентаПоНоменклатуре(
								ДанныеПечати.бг_Партнер, СтрокаТовары.Номенклатура);

	Если ДанныеПечати.бг_ТипЛицензии = ПредопределенноеЗначение(
			"Перечисление.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Розничная")
		И ЗначениеЗаполнено(НоменклатураКонтрагента) Тогда
		Артикул =  НоменклатураКонтрагента[0].бг_КодНоменклатурыКонтрагента;								
	ИначеЕсли ЗначениеЗаполнено(НоменклатураКонтрагента) Тогда
		Артикул =  НоменклатураКонтрагента[0].Артикул;
	КонецЕсли;

	Отбор = Новый Структура("Ссылка, Номенклатура", ДанныеПечати.Ссылка);
	Отбор.Номенклатура = СтрокаТовары.Номенклатура;
	СтрокиСуммыАкциза = СуммыАкцизаДокумента.НайтиСтроки(Отбор);
	
	Если СтрокиСуммыАкциза.Количество() <> 0 Тогда
		СтрокаСуммыАкциза = СтрокиСуммыАкциза[0];
		СуммаАкциза = СтрокаСуммыАкциза.бг_СуммаАкциза;
	КонецЕсли;
	
	Параметры.Вставить("Артикул", Артикул);
	Параметры.Вставить("СуммаАкциза", СуммаАкциза);
	ОбластьМакета.Параметры.Заполнить(Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Печать_УКД

&ИзменениеИКонтроль("СформироватьПечатнуюФормуУКД")
Функция бг_СформироватьПечатнуюФормуУКД(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УКД";

	СтруктураТиповНаПечать              = Новый Структура;
	МассивСчетФактураВыданный           = Новый Массив;
	ОснованияСчетФактуры                = Новый Массив;

	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		Если СтруктураОбъектов.Ключ = "Документ.СчетФактураВыданный" Тогда

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, СтруктураОбъектов.Значение);

		Иначе

			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОснованияСчетФактуры, СтруктураОбъектов.Значение);

		КонецЕсли;

	КонецЦикла;

	Если ОснованияСчетФактуры.Количество() > 0 Тогда

		РезультатАнализа = Документы.СчетФактураВыданный.ПолучитьСчетаФактурыНаПечать(
		ОснованияСчетФактуры, Истина);

		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСчетФактураВыданный, РезультатАнализа.СчетаФактурыНаПечать, Истина);

		Для Каждого СтрокаТаблицыОшибок Из РезультатАнализа.ТаблицаОшибок Цикл
			Если СтрокаТаблицыОшибок.НеВыставленСчетФактура Тогда

				Документ = СтрокаТаблицыОшибок.ДокументОснование; // ДокументСсылка
				ИмяОбъекта = Документ.Метаданные().Имя;
				Если СтруктураТиповНаПечать.Свойство(ИмяОбъекта) Тогда
					МассивДокументовДляСтруктуры = СтруктураТиповНаПечать[ИмяОбъекта]; // Массив из ДокументСсылка
					МассивДокументовДляСтруктуры.Добавить(Документ);
				Иначе
					МассивДокументовТипа = Новый Массив;
					МассивДокументовТипа.Добавить(Документ);
					СтруктураТиповНаПечать.Вставить(ИмяОбъекта, МассивДокументовТипа);
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если МассивСчетФактураВыданный.Количество() > 0 Тогда
		СтруктураТиповНаПечать.Вставить("СчетФактураВыданный", МассивСчетФактураВыданный);
	КонецЕсли;

	НомерТипаДокумента = 0;
#Вставка
	Если СтруктураТиповНаПечать.Свойство("ВозвратТоваровОтКлиента") Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
#КонецВставки
	
	Для Каждого СтруктураОбъектов Из СтруктураТиповНаПечать Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = Документы[СтруктураОбъектов.Ключ];
		КонецЕсли;

		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыУКД(ПараметрыПечати, СтруктураОбъектов.Значение);

		Если ДанныеДляПечати <> Неопределено Тогда
			ЗаполнитьТабличныйДокументУКД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати);
		КонецЕсли;

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

&ИзменениеИКонтроль("ЗаполнитьТабличныйДокументУКД")
Процедура бг_ЗаполнитьТабличныйДокументУКД(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	ВыводитьСерии = Константы.ВыводитьСерииВПечатныхФормах.Получить() 
						И ДанныеДляПечати.РезультатПоТабличнойЧасти.Колонки.Найти("СерияНаименование") <> Неопределено;
	ИспользоватьПечатныеФормыСФ2_5 = Ложь;
#Вставка
	бг_ПереопределитьМакетУКД = Ложь;
#КонецВставки
	
	МакетУКД     = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_ru");
	МакетУКД_625 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент_625_ru");
	МакетУКД_981 = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент981_ru");
	МакетУКД_534 = УправлениеПечатью.МакетПечатнойФормы(
						"Обработка.ПечатьОбщихФорм.ПФ_MXL_УниверсальныйКорректировочныйДокумент534_ru");
	МакетУКД_534_2_5   = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_УниверсальныйКорректировочныйДокумент534");
	МакетУКД_534Прослеж_2_5 = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_УниверсальныйКорректировочныйДокумент534Прослеж");
	
	ЕстьПостановление1137_625 = ЛОЖЬ;
	ЕстьПостановление1137 = ЛОЖЬ;
	ЕстьПостановление981 = ЛОЖЬ;
	ЕстьПостановление534 = ЛОЖЬ;
	
	ОпцииПечати = Новый Структура;
	ОпцииПечати.Вставить("НомерСформированВСчетеФактуре", ДанныеДляПечати.Свойство("НомерСформированВСчетеФактуре"));
	ОпцииПечати.Вставить("ИспользоватьПечатныеФормыСФ2_5", ИспользоватьПечатныеФормыСФ2_5);
	
	ДанныеПечати        = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаОснований    = ДанныеДляПечати.РезультатПоИсходнымДанным.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		
		Если ДанныеПечати.ПечатьНеТребуется Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 универсальный корректировочный документ не применяется.';
					|en = 'Universal adjustment document is not used for document %1.'"),
					ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
				
		ИначеЕсли НЕ ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") 
			И ЗначениеЗаполнено(ДанныеПечати.НалогообложениеНДС)
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС
			И (ДанныеПечати.СтатусУПД = 2 ИЛИ ДанныеПечати.Номер = Неопределено) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не введен %2';
					|en = '%2 is not entered for document %1'"),
				ДанныеПечати.Ссылка,
				НСтр("ru = 'счет-фактура';
					|en = 'tax invoice'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка,
				,
				"ТекстСчетФактура");
	
		Иначе
			
			Если ДействуетПостановление534(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				ИспользоватьПечатныеФормыСФ2_5 = ПолучитьФункциональнуюОпцию("ИспользоватьПечатныеФормыСФ2_5");
#Вставка
				Если ДанныеДляПечати.Свойство("бг_ПереопределитьМакетУКД") Тогда
					ИспользоватьПечатныеФормыСФ2_5 = ДанныеДляПечати.бг_ИспользоватьПечатныеФормыСФ2_5;
					бг_ПереопределитьМакетУКД = ДанныеДляПечати.бг_ПереопределитьМакетУКД;
				КонецЕсли;
#КонецВставки
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ОпцииПечати.ИспользоватьПечатныеФормыСФ2_5 = ИспользоватьПечатныеФормыСФ2_5;
					Макет = ?(ДанныеПечати.ЕстьПрослеживаемыеТовары, МакетУКД_534Прослеж_2_5, МакетУКД_534_2_5);
#Вставка
					Если бг_ПереопределитьМакетУКД Тогда
						Макет = УправлениеПечатью.МакетПечатнойФормы(
							"Обработка.ПечатьОбщихФорм.бг_ПФ_MXL_УниверсальныйКорректировочныйДокумент534Прослеж");
						ОпцииПечати.Вставить("бг_ПереопределитьМакетУКД", бг_ПереопределитьМакетУКД);
					КонецЕсли;
#КонецВставки
				Иначе
					Макет = МакетУКД_534;
				КонецЕсли;
				ЕстьПостановление534 = Истина;
			ИначеЕсли ДействуетПостановление981(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУКД_981;
				ЕстьПостановление981 = Истина;
			ИначеЕсли ВедетсяУчетНДСПоФЗ56(ДанныеПечати.Дата, ДанныеПечати.ДатаИсправления) Тогда
				Макет = МакетУКД_625;
				ЕстьПостановление1137_625 = Истина;
			Иначе
				Макет = МакетУКД;
				ЕстьПостановление1137 = Истина;
			КонецЕсли;
			Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
			
			Если ЕстьПостановление1137_625 И ЕстьПостановление1137 Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
					|сформированных до и после начала применения постановления Правительства РФ №625 от 25 мая 2017 г.)';
					|en = 'Cannot print universal adjustment documents
					|generated both before and after the commencement date of RF Government decree No.625 dated 05/25/2017 at the same time'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			Если (ЕстьПостановление1137_625 ИЛИ ЕстьПостановление1137) И ЕстьПостановление981 Тогда
				
				Текст = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
					|сформированных до и после начала применения постановления Правительства РФ №981 от 19 августа 2017 г.)';
					|en = 'Cannot print universal adjustment documents
					|generated both before and after the commencement date of RF Government decree No.981 dated 08/19/2017 at the same time'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			ИначеЕсли (ЕстьПостановление1137_625 Или ЕстьПостановление1137 Или ЕстьПостановление981)
					И ЕстьПостановление534 Тогда
				
				ТекстСообщения = НСтр("ru = 'Недоступна одновременная печать универсальных корректировочных документов,
				|сформированных до и после начала применения постановления Правительства РФ №534 от 2 апреля 2021 г.';
				|en = 'Cannot simultaneously print universal adjustment documents
				|generated before and after the commencement date of RF Government decree No.534 dated 04/02/2021'");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДанныеПечати.Ссылка);
				
				ТабличныйДокумент.Очистить();
				Прервать;
				
			КонецЕсли;
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			// Выводим общие реквизиты шапки
			СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
			СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата);
			ЗаполнитьРеквизитыШапкиУКД(ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, Макет, ТабличныйДокумент, ОпцииПечати);
			
			// Выводим заголовок таблицы
			ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
			ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			
			НомерСтраницы = 1;
			
			// Инициализация итогов в документе
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ИтоговыеСуммы = СтруктураИтоговыеСуммы2_5();
			Иначе
				ИтоговыеСуммы = СтруктураИтоговыеСуммы();
			КонецЕсли;
		
			
			// Создаем массив для проверки вывода
			МассивВыводимыхОбластей = Новый Массив;
			
			// Выводим многострочную часть документа
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьИтого  = Макет.ПолучитьОбласть("Итого");
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ОбластьПодвалНакладной = Макет.ПолучитьОбласть("ПодвалНакладной");
			КонецЕсли;
			
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ЗаполнитьРеквизитыПодвалаУКД2_5(ОбластьПодвал, ОбластьПодвалНакладной, ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати);
			Иначе
				ЗаполнитьРеквизитыПодвалаУКД(ОбластьПодвал, ДанныеПечати, ВыборкаОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати);
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			ИспользоватьНаборы = Ложь;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ВыборкаПоДокументам, "ЭтоНабор") Тогда
				ИспользоватьНаборы = Истина;
			КонецЕсли;
			
			ВыводитьКодыТНВЭД = ВыводитьКодыТНВЭД(ДанныеПечати, ЕстьПостановление981 Или ЕстьПостановление534);
			
			ОперацияОблагаетсяНДСУПокупателя = Ложь;
			Если ДанныеПечати.СтатусУПД = 1
			И ДанныеПечати.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				ОперацияОблагаетсяНДСУПокупателя = Истина;
			КонецЕсли;
#Вставка	
			СуммыАкцизаДокумента = ДанныеДляПечати.бг_СуммыАкциза.Выгрузить();
			
			ИтогоРазницаСуммаАкцизаУвеличение = 0;
			ИтогоРазницаСуммаАкцизаУменьшение = 0;
#КонецВставки
			
			СтрокаТовары = ВыборкаПоДокументам.Выбрать();
			КоличествоСтрок = СтрокаТовары.Количество();
			ТолькоСтавкаБезНДС = Истина;
			НомерСтроки = 0;
			ПрефиксНабора = "";
			ТекущаяНоменклатураНабора = Справочники.Номенклатура.ПустаяСсылка();
			ТекущаяХарактеристикаНабора = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			Пока СтрокаТовары.Следующий() Цикл
			СтрокаБезРасхождений = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТовары, "РазницаБезНДСУвеличение")
									И СтрокаТовары.РазницаБезНДСУвеличение = СтрокаТовары.РазницаБезНДСУменьшение
									И СтрокаТовары.РазницаНДСУвеличение = СтрокаТовары.РазницаНДСУменьшение
									И СтрокаТовары.РазницаСНДСУвеличение = СтрокаТовары.РазницаСНДСУменьшение;
			Если Не СтрокаБезРасхождений Тогда
				
				ПараметрыПечати = Новый Структура("Корректировочный,СчетФактураНаАванс,ЕстьПрослеживаемыеТовары", Истина, Ложь, ДанныеПечати.ЕстьПрослеживаемыеТовары);
#Вставка
				Если бг_ПереопределитьМакетУКД Тогда
					ПараметрыПечати.Вставить("бг_ПереопределитьМакетУКД", бг_ПереопределитьМакетУКД);
				КонецЕсли;
#КонецВставки
				
				Если НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
					КоличествоСтрок = КоличествоСтрок - 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   Неопределено,
													   ОбластьСтрока, 
													   Неопределено,
													   ПараметрыПечати,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
							ПрефиксНабора = ОбластьСтрока.Параметры.НаименованиеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьСтрока, 
													   Неопределено,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
													   
						Если НаборыСервер.ИспользоватьОбластьНабор(СтрокаТовары, ИспользоватьНаборы) Тогда
							ПрефиксНабора = ОбластьСтрока.Параметры.ПредставлениеНоменклатуры;
							ТекущаяНоменклатураНабора = СтрокаТовары.НоменклатураНабора;
							ТекущаяХарактеристикаНабора = СтрокаТовары.ХарактеристикаНабора;
						КонецЕсли;
					КонецЕсли;
				Иначе
					НомерСтроки = НомерСтроки + 1;
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   Неопределено,
													   ОбластьСтрока, 
													   НомерСтроки,
													   ПараметрыПечати,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
#Вставка
						бг_ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
													   СуммыАкцизаДокумента,
													   ОбластьСтрока, 
													   ИтогоРазницаСуммаАкцизаУвеличение,
													   ИтогоРазницаСуммаАкцизаУменьшение,
													   ДанныеПечати,
													   ПараметрыПечати);
#КонецВставки
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
					
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьСтрока.Параметры.НаименованиеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьСтрока.Параметры.НаименованиеНоменклатуры;
						КонецЕсли;
					Иначе
						ЗаполнитьРеквизитыСтрокиТовара(СтрокаТовары, 
													   ОбластьСтрока, 
													   НомерСтроки,, 
													   ВыводитьКодыТНВЭД,
													   ВыводитьСерии);
						ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьСтрока);
						
						Если НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) 
							И ПрефиксНабора <> ""
							И СтрокаТовары.НоменклатураНабора = ТекущаяНоменклатураНабора
							И СтрокаТовары.ХарактеристикаНабора = ТекущаяХарактеристикаНабора Тогда
							ОбластьСтрока.Параметры.ПредставлениеНоменклатуры = ПрефиксНабора
																				+ Символы.ПС
																				+ ОбластьСтрока.Параметры.ПредставлениеНоменклатуры;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				Если ОперацияОблагаетсяНДСУПокупателя Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения",    НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru = 'НДС исчисляется налоговым агентом';
																					|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтоимостьСНДСПослеИзменения", "--");
						СтруктураПараметров.Вставить("СтоимостьСНДСДоИзменения", "--");
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'НДС исчисляется налоговым агентом';
																		|en = 'VAT is calculated by tax agent'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаСНДС", "--");
						СтруктураПараметров.Вставить("СуммаСНДСДо", "--");
					КонецЕсли;
						СтруктураПараметров.Вставить("РазницаСНДСУвеличение", "--");
						СтруктураПараметров.Вставить("РазницаСНДСУменьшение", "--");
					ТолькоСтавкаБезНДС = Ложь;
				ИначеЕсли СтрокаТовары.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СтавкаНДСДоИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СтавкаНДСПослеИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", НСтр("ru = 'без НДС';
																					|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", НСтр("ru = 'без НДС';
																				|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					Иначе
						СтруктураПараметров.Вставить("СтавкаНДС", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДС", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
						СтруктураПараметров.Вставить("СуммаНДСДо", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					КонецЕсли;
				ИначеЕсли СтрокаТовары.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС0) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						СтруктураПараметров.Вставить("СуммаНДСПослеИзменения", 0);
						СтруктураПараметров.Вставить("СуммаНДСДоИзменения", 0);
					Иначе
						СтруктураПараметров.Вставить("СуммаНДС", 0);
						СтруктураПараметров.Вставить("СуммаНДСДо", 0);
					КонецЕсли;
					ТолькоСтавкаБезНДС = Ложь;
				Иначе
					ТолькоСтавкаБезНДС = Ложь;
				КонецЕсли;
				СтруктураПараметров.Вставить("Акциз", НСтр("ru = 'без акциза';
															|en = 'no excise'", Метаданные.Языки.Русский.КодЯзыка));
				
				МассивВыводимыхОбластей.Очистить();
				
				Если Не НаборыСервер.ВыводитьТолькоЗаголовок(СтрокаТовары, ИспользоватьНаборы) Тогда
			
					ОбластьСтрока.Параметры.Заполнить(СтруктураПараметров);
					МассивВыводимыхОбластей.Добавить(ОбластьСтрока);
					
					Если НомерСтроки = КоличествоСтрок Тогда
						МассивВыводимыхОбластей.Добавить(ОбластьИтого);
						МассивВыводимыхОбластей.Добавить(ОбластьПодвал);
						Если ИспользоватьПечатныеФормыСФ2_5 Тогда
							МассивВыводимыхОбластей.Добавить(ОбластьПодвалНакладной);
						КонецЕсли;
					КонецЕсли;
					
					Если НомерСтроки <> 1 И НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
						
						НомерСтраницы = НомерСтраницы + 1;
						ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
						
						ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
						Если ОпцииПечати.НомерСформированВСчетеФактуре Тогда
							ОбластьНумерацияЛистов.Параметры.Номер = ДанныеПечати.Номер;
						Иначе
							ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактурыНаПечать(ДанныеПечати.Номер, ДанныеПечати.ИндексПодразделения);
						КонецЕсли;
						ОбластьНумерацияЛистов.Параметры.Дата = Формат(ДанныеПечати.Дата, "ДЛФ=ДД; ДП=--");
						Если ИспользоватьПечатныеФормыСФ2_5 Тогда
							ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерСтраницы;
						Иначе
							ОбластьНумерацияЛистов.Параметры.НомерСтраницы = НомерСтраницы;
						КонецЕсли;
						ТабличныйДокумент.Вывести(ОбластьНумерацияЛистов);
						ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
						
					КонецЕсли;
				
					ТабличныйДокумент.Вывести(ОбластьСтрока);
				КонецЕсли;
				
				Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
					Если ИспользоватьПечатныеФормыСФ2_5 Тогда
						РассчитатьИтоговыеСуммы2_5(ИтоговыеСуммы, СтрокаТовары);
					Иначе
						РассчитатьИтоговыеСуммы(ИтоговыеСуммы, СтрокаТовары);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			КонецЦикла;
			
			// Выводим итоги по документу
			ДобавитьИтоговыеДанныеПодвала(ИтоговыеСуммы, НомерСтроки, ВалютаРегламентированногоУчета(ДанныеПечати));
			
			Если ТолькоСтавкаБезНДС Тогда
				ИтоговыеСуммы.ИтогоСуммаНДС = НСтр("ru = 'без НДС';
													|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка);
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ИтоговыеСуммы.Вставить("РазницаНДСУвеличение", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					ИтоговыеСуммы.Вставить("РазницаНДСУменьшение", НСтр("ru = 'без НДС';
																		|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
				Иначе
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУвеличение", НСтр("ru = 'без НДС';
																			|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
					ИтоговыеСуммы.Вставить("ИтогоРазницаНДСУменьшение", НСтр("ru = 'без НДС';
																			|en = 'Excluding VAT'", Метаданные.Языки.Русский.КодЯзыка));
				КонецЕсли;
			КонецЕсли;
			
			Если ОперацияОблагаетсяНДСУПокупателя Тогда
				Если ИспользоватьПечатныеФормыСФ2_5 Тогда
					ИтоговыеСуммы.Вставить("РазницаСНДСУвеличение", "--");
					ИтоговыеСуммы.Вставить("РазницаСНДСУменьшение", "--");
				Иначе
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшение", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУвеличениеНаСтранице", "--");
					ИтоговыеСуммы.Вставить("ИтогоРазницаСНДСУменьшениеНаСтранице", "--");
				КонецЕсли;
			КонецЕсли;
#Вставка
			ИтоговыеСуммы.Вставить(
				"ИтогоРазницаСуммаАкцизаУвеличение", 
				ИтогоРазницаСуммаАкцизаУвеличение);
				
			ИтоговыеСуммы.Вставить(
				"ИтогоРазницаСуммаАкцизаУменьшение", 
				ИтогоРазницаСуммаАкцизаУменьшение);
				
			бг_ЗаполнитьПустыеСтрокиНулями(ИтоговыеСуммы);
#КонецВставки
			
			ОбластьИтого.Параметры.Заполнить(ИтоговыеСуммы);
			ПроставитьПрочеркиВПустыеПоляСтроки(ОбластьИтого);
			ТабличныйДокумент.Вывести(ОбластьИтого);
			
			КоличествоСтраниц = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ составлен на %1 %2';
					|en = 'Document is created on %1 %2'", Метаданные.Языки.Русский.КодЯзыка),
				НомерСтраницы,
				ОбщегоНазначенияУТКлиентСервер.ФормаМножественногоЧисла(
					НСтр("ru = 'листе';
						|en = 'sheet'", Метаданные.Языки.Русский.КодЯзыка),
					НСтр("ru = 'листах';
						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка),
					НСтр("ru = 'листах';
						|en = 'sheets'", Метаданные.Языки.Русский.КодЯзыка), НомерСтраницы));
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				СтруктураПараметров = Новый Структура("КоличествоЛистов", КоличествоСтраниц);
			Иначе
				СтруктураПараметров = Новый Структура("КоличествоСтраниц", КоличествоСтраниц);
			КонецЕсли;
			ОбластьПодвал.Параметры.Заполнить(СтруктураПараметров);
			
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				УдалитьВсеОбластиФаксимиле(ОбластьПодвал);
				УдалитьВсеОбластиФаксимиле(ОбластьПодвалНакладной);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьПодвал);
			Если ИспользоватьПечатныеФормыСФ2_5 Тогда
				ТабличныйДокумент.Вывести(ОбластьПодвалНакладной);
			КонецЕсли;
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати,
				ДанныеПечати.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыСтрокиТовара2_5(СтрокаТовары,
												СуммыАкцизаДокумента,
												   ОбластьСтрока,
												   ИтогоРазницаСуммаАкцизаУвеличение,
												ИтогоРазницаСуммаАкцизаУменьшение,
												ДанныеПечати,
												ПараметрыПечати)

	Если Не ПараметрыПечати.Свойство("бг_ПереопределитьМакетУКД") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	
	Если ДанныеПечати.бг_ТипЛицензии = Перечисления.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Розничная Тогда
		НомерАртикула = СтрокаТовары.бг_НоменклатураКонтрагентаКод;
	Иначе
		НомерАртикула = СтрокаТовары.бг_НоменклатураКонтрагентаАртикул;
	КонецЕсли;
	
	СтруктураЗаполнения.Вставить("НомерАртикула", НомерАртикула);
	
	СтрокиСуммыАкциза = СуммыАкцизаДокумента.НайтиСтроки(Новый Структура
						("Ссылка, Номенклатура",
						ДанныеПечати.Ссылка,
						СтрокаТовары.Номенклатура));
		
	Если СтрокиСуммыАкциза.Количество() <> 0 Тогда
		
		СтрокаСуммыАкциза = СтрокиСуммыАкциза[0];
		
		СтруктураЗаполнения.Вставить(
			"СуммаАкцизаДо", 
			СтрокаСуммыАкциза.бг_СуммаАкцизаДо);
		
		СтруктураЗаполнения.Вставить(
			"СуммаАкцизаПосле", 
			СтрокаСуммыАкциза.бг_СуммаАкцизаПосле);
		
		СтруктураЗаполнения.Вставить(
			"СуммаАкцизаУвеличение", 
			СтрокаСуммыАкциза.бг_СуммаАкцизаУвеличение);
		
		СтруктураЗаполнения.Вставить(
			"СуммаАкцизаУменьшение", 
			СтрокаСуммыАкциза.бг_СуммаАкцизаУменьшение);
		
		ИтогоРазницаСуммаАкцизаУвеличение = ИтогоРазницаСуммаАкцизаУвеличение 
			+ СтрокиСуммыАкциза[0].бг_СуммаАкцизаУвеличение;
		ИтогоРазницаСуммаАкцизаУменьшение = ИтогоРазницаСуммаАкцизаУменьшение 
			+ СтрокиСуммыАкциза[0].бг_СуммаАкцизаУменьшение;
		
	КонецЕсли;
	
	ОбластьСтрока.Параметры.Заполнить(СтруктураЗаполнения);
	
КонецПроцедуры

&После("ЗаполнитьРеквизитыПодвалаУКД2_5")
Процедура бг_ЗаполнитьРеквизитыПодвалаУКД2_5(ОбластьПодвала, ОбластьПодвалаНакладной, ДанныеПечати, ДанныеОснований, СведенияОбОрганизации, СведенияОКонтрагенте, ОпцииПечати)
	
	СтруктураПараметров = Новый Структура;

	ОтветственноеЛицо = бг_СведенияОбОтветственномЛицеПоФизЛицу(
		ДанныеПечати.бг_ФизическоеЛицоОтветственный,
		ДанныеПечати.Организация,
		ДанныеПечати.Дата);
	
	ШаблонПриказа = НСтр("ru='на основании дов. № %1 от %2'");
	ФорматДаты = "ДФ=dd.MM.yyyy";
	
	ТекстОснования = СтрШаблон(НСтр("ru='№ %1 от %2'"),
						ДанныеПечати.бг_НомерДоговора,
						?(ДанныеПечати.бг_ДатаДоговора = '0001.01.01',
						"",
						Формат(ДанныеПечати.бг_ДатаДоговора,"ДФ=dd.MM.yy")));

	ПредставлениеПриказаОтветственного = ?(
		Не ПустаяСтрока(ОтветственноеЛицо.Номер),
		СтрШаблон(
			ШаблонПриказа,
			ОтветственноеЛицо.Номер, 
			Формат(ОтветственноеЛицо.Дата, ФорматДаты)), "");
						
	ПредставлениеПриказаРуководителя = ?(
		Не ПустаяСтрока(ДанныеПечати.бг_РуководительНомерОснования),
		СтрШаблон(
			ШаблонПриказа,
			ДанныеПечати.бг_РуководительНомерОснования, 
			Формат(ДанныеПечати.бг_РуководительДатаОснования, ФорматДаты)), "");
				
	ПредставлениеПриказаГлавногоБухгалтера = ?(
		Не ПустаяСтрока(ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования),
		СтрШаблон(
			ШаблонПриказа,
			ДанныеПечати.бг_ГлавныйБухгалтерНомерОснования, 
			Формат(ДанныеПечати.бг_ГлавныйБухгалтерДатаОснования, ФорматДаты)), "");

	ПредставлениеОрганизации = СведенияОбОрганизации.ПолноеНаименование;
	ПредставлениеКонтрагента = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОКонтрагенте,"ПолноеНаименование", Ложь); 
		
	СтруктураПараметров.Вставить("ПриказОтветственного", ПредставлениеПриказаОтветственного);
	СтруктураПараметров.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	СтруктураПараметров.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
	СтруктураПараметров.Вставить("Основание", ТекстОснования);
	СтруктураПараметров.Вставить(
		"ФИООтветственного",
		ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.бг_ФизическоеЛицоОтветственный, ДанныеПечати.Дата));
	СтруктураПараметров.Вставить("ДолжностьОтветственного", ДанныеПечати.бг_ДолжностьОтветственный);
	СтруктураПараметров.Вставить("ПриказРуководитель", ПредставлениеПриказаРуководителя);
	СтруктураПараметров.Вставить("ПриказГлавныйБухгалтер", ПредставлениеПриказаГлавногоБухгалтера);
	СтруктураПараметров.Вставить(
		"ФИОРуководителя",
		ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.бг_Руководитель, ДанныеПечати.Дата));
		
	СтруктураПараметров.Вставить(
		"ФИОГлавногоБухгалтера",
		ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.бг_ГлавныйБухгалтер, ДанныеПечати.Дата));

	ОбластьПодвала.Параметры.Заполнить(СтруктураПараметров);
	ОбластьПодвалаНакладной.Параметры.Заполнить(СтруктураПараметров);

КонецПроцедуры

Функция бг_СведенияОбОтветственномЛицеПоФизЛицу(ФизическоеЛицо, Организация, Дата)
	
	Сведения = Новый Структура("Номер, Дата", "", "");
	
	ДанныеОтветственноеЛицо = Справочники.ОтветственныеЛицаОрганизаций.бг_СведенияОбОтветственномЛицеПоФизЛицу(
		ФизическоеЛицо,
		Организация,
		Дата);
		
	Если ЗначениеЗаполнено(ДанныеОтветственноеЛицо) Тогда
		
		Отбор = Новый Структура("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		Реквизиты = ДанныеОтветственноеЛицо.НайтиСтроки(Отбор);
		
		Если Реквизиты <> Неопределено Тогда
			Сведения.Номер = Реквизиты[0].НомерДокументаПраваПодписи;
			Сведения.Дата = Реквизиты[0].ДатаДокументаПраваПодписи;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Сведения;

КонецФункции

#КонецОбласти

#КонецОбласти

Функция бг_ДанныеТранспортнаяНакладная(ДанныеПечати)
	
	Если ДанныеПечати.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ДанныеПечати[0]) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеализацияТоваровУслуг.бг_ДанныеТранспортнаяНакладная КАК бг_ДанныеТранспортнаяНакладная
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслуг.Ссылка
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеПечати[0]);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.бг_ДанныеТранспортнаяНакладная;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура бг_ЗаполнитьРеквизитыШапкиМ15_ПередачаСырьяПереработчику(ДанныеПечати, ОбластьМакета)
	
	Если Не ТипЗнч(ДанныеПечати.Ссылка) = Тип("ДокументСсылка.ПередачаСырьяПереработчику") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("бг_ПолучательСтруктурноеПодразделение",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Контрагент, "НаименованиеПолное"));
	СтруктураПараметров.Вставить("СкладНаименование",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПечати.Организация, "НаименованиеСокращенное"));
	
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыСтрокиТовара_ПередачаСырьяПереработчику(СтрокаТовары, ОбластьМакета, бг_ВыводитьСчетКт)
	
	Если Не бг_ВыводитьСчетКт Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьКоррСчет = ОбластьМакета.Области.Найти("КоррСчет");
	Если ОбластьКоррСчет <> Неопределено Тогда
		ОбластьКоррСчет.Текст = СтрокаТовары.бг_СчетКт;
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("СтруктураРесурсовДляИтогов")
Функция бг_СтруктураРесурсовДляИтогов()

	Структура = Новый Структура;

	Структура.Вставить("СуммаБезНДС",       0);
	Структура.Вставить("СуммаНДС",          0);
	Структура.Вставить("СуммаСНДС",         0);
	Структура.Вставить("Количество",        0);
	Структура.Вставить("КоличествоМест",    0);
	Структура.Вставить("КоличествоПринято", 0);
	Структура.Вставить("МассаБрутто",       0);
	Структура.Вставить("МассаНетто",        0);
	Структура.Вставить("Сумма",             0);

	Структура.Вставить("РазницаБезНДСУвеличение", 0);
	Структура.Вставить("РазницаБезНДСУменьшение", 0);
	Структура.Вставить("РазницаНДСУвеличение",    0);
	Структура.Вставить("РазницаНДСУменьшение",    0);
	Структура.Вставить("РазницаСНДСУвеличение",   0);
	Структура.Вставить("РазницаСНДСУменьшение",   0);
#Вставка
	Структура.Вставить("бг_МассаБрутто",       		0);
	Структура.Вставить("бг_МассаНетто",       		0);
    Структура.Вставить("бг_КоличествоМест",    		0);
    Структура.Вставить("бг_МассаНеттоПрописью", 	"");
    Структура.Вставить("бг_МассаБруттоПрописью",	"");
#КонецВставки  

	Возврат Структура;

КонецФункции

#КонецОбласти
