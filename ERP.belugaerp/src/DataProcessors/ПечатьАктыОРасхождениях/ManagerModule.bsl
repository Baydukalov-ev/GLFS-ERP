#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции	

#Область Печать

&ИзменениеИКонтроль("Печать")
Процедура бг_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ1") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ1",
			"ТОРГ-1",
			СформироватьПечатнуюФормуТОРГ1(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ2") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ2",
			"ТОРГ-2",
			СформироватьПечатнуюФормуТОРГ2(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ3") Тогда
#Вставка
		КлючПереопределяемойПечати = "Документ.КорректировкаПриобретения";

		Если СтруктураТипов.Получить(КлючПереопределяемойПечати) <> Неопределено Тогда
			
			ДокументыКорректировки = Новый Соответствие;
			ДокументыКорректировки.Вставить(
				КлючПереопределяемойПечати, 
				СтруктураТипов[КлючПереопределяемойПечати]);
			
			СтруктураТипов.Удалить(КлючПереопределяемойПечати);
			
			ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ТОРГ3");
			
			Если ПечатнаяФорма <> Неопределено Тогда
				
				ТабличныеДокументы = бг_СформироватьПечатнуюФормуТОРГ3(
					ДокументыКорректировки, 
					ОбъектыПечати, 
					ПараметрыПечати);
					
				КоличествоТабличныхДокументов = ТабличныеДокументы.Количество();
								
				Для Индекс = 1 По КоличествоТабличныхДокументов Цикл
					
					ШаблонПредставленияМакета = НСтр("ru='%1/%2'");
					
					ДанныеПечатнойФормы = КоллекцияПечатныхФорм.Добавить();
					ЗаполнитьЗначенияСвойств(ДанныеПечатнойФормы, ПечатнаяФорма);
					ДанныеПечатнойФормы.ТабличныйДокумент = ТабличныеДокументы[Индекс - 1];
					
					ДанныеПечатнойФормы.ИмяМакета = СтрШаблон(
						ШаблонПредставленияМакета, 
						ДанныеПечатнойФормы.ИмяМакета, 
						Индекс);
						
					ДанныеПечатнойФормы.ИмяВРЕГ = СтрШаблон(
						ШаблонПредставленияМакета, 
						ДанныеПечатнойФормы.ИмяВРЕГ, 
						Индекс);
						
					ДанныеПечатнойФормы.СинонимМакета = СтрШаблон(
															НСтр("ru = 'ТОРГ-3 [%1 из %2]'"), 
															Индекс, 
															КоличествоТабличныхДокументов);
					
				КонецЦикла;
				
				Если КоличествоТабличныхДокументов <> 0 Тогда 
					
					КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
									
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если СтруктураТипов.Количество() <> 0 Тогда
			
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ТОРГ3",
				"ТОРГ-3",
				СформироватьПечатнуюФормуТОРГ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));	
			
		КонецЕсли;			
#КонецВставки

#Удаление
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ТОРГ3",
			"ТОРГ-3",
			СформироватьПечатнуюФормуТОРГ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
#КонецУдаления			
			
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);

КонецПроцедуры

#Область Печать_ТОРГ2

&ИзменениеИКонтроль("СформироватьПечатнуюФормуТОРГ2")
Функция бг_СформироватьПечатнуюФормуТОРГ2(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	УстановитьПривилегированныйРежим(Истина);

	ПечатьВНоменклатуреПоставщкика = ПараметрыПечати.Свойство("ПечатьВНоменклатуреПоставщика") И ПараметрыПечати.ПечатьВНоменклатуреПоставщика;

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТОРГ2";

	НомерТипаДокумента = 0;

	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
#Вставка
		Если СтруктураОбъектов.Ключ = "Документ.КорректировкаПриобретения" Тогда
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
			
			ДанныеДляПечати = МенеджерОбъекта.бг_ПолучитьДанныеДляПечатнойФормыТОРГ2(
				ПараметрыПечати, 
				СтруктураОбъектов.Значение);
			
			бг_ЗаполнитьТабличныйДокументТорг2ПоКорректировкеПриобретения(
				ТабличныйДокумент, 
				ДанныеДляПечати, 
				ОбъектыПечати);
			
			Продолжить;
			
		КонецЕсли;
#КонецВставки

		МенеджерОбъекта = ОбщегоНазначенияУТ.ПолучитьМодульЛокализации(СтруктураОбъектов.Ключ);
		Если МенеджерОбъекта = Неопределено Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		КонецЕсли;

		ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТОРГ2(ПараметрыПечати, СтруктураОбъектов.Значение); // см. АктОРасхожденияхПослеОтгрузкиЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ2 
		
		ЗаполнитьТабличныйДокументТорг2(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			ПечатьВНоменклатуреПоставщкика);
		
	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

// Параметры:
// 	ТабличныйДокумент              - ТабличныйДокумент - 
// 	ДанныеДляПечати                - см. КорректировкаПриобретенияЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ1
// 	ОбъектыПечати                  - СписокЗначений 
// 	ПечатьВНоменклатуреПоставщкика - Булево 
//
Процедура бг_ЗаполнитьТабличныйДокументТорг2ПоКорректировкеПриобретения(ТабличныйДокумент, ДанныеДляПечати, 
	ОбъектыПечати)
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьАктыОРасхождениях.ПФ_MXL_ТОРГ2_ru");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	ДанныеСчетовФактур         = ДанныеДляПечати.ДанныеСчетовФактур.Выбрать();
	ДанныеПечати               = ДанныеДляПечати.ДанныеПечати.Выбрать();
	ТаблицаТоваров             = ДанныеДляПечати.ДанныеТовары.Выгрузить();
	ТаблицаТоваровПоДокументам = ДанныеДляПечати.ДанныеТоваровПоДокументам.Выгрузить();
	ТаблицаКурсовВалют         = ДанныеДляПечати.ДанныеКурсовВалют.Выгрузить();
	
	ПересчитатьСуммыВВалютеРегламентированногоУчета(ТаблицаТоваров, ТаблицаКурсовВалют, "ТОРГ2");
	
	ПервыйДокумент = Истина;
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Артикул";
	КонецЕсли;
		
	Пока ДанныеПечати.Следующий() Цикл
		
		Отказ = Ложь;
		
		бг_ПроверитьВозможностьВыводаДокументаНаПечать(ДанныеПечати, "ТОРГ2", Отказ);
		
		Если Отказ Тогда
			Продолжить;	
		КонецЕсли;	
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТекстНДСВШапкеТаблицы = ?(
			ДанныеПечати.ЦенаВключаетНДС, 
			"", 
			" " + НСтр("ru = '(Без НДС)'"));
		
		бг_Заполнить1СтраницуТабличногоДокументаТорг(
			ТабличныйДокумент, 
			Макет, 
			ДанныеПечати, 
			ДанныеСчетовФактур);
		
		// Вывод таблицы приемки товаров
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровШапка");
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровСтрока");
		
		ПрочеркНезаполняемогоПоля = "---";
		
		Область.Параметры.ДатаПрибытияВПунктНазначения = Формат(
			ДанныеПечати.ДатаПрибытияВПунктНазначения, 
			"ДФ=dd.MM.yyyy");
															
		Область.Параметры.ДатаВскрытия = Формат(
			ДанныеПечати.ДатаВскрытия, 
			"ДФ=dd.MM.yyyy");
			
		Область.Параметры.ДатаВыдачи = ПрочеркНезаполняемогоПоля;	
															
		Область.Параметры.ДатаДоставкиНаСклад = Формат(
			ДанныеПечати.ДатаДоставкиНаСклад, 
			"ДФ=dd.MM.yyyy");
															
		Область.Параметры.ДатаНачалаРазгрузки = Формат(
			ДанныеПечати.ДатаНачалаРазгрузки, 
			"ДФ=dd.MM.yyyy");
			
		Область.Параметры.ДатаНачалаПриемки = Формат(
			ДанныеПечати.ДатаНачалаПриемки, 
			"ДФ=H:mm");
			
		Область.Параметры.ДатаПриостановленияПриемки 	= ПрочеркНезаполняемогоПоля;
		Область.Параметры.ДатаВозабновленияПриемки 		= ПрочеркНезаполняемогоПоля;
			
		Область.Параметры.ДатаОкончанияПриемки = Формат(
			ДанныеПечати.ДатаОкончанияПриемки, 
			"ДФ=H:mm");
		
		ТабличныйДокумент.Вывести(Область);
	
		Область = Макет.ПолучитьОбласть("ТаблицаПриемкиТоваровПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаВторойСтраницы");
		ТабличныйДокумент.Вывести(Область);
			
		// Вывод состояния транспорта по документам
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			Новый Структура("СостояниеТранспортаПоДокументам", "не опломбировано"), 
			"СостояниеТранспортаПоДокументам", 
			4);
		
		// Вывод таблицы товаров по документам
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамШапка");
		ТабличныйДокумент.Вывести(Область);
		
		КоличествоМестИтог = 0;
		
		Строки = ТаблицаТоваровПоДокументам.НайтиСтроки(Новый Структура("Ссылка",ДанныеПечати.Ссылка));
		
		Для Каждого Строка Из Строки Цикл
			
			Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамСтрока");
			Область.Параметры.Заполнить(Строка);
			
			Область.Параметры.ОтметкаОбОпломбировании = "не опломбировано";
			
			Область.Параметры.Товар = ?(
				Строка.АлкогольнаяПродукция, 
				НСтр("ru='Алкогольная продукция в ассортименте'"), 
				НСтр("ru='Безалкогольная продукция'"));
				
			Область.Параметры.МассаБрутто 	= ПрочеркНезаполняемогоПоля;
			Область.Параметры.ОсобыеОтметки = ПрочеркНезаполняемогоПоля;
				
			ТабличныйДокумент.Вывести(Область);
			
			КоличествоМестИтог = КоличествоМестИтог + Строка.КоличествоМест;
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваровПоДокументамПодвал");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод состояния транспорта по факту
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			Новый Структура("СостояниеТранспортаПоФакту", "не опломбировано"), 
			"СостояниеТранспортаПоФакту", 
			4);
		
		// Вывод таблицы итогов
		Область = Макет.ПолучитьОбласть("ТаблицаИтогов");
		
		Область.Параметры.КоличествоМестПоДокументам	= КоличествоМестИтог;
		Область.Параметры.КоличествоМестПоФакту			= КоличествоМестИтог;
		
		Область.Параметры.МассаБруттоПоДокументам 		= ПрочеркНезаполняемогоПоля;
		Область.Параметры.МассаБруттоПоФакту 			= ПрочеркНезаполняемогоПоля;
		Область.Параметры.МассаТарыПоДокументам 		= ПрочеркНезаполняемогоПоля;
		Область.Параметры.МассаТарыПоФакту 				= ПрочеркНезаполняемогоПоля;
		Область.Параметры.МассаНеттоПоДокументам 		= ПрочеркНезаполняемогоПоля;
		Область.Параметры.МассаНеттоПоФакту 			= ПрочеркНезаполняемогоПоля;
		Область.Параметры.СтепеньЗаполненияПоДокументам = ПрочеркНезаполняемогоПоля;
		Область.Параметры.СтепеньЗаполненияПоФакту 		= ПрочеркНезаполняемогоПоля;
		
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод первой части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		ТабличныйДокумент.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Строка");
		
		Товары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка)); 
		
		Для Каждого Товар Из Товары Цикл
			
			Область.Параметры.Заполнить(Товар);
			
			Если ЗначениеЗаполнено(Товар.НоменклатураНаименование) Тогда
				ДопПараметрыПредставлениеНоменклатуры = 
					НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
					
				ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				
				Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Товар.НоменклатураНаименование,
					Товар.ХарактеристикаНаименование,,,
					ДопПараметрыПредставлениеНоменклатуры);
					
			Иначе
					
				Область.Параметры.Товар = Товар.ТекстовоеОписание;
				
			КонецЕсли;
			
			Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров1Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №3 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаТретьейСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Условий Хранения Товара До Вскрытия
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			Новый Структура("УсловияХраненияТовараДоВскрытия", "Согласно нормативам"), 
			"УсловияХраненияТовараДоВскрытия", 
			4);
		
		// Вывод Температуры При Разгрузке
		Область = Макет.ПолучитьОбласть("ТемператураПриРазгрузке");
		Область.Параметры.ТемператураПриРазгрузке = ДанныеПечати.ТемператураПриРазгрузке;
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Состояния Тары И Упаковки
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			Новый Структура("СостояниеТарыИУпаковки", "Упаковка не нарушена"), 
			"СостояниеТарыИУпаковки",
			4);
			
		// Вывод содержания наружной маркировки
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			Новый Структура("СодержаниеНаружнойМаркировки", "Упаковка производителя"), 
			"СодержаниеНаружнойМаркировки", 
			4);
		
		// Вывод даты вскрытия тары
		Область = Макет.ПолучитьОбласть("ДатаВскрытияТары");
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаВскрытияТары", ДанныеПечати.ДатаВскрытияТары));
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод Организации Взвесившей И Опломбировавшей Товар
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ОрганизацияВзвесившаяИОпломбировавшаяТовар", 4);
		
		// Вывод Порядока Отбора Товара Для Выборочной Проверки
		ВывестиМногострочноеПоле(ТабличныйДокумент, Макет, ДанныеПечати, "ПорядокОтбораТовараДляВыборочнойПроверки", 4);
		
		// Вывод второй части таблицы товаров
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Шапка");
		Область.Параметры.НДС = ТекстНДСВШапкеТаблицы;
		ТабличныйДокумент.Вывести(Область); 
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Строка");
		
		Для Каждого Товар Из Товары Цикл
			
			Область.Параметры.Заполнить(Товар);
			
			Если ЗначениеЗаполнено(КолонкаКодов) Тогда
				Область.Параметры.ЗначениеКода = Товар[КолонкаКодов];
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("ТаблицаТоваров2Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Страница №4 ////////////////////////////////////////////////////////////////////////////////////////////////////
		// Вывод шапки
		Область = Макет.ПолучитьОбласть("ШапкаЧетвертойСтраницы");
		ТабличныйДокумент.Вывести(Область);
		
		СтрокиОписанияПотерь = бг_СформироватьСтрокиОписанияПотерьТОРГ2(Товары, ДанныеПечати.Валюта);
		
		// Вывод способа определения количества
		Область = Макет.ПолучитьОбласть("СпособОпределенияКоличества");
		Область.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод места определения количества
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			ДанныеПечати, 
			"МестоОпределенияКоличества", 
			4);
		
		// Вывод сведений об исправности весоизмерительных приборов
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			ДанныеПечати, 
			"СведенияОбИсправностиВесоизмерительныхПриборов",
			4);
			
		// Вывод прочих данных
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			Новый Структура("ПрочиеДанные", "нет"), 
			"ПрочиеДанные", 
			4);
		
		// Вывод подробного описания дефектов
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			СтрокиОписанияПотерь, 
			"ПодробноеОписаниеДефектов", 
			4);
		
		// Вывод заключения комиссии
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			СтрокиОписанияПотерь, 
			"ЗаключениеКомиссии", 
			4);
		
		// Вывод приложения
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			ДанныеПечати, 
			"Приложение", 
			4);
		
		// Вывод членов комиссии
		Область = Макет.ПолучитьОбласть("ЧленыКомиссии");
		Область.Параметры.Заполнить(ДанныеПечати);
		
		Область.Параметры.Заполнить(ПараметрыПоДате(
			"ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера", 
			ДанныеПечати.ДатаВыдачиДокументаУдостоверяющегоПолномочияПредставителяПартнера));
		
		Область.Параметры.ПредседательКомиссииФИО = ?(
			ТипЗнч(ДанныеПечати.ПредседательКомиссии) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ПредседательКомиссии), 
			ДанныеПечати.ПредседательКомиссии);
				
		Область.Параметры.ЧленКомиссии1ФИО = ?(
			ТипЗнч(ДанныеПечати.ЧленКомиссии1) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии1), 
			ДанныеПечати.ЧленКомиссии1);
			
		Область.Параметры.ЧленКомиссии2ФИО = ?(
			ТипЗнч(ДанныеПечати.ЧленКомиссии2) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии2), 
			ДанныеПечати.ЧленКомиссии2);
			
		Область.Параметры.ЧленКомиссии3ФИО = ?(
			ТипЗнч(ДанныеПечати.ЧленКомиссии3) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии3), 
			ДанныеПечати.ЧленКомиссии3);
			
		Область.Параметры.ГлавныйБухгалтерФИО = ДанныеПечати.ГлавныйБухгалтер;
		
		ТабличныйДокумент.Вывести(Область);
		
		// Вывод решения руководителя
		ВывестиМногострочноеПоле(
			ТабличныйДокумент, 
			Макет, 
			СтрокиОписанияПотерь, 
			"РешениеРуководителя", 
			4);
		
		// Вывод кладовщика
		Область = Макет.ПолучитьОбласть("Кладовщик");
		Область.Параметры.КладовщикПринявшийТоварФИО = ДанныеПечати.КладовщикПринявшийТовар;
		ТабличныйДокумент.Вывести(Область);
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, 
			НомерСтрокиНачало, 
			ОбъектыПечати, 
			ДанныеПечати.Ссылка);
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область Печать_ТОРГ3

Функция бг_СформироватьПечатнуюФормуТОРГ3(СтруктураТипов, ОбъектыПечати, ПараметрыПечати)
		
	ТабличныеДокументы = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);

	НомерТипаДокумента = 0;

	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		Если СтруктураОбъектов.Ключ = "Документ.КорректировкаПриобретения" Тогда
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
			
			ДанныеДляПечати = МенеджерОбъекта.бг_ПолучитьДанныеДляПечатнойФормыТОРГ3(
				ПараметрыПечати, 
				СтруктураОбъектов.Значение);
			
			бг_ЗаполнитьТабличныйДокументТорг3ПоКорректировкеПриобретения(
				ТабличныеДокументы, 
				ДанныеДляПечати, 
				ОбъектыПечати);
			
		КонецЕсли;

	КонецЦикла;

	// обход ошибки, если не передается ни один табличный документ
	Если ТабличныеДокументы.Количество() = 0 Тогда
		ТабличныеДокументы.Добавить(Новый ТабличныйДокумент);	
	КонецЕсли;	
	
	Возврат ТабличныеДокументы;

КонецФункции

// Параметры:
// 	ТабличныйДокумент              - ТабличныйДокумент - 
// 	ДанныеДляПечати                - см. КорректировкаПриобретенияЛокализация.ПолучитьДанныеДляПечатнойФормыТОРГ3
// 	ОбъектыПечати                  - СписокЗначений 
// 	ПечатьВНоменклатуреПоставщкика - Булево 
// 
Процедура бг_ЗаполнитьТабличныйДокументТорг3ПоКорректировкеПриобретения(ТабличныеДокументы, ДанныеДляПечати, 
	ОбъектыПечати)
	
	Макет1Лист = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьАктыОРасхождениях.ПФ_MXL_бгТОРГ3_1_лист");
	Макет2Лист = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьАктыОРасхождениях.ПФ_MXL_бгТОРГ3_2_лист");
	
	ДанныеСчетовФактур         = ДанныеДляПечати.ДанныеСчетовФактур.Выбрать();
	ДанныеПечати               = ДанныеДляПечати.ДанныеПечати.Выбрать();
	ТаблицаТоваров             = ДанныеДляПечати.ДанныеТовары.Выгрузить();
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		КолонкаКодов = "Артикул";
	КонецЕсли;
		
	Пока ДанныеПечати.Следующий() Цикл
		
		Отказ = Ложь;
		
		бг_ПроверитьВозможностьВыводаДокументаНаПечать(ДанныеПечати, "ТОРГ3", Отказ);
		
		Если Отказ Тогда
			Продолжить;	
		КонецЕсли;
		
		ТабличныйДокумент1Страница = Новый ТабличныйДокумент;
		ТабличныйДокумент1Страница.АвтоМасштаб = Истина;
		ТабличныйДокумент1Страница.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		НомерСтрокиНачало = ТабличныйДокумент1Страница.ВысотаТаблицы + 1;
		
		бг_Заполнить1СтраницуТабличногоДокументаТорг(
			ТабличныйДокумент1Страница, 
			Макет1Лист, 
			ДанныеПечати, 
			ДанныеСчетовФактур, 
			Истина,
			ТаблицаТоваров);
		
		ТабличныеДокументы.Добавить(ТабличныйДокумент1Страница);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент1Страница, 
			НомерСтрокиНачало, 
			ОбъектыПечати, 
			ДанныеПечати.Ссылка);
		
		// Страница №2 ////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ТабличныйДокумент2Страница = Новый ТабличныйДокумент;
		ТабличныйДокумент2Страница.АвтоМасштаб = Истина;
		ТабличныйДокумент2Страница.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		НомерСтрокиНачало = ТабличныйДокумент2Страница.ВысотаТаблицы + 1;
		
		Область = Макет2Лист.ПолучитьОбласть("Страница2ТаблицаШапка");
		ТабличныйДокумент2Страница.Вывести(Область);
		
		Область = Макет2Лист.ПолучитьОбласть("Страница2ТаблицаСтрока");
		
		Товары = ТаблицаТоваров.НайтиСтроки(Новый Структура("Ссылка", ДанныеПечати.Ссылка));
		
		Для Каждого Товар Из Товары Цикл
			
			Область.Параметры.Заполнить(Товар);
			
			Если ЗначениеЗаполнено(Товар.НоменклатураНаименование) Тогда
				ДопПараметрыПредставлениеНоменклатуры = 
					НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
					
				ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				
				Область.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Товар.НоменклатураНаименование,
					Товар.ХарактеристикаНаименование,,,
					ДопПараметрыПредставлениеНоменклатуры);
			КонецЕсли;
				
			Область.Параметры.КоличествоБракБой = Товар.КоличествоБой + Товар.КоличествоБрак;
			Область.Параметры.СуммаБракБой = Товар.СуммаБой + Товар.СуммаБрак;
			
			Область.Параметры.Продукция = ?(
				Товар.АлкогольнаяПродукция, 
				НСтр("ru='Алкогольная продукция в ассортименте'"), 
				НСтр("ru='Безалкогольная продукция'"));
				
			ТабличныйДокумент2Страница.Вывести(Область);	
				
		КонецЦикла;
		
		ТабличныйДокумент2Страница.ВывестиГоризонтальныйРазделительСтраниц();
				
		Область = Макет2Лист.ПолучитьОбласть("ЗаключениеКомиссии");
		Область.Параметры.Заключение = бг_СформироватьЗаключениеКомиссииТОРГ3(Товары, ДанныеПечати.Валюта);;
		ТабличныйДокумент2Страница.Вывести(Область);
		
		// Вывод членов комиссии
		Область = Макет2Лист.ПолучитьОбласть("ЧленыКомиссии");
		Область.Параметры.Заполнить(ДанныеПечати);
		
		Область.Параметры.ПредседательКомиссииФИО = ?(
			ТипЗнч(ДанныеПечати.ПредседательКомиссии) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ПредседательКомиссии), 
			ДанныеПечати.ПредседательКомиссии);
				
		Область.Параметры.ЧленКомиссии1ФИО = ?(
			ТипЗнч(ДанныеПечати.ЧленКомиссии1) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии1), 
			ДанныеПечати.ЧленКомиссии1);
			
		Область.Параметры.ЧленКомиссии2ФИО = ?(
			ТипЗнч(ДанныеПечати.ЧленКомиссии2) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии2), 
			ДанныеПечати.ЧленКомиссии2);
			
		Область.Параметры.ЧленКомиссии3ФИО = ?(
			ТипЗнч(ДанныеПечати.ЧленКомиссии3) = Тип("СправочникСсылка.ФизическиеЛица"), 
			ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ЧленКомиссии3), 
			ДанныеПечати.ЧленКомиссии3);
		
		ТабличныйДокумент2Страница.Вывести(Область);
		
		ТабличныеДокументы.Добавить(ТабличныйДокумент2Страница);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент2Страница, 
			НомерСтрокиНачало, 
			ОбъектыПечати, 
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура бг_ПроверитьВозможностьВыводаДокументаНаПечать(ДанныеПечати, Идентификатор, Отказ) 
	
	Если Не ЗначениеЗаполнено(ДанныеПечати.ДокументОснование)
		Или ТипЗнч(ДанныеПечати.ДокументОснование) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Вывод на печать возможен для документов, введенных на основании 
					|документа ""Приобретение товаров и услуг"". Печать документа %1 не выполнена'"), 
			ДанныеПечати.Ссылка);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, 
			ДанныеПечати.Ссылка,,, 
			Отказ);	
			
		Возврат;	
			
	КонецЕсли;	
	
	Если Не ДанныеПечати.ЕстьРасхождения Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В документе %1 нет расхождений. Вывод документа на печать не требуется.'"),
			ДанныеПечати.Ссылка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДанныеПечати.Ссылка,,, 
			Отказ);
			
		Возврат;	
			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КорректировкаПриобретенияРасхождения.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.КорректировкаПриобретения.Расхождения КАК КорректировкаПриобретенияРасхождения
	|ГДЕ
	|	КорректировкаПриобретенияРасхождения.Ссылка = &Ссылка
	|	И НЕ КорректировкаПриобретенияРасхождения.Номенклатура.ИмпортнаяАлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПриобретенияРасхождения.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеПечати.Ссылка);
	
	Если Идентификатор = "ТОРГ3" Тогда	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НЕ", "");		
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В документе %1 нет %2 товаров. Печать не выполнена'"),
			ДанныеПечати.Ссылка,
			?(Идентификатор = "ТОРГ2", "отечественных", "импортных"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДанныеПечати.Ссылка,,, 
			Отказ);	
		
	КонецЕсли;			
	
КонецПроцедуры	

// Функция - Возвращает строку шаблона с зачеркнутыми словами
//
// Параметры:
//  Шаблон					 - Строка - Перечисленные слова через запятую
//  НомераЗачеркиваемыхСлов	 - Строка - Номера слов, перечисленные через запятую, 
//	которые нужно зачеркнуть в шаблоне
// 
// Возвращаемое значение:
// 		Строка - Строка по шаблону с зачеркиванием
//
Функция бг_СтрокаПоШаблонуСЗачеркиванием(Знач Шаблон, Знач НомераЗачеркиваемыхСлов)
	
	Разделитель = ",";
	
	Шаблон = СтрЗаменить(Шаблон, " ", "");
	СловаШаблона = СтрРазделить(Шаблон, Разделитель, Ложь);
	
	НомераЗачеркиваемыхСлов = СтрЗаменить(НомераЗачеркиваемыхСлов, " ", "");
	НомераЗачеркиваемыхСлов = СтрРазделить(НомераЗачеркиваемыхСлов, Разделитель, Ложь);
	
	Для Индекс = 0 По НомераЗачеркиваемыхСлов.ВГраница() Цикл	
		НомераЗачеркиваемыхСлов[Индекс] = Число(НомераЗачеркиваемыхСлов[Индекс]);	
	КонецЦикла;	
	
	ЧастиСтроки = Новый Массив;
	
	Для Каждого Слово Из СловаШаблона Цикл
		
		ДлинаСтроки = СтрДлина(Слово);
		
		Если ДлинаСтроки = 0 Тогда
			Продолжить;	
		КонецЕсли;	
		
		ИндексЭлемента = СловаШаблона.Найти(Слово);
		
		СимволЗачеркивания = 822;
		
		Если НомераЗачеркиваемыхСлов.Найти(ИндексЭлемента + 1) <> Неопределено Тогда	
			ЗачеркнутоеСлово = "";	
			Для НомерСимвола = 1 По ДлинаСтроки Цикл
				ЗачеркнутоеСлово = ЗачеркнутоеСлово + Символ(СимволЗачеркивания) + Сред(Слово, НомерСимвола, 1);   	
			КонецЦикла;		
			ЧастиСтроки.Добавить(ЗачеркнутоеСлово);	
		Иначе	
			ЧастиСТроки.Добавить(Слово);	
		КонецЕсли;	
				
	КонецЦикла;
	
    Возврат СтрСоединить(ЧастиСтроки, ", ");
	
КонецФункции	

Процедура бг_Заполнить1СтраницуТабличногоДокументаТорг(ТабличныйДокумент, Макет, ДанныеПечати, 
	ДанныеСчетовФактур, ТОРГ3 = Ложь, Товары = Неопределено)
	
	Область = Макет.ПолучитьОбласть("ШапкаПервойСтраницы");
	Область.Параметры.Заполнить(ДанныеПечати);
	
	Область.Параметры.НомерДокумента = ДанныеПечати.НомерДокумента;	
	
	ПунктРазгрузкиАдрес = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(
		ДанныеПечати.ГрузополучательПунктРазгрузки, 
		"Фактический", 
		ДанныеПечати.ДатаДокумента);
	
	Область.Параметры.ПредставлениеПодразделения 	= ПунктРазгрузкиАдрес;
	Область.Параметры.МестоПриемкиТовара 			= ПунктРазгрузкиАдрес;	
		
	Область.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.ДатаДокумента), 
		"ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		
	Область.Параметры.Производитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Производитель, ДанныеПечати.ДатаДокумента), 
		"СокращенноеНаименование,");
		
	Область.Параметры.Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.ДатаДокумента),
		"ПолноеНаименование,ФактическийАдрес,Телефоны,");
		
	СведенияСкладаОтправителяТоваров = ?(ТОРГ3, "ПолноеНаименование,", "ПолноеНаименование,ФактическийАдрес,");	
		
	Область.Параметры.СкладОтправителяТовара = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.ДатаДокумента),
		СведенияСкладаОтправителяТоваров);		
		
	Область.Параметры.Поставщик = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Поставщик, ДанныеПечати.ДатаДокумента),
		"ПолноеНаименование,ЮридическийАдрес,Телефоны,");
		
	Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоставкиТоваров", ДанныеПечати.ДатаДоставкиТоваров));
	Область.Параметры.Заполнить(ПараметрыПоДате("ДатаОтправленияТоваров", ДанныеПечати.ДатаОтправленияТоваров));
	Область.Параметры.Заполнить(ПараметрыПоДате("ДатаДоговораПоставки", ДанныеПечати.ДатаДоговораПоставки));
	
	ДанныеСчетовФактур.Сбросить();
	
	Если ДанныеСчетовФактур.НайтиСледующий(Новый Структура("ДокументОснование", ДанныеПечати.Ссылка)) Тогда
		
		Область.Параметры.Заполнить(ДанныеСчетовФактур);
		
		Область.Параметры.Заполнить(Новый Структура(
			"НомерСчетаФактуры", 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеСчетовФактур.НомерСчетаФактуры)));
													
		Область.Параметры.Заполнить(ПараметрыПоДате("ДатаСчетаФактуры", ДанныеСчетовФактур.ДатаСчетаФактуры));
		
	КонецЕсли;
	
	Область.Параметры.Заполнить(ПараметрыПоДате(
									"ДатаДокумента", 
									ДанныеПечати.ДатаДокумента));
	
	Область.Параметры.Заполнить(ПараметрыПоДате(
									"ДатаКоммерческогоАкта", 
									ДанныеПечати.ДатаКоммерческогоАкта)); 
									
	Область.Параметры.Заполнить(ПараметрыПоДате(
									"ДатаВетеринарногоСвидетельства", 
									ДанныеПечати.ДатаВетеринарногоСвидетельства));
	
	Область.Параметры.Заполнить(ПараметрыПоДате(
									"ДатаЖелезнодорожнойНакладной", 
									ДанныеПечати.ДатаЖелезнодорожнойНакладной));
	
	Область.Параметры.Заполнить(ПараметрыПоДате(
									"ДатаДокументаОВызовеПредставителяПартнера", 
									ДанныеПечати.ДатаДокументаОВызовеПредставителяПартнера));
	
	Область.Параметры.Заполнить(ПараметрыПоДате(
									"ДатаКоносамента", 
									ДанныеПечати.ДатаКоносамента));
	
	Область.Параметры.Заполнить(ПараметрыПоДате(
									"ДатаВскрытияТары", 
									ДанныеПечати.ДатаВскрытияТары));
	
	Область.Параметры.Заполнить(Новый Структура(
		"ВызываемыйПредставительПартнера", 
		бг_СтрокаПоШаблонуСЗачеркиванием(НСтр("ru = 'грузоотправителя, поставщика, производителя'"), "1,3")));
	
	Область.Параметры.Заполнить(Новый Структура(
		"ВидДокументаОВызовеПредставителяПартнера", 
		бг_СтрокаПоШаблонуСЗачеркиванием(НСтр("ru = 'телеграмма, факс, телефонограмма, радиограмма'"), "1,3,4")));
																	
																	
	Область.Параметры.Заполнить(Новый Структура(
		"ОснованиеДляСоставленияАкта", 
		бг_СтрокаПоШаблонуСЗачеркиванием(НСтр("ru = 'приказ, распоряжение'"), "1")));
														
	Область.Параметры.РуководительФИО = ДанныеПечати.Руководитель;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДокументОснование) Тогда
		
		ШаблонПеречняДокументов = НСтр("ru='ТТН №%1 от %2'");
		
		Область.Параметры.ПереченьСопроводительныхДокументов = СтрШаблон(
																	ШаблонПеречняДокументов, 
																	ДанныеПечати.НомерДокументаОснования, 
																	Формат(ДанныеПечати.ДатаДокументаОснования, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Если Товары <> Неопределено Тогда
		
		ТоварыОднойСтрокой = "";
		
		НоменклатураДокумента = Товары.Скопировать(, "НоменклатураНаименование");
		НоменклатураДокумента.Свернуть("НоменклатураНаименование");
		
		Для Каждого Номенклатура Из НоменклатураДокумента Цикл
			ТоварыОднойСтрокой = ТоварыОднойСтрокой + Номенклатура.НоменклатураНаименование + ", ";	
		КонецЦикла;	
		
		Если Прав(ТоварыОднойСтрокой, 2) = ", " Тогда
			
			ТоварыОднойСтрокой = Лев(
				ТоварыОднойСтрокой, 
				СтрДлина(ТоварыОднойСтрокой) - 2);
			
		КонецЕсли;
			
		Область.Параметры.Заполнить(Новый Структура("ПеречислениеТовара", ТоварыОднойСтрокой));	
		
	КонецЕсли;	
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
		ТабличныйДокумент, 
		Макет, 
		Область, 
		ДанныеПечати.Ссылка);
		
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Функция бг_СформироватьСтрокиОписанияПотерьТОРГ2(Товары, Валюта);

	СтрокиОписанияПотерь = Новый Структура; 
	
	СтрокиОписанияПотерь.Вставить("ЗаключениеКомиссии", "");
	СтрокиОписанияПотерь.Вставить("РешениеРуководителя", "");
	СтрокиОписанияПотерь.Вставить("ПодробноеОписаниеДефектов", "");
	
	ШаблонЗаключенияКомиссии = НСтр("ru='Потеря товара в качестве %1. Продукцию вернуть поставщику.'");
	ШаблонРешенияРуководителя = НСтр("ru='Вернуть в качестве %1.'");
	ШаблонПодробногоОписанияДефектов = НСтр("ru='При приемке товаров был обнаружен %1.'");
	
	ШаблоныПоВидамПотерь = бг_ШаблоныПоВидамПотерь();
	
	Для Каждого ДанныеТовара Из Товары Цикл
		
		// строка излишек
		бг_СформироватьСтрокуПотерьПрописью(
			ШаблоныПоВидамПотерь.Получить("излишек"), 
			ДанныеТовара, 
			ДанныеТовара.КоличествоИзлишек, 
			ДанныеТовара.СуммаИзлишек, 
			Валюта); 	
			
		// строка недостача
		бг_СформироватьСтрокуПотерьПрописью(
			ШаблоныПоВидамПотерь.Получить("недостача"), 
			ДанныеТовара, 
			ДанныеТовара.КоличествоНедостача, 
			ДанныеТовара.СуммаНедостача, 
			Валюта);	
			
		// строка бой	
		бг_СформироватьСтрокуПотерьПрописью(
			ШаблоныПоВидамПотерь.Получить("бой"), 
			ДанныеТовара, 
			ДанныеТовара.КоличествоБой, 
			ДанныеТовара.СуммаБой, 
			Валюта);	
			
		// строка брак
		бг_СформироватьСтрокуПотерьПрописью(
			ШаблоныПоВидамПотерь.Получить("брак"), 
			ДанныеТовара, 
			ДанныеТовара.КоличествоБрак, 
			ДанныеТовара.СуммаБрак, 
			Валюта);	
				
	КонецЦикла;
		
	Для Каждого ДанныеШаблона Из ШаблоныПоВидамПотерь Цикл
		
		Шаблон = ДанныеШаблона.Значение.Шаблон;
		ЗаполняемаяСтрока = ДанныеШаблона.Значение.ЗаполняемаяСтрока;
		
		Если ПустаяСтрока(ЗаполняемаяСтрока) Тогда
			Продолжить;	
		КонецЕсли;
			
		СтрокаПодробногоОписанияДефектов = СтрЗаменить(Шаблон, "%2%", ЗаполняемаяСтрока);
		
		СклоненияШаблона = ПолучитьСклоненияСтроки(Шаблон,, "ПД=Родительный");
		
		СтрокаРешенияРуководителя = ?(
			СклоненияШаблона.Количество() > 0,
			СтрЗаменить(СклоненияШаблона[0], "%2%", ЗаполняемаяСтрока), 
			"");
			
		СтрокаЗаключенияКомиссии = СтрокаРешенияРуководителя;	
		
		СтрокиОписанияПотерь.ЗаключениеКомиссии = СтрокиОписанияПотерь.ЗаключениеКомиссии 
			+ СтрокаЗаключенияКомиссии;
			
		СтрокиОписанияПотерь.РешениеРуководителя = СтрокиОписанияПотерь.РешениеРуководителя 
			+ СтрокаРешенияРуководителя;
			
		СтрокиОписанияПотерь.ПодробноеОписаниеДефектов = СтрокиОписанияПотерь.ПодробноеОписаниеДефектов 
			+ СтрокаПодробногоОписанияДефектов;
			
	КонецЦикла;
	
	Для Каждого СтрокаОписанияПотерь из СтрокиОписанияПотерь Цикл
		
		Если Прав(СтрокаОписанияПотерь.Значение, 2) = ", " Тогда
			
			СтрокиОписанияПотерь[СтрокаОписанияПотерь.Ключ] = Лев(
				СтрокаОписанияПотерь.Значение, 
				СтрДлина(СтрокаОписанияПотерь.Значение) - 2);
				
		КонецЕсли;	
		
	КонецЦикла;	
	
	СтрокиОписанияПотерь.ЗаключениеКомиссии = ?(
		ПустаяСтрока(СтрокиОписанияПотерь.ЗаключениеКомиссии), 
		СтрокиОписанияПотерь.ЗаключениеКомиссии, 
		СтрШаблон(ШаблонЗаключенияКомиссии, СтрокиОписанияПотерь.ЗаключениеКомиссии));
		
    СтрокиОписанияПотерь.РешениеРуководителя = ?(
		ПустаяСтрока(СтрокиОписанияПотерь.РешениеРуководителя), 
		СтрокиОписанияПотерь.РешениеРуководителя, 
		СтрШаблон(ШаблонРешенияРуководителя, СтрокиОписанияПотерь.РешениеРуководителя));
		
	СтрокиОписанияПотерь.ПодробноеОписаниеДефектов = ?(
		ПустаяСтрока(СтрокиОписанияПотерь.ПодробноеОписаниеДефектов),
		СтрокиОписанияПотерь.ПодробноеОписаниеДефектов,
		СтрШаблон(ШаблонПодробногоОписанияДефектов, СтрокиОписанияПотерь.ПодробноеОписаниеДефектов));	
	
	Возврат СтрокиОписанияПотерь;
	
КонецФункции	

функция бг_СформироватьЗаключениеКомиссииТОРГ3(Товары, Валюта);	
		
	ШаблонЗаключенияКомиссии = НСтр("ru='При приемке продукции были выявлены следующие расхождения: %1. 
										|В систему ЕГАИС будет выгружен акт расхождения. Продукцию вернуть поставщику.'");
	
	ПеречислениеПотерь = "";
	
	Для Каждого ДанныеТовара Из Товары Цикл
			
		Если ДанныеТовара.КоличествоПоДокументам <> ДанныеТовара.КоличествоПоФакту Тогда
			
			ШаблоныПоВидамПотерь = бг_ШаблоныПоВидамПотерь();
			
			// строка излишек
			КлючСтроки = "излишек";
			бг_СформироватьСтрокуПотерьПрописью(
				ШаблоныПоВидамПотерь.Получить(КлючСтроки), 
				ДанныеТовара, 
				ДанныеТовара.КоличествоИзлишек, 
				ДанныеТовара.СуммаИзлишек, 
				Валюта,
				КлючСтроки); 	
				
			// строка недостача
			КлючСтроки = "недостача";
			бг_СформироватьСтрокуПотерьПрописью(
				ШаблоныПоВидамПотерь.Получить(КлючСтроки), 
				ДанныеТовара, 
				ДанныеТовара.КоличествоНедостача, 
				ДанныеТовара.СуммаНедостача, 
				Валюта,
				КлючСтроки);	
				
			// строка бой
			КлючСтроки = "бой";
			бг_СформироватьСтрокуПотерьПрописью(
				ШаблоныПоВидамПотерь.Получить(КлючСтроки), 
				ДанныеТовара, 
				ДанныеТовара.КоличествоБой, 
				ДанныеТовара.СуммаБой, 
				Валюта,
				КлючСтроки);	
				
			// строка брак
			КлючСтроки = "брак";
			бг_СформироватьСтрокуПотерьПрописью(
				ШаблоныПоВидамПотерь.Получить(КлючСтроки), 
				ДанныеТовара, 
				ДанныеТовара.КоличествоБрак, 
				ДанныеТовара.СуммаБрак, 
				Валюта,
				КлючСтроки);
				
			СтрокаОписанияПотерь = "";	
				
			Для Каждого Шаблон Из ШаблоныПоВидамПотерь Цикл
				
				СтрокаОписанияПотерь = СтрокаОписанияПотерь + Шаблон.Значение.ЗаполняемаяСтрока;	
				
			КонецЦикла;
			
			ПеречислениеПотерь = ПеречислениеПотерь 
				+ ДанныеТовара.НоменклатураНаименование 
				+ ": "	
				+ СтрокаОписанияПотерь;			
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Прав(ПеречислениеПотерь, 2) = ", " Тогда
		
		ПеречислениеПотерь = Лев(
			ПеречислениеПотерь, 
			СтрДлина(ПеречислениеПотерь) - 2);
		
	КонецЕсли;
	
	Возврат ?(
		ПустаяСтрока(ПеречислениеПотерь), 
		ПеречислениеПотерь, 
		СтрШаблон(ШаблонЗаключенияКомиссии, ПеречислениеПотерь));
	
КонецФункции	

Процедура бг_СформироватьСтрокуПотерьПрописью(ДанныеСтроки, ДанныеТовара, Количество, Сумма, Валюта, ВидПотери = "")
	
	Если Не Количество > 0
			Или ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаполняемаяСтрока = ДанныеСтроки.ЗаполняемаяСтрока;
	
	ШаблонСтроки = НСтр("ru='%1 %2 (%3) %4, %5 %6 (%7), '");
	
	КоличествоПрописью = ЧислоПрописью(Количество, ,",,,,,,,,0");
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Валюта);
						
	ЗаполняемаяСтрока = ЗаполняемаяСтрока + СтрШаблон(
		ШаблонСтроки, 
		?(ПустаяСтрока(ВидПотери), ДанныеТовара.НоменклатураНаименование, ВидПотери), 
		?(ПустаяСтрока(ВидПотери), Количество, "в количестве " + Строка(Количество)), 
		КоличествоПрописью, 
		ДанныеТовара.ЕдиницаИзмеренияНаименование,
		?(ПустаяСтрока(ВидПотери), "сумма", "на сумму"),
		Формат(Сумма, "ЧДЦ=2"), 
		СуммаПрописью);				
												
	ДанныеСтроки.ЗаполняемаяСтрока = ЗаполняемаяСтрока;											
												
КонецПроцедуры	

Функция бг_ШаблоныПоВидамПотерь()
	
	ШаблонСтроки = НСтр("ru='%1%: %2%'");

	ВидыПотерь = бг_ВидыПотерь();
	
	ШаблоныПоВидамПотерь = Новый Соответствие;
	
	Для Каждого ВидПотери Из ВидыПотерь Цикл
		
		Значение = Новый Структура;
		Значение.Вставить("Шаблон", СтрЗаменить(ШаблонСтроки, "%1%", ВидПотери));
		Значение.Вставить("ЗаполняемаяСтрока", "");
		
		ШаблоныПоВидамПотерь.Вставить(ВидПотери, Значение);	
		
	КонецЦикла;	
	
	Возврат ШаблоныПоВидамПотерь;
	
КонецФункции

Функция бг_ВидыПотерь()
	
	ВидыПотерь = Новый Массив;
	
	ВидыПотерь.Добавить("излишек");
	ВидыПотерь.Добавить("недостача");
	ВидыПотерь.Добавить("бой");
	ВидыПотерь.Добавить("брак");
	
	Возврат ВидыПотерь;
	
КонецФункции	

#КонецОбласти

#КонецЕсли