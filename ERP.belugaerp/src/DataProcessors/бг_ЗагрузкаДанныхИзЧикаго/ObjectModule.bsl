#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Инициализация

// Загружает ранее сохранённые настройки обмена из хранилища
//
// Параметры:
//  ВариантОбмена  - Строка - возможные варианты "Загрузки" или "Выгрузки"
Функция НастройкаОбменаЗагружена(ВариантОбмена) Экспорт
	
	ИмяНастройки = "Настройки_" + ВариантОбмена + СтрЗаменить(Строка(Пользователь)," ", "");//имя должно быть без пробелов
	НастройкаОбмена = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("Чикаго_" + ВариантОбмена, ИмяНастройки);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиДляВосстановления = Новый Массив;
	НастройкиДляВосстановления.Добавить("Период");
	НастройкиДляВосстановления.Добавить("Пользователь");
	НастройкиДляВосстановления.Добавить("АктивныйФилиал");
	НастройкиДляВосстановления.Добавить("ИспользоватьПодробныйСписокОбъектовОбмена");
	НастройкиДляВосстановления.Добавить("КаталогДанных");
	
	Для каждого ТекущаяНастройка Из НастройкиДляВосстановления Цикл
	
		Если НастройкаОбмена.Свойство(ТекущаяНастройка) Тогда
			ЭтотОбъект[ТекущаяНастройка] = НастройкаОбмена[ТекущаяНастройка];
		КонецЕсли;
	
	КонецЦикла;
		
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкаОбмена.КомпоновщикНастроек);
	
	//Восстановим отметки для ОбъектыОбмена сохранённые ранее пользователем
	Если НастройкаОбмена.Свойство("СохранённыеОбъектыОбмена") Тогда
		
		Для каждого СтрокаОбъектаОбмена Из ОбъектыОбмена Цикл
			
			СохранённаяНастройка = НастройкаОбмена.СохранённыеОбъектыОбмена.НайтиПоЗначению(СтрокаОбъектаОбмена.Название);
			Если СохранённаяНастройка <> Неопределено Тогда
				СтрокаОбъектаОбмена.Отметка = СохранённаяНастройка.Пометка;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
		
	Возврат Истина;
		
КонецФункции

// Считывает настройки обмена из макета
//
// Параметры:
//  ВариантОбмена  - Строка - возможные варианты "Загрузки" или "Выгрузки"
Процедура ИнициализироватьНастройки(ВариантОбмена) Экспорт
	
	ТаблицаНастроек = Обработки.бг_ЗагрузкаДанныхИзЧикаго.ПолучитьМакет("Настройки_" + ВариантОбмена);
	
	//1 - Общие настройки
	ОбластьОбщиеНастройки = ТаблицаНастроек.ПолучитьОбласть("ОбщиеНастройки");
	ИнфоКодДистрибьютора = ПрочитатьЗначениеИзЯчейкиМакета(ОбластьОбщиеНастройки, 2, 4);
	
	//2 - Объекты обмена
	ЗаполнитьОбъектыГруппыОбмена(ТаблицаНастроек, ОбъектыОбмена, "Объекты"+ВариантОбмена, Истина);
	
	Если Не НастройкаОбменаЗагружена(ВариантОбмена) И АвтоматическийОбменПоРасписанию Тогда
		//Выполнение рег.задания автоматического обмена без сохранённых настроек является не корректным и его нужно прервать
		ВызватьИсключение НСтр("ru = 'Отсутствуют сохранённые настройки обмена!'");
	КонецЕсли;
	
	//3 - Группы обмена
	ЗаполнитьОбъектыГруппыОбмена(ТаблицаНастроек, ГруппыОбмена, "Группы"+ВариантОбмена, Ложь);
	
	//4 - Отбор
	//08.07.2022 TODO1cbit Прохоренко В.В. - фильтры нужны только для выгрузки
	//СхемаКомпоновки = ПолучитьМакет("ФильтрыВыгрузки");
	//АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Новый УникальныйИдентификатор);
	//ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВоВременномХранилище);
	//КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	//КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);

	//5 - Список филиалов
	ОбластьФилиалы = ТаблицаНастроек.ПолучитьОбласть("Филиалы");
	КоличествоПараметров = ОбластьФилиалы.ВысотаТаблицы;
	
	Для НомерТекущейСтрокиОбласти = 1 По КоличествоПараметров Цикл
		НоваяСтрока = Филиалы.Добавить();
		НоваяСтрока.Филиал = СокрЛП(ПрочитатьЗначениеИзЯчейкиМакета(ОбластьФилиалы, НомерТекущейСтрокиОбласти, 3));
	КонецЦикла;				

КонецПроцедуры

Процедура ЗаполнитьОбъектыГруппыОбмена(ТаблицаНастроек, ТабличнаяЧасть, НазваниеОбласти, ЭтоОбъектыОбмена)

	ОбластьМакета = ТаблицаНастроек.ПолучитьОбласть(НазваниеОбласти);
	КоличествоПараметров = ОбластьМакета.ВысотаТаблицы;
	
	Для НомерТекущейСтрокиОбласти = 1 По КоличествоПараметров Цикл
		
		Название = ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 4);
		Если Не ЗначениеЗаполнено(Название) Тогда
			Продолжить;
		КонецЕсли;
		
		//На тот случай, если в макете с настройками окажутся одинаковые Названия и мы ранее уже добавили такую строку
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Название", Название));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.Название = Название;
			НоваяСтрока.Отметка = ПреобразоватьОтметкуВБулево(ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 3));
		Иначе
			НоваяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
		//Параметры каждой настройки перезаполняем не зависимо от того были они раньше или нет
		НоваяСтрока.Представление	= ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 6);
		НоваяСтрока.КодГруппы		= ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 7);
		НоваяСтрока.ТипОбъектов		= ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 9);
		НоваяСтрока.ПоУмолчанию		= ПреобразоватьОтметкуВБулево(ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 3));//включить в обмены по умолчанию
		
		Если ЭтоОбъектыОбмена Тогда
			НоваяСтрока.XMLСекция		= ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 8);
			НоваяСтрока.Процедура		= ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 10);
			НоваяСтрока.ВидЗначения		= ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 11);
			НоваяСтрока.Включен			= ПреобразоватьОтметкуВБулево(ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерТекущейСтрокиОбласти, 5));//не отображать (служебные)
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПреобразоватьОтметкуВБулево(ЗначениеОтметки)

	Возврат ?(ЗначениеОтметки = "X", Ложь, Истина);

КонецФункции

Функция ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерСтроки, НомерКолонки)
	
	Возврат ОбластьМакета.Область(НомерСтроки, НомерКолонки).Текст;

КонецФункции

Функция ПрочитатьНастройкуИзТаблицы(ОбластьМакета, ИскомыйПараметр, НомерКолонкиНаименованияПараметра, НомерКолонкиЗначенияПараметра)
	
	ЗначениеНастройки = "";
	
	Для НомерСтроки = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		
		Если ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерСтроки, НомерКолонкиНаименованияПараметра) = ИскомыйПараметр Тогда
			
			ЗначениеНастройки = ПрочитатьЗначениеИзЯчейкиМакета(ОбластьМакета, НомерСтроки, НомерКолонкиЗначенияПараметра);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

#КонецОбласти

#Область ВыполнитьОбмен

Функция ПараметрыОбменаКорректноЗаполнены() Экспорт
	
	Если Не ЗначениеЗаполнено(Период.ДатаНачала)
		ИЛИ Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		
		СообщитьПодробно(НСтр("ru = 'Дата начала и дата окончания должны быть заполнены!'"), 2, 0, 4);
		Возврат Ложь;
		
	КонецЕсли;

	Если Период.ДатаНачала > Период.ДатаОкончания Тогда
		
		СообщитьПодробно(НСтр("ru = 'Дата начала не должна превосходить дату конца!'"), 2, 0, 4);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АктивныйФилиал) Тогда
		
		СообщитьПодробно(НСтр("ru = 'Не выбран филиал!'"), 2, 0, 4);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьОбмен(МассивАдресовФайловВоВременномХранилище = Неопределено) Экспорт
	
	//Если Не АвтоматическаяВыгрузкаПоРасписанию Тогда 
	//	МассивАдресовФайловВоВременномХранилище = Новый Массив;
	//КонецЕсли;
	//
	//СгенерированныеФайлы.Очистить();

	ПараллельнаяЗагрузкаЗаказов = Не бг_КонстантыПовтИсп.ЗначениеКонстанты("ПараллельнаяЗагрузкаЗаказов", Пользователь); //09.08.2022 TODO1cbit Прохоренко В.В. - удалить после перехода на обработку заказов в ЕРП
	
	Если Не XML_БиблиотекаРаботает() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьОтчет();
		
	Если Не ПараметрыОбменаКорректноЗаполнены() Тогда
		ЗакрытьОтчет();
		Возврат;
	КонецЕсли;

	XML_ИнициализироватьЖурналОбмена();
	XML_ИнициализироватьЖурналПодтверждений();

	////////////////////////////////////////////////////
	//ЧТЕНИЕ ЛОГА ДОКУМЕНТОВ filelog (начало)
	////////////////////////////////////////////////////
	
	XML_ЧтениеСпискаФайлов();
	
	Если Не ПараллельнаяЗагрузкаЗаказов Тогда
		ТД = ТекущаяДата();
		Пока ТекущаяДата() - ТД < 100 Цикл
			Попытка
				XML_Log_Подтверждения.Save(КаталогДанных + "confirmationslog.xml");
				Прервать;
			Исключение
				ТекстОшибки = ОписаниеОшибки();
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	////////////////////////////////////////////////////
	//ЧТЕНИЕ ЛОГА ДОКУМЕНТОВ filelog (конец)
	////////////////////////////////////////////////////
	
	СообщитьПодробно(НСтр("ru = 'Загрузка данных для ""ST-Чикаго"" завершена.....'"), 0, 3, 1);
	ДобавитьВОтчет(НСтр("ru = 'Загрузка данных  завершена'"), "Заголовок", 1, 1);
	ЗакрытьОтчет();
	СообщитьПодробно("", 0, 0, 1);
	   		
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (начало)
	////////////////////////////////////////////////////
	
	ВывестиВXMLЛог(,,"documents; Загрузка данных завершена");
	
	XML_Log_Общий.AppendChild(XML_Log_Общий_КорневойУзел);
	
	ИмяФайлаXMLЛога = КаталогДанных + "logdataexchangeaudit.xml";
	ИмяФайлаXMLЛогаКопия = КаталогДанных + СоздатьИмяФайлаИзШаблона("intlogs\logdataexchangeauditYYYYMMDDHHMMSS.xml");
	
	Если Не ПараллельнаяЗагрузкаЗаказов Тогда
		XML_Log_Общий.Save(ИмяФайлаXMLЛога);
		XML_Log_Общий.Save(ИмяФайлаXMLЛогаКопия);
	КонецЕсли;
	
	////////////////////////////////////////////////////
	//ЗАПИСЬ В XML-ЛОГ ОБМЕНА, завершающая (конец)
	////////////////////////////////////////////////////
	
КонецПроцедуры 

#КонецОбласти   

#Область ЗагрузкаДанных

Процедура ЗагрузитьДокументы(ИмяФайлаЗагрузки)
	
	Если Не ЗначениеЗаполнено(ИмяФайлаЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайлаЗагрузки = КаталогДанных + "chicago\" + ИмяФайлаЗагрузки + ".xml";
	Файл = Новый Файл(ПолноеИмяФайлаЗагрузки);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	XML_ДокументДляЗагрузки = Новый COMОбъект(ПолучитьТипXMLБибилиотеки());
	XML_ДокументДляЗагрузки.Load(ПолноеИмяФайлаЗагрузки);
	
	//11.07.2022 TODO1cbit Прохоренко В.В. - можно без Попытки?
	Попытка
		group = XML_ДокументДляЗагрузки.selectSingleNode("documents");
	Исключение
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаОбъектаЗагрузки Из ОбъектыОбмена Цикл
		
		Если Не СтрокаОбъектаЗагрузки.Включен//выключен на уровне макета-настройки
			ИЛИ Не СтрокаОбъектаЗагрузки.Отметка//не выбран пользователем для загрузки
			ИЛИ СтрокаОбъектаЗагрузки.ТипОбъектов <> "Д" Тогда//не является документом (грузим только документы)
			
			Продолжить;
			
		КонецЕсли;
		
		//14.07.2022 TODO1cbit Прохоренко В.В. - кажется тут не хвататет проверки на тип загружаемого файла
		//получается для каждого файла будут выполняться процедуры написанные для всех документов (если на них галки в настройках поставили)
		
		//11.07.2022 TODO1cbit Прохоренко В.В. - зачем это тут?
		//XMLСекция = СтрокаОбъектаЗагрузки.XMLСекция;
		//
		//мКолвоОбъектов = 0;//11.07.2022 TODO1cbit Прохоренко В.В. - это была глобальная переменная. Зачем она нужна и что с ней теперь делать?
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Загрузка данных ""%1"".....'"), СтрокаОбъектаЗагрузки.Представление);
		СообщитьПодробно(ТекстСообщения, 1, 1, 1);
		
		Выполнить(СтрокаОбъектаЗагрузки.Процедура + "(XML_ДокументДляЗагрузки, group, СтрокаОбъектаЗагрузки.ВидЗначения)");
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Загрузка данных ""%1"" завершена.....'"), СтрокаОбъектаЗагрузки.Представление);
		СообщитьПодробно(ТекстСообщения, 1, 1, 1);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДокОплаты(XML_ДокументДляЗагрузки, group, ВидЗначения)

КонецПроцедуры	
	
Процедура ЗагрузитьКомментарийПДЗ(XML_ДокументДляЗагрузки, group, ВидЗначения)

КонецПроцедуры	
	
Процедура ЗагрузитьИнформациюПКО(XML_ДокументДляЗагрузки, group, ВидЗначения)

КонецПроцедуры	
	
#Область ЗаказКлиента

Процедура ЗагрузитьДокЗаказы(XML_ДокументДляЗагрузки, group, ВидЗначения)
	
	//<preorders> <!--предзаказ-->
	//	<preorder>
	//		<innercode/> 				<!--номер документа в Чикаго-->
	//		<outercode/>				<!--номер документа в УС-->
	//		<innerparentcode/>			<!--номер документа-основания в Чикаго-->
	//		<outerparentcode/>			<!--номер документа-основания-->
	//		<innercodefirstversion/>	<!--номер первой версии документа в Чикаго-->
	//		
	//		<date/>						<!--дата создания документа (ГГГГ-ММ-ДД)-->
	//		<docno/>					<!--номер документа (nchar (50))-->
	//		<printdocnum/>				<!--номер документа в Чикаго для отображения-->
	//		<prndocnum/>				<!--печатный номер документа-->
	//		
	//		<creatorcode/>				<!--код автора документа - employees-->
	//		<deleted/>					<!--признак того, что документ был удален-->
	//		
	//		<firmcode/>					<!--код фирмы - firms-->
	//		<routecode/>				<!--маршрут сбора заказа - routes-->
	//		<employeecode/>				<!--код сотрудника, работавшего на маршруте - employees-->
	//		<buypointcode/>				<!--код торговой точки - buypoints-->
	//		<comment/>					<!--коментарий-->
	//		
	//		<buyercode/>				<!--код покупателя - buyers-->
	//		<counteragentcode/>			<!--код контрагента - counteragents-->
	//		
	//		<deliveryroutecode/>		<!--маршрут доставки заказа - routes-->
	//		<deliverydate/>				<!--дата доставки заказа (ГГГГ-ММ-ДД)-->
	//		<deliverytimefrom/>			<!--время доставки заказа "с" (ЧЧ:ММ)-->
	//		<deliverytimetill/>			<!--время доставки заказа "по" (ЧЧ:ММ)-->
	//		
	//		<currencycode/>				<!--код валюты документа - currencies-->				
	//		<bw/>						<!--черная/белая 1=черная, 0=белая-->
	//		<paytypecode/>				<!--1-Оплата при отгрузке,2-Оплата с отсрочкой платежа,3-Предоплата-->
	//		<discountRate/>				<!--процент скидки на документ-->
	//		<usevatrate/>				<!--признак того, что документ учитывает ставку НДС-->
	//		<includevat/>				<!--признак того, что НДС включается в сумму-->
	//		
	//		<pdadocnum/>				<!--печатный номер документа в МТ-->
	//		<crdate/>					<!--дата создания документа-->
	//		<pdaroutecode/>				<!--код маршрута (только выгрузка из Чикаго)-->
	//		
	//		<body> <!--тело документа-->
	//			<item> <!--строка документа-->
	//				<SKUcode/>			<!--код товара - SKUs-->
	//				
	//				<unitcode/>			<!--код единицы измерения - units-->
	//				<unitfactor/>		<!--коэфициент пересчета единицы измерения в базовую (15, 6)-->
	//				<quantity/>			<!--количество в указанной единице измерения (15, 6)-->
	//				
	//				<priceDiscount/>	<!--цена без скидки (15, 4)-->
	//				<price/>			<!--цена (15, 4)-->
	//				<pricetypecode/>	<!--тип цены для покупателя-->
	//				<discountRate/>		<!--процент скидки-->
	//				<discountAmount/>	<!--сумма скидки (15, 4)-->
	//				<amount/>			<!--сумма (15, 4)-->
	//				
	//				<VATRate/>			<!--процент ставки НДС-->
	//				<VATAmount/>		<!--сумма НДС (15, 4)-->
	//			</item>
	//		</body>
	//	</preorder>
	//</preorders>
	
	//11.07.2022 TODO1cbit Прохоренко В.В. - можно сделать без Попытки?
	Попытка
		preorders = group.selectSingleNode("preorders").childNodes();
	Исключение
		ВывестиВXMLЛог(,,"preorders; Нет данных для загрузки",,,"Audit_Reason_NoDataForObject");
		Возврат;
	КонецПопытки;
         		
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (начало)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////
	
	//ЕстьВыборМТ = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("синВыбранТоварМТ", Документы.ЗаказКлиента.ПустаяСсылка().Метаданные(), "Товары");
	//ЕстьКодыСтрокБюджета = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("КодыСтрокБюджета", Документы.ЗаказКлиента.ПустаяСсылка().Метаданные(), "синТоварыПервичные") 
	//						И ОбщегоНазначения.ЕстьРеквизитДокумента("синКодыСтрокБюджета", Документы.ЗаказКлиента.ПустаяСсылка().Метаданные());
	
	//ЕстьсинЗагруженИзМТ = ОбщегоНазначения.ЕстьРеквизитДокумента("синЗагруженИзМТ", Документы.ЗаказКлиента.ПустаяСсылка().Метаданные());
	
	
	//ИспользоватьОкнаДоставки = Не Метаданные.РегистрыСведений.Найти("синСтандартныеОкнаДоставкиДоКлиента") = Неопределено;

	
	//(Ирина Дроздова) - 16.01.2015, свойство менеджера
	//лМенеджер = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	//лМаршрут = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	//лВариантОплаты = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	
	
	
	//11.07.2022 TODO1cbit Прохоренко В.В. - 
	//синВыбранТоварМТ - означает, что пользователь выбрал конкретную товарную позицию и её не нужно прогонять через алгоритмы автоматической замены
	ЕстьВыборМТ = Ложь;
	
	//КодыСтрокБюджета - используется для работы с Мотивационными схемами для предоставления скидок
	ЕстьКодыСтрокБюджета = Ложь;
	
	ЕстьсинЗагруженИзМТ = Ложь;//11.07.2022 TODO1cbit Прохоренко В.В. - что это не понятно. В УПП по коду не встречается. Вероятно это признак указывающий на источник из которого был загружен заказ клиента
	//Правда не понятно зачем если есть реквизит в котором указан конкретный источник - бг_ИсточникЗаказа
	
	ИспользоватьОкнаДоставки = Ложь;
	
	//11.07.2022 TODO1cbit Прохоренко В.В. - В УПП у заказа клиента был ряд свойств в которых сохранялись менеджер, маршрут, номер заказа и вариант оплаты
	//Надо подумать что с этими данными у нас в ЕРП
	//лМенеджер = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	//лМаршрут = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	//лВариантОплаты = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	//11.07.2022 TODO1cbit Прохоренко В.В. - 
	
	
	
	
	//11.07.2022 TODO1cbit Прохоренко В.В. - 
	//При копировании заказа клиента нужно подумать над очисткой различных служебных свойств заказа свойственных лишь конкретному загруженному документу и дублирование которых в копии заказа будет являться ошибочным
	//В подписке на событие
	//11.07.2022 TODO1cbit Прохоренко В.В. - 
	
	
	
	
	
	////////////////////////////////////////////////////
	//ПРЕДВАРИТЕЛЬНАЯ ПОДГОТОВКА (конец)
	////////////////////////////////////////////////////
	//то, что лучше вынести из цикла в целях оптимизации
	////////////////////////////////////////////////////

	//11.07.2022 TODO1cbit Прохоренко В.В. - нужно добавить реквизит указывающий нужно ли проводить документ (или только заказ?)
	//Раньше он был вынесен в настройку на форме
	
	Для ИндексТекущегоДокумента = 0 По preorders.Length() - 1 Цикл
		
		preorder = preorders.Item(ИндексТекущегоДокумента);
		
		СписокОшибокЗагруженногоДокумента = Новый СписокЗначений;
		
		#Область ФильтрующиеУсловия
		
		КодДокументаВнешний_Текущий	= ПолучитьРеквизит(preorder, "innercode");
		КодДокументаВнешний_Исходный = ПолучитьРеквизит(preorder, "innercodefirstversion");
		КодДокументаВнутренний = ПолучитьРеквизит(preorder, "outercode");
		НомерДокументаИзЧикаго = ПолучитьРеквизит(preorder, "docno");
		
		ПечатныйНомерДокументаМТ = ПолучитьРеквизит(preorder, "pdadocnum");
		
		ДатаСозданияДокумента = ПолучитьРеквизит(preorder, "crdate");
		КодМаршрута = ПолучитьРеквизит(preorder, "pdaroutecode");
		
		ДатаДокумента = ДатаИзСтроки(ПолучитьРеквизит(preorder, "date"));
		
		Если Найти(ДатаСозданияДокумента, "-") > 0 Тогда
			ДатаСозданияДокумента = ДатаИзСтроки(ДатаСозданияДокумента);
		КонецЕсли;
		
		Если КодДокументаВнешний_Текущий = ""
			И ПечатныйНомерДокументаМТ = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДатаДокумента < НачалоДня(Период.ДатаНачала)
			ИЛИ ДатаДокумента > КонецДня(Период.ДатаОкончания) Тогда
			// пропускаем документы не текущего дня
			ЗаписатьСостояниеОбъекта(XML_ДокументДляЗагрузки, "", КодДокументаВнутренний, КодДокументаВнешний_Текущий, КодМаршрута, ДатаСозданияДокумента, ПечатныйНомерДокументаМТ);
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ не загружен, чикаго номер %1, дата документа %2 не попадает в период загрузки'"), 
													НомерДокументаИзЧикаго,
													ДатаДокумента);
			СообщитьПодробно(ТекстСообщения, 2, 0, 2, "Ошибка");
			
			ВывестиВXMLЛог(,,"preorders; " + КодДокументаВнешний_Текущий + " не попадает в период загрузки, документ пропущен", ,"Audit_State_Fail",,);
			Продолжить;
		КонецЕсли;
		
		НадоЗагружатьОбъект = Не ЗначениеЗаполнено(КодДокументаВнутренний);
		Если НадоЗагружатьОбъект Тогда НадоЗагружатьОбъект = НадоЗагружатьОбъект(КодДокументаВнутренний, КодДокументаВнешний_Текущий); КонецЕсли;
		Если НадоЗагружатьОбъект Тогда НадоЗагружатьОбъект = НадоЗагружатьОбъект(КодДокументаВнутренний, КодДокументаВнешний_Исходный); КонецЕсли;
		Если НадоЗагружатьОбъект Тогда НадоЗагружатьОбъект = НадоЗагружатьОбъектИзКПК(КодМаршрута, ДатаСозданияДокумента, ПечатныйНомерДокументаМТ); КонецЕсли;
		                                                                                
		НадоУдалить = ПолучитьРеквизитБулевый(preorder, "deleted");
			
		Если Не НадоЗагружатьОбъект ИЛИ НадоУдалить Тогда
			ЗаписатьСостояниеОбъекта(XML_ДокументДляЗагрузки, "", КодДокументаВнутренний, КодДокументаВнешний_Текущий, КодМаршрута, ДатаСозданияДокумента, ПечатныйНомерДокументаМТ);
			Продолжить;
		КонецЕсли;
				
		#КонецОбласти
		
		#Область ЗаполнениеШапкиДокумента
		
		ДанныеЗаполнения = ЗаказКлиента_ДанныеИзФайла(preorder, НомерДокументаИзЧикаго);
		
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ЗаказКлиента_ЗаполнитьШапку(ДокументОбъект, ДанныеЗаполнения);
		
		//14.07.2022 TODO1cbit Прохоренко В.В. - в УПП загружались свойства. Решить что с ними делать в ЕРП
		//Свойство менеджер для заказа
		//Свойство номер из Чикаго
		//Свойство маршрут для заказа
		//Свойство Вариант оплаты для заказа
		//Пытаться проводить заказ
		
		#КонецОбласти
		
		#Область ЗаполнениеТабличнойЧасти
		
		Попытка
			items = preorder.selectSingleNode("body").selectNodes("item");
		Исключение
			СообщитьПодробно(НСтр("ru = 'ОШИБКА чтения табличной части заказа'"), 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"preorders; "+КодДокументаВнешний_Текущий+" ОШИБКА чтения табличной части заказа", ,"Audit_State_Fail","Audit_Reason_Error",);
			Продолжить;
		КонецПопытки;
		
		ЗаказКлиента_ЗаполнитьТЧТовары(items, ДокументОбъект);
		
		#КонецОбласти
		
		//////////////////////////////////////////////////////////////////////////
		//СОХРАНЕНИЕ, ПРОВЕДЕНИЕ И РЕГИСТРАЦИЯ ДОКУМЕНТА
		///////////////////////////////////////////////////////////////////////////
		
		#Область ОбработчикиЗаполненияДокумента

		ЗаказКлиента_ОбработчикиЗаполнения(ДокументОбъект);
		
		#КонецОбласти
		
		
		ЗагруженОбъект = Ложь;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЗагруженОбъект = Истина;
		Исключение
	
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно записать документ %1; %2'"), 
														ДокументОбъект,
														ОписаниеОшибки());
			СообщитьПодробно(ТекстСообщения, 2, 0, 2, "Ошибка");
			ВывестиВXMLЛог(,,"preorders; Не удалось записать новый документ "+КодДокументаВнешний_Текущий, ,"Audit_State_Fail");
			Если Найти(ОписаниеОшибки(),"время ожидания запроса на блокировку")<>0 Тогда	
				СтатусОбработкиТекущегоДокумента = "false";					
			КонецЕсли; 

		КонецПопытки;
		
		ЗаписатьСостояниеОбъекта(XML_ДокументДляЗагрузки, ДокументОбъект.Ссылка, КодДокументаВнутренний, 
						КодДокументаВнешний_Исходный, КодМаршрута, ДатаСозданияДокумента, ПечатныйНомерДокументаМТ);		 			
		
		Если ЗагруженОбъект Тогда
			
			ДанныеДляЗаписи = Новый СписокЗначений();
			ДанныеДляЗаписи.Добавить("" + ДокументОбъект,							"Текст");
			ДанныеДляЗаписи.Добавить("Создан",										"Параметр1");
			ДанныеДляЗаписи.Добавить(XML_ВернутьВремя(),							"Параметр2");
			ДанныеДляЗаписи.Добавить(ДокументОбъект.Организация,					"Реквизит1");
			ДанныеДляЗаписи.Добавить(ДанныеЗаполнения.Ответственный_ФизическоеЛицо,	"Реквизит2");
			ДанныеДляЗаписи.Добавить(ДокументОбъект.Контрагент,						"Реквизит3");
			ДанныеДляЗаписи.Добавить(ДокументОбъект.Договор,						"Реквизит4");
			
			ДобавитьВОтчет(ДанныеДляЗаписи, "Действие");
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Записан документ %1'"), 
														ДокументОбъект);
			СообщитьПодробно(ТекстСообщения, 2, 0, 1);
			
			НетОшибокЗагрузки = СписокОшибокЗагруженногоДокумента.Количество()=0;
			ВывестиВXMLЛог(,,"preorders; Записан документ "+?(НетОшибокЗагрузки,"",", при загрузке возникли ошибки, см. лог"), 
								ЗначениеВСтрокуВнутр_Модифицированное(ДокументОбъект.Ссылка));
			ВывестиВЛогОшибкиЗагруженногоДокумента(СписокОшибокЗагруженногоДокумента, "preorders", ЗначениеВСтрокуВнутр_Модифицированное(ДокументОбъект.Ссылка));
		
		КонецЕсли;

		Если ЗагруженОбъект Тогда

			Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение									
					ТекстОшибки = НСтр("ru='Невозможно провести документ %1'"); 
					ТекстОшибки = СтрШаблон(ТекстОшибки, ОписаниеОшибки());
					ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("бг_ЗагрузкаДанныхИзЧикаго", 
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ТекстОшибки);	
				КонецПопытки;
			
			КонецЕсли;

		КонецЕсли;

		Если ДокументОбъект.Проведен Тогда

			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
				ДокументОбъект.Ссылка, 
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктуализироватьОбеспечениеЗаказовКлиентов,
				);									
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ОбработатьОбъект(
				ДокументОбъект.Ссылка,
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктуализироватьОбеспечениеЗаказовКлиентов
				);

		КонецЕсли;
		
		//13.07.2022 TODO1cbit Прохоренко В.В. - вероятно стоит сделать пораньше. Т.к. какой смысл перезаполнять и записывать документ, чтобы потом пометить его на удаление?
		Если НадоУдалить Тогда 
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Помечен на удаление документ %1'"), 
														ДокументОбъект);
			СообщитьПодробно(ТекстСообщения, 2, 0, 1);
			ВывестиВXMLЛог(,,"preorders; Помечен на удаление документ", ЗначениеВСтрокуВнутр_Модифицированное(ДокументОбъект.Ссылка));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаказКлиента_ЗаполнитьШапку(ДокументОбъект, ДанныеЗаполнения)

	ДокументОбъект.бг_ИсточникЗаказа	= Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго;
	//ДокументОбъект.СпособДоставки		= Перечисления.СпособыДоставки.ДоКлиента;
	ДокументОбъект.Дата					= ТекущаяДатаСеанса();
	ДокументОбъект.ДатаСогласования 	= ТекущаяДатаСеанса();
	ДокументОбъект.Контрагент			= ДанныеЗаполнения.Контрагент;
	ДокументОбъект.Партнер				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Контрагент, "Партнер");

	ЭтоКлиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Партнер, "Клиент");
	Если ЭтоКлиент Тогда
		ДокументОбъект.Заполнить(Новый Структура("Партнер", ДокументОбъект.Партнер));
	Иначе
		ДокументОбъект.Заполнить(Новый Структура());
	КонецЕсли;

	ДокументОбъект.Организация			= ДанныеЗаполнения.Организация;
	ДокументОбъект.Склад				= ДанныеЗаполнения.Склад;
	ДокументОбъект.ДатаПоДаннымКлиента	= ДанныеЗаполнения.ДатаПоДаннымКлиента;
	ДокументОбъект.НомерПоДаннымКлиента = ДанныеЗаполнения.НомерПоДаннымКлиента;
    ДокументОбъект.бг_КодыСтрокБюджета 	= СтрСоединить(ДанныеЗаполнения.бг_КодыСтрокБюджета, ";");
    ДокументОбъект.бг_РучноеСогласованиеФК = ДанныеЗаполнения.РучноеСогласованиеФК;

	Если ДанныеЗаполнения.Свойство("Магазин")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Магазин) Тогда
		ДокументОбъект.бг_Магазин = ДанныеЗаполнения.Магазин;
		ДокументОбъект.бг_ВариантОплаты = Перечисления.бг_ВариантыОплаты.Наличные;
	КонецЕсли;

	ДокументОбъект.ДатаОтгрузки = ДанныеЗаполнения.ДатаДоставки;
   
	Менеджер 							= ОтветственныйПоФизЛицу(ДанныеЗаполнения.Ответственный_ФизическоеЛицо);
	ДокументОбъект.Подразделение		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Менеджер, "Подразделение");
	ДокументОбъект.Менеджер				= Менеджер;
	ДокументОбъект.бг_ПунктНазначения	= ДанныеЗаполнения.ТорговаяТочка;
	
	Если ДанныеЗаполнения.Свойство("АльтернативныйПунктНазначения")
		И ЗначениеЗаполнено(ДанныеЗаполнения.АльтернативныйПунктНазначения) Тогда
		
		ДокументОбъект.бг_АльтернативныйПунктНазначения = ДанныеЗаполнения.АльтернативныйПунктНазначения;
		
	КонецЕсли;
	
	//12.07.2022 TODO1cbit Прохоренко В.В. - нужно заполнение этих полей в заказе? Раньше какой-то код под это был
	//бг_РозничныйПокупатель в УПП синПокупательРозницы
	//бг_ДоговорРозничногоПокупатея в УПП синДоговорРозницы
	
	Если ДанныеЗаполнения.ДоставкаС = "" И ДанныеЗаполнения.ДоставкаПо = "" Тогда
		ДокументОбъект.Комментарий		= ДанныеЗаполнения.КомментарийЗаказа;
	Иначе
		ДокументОбъект.Комментарий		= ДанныеЗаполнения.КомментарийЗаказа + " Доставка" + ?(ДанныеЗаполнения.ДоставкаС = "", "", " с " + ДанныеЗаполнения.ДоставкаС)+ ?(ДанныеЗаполнения.ДоставкаПо = "", "", " до " + ДанныеЗаполнения.ДоставкаПо);
		ДокументОбъект.ВремяДоставкиС   = ВремяИзСтроки(ДанныеЗаполнения.ДоставкаС);
		ДокументОбъект.ВремяДоставкиПо	= ВремяИзСтроки(ДанныеЗаполнения.ДоставкаПо);
		//18.07.2022 TODO1cbit Прохоренко В.В. - эти поля из файла считались в строковом виде. Надо их преобразовать в Дату. Пока нет примера файла, чтобы понимать формат
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаказКлиента_ЗаполнитьТЧТовары(items, ДокументОбъект)

	Для ИндексСтроки = 0 По items.Length() - 1 Цикл
		item = items.Item(ИндексСтроки);
		
		//В SKUcode может быть идентификатор упаковки или номенклатуры
		ТоварнаяПозиция = НайтиТоварнуюПозицию(ПолучитьРеквизит(item, "SKUcode"));
		
		КоличествоУпаковок = ПолучитьРеквизитЧислом(item, "quantity");
		Если КоличествоУпаковок <= 0 тогда
			Продолжить;//13.07.2022 TODO1cbit Прохоренко В.В. - зачем эта заглушка? такое бывает?
		КонецЕсли;
		//ЕдиницаИзмеренияПоКлассификатору = ЗначениеИзСтрокиВнутр_Модифицированное(ПолучитьРеквизит(item, "unitcode"), "УпаковкиЕдиницыИзмерения");
		КоэффициентПересчётаВБазовую = ПолучитьРеквизитЧислом(item, "unitfactor");
		Количество = КоэффициентПересчётаВБазовую * КоличествоУпаковок;//количество в базовой единице измерения
		
		СтрокаТЧТовары = ДокументОбъект.Товары.Добавить();
		СтрокаТЧТовары.Номенклатура			= ТоварнаяПозиция.Номенклатура;
		СтрокаТЧТовары.бг_УпаковкаПаллета	= УпаковкаПаллетаПоКоробке(ТоварнаяПозиция.Упаковка);
		СтрокаТЧТовары.Количество			= Количество;
		СтрокаТЧТовары.КоличествоУпаковок	= Количество;
		
		СтрокаТЧТовары.Склад				= ДокументОбъект.Склад;
		СтрокаТЧТовары.ВариантОбеспечения	= Перечисления.ВариантыОбеспечения.КОбеспечению;
		СтрокаТЧТовары.ДатаОтгрузки 		= ДокументОбъект.ДатаОтгрузки;
		
		ЗаказКлиента_ЗаполнитьДополнительныеСвойстваСтроки(СтрокаТЧТовары, item);//13.07.2022 TODO1cbit Прохоренко В.В. - к доп.свойствам надо вернутся позднее
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаказКлиента_ОбработчикиЗаполнения(ДокументОбъект)

	//Заполним соглашение и договор по виду номенклатуры
	ВидНоменклатуры = бг_ЗаказыКлиентов.ВидНоменклатурыЗаказаКлиента(ДокументОбъект);
	Если ВидНоменклатуры = Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось определить вид номенклатуры для заполнения соглашения и договора %1 '"), 
													ДокументОбъект);
		СообщитьПодробно(ТекстСообщения, 2, 0, 1);
	Иначе
		ДанныеЗаполнения = Новый Структура("Организация, Контрагент");
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДокументОбъект);
		ДанныеЗаполнения.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		
		бг_ЗаказыКлиентов.ЗаполнитьСоглашениеДоговорУсловияПродаж(ДокументОбъект, ДанныеЗаполнения);
		ДокументОбъект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетов(
											Истина,,
											ДокументОбъект.Соглашение,
											ДокументОбъект.Договор); 	
	КонецЕсли;
	
	//Заполним параметры доставки
	Если ЗначениеЗаполнено(ДокументОбъект.бг_ПунктНазначения) Тогда
		
		РеквизитыПунктаНазначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.бг_ПунктНазначения, "Адрес, АдресЗначенияПолей, Клиент");
		//ДокументОбъект.АдресДоставки = РеквизитыПунктаНазначения.Адрес;
		//ДокументОбъект.АдресДоставкиЗначенияПолей = РеквизитыПунктаНазначения.АдресЗначенияПолей;
		ДокументОбъект.Грузополучатель = РеквизитыПунктаНазначения.Клиент;
		
		бг_УчетАлкоголя.ЗаполнитьЛицензиюВДокументе(ДокументОбъект);
		
	КонецЕсли;
	
	бг_ЗаказыКлиентов.ОбработатьТЧТовары(ДокументОбъект);
	бг_ЗаказыКлиентов.ПересчитатьКоличествоКоробокИПаллетВТЧ(ДокументОбъект.Товары);

КонецПроцедуры

Функция ЗаказКлиента_СформироватьКомментарий(preorder, ТорговаяТочка, НомерДокументаИзЧикаго)

	КомментарийВходящий = СокрЛП(ПолучитьРеквизит(preorder, "comment"));
	
	КомментарийЗаказа = "Чикаго №" + НомерДокументаИзЧикаго;
	Если ЗначениеЗаполнено(КомментарийВходящий) Тогда
		КомментарийЗаказа = КомментарийЗаказа + "; " + КомментарийВходящий;
	КонецЕсли;
	
	Возврат КомментарийЗаказа;

КонецФункции

Функция ЗаказКлиента_ДанныеИзФайла(preorder, НомерДокументаИзЧикаго)

	ДанныеЗаполнения = Новый Структура();
	
	ДанныеЗаполнения.Вставить("Контрагент",						ЗначениеИзСтрокиВнутр_Модифицированное(ПолучитьРеквизит(preorder, "buyercode"), "Контрагенты"));
	ДанныеЗаполнения.Вставить("ТорговаяТочка",					ЗначениеИзСтрокиВнутр_Модифицированное(ПолучитьРеквизит(preorder, "buypointcode"), "битПунктыНазначения"));
	ДанныеЗаполнения.Вставить("Организация",					ЗначениеИзСтрокиВнутр_Модифицированное(ПолучитьРеквизит(preorder, "firmcode"), "Организации"));
	ДанныеЗаполнения.Вставить("Ответственный_ФизическоеЛицо",	ЗначениеИзСтрокиВнутр_Модифицированное(ПолучитьРеквизит(preorder, "employeecode"), "ФизическиеЛица"));
	ДанныеЗаполнения.Вставить("Склад",							ЗначениеИзСтрокиВнутр_Модифицированное(ПолучитьРеквизит(preorder, "storecode"), "Склады"));
	ДанныеЗаполнения.Вставить("КомментарийЗаказа",				ЗаказКлиента_СформироватьКомментарий(preorder, ДанныеЗаполнения.ТорговаяТочка, НомерДокументаИзЧикаго));
	ДанныеЗаполнения.Вставить("ДатаДоставки",					ДатаИзСтроки(ПолучитьРеквизит(preorder, "deliverydate")));
	ДанныеЗаполнения.Вставить("ДатаДокумента",					ДатаИзСтроки(ПолучитьРеквизит(preorder, "date")));
	ДанныеЗаполнения.Вставить("ДатаПоДаннымКлиента",			ДатаИзСтроки(ПолучитьРеквизит(preorder, "date")));
	ДанныеЗаполнения.Вставить("НомерПоДаннымКлиента",			НомерДокументаИзЧикаго);
	
	ЗаказКлиента_ДополнительныеСвойстваЗаказа(ДанныеЗаполнения, preorder);
    ЗаполнитьКодыСтрокБюджетаИзФайла(ДанныеЗаполнения, preorder);
	
	Если ПолучитьРеквизит(preorder, "firmcode") = "ББЗ" Тогда		
		ЗаполнитьРеквизитыПриПродажеЧерезРозничногоПокупателя(ДанныеЗаполнения);
	КонецЕсли;

	Если ПолучитьРеквизит(preorder, "storecode") = "Хорека" Тогда
		ЗаполнитьОсновнойСкладОтгрузки(ДанныеЗаполнения);
	КонецЕсли;

	Возврат ДанныеЗаполнения;

КонецФункции

Процедура ЗаказКлиента_ДополнительныеСвойстваЗаказа(ДанныеЗаполнения, preorder)

	ДанныеЗаполнения.Вставить("РучноеСогласованиеФК", Ложь);
	ДанныеЗаполнения.Вставить("ДоставкаС", "");
	ДанныеЗаполнения.Вставить("ДоставкаПо", "");
	
	//ВидРасчетов = "";
	//лДоксинКодыСтрокБюджета = "";
	ДанныеЗаполнения.Вставить("АльтернативныйАдресСтарый", "");
	ДанныеЗаполнения.Вставить("АльтернативныйАдресНовый", "");
	ДанныеЗаполнения.Вставить("АдресПрочее", "");
	ДанныеЗаполнения.Вставить("Широта", "");
	ДанныеЗаполнения.Вставить("Долгота", "");
	
	//12.07.2022 TODO1cbit Прохоренко В.В. - Тут читаются различные доп.свойства, если они присутствуют в сообщении
	//Нужно узнать что означает каждое из этих свойств
	Попытка
		hattributes	= preorder.selectSingleNode("hattributes").selectNodes("hattribute");
		
		Для лСч = 0 По 9 Цикл
			hattribute = hattributes.Item(лСч);
			Если ПолучитьРеквизит(hattribute, "attributecode") = "Вид расчетов" Тогда
				ВидРасчетов = ПолучитьРеквизит(hattribute, "value");
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "Ручное согласование ФК" Тогда
				ДанныеЗаполнения.РучноеСогласованиеФК = (ПолучитьРеквизит(hattribute, "value") = "1");
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "ДоставкаС" Тогда
				ДанныеЗаполнения.ДоставкаС = ПолучитьРеквизит(hattribute, "value");
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "ДоставкаДо" Тогда
				ДанныеЗаполнения.ДоставкаПо = ПолучитьРеквизит(hattribute, "value");
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "Alt_Address_Order" Тогда	
				ДанныеЗаполнения.АльтернативныйАдресСтарый = ПолучитьРеквизит(hattribute, "value");	
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "Alt_Address_New" Тогда	
				ДанныеЗаполнения.АльтернативныйАдресНовый = ПолучитьРеквизит(hattribute, "value");	
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "Alt_Address_Other" Тогда	
				ДанныеЗаполнения.АдресПрочее = ПолучитьРеквизит(hattribute, "value");	
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "Alt_Address_Lati" Тогда	
				ДанныеЗаполнения.Широта = ПолучитьРеквизит(hattribute, "value");	
				
			ИначеЕсли ПолучитьРеквизит(hattribute, "attributecode") = "Alt_Address_Long" Тогда	
				ДанныеЗаполнения.Долгота = ПолучитьРеквизит(hattribute, "value");	
				
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	//НайтиСоздатьАльтернативныйПунктНазначения(ДанныеЗаполнения);

КонецПроцедуры

Процедура ЗаполнитьКодыСтрокБюджетаИзФайла(ДанныеЗаполнения, preorder)

	ДанныеЗаполнения.Вставить("бг_КодыСтрокБюджета", "");
	Попытка
		
		items = preorder.selectSingleNode("body").selectNodes("item");
		СвойстваСтрокиЗаказа = Новый Массив;
		
		Для ИндексСтроки = 0 По items.Length() - 1 Цикл
			
			item = items.Item(ИндексСтроки);
			
			Попытка
				rattributes	= item.selectSingleNode("rattributes").selectNodes("rattribute");
				
				Для ИндексТекущегоДопАттрибута = 0 По rattributes.Length() - 1 Цикл
					rattribute = rattributes.Item(ИндексТекущегоДопАттрибута);
					ДопАттрибут = ПолучитьРеквизит(rattribute, "name");
					Если ДопАттрибут = "Идентификатор акции" Тогда	
						СвойстваСтрокиЗаказа.Добавить(ПолучитьРеквизит(rattribute, "value"));
					КонецЕсли;
				КонецЦикла;
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СвойстваСтрокиЗаказа);
		ДанныеЗаполнения.бг_КодыСтрокБюджета = СвойстваСтрокиЗаказа;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПриПродажеЧерезРозничногоПокупателя(ДанныеЗаполнения)
	
	ДанныеЗаполнения.Организация	= бг_КонстантыПовтИсп.ЗначениеКонстанты("ОрганизацияПриПродажеРозничномуПокупателю");
	ДанныеЗаполнения.Вставить(
		"Магазин",
		 бг_КонстантыПовтИсп.ЗначениеКонстанты("МагазинДляОтгрузкиПриПродажеРозничномуПокупателю"));
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Контрагент, "бг_РозничныйПокупатель") Тогда		
		ЗаполнитьПризнакРозничногоПокупателяДляКонтрагента(ДанныеЗаполнения.Контрагент);		
	Конецесли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакРозничногоПокупателяДляКонтрагента(Контрагент)

	КонтрагентДляИзменения = Контрагент.ПолучитьОбъект();
	КонтрагентДляИзменения.бг_РозничныйПокупатель = Истина;
	КонтрагентДляИзменения.Записать();	
	
КонецПроцедуры

Процедура ЗаполнитьОсновнойСкладОтгрузки(ДанныеЗаполнения)
	
	ДанныеЗаполнения.Склад = бг_КонстантыПовтИсп.ЗначениеКонстанты("ОсновнойСкладОтгрузки", Пользователь);
	
КонецПроцедуры

Процедура НайтиСоздатьАльтернативныйПунктНазначения(ДанныеЗаполнения)

	Если ЗначениеЗаполнено(ДанныеЗаполнения.АльтернативныйАдресСтарый) Тогда

		СтруктураПоиска = Новый Структура("Контрагент, АльтернативныйАдрес", 
								ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.АльтернативныйАдресСтарый);
		
		АльтернативныйАдрес = АльтернативныйПунктНазначения(СтруктураПоиска);
		
		Если ЗначениеЗаполнено(АльтернативныйАдрес) Тогда
			ДанныеЗаполнения.Вставить("АльтернативныйПунктНазначения", АльтернативныйАдрес);
		КонецЕсли;
		
	ИначеЕсли Не ПустаяСтрока(ДанныеЗаполнения.АльтернативныйАдресНовый) Тогда
		
		АльтернативныйАдрес = ДанныеЗаполнения.АльтернативныйАдресНовый + " " + ДанныеЗаполнения.АдресПрочее;
		СтруктураПоиска = Новый Структура("Контрагент, АльтернативныйАдрес", 
								ДанныеЗаполнения.Контрагент, АльтернативныйАдрес);
		
		АльтернативныйАдрес = АльтернативныйПунктНазначения(СтруктураПоиска);
		
		Если НЕ ЗначениеЗаполнено(АльтернативныйАдрес) Тогда
			
			ПунктНазначенияОбъект = Справочники.битПунктыНазначения.СоздатьЭлемент();
			ПунктНазначенияОбъект.Наименование = АльтернативныйАдрес;
			ПунктНазначенияОбъект.НаименованиеПолное = Справочники.битПунктыНазначения.ПолноеНаименованиеПунктаНазначенияПоДаннымКонтрагента(ДанныеЗаполнения.Контрагент);
			ПунктНазначенияОбъект.Клиент = ДанныеЗаполнения.Контрагент;
			ПунктНазначенияОбъект.ЭтоАльтернативныйАдрес = Истина;
			ПунктНазначенияОбъект.Долгота = Число(ДанныеЗаполнения.Долгота + " ");
			ПунктНазначенияОбъект.Широта  = Число(ДанныеЗаполнения.Широта  + " ");
			
			ПунктНазначенияОбъект.Записать();
			
			АльтернативныйАдрес = ПунктНазначенияОбъект.Ссылка;
			
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("АльтернативныйПунктНазначения", АльтернативныйАдрес);
		
	КонецЕсли;
	
КонецПроцедуры

Функция АльтернативныйПунктНазначения(СтруктураПоиска)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	битПунктыНазначения.Ссылка КАК Ссылка,
	|	битПунктыНазначения.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.битПунктыНазначения КАК битПунктыНазначения
	|ГДЕ
	|	битПунктыНазначения.Наименование = &Наименование
	|	И битПунктыНазначения.Клиент.ГоловнойКонтрагент = &Клиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления";
	Запрос.УстановитьПараметр("Клиент",			СтруктураПоиска.Контрагент);
	Запрос.УстановитьПараметр("Наименование",	СтруктураПоиска.АльтернативныйАдрес);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.битПунктыНазначения.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;

КонецФункции

Процедура ЗаказКлиента_ЗаполнитьДополнительныеСвойстваСтроки(СтрокаТЧТовары, item)
	
	ЗафиксированныйТовар = Ложь;
	Попытка
		rattributes	= item.selectSingleNode("rattributes").selectNodes("rattribute");
		//В УПП сейчас загружаются два доп.свойства.
		//Выбран товар Д - в значении 1 означает, что нужно отгружать именно ту номенклатуру, которая указана в файле (автоподмену выполнять не нужно)
		//Идентификатор акции - содержит в себе "Коды строк бюджета" применённых к конкретной позиции и является основанием для применения скидок в 1С
		
		Для ИндексТекущегоДопАттрибута = 0 По rattributes.Length() - 1 Цикл
			rattribute = rattributes.Item(ИндексТекущегоДопАттрибута);
			ДопАттрибут = ПолучитьРеквизит(rattribute, "name");
			Если ДопАттрибут = "Выбран товар Д" Тогда
				ЗафиксированныйТовар = Не (ПолучитьРеквизитЧислом(rattribute, "value") = 0);
			КонецЕсли;	
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	СтрокаТЧТовары.бг_ЗафиксированныйТовар = ЗафиксированныйТовар;
	
КонецПроцедуры

#КонецОбласти

Функция УпаковкаПаллетаПоКоробке(УпаковкаКоробка)

	Если НЕ ЗначениеЗаполнено(УпаковкаКоробка) Тогда
		Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
	|	УпаковкиЕдиницыИзмерения.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Родитель = &УпаковкаКоробка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления";
	Запрос.УстановитьПараметр("УпаковкаКоробка", УпаковкаКоробка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	
КонецФункции

Функция НайтиТоварнуюПозицию(ИдентификаторТоварнойПозиции)
	
	ТоварнаяПозиция = Новый Структура("Номенклатура, Упаковка, Коэффициент");
	
	ТоварнаяПозиция.Упаковка = ЗначениеИзСтрокиВнутр_Модифицированное(ИдентификаторТоварнойПозиции, "УпаковкиЕдиницыИзмерения");
	Если ЗначениеЗаполнено(ТоварнаяПозиция.Упаковка) Тогда
		ТоварнаяПозиция.Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяПозиция.Упаковка, "Владелец");
	Иначе
		ТоварнаяПозиция.Номенклатура = ЗначениеИзСтрокиВнутр_Модифицированное(ИдентификаторТоварнойПозиции, "Номенклатура");
	КонецЕсли;
	
	Возврат ТоварнаяПозиция;

КонецФункции

//11.07.2022 TODO1cbit Прохоренко В.В. - 
Функция НадоЗагружатьОбъект(КодДокументаВнутренний, КодДокументаВнешний)
	
	Если Не ЗначениеЗаполнено(КодДокументаВнешний) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = РегистрыСведений.бг_чикаго_СостоянияОбъектов.Выбрать(Новый Структура("КодВнешний", КодДокументаВнешний));
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.АктивныйФилиал <> АктивныйФилиал Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Выборка.ТипОбъекта = "from chicago" Тогда
			КодДокументаВнутренний	= Выборка.КодВнутренний;
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//11.07.2022 TODO1cbit Прохоренко В.В. - 
Функция НадоЗагружатьОбъектИзКПК(КодМаршрута, ДатаСозданияДокумента, ПечатныйНомерДокументаМТ) Экспорт
	
	Если Не ЗначениеЗаполнено(ПечатныйНомерДокументаМТ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КомбинированныйКодДокумента = КодМаршрута + "/" + ДатаСозданияДокумента + "/" + ПечатныйНомерДокументаМТ;
	
	//Кажется это никогда не работало
	//В КодКПК регистра записывается КомбинированныйКодДокумента, а поиск идёт лишь по части ПечатныйНомерДокументаМТ, которая до моих модификаций содержала в себе КодМаршрута + "/" + ПечатныйНомерДокументаМТ
	Выборка = РегистрыСведений.бг_чикаго_СостоянияОбъектов.Выбрать(Новый Структура("КодКПК", ПечатныйНомерДокументаМТ));
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.АктивныйФилиал <> АктивныйФилиал Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Выборка.ТипОбъекта = "from chicago" Тогда
			Если СокрЛП(Выборка.КодКПК) = КомбинированныйКодДокумента Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
                          
Функция ОтветственныйПоФизЛицу(ФизическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Пользователи.АвторизованныйПользователь();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОтчетаЛоговоОбмена

Функция ИмяФайлаОтчета()
	
	Возврат СокрЛП(ИнфоКодДистрибьютора + "_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + ".mxl");
	
КонецФункции

Процедура ДобавитьВОтчет(ДанныеДляЗаписи = "", Секция = "Действие", ВыводитьДату = 0, ВыводитьВремя = 0)
	
	Если ДанныеДляЗаписи = "" Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьМакета = ОбластьМакетаЛогирования(Секция + "|Вертикальная");
	Если ТипЗнч(ДанныеДляЗаписи) = Тип("СписокЗначений") Тогда
		ОбластьМакета.Параметры.Текст		= ДанныеДляЗаписи.Получить(0).Значение;
		ОбластьМакета.Параметры.Параметр1	= ДанныеДляЗаписи.Получить(1).Значение;
		ОбластьМакета.Параметры.Параметр2	= ДанныеДляЗаписи.Получить(2).Значение;
		ТаблицаОтчета.Вывести(ОбластьМакета);
		
		Для НомерПараметра = 4 По ДанныеДляЗаписи.Количество() Цикл
			ОбластьМакета = ОбластьМакетаЛогирования(Секция + "|Реквизит");
			ОбластьМакета.Параметры.Реквизит	= ДанныеДляЗаписи.Получить(НомерПараметра - 1).Значение;
			ТаблицаОтчета.Присоединить(ОбластьМакета);
		КонецЦикла;
	Иначе
		ОбластьМакета.Параметры.Текст		= ДанныеДляЗаписи;
		ОбластьМакета.Параметры.Параметр1	= ?(ВыводитьДату = 0, "", XML_ВернутьДату());
		ОбластьМакета.Параметры.Параметр2	= ?(ВыводитьВремя = 0, "", XML_ВернутьВремя());
		ТаблицаОтчета.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВОтчетСтроку(Строка = "", Секция = "Информация") Экспорт
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат;
	КонецЕсли;
	
	//06.07.2022 TODO1cbit Прохоренко В.В. - этот код не добавляет в лог сообщение, если оно равно предыдущему
	//такое возможно?
	//Если Секция = "Ошибка" Тогда
	//	Если Строка = мСтрокаСообщения Тогда
	//		Возврат;
	//	КонецЕсли;
	//	мСтрокаСообщения	= Строка;
	//КонецЕсли;
	//06.07.2022 TODO1cbit Прохоренко В.В.
	
	ОбластьМакета = ОбластьМакетаЛогирования(Секция + "|Вертикальная");
	ОбластьМакета.Параметры.Текст = Строка;
	
	ТаблицаОтчета.Вывести(ОбластьМакета);
	
КонецПроцедуры

// Добавляет текст сообщения в отчёт, а так же отображает его на экране
//
// Параметры:
//  ТекcтСообщения  - Строка - сообщение для фиксации в отчёте
//  РазмерОтступа  - Число - задаёт размер отступа слева для выводимого текста (в символах табуляции)
//  ПоказыватьВремя  - Число - прибавляет к сообщению текущее время. Возможны варианты: 
//  										0 - не выводить время
//  										1 - выводить только время
//  										2 - выводить только время и дату
//  										3 - выводить только дату
//  ВыводитьВОтчёт  - Число - указывает необходимость вывода текста в отчёт. Возможны варианты: 
//  										0 - не выводить
//  										2, 3, 4 - выводить
//  Секция - Строка - имя секции макета в которую нужно вывести текст сообщения
//
Процедура СообщитьПодробно(ТекcтСообщения, РазмерОтступа, ПоказыватьВремяДату, ВыводитьВОтчёт, Секция = "Информация") Экспорт
	//14.07.2022 TODO1cbit Прохоренко В.В. - после объединения этой обработки с обработкой бг_ВыгрузкаДанныхДляЧикаго
	//ВыводитьВОтчёт нужно заменить на Булево
	//Остальные переменные тоже можно переиграть в иные значения переменных для упрощения вызова методов и сокращения обязательно задаваемых параметров
	
	Если ПоказыватьВремяДату = 1
		ИЛИ ПоказыватьВремяДату = 3 Тогда
		ТекcтСообщения = XML_ВернутьВремя() + "  " + ТекcтСообщения;
	КонецЕсли;
	
	Если ПоказыватьВремяДату = 2
		ИЛИ ПоказыватьВремяДату = 3 Тогда
		ТекcтСообщения = XML_ВернутьДату() + "  " + ТекcтСообщения;
	КонецЕсли;
	
	Для Сч = 1 По РазмерОтступа Цикл
		ТекcтСообщения = Символы.Таб + ТекcтСообщения;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(ТекcтСообщения);
	
	Если ВыводитьВОтчёт = 2
		ИЛИ ВыводитьВОтчёт = 3
		ИЛИ ВыводитьВОтчёт = 4 Тогда
		
		ДобавитьВОтчетСтроку(ТекcтСообщения, Секция);
		
	КонецЕсли;
	
КонецПроцедуры

//11.07.2022 TODO1cbit Прохоренко В.В. - 
Процедура ВывестиВЛогОшибкиЗагруженногоДокумента(пСписокОшибок, пТипОбъекта, пКодДокумента)
	
	Для Каждого ЭлСписка Из пСписокОшибок Цикл
		ВывестиВXMLЛог(,,пТипОбъекта+"; "+ЭлСписка, пКодДокумента, "Audit_State_Fail");
	КонецЦикла;
		
КонецПроцедуры

Процедура ОткрытьОтчет()

	КаталогОтчетов = КаталогДанных + "reports\";
	СоздатьКаталог(КаталогОтчетов);
	
	ПолноеИмяФайла = КаталогОтчетов + ИмяФайлаОтчета();
	
	ТаблицаОтчета = Новый ТабличныйДокумент();
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Если Файл.Существует() Тогда
		ТаблицаОтчета.Прочитать(ПолноеИмяФайла);
	КонецЕсли;

	ТаблицаОтчета.Вывести(ОбластьМакетаЛогирования("Пустая|Вертикальная"));
	
	ДобавитьВОтчет(НСтр("ru = 'Загрузка данных  для ""ST-Чикаго""'"), "Заголовок", 1, 1);
	
	СообщитьПодробно(НСтр("ru = 'Загрузка данных из ""ST-Чикаго""....."), 0, 3, 1);
	
	ДобавитьВОтчетСтроку(СтрШаблон(НСтр("ru = 'за период с %1 по %2'"), 
								Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy"), 
								Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy")));
								
	ДобавитьВОтчетСтроку(СтрШаблон(НСтр("ru = 'Каталог данных: %1'"), 
								КаталогДанных));

	ДобавитьВОтчетСтроку(СтрШаблон(НСтр("ru = 'Пользователь: %1'"), 
								ПараметрыСеанса.ТекущийПользователь));
								
КонецПроцедуры

Процедура ЗакрытьОтчет()
	
	КаталогОтчетов = КаталогДанных + "reports\";
	СоздатьКаталог(КаталогОтчетов);
	
	ПолноеИмяФайла = КаталогОтчетов + ИмяФайлаОтчета();
	
	ТаблицаОтчета.Вывод	= ИспользованиеВывода.Разрешить;
	Если Не ПараллельнаяЗагрузкаЗаказов Тогда
		ТаблицаОтчета.Записать(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбластьМакетаЛогирования(ИмяОбласти)

	МакетЛогов = ПолучитьОбщийМакет("бг_ИнтеграцияСЧикаго_Логирование");
	Возврат МакетЛогов.ПолучитьОбласть(ИмяОбласти);

КонецФункции

#КонецОбласти

#Область ПроцедурыРаботыСXML

Функция XML_БиблиотекаРаботает()

	XMLБиблиотекаРаботает = Истина;
	
	Попытка
		COMОбъект = Новый COMОбъект(ПолучитьТипXMLБибилиотеки());
		COMОбъект = 0;
	Исключение
		XMLБиблиотекаРаботает = Ложь;
	КонецПопытки;

	Если Не XMLБиблиотекаРаботает Тогда
		ВызватьИсключение НСтр("ru = 'Не обнаружено библиотек для работы с xml-данными!");
	КонецЕсли;
	
	Возврат XMLБиблиотекаРаботает;
	
КонецФункции

Функция ПолучитьТипXMLБибилиотеки()
	
	Возврат "MSXML2.DOMDocument";
	
КонецФункции

Процедура XML_ИнициализироватьЖурналОбмена()

	СоздатьКаталог(КаталогДанных + "intlogs");
	
	XML_Log_Общий = XML_СоздатьXMLДокумент();
	XML_Log_Общий_КорневойУзел = XML_СоздатьУзел(XML_Log_Общий, "LogDataExchangeAudits");
	XML_Log_Общий_КорневойУзел.SetAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	XML_Log_Общий_КорневойУзел.SetAttribute("xmlns:xsd", "http://www.w3.org/2001/XMLSchema");
	
	ВывестиВXMLЛог(,, "documents; Начало загрузки данных");

КонецПроцедуры

Функция XML_СоздатьXMLДокумент()
	
	XMLДокумент = Новый COMОбъект(ПолучитьТипXMLБибилиотеки());
	
	node = XMLДокумент.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'");
	
	XMLДокумент.preserveWhiteSpace = 1;
	XMLДокумент.AppendChild(node);
	
	Возврат XMLДокумент;
	
КонецФункции

Функция XML_СоздатьУзел(XMLДокумент, ИмяКорневогоУзла)
	
	Возврат XMLДокумент.CreateElement(ИмяКорневогоУзла);
	
КонецФункции

Функция XML_Сохранить(XMLДокумент, group, КаталогДляСохранения, ИмяФайлаДляСохранения)
	
	Если group.childNodes().length() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	XMLДокумент.AppendChild(group);
	
	ПолноеИмяФайлаДляСохранения = КаталогДляСохранения + ИмяФайлаДляСохранения;
	
	СоздатьКаталог(КаталогДляСохранения);
	
	Если Не ПараллельнаяЗагрузкаЗаказов Тогда
		XMLДокумент.Save(ПолноеИмяФайлаДляСохранения);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура XML_ИнициализироватьЖурналПодтверждений()

	ПолноеИмяЛогаПодтверждений = КаталогДанных + "confirmationslog.xml";
	
	XML_Log_Подтверждения = Новый COMОбъект(ПолучитьТипXMLБибилиотеки());
	
	Файл = Новый Файл(ПолноеИмяЛогаПодтверждений);
	Если Файл.Существует() Тогда
		XML_Log_Подтверждения.Load(ПолноеИмяЛогаПодтверждений);
	Иначе
		XML_Log_Подтверждения.preserveWhiteSpace = 1;
		XML_Сохранить(XML_Log_Подтверждения, XML_Log_Подтверждения.CreateProcessingInstruction("xml", "version='1.0' encoding='utf-8'"), КаталогДанных, "confirmationslog.xml");
	КонецЕсли;
	
	Попытка
		confirmationslog = XML_Log_Подтверждения.selectSingleNode("confirmationslog");
		ОшибкаВыбора = Ложь;
	Исключение
		ОшибкаВыбора = Истина;
	КонецПопытки;
	
	//Если выборка не прошла, то попытаемся создать новый элемент
	Если ОшибкаВыбора ИЛИ confirmationslog = Неопределено Тогда
		Попытка
			confirmationslog = XML_Log_Подтверждения.CreateElement("confirmationslog");
			XML_Log_Подтверждения.AppendChild(confirmationslog);
		Исключение
			СообщитьПодробно(НСтр("ru = 'Не удалось обратиться к логу подтверждений! Операция будет прервана'"), 0, 0, 3, "Ошибка");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		XML_Log_Подтверждения_КорневойУзел = confirmationslog.selectSingleNode("confirmations");
		Если XML_Log_Подтверждения_КорневойУзел = Неопределено Тогда
			XML_Log_Подтверждения_КорневойУзел = XML_Log_Подтверждения.CreateElement("confirmations");
			confirmationslog.AppendChild(XML_Log_Подтверждения_КорневойУзел);
		КонецЕсли;
	Исключение
		XML_Log_Подтверждения_КорневойУзел = XML_Log_Подтверждения.CreateElement("confirmations");
		confirmationslog.AppendChild(XML_Log_Подтверждения_КорневойУзел);
	КонецПопытки;
	
	//11.07.2022 TODO1cbit Прохоренко В.В. - через попытку пытаются найти какие-то данные. Нужно бы переделать без Попытки
	ЧислоФайловПодтверждений = 0;
	Попытка
		confirmationsInLog	= confirmationslog.selectSingleNode("chicago").selectNodes("*[@status='false']");
		ЧислоФайловПодтверждений = confirmationsInLog.Length();
	Исключение
	КонецПопытки;
	
	СообщитьПодробно(НСтр("ru = 'Загрузка подтверждений.....'"), 1, 1, 1);
	Для ИндексТекущегоФайла = 0 По ЧислоФайловПодтверждений - 1 Цикл
		confInLog = confirmationsInLog.Item(ИндексТекущегоФайла);
		confInLog.SetAttribute("status","true");
	КонецЦикла;
	СообщитьПодробно(НСтр("ru = 'Загрузка подтверждений завершена.....'"), 1, 1, 1);

КонецПроцедуры

//Читает filelog.xml со списоком файлов для загрузки
//и передаёт каждый из них на загрузку
Процедура XML_ЧтениеСпискаФайлов()
	
	ПолноеИмяФайлаЛога = КаталогДанных + "filelog.xml";
	
	ФайлСпискаФайлов = Новый Файл(ПолноеИмяФайлаЛога);
	Если Не ФайлСпискаФайлов.Существует() Тогда
		Возврат;
	КонецЕсли;
		
	СписокИменФайлов = Новый СписокЗначений();
	
	ВремяИзменения = ФайлСпискаФайлов.ПолучитьВремяИзменения();
	
	XMLСписокФайлов = Новый COMОбъект(ПолучитьТипXMLБибилиотеки());
	XMLСписокФайлов.Load(ПолноеИмяФайлаЛога);
	
	documentsInLog = Неопределено;
	Если XMLСписокФайлов.parseError.errorCode = 0 Тогда
		Если ПараллельнаяЗагрузкаЗаказов Тогда
			documentsInLog = XMLСписокФайлов.DocumentElement.selectSingleNode("chicago").selectNodes("*[@status='true']");
		Иначе
			documentsInLog = XMLСписокФайлов.DocumentElement.selectSingleNode("chicago").selectNodes("*[@status='false']");
		КонецЕсли;
	КонецЕсли;
	
	//В списке файлов нет подлежащих обработке
	Если documentsInLog = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	XML_Log_ЗагрузкиФайлов = XML_СоздатьXMLДокумент();
	confirmationsRoot = XML_СоздатьУзел(XML_Log_ЗагрузкиФайлов, "confirmations");
	XML_Log_ЗагрузкиФайлов_Узел = XML_СоздатьУзел(XML_Log_ЗагрузкиФайлов, "confirmations");
	
	Для ТекущийИндекс = 0 По documentsInLog.Length() - 1 Цикл
		
		docInLog = documentsInLog.Item(ТекущийИндекс);
		Если docInLog = Неопределено Тогда
			СообщитьПодробно(НСтр("ru = 'Ошибка чтение fileslog.....'"), 0, 3, 1);
		КонецЕсли;
			
		СтатусОбработкиТекущегоДокумента = "true";
		
		ИмяФайла = СокрЛП(docInLog.NodeName);
		
		ДанныеДляЗаписи = Новый СписокЗначений();
		ДанныеДляЗаписи.Добавить("Загрузка из файла " + ИмяФайла,	"Текст");
		ДанныеДляЗаписи.Добавить("",								"Параметр1");
		ДанныеДляЗаписи.Добавить("",								"Параметр2");
		ДанныеДляЗаписи.Добавить("Организация",						"Реквизит1");
		ДанныеДляЗаписи.Добавить("Торговый агент",					"Реквизит2");
		ДанныеДляЗаписи.Добавить("Контрагент",						"Реквизит3");
		ДанныеДляЗаписи.Добавить("Торговая точка",					"Реквизит4");
		
		ДобавитьВОтчет(ДанныеДляЗаписи, "Шапка");
		
		ЗагрузитьДокументы(ИмяФайла);
		
		Если СтатусОбработкиТекущегоДокумента = "true" Тогда
			СписокИменФайлов.Добавить(ИмяФайла);
		КонецЕсли;
			
	КонецЦикла;
	
	////////////////////////////////////////////////////
	//СОХРАНЕНИЕ ФАЙЛА ПОДТВЕРЖДЕНИЙ (начало)
	////////////////////////////////////////////////////
	
	ИмяПодтверждения = СоздатьИмяФайлаИзШаблона("confirmationYYYYMMDDHHMMSS");
	КаталогФайлаПодтверждений = КаталогДанных + "confirmation\";
	ПолноеИмяФайлаПодтверждений = КаталогФайлаПодтверждений + ИмяПодтверждения + ".xml";
	
	Если XML_Log_ЗагрузкиФайлов_Узел.childNodes().length() > 0 Тогда
		
		confirmationsRoot.AppendChild(XML_Log_ЗагрузкиФайлов_Узел);
		
		XML_Сохранить(XML_Log_ЗагрузкиФайлов, confirmationsRoot, КаталогФайлаПодтверждений, ИмяПодтверждения + ".xml");
		
		confirmation = XML_Log_Подтверждения.CreateElement(ИмяПодтверждения);
		confirmation.SetAttribute("status", "false");
		XML_Log_Подтверждения_КорневойУзел.AppendChild(confirmation);
		
	КонецЕсли;
	
	////////////////////////////////////////////////////
	//СОХРАНЕНИЕ ФАЙЛА ПОДТВЕРЖДЕНИЙ (конец)
	////////////////////////////////////////////////////
	
	Если СписокИменФайлов.Количество() > 0 Тогда
		ФайлСпискаФайлов.УстановитьТолькоЧтение(Истина);
		
		XMLСписокФайлов = Новый COMОбъект(ПолучитьТипXMLБибилиотеки());
		XMLСписокФайлов.Load(ПолноеИмяФайлаЛога);
		documentsInLog = Неопределено;
		Если XMLСписокФайлов.parseError.errorCode = 0 Тогда
			documentsInLog	= XMLСписокФайлов.DocumentElement.selectSingleNode("chicago").selectNodes("*[@status='false']");
		КонецЕсли;
		
		Если documentsInLog <> Неопределено Тогда
			
			Для ТекущийИндекс = 0 По documentsInLog.Length() - 1 Цикл
				docInLog = documentsInLog.Item(ТекущийИндекс);
				Если docInLog <> Неопределено Тогда
					ИмяФайла = СокрЛП(docInLog.NodeName);
					Если СписокИменФайлов.НайтиПоЗначению(ИмяФайла) <> Неопределено Тогда
						docInLog.SetAttribute("status", "true");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ФайлСпискаФайлов.УстановитьТолькоЧтение(Ложь);
			
			Если Не ПараллельнаяЗагрузкаЗаказов Тогда
				ТД = ТекущаяДата();
				Пока ТекущаяДата() - ТД < 100
					И ВремяИзменения = ФайлСпискаФайлов.ПолучитьВремяИзменения() Цикл
					
					Попытка
						XMLСписокФайлов.Save(ПолноеИмяФайлаЛога);
						Прервать;
					Исключение
						ТекстОшибки = ОписаниеОшибки();
					КонецПопытки;
					
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			ФайлСпискаФайлов.УстановитьТолькоЧтение(Ложь);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

Функция XML_ВернутьДату()
	
	Дата = ТекущаяДата();
	Возврат Формат(Дата, "ДФ=""дд.ММ.гггг""");
	
КонецФункции

Функция XML_ВернутьВремя()
	
	Дата = ТекущаяДата();
	Возврат Формат(Дата, "ДФ=HH:mm:ss");
	
КонецФункции

Процедура ВывестиВXMLЛог(BeginDate="", BeginTime="", Description="", ID="", State="Audit_State_Success", Reason="Audit_Reason_Null", EventType="Audit_Type_ERP_to_Chicago")
//08.07.2022 TODO1cbit Прохоренко В.В. - оптимизировать можно будет после объединения текущей обработки с обработкой бг_ВыгрузкаДанныхДляЧикаго
		
	Если Description = ""
		И ID = "" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	BeginDate = ?(BeginDate="", ТекущаяДата(), BeginDate);
	BeginTime = ?(BeginTime="", XML_ВернутьВремя(), BeginTime);
	
	лDescription = СокрЛП("Интеграция с УС; Загрузка данных; "+Description);
	
	LogDataExchangeAudit = XML_Log_Общий.CreateElement("LogDataExchangeAudit");

	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "State",		State);
	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "EventType",	EventType);
	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "BeginDate",	ДатаВФорматеXMLЛога(BeginDate, BeginTime));
	//
	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "EndDate",		ДатаВФорматеXMLЛога(ТекущаяДата(),XML_ВернутьВремя()));
	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "ID",			ID);
	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "Description",	лDescription);
	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "Reason",		Reason);
	//XML_ЛогДобавитьПотомка(LogDataExchangeAudit, "IsUpdate",		"true");
	
	//18.07.2022 TODO1cbit Прохоренко В.В. - если это будет работать, то код выше можно удалить вместе с процедурой XML_ЛогДобавитьПотомка
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "State",		State);
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "EventType",	EventType);
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "BeginDate",	ДатаВФорматеXMLЛога(BeginDate, BeginTime));
	
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "EndDate",		ДатаВФорматеXMLЛога(ТекущаяДата(),XML_ВернутьВремя()));
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "ID",			ID);
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "Description",	лDescription);
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "Reason",		Reason);
	XML_ДобавитьПотомка(XML_Log_Общий, LogDataExchangeAudit, "IsUpdate",	"true");
	//18.07.2022 TODO1cbit Прохоренко В.В. - 
	
	XML_Log_Общий_КорневойУзел.AppendChild(LogDataExchangeAudit);
	
КонецПроцедуры

//11.07.2022 TODO1cbit Прохоренко В.В. - 
Процедура XML_ЛогДобавитьПотомка(Parent, Название, Значение)

	пДокВладелец = Parent.ownerDocument;
	Если пДокВладелец = Неопределено Тогда
		пДокВладелец = Parent; 
	КонецЕсли;
	
	//MS XML Parser
	child = пДокВладелец.CreateElement(Название);
	child.text	= Значение;
	Parent.AppendChild(child);
    	
КонецПроцедуры

Функция ДатаВФорматеXMLЛога(Дата, Время)
	
	СтрокаДата = Формат(Дата, "ДФ=""гггг-ММ-дд""");
	СтрокаВремя = Время;
	
	КонстантаЧасовойПояс = 3; //НовыйОбъектБД
	НомерЧасовогоПоясаСтрокой = Строка(Макс(КонстантаЧасовойПояс,-КонстантаЧасовойПояс));
	ДобавитьЛидирующийНоль = ?(СтрДлина(НомерЧасовогоПоясаСтрокой)=1,1,0);
	СтрокаЧасовойПояс = ?(КонстантаЧасовойПояс<0,"-","+") + ?(ДобавитьЛидирующийНоль=1,"0","") + НомерЧасовогоПоясаСтрокой + ":00"; 
	
	Возврат СтрокаДата + "T" + СтрокаВремя + СтрокаЧасовойПояс;
	
КонецФункции

Процедура XML_ДобавитьПотомка(XMLДокумент, Parent, Название, Значение)
	
	Попытка
		child = XMLДокумент.CreateElement(Название);
		child.text	= Значение;
		Parent.AppendChild(child);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'ОШИБКА: %1 - %2'"), 
											Название,
											Значение);
		СообщитьПодробно(ТекстСообщения, 2, 0, 2, "Ошибка");
	КонецПопытки;
	
КонецПроцедуры

Функция ВремяИзСтроки(ВремяСтрокой)
	
	Если Не ЗначениеЗаполнено(ВремяСтрокой) Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	НачалоВремени = Найти(ВремяСтрокой, ":") - 2;
	
	ПодстрокаЧас = СокрЛП(Сред(ВремяСтрокой, НачалоВремени, 2));
	Если СтрДлина(ПодстрокаЧас) = 1 Тогда
		ПодстрокаЧас = "0" + ПодстрокаЧас;
	КонецЕсли;
	
	ПодстрокаМинуты	= СокрЛП(Сред(ВремяСтрокой, НачалоВремени + 3, 2));
	Если СтрДлина(ПодстрокаМинуты) = 1 Тогда
		ПодстрокаМинуты	= "0" + ПодстрокаМинуты;
	КонецЕсли;
	
	Попытка
		Возврат Дата(1,1,1, ПодстрокаЧас, ПодстрокаМинуты, 0);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Время из строки ""%1"" не определилось!'"), 
												ВремяСтрокой);
		СообщитьПодробно(ТекстСообщения, 2, 0, 2, "Ошибка");
		Возврат Дата(1,1,1);
	КонецПопытки;
	
КонецФункции

Функция ДатаИзСтроки(ДатаСтрокой)
	
	НачалоВремени = Найти(ДатаСтрокой, ":") - 2;
	
	ПодстрокаГод = Сред(ДатаСтрокой, 1, 4);
	Если СтрДлина(ПодстрокаГод) = 2 Тогда
		ПодстрокаГод = "20" + ПодстрокаГод;
	КонецЕсли;
	
	ПодстрокаМесяц = Сред(ДатаСтрокой, 6, 2);
	Если СтрДлина(ПодстрокаМесяц) = 1 Тогда
		ПодстрокаМесяц = "0" + ПодстрокаМесяц;
	КонецЕсли;
	
	ПодстрокаДень = Сред(ДатаСтрокой, 9, 2);
	Если СтрДлина(ПодстрокаДень) = 1 Тогда
		ПодстрокаДень = "0" + ПодстрокаДень;
	КонецЕсли;
	
	Если НачалоВремени > 10 Тогда
		
		ПодстрокаЧас = СокрЛП(Сред(ДатаСтрокой, НачалоВремени, 2));
		Если СтрДлина(ПодстрокаЧас) = 1 Тогда
			ПодстрокаЧас = "0" + ПодстрокаЧас;
		КонецЕсли;
		
		ПодстрокаМинуты	= СокрЛП(Сред(ДатаСтрокой, НачалоВремени + 3, 2));
		Если СтрДлина(ПодстрокаМинуты) = 1 Тогда
			ПодстрокаМинуты	= "0" + ПодстрокаМинуты;
		КонецЕсли;
		
		ПодстрокаСекунды = СокрЛП(Сред(ДатаСтрокой, НачалоВремени + 6, 2));
		Если СтрДлина(ПодстрокаСекунды) = 1 Тогда
			ПодстрокаСекунды = "0" + ПодстрокаСекунды;
		КонецЕсли;
	Иначе
		ПодстрокаЧас = "0";
		ПодстрокаМинуты	= "0";
		ПодстрокаСекунды = "0";
	КонецЕсли;
	
	Попытка
		Возврат Дата(ПодстрокаГод, ПодстрокаМесяц, ПодстрокаДень, ПодстрокаЧас, ПодстрокаМинуты, ПодстрокаСекунды);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Дата из строки ""%1"" не определилась, была установлена текущая дата!'"), 
												ДатаСтрокой);
		СообщитьПодробно(ТекстСообщения, 2, 0, 2, "Ошибка");
		Возврат ТекущаяДата();
	КонецПопытки;
	
КонецФункции

//****************************************
//Будем юзать ее для использование Доп Обработки
Функция ПолучитьРеквизит(section, ИмяРеквизита) Экспорт
	
	Попытка
		Результат = СокрЛП(section.SelectSingleNode(ИмяРеквизита).text);
		Если Нрег(Результат) = "true" Тогда
			Результат = Истина;
		ИначеЕсли Нрег(Результат) = "false" Тогда
			Результат = Ложь;
		КонецЕсли;
	Исключение
		Результат = "";
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРеквизитЧислом(section, ИмяРеквизита)
	
	Число = ПолучитьРеквизит(section, ИмяРеквизита);
	Результат = Число(СтрЗаменить(Число, ",", "."));
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьСостояниеОбъекта(ДокXML, ДокументСсылка, КодДокументаВнутренний, КодДокументаВнешний, КодМаршрута, ДатаСозданияДокумента, ПечатныйНомерДокументаМТ)
	        
	Если ЗначениеЗаполнено(КодМаршрута) Тогда
		//лсКодКПК = КодМаршрута + "/" + ДатаСозданияДокумента + "/" + ПечатныйНомерДокументаМТ;
		//11.07.2022 TODO1cbit Прохоренко В.В. - я удалил из ПечатныйНомерДокументаМТ КодМаршрута поэтому чтобы никто не заметил разницы при записи КодКПК прибавляю его ещё раз
		КомбинированныйКодДокумента = КодМаршрута + "/" + ДатаСозданияДокумента + "/" + ПечатныйНомерДокументаМТ;
		//11.07.2022 TODO1cbit Прохоренко В.В. - сюда записывают в виде строки комбинированный набор реквизитов документа, чтобы потом по ним поискать а загружался уже документ или нет
		//не понятно зачем так сложно, если есть первичный идентификатор
		//11.07.2022 TODO1cbit Прохоренко В.В. - зачем так сложно, если есть идентификатор?
	Иначе
		КомбинированныйКодДокумента = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Если Не ЗначениеЗаполнено(КодДокументаВнутренний) Тогда
			КодДокументаВнутренний = ЗначениеВСтрокуВнутр_Модифицированное(ДокументСсылка);
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.бг_чикаго_СостоянияОбъектов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Объект			= ДокументСсылка;
		МенеджерЗаписи.КодВнутренний	= КодДокументаВнутренний;
		МенеджерЗаписи.КодВнешний		= КодДокументаВнешний;
		МенеджерЗаписи.КодКПК			= КомбинированныйКодДокумента;
		
		//Если мКонстантаНесколькоФилиалов2 Тогда
		МенеджерЗаписи.АктивныйФилиал = АктивныйФилиал;	
		//КонецЕсли;
		
		МенеджерЗаписи.ДатаКПК			= ДатаСозданияДокумента;
		МенеджерЗаписи.ТипОбъекта		= "from chicago";
		МенеджерЗаписи.ДатаЗаписи		= ТекущаяДата();
		
		Если МенеджерЗаписи.Объект <> Неопределено Тогда
			МенеджерЗаписи.Записать();//11.07.2022 TODO1cbit Прохоренко В.В. - такое возможно?
		Иначе
			А = 0;//11.07.2022 TODO1cbit Прохоренко В.В. - для проверки
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(КодДокументаВнутренний) Тогда
			КодДокументаВнутренний	= "<no outercode>";
		КонецЕсли;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ПечатныйНомерДокументаМТ) Тогда
	//	// требуется обратная замена, чтобы остался только код документа в КПК
	//	ПозицияСлеша = Найти(ПечатныйНомерДокументаМТ, "/");
	//	Если ПозицияСлеша <> 0 Тогда
	//		ПечатныйНомерДокументаМТ = Сред(ПечатныйНомерДокументаМТ, ПозицияСлеша +1);
	//	КонецЕсли;
	//КонецЕсли;
	
	doc = XML_Log_ЗагрузкиФайлов.CreateElement("doc");
	XML_ДобавитьПотомка(ДокXML, doc, "chicagocode"	, КодДокументаВнешний);
	XML_ДобавитьПотомка(ДокXML, doc, "outercode"	, КодДокументаВнутренний);
	XML_ДобавитьПотомка(ДокXML, doc, "pdadocnum"	, ПечатныйНомерДокументаМТ);
	XML_ДобавитьПотомка(ДокXML, doc, "crdate"		, ДатаСозданияДокумента);
	XML_ДобавитьПотомка(ДокXML, doc, "pdaroutecode"	, КодМаршрута);
	XML_Log_ЗагрузкиФайлов_Узел.AppendChild(doc);
	
КонецПроцедуры

//11.07.2022 TODO1cbit Прохоренко В.В. - 
Функция ПолучитьРеквизитБулевый(section, ИмяРеквизита)
	
	Значение	= ПолучитьРеквизит(section, ИмяРеквизита);
	Результат	= ?(Значение = 1, Истина, Ложь);
	Результат	= ?(НРег(Значение) = "true", Истина, ?(НРег(Значение) = "false", Ложь, Результат));
	
	Возврат Результат;
	
КонецФункции

//11.07.2022 TODO1cbit Прохоренко В.В. - подумать можно ли это заменить на что-то человеческое
//Эта функция заточена конкретно под ссылочные типы данных и возвращает их УИД (перевёрнутый?)
//Хотя по факту отработает (без ошибок?) и для других типов данных
//Кажется используется при выгрузке всех ссылочных объектов?
Функция ЗначениеВСтрокуВнутр_Модифицированное(Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	//{"#",47e6dd42-cd5c-4e3a-9bc4-14816ed53d38,31:00000000000000000000000000000000}
	ОбъектУПП = РегистрыСведений.бг_СоответствиеОбъектовУПП.ОбъектУПП(Значение);
	Если ОбъектУПП = Неопределено Тогда
		СтрокаПредставления = ЗначениеВСтрокуВнутр(Значение);
	Иначе
		СтрокаПредставления = ОбъектУПП;
	КонецЕсли;
	
	ПозицияСимволаДвоеточие = Найти(СтрокаПредставления, ":");
	Если ПозицияСимволаДвоеточие > 0 Тогда
		СтрокаПредставления	= Сред(СтрокаПредставления, ПозицияСимволаДвоеточие+1);
	КонецЕсли;
	СтрокаПредставления	= СтрЗаменить(СтрокаПредставления, "}", "");
	
	Возврат СтрокаПредставления;
	
КонецФункции

//11.07.2022 TODO1cbit Прохоренко В.В. - подумать можно ли это заменить на что-то человеческое
//Данная функция работает зеркально ЗначениеВСтрокуВнутр_Модифицированное и находит ссылку на объект по его УИД
Функция ЗначениеИзСтрокиВнутр_Модифицированное(ИдентификаторОбъекта, ВидОбъекта)
	
	НайденнаяСсылка = Справочники[ВидОбъекта].ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторОбъекта) Тогда
		Возврат НайденнаяСсылка;
	КонецЕсли;
	
	ОбъектERP = ОбъектERPПоИдентификаторуУПП(ИдентификаторОбъекта, НайденнаяСсылка);
	Если ЗначениеЗаполнено(ОбъектERP) Тогда
		НайденнаяСсылка = ОбъектERP;
	Иначе
		СтрокаПредставления = ЗначениеВСтрокуВнутр(НайденнаяСсылка);
		//{"#",47e6dd42-cd5c-4e3a-9bc4-14816ed53d38,31:00000000000000000000000000000000}
		СтрокаПредставления = СтрЗаменить(СтрокаПредставления, "00000000000000000000000000000000", ИдентификаторОбъекта);
		
		Попытка
			НайденнаяСсылка = ЗначениеИзСтрокиВнутр(СтрокаПредставления);
		Исключение
			НайденнаяСсылка = Справочники[ВидОбъекта].ПустаяСсылка();		
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Значение (%1) из строки ""%2"" не определено!!'"), 
										ВидОбъекта,
										ИдентификаторОбъекта);
			СообщитьПодробно(ТекстСообщения, 2, 0, 2, "Ошибка");

		КонецПопытки;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.СсылкаСуществует(НайденнаяСсылка) Тогда
		НайденнаяСсылка = Справочники[ВидОбъекта].ПустаяСсылка();
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Значение (%1) из строки ""%2"" не определено!!'"), 
										ВидОбъекта,
										ИдентификаторОбъекта);
		СообщитьПодробно(ТекстСообщения, 2, 0, 2, "Ошибка");
	КонецЕсли;
	
	Возврат НайденнаяСсылка;
	
КонецФункции

Функция ОбъектERPПоИдентификаторуУПП(ИдентификаторОбъекта, Ссылка)
	
	//09.08.2022 TODO1cbit Прохоренко В.В. - 
	НастройкаОбмена = Справочники.бг_creatio_НастройкиОбмена.ДействующаяНастройкаОбмена();
						
	Если НастройкаОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
	СтрокаТаблицы = НастройкаОбмена.ИдентификаторыТиповДанныхУПП.Найти(ИмяОбъектаМетаданных);
		
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ТипМетаданныхДляУПП = СтрокаТаблицы.СтроковоеПредставлениеТипаУПП;
	ПолныйИдентификаторОбъектаУПП = "{""#""," + ТипМетаданныхДляУПП + ":" + ИдентификаторОбъекта + "}";
	
	Возврат РегистрыСведений.бг_СоответствиеОбъектовУПП.ОбъектERP(ПолныйИдентификаторОбъектаУПП);
	
КонецФункции

#КонецОбласти

#Область РаботаСФайламиИКаталогами

Функция СоздатьИмяФайлаИзШаблона(пШаблонФайлаВыгрузки) Экспорт
	
	лИмяФайлаВыгрузки	= пШаблонФайлаВыгрузки;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "ДФ=yyyyMMdd");
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYMM");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 6);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMDD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 5);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMDD", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YYYY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YYYY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "YY");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Лев(лСтрЗамены, 4);
		лСтрЗамены = Сред(лСтрЗамены, 3);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "YY", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "DD");
	Если лПозиция > 0 Тогда
		лДата	= ТекущаяДата();
		лСтрЗамены = Формат(лДата, "yyyyMMdd");
		лСтрЗамены = Сред(лСтрЗамены, 7);
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "DD", лСтрЗамены);
	КонецЕсли;
	
	лДата	= ТекущаяДата();
	лЧас	= Строка(Час(лДата));
	лМин	= Строка(Минута(лДата));
	лСек	= Строка(Секунда(лДата));
	
	лЧас	= ?(СтрДлина(лЧас) = 2, лЧас, "0" + лЧас);
	лМин	= ?(СтрДлина(лМин) = 2, лМин, "0" + лМин);
	лСек	= ?(СтрДлина(лСек) = 2, лСек, "0" + лСек);
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HHMM");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас + лМин;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HHMM", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "MMSS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лМин + лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "MMSS", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "HH");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лЧас;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "HH", лСтрЗамены);
	КонецЕсли;
	
	лПозиция	= Найти(лИмяФайлаВыгрузки, "SS");
	Если лПозиция > 0 Тогда
		лСтрЗамены = лСек;
		лИмяФайлаВыгрузки	= СтрЗаменить(лИмяФайлаВыгрузки, "SS", лСтрЗамены);
	КонецЕсли;
	
	Возврат лИмяФайлаВыгрузки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
