#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, Замещение)
	
	ДополнительныеСвойства.Вставить("ДанныеНабораЗаписейДоИзменения", ДанныеНабораЗаписейДоИзменения());

КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ, Замещение)
	
	ЗарегистрироватьИзмененияНабораЗаписейКВыгрузке();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнтеграцияСВнешнимиХранилищами

Функция ДанныеНабораЗаписейДоИзменения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
		|	ТоварыОрганизаций.Организация КАК Организация,
		|	ТоварыОрганизаций.Период КАК ДатаАктуальностиОстатков
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", РегистраторНабораЗаписей());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПериодНабораЗаписей()
	
	Если ДополнительныеСвойства.Свойство("ДатаРегистратора") Тогда
		Возврат ДополнительныеСвойства.ДатаРегистратора;
	Иначе
		
		Регистратор = РегистраторНабораЗаписей();
		Если ЗначениеЗаполнено(Регистратор) Тогда
			Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Дата");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция РегистраторНабораЗаписей()

	Возврат ЭтотОбъект.Отбор.Регистратор.Значение;

КонецФункции

Процедура ЗарегистрироватьИзмененияНабораЗаписейКВыгрузке()
	
	ТаблицаИзмененийКВыгрузке = ТаблицаИзмененийКВыгрузке();
		
	ИзмененияКВыгрузкеНаборЗаписей = РегистрыСведений.бг_ТоварыОрганизацийКВыгрузкеВХранилище.СоздатьНаборЗаписей();	
	ИзмененияКВыгрузкеНаборЗаписей.Загрузить(ТаблицаИзмененийКВыгрузке);
	ИзмененияКВыгрузкеНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ИзмененияКВыгрузкеНаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

Функция ТаблицаИзмененийКВыгрузке()
	
	ПериодРегистрацииКВыгрузке = ТекущаяДата();
	
	ТаблицаИзмененийКВыгрузке = Новый ТаблицаЗначений;	
	ТаблицаИзмененийКВыгрузке.Колонки.Добавить("АналитикаУчетаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));
	ТаблицаИзмененийКВыгрузке.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаИзмененийКВыгрузке.Колонки.Добавить("ИдентификаторЗаписи", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ТаблицаИзмененийКВыгрузке.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаИзмененийКВыгрузке.Колонки.Добавить("ДатаАктуальностиОстатков", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	ДополнитьТаблицуИзмененийКВыгрузкеТекущимиДаннымиНабораЗаписей(
		ТаблицаИзмененийКВыгрузке, ПериодРегистрацииКВыгрузке);
	ДополнитьТаблицуИзмененийКВыгрузкеУдаленнымиДаннымиИзНабораЗаписей(
		ТаблицаИзмененийКВыгрузке, ПериодРегистрацииКВыгрузке);
		
	Возврат ТаблицаИзмененийКВыгрузке;
	
КонецФункции

Процедура ДополнитьТаблицуИзмененийКВыгрузкеТекущимиДаннымиНабораЗаписей(ТаблицаИзменений, ПериодРегистрации)
	
	Если ЭтотОбъект.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ИменаИзмерений = "АналитикаУчетаНоменклатуры, Организация";
	ИзмеренияКВыгрузке = Выгрузить(, ИменаИзмерений);
	ИзмеренияКВыгрузке.Свернуть(ИменаИзмерений);
		
	ЗначенияЗаполнения = Новый Структура(
		"Период, ДатаАктуальностиОстатков",
		ПериодРегистрации, ПериодНабораЗаписей());
	
	Для Каждого СтрокаИзмерения Из ИзмеренияКВыгрузке Цикл
		НовоеИзменениеКВыгрузке = ТаблицаИзменений.Добавить();	
		ЗаполнитьЗначенияСвойств(НовоеИзменениеКВыгрузке, СтрокаИзмерения);	
		ЗаполнитьЗначенияСвойств(НовоеИзменениеКВыгрузке, ЗначенияЗаполнения);
		НовоеИзменениеКВыгрузке.ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуИзмененийКВыгрузкеУдаленнымиДаннымиИзНабораЗаписей(ТаблицаИзменений, ПериодРегистрации)
	
	// добавляем в таблицу изменений строки, которые были удалены из набора записей.
	// изменяем в таблице дату актуальности остатков, если она больше периода набора записей до изменений
	
	ДанныеНабораЗаписейДоИзменения = ДополнительныеСвойства.ДанныеНабораЗаписейДоИзменения;
	
	Если ДанныеНабораЗаписейДоИзменения.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура(
		"Период",
		ПериодРегистрации);
	
	Для Каждого ДанныеДоИзменений Из ДанныеНабораЗаписейДоИзменения Цикл
		ДобавитьНовыеДанныеВТаблицуИзмененийКВыгрузке(ТаблицаИзменений, ДанныеДоИзменений, ЗначенияЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовыеДанныеВТаблицуИзмененийКВыгрузке(ТаблицаИзменений, ДанныеНовойСтроки, ЗначенияЗаполнения)
	
	ОтборСтрок = Новый Структура("АналитикаУчетаНоменклатуры, Организация");
	ЗаполнитьЗначенияСвойств(ОтборСтрок, ДанныеНовойСтроки);
	НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(ОтборСтрок);
	
	ТребуетсяДобавитьНовуюСтроку = Ложь;
	ТребуетсяИзменитьСуществующуюСтроку = Ложь;
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Если ДанныеНовойСтроки.ДатаАктуальностиОстатков < НайденныеСтроки[0].ДатаАктуальностиОстатков Тогда
			ТребуетсяИзменитьСуществующуюСтроку = Истина;
		КонецЕсли;
	Иначе
		ТребуетсяДобавитьНовуюСтроку = Истина;
	КонецЕсли;
	
	Если ТребуетсяДобавитьНовуюСтроку Тогда
		НовоеИзменениеКВыгрузке = ТаблицаИзменений.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеИзменениеКВыгрузке, ДанныеНовойСтроки);
		ЗаполнитьЗначенияСвойств(НовоеИзменениеКВыгрузке, ЗначенияЗаполнения);
		НовоеИзменениеКВыгрузке.ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Если ТребуетсяИзменитьСуществующуюСтроку Тогда
		СуществующаяСтрока = НайденныеСтроки[0];
		СуществующаяСтрока.ДатаАктуальностиОстатков = ДанныеНовойСтроки.ДатаАктуальностиОстатков;		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

