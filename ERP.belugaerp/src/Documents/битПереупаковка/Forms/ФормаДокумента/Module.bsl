
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриПолученииДанныхНаСервере();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриПолученииДанныхНаСервере();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДоступностьЭлементов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗагрузитьШтрихкодыСПУМИзФайла(Команда)

	Если Объект.Изъятия.Количество() > 0
		Или Объект.Разагрегации.Количество() > 0
		Или Объект.Агрегации.Количество() > 0 
		Или Объект.Штрихкоды.Количество() > 0 Тогда
		
		ОповещениеПослеВопроса = Новый ОписаниеОповещения(
			"ЗагрузитьШтрихкодыСПУМПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПослеВопроса,
			НСтр("ru='Одна или несколько таблиц документа заполнены и будут очищены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗагрузитьШтрихкодыСПУМВыборФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШтрихкодыСПУМПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьШтрихкодыСПУМВыборФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШтрихкодыСПУМВыборФайла()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл для загрузки данных агрегации СПУМ'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.Фильтр = НСтр("ru='CSV файл с линии СПУМ (*.csv)|*.csv'");
	ДиалогВыбораФайла.ИндексФильтра = 0;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗагрузитьШтрихкодыСПУМЗавершение",
		ЭтотОбъект);
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШтрихкодыСПУМЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если Не (ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И ВыбранныеФайлы.Количество() = 1) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлШтрихкодовСПУМ = Новый ТекстовыйДокумент;
	ФайлШтрихкодовСПУМ.Прочитать(ВыбранныеФайлы[0]);
	ТекстФайлаСПУМ = ФайлШтрихкодовСПУМ.ПолучитьТекст();
	
	Если ПустаяСтрока(ТекстФайлаСПУМ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьШтрихкодыСПУМНаСервере(ТекстФайлаСПУМ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИзъятияШтрихкодПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Изъятия.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	ЗаполнитьТипУпаковкиВСтрокеТаблицы(ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РазагрегацииШтрихкодПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Разагрегации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	ЗаполнитьТипУпаковкиВСтрокеТаблицы(ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура АгрегацииШтрихкодПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Агрегации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	ЗаполнитьТипУпаковкиВСтрокеТаблицы(ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АгрегацииШтрихкодРодительПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Агрегации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ШтрихкодРодитель = СокрЛП(ТекущиеДанные.ШтрихкодРодитель);
	ЗаполнитьТипУпаковкиРодителяВСтрокеТаблицы(ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыШтрихкодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Штрихкоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	
	Если Не ПустаяСтрока(ТекущиеДанные.Штрихкод) Тогда
		ЗаполнитьТипУпаковкиВСтрокеТаблицы(ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыШтрихкодРодительПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Штрихкоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ШтрихкодРодитель = СокрЛП(ТекущиеДанные.ШтрихкодРодитель);
	ЗаполнитьТипУпаковкиРодителяВСтрокеТаблицы(ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыНоваяНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Штрихкоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущаяНоменклатура)
		И ЗначениеЗаполнено(ТекущиеДанные.НоваяНоменклатура)
		И ТекущиеДанные.ТекущаяНоменклатура = ТекущиеДанные.НоваяНоменклатура Тогда
		
		ТекущиеДанные.НоваяНоменклатура = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыНоваяСерияПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Штрихкоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТекущаяСерия)
		И ЗначениеЗаполнено(ТекущиеДанные.НоваяСерия)
		И ТекущиеДанные.ТекущаяСерия = ТекущиеДанные.НоваяСерия Тогда
		
		ТекущиеДанные.НоваяСерия = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ДоступноРедактированиеДокументаВручную = Пользователи.РолиДоступны("бг_ДобавлениеИзменениеПереупаковок")
		Или Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.РасходныйОрдерНаТовары.ТолькоПросмотр = Не ДоступноРедактированиеДокументаВручную;
	Элементы.ОтражениеФактаПоРасходномуОрдеру.ТолькоПросмотр = Не ДоступноРедактированиеДокументаВручную;
	Элементы.ОператорТСД.ТолькоПросмотр = Не ДоступноРедактированиеДокументаВручную;
	Элементы.ВремяВыполнения.ТолькоПросмотр = Не ДоступноРедактированиеДокументаВручную;
	
	Элементы.Изъятия.ИзменятьПорядокСтрок = ДоступноРедактированиеДокументаВручную;
	Элементы.Изъятия.ИзменятьСоставСтрок = ДоступноРедактированиеДокументаВручную;
	
	Элементы.Разагрегации.ИзменятьПорядокСтрок = ДоступноРедактированиеДокументаВручную;
	Элементы.Разагрегации.ИзменятьСоставСтрок = ДоступноРедактированиеДокументаВручную;
	
	Элементы.Агрегации.ИзменятьПорядокСтрок = ДоступноРедактированиеДокументаВручную;
	Элементы.Агрегации.ИзменятьСоставСтрок = ДоступноРедактированиеДокументаВручную;
	
	Элементы.Штрихкоды.ИзменятьПорядокСтрок = ДоступноРедактированиеДокументаВручную;
	Элементы.Штрихкоды.ИзменятьСоставСтрок = ДоступноРедактированиеДокументаВручную;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	КартинкиТиповУпаковок = бг_МаркируемаяПродукция.КартинкиТиповУпаковок();
	ЗначенияТиповУпаковок = бг_МаркируемаяПродукция.ЗначенияТиповУпаковок();
	ДлиныШтрихкодовМарок = бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок();
	
	ИзъятияЗаполнитьДанныеТиповУпаковок();
	РазагрегацииЗаполнитьДанныеТиповУпаковок();
	АгрегацииЗаполнитьДанныеТиповУпаковок();
	ШтрихкодыЗаполнитьДанныеТиповУпаковок();
	
КонецПроцедуры

&НаСервере
Процедура ИзъятияЗаполнитьДанныеТиповУпаковок()
	
	КонтекстЗаполненияДанныхТиповУпаковок = КонтекстЗаполненияДанныхТиповУпаковок(ЭтотОбъект);
	
	Для каждого СтрокаИзъятия Из Объект.Изъятия Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаИзъятия,
			КонтекстЗаполненияДанныхТиповУпаковок);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РазагрегацииЗаполнитьДанныеТиповУпаковок()
	
	КонтекстЗаполненияДанныхТиповУпаковок = КонтекстЗаполненияДанныхТиповУпаковок(ЭтотОбъект);
	
	Для каждого СтрокаРазагрегации Из Объект.Разагрегации Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаРазагрегации,
			КонтекстЗаполненияДанныхТиповУпаковок);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АгрегацииЗаполнитьДанныеТиповУпаковок()
	
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкод = КонтекстЗаполненияДанныхТиповУпаковок(ЭтотОбъект);
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель = КонтекстЗаполненияДанныхТиповУпаковокРодителя(ЭтотОбъект);
	
	Для каждого СтрокаАгрегации Из Объект.Агрегации Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаАгрегации,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкод);
			
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаАгрегации,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ШтрихкодыЗаполнитьДанныеТиповУпаковок()
	
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкод = КонтекстЗаполненияДанныхТиповУпаковок(ЭтотОбъект);
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель = КонтекстЗаполненияДанныхТиповУпаковокРодителя(ЭтотОбъект);
	
	Для каждого СтрокаШтрихкоды Из Объект.Штрихкоды Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаШтрихкоды,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкод);
			
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаШтрихкоды,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель);
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТипУпаковкиВСтрокеТаблицы(СтрокаТаблицы, Форма)
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		СтрокаТаблицы,
		КонтекстЗаполненияДанныхТиповУпаковок(Форма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьТипУпаковкиРодителяВСтрокеТаблицы(СтрокаТаблицы, Форма)
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		СтрокаТаблицы,
		КонтекстЗаполненияДанныхТиповУпаковокРодителя(Форма));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КонтекстЗаполненияДанныхТиповУпаковок(Форма)
	
	Возврат бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		Форма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КонтекстЗаполненияДанныхТиповУпаковокРодителя(Форма)
	
	Возврат бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		Форма,
		"ШтрихкодРодитель",
		"ТипУпаковкиРодителя",
		"КартинкаТипаУпаковкиРодителя");
	
КонецФункции

#Область ЗагрузкаСПУМ

&НаСервере
Процедура ЗагрузитьШтрихкодыСПУМНаСервере(ТекстФайлаСПУМ)
	
	ДанныеФайлаСПУМ = ПервичныеДанныеФайлаСПУМ(ТекстФайлаСПУМ);
	ЗаполнитьДокументПоДаннымФайлаСПУМ(ДанныеФайлаСПУМ);
	АгрегацииЗаполнитьДанныеТиповУпаковок();
	ШтрихкодыЗаполнитьДанныеТиповУпаковок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПервичныеДанныеФайлаСПУМ(ТекстФайлаСПУМ)

	СтрокиФайлаСПУМ	= СтрРазделить(ТекстФайлаСПУМ, Символы.ПС, Ложь);
	
	ДанныеФайлаСПУМ = НовыйДанныеФайлаСПУМ();
	
	ИндексыКолонокФайлаСПУМ = ИндексыКолонокФайлаСПУМ();
	
	Для каждого СтрокаФайлаСПУМ Из СтрокиФайлаСПУМ Цикл
		
		ПервичныеДанныеСтрокиФайлаСПУМ = СтрРазделить(СтрокаФайлаСПУМ, ";", Истина);
		ДанныеСтрокиФайлаСПУМ = ДанныеФайлаСПУМ.Добавить();
		
		Для каждого ДанныеИндексаКолонкиФайлаСПУМ Из ИндексыКолонокФайлаСПУМ Цикл
			
			ИмяСвойства = ДанныеИндексаКолонкиФайлаСПУМ.Ключ;
			ИндексКолонки = ДанныеИндексаКолонкиФайлаСПУМ.Значение;
			
			Если ТипЗнч(ДанныеСтрокиФайлаСПУМ[ИмяСвойства]) = Тип("Дата") Тогда
				
				ЧастиДатыПроизводства = СтрРазделить(ПервичныеДанныеСтрокиФайлаСПУМ[ИндексКолонки], ".", Ложь);
				
				Если ЧастиДатыПроизводства.Количество() = 3 Тогда
					
					ДанныеСтрокиФайлаСПУМ[ИмяСвойства] = Дата(
						ЧастиДатыПроизводства[2],
						ЧастиДатыПроизводства[1],
						ЧастиДатыПроизводства[0]);
						
				КонецЕсли;
				
			Иначе
				ДанныеСтрокиФайлаСПУМ[ИмяСвойства] = ПервичныеДанныеСтрокиФайлаСПУМ[ИндексКолонки];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеФайлаСПУМ;

КонецФункции

&НаСервереБезКонтекста
Функция ИндексыКолонокФайлаСПУМ()

	ИндексыКолонокФайлаСПУМ = Новый Структура;
	
	ИндексыКолонокФайлаСПУМ.Вставить("ШтрихкодПаллеты", 0);
	ИндексыКолонокФайлаСПУМ.Вставить("ШтрихкодКоробки", 1);
	ИндексыКолонокФайлаСПУМ.Вставить("ШтрихкодМарки", 2);
	ИндексыКолонокФайлаСПУМ.Вставить("КодНоменклатуры", 3);
	ИндексыКолонокФайлаСПУМ.Вставить("ДатаПроизводства", 6);
	
	Возврат ИндексыКолонокФайлаСПУМ;

КонецФункции

&НаСервереБезКонтекста
Функция НовыйДанныеФайлаСПУМ()

	ДлиныШтрихкодовМарок = бг_МаркируемаяПродукцияВызовСервераПовтИсп.ДлиныШтрихкодовМарок();
	
	ДанныеФайлаСПУМ = Новый ТаблицаЗначений;
	
	ДанныеФайлаСПУМ.Колонки.Добавить(
		"ШтрихкодПаллеты",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлиныШтрихкодовМарок.Упаковка));
		
	ДанныеФайлаСПУМ.Колонки.Добавить(
		"ШтрихкодКоробки",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлиныШтрихкодовМарок.Упаковка));
		
	ДанныеФайлаСПУМ.Колонки.Добавить(
		"ШтрихкодМарки",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлиныШтрихкодовМарок.ПолнаяМарка));
	
	ДанныеФайлаСПУМ.Колонки.Добавить(
		"КодНоменклатуры",
		Метаданные.Справочники.Номенклатура.СтандартныеРеквизиты.Код.Тип);
		
	ДанныеФайлаСПУМ.Колонки.Добавить(
		"ДатаПроизводства",
		Новый ОписаниеТипов("Дата"));
		
	ДанныеФайлаСПУМ.Колонки.Добавить(
		"Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	ДанныеФайлаСПУМ.Колонки.Добавить(
		"Серия",
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	Возврат ДанныеФайлаСПУМ;

КонецФункции

&НаСервере
Процедура ЗаполнитьДокументПоДаннымФайлаСПУМ(ДанныеФайлаСПУМ)
	
	Объект.Изъятия.Очистить();
	Объект.Разагрегации.Очистить();
	Объект.Агрегации.Очистить();
	Объект.Штрихкоды.Очистить();
	
	Для каждого ДанныеСтрокиФайлаСПУМ Из ДанныеФайлаСПУМ Цикл
		
		// Строка ТЧ "Штрихкоды" по бутылке.
		СтрокаШтрихкодыБутылка = Объект.Штрихкоды.Добавить();
		СтрокаШтрихкодыБутылка.Штрихкод = ДанныеСтрокиФайлаСПУМ.ШтрихкодМарки;
		СтрокаШтрихкодыБутылка.ШтрихкодРодитель = ДанныеСтрокиФайлаСПУМ.ШтрихкодКоробки;
		
		// Строка ТЧ "Агрегации" по бутылке.
		СтрокаАгрегацииБутылка = Объект.Агрегации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАгрегацииБутылка, СтрокаШтрихкодыБутылка);
		
		// Строка ТЧ "Штрихкоды" по паллете.
		ПараметрыПоискаКоробкиПаллеты = Новый Структура(
			"Штрихкод, ШтрихкодРодитель",
			ДанныеСтрокиФайлаСПУМ.ШтрихкодКоробки,
			ДанныеСтрокиФайлаСПУМ.ШтрихкодПаллеты);
			
		Если Объект.Штрихкоды.НайтиСтроки(ПараметрыПоискаКоробкиПаллеты).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаШтрихкодыПаллета = Объект.Штрихкоды.Добавить();
		СтрокаШтрихкодыПаллета.Штрихкод = ДанныеСтрокиФайлаСПУМ.ШтрихкодКоробки;
		СтрокаШтрихкодыПаллета.ШтрихкодРодитель = ДанныеСтрокиФайлаСПУМ.ШтрихкодПаллеты;
		
		// Строка ТЧ "Агрегации" по паллете.
		СтрокаАгрегацииПаллета = Объект.Агрегации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАгрегацииПаллета, СтрокаШтрихкодыПаллета);
		
	КонецЦикла;
	
	Объект.Штрихкоды.Сортировать("ШтрихкодРодитель, Штрихкод");
	Объект.Агрегации.Сортировать("ШтрихкодРодитель, Штрихкод");
	
КонецПроцедуры

#КонецОбласти // Конец ЗагрузкаСПУМ

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
