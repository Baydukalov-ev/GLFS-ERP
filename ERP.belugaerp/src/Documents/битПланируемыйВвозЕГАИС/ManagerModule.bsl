#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_ПланируемыйВвозЕГАИС Тогда
	
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияПланируемогоВвоза Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
			
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;		
			
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_ПланируемыйВвозЕГАИС Тогда
	
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВУТМ;
		
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
			
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			СтатусОбработки,
			СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияПланируемогоВвоза Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ;
		
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
			
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
			
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			СтатусОбработки,
			СтатусыБазовыйПроцесс);
			
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;		
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Неопределено;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведения = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведения.Принят           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.Обрабатывается   = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведения.ОтменаПроведения = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.ОшибкаПроведения = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.Ошибка           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведения.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
			
		Статусы = СтатусыБазовыйПроцесс;
		
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ПланируемыйВвозЕГАИС Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияПланируемогоВвоза Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПолученЕГАИС",
				ДополнительныеПараметры.СтатусОбработки,
				Статусы,
				ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
			
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ПланируемыйВвозЕГАИС Тогда
			
			Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
			Статусы.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден;
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
				Статусы);
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияПланируемогоВвоза Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПроведенЕГАИС",
				ДополнительныеПараметры.СтатусОбработки,
				Статусы,
				ВыполнитьРасчетТекущегоСостояния);
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры для расчета статуса документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры для расчета статуса документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Документ, для которого требуется обновить статус.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа ЕГАИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(
		Таблица,
		0,
		Исходящий,
		Перечисления.ВидыДокументовЕГАИС.бг_ПланируемыйВвозЕГАИС,
		ДокументСсылка);
		
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(
		Таблица,
		0,
		Исходящий,
		Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияПланируемогоВвоза,
		ДокументСсылка);
		
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битПланируемыйВвозЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(
		ДокументСсылка,
		ПредыдущийСтатус,
		НовыйСтатус,
		ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, не требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битПланируемыйВвозЕГАИС КАК битПланируемыйВвозЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = битПланируемыйВвозЕГАИС.Ссылка
	|ГДЕ
	|	битПланируемыйВвозЕГАИС.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ битПланируемыйВвозЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (битПланируемыйВвозЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (битПланируемыйВвозЕГАИС.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битПланируемыйВвозЕГАИС КАК битПланируемыйВвозЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = битПланируемыйВвозЕГАИС.Ссылка
	|ГДЕ
	|	битПланируемыйВвозЕГАИС.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ битПланируемыйВвозЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (битПланируемыйВвозЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (битПланируемыйВвозЕГАИС.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область XMLСообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		Возврат ПланируемыйВвозXML(ДокументСсылка);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения Тогда
		Возврат ЗапросНаОтменуПроведенияXML(ДокументСсылка);
	КонецЕсли;

КонецФункции

#КонецОбласти // Конец XMLСообщенияЕГАИС

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Печать

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПланируемыйВвозЕГАИС";
	КомандаПечати.Представление = НСтр("ru = 'Планируемый ввоз ЕГАИС'");
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПланируемыйВвозЕГАИС") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПланируемыйВвозЕГАИС",
			НСтр("ru = 'Планируемый ввоз ЕГАИС'"),
			ПечатнаяФормаПланируемыйВвозЕГАИС(МассивОбъектов));
			
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти // Конец Печать

#КонецОбласти // Конец СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляПечатнойФормыПланируемыйВвозЕГАИС(МассивОбъектов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец КАК Владелец,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.бг_НомерРАР) КАК бг_НомерРАР,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.бг_ДатаВыдачи) КАК бг_ДатаВыдачи,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.бг_ДатаПрекращенияДействия) КАК бг_ДатаПрекращенияДействия,
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ Лицензии
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|ГДЕ
	|	НЕ ЛицензииПоставщиковАлкогольнойПродукции.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битПланируемыйВвозЕГАИС.Ссылка КАК Документ,
	|	битПланируемыйВвозЕГАИС.Номер КАК Номер,
	|	битПланируемыйВвозЕГАИС.Дата КАК Дата,
	|	битПланируемыйВвозЕГАИС.ИдентификаторЕГАИС КАК НомерПодтверждения,
	|	битПланируемыйВвозЕГАИС.ДатаРегистрацииДвижений КАК ДатаФиксации,
	|	битПланируемыйВвозЕГАИС.Организация КАК Организация,
	|	битПланируемыйВвозЕГАИС.Организация.НаименованиеПолное КАК ЗаявительНаименование,
	|	битПланируемыйВвозЕГАИС.Организация.ИНН КАК ЗаявительИНН,
	|	битПланируемыйВвозЕГАИС.Организация.КПП КАК ЗаявительКПП,
	|	битПланируемыйВвозЕГАИС.ОрганизацияЕГАИС.КодРегиона КАК ЗаявительКодСубъекта,
	|	ЕСТЬNULL(Лицензии.бг_НомерРАР, """") КАК ЛицензияНомерПоРееструРАР,
	|	ЕСТЬNULL(Лицензии.ДатаНачала, ДАТАВРЕМЯ(1, 1, 1)) КАК ЛицензияДатаВыдачи,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА Лицензии.бг_ДатаПрекращенияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА Лицензии.ДатаОкончания
	|			ИНАЧЕ Лицензии.бг_ДатаПрекращенияДействия
	|		КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)) КАК ЛицензияСрокДействия,
	|	битПланируемыйВвозЕГАИС.АлкогольнаяПродукция.ВидПродукции.Представление КАК ПродукцияВид,
	|	битПланируемыйВвозЕГАИС.АлкогольнаяПродукция.Производитель.Наименование КАК ПродукцияПроизводитель,
	|	битПланируемыйВвозЕГАИС.АлкогольнаяПродукция.Наименование КАК ПродукцияНаименование,
	|	битПланируемыйВвозЕГАИС.АлкогольнаяПродукция.Крепость КАК ПродукцияКрепость,
	|	битПланируемыйВвозЕГАИС.КоличествоДАЛ * битПланируемыйВвозЕГАИС.АлкогольнаяПродукция.Крепость / 100 КАК КоличествоДалБС,
	|	битПланируемыйВвозЕГАИС.Количество КАК КоличествоВТаре,
	|	битПланируемыйВвозЕГАИС.АлкогольнаяПродукция.Объем КАК ЕмкостьТары,
	|	битПланируемыйВвозЕГАИС.КоличествоДАЛ КАК КоличествоДАЛ,
	|	битПланируемыйВвозЕГАИС.Производитель.КодСтраны КАК ПроизводительКодСтраны
	|ИЗ
	|	Документ.битПланируемыйВвозЕГАИС КАК битПланируемыйВвозЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Лицензии КАК Лицензии
	|		ПО битПланируемыйВвозЕГАИС.Организация = Лицензии.Владелец
	|ГДЕ
	|	битПланируемыйВвозЕГАИС.Ссылка В(&Документы)";
	
	Запрос.УстановитьПараметр("Документы", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДляПечати = Новый Структура;
	
	ДанныеДляПечати.Вставить("ДанныеПоШапке", РезультатЗапроса.Выгрузить());
	
	ДанныеДляПечати.ДанныеПоШапке.Колонки.Добавить("ЗаявительАдрес", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	ДанныеДляПечати.ДанныеПоШапке.Колонки.Добавить("ПродукцияСтрана", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Для каждого ДанныеШапкиДокумента Из ДанныеДляПечати.ДанныеПоШапке Цикл
		
		ДанныеШапкиДокумента.ЗаявительАдрес = бг_ТранспортнаяИнформация.ФактическийАдресДоставкиЮрЛица(
			ДанныеШапкиДокумента.Организация);
			
		КоличествоДалБС_4знака = Окр(ДанныеШапкиДокумента.КоличествоДалБС, 4, РежимОкругления.Окр15как20);
		КоличествоДалБС_3знака = Окр(КоличествоДалБС_4знака, 3, РежимОкругления.Окр15как20);
		ДанныеШапкиДокумента.КоличествоДалБС = КоличествоДалБС_3знака;
					
		Если ЗначениеЗаполнено(ДанныеШапкиДокумента.ПроизводительКодСтраны) Тогда
			ДанныеШапкиДокумента.ПродукцияСтрана = Справочники.СтраныМира.НайтиПоКоду(ДанныеШапкиДокумента.ПроизводительКодСтраны);
		КонецЕсли;
			
	КонецЦикла;
		
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция ПечатнаяФормаПланируемыйВвозЕГАИС(МассивОбъектов)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПЛАНИРУЕМЫЙ_ВВОЗ_ЕГАИС";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляПечати = ДанныеДляПечатнойФормыПланируемыйВвозЕГАИС(МассивОбъектов);
	
	ЗаполнитьТабличныйДокументПланируемыйВвозЕГАИС(ТабличныйДокумент, ДанныеДляПечати);
			
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПланируемыйВвозЕГАИС(ТабличныйДокумент, ДанныеДляПечати)

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.битПланируемыйВвозЕГАИС.ПФ_MXL_ПланируемыйВвозЕГАИС");

	ЭтоПервыйДокумент = Истина;
	
	Для каждого ДанныеШапкиДокумента Из ДанныеДляПечати.ДанныеПоШапке Цикл
	
		Если ЭтоПервыйДокумент Тогда
			ЭтоПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьШапка.Параметры.Заполнить(ДанныеШапкиДокумента);
		ОбластьШапка.Параметры.ЛицензияДатаВыдачи = Формат(ДанныеШапкиДокумента.ЛицензияДатаВыдачи, "ДФ=dd.MM.yyyy");
		ОбластьШапка.Параметры.ЛицензияСрокДействия = Формат(ДанныеШапкиДокумента.ЛицензияСрокДействия, "ДФ=dd.MM.yyyy");
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
	КонецЦикла;

КонецПроцедуры

#Область XMLСообщенияЕГАИС

Функция ПланируемыйВвозXML(ДокументСсылка)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_ПланируемыйВвозЕГАИС;

	ДанныеДляПланируемогоВвозаXML = ДанныеДляПланируемогоВвозаXML(ДокументСсылка);
	
	Если Не ЗначениеЗаполнено(ДанныеДляПланируемогоВвозаXML.Импортер) Тогда
		Возврат	ПланируемыйВвозXMLСОшибкой(
			Операция,
			ДокументСсылка, 
			НСтр("ru = 'Не заполнен импортер.'"));
	КонецЕсли;
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		Операция,
		ДанныеДляПланируемогоВвозаXML.ФорматОбмена);
		
	ИмяТипа = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(
		Операция,
		ДанныеДляПланируемогоВвозаXML.ФорматОбмена);
	
	Если Не ЗначениеЗаполнено(ПространствоИмен) Или Не ЗначениеЗаполнено(ИмяТипа) Тогда
		Возврат ПланируемыйВвозXMLСОшибкой(
			Операция, 
			ДокументСсылка,
			СтрШаблон(
				НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"),
				ДанныеДляПланируемогоВвозаXML.ФорматОбмена));
	КонецЕсли;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	ПланируемыйВвозXDTO = ПланируемыйВвозXDTO(
		ПространствоИмен, 
		ДанныеДляПланируемогоВвозаXML,
		СообщениеXML);
		
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(
		ПланируемыйВвозXDTO,
		ДанныеДляПланируемогоВвозаXML.ИдентификаторФСРАР,
		ПространствоИмен,
		ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ДанныеДляПланируемогоВвозаXML.Импортер;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ДанныеДляПланируемогоВвозаXML.ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);
	
КонецФункции

Функция ЗапросНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияПланируемогоВвоза;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                           КАК Номер,
	|	Шапка.Дата                            КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
	|	
	|	Шапка.ИдентификаторЕГАИС              КАК ИдентификаторЕГАИС,
	|	Шапка.ОрганизацияЕГАИС                КАК ОрганизацияЕГАИС,
	|	Шапка.ОрганизацияЕГАИС.Код            КАК ИдентификаторФСРАР,
	|	Шапка.ОрганизацияЕГАИС.ФорматОбмена   КАК ФорматОбмена,
	|	Шапка.Ответственный                   КАК Ответственный
	|ИЗ
	|	Документ.битПланируемыйВвозЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка); //НомерВерсии

		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция,
		ДокументСсылка,
		НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
			
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "ClientId",      Шапка.ИдентификаторФСРАР, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "RequestNumber", Шапка.Номер,              СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "RequestDate",   ТекущаяДатаСеанса(),      СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "IPIRegId",      Шапка.ИдентификаторЕГАИС, СообщениеXML);
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ДанныеДляПланируемогоВвозаXML(ДокументСсылка)
	
	ДанныеДляПланируемогоВвозаXML = Новый Структура(
		"Идентификатор,
		|ИдентификаторФСРАР,
		|ФорматОбмена,
		|Номер,
		|Дата, 
		|ТаможенныйПост, 
		|Импортер,
		|АлкогольнаяПродукция,
		|Производитель, 
		|Количество,
		|КоличествоДАЛ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битПланируемыйВвозЕГАИС.Номер КАК Номер,
	|	битПланируемыйВвозЕГАИС.Дата КАК Дата,
	|	битПланируемыйВвозЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	битПланируемыйВвозЕГАИС.ОрганизацияЕГАИС.Код КАК ОрганизацияЕГАИСКод,
	|	битПланируемыйВвозЕГАИС.ОрганизацияЕГАИС.ФорматОбмена КАК ОрганизацияЕГАИСФорматОбмена,
	|	битПланируемыйВвозЕГАИС.ТаможенныйПост КАК ТаможенныйПост,
	|	битПланируемыйВвозЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	битПланируемыйВвозЕГАИС.Производитель КАК Производитель,
	|	битПланируемыйВвозЕГАИС.Количество КАК Количество,
	|	битПланируемыйВвозЕГАИС.КоличествоДАЛ КАК КоличествоДАЛ
	|ИЗ
	|	Документ.битПланируемыйВвозЕГАИС КАК битПланируемыйВвозЕГАИС
	|ГДЕ
	|	битПланируемыйВвозЕГАИС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеДляПланируемогоВвозаXML, Выборка);
			
			ДанныеДляПланируемогоВвозаXML.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
			ДанныеДляПланируемогоВвозаXML.ИдентификаторФСРАР = Выборка.ОрганизацияЕГАИСКод;
			ДанныеДляПланируемогоВвозаXML.ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(
				Выборка.ОрганизацияЕГАИСФорматОбмена);
			ДанныеДляПланируемогоВвозаXML.Номер = СокрЛП(Выборка.Номер);	
			ДанныеДляПланируемогоВвозаXML.Импортер = Выборка.ОрганизацияЕГАИС;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляПланируемогоВвозаXML;
	
КонецФункции

Функция ДанныеАлкогольнойПродукции(АлкогольнаяПродукция)

	ДанныеАлкогольнойПродукции = Новый Структура(
		"ТипПродукции,
		|ВидЛицензии,
		|НаименованиеПолное,
		|Наименование,
		|Код, 
		|Объем, 
		|Крепость,
		|КодВидаПродукции");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции = ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Упакованная)
	|		ИНАЧЕ КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции
	|	КОНЕЦ КАК ТипПродукции,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.ВидЛицензии КАК ВидЛицензии,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК НаименованиеПолное,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК Наименование,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Код КАК Код,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Объем КАК Объем,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Крепость КАК Крепость,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Код КАК КодВидаПродукции
	|ИЗ
	|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|ГДЕ
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", АлкогольнаяПродукция);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеАлкогольнойПродукции, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеАлкогольнойПродукции;

КонецФункции

Функция ПланируемыйВвозXMLСОшибкой(Операция, ДокументСсылка, ТекстОшибки)
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);	
	
КонецФункции

#Область XDTO

Функция ПланируемыйВвозXDTO(ПространствоИмен, ДанныеДляПланируемогоВвозаXML, СообщениеXML)
	
	InvoicePlannedImport = InvoicePlannedImport(ПространствоИмен, ДанныеДляПланируемогоВвозаXML, СообщениеXML);
	
	InvoicePlannedImport.Header = Header(
		ПространствоИмен,
		InvoicePlannedImport,
		ДанныеДляПланируемогоВвозаXML,
		СообщениеXML);
	
	InvoicePlannedImport.Content = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"Content",
		InvoicePlannedImport);
	
	Возврат InvoicePlannedImport; 

КонецФункции

Функция InvoicePlannedImport(ПространствоИмен, ДанныеДляПланируемогоВвозаXML, СообщениеXML)

	InvoicePlannedImport = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "InvoicePlannedImportType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		InvoicePlannedImport,
		"Identity",
		ДанныеДляПланируемогоВвозаXML.Идентификатор,
		СообщениеXML);
		
	Возврат InvoicePlannedImport;	

КонецФункции

Функция Header(ПространствоИмен, InvoicePlannedImport, ДанныеДляПланируемогоВвозаXML, СообщениеXML)

	Header = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", InvoicePlannedImport);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"NUMBER",
		ДанныеДляПланируемогоВвозаXML.Номер,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"Date",
		ДанныеДляПланируемогоВвозаXML.Дата,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TotalQuantity",
		ДанныеДляПланируемогоВвозаXML.Количество,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TotalQuantityDal",
		ДанныеДляПланируемогоВвозаXML.КоличествоДАЛ,
		СообщениеXML);
	
	Header.CustomsDepartment = OrgInfoRus_ClaimIssue(
		ДанныеДляПланируемогоВвозаXML.ТаможенныйПост,
		СообщениеXML);
		
	Header.Importer = OrgInfoRus_ClaimIssue(
		ДанныеДляПланируемогоВвозаXML.Импортер,
		СообщениеXML);
	
	Header.Product = ProductInfoForeign_v2(ДанныеДляПланируемогоВвозаXML, СообщениеXML);
	
	Возврат Header;
	
КонецФункции

Функция OrgInfoRus_ClaimIssue(ОрганизацияЕГАИС, СообщениеXML)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	OrgInfoRus_ClaimIssue = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoRus_ClaimIssue")); 
	
	ПоляОрганизацииЕГАИС = Новый Структура(
		"Код,
		|НаименованиеПолное,
		|ИНН,
		|КПП,
		|КодСтраны,
		|КодРегиона,
		|ПредставлениеАдреса");
	
	ДанныеОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, ПоляОрганизацииЕГАИС); 
	
	OrgInfoRus_ClaimIssue.UL = ULType_ClaimIssue(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML);
	
	Возврат OrgInfoRus_ClaimIssue;
	
КонецФункции

Функция OrgInfoRus_v2(ОрганизацияЕГАИС, СообщениеXML)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	OrgInfoRus_v2 = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoRus_v2")); 
	
	ПоляОрганизацииЕГАИС = Новый Структура(
		"Код,
		|НаименованиеПолное,
		|Наименование,
		|ИНН,
		|КПП,
		|КодСтраны,
		|КодРегиона,
		|ПредставлениеАдреса");
	
	ДанныеОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, ПоляОрганизацииЕГАИС); 
	
	OrgInfoRus_v2.UL = ULType(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML);
	
	Возврат OrgInfoRus_v2;
	
КонецФункции

Функция OrgInfoForeign_v2(ОрганизацияЕГАИС, СообщениеXML)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	OrgInfoForeign = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoForeign_v2")); 
	
	ПоляОрганизацииЕГАИС = Новый Структура(
		"Код,
		|НаименованиеПолное,
		|Наименование,
		|КодСтраны,
		|ПредставлениеАдреса,
		|ИНН,
		|ТипОрганизации");
	
	ДанныеОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, ПоляОрганизацииЕГАИС); 
	
	Если ДанныеОрганизацииЕГАИС.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		OrgInfoForeign.FO = FOType(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML);
	Иначе
		OrgInfoForeign.TS = TSType(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML);
	КонецЕсли;
	
	Возврат OrgInfoForeign;
	
КонецФункции

Функция ULType_ClaimIssue(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML)
	
	ULType_ClaimIssue = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ULType_ClaimIssue")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType_ClaimIssue,
		"ClientRegId",
		ДанныеОрганизацииЕГАИС.Код,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType_ClaimIssue,
		"FullName",
		ДанныеОрганизацииЕГАИС.НаименованиеПолное,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType_ClaimIssue,
		"INN",
		ДанныеОрганизацииЕГАИС.ИНН,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType_ClaimIssue,
		"KPP",
		ДанныеОрганизацииЕГАИС.КПП,
		СообщениеXML);
	
	ULType_ClaimIssue.address = OrgUrAddressTypeULFL(
		ПространствоИмен,
		"OrgAddressTypeULFL",
		ДанныеОрганизацииЕГАИС,
		СообщениеXML);
		
	ULType_ClaimIssue.address_ur = OrgUrAddressTypeULFL(
		ПространствоИмен, 
		"OrgUrAddressTypeULFL",
		ДанныеОрганизацииЕГАИС,
		СообщениеXML);
	
	Возврат ULType_ClaimIssue;
	
КонецФункции

Функция ULType(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML)
	
	ULType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ULType")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType,
		"ClientRegId",
		ДанныеОрганизацииЕГАИС.Код,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType,
		"FullName",
		ДанныеОрганизацииЕГАИС.НаименованиеПолное,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType,
		"INN",
		ДанныеОрганизацииЕГАИС.ИНН,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType,
		"KPP",
		ДанныеОрганизацииЕГАИС.КПП,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ULType,
		"ShortName",
		ДанныеОрганизацииЕГАИС.Наименование,
		СообщениеXML);
	
	ULType.address = OrgUrAddressTypeULFL(
		ПространствоИмен,
		"OrgAddressTypeULFL",
		ДанныеОрганизацииЕГАИС,
		СообщениеXML);
	
	Возврат ULType;
	
КонецФункции

Функция FOType(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML)
	
	FOType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "FOType")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(FOType, "ClientRegId", ДанныеОрганизацииЕГАИС.Код, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(FOType, "FullName", ДанныеОрганизацииЕГАИС.НаименованиеПолное, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(FOType, "ShortName", ДанныеОрганизацииЕГАИС.Наименование, СообщениеXML);
	
	FOType.address = OrgAddressTypeFOTS(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML);
	
	Возврат FOType;
	
КонецФункции

Функция TSType(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML)
	
	TSType = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TSType")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(TSType, "ClientRegId", ДанныеОрганизацииЕГАИС.Код, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(TSType, "FullName", ДанныеОрганизацииЕГАИС.НаименованиеПолное, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(TSType, "ShortName", ДанныеОрганизацииЕГАИС.Наименование, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(TSType, "TSNUM", ДанныеОрганизацииЕГАИС.ИНН, СообщениеXML);
	
	TSType.address = OrgAddressTypeFOTS(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML);
	
	Возврат TSType;
	
КонецФункции

Функция OrgUrAddressTypeULFL(ПространствоИмен, ИмяТипаАдреса, ДанныеОрганизацииЕГАИС, СообщениеXML)
	
	OrgUrAddressTypeULFL = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипаАдреса)); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		OrgUrAddressTypeULFL,
		"Country",
		Формат(ДанныеОрганизацииЕГАИС.КодСтраны,
		"ЧЦ=3; ЧН=; ЧВН="),
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		OrgUrAddressTypeULFL,
		"RegionCode",
		Формат(ДанныеОрганизацииЕГАИС.КодРегиона,
		"ЧЦ=2; ЧВН="),
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		OrgUrAddressTypeULFL,
		"description",
		СокрЛП(ДанныеОрганизацииЕГАИС.ПредставлениеАдреса),
		СообщениеXML);
	
	Возврат OrgUrAddressTypeULFL;
	
КонецФункции

Функция OrgAddressTypeFOTS(ПространствоИмен, ДанныеОрганизацииЕГАИС, СообщениеXML)
	
	OrgAddressFOTS = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgAddressTypeFOTS")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		OrgAddressFOTS,
		"Country",
		Формат(ДанныеОрганизацииЕГАИС.КодСтраны,
		"ЧЦ=3; ЧН=; ЧВН="),
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		OrgAddressFOTS,
		"description",
		СокрЛП(ДанныеОрганизацииЕГАИС.ПредставлениеАдреса),
		СообщениеXML);
	
	Возврат OrgAddressFOTS;
	
КонецФункции

Функция ProductInfoForeign_v2(ДанныеДляПланируемогоВвозаXML, СообщениеXML)

	ПространствоИмен = "http://fsrar.ru/WEGAIS/ProductRef_v2";
	
	Product = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ProductInfoForeign_v2")); 
	
	ДанныеАлкогольнойПродукции = ДанныеАлкогольнойПродукции(ДанныеДляПланируемогоВвозаXML.АлкогольнаяПродукция); 
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "ЭС");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССПП");
	
	ТипыПродукции = Новый Соответствие;
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.ПустаяСсылка(), "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Упакованная, "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Неупакованная, "Unpacked");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"UnitType",
		ТипыПродукции[ДанныеАлкогольнойПродукции.ТипПродукции],
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"Type",
		ТипыАП[ДанныеАлкогольнойПродукции.ВидЛицензии],
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"FullName",
		ДанныеАлкогольнойПродукции.НаименованиеПолное,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"ShortName",
		ДанныеАлкогольнойПродукции.Наименование,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"AlcCode",
		ДанныеАлкогольнойПродукции.Код,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"Capacity",
		ДанныеАлкогольнойПродукции.Объем,
		СообщениеXML);
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"AlcVolume",
		ДанныеАлкогольнойПродукции.Крепость,
		СообщениеXML);
		
	Product.Producer = OrgInfoForeign_v2(
		ДанныеДляПланируемогоВвозаXML.Производитель,
		СообщениеXML);
		
	Product.Importer = OrgInfoRus_v2(
		ДанныеДляПланируемогоВвозаXML.Импортер,
		СообщениеXML);	
		
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Product,
		"ProductVCode",
		ДанныеАлкогольнойПродукции.КодВидаПродукции,
		СообщениеXML);
	
	Возврат Product;
	
КонецФункции

#КонецОбласти // Конец XDTO

#КонецОбласти // Конец XMLСообщенияЕГАИС

#КонецОбласти

#КонецЕсли
