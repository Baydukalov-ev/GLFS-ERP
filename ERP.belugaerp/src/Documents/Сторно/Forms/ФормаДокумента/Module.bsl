
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	бг_ДобавитьКомандуВывестиДвиженияДокументаДляРедактирования();
	бг_ДобавитьЭлементыТаблицДвиженийРегистров();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_ВывестиДвиженияДокументаДляРедактирования(Команда)

	бг_ВывестиДвиженияДокументаНаФорму();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДвижений

&НаКлиенте
Процедура бг_ПриИзмененииТаблицыДвижений(Элемент)
	
	ИмяТаблицыРегистра = бг_ИмяТаблицыРегистраИзИмениТаблицыФормы(Элемент.Имя);
	
	НайденныеСтрокиТаблицыРегистров = Объект.бг_РегистрыДвижений.НайтиСтроки(
		Новый Структура("ИмяРегистра", ИмяТаблицыРегистра));
	Если ЗначениеЗаполнено(НайденныеСтрокиТаблицыРегистров) Тогда
		СтрокаТаблицыРегистров = НайденныеСтрокиТаблицыРегистров[0];
		СтрокаТаблицыРегистров.ДвиженияСкорректированы = Истина;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
&НаСервере
Процедура бг_ДобавитьКомандуВывестиДвиженияДокументаДляРедактирования()
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтаФорма,
		"бг_ВывестиДвиженияДокументаДляРедактирования",
		Элементы.ФормаКоманднаяПанель,
		НСтр("ru='Вывести движения документа для редактирования'"),
		"бг_ВывестиДвиженияДокументаДляРедактирования",
		"бг_ВывестиДвиженияДокументаДляРедактирования",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);
		
КонецПроцедуры
	
&НаСервере
Процедура бг_ДобавитьЭлементыТаблицДвиженийРегистров()

	бг_ГруппаТаблицыРегистров = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"ТаблицыРегистров",,
		ВидГруппыФормы.Страницы,
		Элементы.Автор);
		
	бг_ГруппаСтраницаРегистрыНакопления = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"РегистрыНакопления",
		бг_ГруппаТаблицыРегистров,
		ВидГруппыФормы.Страница);
	бг_ГруппаСтраницаРегистрыНакопления.Заголовок = "Регистры накопления";
		
	бг_ГруппаНастройкаРегистровНакопления = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"НастройкаРегистровНакопления",
		бг_ГруппаСтраницаРегистрыНакопления,
		ВидГруппыФормы.Страницы);
		
	бг_ГруппаСтраницаРегистрыСведений = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"РегистрыСведений",
		бг_ГруппаТаблицыРегистров,
		ВидГруппыФормы.Страница);
	бг_ГруппаСтраницаРегистрыСведений.Заголовок = "Регистры сведений";
		
	бг_ГруппаНастройкаРегистровСведений = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"НастройкаРегистровСведений",
		бг_ГруппаСтраницаРегистрыСведений,
		ВидГруппыФормы.Страницы);
		
	бг_ГруппаСтраницаРегистрыБухгалтерии = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"РегистрыБухгалтерии",
		бг_ГруппаТаблицыРегистров,
		ВидГруппыФормы.Страница);
	бг_ГруппаСтраницаРегистрыБухгалтерии.Заголовок = "Регистры бухгалтерии";
		
	бг_ГруппаНастройкаРегистровБухгалтерии = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"НастройкаРегистровБухгалтерии",
		бг_ГруппаСтраницаРегистрыБухгалтерии,
		ВидГруппыФормы.Страницы);
	
КонецПроцедуры

&НаСервере
Функция бг_ДвижемыеРегистрыДокумента(ДокументОбъект)
	
	Свойства = бг_СвойстваДокументаДляПолученияТаблицыДвиженийСторно();
	
	МенеджерСторнируемогоДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.СторнируемыйДокумент);
	МеханизмыДокумента    = ПроведениеДокументов.УчетныеМеханизмыДокумента(МенеджерСторнируемогоДокумента);
	МеханизмыКонфигурации = ПроведениеДокументов.УчетныеМеханизмыКонфигурации();
		
	ДвижимыеРегистры = Новый Структура;
	Для каждого Механизм Из МеханизмыДокумента Цикл
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);		
		ПараметрыМеханизма = МодульМеханизма.ПараметрыДляПроведенияДокумента(ДокументОбъект, Свойства); 
		
		Для каждого Регистр Из ПараметрыМеханизма.ПодчиненныеРегистры Цикл
			ДвижимыеРегистры.Вставить(Регистр.Имя);
		КонецЦикла;
		Для каждого Регистр Из ПараметрыМеханизма.НезависимыеРегистры Цикл
			ДвижимыеРегистры.Вставить(Регистр.Имя);
		КонецЦикла;
	КонецЦикла;
	
	ДвижимыеРегистры.Вставить("Хозрасчетный", Неопределено);
	
	Возврат ДвижимыеРегистры;
	
КонецФункции

&НаСервере
Функция бг_СвойстваДокументаДляПолученияТаблицыДвиженийСторно()
	
	Свойства = Новый Структура;
	Свойства.Вставить("Проведен", Истина);
	Свойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Свойства.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	Свойства.Вставить("ЭтоНовый", Истина);
	
	Возврат Свойства;
	
КонецФункции

&НаСервере
Функция бг_ДопПараметрыДокументаДляПолученияТаблицыДвиженийСторно()
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДополнительныеСвойства", Неопределено);
	ДопПараметры.Вставить("МенеджерВременныхТаблиц", Неопределено);
	ДопПараметры.Вставить("ПолучитьТекстыЗапроса", Ложь);
	ДопПараметры.Вставить("ТолькоПомеченные", Ложь);
	
	Возврат ДопПараметры;
	
КонецФункции

&НаСервере
Функция бг_СписокРегистровИзТаблицДвижений(ТаблицыДвижений)
	
	СписокРегистров = Новый СписокЗначений;
	
	Для Каждого КлючЗначение Из ТаблицыДвижений Цикл 
		ИмяРегистра = бг_ИмяРегистраИзИмениТаблицыДвижений(КлючЗначение.Ключ);
		СписокРегистров.Добавить(ИмяРегистра,,Истина);	
	КонецЦикла;
	
	Возврат СписокРегистров;
	
КонецФункции

&НаСервере
Функция бг_ИмяРегистраИзИмениТаблицыДвижений(ИмяТаблицыДвиженийРегистра)
	
	ИмяРегистра = СтрЗаменить(ИмяТаблицыДвиженийРегистра, "Таблица", "");
	
	Возврат ИмяРегистра;
	
КонецФункции

&НаСервере
Процедура бг_СоздатьЭлементыТаблицДвиженийНаФорме(СписокРегистров)

	Для Каждого СтрокаРегистра Из СписокРегистров Цикл
		ИмяРегистра = СтрокаРегистра.Значение;
		
		НайденныеСтрокиТаблицыРегистров = Объект.бг_РегистрыДвижений.НайтиСтроки(Новый Структура("ИмяРегистра", ИмяРегистра));
		Если Не ЗначениеЗаполнено(НайденныеСтрокиТаблицыРегистров) Тогда
			СтрокаТаблицыРегистров = Объект.бг_РегистрыДвижений.Добавить();
			СтрокаТаблицыРегистров.ИмяРегистра = ИмяРегистра;
		КонецЕсли;
		
		бг_ПоказатьТаблицуРегистраНаСтранице(ИмяРегистра);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура бг_ПоказатьТаблицуРегистраНаСтранице(ИмяРегистра)

	Если Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено Тогда
		СтраницаРегистра      = Элементы.НастройкаРегистровНакопления;
		МенеджерРегистра      = РегистрыНакопления[ИмяРегистра];
		МетаданныеРегистра    = Метаданные.РегистрыНакопления[ИмяРегистра];
		РегистрИмеетПолеПериод= Истина;
	ИначеЕсли Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
		СтраницаРегистра      = Элементы.НастройкаРегистровСведений;
		МенеджерРегистра      = РегистрыСведений[ИмяРегистра];
		МетаданныеРегистра    = Метаданные.РегистрыСведений[ИмяРегистра];
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) <> Неопределено Тогда
		СтраницаРегистра      = Элементы.НастройкаРегистровБухгалтерии;
		МенеджерРегистра      = РегистрыБухгалтерии[ИмяРегистра];
		МетаданныеРегистра    = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
		РегистрИмеетПолеПериод= Истина;
	Иначе
		Возврат;
	КонецЕсли;

	КолонкиТаблицыРегистра = бг_КолонкиТаблицыРегистра(МенеджерРегистра, МетаданныеРегистра);
	
	СтраницаТаблицыРегистра = Элементы.Найти(бг_ИмяСтраницыРегистра(ИмяРегистра));
	Если СтраницаТаблицыРегистра = Неопределено Тогда
		СтраницаТаблицыРегистра = бг_СтраницаТаблицыРегистра(
			бг_ИмяСтраницыРегистра(ИмяРегистра),
			МетаданныеРегистра.Синоним,
			СтраницаРегистра);
	КонецЕсли;

	ТаблицаФормы = Элементы.Найти(бг_ИмяТаблицыДвиженийРегистра(ИмяРегистра));
	Если ТаблицаФормы = Неопределено Тогда
		ТаблицаФормы = бг_ТаблицаФормыРегистра(ИмяРегистра, КолонкиТаблицыРегистра, СтраницаТаблицыРегистра);
	КонецЕсли;

	Если ТаблицаФормы <> Неопределено Тогда
		ТаблицаФормы.УстановитьДействие("ПриИзменении", "бг_ПриИзмененииТаблицыДвижений");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_УдалитьСтраницуРегистра(ИмяРегистра)

	Элементы.Удалить(Элементы.Найти(бг_ИмяСтраницыРегистра(ИмяРегистра)));

КонецПроцедуры

&НаСервере
Функция бг_КолонкиТаблицыРегистра(МенеджерРегистра, МетаданныеРегистра)

	ТаблицаРегистра = МенеджерРегистра.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	бг_УдалитьСлужебныеКолонкиТаблицыДвижений(ТаблицаРегистра, МетаданныеРегистра);

	КолонкиТаблицыРегистра = Новый Массив;
	Для Каждого Колонка Из ТаблицаРегистра.Колонки Цикл
		ИнформацияОКолонке = Новый Структура(
			"Имя, Заголовок, СвязиПараметровВыбора", Колонка.Имя);
		КолонкиТаблицыРегистра.Добавить(ИнформацияОКолонке);
	КонецЦикла;

	// Обновление заголовков колонок таблицы по синонимам полей регистра.
	ВыдыПолейРегистра = Новый Массив;
	ВыдыПолейРегистра.Добавить("Измерения");
	ВыдыПолейРегистра.Добавить("Ресурсы");
	ВыдыПолейРегистра.Добавить("Реквизиты");

	Для Каждого ВидПоля Из ВыдыПолейРегистра Цикл
		Для Каждого Поле Из МетаданныеРегистра[ВидПоля] Цикл
			Для Каждого КолонкаТаблицы Из КолонкиТаблицыРегистра Цикл
				Если КолонкаТаблицы.Имя = Поле.Имя Тогда
					КолонкаТаблицы.Заголовок             = Поле.Синоним;
					КолонкаТаблицы.СвязиПараметровВыбора = Поле.СвязиПараметровВыбора;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Возврат КолонкиТаблицыРегистра;

КонецФункции

&НаСервере
Функция бг_СтраницаТаблицыРегистра(ИмяСтраницы, Заголовок, Родитель)

	НовыйЭлемент = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Родитель);
	НовыйЭлемент.Вид                      = ВидГруппыФормы.Страница;
	НовыйЭлемент.Заголовок                = Заголовок;
	НовыйЭлемент.РастягиватьПоВертикали   = Истина;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;

	Возврат НовыйЭлемент;

КонецФункции

&НаСервере
Функция бг_ИмяСтраницыРегистра(ИмяРегистра)

	Возврат "Страница" + ИмяРегистра;

КонецФункции

&НаСервере
Функция бг_ИмяТаблицыДвиженийРегистра(ИмяРегистра)

	Возврат "ТаблицаДвижений_" + ИмяРегистра;

КонецФункции

&НаСервере
Функция бг_ИмяТаблицыРегистраИзИмениТаблицыФормы(ИмяТаблицыФормы)

	Возврат СтрЗаменить(ИмяТаблицыФормы, "ТаблицаДвижений_", "");

КонецФункции

&НаСервере
Функция бг_ТаблицаФормыРегистра(ИмяРегистра, КолонкиТаблицы, Родитель)
	
	Если Не Объект.Движения.Свойство(ИмяРегистра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаФормы = Элементы.Добавить(бг_ИмяТаблицыДвиженийРегистра(ИмяРегистра), Тип("ТаблицаФормы"), Родитель);
	ТаблицаФормы.ПутьКДанным      = "Объект.Движения." + ИмяРегистра;
	Родитель.ПутьКДаннымЗаголовка = ТаблицаФормы.ПутьКДанным + ".КоличествоСтрок";

	ДобавленныеПоляФормы = Новый Массив;
	Для Каждого Колонка Из КолонкиТаблицы Цикл	
		ПолеФормы = Элементы.Добавить(ТаблицаФормы.Имя + Колонка.Имя, Тип("ПолеФормы"), ТаблицаФормы);
		ПолеФормы.ПутьКДанным           = ТаблицаФормы.ПутьКДанным + "." + Колонка.Имя;
		ПолеФормы.Заголовок             = Колонка.Заголовок;
		ПолеФормы.Вид                   = ВидПоляФормы.ПолеВвода;

		ДобавленныеПоляФормы.Добавить(ПолеФормы);
	КонецЦикла;

	Счетчик = 0;
	Для Каждого ПолеФормы Из ДобавленныеПоляФормы Цикл
		Если КолонкиТаблицы[Счетчик].СвязиПараметровВыбора <> Неопределено 
			И КолонкиТаблицы[Счетчик].СвязиПараметровВыбора.Количество() > 0 Тогда
			ПолеФормы.СвязиПараметровВыбора = бг_СвязиПараметровВыбора(
				КолонкиТаблицы[Счетчик].СвязиПараметровВыбора,
				"Элементы." + ТаблицаФормы.Имя + ".ТекущиеДанные");
		КонецЕсли;

		Счетчик = Счетчик + 1;
	КонецЦикла;

	Возврат ТаблицаФормы;

КонецФункции

&НаСервере
Функция бг_СвязиПараметровВыбора(ИсходныйМассив, ПутьКДанным)

	НовыйМассив = Новый Массив;
	Для Каждого Элемент Из ИсходныйМассив Цикл
		НовыйМассив.Добавить(
			Новый СвязьПараметраВыбора(Элемент.Имя, ПутьКДанным + "." + Элемент.ПутьКДанным, Элемент.ИзменениеЗначения));
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(НовыйМассив);

КонецФункции

&НаСервере
Процедура бг_ЗаполнитьТаблицыДвижений(ТаблицыДвижений)

	Для Каждого КлючЗначение Из ТаблицыДвижений Цикл 
		ИмяРегистра = бг_ИмяРегистраИзИмениТаблицыДвижений(КлючЗначение.Ключ);
		Если Не Объект.Движения.Свойство(ИмяРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект.Движения[ИмяРегистра].Загрузить(КлючЗначение.Значение);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура бг_УдалитьПустыеТаблицыДвижений(ТаблицыДвижений)
	
	ТаблицыДвиженийРегистраНаУдаление = Новый Массив;	
	Для Каждого КлючЗначение Из ТаблицыДвижений Цикл
		Если КлючЗначение.Значение.Количество() = 0 Тогда
			ТаблицыДвиженийРегистраНаУдаление.Добавить(КлючЗначение.Ключ);	
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого ИмяТаблицыДвиженийРегистра Из ТаблицыДвиженийРегистраНаУдаление Цикл
		ТаблицыДвижений.Удалить(ИмяТаблицыДвиженийРегистра);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура бг_ВывестиДвиженияДокументаНаФорму()	
	
	СписокРегистров = бг_РегистрыСДвижениямиДокумента();	
	бг_СоздатьЭлементыТаблицДвиженийНаФорме(СписокРегистров);
	
КонецПроцедуры

&НаСервере
Функция бг_РегистрыСДвижениямиДокумента()
	
	СписокРегистровСДвижениями = Новый СписокЗначений;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");	
	ДвижемыеРегистры = бг_ДвижемыеРегистрыДокумента(ДокументОбъект);
	
	Для Каждого ДанныеРегистра Из ДвижемыеРегистры Цикл
		ИмяРегистра = ДанныеРегистра.Ключ;
		Если ДокументОбъект.Движения.Найти(ИмяРегистра) <> Неопределено
			И Объект.Движения[ИмяРегистра].Количество() > 0 Тогда	
			СписокРегистровСДвижениями.Добавить(ИмяРегистра,,Истина);	
		КонецЕсли;	
	КонецЦикла;
		
	Возврат СписокРегистровСДвижениями;
	
КонецФункции

&НаСервере
Процедура бг_УдалитьСлужебныеКолонкиТаблицыДвижений(ТаблицаРегистра, МетаданныеРегистра)

	Если ТаблицаРегистра.Колонки.Найти("Регистратор") <> Неопределено Тогда
		ТаблицаРегистра.Колонки.Удалить("Регистратор");
	КонецЕсли;
	Если ТаблицаРегистра.Колонки.Найти("МоментВремени") <> Неопределено Тогда
		ТаблицаРегистра.Колонки.Удалить("МоментВремени");
	КонецЕсли;
	
	Если Метаданные.РегистрыБухгалтерии.Найти(МетаданныеРегистра.Имя) <> Неопределено Тогда
		Для НомерСубконто = 1 По 3 Цикл
			ИмяКолонки = СтрШаблон("ВидСубконтоДт%1", НомерСубконто);
			Если ТаблицаРегистра.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаРегистра.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
			
			ИмяКолонки = СтрШаблон("ВидСубконтоКт%1", НомерСубконто);
			Если ТаблицаРегистра.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				ТаблицаРегистра.Колонки.Удалить(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
