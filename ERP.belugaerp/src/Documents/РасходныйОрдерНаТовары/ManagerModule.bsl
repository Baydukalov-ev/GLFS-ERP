#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ПодчиненныеДокументы(РасходныйОрдерНаТовары) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	битОтражениеФактаПоРасходномуОрдеру.Ссылка КАК Документ,
	|	битОтражениеФактаПоРасходномуОрдеру.Проведен КАК Проведен,
	|	битОтражениеФактаПоРасходномуОрдеру.ПометкаУдаления КАК ПометкаУдаления,
	|	""битОтражениеФактаПоРасходномуОрдеру"" КАК ИмяДокумента
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары = &РасходныйОрдерНаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	битПереупаковка.Ссылка,
	|	битПереупаковка.Проведен,
	|	битПереупаковка.ПометкаУдаления,
	|	""битОтражениеФактаПоРасходномуОрдеру""
	|ИЗ
	|	Документ.битПереупаковка КАК битПереупаковка
	|ГДЕ
	|	битПереупаковка.РасходныйОрдерНаТовары = &РасходныйОрдерНаТовары";	
		
	Запрос.УстановитьПараметр("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	ПодчиненныеДокументы = РезультатЗапроса.Выгрузить();
	
	Возврат ПодчиненныеДокументы;

КонецФункции

// Возвращает распоряжение по расходному ордеру.
//
// Параметры:
//  РасходныйОрдерНаТовары - ДокументСсылка.РасходныйОрдерНаТовары - ссылка на документ расходный ордер.
// 
// Возвращаемое значение:
//  ДокументСсылка
//
Функция бг_Распоряжение(РасходныйОрдерНаТовары) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", РасходныйОрдерНаТовары);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();	
			Возврат Выборка.Распоряжение;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

Функция бг_ДанныеОрдераWMS(РасходныйОрдерНаТовары) Экспорт
	
	ДанныеОрдера = Новый Структура;
	ДанныеОрдера.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	ДанныеОрдера.Вставить("ЕстьАлкогольнаяПродукция", Ложь);
	ДанныеОрдера.Вставить("ЕстьМаркируемаяАлкогольнаяПродукция", Ложь);
	ДанныеОрдера.Вставить("ТипВнешнейСкладскойСистемы", Перечисления.бг_ТипыВнешнихСкладскихСистем.ПустаяСсылка());
	ДанныеОрдера.Вставить("СкладскаяОперация", Перечисления.СкладскиеОперации.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(РасходныйОрдерНаТовары) Тогда
		Возврат ДанныеОрдера;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Склад КАК Склад,
	|	РасходныйОрдерНаТовары.бг_ЕстьАлкогольнаяПродукция КАК ЕстьАлкогольнаяПродукция,
	|	РасходныйОрдерНаТовары.бг_ЕстьМаркируемаяАлкогольнаяПродукция КАК ЕстьМаркируемаяАлкогольнаяПродукция,
	|	РасходныйОрдерНаТовары.Склад.бг_ТипВнешнейСкладскойСистемы КАК ТипВнешнейСкладскойСистемы,
	|	РасходныйОрдерНаТовары.СкладскаяОперация КАК СкладскаяОперация
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка = &РасходныйОрдерНаТовары";
	
	Запрос.УстановитьПараметр("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеОрдера, Выборка);
	КонецЕсли;
	
	Возврат ДанныеОрдера;
	
КонецФункции

// Функция - Возвращает данные маршрутного листа по расходному ордеру
//
// Параметры:
//	РасходныйОрдерНаТовары - ДокументСсылка.РасходныйОрдерНаТовары - ссылка на документ расходный ордер.
// 
// Возвращаемое значение:
//	ДанныеМаршрутногоЛиста - ТаблицаЗначений
//
Функция бг_ДанныеМаршрутногоЛиста(РасходныйОрдерНаТовары) Экспорт
	
	ДанныеПоМаршрутномуЛисту = Новый Структура(
		"СозданыВсеОрдера, МаршрутныйЛист, ОтгрузкаИзERP",
		Ложь, Документы.битМаршрутныйЛист.ПустаяСсылка(), Ложь);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТоварыРаспоряжения.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТоварыРаспоряжения.Распоряжение КАК ЗаказКлиента
	|ПОМЕСТИТЬ РаспоряженияРасходногоОрдера
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыРаспоряжения
	|ГДЕ
	|	РасходныйОрдерНаТоварыРаспоряжения.Ссылка = &РасходныйОрдерНаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	битМаршрутныйЛистЗаказы.Ссылка КАК Ссылка,
	|	битМаршрутныйЛистЗаказы.Ссылка.ОтгрузкаИзERP КАК ОтгрузкаИзERP
	|ПОМЕСТИТЬ МаршрутныйЛист
	|ИЗ
	|	РаспоряженияРасходногоОрдера КАК РаспоряженияРасходногоОрдера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист.Заказы КАК битМаршрутныйЛистЗаказы
	|		ПО (битМаршрутныйЛистЗаказы.Заказ = РаспоряженияРасходногоОрдера.ЗаказКлиента)
	|ГДЕ
	|	НЕ битМаршрутныйЛистЗаказы.Ссылка.ПометкаУдаления
	|	И битМаршрутныйЛистЗаказы.Ссылка.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	битМаршрутныйЛистЗаказы.Заказ КАК Заказ,
	|	МаршрутныйЛист.Ссылка КАК Ссылка,
	|	МаршрутныйЛист.ОтгрузкаИзERP КАК ОтгрузкаИзERP
	|ПОМЕСТИТЬ МаршрутныйЛистЗаказы
	|ИЗ
	|	МаршрутныйЛист КАК МаршрутныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист.Заказы КАК битМаршрутныйЛистЗаказы
	|		ПО МаршрутныйЛист.Ссылка = битМаршрутныйЛистЗаказы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	битМаршрутныйЛистЗаказы.Заказ,
	|	МаршрутныйЛист.Ссылка,
	|	МаршрутныйЛист.ОтгрузкаИзERP
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка) = КОЛИЧЕСТВО(РАЗЛИЧНЫЕ МаршрутныйЛистЗаказы.Заказ) КАК СозданыВсеОрдера,
	|	МаршрутныйЛистЗаказы.Ссылка КАК МаршрутныйЛист,
	|	МаршрутныйЛистЗаказы.ОтгрузкаИзERP КАК ОтгрузкаИзERP
	|ИЗ
	|	МаршрутныйЛистЗаказы КАК МаршрутныйЛистЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ПО МаршрутныйЛистЗаказы.Заказ = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|			И (НЕ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ПометкаУдаления)
	|			И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныйЛистЗаказы.Ссылка,
	|	МаршрутныйЛистЗаказы.ОтгрузкаИзERP";
	
	РезультатЗапроса = Запрос.Выполнить();

	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеПоМаршрутномуЛисту, Выборка);
	КонецЕсли;
	
	Возврат ДанныеПоМаршрутномуЛисту;
	
КонецФункции

// Возвращает организацию по распоряжению расходного ордера.
//
// Параметры:
//  РасходныйОрдерНаТовары - ДокументСсылка.РасходныйОрдерНаТовары - ссылка на документ расходный ордер.
// 
// Возвращаемое значение:
//  Организация - СправочникСсылка
//
Функция бг_ОрганизацияОрдера(РасходныйОрдерНаТовары) Экспорт
	
	Организация = Справочники.Организации.ПустаяСсылка();		
	
	Распоряжение = бг_Распоряжение(РасходныйОрдерНаТовары);
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Распоряжение.Метаданные()) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Организация");
	КонецЕсли;	
			
	Возврат Организация;
	
КонецФункции


#КонецОбласти                                                                             

#Область СлужебныйПрограммныйИнтерфейс

#Область Печать

&Перед("ДобавитьКомандыПечати")
Процедура бг_ДобавитьКомандыПечати(КомандыПечати)
	
	// Наряд-задание
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.бг_ПечатьНарядЗаданий";
	КомандаПечати.Идентификатор = "бг_НарядЗадание";
	КомандаПечати.Представление = НСтр("ru = 'Наряд-задание'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Возвращает данные для формирования печатной формы "Наряд-задание".
//
// Параметры:
//	ПараметрыПечати - Структура - дополнительные параметры печати.
//	РасходныеОрдера - Массив - Расходные ордера, по которым необходимо получить данные.
//
// Возвращаемое значение:
//	Структура - Структура с полями: ДанныеПоШапке, ДанныеПоТоварам и  ДанныеИтоговПоТоварам.
//
Функция бг_ДанныеДляПечатнойФормыНарядЗадание(ПараметрыПечати, РасходныеОрдера) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК РасходныйОрдер,
	|	МАКСИМУМ(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение) КАК ЗаказКлиента
	|ПОМЕСТИТЬ РасходныеОрдераЗаказы
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка В(&РасходныеОрдера)
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение ССЫЛКА Документ.ЗаказКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Серия КАК Серия,
	|	МАКСИМУМ(ЗаказКлиентаТовары.бг_УпаковкаПаллета) КАК УпаковкаПаллета
	|ПОМЕСТИТЬ ТоварыПаллетыЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				РасходныеОрдераЗаказы.ЗаказКлиента КАК ЗаказКлиента
	|			ИЗ
	|				РасходныеОрдераЗаказы КАК РасходныеОрдераЗаказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Ссылка,
	|	ЗаказКлиентаТовары.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	Номенклатура,
	|	Серия,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныеОрдераЗаказы.РасходныйОрдер КАК Документ,
	|	ДокументЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ДокументЗаказКлиента.Номер КАК НомерРаспоряжения,
	|	ДокументЗаказКлиента.Дата КАК ДатаРаспоряжения,
	|	ДокументЗаказКлиента.Менеджер КАК МенеджерЗаказа,
	|	ДокументЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДокументЗаказКлиента.Контрагент КАК Контрагент,
	|	ДокументЗаказКлиента.Грузополучатель КАК Грузополучатель,
	|	ДокументЗаказКлиента.Комментарий КАК КомментарийЗаказа,
	|   РасходныеОрдераЗаказы.РасходныйОрдер.Номер КАК РасходныйОрдерНомер,
	|   РасходныеОрдераЗаказы.РасходныйОрдер.Дата КАК РасходныйОрдерДата,
	|	ТранспортнаяИнформация.Водитель КАК Водитель,
	|	ТранспортнаяИнформация.Перевозчик КАК Перевозчик,
	|	ТранспортнаяИнформация.ВидПеревозки КАК ВидПеревозки,
	|	ТранспортнаяИнформация.ТранспортноеСредство КАК ТранспортноеСредство
	|	ПОМЕСТИТЬ ДанныеЗаказаКлиентаИОрдера
	|ИЗ
	|	РасходныеОрдераЗаказы КАК РасходныеОрдераЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ПО РасходныеОрдераЗаказы.ЗаказКлиента = ДокументЗаказКлиента.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бг_ТранспортнаяИнформация.Объект КАК Объект,
	|			МАКСИМУМ(бг_ТранспортнаяИнформация.Водитель) КАК Водитель,
	|			МАКСИМУМ(бг_ТранспортнаяИнформация.ТранспортноеСредство) КАК ТранспортноеСредство,
	|			МАКСИМУМ(бг_ТранспортнаяИнформация.Перевозчик) КАК Перевозчик,
	|			МАКСИМУМ(бг_ТранспортнаяИнформация.ВидПеревозки) КАК ВидПеревозки
	|		ИЗ
	|			РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|		ГДЕ
	|			бг_ТранспортнаяИнформация.Объект В
	|					(ВЫБРАТЬ
	|						РасходныеОрдераЗаказы.ЗаказКлиента КАК ЗаказКлиента
	|					ИЗ
	|						РасходныеОрдераЗаказы КАК РасходныеОрдераЗаказы)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бг_ТранспортнаяИнформация.Объект) КАК ТранспортнаяИнформация
	|		ПО РасходныеОрдераЗаказы.ЗаказКлиента = ТранспортнаяИнформация.Объект
	|;
	|////////////////////////////////////////////////////////////////////////////////
    |	ВЫБРАТЬ
	|	ДанныеЗаказаКлиентаИОрдера.ЗаказКлиента КАК ЗаказКлиента,
	|	МАКСИМУМ(ЕСТЬNULL(битМаршрутныйЛистЗаказы.Ссылка, ЗНАЧЕНИЕ(Документ.битМаршрутныйЛист.ПустаяСсылка))) КАК бг_МаршрутныйЛист
	|ПОМЕСТИТЬ бг_МаршрутныеЛисты
	|ИЗ
	|	ДанныеЗаказаКлиентаИОрдера КАК ДанныеЗаказаКлиентаИОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист.Заказы КАК битМаршрутныйЛистЗаказы
	|		ПО ДанныеЗаказаКлиентаИОрдера.ЗаказКлиента = битМаршрутныйЛистЗаказы.Заказ
	|			И (НЕ битМаршрутныйЛистЗаказы.Ссылка.ПометкаУдаления)
	|			И (битМаршрутныйЛистЗаказы.Ссылка.Проведен)
    |СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказаКлиентаИОрдера.ЗаказКлиента
	|; 
	|////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|	бг_МаршрутныеЛисты.бг_МаршрутныйЛист.Номер КАК МаршрутныйЛистНомер,
	|	РеализацияТоваровУслуг.Номер КАК НомерНакладной,
	|	ДанныеЗаказаКлиентаИОрдера.Документ КАК Документ,
	|	ДанныеЗаказаКлиентаИОрдера.ЗаказКлиента.бг_НомерДокументаУПП КАК НомерДокументаУПП,
	|	ДанныеЗаказаКлиентаИОрдера.ЗаказКлиента КАК ЗаказКлиента,
	|	ДанныеЗаказаКлиентаИОрдера.НомерРаспоряжения КАК НомерРаспоряжения,
	|	ДанныеЗаказаКлиентаИОрдера.ДатаРаспоряжения КАК ДатаРаспоряжения,
	|	ДанныеЗаказаКлиентаИОрдера.МенеджерЗаказа КАК МенеджерЗаказа,
	|	ДанныеЗаказаКлиентаИОрдера.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДанныеЗаказаКлиентаИОрдера.Контрагент КАК Контрагент,
	|	ДанныеЗаказаКлиентаИОрдера.Грузополучатель КАК Грузополучатель,
	|	ДанныеЗаказаКлиентаИОрдера.КомментарийЗаказа КАК КомментарийЗаказа,
	|	ДанныеЗаказаКлиентаИОрдера.РасходныйОрдерНомер КАК РасходныйОрдерНомер,
	|	ДанныеЗаказаКлиентаИОрдера.РасходныйОрдерДата КАК РасходныйОрдерДата,
	|	ДанныеЗаказаКлиентаИОрдера.Перевозчик КАК Перевозчик,
	|	ДанныеЗаказаКлиентаИОрдера.ВидПеревозки КАК ВидПеревозки,
	|	ДанныеЗаказаКлиентаИОрдера.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ДанныеЗаказаКлиентаИОрдера.Водитель КАК Водитель
	|ИЗ
	|	ДанныеЗаказаКлиентаИОрдера КАК ДанныеЗаказаКлиентаИОрдера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслуг.ЗаказКлиента = ДанныеЗаказаКлиентаИОрдера.ЗаказКлиента)
	|			И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	|			И (РеализацияТоваровУслуг.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ бг_МаршрутныеЛисты КАК бг_МаршрутныеЛисты
	|		ПО (ДанныеЗаказаКлиентаИОрдера.ЗаказКлиента = бг_МаршрутныеЛисты.ЗаказКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Документ,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура.бг_КонтрагентПроизводитель КАК НоменклатураПроизводитель,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия КАК Серия,
	|	ЕСТЬNULL(УпаковкиПаллеты.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета,
	|	ЕСТЬNULL(УпаковкиКоробки.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаКоробка,
	|	ЕСТЬNULL(УпаковкиПаллеты.бг_КодЕК_Номенклатуры, РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура.Код) КАК КодЕКНоменклатуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА УпаковкиКоробки.Знаменатель <> 0
	|				ТОГДА УпаковкиКоробки.Числитель / УпаковкиКоробки.Знаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0) КАК БутылокВКоробке,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА УпаковкиПаллеты.Знаменатель <> 0
	|				ТОГДА УпаковкиПаллеты.Числитель / УпаковкиПаллеты.Знаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0) КАК БутылокВПаллете,
	|	ЕСТЬNULL(УпаковкиПаллеты.КоличествоУпаковок, 0) КАК КоробокВПаллете,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество КАК КоличествоБутылок,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ВЫБОР
	|				КОГДА УпаковкиКоробки.Знаменатель <> 0
	|					ТОГДА РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество / УпаковкиКоробки.Числитель / УпаковкиКоробки.Знаменатель
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0) КАК ЧИСЛО(15, 2)) КАК КоличествоКоробок,
	|	ЕСТЬNULL(УпаковкиКоробки.Вес, 0) КАК ВесКоробки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ВЫБОР
	|				КОГДА УпаковкиКоробки.Знаменатель <> 0
	|					ТОГДА УпаковкиКоробки.Вес * РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество / УпаковкиКоробки.Числитель / УпаковкиКоробки.Знаменатель
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0) КАК ЧИСЛО(15, 2)) КАК Вес
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыПаллетыЗаказа КАК ТоварыПаллетыЗаказа
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиПаллеты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиКоробки
	|				ПО УпаковкиПаллеты.Родитель = УпаковкиКоробки.Ссылка
	|					И (УпаковкиКоробки.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка))
	|			ПО ТоварыПаллетыЗаказа.УпаковкаПаллета = УпаковкиПаллеты.Ссылка
	|				И (УпаковкиПаллеты.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета))
	|				И ТоварыПаллетыЗаказа.Номенклатура = УпаковкиПаллеты.Владелец
	|		ПО РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = ТоварыПаллетыЗаказа.ЗаказКлиента
	|			И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура = ТоварыПаллетыЗаказа.Номенклатура
	|			И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия = ТоварыПаллетыЗаказа.Серия";
	
	Запрос.УстановитьПараметр("РасходныеОрдера", РасходныеОрдера);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	
	ДанныеДляПечати.Вставить("ДанныеПоШапке", ПакетРезультатовЗапроса[4].Выгрузить());
	
	ДанныеПоТоварам = ПакетРезультатовЗапроса[5].Выгрузить();
	Обработки.бг_ПечатьНарядЗаданий.ЗаполнитьЦелоеКоличествоУпаковок(ДанныеПоТоварам);
	ДанныеДляПечати.Вставить("ДанныеПоТоварам", ДанныеПоТоварам);
	
	ДанныеДляПечати.Вставить(
		"ДанныеИтоговПоТоварам",
		Обработки.бг_ПечатьНарядЗаданий.ИтогиПоТоварам(ДанныеПоТоварам));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#КонецОбласти // Конец Печать

#КонецОбласти // Конец СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// В запрос добавлено особое определение статуса указания серий 
//  в случае, если для склада установлен флаг бг_РазрешитьПланированиеОтгрузокБезУказанияСерий.
// В этом случае, несмотря на установленную политику учета серий "УчитыватьСебестоимостьПоСериям",
//  разрешаем не указывать серии при действии отгрузить. Имитируем указание серий
//  по факту отгрузки. Затем у нас придет Отражение факта по расходному ордеру и все серии
//  и в заказе, и в расходном ордере будут скорректированы по факту.
//
&ИзменениеИКонтроль("ТекстЗапросаЗаполненияСтатусовУказанияСерийТоварыПоРаспоряжениям")
Функция бг_ТекстЗапросаЗаполненияСтатусовУказанияСерийТоварыПоРаспоряжениям(Знач ПараметрыУказанияСерий)
    
	Перем ТекстЗапроса;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	#Вставка
	|		КОГДА ВЫРАЗИТЬ(ПолитикиУчетаСерий.Склад КАК Справочник.Склады).бг_РазрешитьПланированиеОтгрузокБезУказанияСерий
	|			ТОГДА ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Количество > 0
	|									И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА ВЫБОР
	|										КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|											ТОГДА 14
	|										ИНАЧЕ 10
	|									КОНЕЦ
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|										ТОГДА 15
	|									ИНАЧЕ 11
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	#КонецВставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Количество > 0
	|									И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА ВЫБОР
	|										КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|											ТОГДА 14
	|										ИНАЧЕ 10
	|									КОНЕЦ
	|							ИНАЧЕ ВЫБОР
	|									КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|										ТОГДА 13
	|									ИНАЧЕ 9
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтатусУказанияСерий <> ТаблицаСтатусов.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

&Вместо("ТекстЗапросаЗаполненияСтатусовУказанияСерийОтгружаемыеТовары")
Функция бг_ТекстЗапросаЗаполненияСтатусовУказанияСерийОтгружаемыеТовары(Знач ПараметрыУказанияСерий)

	ТекстЗапроса = ПродолжитьВызов(ПараметрыУказанияСерий);	

	// В случае, если для склада установлен флаг бг_РазрешитьПланированиеОтгрузокБезУказанияСерий
	//  разрешаем не указывать серии при подготовке ордера (Ордер в статусе подготовлен). 
	//  Имтируем указание серий по факту отгрузки. Затем у нас придет Отражение факта по расходному ордеру
	//  и все серии и в заказе, и в расходном ордере будут скорректированы по факту.
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"ТОГДА 13",
		"ТОГДА 
		|	ВЫБОР 
		|		КОГДА ВЫРАЗИТЬ(ПолитикиУчетаСерий.Склад КАК Справочник.Склады).бг_РазрешитьПланированиеОтгрузокБезУказанияСерий
		|				И &ПодготовкаОрдера 
		|			ТОГДА 15 
		|		ИНАЧЕ 13 
		|	КОНЕЦ");

    Возврат ТекстЗапроса;

КонецФункции	
	
#КонецОбласти

#КонецЕсли
