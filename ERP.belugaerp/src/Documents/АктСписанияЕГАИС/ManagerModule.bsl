#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия маркируемой алкогольной продукции в акте списания ЕГАИС (необходимы движения по маркам).
//
// Параметры:
//  АктСписанияЕГАИС - ДокументСсылка.АктСписанияЕГАИС - Ссылка на документ АктСписанияЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак наличия маркируемой алкогольной продукции.
//
Функция бг_ЕстьМаркируемаяАлкогольнаяПродукция(АктСписанияЕГАИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АктСписанияЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	Документ.АктСписанияЕГАИС.Товары КАК АктСписанияЕГАИСТовары
	|ГДЕ
	|	АктСписанияЕГАИСТовары.АлкогольнаяПродукция.ВидПродукции.Маркируемый
	|	И АктСписанияЕГАИСТовары.Ссылка = &Ссылка
	|	И АктСписанияЕГАИСТовары.АлкогольнаяПродукция.ВидПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)";
	
	Запрос.УстановитьПараметр("Ссылка", АктСписанияЕГАИС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает данные по списываемым штрихкодам по акту списания.
//
// Параметры:
//  АктСписанияЕГАИС - ДокументСсылка.АктСписанияЕГАИС - Ссылка на документ АктСписанияЕГАИС.
//  ТолькоЗаполненныеМарки - Булево - Флаг, означающий, что результат по маркам не должен содержать строк,
//    в которых содержатся строки алкогольной продукции по акту без найденного соответствия марок.
//
// Возвращаемое значение:
//   Структура - Описание:
//    * Марки - ТаблицаЗначений.
//    * Упаковки - ТаблицаЗначений.
//
Функция бг_ДанныеСписываемыхШтрихкодов(АктСписанияЕГАИС, ТолькоЗаполненныеМарки = Истина) Экспорт
	
	РегистраторыДвиженияМарок = бг_ДокументыСписанияWMS(АктСписанияЕГАИС);
	Если РегистраторыДвиженияМарок.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = бг_ТекстЗапросаДанныеСписываемыхШтрихкодов();
	
	Запрос.УстановитьПараметр("РегистраторыДвиженияМарок", РегистраторыДвиженияМарок);
	Запрос.УстановитьПараметр("АктСписанияЕГАИС", АктСписанияЕГАИС);
	
	// Установить границу получения состава упаковок - на момент времени последнего регистратора,
	// изменяющего движения марок в этой отгрузке (если оформлена "Переупаковка", то ее граница меньше).
	МоментВремениРегистратораДвижений = РегистраторыДвиженияМарок[РегистраторыДвиженияМарок.ВГраница()].МоментВремени();
	Запрос.УстановитьПараметр(
		"Период",
		МоментВремениРегистратораДвижений.Дата);
		
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВерхнийИндексПакета = ПакетРезультатовЗапроса.ВГраница();
	
	ДанныеСписываемыхШтрихкодов = Новый Структура;
	ДанныеСписываемыхШтрихкодов.Вставить("Марки", ПакетРезультатовЗапроса[ВерхнийИндексПакета - 1].Выгрузить());
	ДанныеСписываемыхШтрихкодов.Вставить("Упаковки", ПакетРезультатовЗапроса[ВерхнийИндексПакета].Выгрузить());
	
	Если ТолькоЗаполненныеМарки Тогда
		ПараметрыПоискаНеНайденныхМарок = Новый Структура("НетСоответствияТовараАктаДляМарки", Истина);
		СтрокиСНенайденнымиМарками = ДанныеСписываемыхШтрихкодов.Марки.НайтиСтроки(ПараметрыПоискаНеНайденныхМарок);
		Для каждого СтрокаСНенайденнойМаркой Из СтрокиСНенайденнымиМарками Цикл
			ДанныеСписываемыхШтрихкодов.Марки.Удалить(СтрокаСНенайденнойМаркой);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСписываемыхШтрихкодов;
	
КонецФункции

// Возвращает признак соответствия марок товарам акту списания.
//
// Параметры:
//  АктСписанияЕГАИС - ДокументСсылка.АктСписанияЕГАИС - Ссылка на документ АктСписанияЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак соответствия марок товарам акту списания ЕГАИС.
//
Функция бг_МаркиСоответствуютАлкогольнойПродукцииАкта(Марки, АктСписанияЕГАИС, Отказ = Ложь) Экспорт
	
	МаркиСоответствуютАлкогольнойПродукцииАкта = Истина;
	
	ВыведенныеОшибкиПоАП = Новый Массив;
	
	Для каждого ДанныеМарки Из Марки Цикл
		
		Если ДанныеМарки.НесоответствиеКоличества
			И ВыведенныеОшибкиПоАП.Найти(ДанныеМарки.АлкогольнаяПродукция) = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Отгружаемая алкогольная продукция %1 по акту списания не соответствует данным штрихкодов'"),
					?(ЗначениеЗаполнено(ДанныеМарки.АлкогольнаяПродукция),
						ДанныеМарки.АлкогольнаяПродукция,
						НСтр("ru='<нет сопоставления с движениями марок>'"))),
				АктСписанияЕГАИС,,,
				Отказ);
				
			МаркиСоответствуютАлкогольнойПродукцииАкта = Ложь;
			
			// Не дублировать выведенные ошибки по одной алкогольной продукции.
			ВыведенныеОшибкиПоАП.Добавить(ДанныеМарки.АлкогольнаяПродукция);
		КонецЕсли;
		
		Если ДанныеМарки.НеЗаполненыПоляТоваровДокумента
			И ВыведенныеОшибкиПоАП.Найти(ДанныеМарки.АлкогольнаяПродукция) = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеМарки.АлкогольнаяПродукция) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru='Несоответствие ключевых полей товаров акта и данных штрихкодов по:
					| Номенклатура: %1, серия %2:, алкогольная продукция: %3, справка2: %4'"),
					ДанныеМарки.Номенклатура,
					ДанныеМарки.Серия,
					ДанныеМарки.АлкогольнаяПродукция,
					ДанныеМарки.Справка2);
					
			Иначе
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru='Несоответствие ключевых полей товаров акта и данных штрихкодов по:
					| Номенклатура: %1, серия %2:'"),
					ДанныеМарки.Номенклатура,
					ДанныеМарки.Серия);
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				АктСписанияЕГАИС,,,
				Отказ);
				
			МаркиСоответствуютАлкогольнойПродукцииАкта = Ложь;
			
			// Не дублировать выведенные ошибки по одной алкогольной продукции.
			ВыведенныеОшибкиПоАП.Добавить(ДанныеМарки.АлкогольнаяПродукция);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаркиСоответствуютАлкогольнойПродукцииАкта;
	
КонецФункции

// Возвращает признак необходимости использования механизма движений марок вместо типового механизма ШУТов. 
//
// Параметры:
//  АктСписанияЕГАИС - ДокументСсылка.АктСписанияЕГАИС - Ссылка на документ АктСписанияЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак использования.
//
Функция бг_ИспользоватьМеханизмДвиженийМарок(АктСписанияЕГАИС) Экспорт
	
	Если Не ЗначениеЗаполнено(АктСписанияЕГАИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(АктСписанияЕГАИС);

КонецФункции

// Возвращает дату, на которую должны быть сформированы движения по акту списания.
//
// Параметры:
//  АктСписанияЕГАИС - ДокументСсылка.АктСписанияЕГАИС - Ссылка на документ АктСписанияЕГАИС.
//  Дата - Дата - Дата из АктСписанияЕГАИС.
//  ДатаРегистрацииДвижений - Дата - ДатаРегистрацииДвижений из АктСписанияЕГАИС.
//
// Возвращаемое значение:
//  Дата
//
Функция бг_ДатаДвиженияМарок(АктСписанияЕГАИС, Дата = Неопределено, ДатаРегистрацииДвижений = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		ДатыАкта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(АктСписанияЕГАИС, "ДатаРегистрацииДвижений, Дата");
		Дата = ДатыАкта.Дата;
		ДатаРегистрацииДвижений = ДатыАкта.ДатаРегистрацииДвижений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаРегистрацииДвижений) Тогда
		ДатаДвиженияМарок = КонецДня(ДатаРегистрацииДвижений);
	Иначе
		ДатаДвиженияМарок = КонецДня(Дата);
	КонецЕсли;
	
	// Може возникнуть ситуация, когда дата акта будет меньше даты документа списания WMS,
	// тогда финальный статус марки не будет последним в таблице регистра.
	ПредыдущиеРегистраторыМарок = бг_ДокументыСписанияWMS(АктСписанияЕГАИС);
	
	Если ПредыдущиеРегистраторыМарок.Количество() > 0 Тогда
		
		ПоследнийРегистратор = ПредыдущиеРегистраторыМарок[ПредыдущиеРегистраторыМарок.ВГраница()];
		
		МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПоследнийРегистратор,
			"Дата");
			
		Если МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок >= ДатаДвиженияМарок Тогда
			ДатаДвиженияМарок = МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаДвиженияМарок;
	
КонецФункции

// Возвращает документы списания WMS, которые являются регистраторами предыдущих
// в цепочке движений по РС "Движение марок" статусов марок.
//
// Параметры:
//
// Возвращаемое значение:
//   Массив - элементов с типом ДокументСсылка.битИнвентаризацияПродукцииЕГАИС.
//
Функция бг_ДокументыСписанияWMS(АктСписанияЕГАИС) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	битИнвентаризацияПродукцииЕГАИС.Ссылка КАК ИнвентаризацияПродукцииЕГАИС
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битИнвентаризацияПродукцииЕГАИС КАК битИнвентаризацияПродукцииЕГАИС
	|			ПО ВнутреннееПотреблениеТоваров.бг_ИнвентаризацияПродукцииЕГАИС = битИнвентаризацияПродукцииЕГАИС.Ссылка
	|		ПО АктСписанияЕГАИС.ДокументОснование = ВнутреннееПотреблениеТоваров.Ссылка
	|			И (АктСписанияЕГАИС.Ссылка = &АктСписанияЕГАИС)";
	
	Запрос.УстановитьПараметр("АктСписанияЕГАИС", АктСписанияЕГАИС);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИнвентаризацияПродукцииЕГАИС");
	
КонецФункции

// Возвращает массив статусов, при которых акт списания является подтвержденным в ЕГАИС.
//
// Параметры:
//
// Возвращаемое значение:
//	Массив - элементы с типом ПеречислениеСсылка.СтатусыОбработкиАктаСписанияЕГАИС.
//
Функция бг_СтатусыПодтвержденные() Экспорт

	СтатусыПодтвержденные = Новый Массив;
	
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПроведенЕГАИС);
	
	Возврат СтатусыПодтвержденные;

КонецФункции

// Возвращает массив статусов, при которых акт списания является отмененным в ЕГАИС.
//
// Параметры:
//
// Возвращаемое значение:
//	Массив - элементы с типом ПеречислениеСсылка.СтатусыОбработкиАктаСписанияЕГАИС.
//
Функция бг_СтатусыОтменыЕГАИС() Экспорт
	
	СтатусыОтменыЕГАИС = Новый Массив;
	
	СтатусыОтменыЕГАИС.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Отменен);
	
	Возврат СтатусыОтменыЕГАИС;
	
КонецФункции

// Возвращает признак, что статус акта списания является подтвержденным.
//
// Параметры:
//
// Возвращаемое значение:
//	Булево
//
Функция бг_СтатусЯвляетсяПодтвержденным(Статус) Экспорт
	
	Возврат бг_СтатусыПодтвержденные().Найти(Статус) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

&Вместо("СтатусПослеПолученияДанных")
Функция бг_СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры)
	
	// Когда квитанция на проведение пришла после квитанции на проведение, делать уже ничего не надо
	ТекущийСтатус = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка).Статус;
	
	ТекущийДокументПроведенВЕГАИС = ТекущийСтатус = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПроведенЕГАИС;
	
	СписокДокументовПослеПроведенияЕГАИС = Новый Массив;
	СписокДокументовПослеПроведенияЕГАИС.Добавить(
		Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания);
	
	Если ТекущийДокументПроведенВЕГАИС
		И СписокДокументовПослеПроведенияЕГАИС.Найти(Операция) = Неопределено Тогда
			
		Возврат Неопределено;	
	
	КонецЕсли;		
	
	Результат = ПродолжитьВызов(ДокументСсылка, Операция, ДополнительныеПараметры);
	Возврат Результат;
	
КонецФункции

&После("ПриИзмененииСтатусаДокумента")
Процедура бг_ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса)
	
	бг_ПриИзмененииСтатусаДокументаДвижениеМарок(ДокументСсылка, НовыйСтатус);
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияЕГАИС

&ИзменениеИКонтроль("АктСписанияЕГАИСXML")
Функция бг_АктСписанияЕГАИСXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС КАК Шапка
		|		ПО Шапка.Ссылка       = &Ссылка
		|		 И Шапка.ВидДокумента = ЕГАИСПрисоединенныеФайлы.Операция
		|		 И Шапка.Ссылка       = ЕГАИСПрисоединенныеФайлы.Документ
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Идентификатор                   КАК Идентификатор,
		|	Шапка.ВидДокумента                    КАК Операция,
		|	Шапка.ДокументОснование               КАК ДокументОснование,
		|	
		|	Шапка.ПричинаСписания                       КАК ПричинаСписания,
		|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(500)) КАК Комментарий,
		|	
		|	Шапка.ОрганизацияЕГАИС              КАК ОрганизацияЕГАИС,
		|	Шапка.ОрганизацияЕГАИС.Код          КАК ИдентификаторФСРАР,
		|	Шапка.ОрганизацияЕГАИС.ФорматОбмена КАК ФорматОбмена,
		|	Шапка.Ответственный                 КАК Ответственный
		|ИЗ
		|	Документ.АктСписанияЕГАИС КАК Шапка,
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	Товары.Номенклатура         КАК Номенклатура,
		|	Товары.Характеристика       КАК Характеристика,
		|	Товары.Серия                КАК Серия
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.АктСписанияЕГАИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка");
	
	ТекстыЗапроса.Добавить(
		ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"ВТТовары",
			"ВТКоэффициентыПересчетаВЕдиницыЕГАИС"));
	
	ТекстЗапросаАлкогольнаяПродукция = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ АлкогольнаяПродукция
	|ИЗ
	|	ВТТовары КАК Товары
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	// Выгрузка информации о товарах в сокращенном виде
	|	Продукция.Код                                          КАК ПродукцияКод,
	|	ВЫРАЗИТЬ(Продукция.НаименованиеПолное КАК Строка(255)) КАК ПродукцияНаименованиеПолное,
	|	Продукция.ТипПродукции                                 КАК ПродукцияТипПродукции,
	|	ЕСТЬNULL(ВидыПродукции.Код, """")                      КАК ПродукцияКодВидаПродукции,
	|	
	|	Производители.Код                                            КАК ПроизводительКод,
	|	ВЫРАЗИТЬ(Производители.Наименование КАК Строка(64))          КАК ПроизводительНаименование,
	|	ВЫРАЗИТЬ(Производители.НаименованиеПолное КАК Строка(255))   КАК ПроизводительНаименованиеПолное,
	|	Производители.ИНН                                            КАК ПроизводительИНН,
	|	Производители.КПП                                            КАК ПроизводительКПП,
	|	Производители.КодСтраны                                      КАК ПроизводительКодСтраны,
	|	Производители.КодРегиона                                     КАК ПроизводительКодРегиона,
	|	Производители.ПочтовыйИндекс                                 КАК ПроизводительПочтовыйИндекс,
	|	ВЫРАЗИТЬ(Производители.ПредставлениеАдреса КАК Строка(1000)) КАК ПроизводительПредставлениеАдреса,
	|	Производители.ТипОрганизации                                 КАК ПроизводительТипОрганизации,
	|	Производители.ИдентификаторОрганизацииТС                     КАК ПроизводительИдентификаторОрганизацииТС
	|ИЗ
	|	АлкогольнаяПродукция КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Продукция
	|		ПО Продукция.Ссылка = Товары.АлкогольнаяПродукция
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыПродукции
	|		ПО Продукция.ВидПродукции = ВидыПродукции.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Производители
	|		ПО Производители.Ссылка = Продукция.Производитель
	|";
	
	ТекстыЗапроса.Добавить(
		ТекстЗапросаАлкогольнаяПродукция,
		"АлкогольнаяПродукция");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.НомерСтроки                      КАК НомерСтроки,
		|	Товары.ИдентификаторСтроки              КАК ИдентификаторСтроки,
		|	Товары.АлкогольнаяПродукция             КАК АлкогольнаяПродукция,
		|	Товары.Количество
		|	* ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) КАК Количество,
		|	Товары.Сумма                            КАК Сумма,
		|	Товары.Справка2                         КАК Справка2,
		|	Товары.Справка2.РегистрационныйНомер    КАК НомерСправки2,
		|	
		|	ЕСТЬNULL(ЕдиницыЕГАИС.ПроверятьОбъемДАЛ, ЛОЖЬ) КАК ПроверятьОбъемДАЛ,
		|	ЕСТЬNULL(ЕдиницыЕГАИС.ОбъемДАЛ, 0)             КАК ОбъемДАЛ
		|ИЗ
		|	Документ.АктСписанияЕГАИС.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
		|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция
		|		 И ЕдиницыЕГАИС.Номенклатура = Товары.Номенклатура
		|		 И ЕдиницыЕГАИС.Характеристика = Товары.Характеристика
		|		 И ЕдиницыЕГАИС.Серия = Товары.Серия
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|",
		"Товары");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = ДокументСсылка;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
#Удаление
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
#КонецУдаления
#Вставка
	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ДокументСсылка) Тогда
		ТекстыЗапроса.Добавить(
			ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(
				ПараметрыФормированияТекстаЗапроса),
				"ВложенныеШтрихкоды");
	КонецЕсли;
#КонецВставки
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	//@skip-warning
	Шапка                = РезультатыЗапроса["Шапка"].Выбрать();
	//@skip-warning
	АлкогольнаяПродукция = РезультатыЗапроса["АлкогольнаяПродукция"].Выгрузить();
	//@skip-warning
	Товары               = РезультатыЗапроса["Товары"].Выгрузить();
	
	//@skip-warning
#Удаление
	Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
	ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		Выборка, МенеджерВременныхТаблиц);
#КонецУдаления
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.';
																			|en = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
		
#Вставка
		Если бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ДокументСсылка) Тогда
			// Выполняется подмена данных для формирования XML сообщения:
			//  типовой алгоритм опирался на справочник ШтрихкодыУпаковокТоваров;
			//  свой алгоритм опирается на регистры бг_ДвижениеМарок и бг_СоставУпаковок.
			ВложенныеШтрихкодыУпаковок = бг_ИнтеграцияЕГАИС.ДанныеШтрихкодовДляГенерацииЕГАИСXML(
				ДокументСсылка,
				СообщениеXML);
		Иначе
			// Типовой алгоритм
			Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
			ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
				Выборка,
				МенеджерВременныхТаблиц);
		КонецЕсли;
#КонецВставки
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Шапка.Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Шапка.Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
							|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1 Тогда
		
		#Область ПодготовкаДанных
		
		ТоварыИтоги = Новый ТаблицаЗначений;
		ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
		ТоварыИтоги.Колонки.Добавить("Справка2");
		ТоварыИтоги.Колонки.Добавить("НомерСправки2");
		ТоварыИтоги.Колонки.Добавить("Количество");
		ТоварыИтоги.Колонки.Добавить("Сумма");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если СтрокаТЧ.ПроверятьОбъемДАЛ
				И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.';
																							|en = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), СтрокаТЧ.НомерСтроки));
			КонецЕсли;
			
			НоваяСтрока = ТоварыИтоги.Добавить();
			НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.Справка2             = СтрокаТЧ.Справка2;
			НоваяСтрока.НомерСправки2        = СтрокаТЧ.НомерСправки2;
			НоваяСтрока.Количество           = СтрокаТЧ.Количество;
			НоваяСтрока.Сумма                = СтрокаТЧ.Сумма;
			
		КонецЦикла;
		
		ТоварыИтоги.Свернуть("АлкогольнаяПродукция, Справка2, НомерСправки2", "Количество, Сумма");
		
		АкцизныеМарки = Новый ТаблицаЗначений;
		АкцизныеМарки.Колонки.Добавить("Справка2");
		АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
		
		Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Справка2 = Неопределено;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Статус)
				И СтрокаТЧ.Статус <> Перечисления.СтатусыАкцизныхМарок.ВНаличии Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Акцизная марка %1 со статусом %2 не может быть списана';
							|en = 'Акцизная марка %1 со статусом %2 не может быть списана'"),
						СтрокаТЧ.Штрихкод,
						СтрокаТЧ.Статус));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				Справка2 = СтрокаТЧ.Справка2;
			Иначе
				НайденнаяСтрока = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки, "ИдентификаторСтроки");
				Если НайденнаяСтрока = Неопределено Тогда
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'Не удалось определить справку 2 для акцизной марки %1';
								|en = 'Не удалось определить справку 2 для акцизной марки %1'"),
							СтрокаТЧ.Штрихкод));
				Иначе
					Справка2 = НайденнаяСтрока.Справка2;
				КонецЕсли;
			КонецЕсли;
			
			Если Справка2 = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = АкцизныеМарки.Добавить();
			НоваяСтрока.Справка2         = Справка2;
			НоваяСтрока.КодАкцизнойМарки = СтрокаТЧ.Штрихкод;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область АктСписанияИзРегистра1
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			
			#Область ФорматОбмена_V1
			
			АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffType");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
			
			АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActNumber"   , СокрЛП(Шапка.Номер),           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate"     , Шапка.Дата,                    СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "TypeWriteOff", Строка(Шапка.ПричинаСписания), СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",         Шапка.Комментарий,             СообщениеXML);
			
			АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");
			
			Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
				
				НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
				
				Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffPositionType");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                  СообщениеXML, 5);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,          СообщениеXML);
				
				Position.InformB  = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformB");
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformB, "BRegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
				
				АктXDTO.Content.Position.Добавить(Position);
				
			КонецЦикла;
			
			#КонецОбласти
			
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
			
			#Область ФорматОбмена_V2
			
			АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffType_v2");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
			
			АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActNumber"   , СокрЛП(Шапка.Номер),           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate"     , Шапка.Дата,                    СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "TypeWriteOff", Строка(Шапка.ПричинаСписания), СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",         Шапка.Комментарий,             СообщениеXML);
			
			АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");
			
			Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
				
				НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
				
				Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffPositionType");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,         СообщениеXML, 5);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество, СообщениеXML);
				
				Position.InformF1F2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF1F2");
				Position.InformF1F2.InformF2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF1F2, "InformF2");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF1F2.InformF2, "F2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
				
				ИнтеграцияЕГАИС.ЗаполнитьВXDTOАкцизныеМаркиПоСправке2_v2(Position, СтрокаТЧ, АкцизныеМарки, "MarkCode", СообщениеXML);
				
				АктXDTO.Content.Position.Добавить(Position);
				
			КонецЦикла;
			
			#КонецОбласти
			
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3
			Или ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
			
			#Область ФорматОбмена_V3
			
			АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffType_v3");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
			
			АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActNumber"   , СокрЛП(Шапка.Номер),           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate"     , Шапка.Дата,                    СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "TypeWriteOff", Строка(Шапка.ПричинаСписания), СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",         Шапка.Комментарий,             СообщениеXML);
			
			АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");
			
			Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
				
				НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
				
				Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffPositionType");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,         СообщениеXML, 5);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество, СообщениеXML);
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "SumSale",  СтрокаТЧ.Сумма,      СообщениеXML);
				
				Position.InformF1F2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF1F2");
				Position.InformF1F2.InformF2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF1F2, "InformF2");
				
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF1F2.InformF2, "F2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
				
				ИнтеграцияЕГАИС.ЗаполнитьВXDTOАкцизныеМаркиПоСправке2_v2(Position, СтрокаТЧ, АкцизныеМарки, "amc", СообщениеXML);
				
				АктXDTO.Content.Position.Добавить(Position);
				
			КонецЦикла;
			
			#КонецОбласти
			
		КонецЕсли;
		
		#КонецОбласти
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2 Тогда
		
		#Область ПодготовкаДанных
		
		ТоварыИтоги = Новый ТаблицаЗначений;
		ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
		ТоварыИтоги.Колонки.Добавить("Количество");
		ТоварыИтоги.Колонки.Добавить("Сумма");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если СтрокаТЧ.ПроверятьОбъемДАЛ
				И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.';
																							|en = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), СтрокаТЧ.НомерСтроки));
			КонецЕсли;
			
			НоваяСтрока = ТоварыИтоги.Добавить();
			НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.Количество           = СтрокаТЧ.Количество;
			НоваяСтрока.Сумма                = СтрокаТЧ.Сумма;
			
		КонецЦикла;
		
		ТоварыИтоги.Свернуть("АлкогольнаяПродукция", "Количество, Сумма");
		
		АкцизныеМарки = Новый ТаблицаЗначений;
		АкцизныеМарки.Колонки.Добавить("АлкогольнаяПродукция");
		АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
		
		Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			ТекущаяАлкогольнаяПродукция = Неопределено;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Статус)
				И СтрокаТЧ.Статус <> Перечисления.СтатусыАкцизныхМарок.ВНаличии Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(
						НСтр("ru = 'Акцизная марка %1 со статусом %2 не может быть списана';
							|en = 'Акцизная марка %1 со статусом %2 не может быть списана'"),
						СтрокаТЧ.Штрихкод,
						СтрокаТЧ.Статус));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.АлкогольнаяПродукция) Тогда
				ТекущаяАлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			Иначе
				НайденнаяСтрока = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки, "ИдентификаторСтроки");
				Если НайденнаяСтрока = Неопределено Тогда
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'Не удалось определить алкогольную продукцию для акцизной марки %1';
								|en = 'Не удалось определить алкогольную продукцию для акцизной марки %1'"),
							СтрокаТЧ.Штрихкод));
				Иначе
					ТекущаяАлкогольнаяПродукция = НайденнаяСтрока.АлкогольнаяПродукция;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекущаяАлкогольнаяПродукция = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = АкцизныеМарки.Добавить();
			НоваяСтрока.АлкогольнаяПродукция = ТекущаяАлкогольнаяПродукция;
			НоваяСтрока.КодАкцизнойМарки     = СтрокаТЧ.Штрихкод;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область АктСписанияИзРегистра2
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffShopType_v2");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActNumber"   , СокрЛП(Шапка.Номер),           СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate"     , Шапка.Дата,                    СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "TypeWriteOff", Строка(Шапка.ПричинаСписания), СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",         Шапка.Комментарий,             СообщениеXML);
	
		АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActWriteOffShopPositionType");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки, СообщениеXML, 5);
			Position.Product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "SumSale",  СтрокаТЧ.Сумма,      СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(
				Position.Product,
				АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
				"Продукция", СообщениеXML);
			
			ПараметрыОтбораАкцизныМарок = Новый Структура;
			ПараметрыОтбораАкцизныМарок.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАкцизныеМаркиПоОтбору(Position, ПараметрыОтбораАкцизныМарок, АкцизныеМарки, "MarkCode", СообщенияXML);
			
			АктXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра3 Тогда
		
		#Область ПодготовкаДанных
		
		ТоварыИтоги = Новый ТаблицаЗначений;
		ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
		ТоварыИтоги.Колонки.Добавить("Справка2");
		ТоварыИтоги.Колонки.Добавить("НомерСправки2");
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			НоваяСтрока = ТоварыИтоги.Добавить();
			НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.Справка2             = СтрокаТЧ.Справка2;
			НоваяСтрока.НомерСправки2        = СтрокаТЧ.НомерСправки2;
			
		КонецЦикла;
		
		ТоварыИтоги.Свернуть("АлкогольнаяПродукция, Справка2, НомерСправки2");
		
		АкцизныеМарки = Новый ТаблицаЗначений;
		АкцизныеМарки.Колонки.Добавить("Справка2");
		АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
		
		Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Справка2 = Неопределено;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Статус)
				И СтрокаТЧ.Статус <> Перечисления.СтатусыАкцизныхМарок.ВНаличии Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Некорректный статус.';
																					|en = 'Некорректный статус.'"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				Справка2 = СтрокаТЧ.Справка2;
			Иначе
				НайденнаяСтрока = Товары.Найти(СтрокаТЧ.ИдентификаторСтроки, "ИдентификаторСтроки");
				Если НайденнаяСтрока = Неопределено Тогда
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Не удалось найти справку 2';
																						|en = 'Не удалось найти справку 2'"));
				Иначе
					Справка2 = НайденнаяСтрока.Справка2;
				КонецЕсли;
			КонецЕсли;
			
			Если Справка2 = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = АкцизныеМарки.Добавить();
			НоваяСтрока.Справка2         = Справка2;
			НоваяСтрока.КодАкцизнойМарки = СтрокаТЧ.Штрихкод;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область АктСписанияИзРегистра3
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActUnFixBarCode");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Number",  СокрЛП(Шапка.Номер),   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate", Шапка.Дата,            СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",    Шапка.Комментарий,     СообщениеXML);
		
		АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ActUnFixBarCodePositionType");
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",     НомерСтроки,            СообщениеXML, 5);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Inform2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАкцизныеМаркиПоСправке2_v3(Position, СтрокаТЧ, АкцизныеМарки, СообщенияXML);
			
			АктXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
	
	КонецЕсли;
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(АктXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Шапка.Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Отчеты

&После("ДобавитьКомандыОтчетов")
Процедура бг_ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры)

	Отчеты.бг_ДвижениеМарок.ДобавитьКомандуДвижениеМарокПоДокументу(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДанныеШтрихкодовДвиженияМарок

Процедура бг_ПриИзмененииСтатусаДокументаДвижениеМарок(АктСписанияЕГАИС, НовыйСтатус)
	
	ВнутреннееПотреблениеТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктСписанияЕГАИС, "ДокументОснование");
	
	Если ТипЗнч(ВнутреннееПотреблениеТоваров) <> Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(АктСписанияЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если бг_СтатусЯвляетсяПодтвержденным(НовыйСтатус) Тогда
		
		ДанныеСписываемыхШтрихкодов = бг_ДанныеСписываемыхШтрихкодов(
			АктСписанияЕГАИС,
			Ложь);
			
		Если ДанныеСписываемыхШтрихкодов = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru='Ошибка обновления статуса документа %1: не найдены списываемые штрихкоды'"),
				АктСписанияЕГАИС);
		КонецЕсли;
		
		МаркиСоответствуютАлкогольнойПродукцииАкта = бг_МаркиСоответствуютАлкогольнойПродукцииАкта(
			ДанныеСписываемыхШтрихкодов.Марки,
			АктСписанияЕГАИС);
			
		Если Не МаркиСоответствуютАлкогольнойПродукцииАкта Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru='Ошибка обновления статуса документа %1: списываемые штрихкоды не соответствуют алкогольной продукции'"),
				АктСписанияЕГАИС);
		КонецЕсли;
		
		// Записать движения марок.
		СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные.Документы.АктСписанияЕГАИС.Имя);
		СтатусМаркиВыбыла = СтатусыМарокПоОперации.СтатусВыбыла;
		
		НаборЗаписейДвижениеМарок = РегистрыСведений.бг_ДвижениеМарок.СоздатьНаборЗаписей();
		НаборЗаписейДвижениеМарок.Отбор.Регистратор.Установить(АктСписанияЕГАИС);
		
		ДатаДвиженияМарок = бг_ДатаДвиженияМарок(АктСписанияЕГАИС);
		
		Для каждого СтрокаМарки Из ДанныеСписываемыхШтрихкодов.Марки Цикл
			Запись = НаборЗаписейДвижениеМарок.Добавить();
			Запись.Период = ДатаДвиженияМарок;
			ЗаполнитьЗначенияСвойств(Запись, СтрокаМарки);
			Запись.СтатусМарки = СтатусМаркиВыбыла;
		КонецЦикла;
		
		НаборЗаписейДвижениеМарок.Записать();
		
	Иначе
		
		НаборЗаписейМарки = РегистрыСведений.бг_ДвижениеМарок.СоздатьНаборЗаписей();
		НаборЗаписейМарки.Отбор.Регистратор.Установить(АктСписанияЕГАИС);
		НаборЗаписейМарки.Прочитать();
		
		Если НаборЗаписейМарки.Количество() > 0 Тогда
			НаборЗаписейМарки.Очистить();
			НаборЗаписейМарки.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ТекстЗапросаДанныеСписываемыхШтрихкодов()
	
	// Предполагается, что в акте списания ЕГАИС ТЧ Товары всегда свернута,
	// и по одной Номенклатуре + Серии + АП + Справке2 не может быть нескольких строк с разными идентификаторами.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктСписанияЕГАИСТовары.НомерСтроки КАК НомерСтрокиАкта,
	|	АктСписанияЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	АктСписанияЕГАИСТовары.Справка2 КАК Справка2,
	|	АктСписанияЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	АктСписанияЕГАИСТовары.Серия КАК Серия,
	|	АктСписанияЕГАИСТовары.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	СУММА(АктСписанияЕГАИСТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыАкта
	|ИЗ
	|	Документ.АктСписанияЕГАИС.Товары КАК АктСписанияЕГАИСТовары
	|ГДЕ
	|	АктСписанияЕГАИСТовары.Ссылка = &АктСписанияЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	АктСписанияЕГАИСТовары.АлкогольнаяПродукция,
	|	АктСписанияЕГАИСТовары.Справка2,
	|	АктСписанияЕГАИСТовары.Ссылка.ОрганизацияЕГАИС,
	|	АктСписанияЕГАИСТовары.Номенклатура,
	|	АктСписанияЕГАИСТовары.Серия,
	|	АктСписанияЕГАИСТовары.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|	бг_ДвижениеМарок.Серия.бг_Номенклатура КАК Номенклатура,
	|	бг_ДвижениеМарок.Серия КАК Серия,
	|	бг_ДвижениеМарок.КодУпаковки КАК КодУпаковки
	|ПОМЕСТИТЬ ДвижениеМарок
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
	|ГДЕ
	|	бг_ДвижениеМарок.Активность
	|	И бг_ДвижениеМарок.Регистратор В(&РегистраторыДвиженияМарок)
	|	И бг_ДвижениеМарок.СтатусМарки = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыАкцизныхМарок.ВключенаВАктСписания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГУИДМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|	бг_ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ДвижениеМарок.Номенклатура КАК Номенклатура,
	|	ДвижениеМарок.Серия КАК Серия,
	|	ДвижениеМарок.КодУпаковки КАК КодУпаковки
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	ДвижениеМарок КАК ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|		ПО ДвижениеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
	|ГДЕ
	|	ДвижениеМарок.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ДвижениеМарок.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.Номенклатура КАК Номенклатура,
	|	Марки.Серия КАК Серия,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ МаркиИтоги
	|ИЗ
	|	Марки КАК Марки
	|
	|СГРУППИРОВАТЬ ПО
	|	Марки.Серия,
	|	Марки.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.ГУИДМарки КАК ГУИДМарки,
	|	Марки.ИдентификаторМарки КАК ИдентификаторМарки,
	|	Марки.Номенклатура КАК Номенклатура,
	|	Марки.Серия КАК Серия,
	|	Марки.КодУпаковки КАК КодУпаковки,
	|	МаркиИтоги.Количество КАК КоличествоПоТовару
	|ПОМЕСТИТЬ МаркиСИтогами
	|ИЗ
	|	Марки КАК Марки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаркиИтоги КАК МаркиИтоги
	|		ПО Марки.Номенклатура = МаркиИтоги.Номенклатура
	|			И Марки.Серия = МаркиИтоги.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки,
	|	МАКСИМУМ(бг_СоставУпаковок.Период) КАК Период
	|ПОМЕСТИТЬ СоставУпаковокМаксимальныйПериод
	|ИЗ
	|	Марки КАК Марки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
	|		ПО Марки.КодУпаковки = бг_СоставУпаковок.КодУпаковки
	|ГДЕ
	|	бг_СоставУпаковок.Период <= &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	бг_СоставУпаковок.КодУпаковки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТоварыАкта.ОрганизацияЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС,
	|	ТоварыАкта.НомерСтрокиАкта КАК НомерСтрокиАкта,
	|	ЕСТЬNULL(МаркиСИтогами.Номенклатура, ТоварыАкта.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(МаркиСИтогами.Серия, ТоварыАкта.Серия) КАК Серия,
	|	МаркиСИтогами.ГУИДМарки КАК ГУИДМарки,
	|	ЕСТЬNULL(МаркиСИтогами.ИдентификаторМарки, """") КАК ИдентификаторМарки,
	|	ЕСТЬNULL(МаркиСИтогами.КодУпаковки, """") КАК КодУпаковки,
	|	ЕСТЬNULL(ТоварыАкта.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(ТоварыАкта.Справка2, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК Справка2,
	|	ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК КоличествоМарок,
	|	ЕСТЬNULL(ТоварыАкта.Количество, 0) КАК КоличествоАкта,
	|	ЕСТЬNULL(ТоварыАкта.Количество, 0) <> ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК НесоответствиеКоличества,
	|	ТоварыАкта.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|		ИЛИ ТоварыАкта.АлкогольнаяПродукция ЕСТЬ NULL
	|		ИЛИ ТоварыАкта.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|		ИЛИ ТоварыАкта.Справка2 ЕСТЬ NULL
	|		ИЛИ ТоварыАкта.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ ТоварыАкта.Номенклатура ЕСТЬ NULL
	|		ИЛИ ТоварыАкта.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИЛИ ТоварыАкта.Серия ЕСТЬ NULL КАК НеЗаполненыПоляТоваровДокумента,
	|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL
	|		ИЛИ МаркиСИтогами.ИдентификаторМарки ЕСТЬ NULL
	|		ИЛИ МаркиСИтогами.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ МаркиСИтогами.Номенклатура ЕСТЬ NULL
	|		ИЛИ МаркиСИтогами.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИЛИ МаркиСИтогами.Серия ЕСТЬ NULL КАК НеЗаполненыПоляМарок,
	|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL КАК НетСоответствияТовараАктаДляМарки
	|ИЗ
	|	ТоварыАкта КАК ТоварыАкта
	|		ПОЛНОЕ СОЕДИНЕНИЕ МаркиСИтогами КАК МаркиСИтогами
	|		ПО ТоварыАкта.Номенклатура = МаркиСИтогами.Номенклатура
	|			И ТоварыАкта.Серия = МаркиСИтогами.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки,
	|	бг_СоставУпаковок.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
	|ИЗ
	|	СоставУпаковокМаксимальныйПериод КАК СоставУпаковокМаксимальныйПериод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
	|		ПО СоставУпаковокМаксимальныйПериод.КодУпаковки = бг_СоставУпаковок.КодУпаковки
	|			И СоставУпаковокМаксимальныйПериод.Период = бг_СоставУпаковок.Период
	|ГДЕ
	|	бг_СоставУпаковок.КодВышестоящейУпаковки <> """"";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Конец ДанныеШтрихкодовДвиженияМарок

#КонецОбласти

#КонецЕсли
