#Область ОбработчикиСобытий

&Перед("ПередЗаписью")
Процедура бг_ПередЗаписьюПеред(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(бг_НомерДокументаУПП) Тогда
		Номер = бг_НомерДокументаУПП;
	КонецЕсли;

	бг_ЗафиксироватьИзмененияПередЗаписью();	
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписьюПосле(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("адаптер_ЭтоЗагрузкаДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда  
		бг_Номенклатура.ПроверитьЗаполнениеВидаАлкогольнойПродукцииВТЧТовары(ЭтотОбъект, Отказ);
		
		Если Не бг_УчетАлкоголя.ЭтоЭкспортнаяПродажа(ЭтотОбъект) Тогда
			бг_РасчетСкидок.ПроверитьМинимальныеЦеныАлкогольнойПродукции(ЭтотОбъект, Отказ);
		КонецЕсли;
		
		бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ);
	КонецЕсли;
	
	бг_ЗаполнитьОтсрочкуПлатежа();
	бг_ЗаполнитьПризнакиНаличияАлкогольнойПродукции();
	
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	
	бг_ЗагруженИзУПП = Ложь;
	бг_НомерДокументаУПП = "";
	
	бг_УведомлениеОбОтгрузкеEDIОтправлено = Ложь;
	
	бг_АкцизПоПриобретеннымЦенностям.Очистить();
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(ЭтотОбъект, ЭтотОбъект.Товары);
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	РегистрыСведений.бг_ТранспортнаяИнформация.ДобавитьОбъект(Ссылка, ЗаказКлиента);
КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(ЭтотОбъект, Товары);
	бг_ЗаполнитьРеквизитыПечати();
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если бг_УчетАлкоголя.ПродажаАлкогольнойПродукции(ЭтотОбъект) Тогда
		бг_УчетАлкоголя.ПроверитьПунктНазначенияИЛицензиюВДокументе(ЭтотОбъект, Отказ);
	КонецЕсли;

КонецПроцедуры

&После("ОбработкаУдаленияПроведения")
Процедура бг_ОбработкаУдаленияПроведения(Отказ)
	
	бг_ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&После("ЗаполнитьДокументНаОснованииЗаказаКлиента")
Процедура бг_ЗаполнитьДокументНаОснованииЗаказаКлиента(Знач ДокументОснование, Знач СкладОтгрузки, ВариантОформления, РеквизитыЗаказа, ПараметрыОформления)
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат;	
	КонецЕсли;
	
	бг_ЗаполнитьАдресДоставки();
	бг_ЗаполнитьОтветственных(); 
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	бг_ЗаполнитьЗаказРозничногоПокупателя();
	бг_ЗаполнитьГрузоотправителяПоПунктуРазгрузки();
	бг_ЗаполнитьРеквизитыОтсрочекПлатежа(ЗаказКлиента);

КонецПроцедуры

Процедура бг_ЗаполнитьАдресДоставки()

	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		
		АдресДоставкиГрузополучателя = бг_ТранспортнаяИнформация.ФактическийАдресДоставкиЮрЛица(Грузополучатель);
		
		Если ЗначениеЗаполнено(АдресДоставкиГрузополучателя) Тогда
			АдресДоставки = АдресДоставкиГрузополучателя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьОтветственных()

	Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "Менеджер");
	
	Если Не ЗначениеЗаполнено(Автор) Или Не ЗначениеЗаполнено(Организация) Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОтветственныеЛицаОрганизаций.Ссылка) КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ТипОтветственногоЛица
	|ИЗ
	|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				Пользователи.ФизическоеЛицо КАК ФизическоеЛицо
	|			ИЗ
	|				Справочник.Пользователи КАК Пользователи
	|			ГДЕ
	|				Пользователи.Ссылка = &Пользователь)
	|	И ОтветственныеЛицаОрганизаций.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо В(&ТипыОтветственныхЛиц)
	|	И НЕ ОтветственныеЛицаОрганизаций.ПометкаУдаления
	|	И &Дата >= ОтветственныеЛицаОрганизаций.ДатаНачала
	|			И ВЫБОР
	|				КОГДА ОтветственныеЛицаОрганизаций.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ &Дата <= ОтветственныеЛицаОрганизаций.ДатаОкончания
	|			КОНЕЦ
	|	И ОтветственныеЛицаОрганизаций.Владелец = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо";
	
	Запрос.УстановитьПараметр("Пользователь", Автор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	
	ТипыОтветственныхЛиц = Новый Массив;
	ТипыОтветственныхЛиц.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ТипыОтветственныхЛиц.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	
	Запрос.УстановитьПараметр("ТипыОтветственныхЛиц", ТипыОтветственныхЛиц);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипОтветственногоЛица = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
			Руководитель = Выборка.ОтветственноеЛицо;
		ИначеЕсли Выборка.ТипОтветственногоЛица = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
			ГлавныйБухгалтер = Выборка.ОтветственноеЛицо;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура бг_ЗаполнитьПунктНазначенияИЛицензию()
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "бг_ПунктНазначения, бг_Лицензия");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
	
КонецПроцедуры

Процедура бг_ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ)
	
	Если Отказ
		Или ДополнительныеСвойства.Свойство("бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению")
		И ДополнительныеСвойства.бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			ЗаказКлиента,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтразитьДополнительныеСведенияЗаказаКлиента,,
			Новый ХранилищеЗначения(
				РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.ПоказателиПоТипуДокумента(Ссылка)));
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьГрузоотправителяПоПунктуРазгрузки()

	Грузоотправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "Склад.бг_ПунктРазгрузки");		
	
КонецПроцедуры

#Область АкцизыПоПриобретеннымЦенностям

Процедура бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не РеализацияТоваровУслугЛокализация.бг_ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыСостоянияСписываемогоСырья = РеализацияТоваровУслугЛокализация.бг_СтатусыСостоянияСписываемогоСырья();
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаТаблицаМатериалы());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиАкцизовПоПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиВыпущеннойПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаРасчетСписанияАкцизовПоПродукции());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("Ссылка",           Ссылка);
	Если ДополнительныеСвойства.Свойство("бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям")
		И ДополнительныеСвойства.бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям = Истина Тогда
		ДатаОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	Иначе
		ДатаОстатков = '00010101';
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатков",     ДатаОстатков);
	Запрос.УстановитьПараметр("Товары",           Товары.Выгрузить(, "НомерСтроки, Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("СтатусыАкциза",    СтатусыСостоянияСписываемогоСырья.СтатусыАкциза);
	Запрос.УстановитьПараметр("СостоянияСырья",   СтатусыСостоянияСписываемогоСырья.СостоянияСырья);
	Запрос.УстановитьПараметр("ТипМестаХранения", Перечисления.бг_ТипыМестХраненияПодакцизнойПродукции.Склад);
	
	ТочностьУчетаМатериалов = РегистрыНакопления.бг_АкцизПоПриобретеннымЦенностям.ТочностьУчетаПодакцизныхМатериалов();
	Запрос.УстановитьПараметр("ТочностьУчета", ТочностьУчетаМатериалов);
	
	Результат = Запрос.Выполнить();
	бг_АкцизПоПриобретеннымЦенностям.Загрузить(Результат.Выгрузить());
КонецПроцедуры

#КонецОбласти

#Область РасчетыСРозничнымиКлиентами

Процедура бг_ЗаполнитьЗаказРозничногоПокупателя()
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "бг_ЗаказРозничногоПокупателя");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);	
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)

	// На случай, когда реализация раньше делала движения по ТоварамОрганизаций, а сейчас не делает.
	ИнициализироватьПараметрыЗаполненияВидовЗапасовДляПроведения(ЭтотОбъект);

	Если ДополнительныеСвойства.Свойство("ИзменилосьТолькоСостояниеПереходаПраваСобственности")
		И ДополнительныеСвойства.ИзменилосьТолькоСостояниеПереходаПраваСобственности Тогда
		ПропуститьПроверкуЗапретаИзмененияРегистров(Движения);
	КонецЕсли;

	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);

	ДоставкаТоваров.ОтразитьСостояниеДоставки(Ссылка, Отказ);

	Если Не ДополнительныеСвойства.ИзменилосьТолькоСостояниеПереходаПраваСобственности Тогда
		ПараметрыРегистрации = Документы.РеализацияТоваровУслуг.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
#Вставка
		Если ДополнительныеСвойства.Свойство("АктуализироватьДатуВыставленияСФ")
			И ДополнительныеСвойства.АктуализироватьДатуВыставленияСФ Тогда
			ПараметрыРегистрации.Вставить("АктуализироватьДатуВыставленияСФ", Истина);
		КонецЕсли;
#КонецВставки
		УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПриПроведении(ПараметрыРегистрации);
	КонецЕсли;

	РеализацияТоваровУслугЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);

#Вставка
	бг_ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ);
	Документы.битМаршрутныйЛист.ДобавитьДокументыДляОтложеннойОбработки(Ссылка);
#КонецВставки
КонецПроцедуры

#КонецОбласти 

#Область ОтсрочкаПлатежа

Функция бг_ОбъектРасчетов()
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК Объект
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = ВыборкаДетальныеЗаписи.Объект;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура бг_ЗаполнитьОтсрочкуПлатежа()
	
	КоличествоДнейОтсрочки = РегистрыСведений.бг_ОтсрочкиПлатежаПокупателям.ОтсрочкаПлатежаПоКонтрагенту(Контрагент,
		Договор, Соглашение, бг_ПунктНазначения);
																	
	Если КоличествоДнейОтсрочки <> Неопределено Тогда
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			Для Каждого Этап Из ЭтапыГрафикаОплаты Цикл 
				Этап.Сдвиг = КоличествоДнейОтсрочки + бг_КорректировкаОтсрочкиПлатежа;
				Этап.ДатаПлатежа = Дата + 86400 * Этап.Сдвиг;
			КонецЦикла;
		Иначе
		 	НоваяЗапись 				= ЭтапыГрафикаОплаты.Добавить();
		 	НоваяЗапись.Сдвиг          	= КоличествоДнейОтсрочки + бг_КорректировкаОтсрочкиПлатежа;
			НоваяЗапись.ВариантОплаты  	= Перечисления.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки;
		 	НоваяЗапись.ВариантОтсчета 	= Перечисления.ВариантыОтсчетаДатыПлатежа.ОтДатыОтгрузки;		 
		 	НоваяЗапись.ОбъектРасчетов 	= бг_ОбъектРасчетов();			
			Если ЭтоНовый() Тогда
		 		НоваяЗапись.ДатаПлатежа = ТекущаяДатаСеанса() + 86400 * КоличествоДнейОтсрочки;
		 	Иначе
				НоваяЗапись.ДатаПлатежа = ЭтотОбъект.Дата + 86400 * КоличествоДнейОтсрочки;
		 	КонецЕсли;			
		 	НоваяЗапись.ПроцентПлатежа 	= 100;
		 	НоваяЗапись.СуммаВзаиморасчетов = Товары.Итог("СуммаВзаиморасчетов");
		 	НоваяЗапись.СуммаПлатежа	= Товары.Итог("Сумма");	
		КонецЕсли;
		 		 		 		 
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыОтсрочекПлатежа(ЗаказКлиента)
	
	бг_КорректировкаОтсрочкиПлатежа = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "бг_КорректировкаОтсрочкиПлатежа");
	бг_КоличествоДнейОтсрочки = РегистрыСведений.бг_ОтсрочкиПлатежаПокупателям.ОтсрочкаПлатежаПоКонтрагенту(Контрагент,
		Договор, Соглашение, бг_ПунктНазначения);
	 
КонецПроцедуры

Процедура бг_ЗаполнитьРеквизитыПечати()
	
	Если ЗначениеЗаполнено(Отпустил) Тогда
		ОтпустилДолжность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отпустил, "бг_Должность"); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

Процедура бг_ЗаполнитьПризнакиНаличияАлкогольнойПродукции()
	
	ТаблицаНоменклатуры = Товары.Выгрузить(, "Номенклатура");
	ТаблицаНоменклатуры.Свернуть("Номенклатура");
	СписокНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	
	бг_ЕстьАлкогольнаяПродукция = бг_Номенклатура.ЕстьАлкогольнаяПродукция(СписокНоменклатуры);
		
КонецПроцедуры

Процедура бг_ЗафиксироватьИзмененияПередЗаписью()
	
	ПроверяемыеРеквизиты = Новый Структура;
	ПроверяемыеРеквизиты.Вставить("Номер");

	ДополнительныеСвойства.Вставить("бг_ИзмененныеРеквизиты",
		бг_ОбщегоНазначенияСервер.ИзмененияОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты));

КонецПроцедуры

#КонецОбласти
