#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	бг_ДобавитьЭлементыДанныхУПП();
	бг_ДобавитьЭлементыEDI();
	
	бг_ДобавитьЭлементыДокументовПоступления();
	бг_ДобавитьЭлементыАкциза();
	бг_ДобавитьЭлементыПунктаНазначения();
	
	бг_ДобавитьЭлементыРасчетовСРозничнымиПокупателями();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_ОбновитьГиперссылкиДокументовПоступления();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_ДобавитьРеквизитыТранспортнойИнформации();
		бг_ДобавитьЭлементыТранспортнойИнформации();
		бг_ОбновитьОтображениеТранспортнойИнформации();
		бг_ДобавитьЭлементыBacardi();
	КонецЕсли;

	бг_ДобавитьЭлементыОтсрочкиПлатежа();
	бг_ДобавитьКомандыФормы();

	бг_УстановитьВозможностьРедактированияДокумента();
		
КонецПроцедуры

&НаСервере
Процедура бг_ПриЧтенииНаСервереПосле(ТекущийОбъект)
	
	бг_ОбновитьГиперссылкиДокументовПоступления();
	
	бг_ДобавитьРеквизитыТранспортнойИнформации();
	бг_ДобавитьЭлементыТранспортнойИнформации();
	бг_ОбновитьОтображениеТранспортнойИнформации();
	бг_ДобавитьЭлементыBacardi();
	
КонецПроцедуры

&НаСервере
Процедура бг_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	
	бг_УстановитьВозможностьРедактированияДокумента();
	бг_ОбновитьОтображениеТранспортнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ТТНИсходящаяЕГАИС" Тогда
		бг_УстановитьВозможностьРедактированияДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			бг_ЗаполнитьПунктНазначенияИЛицензию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура бг_ДокументОснованиеПоступлениеНаСкладНажатие(Элемент) 
	
	ПоказатьЗначение(, Объект.бг_ДокументОснованиеПоступлениеНаСклад);

КонецПроцедуры

&НаКлиенте
Процедура бг_ПредставлениеТранспортнойИнформацииРТУНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"бг_ПредставлениеТранспортнойИнформацииРТУНажатиеПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Документ предварительно необходимо записать. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
			
		бг_ОткрытьЗаписьТранспортнойИнформации(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПредставлениеТранспортнойИнформацииЗаказНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	бг_ОткрытьЗаписьТранспортнойИнформации(Объект.ЗаказКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_СозданНаОснованииПоступленияОтПоставщикаПриИзменении(Элемент) 
	
	Элементы.бг_ДокументОснованиеПоступлениеОтПоставщика.Видимость = 
		Объект.бг_СозданНаОснованииПоступленияОтПоставщика;
		
	Если Объект.бг_СозданНаОснованииПоступленияОтПоставщика Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения("бг_ОтветНаВопросИзменениеДокументаОснованиеПоступлениеОтПоставщика", 
			ЭтаФорма); 
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Вы уверены, что хотите изменить документ-основание поступление от поставщика?'"),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура бг_ЛицензияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.бг_ПунктНазначения.Пустая() Тогда
		Объект.бг_Лицензия = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для выбора лицензии укажите пункт назначения'"),
			Объект.Ссылка,
			"Объект.бг_ПунктНазначения");
		Возврат;
	КонецЕсли;
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Объект.Контрагент;
	Отбор.Использование = Истина;
	
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("бг_ДатаПрекращенияДействия");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	Отбор.ПравоеЗначение = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ОбщегоНазначенияКлиент.ДатаСеанса());
	Отбор.Использование = Истина;
	
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение = бг_УчетАлкоголяВызовСервера.ЛицензииПунктаНазначения(Объект.бг_ПунктНазначения, Объект.Дата);
	Отбор.Использование = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
		
	ОткрытьФорму("Справочник.ЛицензииПоставщиковАлкогольнойПродукции.Форма.бг_ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПунктНазначенияПриИзменении()
	
	бг_ЗаполнитьЛицензию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_РТУЗаполнитьТоварыПоПТУ(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Обработку можно вызвать только из записаной реализации'"));
		Возврат;
	КонецЕсли;
	
	ОбъектыНазначения = Новый Массив;
	ОбъектыНазначения.Добавить(Объект.Ссылка);
	
	ОткрытьФорму("Обработка.бг_РТУЗаполнитьТоварыПоПТУ.Форма.Форма", 
		Новый Структура("ОбъектыНазначения", ОбъектыНазначения),
		ЭтотОбъект, 
		Истина,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_КопироватьТранспортнуюИнформациюЗаказа(Команда)

	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"бг_КопироватьТранспортнуюИнформациюЗаказаПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Документ предварительно необходимо записать. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
			
		бг_КопироватьТранспортнуюИнформациюЗаказаЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВыгрузитьФайлОбменаBacardi(Команда)
	
	бг_ВыгрузитьФайлОбменаBacardiНаСервере(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВыгрузитьПакетОтгрузкиПродукции(Команда)
	
	Если Не бг_ФормированиеПакетаОтгрузкиГотовойПродукцииВызовСервера.ЕстьВозможностьСформироватьПакет(
		Объект.Ссылка) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не найдена подходящая ТТН исходящая для формирования пакета отгрузки готовой продукции.'",
				ОбщегоНазначенияКлиент.КодОсновногоЯзыка()));
		Возврат;
		
	КонецЕсли;
	
	СписокОшибок = Новый СписокЗначений;
	Отказ = Ложь;
	бг_ФормированиеПакетаОтгрузкиГотовойПродукцииВызовСервера.ОписаниеПакета(
		Объект.Ссылка, Отказ, СписокОшибок);

	Для Каждого Ошибка Из СписокОшибок Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(Ошибка.Значение);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПакетОтгрузкиПродукцииИСоздатьПисьмо(Объект.Ссылка, Объект.Партнер);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВыгрузитьDESADVвSAP(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Документ не записан. Выгрузка DESADV невозможна.';
				|en = 'Документ не записан. Выгрузка DESADV невозможна.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправкиDESADV = ПараметрыОтправкиDESADV(Объект);
	
	Если Не ПараметрыОтправкиDESADV.ЭтоРеализацияКонтрагентуSAP Тогда
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Это реализация не участвует в обмене с SAP. DESADV не выгружена.';
				|en = 'Это реализация не участвует в обмене с SAP. DESADV не выгружена.'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтправкиDESADV.ДатОтправкиDESADV) Тогда
		ДополнительныеПараметры = Новый Структура;
		
		ШаблонТекстаВопроса =
			НСтр("ru = 'DESADV по реализации уже была отправлена %1. Выгрузить повторно?';
				|en = 'DESADV по реализации уже была отправлена %1. Выгрузить повторно?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаВопроса,
			Формат(ПараметрыОтправкиDESADV.ДатОтправкиDESADV, "ДФ=dd.MM.yyyy"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("бг_ВыгрузитьDESADVПослеВопросаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		ПоказатьВопросОПроведенииПередОтправкойDESADV();
		Возврат;
	КонецЕсли;
	
	бг_ВыгрузитьDESADVвSAPФрагмент();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
&Вместо("ОткрытьРеквизитыПечатиРеализации")
Процедура бг_ОткрытьРеквизитыПечатиРеализации()
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                   Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя",  Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",   Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",       Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",                Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                 Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",              Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",                Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",                Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",               Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Договор",                         Объект.Договор);
	СтруктураПараметров.Вставить("Основание",                       Объект.Основание);
	СтруктураПараметров.Вставить("ОснованиеДата",                   Объект.ОснованиеДата);
	СтруктураПараметров.Вставить("ОснованиеНомер",                  Объект.ОснованиеНомер);
	СтруктураПараметров.Вставить("Отпустил",                        Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",               Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Партнер",                         Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",           Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                      Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                  ТолькоПросмотр);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "РеализацияТоваровУслуг");
	СтруктураПараметров.Вставить("РеализацияПоЗаказам",             Объект.РеализацияПоЗаказам);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",       Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Организация",                     Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                            Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                    Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",                Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("ТаблицаОснованийДляПечати",       ТаблицаОснованийДляПечати);
	СтруктураПараметров.Вставить("бг_АдресГрузоотправитля",			Объект.бг_АдресГрузоотправитля);
	СтруктураПараметров.Вставить("бг_АдресГрузополучателя",			Объект.бг_АдресГрузополучателя);	
	СтруктураПараметров.Вставить("бг_РеализацияТоваровУслуг",       Объект.Ссылка);
	СтруктураПараметров.Вставить("бг_ДанныеТранспортнаяНакладная",	Объект.бг_ДанныеТранспортнаяНакладная);
	СтруктураПараметров.Вставить("бг_ДоверенностьДолжность",		Объект.бг_ДоверенностьДолжность);
	
	ОткрытьФорму("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
&После("ДатаПриИзмененииСервер")
Процедура бг_ДатаПриИзмененииСервер(ПересчитатьЦены, ЦеныРассчитаны)
	
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(Объект, Объект.Товары);
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	
КонецПроцедуры

&НаСервере
&После("ПриИзмененииПартнераСервер")
Процедура бг_ПриИзмененииПартнераСервер()
	
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	
КонецПроцедуры

&НаСервере
&После("КонтрагентПриИзмененииСервер")
Процедура бг_КонтрагентПриИзмененииСервер()
	
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыПоступления

&НаСервере
Процедура бг_ОбновитьГиперссылкиДокументовПоступления()

	бг_ИзменитьГиперссылкуДокументаПоступления("бг_ДокументОснованиеПоступлениеНаСклад", 
		НСтр("ru='Поступление на склад'"), Истина);

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыДокументовПоступления()
		
	бг_ДокументОснованиеПоступлениеНаСклад = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьДекорациюНаФорму(
		ЭтаФорма,
		"бг_ДокументОснованиеПоступлениеНаСклад",
		Элементы.ГруппаПараметрыПраво,
		НСтр("ru='<Не указан документ основание - поступление на склад>'"),
		ВидДекорацииФормы.Надпись);
	бг_ДокументОснованиеПоступлениеНаСклад.Видимость = Ложь;
	бг_ДокументОснованиеПоступлениеНаСклад.Гиперссылка = Истина;
	бг_ДокументОснованиеПоступлениеНаСклад.УстановитьДействие("Нажатие", "бг_ДокументОснованиеПоступлениеНаСкладНажатие");
	
	бг_ДокументОснованиеПоступлениеОтПоставщика = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма,
		"бг_ДокументОснованиеПоступлениеОтПоставщика",
		Элементы.Товары,
		"Объект.Товары.бг_ДокументОснованиеПоступлениеОтПоставщика",
		,
		Элементы.ТоварыНоменклатураТипНоменклатуры);
	бг_ДокументОснованиеПоступлениеОтПоставщика.Видимость = Объект.бг_СозданНаОснованииПоступленияОтПоставщика;
	бг_ДокументОснованиеПоступлениеОтПоставщика.ТолькоПросмотр = Истина;
	
	Если Пользователи.РолиДоступны("бг_ИзменениеДокументаОснованияОтПоставщикаВРеализации") Тогда
		бг_СозданНаОснованииПоступленияОтПоставщика = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
			ЭтаФорма,
			"бг_СозданНаОснованииПоступленияОтПоставщика",
			Элементы.ГруппаОсновное,
			"Объект.бг_СозданНаОснованииПоступленияОтПоставщика",
			,
			,
			"ПолеФлажка"); 
		бг_СозданНаОснованииПоступленияОтПоставщика.УстановитьДействие("ПриИзменении", "бг_СозданНаОснованииПоступленияОтПоставщикаПриИзменении");
	КонецЕсли;
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(ЭтаФорма,
		"бг_РТУЗаполнитьТоварыПоПТУ",
		Элементы.ТоварыГруппаЗаполнить,
		"Заполнить товары по поступлению",
		"бг_РТУЗаполнитьТоварыПоПТУ",
		"бг_РТУЗаполнитьТоварыПоПТУ",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыАкциза()

	бг_ТоварыСуммаАкциза = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
	  ЭтотОбъект,
	  "бг_ТоварыСуммаАкциза", 
	  Элементы.Товары, 
	  "Объект.Товары.бг_СуммаАкциза", 
	  , 
	  Элементы.ТоварыСуммаНДС);

	бг_ТоварыСуммаАкциза.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыРасчетовСРозничнымиПокупателями();
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
	  ЭтотОбъект,
	  "бг_ЗаказРозничногоПокупателя", 
	  Элементы.ГруппаДополнительно, 
	  "Объект.бг_ЗаказРозничногоПокупателя", 
	  , 
	  );	
	
КонецПроцедуры	

&НаСервере
Процедура бг_ИзменитьГиперссылкуДокументаПоступления(ИмяРеквизита, ПредставлениеРеквизита, СкрыватьВидимостьПустого = Ложь)
	
	ЗначениеРеквизита = Объект[ИмяРеквизита];
	ЭлементФормы = Элементы.Найти(ИмяРеквизита);
	
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		ЭлементФормы.Видимость = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		ПредставлениеДокументаОснования = Строка(ЗначениеРеквизита);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЭлементФормы.Заголовок = "" + ПредставлениеРеквизита + ": " + ПредставлениеДокументаОснования;
		
	Иначе
		
		Если СкрыватьВидимостьПустого Тогда
			ЭлементФормы.Видимость = Ложь;
		КонецЕсли;
		ЭлементФормы.Заголовок = НСтр("ru='<Не указан документ основание - '") + ПредставлениеРеквизита + ">";
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура бг_ИзменитьДокументОснованиеПоступлениеОтПоставщикаНажатиеЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	бг_ИзменитьДокументОснованиеПоступлениеОтПоставщикаНаСервере(РезультатВыбора);
	
КонецПроцедуры 
	
&НаСервере
Процедура бг_ИзменитьДокументОснованиеПоступлениеОтПоставщикаНаСервере(РезультатВыбора)
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");  
	Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		СтрокаТЧ.бг_ДокументОснованиеПоступлениеОтПоставщика = РезультатВыбора;
	КонецЦикла;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	ДокументОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		
КонецПроцедуры

&НаКлиенте
Процедура бг_ОтветНаВопросИзменениеДокументаОснованиеПоступлениеОтПоставщика(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;  
	
	ОткрытьФорму("Документ.ПриобретениеТоваровУслуг.ФормаВыбора",
		,
		,	
		Истина,
		,
		,
		Новый ОписаниеОповещения("бг_ИзменитьДокументОснованиеПоступлениеОтПоставщикаНажатиеЗавершение", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти // Конец ДокументыПоступления

#Область ТранспортнаяИнформация

&НаСервере
Процедура бг_ДобавитьРеквизитыТранспортнойИнформации()

	РеквизитыКДобавлению = Новый Массив;
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ПредставлениеТранспортнойИнформацииРТУ",
			ОбщегоНазначения.ОписаниеТипаСтрока(500)));

	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ПредставлениеТранспортнойИнформацииЗаказ",
			ОбщегоНазначения.ОписаниеТипаСтрока(500)));

	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ПредставлениеПустойТранспортнойИнформации",
			ОбщегоНазначения.ОписаниеТипаСтрока(500)));
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьРеквизитыНаФорму(ЭтаФорма, РеквизитыКДобавлению);

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыТранспортнойИнформации()

	// Группа транспортной информации
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_ТранспортнаяИнформация") Тогда
			
		ГруппаТранспортнаяИнформация = Элементы.Вставить(
			"бг_ТранспортнаяИнформация",
			Тип("ГруппаФормы"),
			Элементы.ГруппаДополнительно,
			Элементы.ГруппаПечать);
			
		ГруппаТранспортнаяИнформация.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаТранспортнаяИнформация.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		ГруппаТранспортнаяИнформация.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаТранспортнаяИнформация.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаТранспортнаяИнформация.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	// Представление для РТУ
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_ПредставлениеТранспортнойИнформацииРТУ") Тогда
			
		НадписьПредставлениеТранспортнойИнформацииРТУ = Элементы.Добавить(
			"бг_ПредставлениеТранспортнойИнформацииРТУ",
			Тип("ПолеФормы"),
			ГруппаТранспортнаяИнформация);
			
		НадписьПредставлениеТранспортнойИнформацииРТУ.ПутьКДанным = "бг_ПредставлениеТранспортнойИнформацииРТУ";
		НадписьПредставлениеТранспортнойИнформацииРТУ.Вид = ВидПоляФормы.ПолеНадписи;
		НадписьПредставлениеТранспортнойИнформацииРТУ.Гиперссылка = Истина;
		НадписьПредставлениеТранспортнойИнформацииРТУ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		НадписьПредставлениеТранспортнойИнформацииРТУ.УстановитьДействие(
			"Нажатие",
			"бг_ПредставлениеТранспортнойИнформацииРТУНажатие");
	КонецЕсли;
	
	// Группа для Заказа (рядом с надписью нужна кнопка копирования транспортной информации с Заказа на РТУ)
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_ГруппаТранспортнаяИнформацияЗаказ") Тогда
			
		ГруппаТранспортнаяИнформацияЗаказ = Элементы.Добавить(
			"бг_ГруппаТранспортнаяИнформацияЗаказ",
			Тип("ГруппаФормы"),
			ГруппаТранспортнаяИнформация);
			
		ГруппаТранспортнаяИнформацияЗаказ.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаТранспортнаяИнформацияЗаказ.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		ГруппаТранспортнаяИнформацияЗаказ.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаТранспортнаяИнформацияЗаказ.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаТранспортнаяИнформацияЗаказ.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	// Команда копирования транспортной информации с Заказа на РТУ
	Если Команды.Найти("бг_КопироватьТранспортнуюИнформациюЗаказа") = Неопределено Тогда
		КомандаКопироватьТранспортнуюИнформациюЗаказа = Команды.Добавить("бг_КопироватьТранспортнуюИнформациюЗаказа");
		КомандаКопироватьТранспортнуюИнформациюЗаказа.Картинка = БиблиотекаКартинок.СкопироватьОбъект;
		КомандаКопироватьТранспортнуюИнформациюЗаказа.Действие = "бг_КопироватьТранспортнуюИнформациюЗаказа";
		
		ОписаниеКоманды = НСтр("ru='Скопировать транспортную информацию с заказа'");
		КомандаКопироватьТранспортнуюИнформациюЗаказа.Заголовок = ОписаниеКоманды;
		КомандаКопироватьТранспортнуюИнформациюЗаказа.Подсказка = ОписаниеКоманды;
		КомандаКопироватьТранспортнуюИнформациюЗаказа.Отображение = ОтображениеКнопки.Картинка;
	КонецЕсли;
	
	// Кнопка копирования транспортной информации с Заказа на РТУ
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_КопироватьТранспортнуюИнформациюЗаказа") Тогда
			
		КнопкаКопироватьТранспортнуюИнформациюЗаказа = Элементы.Добавить(
			"бг_КопироватьТранспортнуюИнформациюЗаказа",
			Тип("КнопкаФормы"),
			ГруппаТранспортнаяИнформацияЗаказ);
			
		КнопкаКопироватьТранспортнуюИнформациюЗаказа.ИмяКоманды = "бг_КопироватьТранспортнуюИнформациюЗаказа";
		КнопкаКопироватьТранспортнуюИнформациюЗаказа.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	КонецЕсли;
		
	// Представление для Заказа
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_ПредставлениеТранспортнойИнформацииЗаказ") Тогда
			
		НадписьПредставлениеТранспортнойИнформацииЗаказ = Элементы.Добавить(
			"бг_ПредставлениеТранспортнойИнформацииЗаказ",
			Тип("ПолеФормы"),
			ГруппаТранспортнаяИнформацияЗаказ);
			
		НадписьПредставлениеТранспортнойИнформацииЗаказ.ПутьКДанным = "бг_ПредставлениеТранспортнойИнформацииЗаказ";
		НадписьПредставлениеТранспортнойИнформацииЗаказ.Вид = ВидПоляФормы.ПолеНадписи;
		НадписьПредставлениеТранспортнойИнформацииЗаказ.Гиперссылка = Истина;
		НадписьПредставлениеТранспортнойИнформацииЗаказ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		НадписьПредставлениеТранспортнойИнформацииЗаказ.УстановитьДействие(
			"Нажатие",
			"бг_ПредставлениеТранспортнойИнформацииЗаказНажатие");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_ОбновитьОтображениеТранспортнойИнформации()

	бг_ЗаполнитьТранспортнуюИнформацию();
	бг_УстановитьВидимостьТранспортнойИнформации();

КонецПроцедуры

&НаСервере
Процедура бг_УстановитьВидимостьТранспортнойИнформации()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если бг_ТранспортнаяИнформацияЗаполнена(ЭтотОбъект, "бг_ПредставлениеТранспортнойИнформацииЗаказ") 
			И Не бг_ТранспортнаяИнформацияЗаполнена(ЭтотОбъект, "бг_ПредставлениеТранспортнойИнформацииРТУ") Тогда
			
			// Если транспортная информация по РТУ не заполнена, но заполнена по заказу - вывести по заказу.
			бг_УстановитьВидимостьТранспортнойИнформацииЗаказРТУ(Ложь);
			
		Иначе
			
			// Если заполнена по РТУ - вывести по РТУ. Если не заполнена для обоих документов - вывести для РТУ,
			// будет отображена запись об отсутствующей транспортной информации.
			бг_УстановитьВидимостьТранспортнойИнформацииЗаказРТУ(Истина);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
		
		Если бг_ТранспортнаяИнформацияЗаполнена(ЭтотОбъект, "бг_ПредставлениеТранспортнойИнформацииЗаказ") Тогда
			
			// Если транспортная информация по заказу заполнена - вывести по заказу.
			бг_УстановитьВидимостьТранспортнойИнформацииЗаказРТУ(Ложь);
			
		Иначе
			
			// Если не заполнена для заказа - вывести для РТУ,
			// будет отображена запись об отсутствующей транспортной информации.
			бг_УстановитьВидимостьТранспортнойИнформацииЗаказРТУ(Истина);
			
		КонецЕсли;
			
	Иначе
		
		// Вывести запись об отсутствующей транспортной информации.
		бг_УстановитьВидимостьТранспортнойИнформацииЗаказРТУ(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_УстановитьВидимостьТранспортнойИнформацииЗаказРТУ(ОтобразитьТранспортнуюИнформациюРТУ)

	Элементы["бг_ПредставлениеТранспортнойИнформацииРТУ"].Видимость = ОтобразитьТранспортнуюИнформациюРТУ;
	Элементы["бг_ГруппаТранспортнаяИнформацияЗаказ"].Видимость = Не ОтобразитьТранспортнуюИнформациюРТУ;

КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьТранспортнуюИнформацию()

	ЭтотОбъект["бг_ПредставлениеПустойТранспортнойИнформации"]
		= бг_ТранспортнаяИнформация.ПредставлениеПустойТранспортнойИнформации();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Получить транспортную информацию по РТУ.
		ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииРТУ"] 
			= бг_ТранспортнаяИнформация.ПредставлениеТранспортнойИнформации(Объект.Ссылка);
			
		Если ПустаяСтрока(ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииРТУ"]) Тогда
			
			// Если по РТУ транспортной информации нет, то попытаться получить ее по заказу.
			Если ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
				
				ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииЗаказ"] 
					= бг_ТранспортнаяИнформация.ПредставлениеТранспортнойИнформации(Объект.ЗаказКлиента, Истина);
					
				Если ПустаяСтрока(ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииЗаказ"]) Тогда
					
					// Если по заказу транспортной информации тоже нет, то вывести информацию об ее отсутствии.
					ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииРТУ"]
						= ЭтотОбъект["бг_ПредставлениеПустойТранспортнойИнформации"];
					
				КонецЕсли;
					
			Иначе
				
				// Вывести информацию об отсутствии транспортной информации.
				ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииРТУ"] 
					= ЭтотОбъект["бг_ПредставлениеПустойТранспортнойИнформации"];
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказКлиента) Тогда
		
		// Если объект новый, то попытаться получить транспортную информацию по заказу.
		ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииЗаказ"] 
			= бг_ТранспортнаяИнформация.ПредставлениеТранспортнойИнформации(Объект.ЗаказКлиента, Истина);
			
		Если ПустаяСтрока(ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииЗаказ"]) Тогда
			
			// Если по заказу транспортной информации нет, то вывести информацию об ее отсутствии.
			ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииРТУ"] 
				= ЭтотОбъект["бг_ПредставлениеПустойТранспортнойИнформации"];
			
		КонецЕсли;
			
	Иначе
		
		// Если это новая РТУ без заказа - вывести информацию об отсутствии транспортной информации.
		ЭтотОбъект["бг_ПредставлениеТранспортнойИнформацииРТУ"] 
			= ЭтотОбъект["бг_ПредставлениеПустойТранспортнойИнформации"];
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция бг_ТранспортнаяИнформацияЗаполнена(Форма, ИмяПоля)

	Возврат ЗначениеЗаполнено(Форма[ИмяПоля])
		И Форма[ИмяПоля]
			<> Форма["бг_ПредставлениеПустойТранспортнойИнформации"];

КонецФункции

&НаКлиенте
Процедура бг_ПредставлениеТранспортнойИнформацииРТУНажатиеПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
	бг_ОткрытьЗаписьТранспортнойИнформации(Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура бг_КопироватьТранспортнуюИнформациюЗаказаПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
	бг_КопироватьТранспортнуюИнформациюЗаказаЗавершение();

КонецПроцедуры

&НаКлиенте
Процедура бг_КопироватьТранспортнуюИнформациюЗаказаЗавершение()

	бг_КопироватьТранспортнуюИнформациюЗаказаНаСервере();
	бг_ОткрытьЗаписьТранспортнойИнформации(Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура бг_КопироватьТранспортнуюИнформациюЗаказаНаСервере()

	НаборЗаписейЗаказ = РегистрыСведений.бг_ТранспортнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейЗаказ.Отбор.Объект.Установить(Объект.ЗаказКлиента);
	НаборЗаписейЗаказ.Прочитать();
	Если НаборЗаписейЗаказ.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Отсутствует транспортная информация по заказу клиента.'"));
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписиРТУ = РегистрыСведений.бг_ТранспортнаяИнформация.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРТУ.Объект = Объект.Ссылка;
	ЗаполнитьЗначенияСвойств(МенеджерЗаписиРТУ, НаборЗаписейЗаказ[0],, "Объект");
	МенеджерЗаписиРТУ.Записать();

КонецПроцедуры

&НаКлиенте
Процедура бг_ОткрытьЗаписьТранспортнойИнформации(ОбъектТранспортнойИнформации)

	КлючЗаписиТранспортнойИнформации = бг_КлючЗаписиТранспортнойИнформации(ОбъектТранспортнойИнформации);

	ОповещениеПоЗавершении = Новый ОписаниеОповещения(
		"бг_ПредставлениеТранспортнойИнформацииПослеЗакрытияЗаписи",
		ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("Ключ, ТолькоПросмотрОбъекта, ДатаТН, НомерТН", 
		КлючЗаписиТранспортнойИнформации, Истина, Объект.Дата, Объект.бг_НомерДокументаУПП);
	
	ОткрытьФорму(
		"РегистрСведений.бг_ТранспортнаяИнформация.ФормаЗаписи",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, // Уникальность
		, // Окно
		, // НавигационнаяСсылка
		ОповещениеПоЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры
	
&НаСервереБезКонтекста
Функция бг_КлючЗаписиТранспортнойИнформации(ОбъектТранспортнойИнформации)
	
	Возврат бг_ТранспортнаяИнформация.КлючЗаписиТранспортнойИнформации(ОбъектТранспортнойИнформации);
		
КонецФункции

&НаКлиенте
Процедура бг_ПредставлениеТранспортнойИнформацииПослеЗакрытияЗаписи(Результат, ДополнительныеПараметры) Экспорт

	бг_ПредставлениеТранспортнойИнформацииПослеЗакрытияЗаписиНаСервере();

КонецПроцедуры

&НаСервере
Процедура бг_ПредставлениеТранспортнойИнформацииПослеЗакрытияЗаписиНаСервере()

	бг_ЗаполнитьРеквизитыТОРГ12ПоТранспортнойИнформации();
	бг_ОбновитьОтображениеТранспортнойИнформации();

КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьРеквизитыТОРГ12ПоТранспортнойИнформации()

	ТранспортнаяИнформацияДляТОРГ12 = бг_ТранспортнаяИнформация.ТранспортнаяИнформацияДляТОРГ12(Объект.Ссылка);
	Если ТранспортнаяИнформацияДляТОРГ12 = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДоверенностьЛицо <> ТранспортнаяИнформацияДляТОРГ12.ФИОВодителя Тогда
		Объект.ДоверенностьЛицо = ТранспортнаяИнформацияДляТОРГ12.ФИОВодителя;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.бг_ДоверенностьДолжность <> ТранспортнаяИнформацияДляТОРГ12.ВодительДолжность Тогда
		Объект.бг_ДоверенностьДолжность = ТранспортнаяИнформацияДляТОРГ12.ВодительДолжность;
		Модифицированность = Истина;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Отпустил) 
		И Не ЗначениеЗаполнено(Объект.ОтпустилДолжность) Тогда
		Объект.ОтпустилДолжность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Отпустил, "бг_Должность");
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыПунктаНазначения()

	бг_ПунктНазначения = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ПунктНазначения", 
							Элементы.ГруппаШапкаЛево, 
							"Объект.бг_ПунктНазначения",
							,
							Элементы.ГруппаДанныеКлиента);
	бг_ПунктНазначения.УстановитьДействие("ПриИзменении", "бг_ПунктНазначенияПриИзменении");						
	бг_ПунктНазначения.АвтоМаксимальнаяШирина = Ложь;
	бг_ПунктНазначения.МаксимальнаяШирина 	  = 28;
	
	бг_Лицензия = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_Лицензия", 
							Элементы.ГруппаШапкаЛево, 
							"Объект.бг_Лицензия",
							,
							Элементы.ГруппаДанныеКлиента);
	бг_Лицензия.УстановитьДействие("НачалоВыбора", "бг_ЛицензияНачалоВыбора");						
	бг_Лицензия.АвтоМаксимальнаяШирина = Ложь;
	бг_Лицензия.МаксимальнаяШирина 	   = 28;
	
КонецПроцедуры

#КонецОбласти // Конец ТранспортнаяИнформация

#Область БлокировкаРедактированияДокумента

&НаСервере
Процедура бг_УстановитьВозможностьРедактированияДокумента()

	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или РольДоступна("бг_КонтролерЕГАИС") Тогда

		Возврат;
	КонецЕсли;

	Элементы.бг_КорректировкаОтсрочкиПлатежа.Доступность = 
		Пользователи.РолиДоступны("бг_ИзменениеОтсрочекПлатежейПокупателям");
	
	ТолькоПросмотр = Документы.РеализацияТоваровУслуг.бг_ВведенаТТНИсходящаяЕГАИС(Объект.Ссылка, Ложь);
		
КонецПроцедуры

#КонецОбласти // Конец БлокировкаРедактированияДокумента

#Область РеквизитыДокумента

&НаСервере
Процедура бг_ДобавитьЭлементыДанныхУПП()
	
	бг_НомерДокументаУПП = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма,
		"бг_НомерДокументаУПП",
		Элементы.ГруппаПараметрыПраво,
		"Объект.бг_НомерДокументаУПП",
		"ПолеФормы");
	бг_НомерДокументаУПП.ТолькоПросмотр = Истина;
	бг_НомерДокументаУПП.АвтоМаксимальнаяШирина = Ложь;
	бг_НомерДокументаУПП.МаксимальнаяШирина = 24;
	
КонецПроцедуры

#КонецОбласти // Конец РеквизитыДокумента

#Область EDI

&НаСервере
Процедура бг_ДобавитьЭлементыEDI()
	
	ФлагУведомлениеОбОтгрузке = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма,
		"бг_УведомлениеОбОтгрузкеEDIОтправлено",
		Элементы.ГруппаПараметрыПраво,
		"Объект.бг_УведомлениеОбОтгрузкеEDIОтправлено",,,
		"ПолеФлажка");
	
	ФлагУведомлениеОбОтгрузке.ТолькоПросмотр = Истина;
	ФлагУведомлениеОбОтгрузке.ПоложениеЗаголовка =  ПоложениеЗаголовкаЭлементаФормы.Право;
	
КонецПроцедуры

#КонецОбласти

#Область Bacardi

&НаСервере
Процедура бг_ДобавитьЭлементыBacardi()
	
	// Команда выгрузки файла обмена в Bacardi
	Если Команды.Найти("бг_ВыгрузитьФайлОбменаBacardi") = Неопределено Тогда
		КомандаВыгрузитьФайлОбменаBacardi = Команды.Добавить("бг_ВыгрузитьФайлОбменаBacardi");
		КомандаВыгрузитьФайлОбменаBacardi.Действие = "бг_ВыгрузитьФайлОбменаBacardi";
		
		ОписаниеКоманды = НСтр("ru='Выгрузить файл обмена в Bacardi'");
		КомандаВыгрузитьФайлОбменаBacardi.Заголовок = ОписаниеКоманды;
		КомандаВыгрузитьФайлОбменаBacardi.Подсказка = ОписаниеКоманды;
	КонецЕсли;

	// Кнопка выгрузки файла обмена в Bacardi
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_ВыгрузитьФайлОбменаBacardi") Тогда
			
		КнопкаВыгрузитьФайлОбменаBacardi = Элементы.Добавить(
			"бг_ВыгрузитьФайлОбменаBacardi",
			Тип("КнопкаФормы"),
			Элементы.ФормаКоманднаяПанель);
			
		КнопкаВыгрузитьФайлОбменаBacardi.ИмяКоманды = "бг_ВыгрузитьФайлОбменаBacardi";
		КнопкаВыгрузитьФайлОбменаBacardi.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаВыгрузитьФайлОбменаBacardi.ТолькоВоВсехДействиях = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура бг_ВыгрузитьФайлОбменаBacardiНаСервере(РеализацияТоваровУслуг)
	
	Если Не бг_ОбщегоНазначенияСервер.ЭтоРабочаяБаза() Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Это копия базы. Обмен не возможен.'"));
		Возврат;	
	КонецЕсли;

	ПараметрыКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант(
		"ВыполнятьАрхивациюФайловBacardi, 
		|ИспользоватьПассивноеFTPСоединениеBacardi,
		|ПутьСохраненияФайловBacardi,
		|АдресFTPРесурсаBacardi,
		|ПортFTPСоединенияBacardi,
		|ПользовательFTPСоединенияBacardi,
		|ПарольFTPСоединенияBacardi,
		|СтрокаПодключенияРабочейБазы");
	
	ПредставлениеРеализации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеализацияТоваровУслуг, "Представление");
	
	ОбщегоНазначения.СообщитьПользователю(НСтр(
		СтрШаблон("ru='Начало выгрузки xml-файла Bacardi. Документ: %1.'", ПредставлениеРеализации)));
	
	КаталогДляВыгрузки = КаталогВременныхФайлов();
	Если ПараметрыКонстант.ВыполнятьАрхивациюФайловBacardi Тогда
		КаталогДляВыгрузки = ПараметрыКонстант.ПутьСохраненияФайловBacardi;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КаталогДляВыгрузки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не задан каталог выгрузки файлов.'"));
		Возврат;
	КонецЕсли;	
	
	ИмяЗаписанногоФайла = бг_СформироватьИЗаписатьФайл(РеализацияТоваровУслуг, ПредставлениеРеализации, КаталогДляВыгрузки);	

	ФайлУспешноЗаписанНаFTP = Ложь;
	Если ИмяЗаписанногоФайла <> Неопределено Тогда
		Если ПараметрыКонстант.ВыполнятьАрхивациюФайловBacardi Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр(
				СтрШаблон("ru='Файл записан в каталог архивации файлов: %1.'", КаталогДляВыгрузки)));
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Выполняется выгрузка файла на FTP-сервер.'"));
				
		СтруктураЗначений = Новый Структура();
		СтруктураЗначений.Вставить("ТипНастройки", Неопределено);
		СтруктураЗначений.Вставить("ПутьСохраненияФайлов",					ПараметрыКонстант.ПутьСохраненияФайловBacardi);
		СтруктураЗначений.Вставить("АдресFTPРесурса",						ПараметрыКонстант.АдресFTPРесурсаBacardi);
		СтруктураЗначений.Вставить("ПортFTPСоединения",						ПараметрыКонстант.ПортFTPСоединенияBacardi);
		СтруктураЗначений.Вставить("ПользовательFTPСоединения",				ПараметрыКонстант.ПользовательFTPСоединенияBacardi);
		СтруктураЗначений.Вставить("ПарольFTPСоединения",					ПараметрыКонстант.ПарольFTPСоединенияBacardi);
		СтруктураЗначений.Вставить("ИспользоватьПассивноеFTPСоединение",	ПараметрыКонстант.ИспользоватьПассивноеFTPСоединениеBacardi);
		СтруктураЗначений.Вставить("ВыполнятьАрхивациюФайлов",				ПараметрыКонстант.ВыполнятьАрхивациюФайловBacardi); 
		СтруктураЗначений.Вставить("СтрокаСоединенияИнформационнойБазы",	ПараметрыКонстант.СтрокаПодключенияРабочейБазы);
			
		ФайлУспешноЗаписанНаFTP = бг_ПеренестиФайлНаFTPРесурс(СтруктураЗначений, КаталогДляВыгрузки, ИмяЗаписанногоФайла); 
	КонецЕсли;
	
	Если ФайлУспешноЗаписанНаFTP Тогда 
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			СтрШаблон("ru='Выгрузка файла %1 успешно завершена.'", ИмяЗаписанногоФайла)));
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Выгрузка файла не выполнена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция бг_СформироватьИЗаписатьФайл(РеализацияТоваровУслуг, ПредставлениеРеализации, КаталогДляВыгрузки)

	ДанныеДляВыгрузки = бг_ДанныеПоРеализацииТоваровУслугДляВыгрузки(РеализацияТоваровУслуг);
	ТекстОшибки = бг_ОшибкиДанныхДляВыгрузки(ДанныеДляВыгрузки);
	
	ИмяЗаписанногоФайла = Неопределено;
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			СтрШаблон("ru='Проверка при выгрузке файла по документу %1 %2.'", ПредставлениеРеализации, ТекстОшибки)));	
	Иначе
		ТекстXML = бг_СформироватьТекстXML(ДанныеДляВыгрузки);
		
		ИмяФайла = бг_ИмяФайлаXML(РеализацияТоваровУслуг);
		ПолноеИмяФайла = СтрШаблон("%1\%2", КаталогДляВыгрузки, ИмяФайла);
		
		Попытка
			бг_ЗаписатьФайл(ПолноеИмяФайла, ТекстXML);
			ИмяЗаписанногоФайла = ИмяФайла;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр(
				СтрШаблон("ru='Не удалось сохранить файл выгрузки. %1'", ОписаниеОшибки())));
		КонецПопытки;
	КонецЕсли;
		
	Возврат ИмяЗаписанногоФайла;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура бг_ЗаписатьФайл(ПолноеИмяФайла, ТекстXML)
	
	Файл = Новый ЗаписьТекста(ПолноеИмяФайла, КодировкаТекста.UTF16);
	Файл.ЗаписатьСтроку(ТекстXML);
	Файл.Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция бг_ПеренестиФайлНаFTPРесурс(ДанныеНастройки, КаталогДляВыгрузки, ИмяФайла)

	ПараметрыКаталогаFTP = бг_ПараметрыКаталогаFTP(ДанныеНастройки.АдресFTPРесурса);
	ИмяFTPСервера = ПараметрыКаталогаFTP.ИмяСервера;
	ИмяКаталогаСервера = ПараметрыКаталогаFTP.ИмяКаталога;
		
	Если Не ЗначениеЗаполнено(ИмяFTPСервера) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не задан сервер обмена информацией через FTP.'"));	
		Возврат Ложь;
	КонецЕсли;
	
	Соединение = бг_FTPПодключениеКСерверу(ИмяFTPСервера, ДанныеНастройки);
	Если Соединение = Неопределено Тогда	
		Возврат Ложь;
	КонецЕсли;
	
	НаличиеКаталога = бг_ЕстьКаталогНаFTPСервере(Соединение, ИмяКаталогаСервера);
	Если Не НаличиеКаталога Тогда 	
		Возврат Ложь;
	КонецЕсли;	
		
	ИмяФайлаFTPЗаписи = ИмяКаталогаСервера + "/" + ИмяФайла;
	ИмяВременногоАрхива = КаталогДляВыгрузки + "/" + ИмяФайла;
	
	Попытка
		Соединение.Записать(ИмяВременногоАрхива, ИмяФайлаFTPЗаписи);
		Возврат Истина;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			СтрШаблон("ru='Ошибка при записи/удалении на FTP: %1.'", ОписаниеОшибки())));
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ПараметрыКаталогаFTP(Знач ПолныйFTPАдрес)
	
	АдресОбмена = бг_НормализованныйFTPАдрес(ПолныйFTPАдрес);
	АдресОбмена = СтрЗаменить(АдресОбмена, "\", "/");
	
	ИмяСервера = АдресОбмена;
	ИмяКаталога = "";
	
	ПозицияПрямогоСлеша = Найти(АдресОбмена, "/");	
	Если ПозицияПрямогоСлеша > 0 Тогда
		ИмяСервера = Сред(АдресОбмена, 1, ПозицияПрямогоСлеша - 1);
		ИмяКаталога = Сред(АдресОбмена, ПозицияПрямогоСлеша);
		Если Сред(ИмяКаталога, СтрДлина(ИмяКаталога)) <> "/" Тогда
			ИмяКаталога = ИмяКаталога + "/";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ИмяСервера, ИмяКаталога", ИмяСервера, ИмяКаталога);
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_FTPПодключениеКСерверу(ИмяFTPСервера, НастройкиОбмена, ФиксироватьОшибки = Истина)
	
	Соединение = Неопределено;
	Попытка
		Соединение = Новый FTPСоединение(
			ИмяFTPСервера, 
			НастройкиОбмена.ПортFTPСоединения, 
			НастройкиОбмена.ПользовательFTPСоединения,
			НастройкиОбмена.ПарольFTPСоединения,
			, 
			НастройкиОбмена.ИспользоватьПассивноеFTPСоединение);	
	Исключение
		Если ФиксироватьОшибки Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр(
				СтрШаблон("ru='Ошибка при подключении к FTP: %1 %2 %3.'", ИмяFTPСервера, Символы.ПС, ОписаниеОшибки())));
		КонецЕсли;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ЕстьКаталогНаFTPСервере(Соединение, ИмяКаталогаСервера, ФиксироватьОшибки = Истина)
	
	Если ПустаяСтрока(ИмяКаталогаСервера) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		МассивНайденныхКаталогов = Соединение.НайтиФайлы(ИмяКаталогаСервера, "");
		
		Для Каждого НайденныйКаталог Из МассивНайденныхКаталогов Цикл
			Если Не НайденныйКаталог.ЭтоКаталог() Или НайденныйКаталог.ПолноеИмя + "/" <> ИмяКаталогаСервера Тогда
				Продолжить;
			КонецЕсли;
			
			Возврат Истина;
		КонецЦикла;					
	Исключение		
		Если ФиксироватьОшибки Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр(
				СтрШаблон("ru='Ошибка при соединении с FTP: %1 %2 %3.'", ИмяКаталогаСервера, Символы.ПС, ОписаниеОшибки())));
		КонецЕсли;
		
		Возврат Истина;
	КонецПопытки;
	
	Если ФиксироватьОшибки Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр(
			СтрШаблон("ru='Не найден FTP каталог обмена информацией: %1.'", ИмяКаталогаСервера)));
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ДанныеПоРеализацииТоваровУслугДляВыгрузки(РеализацияТоваровУслуг)
	
	РеализацияТоваровУслугРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеализацияТоваровУслуг, "ЗаказКлиента, Номер, Дата");
	ЗаказКлиента = РеализацияТоваровУслугРеквизиты.ЗаказКлиента;
	НомерРеализации = РеализацияТоваровУслугРеквизиты.Номер;
	ДатаРеализации = РеализацияТоваровУслугРеквизиты.Дата;
	
	НомерЗаказаКонтрагента = "";
	Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		НомерЗаказаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "НомерПоДаннымКлиента");
	КонецЕсли;
	
	ДанныеТТН = бг_ДанныеТТНИсходящаяЕГАИС(РеализацияТоваровУслуг);
	
	ДанныеДляВыгрузки = Новый Структура;
	ДанныеДляВыгрузки.Вставить("НомерТТН",				ДанныеТТН.Номер);
	ДанныеДляВыгрузки.Вставить("ДатаТТН",				ДанныеТТН.Дата);
	ДанныеДляВыгрузки.Вставить("НомерФиксацииВЕГАИС",	ДанныеТТН.НомерФиксацииВЕГАИС);	
	ДанныеДляВыгрузки.Вставить("ДатаПоставки",			ДатаРеализации);
	ДанныеДляВыгрузки.Вставить("НомерЗаказаПоставки",	НомерЗаказаКонтрагента);
	ДанныеДляВыгрузки.Вставить("Товары",				бг_ДанныеДляВыгрузкиТоварыМарки(РеализацияТоваровУслуг));

	Возврат ДанныеДляВыгрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ДанныеДляВыгрузкиТоварыМарки(РеализацияТоваровУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерПозиции,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК КодМатериалаПоставщика,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ""BO""
	|		ИНАЧЕ ЕСТЬNULL(УпаковкиЕдиницыИзмерения.МеждународноеСокращение, """")
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказКлиентаТовары.бг_УпаковкаПаллета.Числитель, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Количество / ЗаказКлиентаТовары.бг_УпаковкаПаллета.Числитель
	|	КОНЕЦ КАК КоличествоЕИМест,
	|	ЕСТЬNULL(СерииНоменклатуры.ДатаПроизводства, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРозлива,
	|	ЕСТЬNULL(СерииНоменклатуры.Ссылка, """") КАК СерияНоменклатуры,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Код, """") КАК КодВидаАП,
	|	ЕСТЬNULL(НоменклатураКонтрагентов.Артикул, """") КАК КодПродуктаЗаказчика,
	|	ЕСТЬNULL(Справки2ЕГАИС.РегистрационныйНомер, """") КАК КодАП
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО (СерииНоменклатуры.Справка2ЕГАИС = Справки2ЕГАИС.Ссылка)
	|		ПО (РеализацияТоваровУслугТовары.Серия = СерииНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО (РеализацияТоваровУслугТовары.Ссылка.Партнер = НоменклатураКонтрагентов.Владелец)
	|			И (РеализацияТоваровУслугТовары.Номенклатура = НоменклатураКонтрагентов.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|			ПО (НоменклатураСправочник.ЕдиницаИзмерения = УпаковкиЕдиницыИзмерения.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|			ПО (НоменклатураСправочник.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|		ПО (РеализацияТоваровУслугТовары.Номенклатура = НоменклатураСправочник.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО (РеализацияТоваровУслугТовары.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка)
	|			И (РеализацияТоваровУслугТовары.КодСтроки = ЗаказКлиентаТовары.КодСтроки)
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &РеализацияТоваровУслугСсылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеМарок.Серия КАК Серия,
	|	бг_ИдентификаторыМарок.НомерМарки КАК НомерМарки
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	(ВЫБРАТЬ
	|		бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|		бг_ДвижениеМарок.Серия.бг_Номенклатура КАК Номенклатура,
	|		бг_ДвижениеМарок.Серия КАК Серия,
	|		бг_ДвижениеМарок.КодУпаковки КАК КодУпаковки
	|	ИЗ
	|		РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
	|	ГДЕ
	|		бг_ДвижениеМарок.Активность
	|		И бг_ДвижениеМарок.Регистратор В(&РегистраторыДвиженияМарок)
	|		И бг_ДвижениеМарок.СтатусМарки = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыАкцизныхМарок.ВключенаВОтгрузку)) КАК ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|		ПО ДвижениеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
	|ГДЕ
	|	ДвижениеМарок.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ДвижениеМарок.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)

	|ИНДЕКСИРОВАТЬ ПО
	|	НомерМарки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Марки.Серия КАК СерияНоменклатуры,
	|	СерииНоменклатуры.бг_НачальныйНомерДиапазона КАК НачальныйНомерДиапазона,
	|	СерииНоменклатуры.бг_КонечныйНомерДиапазона КАК КонечныйНомерДиапазона,
	|	СерииНоменклатуры.бг_СерияМарки КАК СерияМаркиФСМ
	|ПОМЕСТИТЬ втМаркиФСМ
	|ИЗ
	|	Марки КАК Марки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Марки.НомерМарки >= СерииНоменклатуры.бг_ПолныйНачальныйНомерДиапазона
	|			И Марки.НомерМарки <= СерииНоменклатуры.бг_ПолныйКонечныйНомерДиапазона
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.НомерПозиции КАК НомерПозиции,
	|	втТовары.КодМатериалаПоставщика КАК КодМатериалаПоставщика,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	втТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втТовары.КоличествоЕИМест КАК КоличествоЕИМест,
	|	втТовары.ДатаРозлива КАК ДатаРозлива,
	|	втТовары.СерияНоменклатуры КАК СерияНоменклатуры,
	|	втТовары.КодВидаАП КАК КодВидаАП,
	|	втТовары.КодПродуктаЗаказчика КАК КодПродуктаЗаказчика,
	|	втТовары.КодАП КАК КодАП,
	|	ЕСТЬNULL(втМаркиФСМ.НачальныйНомерДиапазона, 0) КАК НачалоДиапазона,
	|	ЕСТЬNULL(втМаркиФСМ.КонечныйНомерДиапазона, 0) КАК КонецДиапазона,
	|	ЕСТЬNULL(втМаркиФСМ.СерияМаркиФСМ, """") КАК СерияФСМ
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМаркиФСМ КАК втМаркиФСМ
	|		ПО (втТовары.СерияНоменклатуры = втМаркиФСМ.СерияНоменклатуры)
	|ИТОГИ
	|	МАКСИМУМ(КодМатериалаПоставщика),
	|	МАКСИМУМ(Номенклатура),
	|	МАКСИМУМ(Количество),
	|	МАКСИМУМ(ЕдиницаИзмерения),
	|	МАКСИМУМ(КоличествоЕИМест),
	|	МАКСИМУМ(ДатаРозлива),
	|	МАКСИМУМ(СерияНоменклатуры),
	|	МАКСИМУМ(КодВидаАП),
	|	МАКСИМУМ(КодПродуктаЗаказчика),
	|	МАКСИМУМ(КодАП)
	|ПО
	|	НомерПозиции,
	|	СерияФСМ";
		
	Запрос.УстановитьПараметр("РеализацияТоваровУслугСсылка", РеализацияТоваровУслуг);
	Запрос.УстановитьПараметр(
		"РегистраторыДвиженияМарок",
		Документы.ТТНИсходящаяЕГАИС.бг_ДанныеДокументовОтраженияФактаWMS(РеализацияТоваровУслуг).ВыгрузитьКолонку(
			"ОтражениеФактаПоРасходномуОрдеру"));
		
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПозиции = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеТоварыМарки = Новый Массив;
		
	Пока ВыборкаПозиции.Следующий() Цикл 
		Товар = Новый Структура("НомерПозиции, КодПродуктаЗаказчика, КодМатериалаПоставщика, ДатаРозлива, Количество, 
			|КоличествоЕИМест, ЕдиницаИзмерения, КодВидаАП, КодАП, КодыМарок");
		ЗаполнитьЗначенияСвойств(Товар, ВыборкаПозиции);
		
		КодыМарок = Новый Массив;	
		ВыборкаСерии = ВыборкаПозиции.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСерии.Следующий() Цикл
			СерияМарки = Новый Структура("СерияФСМ, Диапазоны");
			ЗаполнитьЗначенияСвойств(СерияМарки, ВыборкаСерии);
			
			МассивДиапазоны = Новый Массив;	
			ВыборкаДиапазоны = ВыборкаСерии.Выбрать();
			Пока ВыборкаДиапазоны.Следующий() Цикл
				Диапазон = Новый Структура("НачалоДиапазона, КонецДиапазона");
				ЗаполнитьЗначенияСвойств(Диапазон, ВыборкаДиапазоны);
				
				МассивДиапазоны.Добавить(Диапазон);
			КонецЦикла;
			
			СерияМарки.Диапазоны = МассивДиапазоны;
			КодыМарок.Добавить(СерияМарки);
		КонецЦикла;
		
		Товар.КодыМарок = КодыМарок;
		ДанныеТоварыМарки.Добавить(Товар);
	КонецЦикла;

	Возврат ДанныеТоварыМарки;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ДанныеТТНИсходящаяЕГАИС(РеализацияТоваровУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.бг_НомерФиксацииЕГАИС КАК НомерФиксацииВЕГАИС,
	|	ТТНИсходящаяЕГАИС.НомерТТН КАК Номер,
	|	ТТНИсходящаяЕГАИС.ДатаТТН КАК Дата,
	|	ТТНИсходящаяЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", РеализацияТоваровУслуг);
	РезультатЗапроса = Запрос.Выполнить();

	ДанныеТТН = Новый Структура("Ссылка, Номер, Дата, НомерФиксацииВЕГАИС");
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеТТН, Выборка);
	КонецЕсли;

	Возврат ДанныеТТН;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ОшибкиДанныхДляВыгрузки(ДанныеДляВыгрузки)
	
	Ошибки = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеДляВыгрузки.НомерТТН) Тогда
		Ошибки.Добавить("В документе реализации не заполнен номер ТТН");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляВыгрузки.ДатаТТН) Тогда
		Ошибки.Добавить("В документе реализации не заполнена дата ТТН");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляВыгрузки.ДатаПоставки) Тогда
		Ошибки.Добавить("В заказе покупателя не заполнена дата отгрузки");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляВыгрузки.НомерЗаказаПоставки) Тогда
		Ошибки.Добавить("В заказе покупателя не заполнено свойство ""Номер заказа контрагента""");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляВыгрузки.НомерФиксацииВЕГАИС) Тогда
		Ошибки.Добавить("В документе реализации не заполнен номер фиксации в ЕГАИС");
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_СформироватьТекстXML(ДанныеДляВыгрузки)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	
	URIПространстваИмен = "DESADV";
	ФайлОбмена = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, "Document-DespatchAdvice"));
	ШапкаРеализацииXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, "Шапка"));
	СодержимоеРеализацииXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, "ПозицииПоставки"));
	
	ЗаполнитьЗначенияСвойств(ШапкаРеализацииXDTO, ДанныеДляВыгрузки);
	
	Для Каждого СтрокаТовары Из ДанныеДляВыгрузки.Товары Цикл
		ЭлементСодержимогоXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, "ПозицияЭлемент"));
		ЗаполнитьЗначенияСвойств(ЭлементСодержимогоXDTO, СтрокаТовары);
		
		Для Каждого СерииФСМ Из СтрокаТовары.КодыМарок Цикл
			ЭлементМаркиXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, "КодыМарокЭлемент"));
			ЭлементМаркиXDTO.СерияФСМ = СерииФСМ.СерияФСМ;
			Для Каждого Диапазон Из СерииФСМ.Диапазоны Цикл
				ЭлементДиапазоныXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИмен, "ДиапазонМарок"));
				ЗаполнитьЗначенияСвойств(ЭлементДиапазоныXDTO, Диапазон);
				ЭлементМаркиXDTO.ДиапазоныМарок.Добавить(ЭлементДиапазоныXDTO);
			КонецЦикла; 
			ЭлементСодержимогоXDTO.КодыМарок.Добавить(ЭлементМаркиXDTO);
		КонецЦикла;
		
		СодержимоеРеализацииXDTO.ПозицияЭлементы.Добавить(ЭлементСодержимогоXDTO);
	КонецЦикла;
		
	ФайлОбмена.Шапка = ШапкаРеализацииXDTO;
	ФайлОбмена.ПозицииПоставки = СодержимоеРеализацииXDTO;
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ФайлОбмена);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ИмяФайлаXML(РеализацияТоваровУслуг)
	
	ИмяФайла = "DESADV";
	ПрефиксСклада = "0";
	НомерТТН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеализацияТоваровУслуг, "Номер");
	ДатаФайла = Формат(ТекущаяДата(), "ДФ=yyyyMMdd_HHmmss"); 
	
	ИмяФайлаXML = СтрШаблон("DESADV_%1-%2_%3.xml", ПрефиксСклада, Прав(НомерТТН, 6), ДатаФайла);	
	
	Возврат ИмяФайлаXML; 
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_НормализованныйFTPАдрес(Знач FTPАдрес)
	
	ИтоговыйАдрес = СокрЛП(FTPАдрес);
	ПозицияFTP = Найти(Врег(ИтоговыйАдрес), "FTP://");
	Если ПозицияFTP = 1 Тогда
		ИтоговыйАдрес = Сред(ИтоговыйАдрес, 7);	
	КонецЕсли;
	
	Возврат ИтоговыйАдрес;
	
КонецФункции


#КонецОбласти // Конец Bacardi

#Область Акциз

&НаСервере
&После("ОрганизацияПриИзмененииСервер")
Процедура бг_ОрганизацияПриИзмененииСервер()
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(Объект, Объект.Товары);
КонецПроцедуры

&НаСервере
&После("ОбработкаВыбораПодборНаСервере")
Процедура бг_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(Объект, Объект.Товары);
КонецПроцедуры

&НаСервере
&После("ОбработкаПодбораТоваровИзЗаказа")
Процедура бг_ОбработкаПодбораТоваровИзЗаказа(АдресТоваровВХранилище)
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(Объект, Объект.Товары);
КонецПроцедуры

&НаСервере
&После("НалогообложениеНДСПриИзмененииСервер")
Процедура бг_НалогообложениеНДСПриИзмененииСервер()
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(Объект, Объект.Товары);
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыНоменклатураПриИзмененииПосле(Элемент)
	бг_ЗаполнитьСуммуАкцизаПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоУпаковокПриИзмененииПосле(Элемент)
	бг_ЗаполнитьСуммуАкцизаПоСтроке();
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыУпаковкаПриИзмененииПосле(Элемент)
	бг_ЗаполнитьСуммуАкцизаПоСтроке();
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьСуммуАкцизаПоСтроке()
	ВыделенныеСтроки = Новый Массив;
	ВыделенныеСтроки.Добавить(Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока));
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(Объект, Объект.Товары, ВыделенныеСтроки);
КонецПроцедуры

#КонецОбласти

#Область ОтсрочкаПлатежа

&НаСервере
Процедура бг_ДобавитьЭлементыОтсрочкиПлатежа()
	
	
	ГруппаДополнительнаяИнформацияПоОплатам = Элементы.Добавить(
									"бг_ДополнительнаяИнформациПоОплатам",
									Тип("ГруппаФормы"),
									Элементы.ГруппаОплата);
    ГруппаДополнительнаяИнформацияПоОплатам.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДополнительнаяИнформацияПоОплатам.ОтображатьЗаголовок = Ложь;
	ГруппаДополнительнаяИнформацияПоОплатам.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	
	бг_КоличествоДнейОтсрочки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_КоличествоДнейОтсрочки", 
							ГруппаДополнительнаяИнформацияПоОплатам, 
							"Объект.бг_КоличествоДнейОтсрочки",,,
							"ПолеНадписи");
							
	бг_КоличествоДнейОтсрочки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
							
	
	бг_КорректировкаОтсрочкиПлатежа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_КорректировкаОтсрочкиПлатежа", 
							ГруппаДополнительнаяИнформацияПоОплатам, 
							"Объект.бг_КорректировкаОтсрочкиПлатежа",,,);
							
	бг_КорректировкаОтсрочкиПлатежа = ГоризонтальноеПоложениеЭлемента.Лево;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура бг_ЗаполнитьПунктНазначенияИЛицензию()
	
	бг_УчетАлкоголя.ЗаполнитьПунктНазначенияИЛицензиюВДокументе(Объект);
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьЛицензию()
	
	бг_УчетАлкоголя.ЗаполнитьЛицензиюВДокументе(Объект);
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьКомандыФормы()
	
	КомандаВыгрузитьПакетОтгрузкиПродукции = Команды.Добавить("бг_ВыгрузитьПакетОтгрузкиПродукции");
	КомандаВыгрузитьПакетОтгрузкиПродукции.Действие = "бг_ВыгрузитьПакетОтгрузкиПродукции";
	
	КомандаВыгрузитьПакетОтгрузкиПродукции.Заголовок = НСтр("ru = 'Выгрузить пакет ЭОД БГ'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	КомандаВыгрузитьПакетОтгрузкиПродукции.Подсказка =
		НСтр("ru='Отправляет пакет ""Отгруженная продукция"" по почте партнеру.'",
			ОбщегоНазначения.КодОсновногоЯзыка());

	КнопкаВыгрузитьПакетОтгрузкиПродукции = Элементы.Добавить(
		"бг_ВыгрузитьПакетОтгрузкиПродукции",
		Тип("КнопкаФормы"),
		Элементы.ФормаКоманднаяПанель);
		
	КнопкаВыгрузитьПакетОтгрузкиПродукции.ИмяКоманды = "бг_ВыгрузитьПакетОтгрузкиПродукции";
	КнопкаВыгрузитьПакетОтгрузкиПродукции.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ПоложениеКнопки = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	КнопкаВыгрузитьПакетОтгрузкиПродукции.ПоложениеВКоманднойПанели = ПоложениеКнопки;
	
	// Команда интерактивной отправки DESADV в SAP.
	// Используется в случае продажи безалкогольной продукции, так как в этом случае нет события
	// подтверждения ТТН исхходящей и автоматической отправки не производится.
	КнопкаВыгрузитьDESADVвSAP = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект,
		"бг_ВыгрузитьDESADVвSAP",
		Элементы.ФормаКоманднаяПанель,
		НСтр("ru = 'Выгрузить DESADV в SAP'"),
		"бг_ВыгрузитьDESADVвSAP",
		"бг_ВыгрузитьDESADVвSAP",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);
	
	КнопкаВыгрузитьDESADVвSAP.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	//КнопкаОбеспечитьСоСклада.Доступность = бг_ВзможноЗаполнениеОбеспеченияИзФормыДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СформироватьПакетОтгрузкиПродукцииИСоздатьПисьмо(Ссылка, Партнер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыОповещений = РассылкиИОповещенияКлиентамПовтИсп.ДействующиеВидыОповещенийПоТипуСобытия(
		Перечисления.ТипыСобытийОповещений.бг_ОтгрузкаГотовойПродукции);
		
	ОтправлятьОповещениеСДаты = Дата(1, 1, 1);
	КоличествоСекундВОдномДне = 86400;
	КоличествоДней = 3;
	АктуальностьОповещенияДоДаты = ТекущаяДатаСеанса() + КоличествоДней * КоличествоСекундВОдномДне;
	
	Для Каждого ВидОповещения Из ВидыОповещений Цикл

		Запись = РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДатаСеанса() - 1;
		Запись.ВидОповещения = ВидОповещения;
		Запись.Подписчик = Партнер;
		Запись.ИсточникОповещения = бг_ФормированиеПакетаОтгрузкиГотовойПродукцииВызовСервера.ТТНИсходящаяПоРеализации(
			Ссылка);
		Запись.ДатаОтправки = ОтправлятьОповещениеСДаты;
		Запись.ДатаАктуальностиОтправки = АктуальностьОповещенияДоДаты;
		
		Запись.Записать(Истина);
		
	КонецЦикла;	
	
	РассылкиИОповещенияКлиентам.ФормированиеСообщенийПоОповещениямКлиентов();
	
КонецПроцедуры

#Область РегистрацияDESADV

&НаСервереБезКонтекста
Функция ПараметрыОтправкиDESADV(Знач Объект)
	
	ПараметрыОтправкиDESADV = Новый Структура;
	ПараметрыОтправкиDESADV.Вставить(
		"ЭтоРеализацияКонтрагентуSAP",
		Документы.РеализацияТоваровУслуг.бг_ЭтоРеализацияКонтрагентуSAP(Объект));
	ПараметрыОтправкиDESADV.Вставить(
		"ДатОтправкиDESADV",
		Документы.РеализацияТоваровУслуг.бг_ДатОтправкиDESADV(Объект.Ссылка));
	
	Возврат ПараметрыОтправкиDESADV;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОПроведенииПередОтправкойDESADV()
	
	ДополнительныеПараметры = Новый Структура;
	ПоказатьВопрос(
		Новый ОписаниеОповещения("бг_ВыгрузитьDESADVвSAPЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?';
			|en = 'To proceed, you need to post the document. Do you want to post the document?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВыгрузитьDESADVПослеВопросаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Если Модифицированность Или Не Объект.Проведен Тогда
			ПоказатьВопросОПроведенииПередОтправкойDESADV();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	бг_ВыгрузитьDESADVвSAPФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВыгрузитьDESADVвSAPФрагмент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	бг_ВыгрузитьDESADVвSAPНаСервере();
	бг_ПоказатьОповещениеОРегистрацииDESADV();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ВыгрузитьDESADVвSAPЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("бг_ВыгрузитьDESADVвSAPФрагмент", ЭтотОбъект);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		ОчиститьСообщения();
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПоказатьОповещениеОРегистрацииDESADV()
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Обмен с SAP';
			|en = 'Обмен с SAP'"), ,
		НСтр("ru = 'Зарегистрирована DESADV для выгрузки в SAP';
			|en = 'Зарегистрирована DESADV для выгрузки в SAP'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура бг_ВыгрузитьDESADVвSAPНаСервере()
	
	Документы.РеализацияТоваровУслуг.бг_ЗарегистрироватьКВыгрузкеDESADV(Объект.Ссылка, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

