#Область ПрограммныйИнтерфейс

&Вместо("ЗаполнитьПоОстаткамЗаказов")
Процедура бг_ЗаполнитьПоОстаткамЗаказов(ДанныеОтбора,
										Товары,
										СкидкиНаценки,
										СкладРеализации,
										МассивЗаказов,
										ПараметрыЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеОтбора) = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		И ДанныеОтбора.ДополнительныеСвойства.Свойство("бг_ПропуститьЗаполнениеТоваровПоОстаткамЗаказов")
		И ДанныеОтбора.ДополнительныеСвойства.бг_ПропуститьЗаполнениеТоваровПоОстаткамЗаказов Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьВызов(ДанныеОтбора,
					Товары,
					СкидкиНаценки,
					СкладРеализации,
					МассивЗаказов,
					ПараметрыЗаполнения);
КонецПроцедуры

// Интерфейс для отложенной обработки заказов клиентов.
//
// Параметры:
//   Источник - ДокументСсылка.ЗаказКлиента - заказ клиента, который надо обработать.
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов - вариант обработки заказа клиента.
//   Отказ - Булево - Отказ от обработки.
//   ПоказателиДополнительныхСведений - ХранилищеЗначения - Показатели дополнительных сведений
Процедура бг_ОтложеннаяОбработкаОбъекта(Источник, ВариантОбработки, Отказ,
	ДополнительныеСведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОбработки =
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтразитьДополнительныеСведенияЗаказаКлиента Тогда
		
		бг_ПересчитатьСкидкиВРеализацииТоваров(Источник);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура бг_СоздатьИзменитьРеализациюПоПоступлению(ДокументОснование) Экспорт
	
	НастройкиСозданияПодчиненнойРеализации = бг_НастройкиСозданияПодчиненнойРеализации(ДокументОснование);
	Если НастройкиСозданияПодчиненнойРеализации.НеобходимоСоздатьДокумент = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРеализацияОбъект = бг_НайтиСоздатьПодчиненнуюРеализацию(ДокументОснование);
	
	Если ДокументРеализацияОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	бг_ЗаполнитьШапку(ДокументРеализацияОбъект, ДокументОснование, НастройкиСозданияПодчиненнойРеализации);
	бг_ЗаполнитьТовары(ДокументРеализацияОбъект, ДокументОснование);
	
	ДокументРеализацияОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	ДокументРеализацияОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ДокументСчетФактураСсылка = УчетНДСРФВызовСервера.СчетФактураВыданныйПоОснованию(
				ДокументРеализацияОбъект.Ссылка, ДокументРеализацияОбъект.Организация);
	Если ЗначениеЗаполнено(ДокументСчетФактураСсылка) Тогда
		ДокументСчетФактураОбъект = ДокументСчетФактураСсылка.ПолучитьОбъект();
	Иначе
		ДокументСчетФактураОбъект = Документы.СчетФактураВыданный.СоздатьДокумент();
	КонецЕсли;
	
	бг_ЗаполнитьШапкуСчетФактуры(ДокументСчетФактураОбъект, ДокументРеализацияОбъект);
	ДокументСчетФактураОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	ДокументСчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

// Возвращает признак наличия по реализации ТТН исходящей.
//
// Параметры:
//  РеализацияТоваровУслуг  - ДокументСсылка.РеализацияТоваровУслуг
//  УчитыватьОтмененные  - Булево
//
// Возвращаемое значение:
//   Булево
//
Функция бг_ВведенаТТНИсходящаяЕГАИС(РеализацияТоваровУслуг, УчитыватьОтмененные = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(РеализацияТоваровУслуг) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка КАК ТТНИсходящаяЕГАИС
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ТТНИсходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ДокументОснование = &РеализацияТоваровУслуг
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|	И (&УчитыватьОтмененные
	|			ИЛИ НЕ СтатусыДокументовЕГАИС.Статус В (&СтатусыОтменыЕГАИС))";	
	Запрос.УстановитьПараметр("РеализацияТоваровУслуг", РеализацияТоваровУслуг);
	Запрос.УстановитьПараметр("УчитыватьОтмененные", УчитыватьОтмененные);
	Запрос.УстановитьПараметр("СтатусыОтменыЕГАИС", Документы.ТТНИсходящаяЕГАИС.бг_СтатусыОтменыЕГАИС());
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает признак, того что это реализация контрагенту SAP.
//
// Параметры:
//  Реализация - ДокументОбъект.РеализацияТоваровУслуг, ДокументСсылка.РеализацияТоваровУслуг, ДанныеФормыСтруктура 
//                          - реализация товаров и услуг. 
//
// Возвращаемое значение:
//  Булево - признак, того что это реализация контрагенту SAP.
//
Функция бг_ЭтоРеализацияКонтрагентуSAP(Реализация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеализацияКонтрагентуSAP = Ложь;
	РеализацияТипЗначения = ТипЗнч(Реализация); 
	
	Если РеализацияТипЗначения = Тип("ДокументОбъект.РеализацияТоваровУслуг") 
		Или ТипЗнч(Реализация) = Тип("ДанныеФормыСтруктура") Тогда
		ЗаказКлиента = Реализация.ЗаказКлиента;
	ИначеЕсли РеализацияТипЗначения = Тип("ДокументСсылка.РеализацияТоваровУслуг") 
		И ЗначениеЗаполнено(Реализация) Тогда
		ЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реализация, "ЗаказКлиента");		
	Иначе
		ЗаказКлиента = Неопределено;
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
		ИсточникЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "бг_ИсточникЗаказа");	
		РеализацияКонтрагентуSAP = 
			ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
			Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED;
	КонецЕсли;
	
	Возврат РеализацияКонтрагентуSAP;
	
КонецФункции

// Возвращает дату отправки по реализации DESADV в SAP.
//
// Параметры:
//  Реализация - ДокументСсылка.РеализацияТоваровУслуг - ссылка на реализацию товаров и услуг. 
//
// Возвращаемое значение:
//  Дата - Дата отправки DESADV.
//
Функция бг_ДатОтправкиDESADV(Реализация) Экспорт
	
	ДатОтправкиDESADV = '00010101';
	Если Не ЗначениеЗаполнено(Реализация) Тогда
		Возврат ДатОтправкиDESADV;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРеализации", Реализация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыОтправкиDESADVвSAP.ДатОтправкиDESADV КАК ДатОтправкиDESADV
	|ИЗ
	|	РегистрСведений.бг_ДатыОтправкиDESADVвSAP КАК ДатыОтправкиDESADVвSAP
	|ГДЕ
	|	ДатыОтправкиDESADVвSAP.ДокументРеализации = &ДокументРеализации
	|	И ДатыОтправкиDESADVвSAP.ДатОтправкиDESADV <> ДАТАВРЕМЯ(1, 1, 1)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ДатОтправкиDESADV = Выборка.ДатОтправкиDESADV;
	КонецЕсли; 
	
	Возврат ДатОтправкиDESADV;
	
КонецФункции

// Регистрирует к выгрузке DESADV в SAP (в очереди исходящих сообщений Адаптера).
//
// Параметры:
//  Реализация               - ДокументСсылка.РеализацияТоваровУслуг - ссылка на реализацию товаров и услуг.
//  РегистрироватьБезусловно - Булево - Истина, пропустить проверку необходимости регистрации DESADV
//                                      Ложь, выполнить проверку необходимости регистрации DESADV
//  ТТНИсходящаяЕГАИС        - ДокументСсылка.ТТНИсходящаяЕГАИС - ссылка на ТТН исходящую, при обработке
//                                      которой была отправлена DESADV.
//
Процедура бг_ЗарегистрироватьКВыгрузкеDESADV(Реализация,
											РегистрироватьБезусловно = Ложь,
											ТТНИсходящаяЕГАИС = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РегистрироватьБезусловно 
		И Не бг_ПоРеализацииТребуетсяВыгрузкаDESADV(Реализация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТТНИсходящаяЕГАИС = Неопределено Тогда
		ТТНИсходящаяЕГАИС = бг_ТТНИсходящаяЕГАИСНеОтмененная(Реализация); 
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.бг_ДатыОтправкиDESADVвSAP.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументРеализации.Установить(Реализация);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ДокументРеализации = Реализация;
	Запись.ДатОтправкиDESADV = ТекущаяДатаСеанса();
	Запись.ТТНИсходящаяЕГАИС = ТТНИсходящаяЕГАИС;
	
	НаборЗаписей.Записать(Истина);
	
	ДополнительныеСвойстваРеализации = Новый Структура("ЗарегистрироватьDESADV");
	бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(
		Реализация,
		ДополнительныеСвойстваРеализации);
	
КонецПроцедуры

// Удаляет запись о дате отправки DESADV в SAP (в РС Даты отправки DESADV в SAP).
// Используется при отмене ТТН в ЕГАИС.
//
// Параметры:
//  Реализация        - ДокументСсылка.РеализацияТоваровУслуг - ссылка на реализацию товаров и услуг.
//  ТТНИсходящаяЕГАИС - ДокументСсылка.ТТНИсходящаяЕГАИС - ссылка на ТТН исходящую, при обработке
//                                                         которой была отправлена DESADV.
//
Процедура бг_УдалитьДатуОтправкиDESADVвSAP(Реализация, ТТНИсходящаяЕГАИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументРеализации", Реализация);
	Запрос.УстановитьПараметр("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыОтправкиDESADVвSAP.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	РегистрСведений.бг_ДатыОтправкиDESADVвSAP КАК ДатыОтправкиDESADVвSAP
	|ГДЕ
	|	ДатыОтправкиDESADVвSAP.ДокументРеализации = &ДокументРеализации
	|	И ДатыОтправкиDESADVвSAP.ТТНИсходящаяЕГАИС = &ТТНИсходящаяЕГАИС
	|	И ДатыОтправкиDESADVвSAP.ДатОтправкиDESADV <> ДАТАВРЕМЯ(1, 1, 1)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.бг_ДатыОтправкиDESADVвSAP.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументРеализации.Установить(Реализация);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура бг_ПересчитатьСкидкиВРеализацииТоваров(Реализация,
	Отказ = Ложь, ОбновитьДополнительныеСведения = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Реализация.ПолучитьОбъект();
	
	Если бг_УчетАлкоголя.ПродажаАлкогольнойПродукции(ДокументОбъект) Тогда
		
		ТТНИсходящаяЕГАИС = бг_ТТНИсходящаяЕГАИСНеОтмененная(Реализация);
		
		Если ЗначениеЗаполнено(ТТНИсходящаяЕГАИС) Тогда
			ТекстОшибки = СтрШаблон((НСтр("ru = 'Создана ""%1"". Пересчет скидок возможен после отмены ТТН.'")),
				ТТНИсходящаяЕГАИС);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Реализация);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыРасчета = СкидкиНаценкиЗаполнениеСервер.НовыйПараметрыРассчитать();
	ПараметрыРасчета.ПрименятьКОбъекту				= Истина;
	ПараметрыРасчета.ТолькоПредварительныйРасчет	= Ложь;
	ПараметрыРасчета.ЗаполнитьРеализациюПоЗаказу	= Истина;
		
	СкидкиНаценкиЗаполнениеСервер.Рассчитать(ДокументОбъект, ПараметрыРасчета);
		
	Попытка
		ДокументОбъект.Записать(?(ДокументОбъект.Проведен,
			РежимЗаписиДокумента.Проведение,
			РежимЗаписиДокумента.Запись));
	Исключение
		
		ШаблонСообщения = 
			НСтр("ru = 'Не удалось записать Реализацию товаров %1.По причине: %2'",
			ОбщегоНазначения.КодОсновногоЯзыка());
			
		ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			Реализация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отложенная обработка. Пересчет скидок в РТиУ'"),
			УровеньЖурналаРегистрации.Ошибка,
			Реализация.Метаданные(),
			Реализация,
			ТекстСообщения);
			
	КонецПопытки;
	
	Если ОбновитьДополнительныеСведения Тогда
		
		ЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реализация, "ЗаказКлиента");
		
		ЗаказыКлиентов = Новый Массив();
		ЗаказыКлиентов.Добавить(ЗаказКлиента);
		
		РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.ОтразитьДополнительныеСведенияЗаказаКлиента(
			ЗаказыКлиентов,
			Отказ,,
			РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.ПоказателиПоТипуДокумента(Реализация));
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

&После("ДобавитьКомандыПечати")
Процедура бг_ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ЭтоПартнер = ПраваПользователяПовтИсп.ЭтоПартнер();
	
	Если НЕ ЭтоПартнер Тогда
		
		// Информационная справка
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.РеализацияТоваровУслуг";
		КомандаПечати.Идентификатор  = "бг_ПФ_MXL_ИнформационнаяСправка";
		КомандаПечати.Представление  = НСтр("ru = 'Информационная справка'");
		КомандаПечати.Порядок 		 = 40;
		
		// Информационная справка экспорт
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.РеализацияТоваровУслуг";
		КомандаПечати.Идентификатор  = "бг_ПФ_MXL_ИнформационнаяСправка";
		КомандаПечати.Представление  = НСтр("ru = 'Информационная справка экспорт'");
		КомандаПечати.Порядок 		 = 50;
		КомандаПечати.ДополнительныеПараметры.Вставить("Экспорт", Истина);
		
		// ТД СМ Реестр сертификатов
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.РеализацияТоваровУслуг";
		КомандаПечати.Идентификатор  = "бг_ПФ_MXL_ТДСМРеестрСертификатов";
		КомандаПечати.Представление  = НСтр("ru = 'ТД СМ Реестр сертификатов'");
		КомандаПечати.Порядок 		 = 60;
		
		// Акт перегрузки
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.РеализацияТоваровУслуг";
		КомандаПечати.Идентификатор  = "бг_ПФ_MXL_АктПерегрузкиТМЦ";
		КомандаПечати.Представление  = НСтр("ru = 'Акт перегрузки ТМЦ'");
		КомандаПечати.Порядок 		 = 70;
		
		// Расходная накладная (основной)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.РеализацияТоваровУслуг";
		КомандаПечати.Идентификатор  = "бг_ПФ_MXL_РасходнаяНакладная";
		КомандаПечати.Представление  = НСтр("ru = 'Расходная накладная (основной)'");
		КомандаПечати.Порядок 		 = 10;
				
		// Транспортная накладная
		Обработки.бг_ПечатьТранспортнаяНакладная.ДобавитьКомандыПечати(КомандыПечати);
		
		// Качественное удостоверение
		Обработки.бг_ПечатьКачественногоУдостоверения.ДобавитьКомандуПечати(КомандыПечати);
				
		РегистрыСведений.бг_НастройкиПечатиКомплектов.ДобавитьИзменитьКомандыПечати(КомандыПечати);
		
	КонецЕсли;
	
КонецПроцедуры

&Перед("Печать")
Процедура бг_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бг_ПФ_MXL_ИнформационнаяСправка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"бг_ПФ_MXL_ИнформационнаяСправка",
			НСтр("ru = 'Информационная справка'"),
			бг_СформироватьПечатнуюФормуИнформационнойСправки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.РеализацияТоваровУслуг.бг_ПФ_MXL_ИнформационнаяСправка");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бг_ПФ_MXL_ТДСМРеестрСертификатов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"бг_ПФ_MXL_ТДСМРеестрСертификатов",
			НСтр("ru = 'ТД СМ Реестр сертификатов'"),
			бг_СформироватьПечатнуюФормуТДСМРеестровСертификатов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			,
			"Документ.РеализацияТоваровУслуг.бг_ПФ_MXL_ТДСМРеестрСертификатов");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бг_ПФ_MXL_АктПерегрузкиТМЦ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"бг_ПФ_MXL_АктПерегрузкиТМЦ",
			НСтр("ru = 'Акт перегрузки ТМЦ'"),
			бг_СформироватьПечатнуюФормуАктПерегрузкиТМЦ(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.РеализацияТоваровУслуг.бг_ПФ_MXL_АктПерегрузкиТМЦ");
	КонецЕсли;
		
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "бг_ПФ_MXL_РасходнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"бг_ПФ_MXL_РасходнаяНакладная",
			НСтр("ru = 'Расходная накладная (основной)'"),
			бг_СформироватьПечатнуюФормуРасходнаяНакладнаяОсновной(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
		
КонецПроцедуры

Функция бг_СформироватьПечатнуюФормуИнформационнойСправки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнформационнаяСправка";
	бг_НастроитьТабличныйДокумент(ТабличныйДокумент);
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	Для Каждого Ссылка из МассивОбъектов Цикл
		
		ТабличныйДокументОбъекта = бг_ИнформационнаяСправка(Ссылка, ОбъектыПечати, ПараметрыПечати);
		Если ТабличныйДокумент.ВысотаТаблицы > 0 И ТабличныйДокументОбъекта.ВысотаТаблицы > 0 Тогда 
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ТабличныйДокумент.Вывести(ТабличныйДокументОбъекта);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, 
			НомерСтрокиНачало, 
			ОбъектыПечати, 
			Ссылка);
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент; 
	
КонецФункции 

Функция бг_СформироватьПечатнуюФормуТДСМРеестровСертификатов(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РЕЕСТР_СЕРТИФИКАТОВ";

	НомерТипаДокумента = 0;
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		
		ДанныеДляПечати = МенеджерОбъекта.бг_ДанныеПечатиТДСМРеестрСертификатов(
			ПараметрыПечати, 
			СтруктураОбъектов.Значение); 
		
		бг_ЗаполнитьТабличныйДокументРеестрСертификатов(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати);
		
	КонецЦикла;

	Возврат ТабличныйДокумент; 
	
КонецФункции

Функция бг_ИнформационнаяСправка(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
			
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	МакетОбработки = ПолучитьМакет("бг_ПФ_MXL_ИнформационнаяСправка");
	
	ДанныеПечатиИнформационнойСправки = бг_ДанныеПечатиИнформационнойСправки(МассивОбъектов); 
	Шапка = ДанныеПечатиИнформационнойСправки.ДанныеШапки;
	Шапка.Следующий();
	
	ОбластьМакетаШапка 					   = МакетОбработки.ПолучитьОбласть("Шапка");
	ОбластьМакетаКодыSY 				   = МакетОбработки.ПолучитьОбласть("КодыSY"); 
	ОбластьМакетаБлокРасширеннойИнформации = МакетОбработки.ПолучитьОбласть("БлокРасширеннойИнформации"); 
	ОбластьМакетаБлокЕГАИС 				   = МакетОбработки.ПолучитьОбласть("БлокЕГАИС");
	ОбластьМакетаЗаголовокТаблицы 		   = МакетОбработки.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьМакетаСтрока 				   = МакетОбработки.ПолучитьОбласть("Строка");
	ОбластьМакетаИтого 					   = МакетОбработки.ПолучитьОбласть("Итого");
	ОбластьМакетаЗаголовокСвод 			   = МакетОбработки.ПолучитьОбласть("ЗаголовокСвод");
	ОбластьМакетаСтрокаСвод 			   = МакетОбработки.ПолучитьОбласть("СтрокаСвод");
	ОбластьМакетаСтрокаСводВторая 		   = МакетОбработки.ПолучитьОбласть("СтрокаСвод"); 
	ОбластьМакетаИтогСвод 				   = МакетОбработки.ПолучитьОбласть("ИтогСвод");
	ОбластьМакетаИтогПоКодуСвод 		   = МакетОбработки.ПолучитьОбласть("ИтогПоКодуСвод");
	ОбластьМакетаПодписанты 			   = МакетОбработки.ПолучитьОбласть("Подписанты");	   

	ОбластьМакетаШапка.Параметры.Заголовок = бг_ЗаголовокДокумента(Шапка,
		"Информационная справка с указанием алкогольной продукции к товарной накладной");
  	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);  
	
	ЗаполнитьЗначенияСвойств(ОбластьМакетаКодыSY.Параметры, Шапка);
	ТабличныйДокумент.Вывести(ОбластьМакетаКодыSY);  

	Если ПараметрыПечати.Свойство("Экспорт")
		И ПараметрыПечати.Экспорт Тогда 
		
		ОбластьМакетаБлокРасширеннойИнформации.Параметры.Покупатель = СтрШаблон(НСтр("ru = '%1, %2.'"), 
			Шапка.КонтрагентНаименованиеПолное, 
			УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Шапка.Контрагент,
				Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, ,
				Шапка.Дата));
						
		Если    Шапка.ЯвляетсяРезидентом
			Или Шапка.ЧленТаможенногоСоюза Тогда
			
			ОбластьМакетаБлокРасширеннойИнформации.Параметры.ДокументОснование = СтрШаблон(НСтр("ru = 'Счет-фактура № %1 от %2'"),
				Шапка.Номер,
				Формат(Шапка.Дата, "ДФ='dd.MM.yyyy"" г.""'"));
		Иначе
			ОбластьМакетаБлокРасширеннойИнформации.Параметры.ДокументОснование = НСтр("ru = 'Инвойс № __________ от _______________ г.'");
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьМакетаБлокРасширеннойИнформации);
		
		Если ЗначениеЗаполнено(Шапка.ДокументЕГАИС) Тогда 
			ТекстРегистрацияВЕГАИС = НСтр("ru = 'ТТН ЕГАИС с идентификатором %1 '") 
				+ НСтр("ru = 'зарегистрирован %2 и имеет номер фиксации %3.'");
			
			ОбластьМакетаБлокЕГАИС.Параметры.РегистрацияВЕГАИС = СтрШаблон(ТекстРегистрацияВЕГАИС,
				Шапка.ИдентификаторТТН,
				Формат(Шапка.ДатаФиксацииВЕГАИС, "ДФ='dd.MM.yyyy'"),
				Шапка.НомерФиксацииВЕГАИС);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаБлокЕГАИС);
		
	КонецЕсли;
			
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы); 
	
	ВыборкаТабличнойЧасти = ДанныеПечатиИнформационнойСправки.ДанныеТабличнойЧасти;
	
	НомерПоПорядку = 1; 
	ВсегоШтук 	   = 0;
	ВсегоДАЛ  	   = 0;
		
	Пока ВыборкаТабличнойЧасти.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, ВыборкаТабличнойЧасти);
		ОбластьМакетаСтрока.Параметры.НомерПоПорядку = НомерПоПорядку;		
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		
		ВсегоШтук	   = ВсегоШтук + ВыборкаТабличнойЧасти.Штук;
		ВсегоДАЛ	   = ВсегоДАЛ  + ВыборкаТабличнойЧасти.ДАЛ;
		НомерПоПорядку = НомерПоПорядку + 1;
		
	КонецЦикла;
	
	ОбластьМакетаИтого.Параметры.ВсегоШтук = ВсегоШтук;
	ОбластьМакетаИтого.Параметры.ВсегоДАЛ  = ВсегоДАЛ; 
	
	ТабличныйДокумент.Вывести(ОбластьМакетаИтого); 
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокСвод); 
	
	ИтогСводШтук = 0;
	ИтогСводДАЛ = 0;
	
	ВыборкаТабличнойЧастиИтоги = ДанныеПечатиИнформационнойСправки.ДанныеИтогов;
		
	Пока ВыборкаТабличнойЧастиИтоги.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрокаСвод.Параметры, ВыборкаТабличнойЧастиИтоги, , "ИННПроизводитель, КПППроизводитель");	
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаСвод);
		
		ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрокаСводВторая.Параметры, ВыборкаТабличнойЧастиИтоги, , "КодВидаПродукции");
		ОбластьМакетаСтрокаСводВторая.Параметры.ВидАлкогольнойПродукции = ВыборкаТабличнойЧастиИтоги.ПроизводительНаименование;	
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаСводВторая);
		
		ЗаполнитьЗначенияСвойств(ОбластьМакетаИтогПоКодуСвод.Параметры, ВыборкаТабличнойЧастиИтоги);
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогПоКодуСвод);
		
		ИтогСводШтук = ИтогСводШтук + ВыборкаТабличнойЧастиИтоги.Штук;
		ИтогСводДАЛ = ИтогСводДАЛ + ВыборкаТабличнойЧастиИтоги.ДАЛ;	
		
	КонецЦикла;
	
	ОбластьМакетаИтогСвод.Параметры.Штук = ИтогСводШтук;
	ОбластьМакетаИтогСвод.Параметры.ДАЛ = ИтогСводДАЛ;
	ТабличныйДокумент.Вывести(ОбластьМакетаИтогСвод);	
	
	ПредставлениеРуководителя = ?(
		ЗначениеЗаполнено(Шапка.РукводительФизЛицо), 
		Строка(Шапка.РукводительФизЛицо) + ", ", 
		"");
		
	ПредставлениеДолжности = ?(
		ЗначениеЗаполнено(Шапка.Должность), 
		Строка(Шапка.Должность) + ", ",
		"");
		
	ПредставлениеОснования = "";
		
	Если ЗначениеЗаполнено(Шапка.ОснованиеПраваПодписи) Тогда
		
		СклоненияОснования = ПолучитьСклоненияСтроки(Шапка.ОснованиеПраваПодписи,, "ПД=Родительный");
		
		Если СклоненияОснования.Количество() <> 0 Тогда
			
			ПредставлениеОснования = НСтр("ru='на основании '") + НРег(СклоненияОснования[0]);
			
		КонецЕсли;	
		
	КонецЕсли;
		
	ПредставлениеУполномоченногоЛица = СокрЛП(ПредставлениеРуководителя + ПредставлениеДолжности + ПредставлениеОснования);
	
	ПредставлениеУполномоченногоЛица = ?(
		Прав(ПредставлениеУполномоченногоЛица, 1) = ",", 
		Лев(ПредставлениеУполномоченногоЛица, СтрДлина(ПредставлениеУполномоченногоЛица) - 1), 
		ПредставлениеУполномоченногоЛица);
	
	ОбластьМакетаПодписанты.Параметры.УполномоченноеЛицо = ПредставлениеУполномоченногоЛица;
	ТабличныйДокумент.Вывести(ОбластьМакетаПодписанты);
	
	Возврат ТабличныйДокумент;
	
КонецФункции 

Процедура бг_ЗаполнитьТабличныйДокументРеестрСертификатов(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
				
	Макет = ПолучитьМакет("бг_ПФ_MXL_ТДСМРеестрСертификатов");
	
	ДанныеШапки = ДанныеДляПечати.ДанныеШапки.Выбрать();
	ДанныеТабличнойЧасти = ДанныеДляПечати.ДанныеТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеШапки.Следующий() Цикл
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// шапка
		Область = Макет.ПолучитьОбласть("ОбластьШапка");
		
		Область.Параметры.Заполнить(ДанныеШапки);
				
		Область.Параметры.Шапка = СтрШаблон(
			НСтр("ru = '%1
				|
				|Местонахождение:
				|%2
				|Тел.: %3'"),
			ДанныеШапки.Организация,
			ДанныеШапки.АдресПунктаНазначения,
			ДанныеШапки.НомерТелефона);
			
		ТабличныйДокумент.Вывести(Область); 	
		
		// строки таблицы
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ОбластьШапкаТаблицы");
		ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		
		ДанныеТоваров = ДанныеТабличнойЧасти.НайтиСтроки(Новый Структура("Ссылка", ДанныеШапки.Ссылка));
		
		Для Каждого ДанныеТовара Из ДанныеТоваров Цикл
			
			ПроверяемаяОбласть = Новый Массив;
			ПроверяемаяОбласть.Добавить(ОбластьСтрока);
			
			Если Не ТабличныйДокумент.ПроверитьВывод(ПроверяемаяОбласть) Тогда	
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);			
			КонецЕсли;	
			
			ОбластьСтрока.Параметры.Заполнить(ДанныеТовара);	
			
			ДанныеОтветственногоЛица = Неопределено;
			
			Если ЗначениеЗаполнено(ДанныеТовара.СертификатНоменклатурыВладелецСертификата) Тогда
				
				ДанныеОтветственногоЛица = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(
					ДанныеТовара.СертификатНоменклатурыВладелецСертификата, 
					ДанныеТовара.СертификатНоменклатурыДатаНачалаСрокаДействия, 
					Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
				
			КонецЕсли;	
			
			ЛицоПринявшееДекларацию = "";
			
			Если ДанныеОтветственногоЛица <> Неопределено 
				И ДанныеОтветственногоЛица.Свойство("ФизическоеЛицо")
				И ЗначениеЗаполнено(ДанныеОтветственногоЛица.ФизическоеЛицо) Тогда
				
				ЛицоПринявшееДекларацию  = СтрШаблон(
					НСтр("ru='%1 %2 %3'"), 
					ДанныеОтветственногоЛица.Должность, 
					ДанныеОтветственногоЛица.СтруктурнаяЕдиница, 
					ДанныеОтветственногоЛица.ФизическоеЛицо);	
				
			КонецЕсли;	
						
			ОбластьСтрока.Параметры.ЛицоПринявшееДекларацию = ЛицоПринявшееДекларацию;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		// подвал
		Область = Макет.ПолучитьОбласть("ОбластьПодвал");	
				
		Область.Параметры.ДолжностьФИОПокупателя = НСтр("ru = '/__________________/'");
		Область.Параметры.ДолжностьФИОПродавца   = НСтр("ru = '/__________________/'"); 
		
		ТабличныйДокумент.Вывести(Область); 
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, 
			НомерСтрокиНачало, 
			ОбъектыПечати, 
			ДанныеШапки.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура бг_НастроитьТабличныйДокумент(ТабличныйДокумент) 
		 	
	ТабличныйДокумент.ПолеСверху 		  = 10;
	ТабличныйДокумент.ПолеСлева 		  = 10;
	ТабличныйДокумент.ПолеСнизу 		  = 10;
	ТабличныйДокумент.ПолеСправа 		  = 10;
	ТабличныйДокумент.Автомасштаб 		  = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	
КонецПроцедуры

Функция бг_ДанныеПечатиИнформационнойСправки(МассивОбъектов) 
	
	Запрос 		 = Новый Запрос;		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТТНИсходящаяЕГАИС.Ссылка) КАК Ссылка,
	|	ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.РеализацияТоваровУслуг) КАК Реализация
	|ПОМЕСТИТЬ ТТНИсходящиеЕГАИС
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (ТТНИсходящаяЕГАИС.Ссылка = (ВЫРАЗИТЬ(СтатусыДокументовЕГАИС.Документ КАК Документ.ТТНИсходящаяЕГАИС)))
	|ГДЕ
	|	ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.РеализацияТоваровУслуг) В (&МассивОбъектов)
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|	И НЕ СтатусыДокументовЕГАИС.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен), ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом))
	|	И ТТНИсходящаяЕГАИС.бг_НомерФиксацииЕГАИС <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.РеализацияТоваровУслуг)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	Контрагенты.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	Контрагенты.бг_КодКлиентаSY КАК КодТТ_SY,
	|	КонтрагентыГрузополучатель.бг_КодКлиентаSY КАК КодКлиентаSY,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЯвляетсяРезидентом,
	|	СтраныМира.УчастникЕАЭС КАК ЧленТаможенногоСоюза,
	|	РеализацияТоваровУслуг.Руководитель.ФизическоеЛицо КАК РукводительФизЛицо,
	|	РеализацияТоваровУслуг.Руководитель.ФизическоеЛицо.бг_Должность КАК Должность,
	|	РеализацияТоваровУслуг.Руководитель.ОснованиеПраваПодписи КАК ОснованиеПраваПодписи,
	|	ТТНИсходящиеЕГАИС.Ссылка КАК ДокументЕГАИС,
	|	ТТНИсходящиеЕГАИС.Ссылка.ИдентификаторЕГАИС КАК ИдентификаторТТН,
	|	ТТНИсходящиеЕГАИС.Ссылка.бг_ДатаФиксацииЕГАИС КАК ДатаФиксацииВЕГАИС,
	|	ТТНИсходящиеЕГАИС.Ссылка.бг_НомерФиксацииЕГАИС КАК НомерФиксацииВЕГАИС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
	|			ПО Контрагенты.СтранаРегистрации = СтраныМира.Ссылка
	|		ПО РеализацияТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентыГрузополучатель
	|		ПО РеализацияТоваровУслуг.Грузополучатель = КонтрагентыГрузополучатель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТТНИсходящиеЕГАИС КАК ТТНИсходящиеЕГАИС
	|		ПО РеализацияТоваровУслуг.Ссылка = ТТНИсходящиеЕГАИС.Реализация
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	УпаковкиЕдиницыИзмеренияНоменклатуры.Ссылка КАК ЕдиницыИзмеренияНоменклатуры,
	|	УпаковкиЕдиницыИзмеренияНоменклатуры.Код КАК Код,
	|	УпаковкиЕдиницыИзмеренияЗаказаКлиента.Ссылка КАК СсылкаЕдиницыИзмеренияРодителя,
	|	УпаковкиЕдиницыИзмеренияЗаказаКлиента.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	УпаковкиЕдиницыИзмеренияЗаказаКлиента.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковкиЕдиницыИзмеренияЗаказаКлиента.бг_КодЕК_Номенклатуры КАК бг_КодЕК_Номенклатуры,
	|	РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры.бг_ЕдиницаИзмеренияМест КАК ВидУпаковки,
	|	РеализацияТоваровУслугТовары.Серия.бг_УпаковкаПаллета.Родитель КАК ПаллетаРодитель
	|ПОМЕСТИТЬ ВТ_ЕдиницыИзмеренияНоменклатуры
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмеренияНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = УпаковкиЕдиницыИзмеренияНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмеренияЗаказаКлиента
	|			ПО ЗаказКлиентаТовары.Номенклатура = УпаковкиЕдиницыИзмеренияЗаказаКлиента.Владелец
	|				И ЗаказКлиентаТовары.бг_УпаковкаПаллета.Родитель = УпаковкиЕдиницыИзмеренияЗаказаКлиента.Ссылка
	|		ПО РеализацияТоваровУслугТовары.Ссылка.ЗаказКлиента = ЗаказКлиентаТовары.Ссылка
	|			И РеализацияТоваровУслугТовары.НомерСтроки = ЗаказКлиентаТовары.НомерСтроки
	|			И РеализацияТоваровУслугТовары.Номенклатура = ЗаказКлиентаТовары.Номенклатура
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	ЕдиницыИзмеренияНоменклатуры,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЛицензииПоставщиковАлкогольнойПродукции.Ссылка) КАК Лицензия,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец КАК Владелец,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ЛицензияПоставщика
	|ИЗ
	|	ВТ_ЕдиницыИзмеренияНоменклатуры КАК ВТ_ЕдиницыИзмеренияНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ПО ВТ_ЕдиницыИзмеренияНоменклатуры.Ссылка.Организация = ЛицензииПоставщиковАлкогольнойПродукции.Владелец
	|ГДЕ
	|	&ТекущаяДата МЕЖДУ ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала И ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.Номенклатура,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.НомерСтроки,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Номенклатура,
	|	НомерСтроки,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВидыАлкогольнойПродукции.Код КАК КодВидаПродукции,
	|	КонтрагентПроизводитель.Наименование КАК ПроизводительНаименование,
	|	ТТНИсходящаяЕГАИСТовары.НомерСправки2Покупателя КАК СправкаБ,
	|	КонтрагентПроизводитель.ИНН КАК ИННПроизводитель,
	|	КонтрагентПроизводитель.КПП КАК КПППроизводитель,
	|	Организации.Наименование КАК ПоставщикНаименование,
	|	Организации.ИНН КАК ИННПоставщик,
	|	Организации.КПП КАК КПППоставщик,
	|	ВТ_ЛицензияПоставщика.Лицензия КАК ЛицензияПоставщик,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.ЕдиницыИзмеренияНоменклатуры КАК ЕдИзм,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.Код КАК КодЕдИзм,
	|	РеализацияТоваровУслугТовары.Количество КАК Штук,
	|	РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Номенклатура.ОбъемДАЛ КАК ДАЛ,
	|	РеализацияТоваровУслугТовары.Номенклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	РеализацияТоваровУслугТовары.Серия.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры КАК Код_ЕК,
	|	ВТ_ЕдиницыИзмеренияНоменклатуры.ВидУпаковки КАК ВидУпаковки,
	|	ВЫБОР
	|		КОГДА ВТ_ЕдиницыИзмеренияНоменклатуры.ВидУпаковки = ВТ_ЕдиницыИзмеренияНоменклатуры.ПаллетаРодитель.ЕдиницаИзмерения
	|			ТОГДА ЕСТЬNULL(ВТ_ЕдиницыИзмеренияНоменклатуры.ПаллетаРодитель.КоличествоУпаковок, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ ВТ_ТабличныеДанные
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТТНИсходящиеЕГАИС КАК ТТНИсходящиеЕГАИС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|			ПО ТТНИсходящиеЕГАИС.Ссылка = ТТНИсходящаяЕГАИСТовары.Ссылка
	|		ПО РеализацияТоваровУслугТовары.Ссылка = ТТНИсходящиеЕГАИС.Реализация
	|			И (РеализацияТоваровУслугТовары.НомерСтроки = ТТНИсходящаяЕГАИСТовары.НомерСтроки)
	|			И (РеализацияТоваровУслугТовары.Номенклатура = ТТНИсходящаяЕГАИСТовары.Номенклатура)
	|			И (РеализацияТоваровУслугТовары.Серия = ТТНИсходящаяЕГАИСТовары.Серия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК КонтрагентПроизводитель
	|		ПО РеализацияТоваровУслугТовары.Номенклатура.бг_КонтрагентПроизводитель = КонтрагентПроизводитель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО РеализацияТоваровУслугТовары.Номенклатура.ВидАлкогольнойПродукции = ВидыАлкогольнойПродукции.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РеализацияТоваровУслугТовары.Ссылка.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЛицензияПоставщика КАК ВТ_ЛицензияПоставщика
	|		ПО РеализацияТоваровУслугТовары.Ссылка.Организация = ВТ_ЛицензияПоставщика.Владелец
	|			И РеализацияТоваровУслугТовары.Ссылка = ВТ_ЛицензияПоставщика.Ссылка
	|			И РеализацияТоваровУслугТовары.Номенклатура = ВТ_ЛицензияПоставщика.Номенклатура
	|			И РеализацияТоваровУслугТовары.НомерСтроки = ВТ_ЛицензияПоставщика.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕдиницыИзмеренияНоменклатуры КАК ВТ_ЕдиницыИзмеренияНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Ссылка = ВТ_ЕдиницыИзмеренияНоменклатуры.Ссылка
	|			И РеализацияТоваровУслугТовары.Номенклатура = ВТ_ЕдиницыИзмеренияНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения = ВТ_ЕдиницыИзмеренияНоменклатуры.ЕдиницыИзмеренияНоменклатуры
	|			И РеализацияТоваровУслугТовары.НомерСтроки = ВТ_ЕдиницыИзмеренияНоменклатуры.НомерСтроки
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТабличныеДанные.Ссылка КАК Ссылка,
	|	ВТ_ТабличныеДанные.Номенклатура КАК Номенклатура,
	|	ВТ_ТабличныеДанные.КодВидаПродукции КАК КодВидаПродукции,
	|	ВТ_ТабличныеДанные.ПроизводительНаименование КАК ПроизводительНаименование,
	|	ВТ_ТабличныеДанные.ИННПроизводитель КАК ИННПроизводитель,
	|	ВТ_ТабличныеДанные.КПППроизводитель КАК КПППроизводитель,
	|	ВТ_ТабличныеДанные.ПоставщикНаименование КАК ПоставщикНаименование,
	|	ВТ_ТабличныеДанные.ИННПоставщик КАК ИННПоставщик,
	|	ВТ_ТабличныеДанные.КПППоставщик КАК КПППоставщик,
	|	ВТ_ТабличныеДанные.ЛицензияПоставщик КАК ЛицензияПоставщик,
	|	ВТ_ТабличныеДанные.ЕдИзм КАК ЕдИзм,
	|	ВТ_ТабличныеДанные.КодЕдИзм КАК КодЕдИзм,
	|	ЕСТЬNULL(ВТ_ТабличныеДанные.Штук, 0) КАК Штук,
	|	ЕСТЬNULL(ВТ_ТабличныеДанные.ДАЛ, 0) КАК ДАЛ,
	|	ВТ_ТабличныеДанные.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	ВТ_ТабличныеДанные.Код_ЕК КАК Код_ЕК,
	|	ВТ_ТабличныеДанные.СправкаБ КАК СправкаБ,
	|	ВТ_ТабличныеДанные.ВидУпаковки КАК ВидУпаковки,
	|	ВТ_ТабличныеДанные.Коэффициент КАК Коэффициент
	|ИЗ
	|	ВТ_ТабличныеДанные КАК ВТ_ТабличныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_ТабличныеДанные.Штук) КАК Штук,
	|	СУММА(ВТ_ТабличныеДанные.ДАЛ) КАК ДАЛ,
	|	ВТ_ТабличныеДанные.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	ВТ_ТабличныеДанные.КодВидаПродукции КАК КодВидаПродукции,
	|	ВТ_ТабличныеДанные.ПроизводительНаименование КАК ПроизводительНаименование,
	|	ВТ_ТабличныеДанные.ИННПроизводитель КАК ИННПроизводитель,
	|	ВТ_ТабличныеДанные.КПППроизводитель КАК КПППроизводитель
	|ИЗ
	|	ВТ_ТабличныеДанные КАК ВТ_ТабличныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТабличныеДанные.ВидАлкогольнойПродукции,
	|	ВТ_ТабличныеДанные.КодВидаПродукции,
	|	ВТ_ТабличныеДанные.ПроизводительНаименование,
	|	ВТ_ТабличныеДанные.ИННПроизводитель,
	|	ВТ_ТабличныеДанные.КПППроизводитель";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТекущаяДата"	  , ТекущаяДатаСеанса());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеПечатиИнформационнойСправки = Новый Структура();
	ДанныеПечатиИнформационнойСправки.Вставить("ДанныеШапки"		 , Результаты[1].Выбрать());
	ДанныеПечатиИнформационнойСправки.Вставить("ДанныеТабличнойЧасти", Результаты[5].Выбрать());
	ДанныеПечатиИнформационнойСправки.Вставить("ДанныеИтогов"		 , Результаты[6].Выбрать());
	
	Возврат ДанныеПечатиИнформационнойСправки;	
		
КонецФункции

Функция бг_ДанныеПечатиТДСМРеестрСертификатов(ПараметрыПечати, МассивОбъектов) Экспорт 
	
	Запрос = Новый Запрос;		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	ТТНИсходящаяЕГАИС.НомерТТН КАК НомерТТН,
	|	ТТНИсходящаяЕГАИС.ДатаТТН КАК ДатаТТН
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО (РеализацияТоваровУслуг.Ссылка = ТТНИсходящаяЕГАИС.ДокументОснование)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПунктыНазначения.Организация КАК Организация,
	|	ПунктыНазначения.Ссылка.Адрес КАК АдресПунктаНазначения,
	|	ПунктыНазначения.Ссылка.Телефон КАК НомерТелефона
	|ПОМЕСТИТЬ ДанныеПунктовНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(битПунктыНазначения.Ссылка) КАК Ссылка,
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) КАК Организация
	|	ИЗ
	|		Справочник.битПунктыНазначения КАК битПунктыНазначения
	|	ГДЕ
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) В
	|				(ВЫБРАТЬ
	|					ДанныеДокументов.Организация
	|				ИЗ
	|					ДанныеДокументов)
	|		И НЕ битПунктыНазначения.ОбособленноеПодразделение
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации)) КАК ПунктыНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.НомерТТН КАК НомерТТН,
	|	ДанныеДокументов.ДатаТТН КАК ДатаТТН,
	|	ДанныеПунктовНазначения.АдресПунктаНазначения КАК АдресПунктаНазначения,
	|	ДанныеПунктовНазначения.НомерТелефона КАК НомерТелефона
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПунктовНазначения КАК ДанныеПунктовНазначения
	|		ПО ДанныеДокументов.Организация = ДанныеПунктовНазначения.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	СпрНоменклатура.Артикул КАК Артикул,
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	СерииНоменклатуры.Ссылка КАК СерияНоменклатуры,
	|	СпрНоменклатура.бг_КонтрагентПроизводитель КАК Производитель,
	|	СертификатыНоменклатуры.Ссылка КАК СертификатНоменклатурыСсылка,
	|	СертификатыНоменклатуры.Наименование КАК СертификатНоменклатурыНаименование,
	|	СертификатыНоменклатуры.Номер КАК СертификатНоменклатурыНомер,
	|	СертификатыНоменклатуры.ОрганВыдавшийДокумент КАК СертификатНоменклатурыОрганВыдавшийДокумент,
	|	СертификатыНоменклатуры.ДатаНачалаСрокаДействия КАК СертификатНоменклатурыДатаНачалаСрокаДействия,
	|	СертификатыНоменклатуры.ДатаОкончанияСрокаДействия КАК СертификатНоменклатурыДатаОкончанияСрокаДействия,
	|	ВЫРАЗИТЬ(СертификатыНоменклатуры.бг_ВладелецСертификата КАК Справочник.Организации) КАК СертификатНоменклатурыВладелецСертификата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СертификатыНоменклатуры
	|			ПО СерииНоменклатуры.бг_Сертификат = СертификатыНоменклатуры.Ссылка
	|		ПО РеализацияТоваровУслугТовары.Серия = СерииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов); 
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеПечати = Новый Структура;
	ДанныеПечати.Вставить("ДанныеШапки"		 , ПакетРезультатов[2]);
	ДанныеПечати.Вставить("ДанныеТабличнойЧасти", ПакетРезультатов[3]);
	
	Возврат ДанныеПечати;	
	
КонецФункции 

Функция бг_ЗаголовокДокумента(ДокументОбъект, НазваниеДокумента = "")

	Если ДокументОбъект = Неопределено Тогда
		Возврат "";
	Иначе
		Возврат СтрШаблон(НСтр("ru='%1 №%2 от %3'"), 
			?(НЕ ЗначениеЗаполнено(НазваниеДокумента), ДокументОбъект.Метаданные().Синоним, НазваниеДокумента),
			СокрЛП(ДокументОбъект.Номер),
			Формат(ДокументОбъект.Дата, "ДФ='дд ММММ гггг'"));	
	КонецЕсли;

КонецФункции

Функция бг_ДанныеДляПечатнойФормыКачественногоУдостоверения(ПараметрыПечати, МассивОбъектов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Документ,
	|	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугТовары.Серия КАК Серия,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	МАКСИМУМ(СертификацияНоменклатуры.Ссылка) КАК ДокументСертификации,
	|	МАКСИМУМ(СертификацияНоменклатуры.Номер) КАК НомерСертификата,
	|	МАКСИМУМ(СертификацияНоменклатуры.НормативныйДокумент) КАК ГОСТ,
	|	МАКСИМУМ(СертификацияНоменклатуры.ДатаСертификата) КАК ДатаСертификата,
	|	РеализацияТоваровУслугТовары.Ссылка.Автор КАК Автор,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТоварыДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битСертификацияНоменклатуры КАК СертификацияНоменклатуры
	|		ПО (СертификацияНоменклатуры.Организация = РеализацияТоваровУслугТовары.Ссылка.Организация)
	|			И (СертификацияНоменклатуры.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура)
	|			И (СертификацияНоменклатуры.Серия = РеализацияТоваровУслугТовары.Серия)
	|			И (СертификацияНоменклатуры.ТиповойАнализ = РеализацияТоваровУслугТовары.Номенклатура.бг_АнализыДляУдостоверенияОКачестве)
	|			И (СертификацияНоменклатуры.РезультатСертификации = ЗНАЧЕНИЕ(Перечисление.бг_РезультатыСертификации.Сертификат))
	|			И (СертификацияНоменклатуры.Проведен)
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	РеализацияТоваровУслугТовары.Ссылка.Организация,
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика,
	|	РеализацияТоваровУслугТовары.Серия,
	|	РеализацияТоваровУслугТовары.Ссылка.Автор,
	|	РеализацияТоваровУслугТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Лицензии.Владелец КАК Организация,
	|	Лицензии.Ссылка КАК Ссылка,
	|	Лицензии.бг_Серия КАК ЛицензияНаПроизводствоСерия,
	|	Лицензии.бг_Номер КАК ЛицензияНаПроизводствоНомер,
	|	Лицензии.бг_ДатаВыдачи КАК ЛицензияНаПроизводствоДатаВыдачи,
	|	Лицензии.ДатаНачала КАК ЛицензияНаПроизводствоДатаНачалаСрокаДействия,
	|	Лицензии.ДатаОкончания КАК ЛицензияНаПроизводствоДатаОкончанияСрокаДействия,
	|	Лицензии.КемВыдана КАК ЛицензияНаПроизводствоОрганВыдачи,
	|	Лицензии.бг_ВидЛицензируемойДеятельности КАК ВидЛицензируемойДеятельности,
	|	Лицензии.бг_ВидЛицензируемойДеятельности.Примечание КАК ВидЛицензируемойДеятельностиПримечание,
	|	Лицензии.бг_ВидЛицензируемойДеятельности.Наименование КАК ВидЛицензируемойДеятельностиНаименование
	|ПОМЕСТИТЬ ЛицензииОрганизаций
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК Лицензии
	|ГДЕ
	|	Лицензии.Владелец В
	|			(ВЫБРАТЬ
	|				ТоварыДокументов.Организация
	|			ИЗ
	|				ТоварыДокументов
	|			ГДЕ
	|				ТоварыДокументов.Документ.Дата < Лицензии.бг_ДатаПрекращенияДействия)
	|	И Лицензии.бг_ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Производство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛица.СсылкаОтветственноеЛицо КАК СсылкаОтветственноеЛицо
	|ПОМЕСТИТЬ ДоверенностиОтветственныхЛиц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Пользователи.ФизическоеЛицо КАК ФизическоеЛицо,
	|		МАКСИМУМ(ОтветственныеЛицаОрганизаций.Ссылка) КАК СсылкаОтветственноеЛицо
	|	ИЗ
	|		ТоварыДокументов КАК ТоварыДокументов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|				ПО Пользователи.ФизическоеЛицо = ОтветственныеЛицаОрганизаций.ФизическоеЛицо
	|			ПО ТоварыДокументов.Автор = Пользователи.Ссылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Пользователи.ФизическоеЛицо) КАК ОтветственныеЛица
	|ГДЕ
	|	ОтветственныеЛица.ФизическоеЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокументов.Документ КАК Документ,
	|	ТоварыДокументов.НомерСтроки КАК НомерСтроки,
	|	ТоварыДокументов.Документ.Дата КАК ДатаДокумента,
	|	ТоварыДокументов.Документ.Номер КАК НомерДокумента,
	|	ТоварыДокументов.Организация КАК Организация,
	|	ТоварыДокументов.Номенклатура КАК Номенклатура,
	|	ТоварыДокументов.Номенклатура.НаименованиеПолное КАК НаименованиеТовара,
	|	ТоварыДокументов.Характеристика КАК ХарактеристикаНоменклатуры,
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	ТоварыДокументов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыДокументов.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ТоварыДокументов.Номенклатура.ВидНоменклатуры.бг_ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	ТоварыДокументов.Номенклатура.бг_КонтрагентПроизводитель КАК Производитель,
	|	ТоварыДокументов.Номенклатура.бг_ОписаниеСоставаПродукта КАК СоставПродукта,
	|	ТоварыДокументов.Номенклатура.бг_УсловияТранспортирования КАК УсловияТранспортирования,
	|	ТоварыДокументов.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения = ТоварыДокументов.Номенклатура.ВидНоменклатуры.бг_ЕдиницаИзмеренияМест
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок > 0
	|			ТОГДА ТоварыДокументов.Количество / СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КолМест,
	|	ТоварыДокументов.Номенклатура.бг_АнализыДляУдостоверенияОКачестве КАК АнализыДляУдостоверенияОКачестве,
	|	ТоварыДокументов.Номенклатура.ВидАлкогольнойПродукции.Код КАК КодАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &СертификатСоответствия
	|			ТОГДА СерииНоменклатуры.бг_Сертификат
	|	КОНЕЦ КАК СертификатСоответствия,
	|	СерииНоменклатуры.бг_Сертификат.ТипСертификата КАК ТипСертификата,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &СертификатСоответствия
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.Номер
	|	КОНЕЦ КАК НомерСертификатаСоответствия,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &СертификатСоответствия
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.ОрганВыдавшийДокумент
	|	КОНЕЦ КАК ОрганВыдачиСертификатаСоответствия,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &СертификатСоответствия
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.ДатаНачалаСрокаДействия
	|	КОНЕЦ КАК ДатаВыдачиСертификатСоответствия,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &СертификатСоответствия
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.ДатаОкончанияСрокаДействия
	|	КОНЕЦ КАК ДатаОкончанияСрокаДействияСертификата,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &СертификатСоответствия
	|			ТОГДА ВЫБОР
	|					КОГДА СерииНоменклатуры.бг_Сертификат.Бессрочный
	|						ТОГДА 0
	|					ИНАЧЕ РАЗНОСТЬДАТ(СерииНоменклатуры.бг_Сертификат.ДатаНачалаСрокаДействия, СерииНоменклатуры.бг_Сертификат.ДатаОкончанияСрокаДействия, МЕСЯЦ)
	|				КОНЕЦ
	|	КОНЕЦ КАК СрокДействияСертификата,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &ДекларацияОСоответствии
	|			ТОГДА СерииНоменклатуры.бг_Сертификат
	|	КОНЕЦ КАК ДекларацияОСоответствии,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &ДекларацияОСоответствии
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.Номер
	|	КОНЕЦ КАК НомерДекларацииОСоответствии,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &ДекларацияОСоответствии
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.ОрганВыдавшийДокумент
	|	КОНЕЦ КАК ОрганВыдачиДекларацииОСоответствии,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &ДекларацияОСоответствии
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.ДатаНачалаСрокаДействия
	|	КОНЕЦ КАК ДатаВыдачиДекларацииОСоответствии,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &ДекларацияОСоответствии
	|			ТОГДА СерииНоменклатуры.бг_Сертификат.ДатаОкончанияСрокаДействия
	|	КОНЕЦ КАК ДатаОкончанияСрокаДействияДекларации,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_Сертификат.ТипСертификата = &ДекларацияОСоответствии
	|			ТОГДА ВЫБОР
	|					КОГДА СерииНоменклатуры.бг_Сертификат.Бессрочный
	|						ТОГДА 0
	|					ИНАЧЕ РАЗНОСТЬДАТ(СерииНоменклатуры.бг_Сертификат.ДатаНачалаСрокаДействия, СерииНоменклатуры.бг_Сертификат.ДатаОкончанияСрокаДействия, МЕСЯЦ)
	|				КОНЕЦ
	|	КОНЕЦ КАК СрокДействияДекларацииОСоответствии,
	|	Лицензии.Ссылка КАК ЛицензияНаПроизводство,
	|	Лицензии.ЛицензияНаПроизводствоСерия КАК ЛицензияНаПроизводствоСерия,
	|	Лицензии.ЛицензияНаПроизводствоНомер КАК ЛицензияНаПроизводствоНомер,
	|	Лицензии.ЛицензияНаПроизводствоДатаВыдачи КАК ЛицензияНаПроизводствоДатаВыдачи,
	|	Лицензии.ЛицензияНаПроизводствоДатаНачалаСрокаДействия КАК ЛицензияНаПроизводствоДатаНачалаСрокаДействия,
	|	Лицензии.ЛицензияНаПроизводствоДатаОкончанияСрокаДействия КАК ЛицензияНаПроизводствоДатаОкончанияСрокаДействия,
	|	Лицензии.ЛицензияНаПроизводствоОрганВыдачи КАК ЛицензияНаПроизводствоОрганВыдачи,
	|	Лицензии.ВидЛицензируемойДеятельности КАК ВидЛицензируемойДеятельности,
	|	Лицензии.ВидЛицензируемойДеятельностиПримечание КАК ВидЛицензируемойДеятельностиПримечание,
	|	Лицензии.ВидЛицензируемойДеятельностиНаименование КАК ВидЛицензируемойДеятельностиНаименование,
	|	ТоварыДокументов.ДокументСертификации КАК ДокументСертификации,
	|	ТоварыДокументов.ГОСТ КАК ГОСТ,
	|	ТоварыДокументов.ДатаСертификата КАК ДатаСертификата,
	|	ТоварыДокументов.НомерСертификата КАК НомерСертификата,
	|	СерииНоменклатуры.ДатаПроизводства КАК ДатаРозлива,
	|	ФизическиеЛица.Ссылка КАК Ответственный,
	|	ФизическиеЛица.бг_Должность КАК Должность,
	|	ДоверенностиОтветственныхЛиц.СсылкаОтветственноеЛицо.НомерДокументаПраваПодписи КАК НомерОснования,
	|	ДоверенностиОтветственныхЛиц.СсылкаОтветственноеЛицо.ДатаДокументаПраваПодписи КАК ДатаОснования,
	|	ДоверенностиОтветственныхЛиц.СсылкаОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ДоверенностиОтветственныхЛиц.СсылкаОтветственноеЛицо.ДокументПраваПодписи КАК ДокументПраваПодписи,
	|	ТоварыДокументов.Документ.Контрагент КАК Контрагент,
	|	ПунктыНазначения.Клиент КАК КлиентПунктРазгрузки,
	|	ПунктыНазначения.Адрес КАК АдресПунктРазгрузки,
	|	ТоварыДокументов.Номенклатура.ОбъемДАЛ * 10 КАК Емкость,
	|	ВЫРАЗИТЬ(СерииНоменклатуры.ПроизводительЕГАИС.Контрагент КАК Справочник.Организации) КАК ПроизводительЕГАИСОрганизация
	|ИЗ
	|	ТоварыДокументов КАК ТоварыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО (ТоварыДокументов.Серия = СерииНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛицензииОрганизаций КАК Лицензии
	|		ПО (ТоварыДокументов.Организация = Лицензии.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.битПунктыНазначения КАК ПунктыНазначения
	|		ПО (ТоварыДокументов.Документ.бг_ПунктНазначения = ПунктыНазначения.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|				ЛЕВОЕ СОЕДИНЕНИЕ ДоверенностиОтветственныхЛиц КАК ДоверенностиОтветственныхЛиц
	|				ПО (ФизическиеЛица.Ссылка = ДоверенностиОтветственныхЛиц.ФизическоеЛицо)
	|			ПО (Пользователи.ФизическоеЛицо = ФизическиеЛица.Ссылка)
	|		ПО (ТоварыДокументов.Автор = Пользователи.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.бг_ФайлПиктограммы КАК ПрисоединенныйФайл
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.бг_ФайлПиктограммы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокументов.Документ КАК Документ,
	|	СертификацияНоменклатурыАнализы.Ссылка КАК ДокументСертификации,
	|	ТоварыДокументов.Номенклатура КАК Номенклатура,
	|	ТоварыДокументов.Серия КАК Серия,
	|	СертификацияНоменклатурыАнализы.ТиповойАнализ КАК ТиповойАнализ,
	|	СертификацияНоменклатурыАнализы.Показатель КАК Показатель,
	|	СертификацияНоменклатурыАнализы.ВидРезультата КАК ВидРезультата,
	|	СертификацияНоменклатурыАнализы.Значение КАК Значение,
	|	СертификацияНоменклатурыАнализы.СоответствуетНормативу КАК СоответствуетНормативу,
	|	СертификацияНоменклатурыАнализы.МинимальноеНормативноеЗначение КАК МинимальноеНормативноеЗначение,
	|	СертификацияНоменклатурыАнализы.МаксимальноеНормативноеЗначение КАК МаксимальноеНормативноеЗначение
	|ИЗ
	|	ТоварыДокументов КАК ТоварыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битСертификацияНоменклатуры.Анализы КАК СертификацияНоменклатурыАнализы
	|		ПО (СертификацияНоменклатурыАнализы.Ссылка = ТоварыДокументов.ДокументСертификации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыДокументов.Документ,
	|	ТоварыДокументов.НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("СертификатСоответствия", "Сертификат соответствия");
	Запрос.УстановитьПараметр("ДекларацияОСоответствии", "Декларация о соответствии");
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	
	ДанныеДляПечати.Вставить("СведенияПоДокументам", 	ПакетРезультатов[3]);
	ДанныеДляПечати.Вставить("ПиктограммыНоменклатуры", ПакетРезультатов[4]);
	ДанныеДляПечати.Вставить("РезультатыАнализа", 		ПакетРезультатов[5]);
	
	Возврат ДанныеДляПечати; 
	
КонецФункции	

Функция бг_ПолучитьДанныеДляПечатнойФормыТТН(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ТранспортнаяИнформация.Объект КАК Объект,
	|	бг_ТранспортнаяИнформация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	бг_ТранспортнаяИнформация.Водитель КАК Водитель,
	|	бг_ТранспортнаяИнформация.НомераПломб КАК НомераПломб,
	|	бг_ТранспортнаяИнформация.НомерКонтейнера КАК НомерКонтейнера,
	|	бг_ТранспортнаяИнформация.Прицеп КАК Прицеп,
	|	бг_ТранспортнаяИнформация.Перевозчик КАК Перевозчик,
	|	бг_ТранспортнаяИнформация.ТранспортноеСредство.Код КАК РегистрационныйНомер,
	|	бг_ТранспортнаяИнформация.ТранспортноеСредство.бг_Марка КАК ТранспортноеСредствоМарка,
	|	бг_ТранспортнаяИнформация.ВидПеревозки КАК ВидПеревозки,
	|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС,
	|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиПо КАК ПлановаяДатаДоставкиПо,
	|	бг_ТранспортнаяИнформация.Прицеп.Код КАК ПрицепРегистрационныйНомер,
	|	бг_ТранспортнаяИнформация.Прицеп.бг_Марка КАК ПрицепМарка,
	|	бг_ТранспортнаяИнформация.Заказчик КАК Заказчик,
	|	бг_ТранспортнаяИнформация.ДоговорНаПеревозку КАК ДоговорНаПеревозку,
	|	бг_ТранспортнаяИнформация.ДоговорСубподряда КАК ДоговорСубподряда,
	|	бг_ТранспортнаяИнформация.ОрганизаторПеревозки КАК ОрганизаторПеревозки
	|ПОМЕСТИТЬ ТранспортнаяИнформация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(бг_ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг) КАК Объект,
	|		МАКСИМУМ(бг_ТранспортнаяИнформация.ТранспортноеСредство) КАК ТранспортноеСредство
	|	ИЗ
	|		РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|	ГДЕ
	|		бг_ТранспортнаяИнформация.Объект ССЫЛКА Документ.РеализацияТоваровУслуг
	|		И ВЫРАЗИТЬ(бг_ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг) В (&МассивОбъектов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫРАЗИТЬ(бг_ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг)) КАК ТранспортнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|		ПО (ТранспортнаяИнформация.Объект = бг_ТранспортнаяИнформация.Объект)
	|			И (ТранспортнаяИнформация.ТранспортноеСредство = бг_ТранспортнаяИнформация.ТранспортноеСредство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.бг_ПунктНазначения.Клиент КАК Грузополучатель,
	|	РеализацияТоваровУслуг.бг_ПунктНазначения КАК ПунктНазначенияГрузополучателя,
	|	РеализацияТоваровУслуг.бг_ПунктНазначения.Адрес КАК АдресГрузополучателя,
	|	РеализацияТоваровУслуг.бг_ПунктНазначения.Телефон КАК ТелефонГрузополучателя,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	РеализацияТоваровУслуг.Номер КАК НомерДокумента,
	|	РеализацияТоваровУслуг.Партнер.бг_КатегорияМакетовПечатныхФорм КАК КатегорияМакетовПечатныхФорм,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ТранспортнаяИнформация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ТранспортнаяИнформация.Водитель КАК Водитель,
	|	ТранспортнаяИнформация.НомераПломб КАК НомераПломб,
	|	ТранспортнаяИнформация.НомерКонтейнера КАК НомерКонтейнера,
	|	ТранспортнаяИнформация.Прицеп КАК Прицеп,
	|	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
	|	РеализацияТоваровУслуг.Отпустил.бг_Должность КАК ОтпустилДолжность,
	|	РеализацияТоваровУслуг.Руководитель.ФизическоеЛицо КАК ОтгрузкуРазрешил,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер.ФизическоеЛицо КАК ГлавныйБухгалтер,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер.ФизическоеЛицо.бг_Должность КАК ГлавныйБухгалтерДолжность,
	|	РеализацияТоваровУслуг.Руководитель.ФизическоеЛицо.бг_Должность КАК ОтгрузкуРазрешилДолжность,
	|	РеализацияТоваровУслуг.Руководитель.НомерДокументаПраваПодписи КАК ОтгрузкуРазрешилДоверенностьНомер,
	|	РеализацияТоваровУслуг.Руководитель.ДатаДокументаПраваПодписи КАК ОтгрузкуРазрешилДоверенностьДата,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер.НомерДокументаПраваПодписи КАК ГлавныйБухгалтерДоверенностьНомер,
	|	РеализацияТоваровУслуг.ГлавныйБухгалтер.ДатаДокументаПраваПодписи КАК ГлавныйБухгалтерДоверенностьДата,
	|	ТранспортнаяИнформация.Перевозчик КАК Перевозчик,
	|	ТранспортнаяИнформация.РегистрационныйНомер КАК РегистрационныйНомер,
	|	ТранспортнаяИнформация.ТранспортноеСредствоМарка КАК ТранспортноеСредствоМарка,
	|	ТранспортнаяИнформация.ВидПеревозки КАК ВидПеревозки,
	|	ТранспортнаяИнформация.ПрицепРегистрационныйНомер КАК ПрицепРегистрационныйНомер,
	|	ТранспортнаяИнформация.ПрицепМарка КАК ПрицепМарка,
	|	РеализацияТоваровУслуг.ЗаказКлиента.НомерПоДаннымКлиента КАК ЗаказКлиентаНомерПоДаннымКлиента,
	|	РеализацияТоваровУслуг.Договор КАК Договор,
	|	Рейсы.Рейс.ДатаПрибытияФакт КАК ДатаПрибытия,
	|	Рейсы.Рейс.ЗагрузкаДатаУбытия КАК ДатаУбытия,
	|	Рейсы.Рейс КАК Рейс,
	|	Рейсы.Рейс.Экспедитор КАК Экспедитор,
	|	ТранспортнаяИнформация.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС,
	|	ТранспортнаяИнформация.ПлановаяДатаДоставкиПо КАК ПлановаяДатаДоставкиПо,
	|	ТранспортнаяИнформация.Заказчик КАК Заказчик,
	|	ЕСТЬNULL(ТранспортнаяИнформация.ОрганизаторПеревозки, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ОрганизаторПеревозки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Рейсы.Рейс.СубподрядчикПартнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСубподрядчик,
	|	ЕСТЬNULL(ТранспортнаяИнформация.ДоговорНаПеревозку, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорНаПеревозку,
	|	ЕСТЬNULL(ТранспортнаяИнформация.ДоговорСубподряда, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорСубподряда,
	|   Рейсы.Рейс.Водитель КАК ВодительРейса
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (РеализацияТоваровУслуг.Организация = Организации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|		ПО (РеализацияТоваровУслуг.Ссылка = ТранспортнаяИнформация.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(битМаршрутныйЛистЗаказы.Ссылка) КАК Рейс,
	|			ВЫРАЗИТЬ(битМаршрутныйЛистЗаказы.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Реализация
	|		ИЗ
	|			Документ.битМаршрутныйЛист.Заказы КАК битМаршрутныйЛистЗаказы
	|		ГДЕ
	|			ВЫРАЗИТЬ(битМаршрутныйЛистЗаказы.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) В (&МассивОбъектов)
	|			И битМаршрутныйЛистЗаказы.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.Рейс)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(битМаршрутныйЛистЗаказы.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг)) КАК Рейсы
	|		ПО (РеализацияТоваровУслуг.Ссылка = Рейсы.Реализация)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В (&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПунктыНазначения.Организация КАК Организация,
	|	ПунктыНазначения.Ссылка.Адрес КАК АдресПунктаНазначения,
	|	ПунктыНазначения.Ссылка.Телефон КАК НомерТелефона
	|ПОМЕСТИТЬ ДанныеПунктовНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(битПунктыНазначения.Ссылка) КАК Ссылка,
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) КАК Организация
	|	ИЗ
	|		Справочник.битПунктыНазначения КАК битПунктыНазначения
	|	ГДЕ
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) В
	|				(ВЫБРАТЬ
	|					ДанныеДокументов.Организация
	|				ИЗ
	|					ДанныеДокументов)
	|		И НЕ битПунктыНазначения.ОбособленноеПодразделение
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации)) КАК ПунктыНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Лицензии.Владелец КАК Контрагент,
	|	МАКСИМУМ(Лицензии.Ссылка) КАК Лицензия
	|ПОМЕСТИТЬ ЛицензииКонтрагентов
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК Лицензии
	|ГДЕ
	|	Лицензии.Владелец В
	|			(ВЫБРАТЬ
	|				ДанныеДокументов.Контрагент
	|			ИЗ
	|				ДанныеДокументов
	|			ГДЕ
	|				ДанныеДокументов.ДатаДокумента < Лицензии.бг_ДатаПрекращенияДействия)
	|	И Лицензии.бг_ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Оптовая)
	|
	|СГРУППИРОВАТЬ ПО
	|	Лицензии.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокументов.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.Организация.НаименованиеПолное КАК ОрганизацияНаименование,
	|	ДанныеДокументов.Грузополучатель КАК Грузополучатель,
	|	ДанныеДокументов.ПунктНазначенияГрузополучателя КАК ПунктНазначенияГрузополучателя,
	|	ДанныеДокументов.АдресГрузополучателя КАК АдресГрузополучателя,
	|	ДанныеДокументов.ТелефонГрузополучателя КАК ТелефонГрузополучателя,
	|	ДанныеДокументов.Контрагент КАК Контрагент,
	|	ДанныеДокументов.Валюта КАК Валюта,
	|	ДанныеДокументов.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ДанныеПунктовНазначения.АдресПунктаНазначения КАК АдресПунктаНазначения,
	|	ДанныеПунктовНазначения.НомерТелефона КАК НомерТелефонаПунктаНазначения,
	|	ДанныеДокументов.КодПоОКПО КАК ГрузоотправительПоОКПО,
	|	ДанныеДокументов.Контрагент.КодПоОКПО КАК ГрузополучательПоОКПО,
	|	ДанныеДокументов.Контрагент.КодПоОКПО КАК ПлательщикПоОКПО,
	|	ДанныеДокументов.КатегорияМакетовПечатныхФорм КАК КатегорияМакетовПечатныхФорм,
	|	ДанныеДокументов.ДоверенностьНомер КАК ДоверенностьНомер,
	|	ДанныеДокументов.ДоверенностьДата КАК ДоверенностьДата,
	|	ДанныеДокументов.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	ДанныеДокументов.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ДанныеДокументов.Водитель КАК Водитель,
	|	ДанныеДокументов.НомераПломб КАК НомераПломб,
	|	ДанныеДокументов.НомерКонтейнера КАК НомерКонтейнера,
	|	ДанныеДокументов.Прицеп КАК Прицеп,
	|	ДанныеДокументов.Водитель.бг_Должность КАК ДолжностьВодителя,
	|	ДанныеДокументов.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС,
	|	ДанныеДокументов.ПлановаяДатаДоставкиПо КАК ПлановаяДатаДоставкиПо,
	|	ДанныеДокументов.Отпустил КАК Отпустил,
	|	ДанныеДокументов.ОтпустилДолжность КАК ОтпускПроизвелДолжность,
	|	ДанныеДокументов.ОтгрузкуРазрешил КАК ОтгрузкуРазрешил,
	|	ДанныеДокументов.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДанныеДокументов.ГлавныйБухгалтерДолжность КАК ГлавныйБухгалтерДолжность,
	|	ДанныеДокументов.ОтгрузкуРазрешилДолжность КАК ОтгрузкуРазрешилДолжность,
	|	ДанныеДокументов.ОтгрузкуРазрешилДоверенностьНомер КАК ОтгрузкуРазрешилДоверенностьНомер,
	|	ДанныеДокументов.ОтгрузкуРазрешилДоверенностьДата КАК ОтгрузкуРазрешилДоверенностьДата,
	|	ДанныеДокументов.ГлавныйБухгалтерДоверенностьНомер КАК ГлавныйБухгалтерДоверенностьНомер,
	|	ДанныеДокументов.ГлавныйБухгалтерДоверенностьДата КАК ГлавныйБухгалтерДоверенностьДата,
	|	ДанныеДокументов.Перевозчик КАК Перевозчик,
	|	ДанныеДокументов.РегистрационныйНомер КАК ГосНомерАвтомобиля,
	|	ДанныеДокументов.ТранспортноеСредствоМарка КАК МаркаАвтомобиля,
	|	ДанныеДокументов.ВидПеревозки КАК ВидПеревозки,
	|	ДанныеДокументов.ПрицепРегистрационныйНомер КАК ГосНомерПрицепа,
	|	ДанныеДокументов.ПрицепМарка КАК МаркаПрицепа,
	|	ДанныеДокументов.ЗаказКлиентаНомерПоДаннымКлиента КАК НомерЗаказаКлиента,
	|	ВЫБОР
	|		КОГДА БанковскийСчетаКонтрагентов.КоличествоСчетов = 1
	|			ТОГДА БанковскийСчетаКонтрагентов.БанковскийСчет
	|		ИНАЧЕ ДанныеДокументов.Договор.БанковскийСчетКонтрагента
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	ДанныеДокументов.ДатаПрибытия КАК ДатаПрибытия,
	|	ДанныеДокументов.ДатаУбытия КАК ДатаУбытия,
	|	ДанныеДокументов.Рейс КАК Рейс,
	|	ДанныеДокументов.Экспедитор КАК Экспедитор,
	|	ДанныеДокументов.Заказчик КАК Заказчик,
	|	ДанныеДокументов.Заказчик.НаименованиеПолное КАК ЗаказчикНаименование,
	|	ЛицензииКонтрагентов.Лицензия.бг_НомерРАР КАК ЛицензияНомерРАР,
	|	ДокументыФизическихЛиц.Серия КАК ВодительскоеУдостоверениеСерия,
	|	ДокументыФизическихЛиц.Номер КАК ВодительскоеУдостоверениеНомер,
	|	ДанныеДокументов.ВодительРейса КАК ВодительРейса,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ОрганизаторПеревозки <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ДанныеДокументов.ЕстьСубподрядчик
	|			ТОГДА ДанныеДокументов.ДоговорСубподряда.БанковскийСчетКонтрагента
	|		КОГДА ДанныеДокументов.ОрганизаторПеревозки = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И НЕ ДанныеДокументов.ЕстьСубподрядчик
	|			ТОГДА ДанныеДокументов.ДоговорНаПеревозку.БанковскийСчетКонтрагента
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетПеревозчика,
	|	ВЫБОР
	|		КОГДА ДанныеДокументов.ВидПеревозки.Самовывоз 
	|				И ДанныеДокументов.Заказчик = ДанныеДокументов.Контрагент
	|			ТОГДА ДанныеДокументов.Договор.БанковскийСчетКонтрагента
	|		КОГДА ДанныеДокументов.ОрганизаторПеревозки <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И ДанныеДокументов.ЕстьСубподрядчик
	|			ТОГДА ДанныеДокументов.ДоговорНаПеревозку.БанковскийСчетКонтрагента
	|		КОГДА ДанныеДокументов.ОрганизаторПеревозки = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И НЕ ДанныеДокументов.ЕстьСубподрядчик
	|			ТОГДА ДанныеДокументов.ДоговорНаПеревозку.БанковскийСчет
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетЗаказчика
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПунктовНазначения КАК ДанныеПунктовНазначения
	|		ПО (ДанныеДокументов.Организация = ДанныеПунктовНазначения.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БанковскиеСчетаКонтрагентов.Ссылка) КАК КоличествоСчетов,
	|			БанковскиеСчетаКонтрагентов.Владелец КАК Контрагент,
	|			МАКСИМУМ(БанковскиеСчетаКонтрагентов.Ссылка) КАК БанковскийСчет,
	|			БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	|		ИЗ
	|			Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ГДЕ
	|			БанковскиеСчетаКонтрагентов.Владелец В
	|					(ВЫБРАТЬ
	|						ДанныеДокументов.Контрагент
	|					ИЗ
	|						ДанныеДокументов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			БанковскиеСчетаКонтрагентов.Владелец,
	|			БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств) КАК БанковскийСчетаКонтрагентов
	|		ПО (ДанныеДокументов.Контрагент = БанковскийСчетаКонтрагентов.Контрагент)
	|			И (ДанныеДокументов.Валюта = БанковскийСчетаКонтрагентов.ВалютаДенежныхСредств)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛицензииКонтрагентов КАК ЛицензииКонтрагентов
	|		ПО (ДанныеДокументов.Контрагент = ЛицензииКонтрагентов.Контрагент)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокументыФизическихЛиц.Физлицо КАК Физлицо,
	|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
	|			ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента
	|		ИЗ
	|			ДанныеДокументов КАК ДанныеДокументов
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|					ПО (ДокументыФизическихЛиц.Физлицо = ТранспортнаяИнформация.Водитель)
	|						И (ДокументыФизическихЛиц.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение))
	|				ПО ДанныеДокументов.Ссылка = ТранспортнаяИнформация.Объект
	|					И (ДанныеДокументов.ДатаДокумента >= ДокументыФизическихЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыФизическихЛиц.Физлицо,
	|			ДокументыФизическихЛиц.ВидДокумента) КАК ВодительскиеУдостоверения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|			ПО (ВодительскиеУдостоверения.Физлицо = ДокументыФизическихЛиц.Физлицо)
	|				И (ВодительскиеУдостоверения.Период = ДокументыФизическихЛиц.Период)
	|				И (ВодительскиеУдостоверения.ВидДокумента = ДокументыФизическихЛиц.ВидДокумента)
	|		ПО (ДанныеДокументов.Водитель = ВодительскиеУдостоверения.Физлицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	СпрНоменклатура.Код КАК Код,
	|	СпрНоменклатура.Код КАК Артикул,
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВидыНоменклатуры.бг_ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|				КОНЕЦ
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМест,
	|	Товары.Цена КАК Цена,
	|	Товары.СуммаСНДС КАК Сумма,
	|	Товары.Количество * Товары.Номенклатура.ОбъемДАЛ КАК КоличествоДАЛ,
	|	СертификатыНоменклатуры.Номер КАК НомерСертификата,
	|	СертификатыНоменклатуры.ДатаНачалаСрокаДействия КАК ДатаНачалаСертификата,
	|	СертификатыНоменклатуры.ДатаОкончанияСрокаДействия КАК ДатаОкончанияСертификата,
	|	СпрНоменклатура.ВесЧислитель * Товары.Количество / 1000 КАК Масса,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)
	|				И СпрНоменклатура.ВидНоменклатуры.АлкогольнаяПродукция
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АлкогольнаяПродукция
	|ПОМЕСТИТЬ ДанныеТабличнойЧасти
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыНоменклатуры КАК СертификатыНоменклатуры
	|			ПО СерииНоменклатуры.бг_Сертификат = СертификатыНоменклатуры.Ссылка
	|		ПО Товары.Серия = СерииНоменклатуры.Ссылка
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НоменклатураКонтрагентов.Ссылка) КАК Ссылка,
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НоменклатураКонтрагента
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НоменклатураКонтрагентов.Номенклатура В
	|			(ВЫБРАТЬ
	|				ДанныеТабличнойЧасти.Номенклатура
	|			ИЗ
	|				ДанныеТабличнойЧасти)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураКонтрагентов.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТабличнойЧасти.Ссылка КАК Ссылка,
	|	ДанныеТабличнойЧасти.НомерСтроки КАК НомерСтроки,
	|	ДанныеТабличнойЧасти.Номенклатура КАК Номенклатура,
	|	ДанныеТабличнойЧасти.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ДанныеТабличнойЧасти.Код КАК Код,
	|	ДанныеТабличнойЧасти.Артикул КАК Артикул,
	|	ДанныеТабличнойЧасти.Серия КАК Серия,
	|	ДанныеТабличнойЧасти.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДанныеТабличнойЧасти.ЕдиницаИзмеренияМест КАК ВидУпаковки,
	|	ДанныеТабличнойЧасти.Количество КАК Количество,
	|	ДанныеТабличнойЧасти.КоличествоМест КАК КоличествоМест,
	|	ДанныеТабличнойЧасти.Цена КАК ЦенаВВалютеДокумента,
	|	ДанныеТабличнойЧасти.Сумма КАК СуммаВВалютеДокумента,
	|	ДанныеТабличнойЧасти.КоличествоДАЛ КАК КоличествоДАЛ,
	|	ДанныеТабличнойЧасти.НомерСертификата КАК НомерСертификата,
	|	ДанныеТабличнойЧасти.ДатаНачалаСертификата КАК ДатаНачалаСертификата,
	|	ДанныеТабличнойЧасти.ДатаОкончанияСертификата КАК ДатаОкончанияСертификата,
	|	ДанныеТабличнойЧасти.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	НоменклатураКонтрагента.Ссылка.Артикул КАК АртикулНоменклатурыКонтрагента,
	|	ВЫБОР
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|						ТОГДА ДанныеТабличнойЧасти.КоличествоУпаковок * ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.Родитель.Вес, 0)
	|				КОНЕЦ
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|						ТОГДА ДанныеТабличнойЧасти.КоличествоУпаковок * ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.Вес, 0)
	|				КОНЕЦ
	|		ИНАЧЕ ДанныеТабличнойЧасти.Масса
	|	КОНЕЦ КАК МассаНетто,
	|	ВЫБОР
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|						ТОГДА ДанныеТабличнойЧасти.КоличествоУпаковок / ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|				КОНЕЦ * ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.Вес, 0)
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|						ТОГДА ДанныеТабличнойЧасти.КоличествоУпаковок / ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.КоличествоУпаковок
	|				КОНЕЦ * ЕСТЬNULL(ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Вес, 0)
	|		ИНАЧЕ ДанныеТабличнойЧасти.Масса
	|	КОНЕЦ КАК МассаБрутто,
	|	ВЫБОР
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ВесЕдиницаИзмерения
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ВесЕдиницаИзмерения
	|		ИНАЧЕ ДанныеТабличнойЧасти.Номенклатура.ВесЕдиницаИзмерения
	|	КОНЕЦ КАК ВесЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ВесЕдиницаИзмерения.Числитель
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ВесЕдиницаИзмерения.Числитель
	|		ИНАЧЕ ДанныеТабличнойЧасти.Номенклатура.ВесЕдиницаИзмерения.Числитель
	|	КОНЕЦ КАК ВесЕдиницаИзмеренияЧислитель,
	|	ВЫБОР
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ВесЕдиницаИзмерения.Знаменатель
	|		КОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ДанныеТабличнойЧасти.Серия.бг_УпаковкаПаллета.ВесЕдиницаИзмерения.Знаменатель
	|		ИНАЧЕ ДанныеТабличнойЧасти.Номенклатура.ВесЕдиницаИзмерения.Знаменатель
	|	КОНЕЦ КАК ВесЕдиницаИзмеренияЗнаменатель
	|ИЗ
	|	ДанныеТабличнойЧасти КАК ДанныеТабличнойЧасти
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураКонтрагента КАК НоменклатураКонтрагента
	|		ПО ДанныеТабличнойЧасти.Номенклатура = НоменклатураКонтрагента.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Документ.РеализацияТоваровУслуг) КАК Реализация,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	ВЫРАЗИТЬ(СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Документ.РеализацияТоваровУслуг) В (&МассивОбъектов)
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеПечати = Новый Структура;
	
	ДанныеПечати.Вставить("ДанныеШапки", 			ПакетРезультатов[4]);
	ДанныеПечати.Вставить("ДанныеТабличнойЧасти", 	ПакетРезультатов[7]);
	ДанныеПечати.Вставить("ДанныеСчетФактуры",		ПакетРезультатов[8]);
	
	Возврат ДанныеПечати;
	
КонецФункции

Функция бг_ПолучитьДанныеДляПечатнойФормыТранспортнойНакладной(ПараметрыПечати, МассивОбъектов) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ТранспортнаяИнформация.Объект КАК Объект,
	|	бг_ТранспортнаяИнформация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	бг_ТранспортнаяИнформация.Водитель КАК Водитель,
	|	бг_ТранспортнаяИнформация.НомераПломб КАК НомераПломб,
	|	бг_ТранспортнаяИнформация.НомерКонтейнера КАК НомерКонтейнера,
	|	бг_ТранспортнаяИнформация.Прицеп КАК Прицеп,
	|	бг_ТранспортнаяИнформация.Перевозчик КАК Перевозчик,
	|	бг_ТранспортнаяИнформация.МыГрузимТовар КАК МыГрузимТовар,
	|	бг_ТранспортнаяИнформация.Заказчик КАК Заказчик,
	|	бг_ТранспортнаяИнформация.ОрганизаторПеревозки КАК ОрганизаторПеревозки,
	|	бг_ТранспортнаяИнформация.ТранспортноеСредство.Код КАК РегистрационныйНомер,
	|	бг_ТранспортнаяИнформация.ТранспортноеСредство.бг_Марка КАК ТранспортноеСредствоМарка,
	|	бг_ТранспортнаяИнформация.ВидПеревозки КАК ВидПеревозки,
	|	бг_ТранспортнаяИнформация.Прицеп.Код КАК ПрицепРегистрационныйНомер,
	|	бг_ТранспортнаяИнформация.Прицеп.бг_Марка КАК ПрицепМарка,
	|	бг_ТранспортнаяИнформация.ТипВладенияТС.Код КАК ТипВладенияТС,
	|	бг_ТранспортнаяИнформация.ДоговорНаВладение КАК ДоговорНаВладение,
	|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС,
	|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиПо КАК ПлановаяДатаДоставкиПо
	|ПОМЕСТИТЬ ТранспортнаяИнформация
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(бг_ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг) КАК Объект,
	|		МАКСИМУМ(бг_ТранспортнаяИнформация.ТранспортноеСредство) КАК ТранспортноеСредство
	|	ИЗ
	|		РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|	ГДЕ
	|		бг_ТранспортнаяИнформация.Объект ССЫЛКА Документ.РеализацияТоваровУслуг
	|		И ВЫРАЗИТЬ(бг_ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг) В (&МассивОбъектов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫРАЗИТЬ(бг_ТранспортнаяИнформация.Объект КАК Документ.РеализацияТоваровУслуг)) КАК ТранспортнаяИнформация
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|		ПО (ТранспортнаяИнформация.Объект = бг_ТранспортнаяИнформация.Объект)
	|			И (ТранспортнаяИнформация.ТранспортноеСредство = бг_ТранспортнаяИнформация.ТранспортноеСредство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Номер КАК НомерДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.ЗаказКлиента.Номер КАК НомерЗаказа,
	|	РеализацияТоваровУслуг.ЗаказКлиента.Дата КАК ДатаЗаказа,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Организация.ИНН КАК ГрузоотправительИНН,
	|	РеализацияТоваровУслуг.Контрагент КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Контрагент.ИНН КАК ГрузополучательИНН,
	|	РеализацияТоваровУслуг.бг_ПунктНазначения.Адрес КАК АдресДоставки,
	|	РеализацияТоваровУслуг.бг_ПунктНазначения.Телефон КАК ТелефонПунктаНазначения,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
	|	РеализацияТоваровУслуг.Отпустил.бг_Должность КАК ОтпустилДолжность,
	|	Рейсы.Рейс.ДатаПрибытияФакт КАК ДатаПрибытия,
	|	Рейсы.Рейс.ЗагрузкаДатаУбытия КАК ДатаУбытия,
	|	Рейсы.Рейс.Экспедитор КАК Экспедитор,
	|	Рейсы.Рейс.ДокументОснование КАК МаршрутныйЛист,
	|	Рейсы.Рейс.Водитель КАК ВодительРейса
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(МаршрутныйЛистЗаказы.Ссылка) КАК Рейс,
	|			ВЫРАЗИТЬ(МаршрутныйЛистЗаказы.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) КАК Реализация
	|		ИЗ
	|			Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ГДЕ
	|			ВЫРАЗИТЬ(МаршрутныйЛистЗаказы.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг) В (&МассивОбъектов)
	|			И МаршрутныйЛистЗаказы.Ссылка.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.Рейс)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(МаршрутныйЛистЗаказы.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг)) КАК Рейсы
	|		ПО РеализацияТоваровУслуг.Ссылка = Рейсы.Реализация
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПунктыНазначения.Организация КАК Организация,
	|	ПунктыНазначения.Ссылка.Адрес КАК АдресПунктаНазначения,
	|	ПунктыНазначения.Ссылка.Телефон КАК НомерТелефона
	|ПОМЕСТИТЬ ДанныеПунктовНазначения
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(битПунктыНазначения.Ссылка) КАК Ссылка,
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) КАК Организация
	|	ИЗ
	|		Справочник.битПунктыНазначения КАК битПунктыНазначения
	|	ГДЕ
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) В
	|				(ВЫБРАТЬ
	|					ДанныеДокументов.Организация
	|				ИЗ
	|					ДанныеДокументов)
	|		И НЕ битПунктыНазначения.ОбособленноеПодразделение
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации)) КАК ПунктыНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|				КОНЕЦ
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок * ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.Родитель.Вес, 0)
	|				КОНЕЦ
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок * ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.Вес, 0)
	|				КОНЕЦ
	|		ИНАЧЕ Товары.Номенклатура.ВесЧислитель * Товары.Количество / 1000
	|	КОНЕЦ КАК МассаНетто,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|				КОНЕЦ * ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.Вес, 0)
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|						ТОГДА Товары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок
	|				КОНЕЦ * ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Вес, 0)
	|	КОНЕЦ КАК МассаБрутто
	|ПОМЕСТИТЬ ДанныеТабличнойЧасти
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Товары.Серия = СерииНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО Товары.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.НомерДокумента КАК НомерДокумента,
	|	ДанныеДокументов.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокументов.НомерЗаказа КАК НомерЗаказа,
	|	ДанныеДокументов.ДатаЗаказа КАК ДатаЗаказа,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.Организация.НаименованиеПолное КАК ОрганизацияНаименование,
	|	ДанныеДокументов.ГрузоотправительИНН КАК ГрузоотправительИНН,
	|	ДанныеДокументов.Грузополучатель КАК Грузополучатель,
	|	ДанныеДокументов.ГрузополучательИНН КАК ГрузополучательИНН,
	|	ДанныеДокументов.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокументов.ТелефонПунктаНазначения КАК ТелефонПунктаНазначения,
	|	ДанныеДокументов.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокументов.ВодительРейса КАК ВодительРейса,
	|	ДанныеДокументов.ДатаПрибытия КАК ДатаПрибытия,
	|	ДанныеДокументов.ДатаУбытия КАК ДатаУбытия,
	|	ДанныеДокументов.Валюта КАК Валюта,
	|	ДанныеДокументов.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ДанныеПунктовНазначения.АдресПунктаНазначения КАК АдресПунктаНазначения,
	|	ДанныеПунктовНазначения.НомерТелефона КАК НомерТелефона,
	|	ДанныеТаблицы.КоличествоМест КАК КоличествоМест,
	|	ДанныеТаблицы.МассаНетто КАК МассаНетто,
	|	ДанныеТаблицы.МассаБрутто КАК МассаБрутто,
	|	ДанныеДокументов.Отпустил КАК Отпустил,
	|	ДанныеДокументов.ОтпустилДолжность КАК ОтпустилДолжность,
	|	ТранспортнаяИнформация.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС,
	|	ТранспортнаяИнформация.ПлановаяДатаДоставкиПо КАК ПлановаяДатаДоставкиПо,
	|	ТранспортнаяИнформация.ТранспортноеСредствоМарка КАК МаркаТранспортногоСредства,
	|	ТранспортнаяИнформация.РегистрационныйНомер КАК ТранспортноеСредствоРегистрационныйНомер,
	|	ТранспортнаяИнформация.ПрицепМарка КАК МаркаПрицепа,
	|	ТранспортнаяИнформация.ПрицепРегистрационныйНомер КАК ПрицепРегистрационныйНомер,
	|	ТранспортнаяИнформация.ТранспортноеСредство.ГрузоподъемностьВТоннах КАК ТранспортноеСредствоГрузоподъемность,
	|	ТранспортнаяИнформация.НомераПломб КАК НомераПломб,
	|	ТранспортнаяИнформация.Перевозчик КАК Перевозчик,
	|	ТранспортнаяИнформация.Заказчик КАК Заказчик,
	|	ТранспортнаяИнформация.Заказчик.НаименованиеПолное КАК ЗаказчикНаименование,
	|	ТранспортнаяИнформация.Перевозчик.НаименованиеПолное КАК ПеревозчикНаименование,
	|	ТранспортнаяИнформация.Водитель КАК Водитель,
	|	ТранспортнаяИнформация.Водитель.ИНН КАК ВодительИНН,
	|	ТранспортнаяИнформация.ТипВладенияТС КАК ТипВладенияТС,
	|	ТранспортнаяИнформация.ДоговорНаВладение КАК ДоговорНаВладение,
	|	ТранспортнаяИнформация.ВидПеревозки.Самовывоз КАК ЭтоСамовывоз,
	|	ТранспортнаяИнформация.МыГрузимТовар КАК МыГрузимТовар,
	|	ТранспортнаяИнформация.ОрганизаторПеревозки КАК ОрганизаторПеревозки,
	|	ДанныеДокументов.Экспедитор КАК Экспедитор,
	|	ДанныеДокументов.МаршрутныйЛист.ДатаПрибытия КАК МаршрутныйЛистДатаПрибытия,
	|	ДокументыФизическихЛиц.Серия КАК ВодительскоеУдостоверениеСерия,
	|	ДокументыФизическихЛиц.Номер КАК ВодительскоеУдостоверениеНомер
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПунктовНазначения КАК ДанныеПунктовНазначения
	|		ПО (ДанныеДокументов.Организация = ДанныеПунктовНазначения.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДанныеТабличнойЧасти.Ссылка КАК Ссылка,
	|			СУММА(ДанныеТабличнойЧасти.КоличествоМест) КАК КоличествоМест,
	|			СУММА(ДанныеТабличнойЧасти.МассаНетто) КАК МассаНетто,
	|			СУММА(ДанныеТабличнойЧасти.МассаБрутто) КАК МассаБрутто
	|		ИЗ
	|			ДанныеТабличнойЧасти КАК ДанныеТабличнойЧасти
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДанныеТабличнойЧасти.Ссылка) КАК ДанныеТаблицы
	|		ПО (ДанныеДокументов.Ссылка = ДанныеТаблицы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|		ПО (ДанныеДокументов.Ссылка = ТранспортнаяИнформация.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокументыФизическихЛиц.Физлицо КАК Физлицо,
	|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
	|			ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента
	|		ИЗ
	|			ДанныеДокументов КАК ДанныеДокументов
	|				ЛЕВОЕ СОЕДИНЕНИЕ ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|					ПО (ДокументыФизическихЛиц.Физлицо = ТранспортнаяИнформация.Водитель)
	|						И (ДокументыФизическихЛиц.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение))
	|				ПО ДанныеДокументов.Ссылка = ТранспортнаяИнформация.Объект
	|					И (ДанныеДокументов.ДатаДокумента >= ДокументыФизическихЛиц.Период)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыФизическихЛиц.Физлицо,
	|			ДокументыФизическихЛиц.ВидДокумента) КАК ВодительскиеУдостоверения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|			ПО (ВодительскиеУдостоверения.Физлицо = ДокументыФизическихЛиц.Физлицо
	|					И ВодительскиеУдостоверения.Период = ДокументыФизическихЛиц.Период
	|					И ВодительскиеУдостоверения.ВидДокумента = ДокументыФизическихЛиц.ВидДокумента)
	|		ПО (ТранспортнаяИнформация.Водитель = ВодительскиеУдостоверения.Физлицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Документ.РеализацияТоваровУслуг) КАК Реализация,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	ВЫРАЗИТЬ(СчетФактураВыданныйДокументыОснования.ДокументОснование КАК Документ.РеализацияТоваровУслуг) В (&МассивОбъектов)
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	
	ДанныеДляПечати.Вставить("ДанныеПоШапке", ПакетРезультатов[4]);
	ДанныеДляПечати.Вставить("ДанныеСчетФактуры", ПакетРезультатов[5]);
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#Область АктПерегрузкиТМЦ

Функция бг_СформироватьПечатнуюФормуАктПерегрузкиТМЦ(МассивОбъектов, ОбъектыПечати)
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПропускНаВывоз";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.бг_ПФ_MXL_АктПерегрузкиТМЦ");
	ОбластьДанные  = Макет.ПолучитьОбласть("ОбластьДанные");
	
	ДанныеПечати = бг_ДанныеДляПечатиАктаПерегрузкиТМЦ(МассивОбъектов);
	
	ПервыйДокумент = Истина;
	Пока ДанныеПечати.Следующий() Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТелефонОрганизации = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
								ДанныеПечати.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, , ДанныеПечати.Дата);
		
		ОбластьДанные.Параметры.Заполнить(ДанныеПечати);
		
		ОбластьДанные.Параметры.ТТНДата = Формат(ДанныеПечати.ТТНДата, "ДФ=dd.MM.yyyy");
		ОбластьДанные.Параметры.Грузоотправитель = СтрШаблон(НСтр("ru = '%1 ИНН %2'"), ДанныеПечати.НаименованиеОрганизации, ДанныеПечати.ИННОрганизации);
		ОбластьДанные.Параметры.Грузополучатель = СтрШаблон(НСтр("ru = '%1 ИНН %2'"), ДанныеПечати.НаименованиеКонтрагента, ДанныеПечати.ИННКонтрагента);
		
		ОбластьДанные.Параметры.ЮридическийАдрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
								ДанныеПечати.Организация, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, , ДанныеПечати.Дата);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Субподрядчик) тогда
			ОбластьДанные.Параметры.ЭкспедиторГрузоотправитель = СтрШаблон(
								НСтр("ru = '%1, ИНН %2, телефон %3'"),
								ДанныеПечати.ГрузоотправительНаименование,
								ДанныеПечати.ГрузоотправительИНН,
								ДанныеПечати.ПунктПогрузкиТелефон);
			
			ОбластьДанные.Параметры.Перевозчик1ИлиЭкспедитор = ДанныеПечати.СубподрядчикНаименование;
			ОбластьДанные.Параметры.Перевозчик1 = ДанныеПечати.СубподрядчикНаименование;
			ОбластьДанные.Параметры.Перевозчик1Представление = СтрШаблон(НСтр("ru = '%1 ИНН %2'"), ДанныеПечати.СубподрядчикНаименование, ДанныеПечати.СубподрядчикИНН);
		Иначе
			ОбластьДанные.Параметры.ЭкспедиторГрузоотправитель = НСтр("ru = ' —— '");
			ОбластьДанные.Параметры.Перевозчик1ИлиЭкспедитор = ДанныеПечати.ГрузоотправительНаименование;
			ОбластьДанные.Параметры.Перевозчик1 = ДанныеПечати.ГрузоотправительНаименование;
		КонецЕсли;
		
		ОбластьДанные.Параметры.ЗаказчикТС = СтрШаблон(
								НСтр("ru = '%1, ИНН %2, телефон %3'"),
								ДанныеПечати.ГрузоотправительНаименование,
								ДанныеПечати.ГрузоотправительИНН,
								?(ЗначениеЗаполнено(ДанныеПечати.ПунктПогрузкиТелефон), ДанныеПечати.ПунктПогрузкиТелефон, ТелефонОрганизации));
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.ДоверенностьНомер) Тогда
			ОбластьДанные.Параметры.ДоверенностьНомер = НСтр("ru = '____________________'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеПечати.ДоверенностьДата) Тогда
	 		ОбластьДанные.Параметры.ДоверенностьДата = НСтр("ru = '____________________'");
		Иначе
			ОбластьДанные.Параметры.ДоверенностьДата = Формат(ДанныеПечати.ДоверенностьДата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.МаршрутныйЛистДата) Тогда
			ОбластьДанные.Параметры.МаршрутныйЛистДата = Формат(ДанныеПечати.МаршрутныйЛистДата, "ДФ=dd.MM.yyyy");
		Иначе
			ОбластьДанные.Параметры.МаршрутныйЛистНомер = НСтр("ru = '______________________'");
			ОбластьДанные.Параметры.МаршрутныйЛистДата  = НСтр("ru = '________________'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.НомерКонтейнера) Тогда
			ОбластьДанные.Параметры.НомерКонтейнераРейс = ДанныеПечати.НомерКонтейнера;
			ОбластьДанные.Параметры.ГрузКПеревозкеТекстОтНаличияКонтейнераСтрока1 =
				НСтр("ru = 'груз к перевозке принял, целостность пломб проверена, отсутствие повреждений контейнера, в т.ч. механических и иных воздействий, подтверждает. '");
		Иначе
			ОбластьДанные.Параметры.ГрузКПеревозкеТекстОтНаличияКонтейнераСтрока1 =
				НСтр("ru = 'груз к перевозке принял, количество и состояние, целостность упаковки, отсутствие повреждений подтверждает.'");
			ОбластьДанные.Параметры.НомерКонтейнераРейс = НСтр("ru = ' —— '");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.НомераПломб) Тогда
			ОбластьДанные.Параметры.НомерПломбыРейсПеревозчик1 = ДанныеПечати.НомераПломб;
			ОбластьДанные.Параметры.НомерПломбыРейс = ?(ЗначениеЗаполнено(ДанныеПечати.НомерКонтейнера), ДанныеПечати.НомераПломб, НСтр("ru = ' —— '"));
		Иначе
			ОбластьДанные.Параметры.НомерПломбыРейс = НСтр("ru = ' —— '");
			ОбластьДанные.Параметры.НомерПломбыРейсПеревозчик1 = НСтр("ru = ' —— '");
		КонецЕсли;
		
		бг_ЗаполнитьДанныеВидаПеревозки(ОбластьДанные, ДанныеПечати);
		
		Если ДанныеПечати.КоличествоНеАлкогольнаяПродукция <> 0 Тогда
			ОбластьДанные.Параметры.КоличествоНеАПпоУчетномуДокументу = СтрШаблон(
								НСтр("ru = 'кол-во грузовых мест: %1'"),
								ДанныеПечати.КоличествоПоТТНЕГАИС + ДанныеПечати.КоличествоНеАлкогольнаяПродукция);
			ОбластьДанные.Параметры.КоличествоПоТТНЕГАИС = НСтр("ru = '——'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьДанные);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, 
			НомерСтрокиНачало, 
			ОбъектыПечати, 
			ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

Функция бг_ДанныеДляПечатиАктаПерегрузкиТМЦ(МассивОбъектов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутныйЛистЗаказы.ДокументОтгрузки КАК ДокументОтгрузки,
	|	МаршрутныйЛистЗаказы.Ссылка КАК Рейс,
	|	МаршрутныйЛистЗаказы.Ссылка.ДатаСоздания КАК ДатаРейса
	|ПОМЕСТИТЬ Рейсы
	|ИЗ
	|	Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|ГДЕ
	|	МаршрутныйЛистЗаказы.ДокументОтгрузки В(&МассивОбъектов)
	|	И МаршрутныйЛистЗаказы.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рейсы.ДокументОтгрузки КАК ДокументОтгрузки,
	|	МАКСИМУМ(Рейсы.ДатаРейса) КАК ДатаРейса
	|ПОМЕСТИТЬ АктуальныеРейсы
	|ИЗ
	|	Рейсы КАК Рейсы
	|
	|СГРУППИРОВАТЬ ПО
	|	Рейсы.ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АктуальныеРейсы.ДокументОтгрузки КАК ДокументОтгрузки,
	|	МаршрутныйЛистРейс.Организация КАК Организация,
	|	МаршрутныйЛистРейс.Перевозчик КАК Перевозчик,
	|	МаршрутныйЛистРейс.Субподрядчик КАК Субподрядчик,
	|	МаршрутныйЛистРейс.Склад КАК Склад,
	|	МаршрутныйЛистРейс.Склад.бг_ПунктНазначения КАК ПунктПогрузки,
	|	МаршрутныйЛистРейс.Склад.бг_ПунктНазначения.Адрес КАК АдресПунктаПогрузки,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыОтгрузки.ПунктНазначения = ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)
	|			ТОГДА ДокументыОтгрузки.ПунктНазначения
	|		КОГДА ТИПЗНАЧЕНИЯ(ДокументыОтгрузки.ДокументОтгрузки) = ТИП(Документ.РеализацияТоваровУслуг)
	|				И НЕ ВЫРАЗИТЬ(ДокументыОтгрузки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).бг_ПунктНазначения =
	|									ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)
	|			ТОГДА ВЫРАЗИТЬ(ДокументыОтгрузки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).бг_ПунктНазначения
	|		КОГДА ТИПЗНАЧЕНИЯ(ДокументыОтгрузки.Заказ) = ТИП(Документ.ЗаказКлиента)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ДокументыОтгрузки.Заказ КАК Документ.ЗаказКлиента).бг_ПунктНазначения, ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка))
	|		КОГДА ТИПЗНАЧЕНИЯ(ДокументыОтгрузки.ДокументОтгрузки) = ТИП(Документ.ПеремещениеТоваров)
	|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ДокументыОтгрузки.ДокументОтгрузки КАК Документ.ПеремещениеТоваров).СкладПолучатель.бг_ПунктНазначения,
	|									ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)
	|	КОНЕЦ КАК ПунктНазначения,
	|	МаршрутныйЛистРейс.Водитель КАК Водитель,
	|	МаршрутныйЛистРейс.Номер КАК Номер,
	|	МаршрутныйЛистРейс.Дата КАК Дата,
	|	МаршрутныйЛистРейс.НомерВорот КАК НомерВорот,
	|	МаршрутныйЛистРейс.НомераПломб КАК НомераПломб,
	|	МаршрутныйЛистРейс.НомерКонтейнера КАК НомерКонтейнера,
	|	МаршрутныйЛистРейс.Автомобиль КАК Автомобиль,
	|	МаршрутныйЛистРейс.Прицеп КАК Прицеп
	|ПОМЕСТИТЬ ДанныеРейсов
	|ИЗ
	|	АктуальныеРейсы КАК АктуальныеРейсы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Рейсы КАК Рейсы
	|		ПО АктуальныеРейсы.ДокументОтгрузки = Рейсы.ДокументОтгрузки
	|			И АктуальныеРейсы.ДатаРейса = Рейсы.ДатаРейса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист.Заказы КАК ДокументыОтгрузки
	|		ПО (Рейсы.Рейс = ДокументыОтгрузки.Ссылка)
	|			И (Рейсы.ДокументОтгрузки = ДокументыОтгрузки.ДокументОтгрузки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист КАК МаршрутныйЛистРейс
	|		ПО (Рейсы.Рейс = МаршрутныйЛистРейс.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортнаяИнформация.Объект КАК Объект,
	|	ТранспортнаяИнформация.ТранспортноеСредство КАК ТранспортноеСредство,
	|	ТранспортнаяИнформация.ПунктНазначения КАК ПунктНазначения,
	|	ТранспортнаяИнформация.ВидПеревозки КАК ВидПеревозки,
	|	ТранспортнаяИнформация.ВидПеревозки.ТипТранспортаЕГАИС КАК ТипТранспортаЕГАИС
	|ПОМЕСТИТЬ ТранспортнаяИнформация
	|ИЗ
	|	РегистрСведений.бг_ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|ГДЕ
	|	ТранспортнаяИнформация.Объект В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОтгрузки,
	|	ТТНИсходящаяЕГАИСТовары.Количество КАК КоличествоАлкогольнаяПродукция,
	|	0 КАК КоличествоНеАлкогольнаяПродукция
	|ПОМЕСТИТЬ ДанныеТТНПредварительно
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|		ПО ТТНИсходящаяЕГАИС.Ссылка = ТТНИсходящаяЕГАИСТовары.Ссылка
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ДокументОснование В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	0,
	|	РеализацияТоваровУслугТовары.Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&МассивОбъектов)
	|	И НЕ ЕСТЬNULL(РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры.АлкогольнаяПродукция, ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТТНПредварительно.ДокументОтгрузки КАК ДокументОтгрузки,
	|	СУММА(ДанныеТТНПредварительно.КоличествоАлкогольнаяПродукция) КАК КоличествоАлкогольнаяПродукция,
	|	СУММА(ДанныеТТНПредварительно.КоличествоНеАлкогольнаяПродукция) КАК КоличествоНеАлкогольнаяПродукция
	|ПОМЕСТИТЬ ДанныеТТН
	|ИЗ
	|	ДанныеТТНПредварительно КАК ДанныеТТНПредварительно
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТТНПредварительно.ДокументОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.НаименованиеПолное, """") КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Контрагент.НаименованиеПолное, """") КАК НаименованиеКонтрагента,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Контрагент.ИНН, """") КАК ИННКонтрагента,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ИНН, """") КАК ИННОрганизации,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеРейсов.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеРейсов.Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА РеализацияТоваровУслуг.Организация
	|					ИНАЧЕ ДанныеРейсов.Перевозчик
	|				КОНЕЦ
	|		ИНАЧЕ РеализацияТоваровУслуг.Организация
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеРейсов.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеРейсов.Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Организация.НаименованиеПолное, """")
	|					ИНАЧЕ ЕСТЬNULL(ДанныеРейсов.Перевозчик.НаименованиеПолное, """")
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслуг.Организация.НаименованиеПолное, """")
	|	КОНЕЦ КАК ГрузоотправительНаименование,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеРейсов.ДокументОтгрузки ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеРейсов.Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ИНН, """")
	|					ИНАЧЕ ЕСТЬNULL(ДанныеРейсов.Перевозчик.ИНН, """")
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(РеализацияТоваровУслуг.Организация.ИНН, """")
	|	КОНЕЦ КАК ГрузоотправительИНН,
	|	ЕСТЬNULL(ДанныеРейсов.Перевозчик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Перевозчик,
	|	ЕСТЬNULL(ДанныеРейсов.Субподрядчик, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Субподрядчик,
	|	ЕСТЬNULL(ДанныеРейсов.Субподрядчик.НаименованиеПолное, """") КАК СубподрядчикНаименование,
	|	ЕСТЬNULL(ДанныеРейсов.Субподрядчик.ИНН, """") КАК СубподрядчикИНН,
	|	ЕСТЬNULL(ДанныеРейсов.АдресПунктаПогрузки, """") КАК ПунктПогрузки,
	|	ЕСТЬNULL(ДанныеРейсов.ПунктПогрузки.Телефон, """") КАК ПунктПогрузкиТелефон,
	|	ЕСТЬNULL(ДанныеРейсов.ПунктНазначения.Адрес, """") КАК ПунктРазгрузки,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеРейсов.Водитель) КАК ВодительФИО,
	|	РеализацияТоваровУслуг.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата КАК ДоверенностьДата,
	|	ДанныеРейсов.Номер КАК МаршрутныйЛистНомер,
	|	ДанныеРейсов.Дата КАК МаршрутныйЛистДата,
	|	РеализацияТоваровУслуг.Дата КАК ТТНДата,
	|	РеализацияТоваровУслуг.Номер КАК ТТННомер,
	|	ДанныеРейсов.НомерВорот КАК НомерВорот,
	|	ДанныеРейсов.НомераПломб КАК НомераПломб,
	|	ДанныеРейсов.НомерКонтейнера КАК НомерКонтейнера,
	|	ТранспортнаяИнформация.ВидПеревозки КАК ВидПеревозки,
	|	ЕСТЬNULL(ТранспортнаяИнформация.ВидПеревозки.КодТипаПеревозки, """") КАК КодВидаПеревозки,
	|	ЕСТЬNULL(ДанныеТТН.КоличествоАлкогольнаяПродукция, 0) КАК КоличествоПоТТНЕГАИС,
	|	ЕСТЬNULL(ДанныеТТН.КоличествоНеАлкогольнаяПродукция, 0) КАК КоличествоНеАлкогольнаяПродукция,
	|	ЕСТЬNULL(ДанныеРейсов.Автомобиль.бг_Модель, """") КАК МодельТС,
	|	ЕСТЬNULL(ДанныеРейсов.Автомобиль.Код, """") КАК ТранспортноеСредствоГосударственныйНомер,
	|	ЕСТЬNULL(ДанныеРейсов.Прицеп.Код, """") КАК ПрицепГосударственныйНомер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРейсов КАК ДанныеРейсов
	|		ПО РеализацияТоваровУслуг.Ссылка = ДанныеРейсов.ДокументОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|		ПО РеализацияТоваровУслуг.Ссылка = ТранспортнаяИнформация.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТТН КАК ДанныеТТН
	|		ПО РеализацияТоваровУслуг.Ссылка = ДанныеТТН.ДокументОтгрузки
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)";
	Результат = Запрос.Выполнить();
	
	ДанныеДляПечати = Результат.Выбрать();
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура бг_ЗаполнитьДанныеВидаПеревозки(ОбластьДанные, ДанныеПечати)
	Если ЗначениеЗаполнено(ДанныеПечати.ВидПеревозки)
		И ЗначениеЗаполнено(ДанныеПечати.КодВидаПеревозки) Тогда
		
		ПредставлениеВидаПеревозки = бг_ПредставлениеВидаПеревозки(ДанныеПечати.КодВидаПеревозки);
		Если ПредставлениеВидаПеревозки <> Неопределено Тогда
			ОбластьДанные.Параметры.ВидПеревозкиСтрокой = ПредставлениеВидаПеревозки;
		КонецЕсли;
		
		Если ДанныеПечати.КодВидаПеревозки = "413" Тогда // Автомобильный транспорт
			Если Не ЗначениеЗаполнено(ДанныеПечати.НомерКонтейнера) Тогда
				ОбластьДанные.Параметры.КодТипаПеревозки = ДанныеПечати.КодВидаПеревозки;
			Иначе
				ОбластьДанные.Параметры.КодТипаПеревозки = НСтр("ru = '_____________'");
			КонецЕсли;
		Иначе
			ОбластьДанные.Параметры.КодТипаПеревозки = ДанныеПечати.КодВидаПеревозки;
		КонецЕсли;
		
		// Воздушный транспорт, Водный транспорт, Железнодорожный транспорт
		Если ДанныеПечати.КодВидаПеревозки = "410"
			Или ДанныеПечати.КодВидаПеревозки = "411"
			Или ДанныеПечати.КодВидаПеревозки = "412" Тогда
			
			ОбластьДанные.Параметры.ФИОИлиПрочерк = " —— ";
			ОбластьДанные.Параметры.ПрочеркИлиПрочерк = " —— ";
			ОбластьДанные.Параметры.НомерИлиПрочерк = " —— ";
			ОбластьДанные.Параметры.ВыданИлиПрочерк = " ——/_____________________________________________";
			ОбластьДанные.Параметры.ВыданИлиПрочеркСтрока2 =  "___________________________________________________________________________________/";
			ОбластьДанные.Параметры.НомерДовереностиИлиПрочерк = " —— ";
			ОбластьДанные.Параметры.ДатаДовереностиИлиПрочерк = " —— ";
		// Автомобильный транспорт, Иные транспортные средства
		ИначеЕсли ДанныеПечати.КодВидаПеревозки = "413"
			Или ДанныеПечати.КодВидаПеревозки = "419" Тогда
			ОбластьДанные.Параметры.ФИОИлиПрочерк = "/__________________________________________________________/";
			ОбластьДанные.Параметры.ПрочеркИлиПрочерк = "/___________/";
			ОбластьДанные.Параметры.НомерИлиПрочерк = "/____________________/";
			ОбластьДанные.Параметры.ВыданИлиПрочерк = "/__________________________________________________";
			ОбластьДанные.Параметры.ВыданИлиПрочеркСтрока2 =  "___________________________________________________________________________________/";
			ОбластьДанные.Параметры.НомерДовереностиИлиПрочерк = "_____________________";
			ОбластьДанные.Параметры.ДатаДовереностиИлиПрочерк = "____________________";
		КонецЕсли;
		
		// Воздушный транспорт, Железнодорожный транспорт
		Если ДанныеПечати.КодВидаПеревозки = "410"
			Или ДанныеПечати.КодВидаПеревозки = "412" Тогда
			ОбластьДанные.Параметры.ПрочеркОтВидаПеревозки = " —— ";
		КонецЕсли;
	Иначе
		ОбластьДанные.Параметры.ФИОИлиПрочерк = "/__________________________________________________________/";
		ОбластьДанные.Параметры.ПрочеркИлиПрочерк = "/________/";
		ОбластьДанные.Параметры.НомерИлиПрочерк = "/______________________/";
		ОбластьДанные.Параметры.ВыданИлиПрочерк = "/__________________________________________________";
		ОбластьДанные.Параметры.ВыданИлиПрочеркСтрока2 =  "___________________________________________________________________________________/";
		ОбластьДанные.Параметры.НомерДовереностиИлиПрочерк = "_____________________";
		ОбластьДанные.Параметры.ДатаДовереностиИлиПрочерк = "____________________";
	КонецЕсли;
КонецПроцедуры

Функция бг_ПредставлениеВидаПеревозки(КодВидаПеревозки)
	ПредставленияВидовПеревозки = Новый Соответствие;
	ПредставленияВидовПеревозки.Вставить("410", НСтр("ru = 'Воздушный транспорт'"));
	ПредставленияВидовПеревозки.Вставить("411", НСтр("ru = 'Водный транспорт'"));
	ПредставленияВидовПеревозки.Вставить("412", НСтр("ru = 'Железнодорожный транспорт'"));
	ПредставленияВидовПеревозки.Вставить("413", НСтр("ru = 'Автомобильный транспорт'"));
	ПредставленияВидовПеревозки.Вставить("419", НСтр("ru = 'Иные транспортные средства'"));
	
	Возврат ПредставленияВидовПеревозки.Получить(КодВидаПеревозки);
КонецФункции

#КонецОбласти

#Область РасходнаяНакладная

Функция бг_СформироватьПечатнуюФормуРасходнаяНакладнаяОсновной(МассивОбъектов, ОбъектыПечати)

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	УстановитьПривилегированныйРежим(Истина);

	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_РасходнаяНакладная_Основной";
	
	НомерТипаДокумента = 0;
	
	СтруктураТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл

		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
	
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		
		ДанныеДляПечати = МенеджерОбъекта.бг_ДанныеДляПечатнойФормыРасходнаяНакладнаяОсновной( 
			СтруктураОбъектов.Значение); 
		
		бг_ЗаполнитьПечатнуюФормуРасходнаяНакладнаяОсновной(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати);
		
	КонецЦикла;

	Возврат ТабличныйДокумент;	
	
КонецФункции

Функция бг_ДанныеДляПечатнойФормыРасходнаяНакладнаяОсновной(МассивОбъектов) Экспорт

	ЗапросПоТоварам = Новый Запрос;
	ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		
	ТекстЗапросаПоТоварам = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Организация.Префикс КАК Префикс,
	|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	РеализацияТоваровУслуг.Валюта КАК Валюта,
	|	РеализацияТоваровУслуг.Отпустил КАК Отпустил,
	|	РеализацияТоваровУслугТовары.Склад КАК Склад,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ПредставлениеЕдиницыИзмеренияУпаковки,
	|	ПРЕДСТАВЛЕНИЕ(НоменклатураДокумента.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	НоменклатураДокумента.Код КАК Код,
	|	НоменклатураДокумента.Артикул КАК Артикул,
	|	НоменклатураДокумента.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Характеристика) КАК ПредставлениеХарактеристики,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Серия) КАК ПредставлениеСерии,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВернутьМногооборотнуюТару
	|				И НоменклатураДокумента.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара,
	|	NULL КАК НастройкаИспользованияСерий,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Характеристика КАК Характеристика,
	|	РеализацияТоваровУслугТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	РеализацияТоваровУслугТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.СуммаСНДС КАК СуммаСНДС,
	|	ПРЕДСТАВЛЕНИЕ(ВидыНоменклатуры.бг_ЕдиницаИзмеренияМест) КАК ЕдиницаИзмеренияМестПредставление,
	|	ВЫБОР
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|						ТОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|				КОНЕЦ
	|		КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|				И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|						ТОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ПроцентАвтоматическойСкидки + РеализацияТоваровУслугТовары.ПроцентРучнойСкидки <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыводитьСкидки,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|						И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок, 0) <> 0
	|								ТОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|						КОНЕЦ
	|				КОГДА СерииНоменклатуры.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|						И СерииНоменклатуры.бг_УпаковкаПаллета.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок, 0) <> 0
	|								ТОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок / СерииНоменклатуры.бг_УпаковкаПаллета.КоличествоУпаковок
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыводитьКоличествоМест,
	|	РеализацияТоваровУслугТовары.Серия КАК Серия,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Справки1ЕГАИС.бг_НомерГТД), """") КАК НомерГТД,
	|	ЕСТЬNULL(СтраныМира.Наименование, """") КАК СтранаПроисхождения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураДокумента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО (НоменклатураДокумента.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|		ПО (РеализацияТоваровУслугТовары.Номенклатура = НоменклатураДокумента.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
	|				ПО (КлассификаторОрганизацийЕГАИС.КодСтраны = СтраныМира.бг_КодСтраныЧислом)
	|			ПО (СерииНоменклатуры.ПроизводительЕГАИС = КлассификаторОрганизацийЕГАИС.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки1ЕГАИС КАК Справки1ЕГАИС
	|				ПО (Справки2ЕГАИС.Справка1 = Справки1ЕГАИС.Ссылка)
	|			ПО (СерииНоменклатуры.Справка2ЕГАИС = Справки2ЕГАИС.Ссылка)
	|		ПО (РеализацияТоваровУслугТовары.Серия = СерииНоменклатуры.Ссылка)
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В (&МассивОбъектов)
	|ИТОГИ
	|	МАКСИМУМ(Номер),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(НалогообложениеНДС),
	|	МАКСИМУМ(ЦенаВключаетНДС),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(Отпустил),
	|	МАКСИМУМ(ВыводитьСкидки),
	|	МАКСИМУМ(ВыводитьКоличествоМест)
	|ПО
	|	Ссылка,
	|	Склад,
	|	Номенклатура,
	|	Характеристика";
	
	ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"РеализацияТоваровУслугТовары.Упаковка",
		"РеализацияТоваровУслугТовары.Номенклатура"));
	
	ТекстЗапросаПоТоварам = СтрЗаменить(ТекстЗапросаПоТоварам, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование",
		"РеализацияТоваровУслугТовары.Упаковка",
		"РеализацияТоваровУслугТовары.Номенклатура"));
	
	ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
		
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ДанныеПоТоварам", ЗапросПоТоварам.Выполнить());
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура бг_ЗаполнитьПечатнуюФормуРасходнаяНакладнаяОсновной(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати)
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
			
	ДанныеПечати = ДанныеДляПечати.ДанныеПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	ПараметрыМакета = Новый Структура();
	ПараметрыМакета.Вставить("ВыводитьКоды", ЗначениеЗаполнено(ИмяКолонкиКодов));
	ПараметрыМакета.Вставить("ВыводитьСкидки");
	ПараметрыМакета.Вставить("ВыводитьКоличествоМест");
	ПараметрыМакета.Вставить("ИмяКолонкиКодов", ИмяКолонкиКодов);
	
	НомерСтрокиНачало = 0;
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс, Представление");
	
	Пока ДанныеПечати.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДанныеПечати);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.РеализацияТоваровУслуг.бг_ПФ_MXL_РасходнаяНакладная");
		
		бг_ОпределитьШиринуКолонкиТоваров(Макет, ДанныеПечати, ПараметрыМакета);
		
		ВыборкаПоСкладам = ДанныеПечати.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСкладам.Следующий() Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			бг_ЗаполнитьШапкуРасходнойНакладной(ТабличныйДокумент, Макет, ВыборкаПоСкладам);
			
			ПараметрыЗаполненияШапкиТаблицы = Новый Структура("ИмяКолонкиКодов", ПредставлениеКолонкиКодов);
			бг_ВывестиОбластиТаблицыРасходнойНакладной(
				"ШапкаТаблицы", 
				ТабличныйДокумент, 
				Макет, 
				ПараметрыМакета, 
				ПараметрыЗаполненияШапкиТаблицы);
			
			ИтоговыеПараметрыТаблицы = бг_ИтоговыеПараметрыТаблицы();
			
			ВыборкаПоСсылкамТЧ = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСсылкамТЧ.Следующий() Цикл
				
				бг_ЗаполнитьСтрокиТаблицыРасходнойНакладной(
					ТабличныйДокумент, 
					Макет, 
					ПараметрыМакета, 
					ВыборкаПоСсылкамТЧ, 
					ИтоговыеПараметрыТаблицы);		
				
			КонецЦикла;
			
			бг_ВывестиОбластиТаблицыРасходнойНакладной(
				"ПодвалТаблицы", 
				ТабличныйДокумент, 
				Макет, 
				ПараметрыМакета);
			
			ВыводитьНДС = ВыборкаПоСкладам.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			
			ПараметрыЗаполненияИтогов = Новый Структура();
			ПараметрыЗаполненияИтогов.Вставить("ИтогоСуммаБезСкидок", ИтоговыеПараметрыТаблицы.ИтогоСуммаБезСкидок);
			ПараметрыЗаполненияИтогов.Вставить("ИтогоСуммаСкидок", ИтоговыеПараметрыТаблицы.ИтогоСуммаСкидок);
			ПараметрыЗаполненияИтогов.Вставить("ИтогоСумма", ИтоговыеПараметрыТаблицы.ИтогоСумма);
			
			ПредставлениеНДС = ?(
					ВыборкаПоСкладам.ЦенаВключаетНДС, 
					НСтр("ru='В том числе НДС:'"), 
					НСтр("ru='Сумма НДС:'"));
			
			ПараметрыЗаполненияИтогов.Вставить("ПредставлениеНДС", ПредставлениеНДС);
			ПараметрыЗаполненияИтогов.Вставить("ИтогоНДС", ИтоговыеПараметрыТаблицы.ИтогоНДС);
			
			бг_ВывестиОбластиТаблицыРасходнойНакладной(
				"Итого", 
				ТабличныйДокумент, 
				Макет, 
				ПараметрыМакета, 
				ПараметрыЗаполненияИтогов);
			
			Если ВыводитьНДС Тогда
				
				бг_ВывестиОбластиТаблицыРасходнойНакладной(
					"ИтогоНДС", 
					ТабличныйДокумент, 
					Макет, 
					ПараметрыМакета, 
					ПараметрыЗаполненияИтогов);	
								
			КонецЕсли;
			
			Область = Макет.ПолучитьОбласть("СуммаПрописью");
			
			ШаблонИтоговойСтроки = НСтр("ru = 'Всего наименований %1, на сумму %2 %3'");
			
			ТекстИтоговойСтроки = СтрШаблон(
				ШаблонИтоговойСтроки, 
				ИтоговыеПараметрыТаблицы.СчетСтрок-1, 
				Формат(ИтоговыеПараметрыТаблицы.ИтогоСуммаСНДС, "ЧДЦ=2"),
				ВыборкаПоСкладам.Валюта);
				
			СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
				ИтоговыеПараметрыТаблицы.ИтогоСуммаСНДС, 
				ВыборкаПоСкладам.Валюта);
			
			СтруктураДанныхИтоговаяСтрока = Новый Структура;
			СтруктураДанныхИтоговаяСтрока.Вставить("ИтоговаяСтрока", ТекстИтоговойСтроки);
			СтруктураДанныхИтоговаяСтрока.Вставить("СуммаПрописью", СуммаПрописью);
			
			Область.Параметры.Заполнить(СтруктураДанныхИтоговаяСтрока);
			ТабличныйДокумент.Вывести(Область);
			
			// Подписи
			Область = Макет.ПолучитьОбласть("Подписи");
			
			СтруктураДанныеПодписи = Новый Структура(
				"ОтпустилПредставление", 
				ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(
					ВыборкаПоСкладам.Отпустил, 
					ВыборкаПоСкладам.Дата));
					
			Область.Параметры.Заполнить(СтруктураДанныеПодписи);
			ТабличныйДокумент.Вывести(Область);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
				ТабличныйДокумент, 
				НомерСтрокиНачало, 
				ОбъектыПечати, 
				ДанныеПечати.Ссылка);
				
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция бг_ПредставлениеТовараРасходнойНакладной(Выборка)

	ДополнительныеПараметрыПолученияНаименованияДляПечати 
		= НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДополнительныеПараметрыПолученияНаименованияДляПечати.ВозвратнаяТара = Выборка.ЭтоВозвратнаяТара;
	ДополнительныеПараметрыПолученияНаименованияДляПечати.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Возврат НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.ПредставлениеНоменклатуры,
				Выборка.ПредставлениеХарактеристики,,
				Выборка.ПредставлениеСерии,
				ДополнительныеПараметрыПолученияНаименованияДляПечати);
		
КонецФункции

Процедура бг_ОпределитьШиринуКолонкиТоваров(Макет, ДанныеПечати, ПараметрыМакета)

	ШиринаКолонкиКодов = 0;
	Если Не ПараметрыМакета.ВыводитьКоды Тогда
		ШиринаКолонкиКодов = Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	ШиринаКолонкиТоваров = Макет.Область("КолонкаТоваров").ШиринаКолонки;
	
	// Раздвинуть колонку "КолонкаТоваров" на ширину колонки кодов
	Макет.Область("КолонкаТоваров").ШиринаКолонки = ШиринаКолонкиТоваров + ШиринаКолонкиКодов;
	
	ЗаполнитьЗначенияСвойств(ПараметрыМакета, ДанныеПечати);
	
	ШиринаОтсутствующихОбластей = 0;
	
	Если Не ПараметрыМакета.ВыводитьСкидки Тогда
		ШиринаОтсутствующихОбластей = Макет.Область("СуммаБезСкидки").ШиринаКолонки + ШиринаОтсутствующихОбластей;
		ШиринаОтсутствующихОбластей = Макет.Область("СуммаСкидки").ШиринаКолонки + ШиринаОтсутствующихОбластей;
	КонецЕсли;
	
	Если Не ПараметрыМакета.ВыводитьКоличествоМест Тогда
		ШиринаОтсутствующихОбластей = Макет.Область("Мест").ШиринаКолонки + ШиринаОтсутствующихОбластей;
	КонецЕсли;
	
	// Раздвинуть колонку "КолонкаТоваров" на ширину отсутствующих областей
	Макет.Область("КолонкаТоваров").ШиринаКолонки = Макет.Область("КолонкаТоваров").ШиринаКолонки
		+ ШиринаОтсутствующихОбластей;
	
КонецПроцедуры

Процедура бг_ЗаполнитьШапкуРасходнойНакладной(ТабличныйДокумент, Макет, Выборка)

	Область = Макет.ПолучитьОбласть("Заголовок");
			
	СтруктураДанныхЗаголовок = Новый Структура;
	СтруктураДанныхЗаголовок.Вставить(
		"ТекстЗаголовка", 
		СтрШаблон(
			НСтр("ru = 'Расходная накладная №%1 от %2'"), 
			Выборка.Номер, 
			Формат(Выборка.Дата, "ДФ='дд ММММ гггг'")));
	
	Область.Параметры.Заполнить(СтруктураДанныхЗаголовок);
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Поставщик");
	
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить(
		"ПредставлениеОрганизации", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(
			ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата), 
		"ПолноеНаименование"));
	СтруктураДанныхПоставщик.Вставить("Организация", Выборка.Организация);
	
	Область.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Покупатель");
	
	СтруктураДанныхПокупатель = Новый Структура;
	СтруктураДанныхПокупатель.Вставить(
		"ПредставлениеПартнера", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(
			ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Контрагент, Выборка.Дата),
		"ПолноеНаименование"));
	СтруктураДанныхПокупатель.Вставить("Контрагент", Выборка.Контрагент);
	
	Область.Параметры.Заполнить(СтруктураДанныхПокупатель);
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура бг_ЗаполнитьСтрокиТаблицыРасходнойНакладной(ТабличныйДокумент, Макет, ПараметрыМакета, 
	Выборка, ПараметрыИтогов)

	ВыборкаПоНоменклатуреТЧ = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуреТЧ.Следующий() Цикл
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоНоменклатуреТЧ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл	
			
			ПараметрыЗаполненияСтрокиТоваров = Новый Структура; 
			
			ПараметрыЗаполненияСтрокиТоваров.Вставить("НомерСтроки", ПараметрыИтогов.СчетСтрок);
			
			ПараметрыИтогов.СчетСтрок = ПараметрыИтогов.СчетСтрок + 1;
				
			ПараметрыЗаполненияСтрокиТоваров.Вставить(
				"ЗначениеКода", 
				ВыборкаПоСтрокамТЧ[ПараметрыМакета.ИмяКолонкиКодов]);
				
			СуммаСкидки = ВыборкаПоСтрокамТЧ.СуммаРучнойСкидки + ВыборкаПоСтрокамТЧ.СуммаАвтоматическойСкидки;	
			СуммаБезСкидки = ВыборкаПоСтрокамТЧ.Сумма - СуммаСкидки;
				
			ПредставлениеТовара = бг_ПредставлениеТовараРасходнойНакладной(ВыборкаПоСтрокамТЧ);
			
			ПредставлениеГТД = ?(
				ЗначениеЗаполнено(ВыборкаПоСтрокамТЧ.НомерГТД), 
				СтрШаблон(НСтр("ru='%1, '"), 
				СокрЛП(ВыборкаПоСтрокамТЧ.НомерГТД)), 
				"") + Символы.ПС + ВыборкаПоСтрокамТЧ.СтранаПроисхождения;
			
			ПараметрыЗаполненияСтрокиТоваров.Вставить("ПредставлениеТовара",	ПредставлениеТовара);
			ПараметрыЗаполненияСтрокиТоваров.Вставить("Цена", 					ВыборкаПоСтрокамТЧ.Цена);
			ПараметрыЗаполненияСтрокиТоваров.Вставить("СуммаБезСкидки", 		СуммаБезСкидки);
			ПараметрыЗаполненияСтрокиТоваров.Вставить("Скидка", 				СуммаСкидки);
			ПараметрыЗаполненияСтрокиТоваров.Вставить("Сумма", 					ВыборкаПоСтрокамТЧ.Сумма);
			ПараметрыЗаполненияСтрокиТоваров.Вставить("НомерГТДСтранаПроисхождения", ПредставлениеГТД);
			ПараметрыЗаполненияСтрокиТоваров.Вставить("Количество",				ВыборкаПоСтрокамТЧ.Количество);
			
			ПараметрыЗаполненияСтрокиТоваров.Вставить(
				"ПредставлениеБазовойЕдиницыИзмерения", 
				ВыборкаПоСтрокамТЧ.ПредставлениеБазовойЕдиницыИзмерения);
			
			ПараметрыЗаполненияСтрокиТоваров.Вставить(
				"КоличествоМест", 
				ВыборкаПоСтрокамТЧ.КоличествоМест);
				
			ПараметрыЗаполненияСтрокиТоваров.Вставить(
				"ЕдиницаМест", 
				ВыборкаПоСтрокамТЧ.ЕдиницаИзмеренияМестПредставление);
								
			ПараметрыИтогов.ИтогоСуммаБезСкидок = ПараметрыИтогов.ИтогоСуммаБезСкидок + СуммаБезСкидки;
			ПараметрыИтогов.ИтогоСуммаСкидок = ПараметрыИтогов.ИтогоСуммаСкидок + СуммаСкидки;
			ПараметрыИтогов.ИтогоСумма = ПараметрыИтогов.ИтогоСумма + ВыборкаПоСтрокамТЧ.Сумма;
			ПараметрыИтогов.ИтогоНДС = ПараметрыИтогов.ИтогоНДС + ВыборкаПоСтрокамТЧ.СуммаНДС;
			ПараметрыИтогов.ИтогоСуммаСНДС = ПараметрыИтогов.ИтогоСуммаСНДС + ВыборкаПоСтрокамТЧ.СуммаСНДС;
			
			бг_ВывестиОбластиТаблицыРасходнойНакладной(
				"СтрокаТаблицы", 
				ТабличныйДокумент, 
				Макет, 
				ПараметрыМакета, 
				ПараметрыЗаполненияСтрокиТоваров);
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура бг_ВывестиОбластиТаблицыРасходнойНакладной(ИмяОбласти, ТабличныйДокумент, Макет, 
	ПараметрыМакета, ПараметрыЗаполнения = Неопределено)
	
	ОбластиТаблицы = бг_ОбластиТаблицыРасходнойНакладной(ИмяОбласти, Макет, ПараметрыЗаполнения);
	
	ТабличныйДокумент.Вывести(ОбластиТаблицы.НачалоСтроки);
	
	Если ПараметрыМакета.ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(ОбластиТаблицы.КолонкаКодов);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластиТаблицы.КолонкаТоваров);
	
	Если ПараметрыМакета.ВыводитьКоличествоМест Тогда
		ТабличныйДокумент.Присоединить(ОбластиТаблицы.Мест);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластиТаблицы.Количество);
	
	ТабличныйДокумент.Присоединить(ОбластиТаблицы.Цена);
	
	Если ПараметрыМакета.ВыводитьСкидки Тогда
		ТабличныйДокумент.Присоединить(ОбластиТаблицы.Скидка);
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластиТаблицы.Сумма);
	
	ТабличныйДокумент.Присоединить(ОбластиТаблицы.ДанныеГТД);
	
КонецПроцедуры

Функция бг_ОбластиТаблицыРасходнойНакладной(ИмяОбласти, Макет, ПараметрыЗаполнения)
	
	ШаблоныИмен = бг_ШаблоныИменОбластейТаблицыРасходнойНакладной();
	
	ОбластиТаблицы = Новый Структура;
	
	Для Каждого ШаблонИмениОбласти Из ШаблоныИмен Цикл
		
		ПозицияРазделителя = СтрНайти(ШаблонИмениОбласти, "|");
		
		Если ПозицияРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КлючСтруктуры = Прав(ШаблонИмениОбласти, СтрДлина(ШаблонИмениОбласти) - ПозицияРазделителя);
		
		Область = Макет.ПолучитьОбласть(СтрШаблон(ШаблонИмениОбласти, ИмяОбласти));
		
		Если ПараметрыЗаполнения <> Неопределено Тогда
			Область.Параметры.Заполнить(ПараметрыЗаполнения);	
		КонецЕсли;
		
		ОбластиТаблицы.Вставить(КлючСтруктуры, Область);
		
	КонецЦикла;
	
	Возврат ОбластиТаблицы;
	
КонецФункции

Функция бг_ШаблоныИменОбластейТаблицыРасходнойНакладной()

	ШаблоныИмен = Новый Массив;

	ШаблоныИмен.Добавить("%1|НачалоСтроки");
	ШаблоныИмен.Добавить("%1|КолонкаКодов");
	ШаблоныИмен.Добавить("%1|КолонкаТоваров");
	ШаблоныИмен.Добавить("%1|Мест");
	ШаблоныИмен.Добавить("%1|Количество");
	ШаблоныИмен.Добавить("%1|Цена");
	ШаблоныИмен.Добавить("%1|Скидка");
	ШаблоныИмен.Добавить("%1|Сумма");
	ШаблоныИмен.Добавить("%1|ДанныеГТД");
	
	Возврат ШаблоныИмен;
	
КонецФункции

Функция бг_ИтоговыеПараметрыТаблицы()
	
	ИтоговыеПараметры = Новый Структура();
	
	ИтоговыеПараметры.Вставить("СчетСтрок", 			1);
	ИтоговыеПараметры.Вставить("ИтогоСуммаБезСкидок", 	0);
	ИтоговыеПараметры.Вставить("ИтогоСуммаСкидок", 		0);
	ИтоговыеПараметры.Вставить("ИтогоСумма", 			0);
	ИтоговыеПараметры.Вставить("ИтогоНДС", 				0);
	ИтоговыеПараметры.Вставить("ИтогоСуммаСНДС", 		0);
			
	Возврат ИтоговыеПараметры;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция бг_НайтиСоздатьПодчиненнуюРеализацию(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.бг_ДокументОснованиеПоступлениеНаСклад = &ДокументОснование
		|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	КонецЦикла;
	
	Возврат Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	
КонецФункции

Функция бг_НастройкиСозданияПодчиненнойРеализации(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бг_НастройкаСозданияРеализацийНаОснованииПоступлений.ПартнерИнициатор КАК ПартнерИнициатор,
		|	бг_НастройкаСозданияРеализацийНаОснованииПоступлений.КонтрагентИнициатор КАК КонтрагентИнициатор,
		|	бг_НастройкаСозданияРеализацийНаОснованииПоступлений.ОрганизацияПолучатель КАК ОрганизацияПолучатель
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_НастройкаСозданияРеализацийНаОснованииПоступлений КАК бг_НастройкаСозданияРеализацийНаОснованииПоступлений
		|		ПО ПриобретениеТоваровУслуг.Организация = бг_НастройкаСозданияРеализацийНаОснованииПоступлений.Инициатор
		|			И ПриобретениеТоваровУслуг.Партнер = бг_НастройкаСозданияРеализацийНаОснованииПоступлений.Получатель
		|			И (ПриобретениеТоваровУслуг.Ссылка = &ДокументОснование)
		|			И (ПриобретениеТоваровУслуг.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	бг_НастройкаСозданияРеализацийНаОснованииПоступлений.ПартнерИнициатор,
		|	бг_НастройкаСозданияРеализацийНаОснованииПоступлений.КонтрагентИнициатор,
		|	бг_НастройкаСозданияРеализацийНаОснованииПоступлений.ОрганизацияПолучатель
		|ИЗ
		|	Документ.ПоступлениеТоваровНаСклад КАК ПоступлениеТоваровНаСклад
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_НастройкаСозданияРеализацийНаОснованииПоступлений КАК бг_НастройкаСозданияРеализацийНаОснованииПоступлений
		|		ПО ПоступлениеТоваровНаСклад.Организация = бг_НастройкаСозданияРеализацийНаОснованииПоступлений.Инициатор
		|			И ПоступлениеТоваровНаСклад.Партнер = бг_НастройкаСозданияРеализацийНаОснованииПоступлений.Получатель
		|			И (ПоступлениеТоваровНаСклад.Ссылка = &ДокументОснование)";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Новый Структура("НеобходимоСоздатьДокумент, ПартнерИнициатор, КонтрагентИнициатор, ОрганизацияПолучатель",
			Истина, 
			ВыборкаДетальныеЗаписи.ПартнерИнициатор,
			ВыборкаДетальныеЗаписи.КонтрагентИнициатор,
			ВыборкаДетальныеЗаписи.ОрганизацияПолучатель);
	КонецЦикла;
	
	Возврат Новый Структура("НеобходимоСоздатьДокумент, ПартнерИнициатор, КонтрагентИнициатор, ОрганизацияПолучатель",
		Ложь, 
		Неопределено,
		Неопределено,
		Неопределено);
		
КонецФункции

Процедура бг_ЗаполнитьШапку(ДокументРеализация, ДокументОснование, НастройкиСозданияПодчиненнойРеализации) 
	
	КлючевыеПоляДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, 
		"Дата, Комментарий, ДатаВходящегоДокумента, НомерВходящегоДокумента");
	ДокументРеализация.Дата = КлючевыеПоляДокументаОснования.Дата;
	
	Если НачалоГода(ДокументРеализация.Дата) <> НачалоГода(КлючевыеПоляДокументаОснования.Дата) Тогда
		НеобходимоИзменитьНомер = Истина;
	ИначеЕсли ДокументРеализация.Организация <> НастройкиСозданияПодчиненнойРеализации.ОрганизацияПолучатель Тогда
		НеобходимоИзменитьНомер = Истина;
	Иначе
		НеобходимоИзменитьНомер = Ложь;
	КонецЕсли;
	
	ДокументРеализация.Организация = НастройкиСозданияПодчиненнойРеализации.ОрганизацияПолучатель;
	ДокументРеализация.бг_ДокументОснованиеПоступлениеНаСклад = ДокументОснование;
	ДокументРеализация.Партнер = НастройкиСозданияПодчиненнойРеализации.ПартнерИнициатор;
	ДокументРеализация.Контрагент = НастройкиСозданияПодчиненнойРеализации.КонтрагентИнициатор;
	Если Не ЗначениеЗаполнено(ДокументРеализация.Контрагент) Тогда
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ДокументРеализация.Партнер, ДокументРеализация.Контрагент);
	КонецЕсли;
	ДокументРеализация.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	
	НовыйКомментарий = СтрШаблон("вх. номер %1; вх. дата %2; %3",
		КлючевыеПоляДокументаОснования.НомерВходящегоДокумента, 
		Формат(КлючевыеПоляДокументаОснования.Дата, "ДФ=dd.MM.yyyy"),
		КлючевыеПоляДокументаОснования.Комментарий);
	ДокументРеализация.Комментарий = НовыйКомментарий;
	
	ДокументРеализация.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	ДокументРеализация.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено");
	
	Если НеобходимоИзменитьНомер Тогда
		ДокументРеализация.УстановитьНовыйНомер();
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьТовары(ДокументРеализация, ДокументОснование)
	
	ДокументРеализация.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровНаСкладТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровНаСкладТовары.Количество КАК Количество,
		|	ПоступлениеТоваровНаСкладТовары.Серия КАК Серия,
		|	ПоступлениеТоваровНаСкладТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ПоступлениеТоваровНаСкладТовары.Упаковка КАК Упаковка,
		|	ПоступлениеТоваровНаСкладТовары.КоличествоУпаковок КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ПоступлениеТоваровНаСклад.Товары КАК ПоступлениеТоваровНаСкладТовары
		|ГДЕ
		|	ПоступлениеТоваровНаСкладТовары.Ссылка = &ДокументОснование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПриобретениеТоваровУслугТовары.Номенклатура,
		|	ПриобретениеТоваровУслугТовары.Количество,
		|	ПриобретениеТоваровУслугТовары.Серия,
		|	ПриобретениеТоваровУслугТовары.СтатусУказанияСерий,
		|	ПриобретениеТоваровУслугТовары.Упаковка,
		|	ПриобретениеТоваровУслугТовары.КоличествоУпаковок
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
		|ГДЕ
		|	ПриобретениеТоваровУслугТовары.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДокументРеализация.Товары.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

Процедура бг_ЗаполнитьШапкуСчетФактуры(ДокументСчетФактура, ДокументРеализация)
	
	ДокументСчетФактура.Заполнить(ДокументРеализация.Ссылка);
	ДокументСчетФактура.Дата = ДокументРеализация.Дата;
	ДокументСчетФактура.Номер = ДокументРеализация.Номер;
	ДокументСчетФактура.ДокументОснование = ДокументРеализация.Ссылка;
	ДокументСчетФактура.Организация = ДокументРеализация.Организация;
	
	ДокументСчетФактура.ДокументыОснования.Очистить();
	
	НоваяСтрока = ДокументСчетФактура.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = ДокументРеализация.Ссылка;
	НоваяСтрока.ХозяйственнаяОперация = ДокументРеализация.ХозяйственнаяОперация;
	
	ДокументСчетФактура.Контрагент = ДокументРеализация.Контрагент;
	
КонецПроцедуры

&Вместо("ТекстОтраженияВРеглУчете")
Функция бг_ТекстОтраженияВРеглУчете()
	
	ТекстЗапроса = ПродолжитьВызов();
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() + 
	ТекстОтраженияНачисленияАкциза();
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстОтраженияНачисленияАкциза()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	СУММА(Строки.бг_СуммаАкциза) КАК Сумма,
	|	СУММА(Строки.бг_СуммаАкциза) КАК СуммаУУ,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_Акцизы) КАК СчетДт,
	|	Строки.Номенклатура.ГруппаФинансовогоУчета КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Акцизы) КАК СчетКт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	Операция.Организация.РегистрацияВНалоговомОргане КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Начисление акциза"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК Операция
	|		ПО ДокументыКОтражению.Ссылка = Операция.Ссылка 
	|			И Операция.Дата >= Операция.Организация.бг_ДатаНачалаУчетаАкцизовПоПриобретеннымЦенностям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК Строки
	|		ПО (Строки.Ссылка = Операция.Ссылка) 
	|			И Строки.бг_СуммаАкциза <> 0 
	|
	|СГРУППИРОВАТЬ ПО
	|	Операция.Ссылка,
	|	Операция.Дата,
	|	Операция.Организация,
	|	Строки.Номенклатура.ГруппаФинансовогоУчета
    |
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ //// Выручка от реализации собственного товара (Дт 62.01 :: Кт 90.01.1)
	|	Операция.Ссылка КАК Ссылка,
	|	ВЫБОР КОГДА Операция.ХозяйственнаяОперация = 
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности) ТОГДА
	|		Операция.ДатаПереходаПраваСобственности
	|	ИНАЧЕ
	|		Операция.Дата
	|	КОНЕЦ КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	0 КАК Сумма,
	|	0 КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаДт,
	|	ЕСТЬNULL(РасчетыПоЗаказам.ГруппаФинансовогоУчета, Расчеты.ГруппаФинансовогоУчета) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.ВалютаВзаиморасчетов КАК ВалютаДт,
	|	ЕСТЬNULL(РасчетыПоЗаказам.Подразделение, Расчеты.Подразделение) КАК ПодразделениеДт,
	|	ЕСТЬNULL(РасчетыПоЗаказам.НаправлениеДеятельности, Расчеты.НаправлениеДеятельности) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|
	|	ЕСТЬNULL(РасчетыПоЗаказам.Контрагент, Расчеты.Контрагент) КАК СубконтоДт1,
	|	ЕСТЬNULL(РасчетыПоЗаказам.Договор, Расчеты.Договор) КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ВЫБОР КОГДА Операция.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродажЕНВД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Строки.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	Строки.Склад КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	Операция.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|
	|	Строки.Номенклатура.ГруппаФинансовогоУчета КАК СубконтоКт1,
	|	Строки.СтавкаНДС.ПеречислениеСтавкаНДС КАК СубконтоКт2,
	|	Строки.Номенклатура КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	- Строки.бг_СуммаАкциза КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Выручка от реализации собственного товара"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|		И Операция.Дата >= Операция.Организация.бг_ДатаНачалаУчетаАкцизовПоПриобретеннымЦенностям
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Строки
	|	ПО
	|		(Строки.Ссылка = Операция.Ссылка)
	|		И Строки.бг_СуммаАкциза <> 0 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТРасчетыСКлиентамиПоЗаказам КАК РасчетыПоЗаказам
	|	ПО 
	|		Операция.Ссылка = РасчетыПоЗаказам.Ссылка
	|		И Строки.ЗаказКлиента = РасчетыПоЗаказам.Заказ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТРасчетыСКлиентамиПоЗаказам КАК Расчеты
	|	ПО 
	|		Операция.Ссылка = Расчеты.Ссылка
	|		И Расчеты.Заказ = НЕОПРЕДЕЛЕНО
	|		И Расчеты.СуммаРегл <> 0
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = ВЫБОР КОГДА Операция.ХозяйственнаяОперация = 
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности) ТОГДА
	|			Операция.ДатаПереходаПраваСобственности ИНАЧЕ НАЧАЛОПЕРИОДА(Операция.Дата, День) КОНЕЦ
	|	
	|ГДЕ
	|	(Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			И Операция.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
	|		ИЛИ Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|			И Операция.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
	|		ИЛИ Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|			И Операция.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено))
	|";
	
	Возврат ТекстЗапроса;

КонецФункции 

// Возвращает признак, того что по реализации требуется отправка DESADV в SAP.
//
// Параметры:
//  Реализация - ДокументСсылка.РеализацияТоваровУслуг - реализация товаров и услуг. 
//
// Возвращаемое значение:
//  Булево - признак, того что по реализации требуется отправка DESADV .
//
Функция бг_ПоРеализацииТребуетсяВыгрузкаDESADV(Реализация)
	
	Если Не бг_ЭтоРеализацияКонтрагентуSAP(Реализация) Тогда
		// DESADV выгружаем в SAP только для контрагентов Винлаб. 
		Возврат Ложь;
	КонецЕсли;
	
	// DESADV выгружаем в SAP только один раз, повторно не выгружаем. 
	ДатОтправкиDESADV = бг_ДатОтправкиDESADV(Реализация);
	Возврат Не ЗначениеЗаполнено(ДатОтправкиDESADV);
	
КонецФункции

// Возвращает ТТН исходящую по реализации в неотмененном статусе.
//
// Параметры:
//  Реализация           - ДокументСсылка.РеализацияТоваровУслуг - ссылка на реализацию товаров и услуг.
//
// Возвращаемое значение:
//  ТТНИсходящаяЕГАИС    - ДокументСсылка.ТТНИсходящаяЕГАИС - ссылка на ТТН исходящую.
//
Функция бг_ТТНИсходящаяЕГАИСНеОтмененная(Реализация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Реализация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос; 
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка КАК ТТНИсходящаяЕГАИС
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ТТНИсходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ДокументОснование = &Реализация
	|	И НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|	И НЕ ЕСТЬNULL(СтатусыДокументовЕГАИС.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ПустаяСсылка)) В (&СтатусыОтменыЕГАИС)";
	
	Запрос.УстановитьПараметр("Реализация", Реализация);
	Запрос.УстановитьПараметр("СтатусыОтменыЕГАИС", Документы.ТТНИсходящаяЕГАИС.бг_СтатусыОтменыЕГАИС());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТТНИсходящаяЕГАИС = Документы.ТТНИсходящаяЕГАИС.ПустаяСсылка();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ТТНИсходящаяЕГАИС = Выборка.ТТНИсходящаяЕГАИС;
	КонецЕсли;
	
	Возврат ТТНИсходящаяЕГАИС; 
	
КонецФункции

#КонецОбласти
