#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	бг_ВыполнитьКонтрольИзмененийДокумента(Отказ);
	
	Если Не Отказ Тогда
		бг_УстановитьДатыДокумента(Отказ, РежимЗаписи);
	КонецЕсли;
	
	Если ЭтоНовый() И Не Отказ Тогда
		бг_УстановитьПризнакОбособленногоОбеспечения();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Отказ Тогда
		бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ);
	КонецЕсли;
КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	Если Не Отказ Тогда
		// TODO рефакторинг https://tracker.yandex.ru/BG-2996
		бг_СерииНоменклатуры.АктуализироватьНоменклатуруВСерияхТаблицы(ВыходныеИзделия);
		бг_СерииНоменклатуры.ПерезаполнитьРеквизитыСерийГотовойПродукции(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&Вместо("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	ТаблицаПродукция = ВыходныеИзделия.Выгрузить(, "Номенклатура");
	Если РегистрыСведений.бг_УстаревшаяНоменклатура.ЕстьУстаревшаяНоменклатураВТаблице(ТаблицаПродукция, "Номенклатура", Дата) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПродолжитьВызов(Отказ, РежимПроведения);
	бг_СформироватьДвиженияМарок(Отказ);
	бг_ДобавитьДокументДляОтложеннойОбработки(Отказ);
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	бг_АкцизПоПриобретеннымЦенностямМатериалы.Очистить();
	бг_АкцизПоПриобретеннымЦенностямПродукция.Очистить();
КонецПроцедуры

&Перед("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	бг_ДатаОтгрузкиВремя = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВремяСписанияПродукцииВПроизводство");
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	бг_ПроверитьСтатьюКалькуляции(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_СформироватьДвиженияМарок(Отказ)
	СтатусыДвиженияМарок = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидНоменклатурыФСМ", бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка"));
	Запрос.УстановитьПараметр("СтатусМаркиПропущена", СтатусыДвиженияМарок.МаркаПропущена);
	
	ПериодДвиженийМарок = ДатаПроизводства + 1;
	Запрос.УстановитьПараметр("ПериодДвиженийМарок", ПериодДвиженийМарок);
	
	Документы.ЭтапПроизводства2_2.бг_ПодготовитьТаблицуВыпускаемойПродукции(Запрос);
	Документы.ЭтапПроизводства2_2.бг_ПодготовитьДанныеДвиженияМарок(Запрос);
	
	Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		бг_ВыполнитьКонтрольПодбораМарок(Запрос, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втДвижениеМарок.Период КАК Период,
	|	втДвижениеМарок.Серия КАК Серия,
	|	втДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|	втДвижениеМарок.КодУпаковки КАК КодУпаковки,
	|	&СтатусМарки КАК СтатусМарки
	|ИЗ
	|	втДвижениеМарок КАК втДвижениеМарок
	|ГДЕ
	|	втДвижениеМарок.ПроизводственнаяЛинияСоответствуетДокументу";
	
	СтатусМарки = ?(Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен,
				СтатусыДвиженияМарок.ЭтапПроизводстваЗавершен, СтатусыДвиженияМарок.ОформленВыпуск);
	Запрос.УстановитьПараметр("СтатусМарки", СтатусМарки);
	
	Результат = Запрос.Выполнить();
	ТаблицаДвижениеМарок = Результат.Выгрузить();
	
	бг_ЗафиксироватьПропущенныеМарки(ТаблицаДвижениеМарок, Запрос, СтатусыДвиженияМарок, ПериодДвиженийМарок);
	
	Движения.бг_ДвижениеМарок.Записывать = Истина;
	Движения.бг_ДвижениеМарок.Загрузить(ТаблицаДвижениеМарок);
КонецПроцедуры

Процедура бг_ВыполнитьКонтрольПодбораМарок(Запрос, Отказ)
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркируемаяПродукция.ЭтапПроизводства КАК ЭтапПроизводства,
	|	МаркируемаяПродукция.Номенклатура КАК Номенклатура,
	|	МаркируемаяПродукция.Количество КАК КоличествоВыпуск,
	|	0 КАК КоличествоПодобраныМарки
	|ПОМЕСТИТЬ втТаблицаКонтроль
	|ИЗ
	|	втМаркируемаяПродукция КАК МаркируемаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДвижениеМарок.ЭтапПроизводства,
	|	втДвижениеМарок.Номенклатура,
	|	0,
	|	КОЛИЧЕСТВО(втДвижениеМарок.ГУИДМарки)
	|ИЗ
	|	втДвижениеМарок КАК втДвижениеМарок
	|ГДЕ
	|	втДвижениеМарок.ПроизводственнаяЛинияСоответствуетДокументу
	|
	|СГРУППИРОВАТЬ ПО
	|	втДвижениеМарок.ЭтапПроизводства,
	|	втДвижениеМарок.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаКонтроль.ЭтапПроизводства КАК ЭтапПроизводства,
	|	втТаблицаКонтроль.Номенклатура КАК Номенклатура,
	|	СУММА(втТаблицаКонтроль.КоличествоВыпуск) КАК КоличествоВыпуск,
	|	СУММА(втТаблицаКонтроль.КоличествоПодобраныМарки) КАК КоличествоПодобраныМарки
	|ИЗ
	|	втТаблицаКонтроль КАК втТаблицаКонтроль
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаКонтроль.ЭтапПроизводства,
	|	втТаблицаКонтроль.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(втТаблицаКонтроль.КоличествоВыпуск) <> СУММА(втТаблицаКонтроль.КоличествоПодобраныМарки)";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ШаблонСообщение = НСтр("ru = 'Различается количество произведенной продукции и количество по данным СПУМ.
									|%1 произведено: %2, произведено по данным СПУМ: %3'");
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщение, Выборка.Номенклатура, Выборка.КоличествоВыпуск, Выборка.КоличествоПодобраныМарки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЦикла;
КонецПроцедуры

Процедура бг_ЗафиксироватьПропущенныеМарки(ТаблицаДвижениеМарок, Запрос, СтатусыДвиженияМарок, ПериодДвиженийМарок)
	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ЭтапПроизводства2_2.бг_ПодготовитьТаблицуПропущенныхМарок(Запрос);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПропущенныеМарки.Серия КАК Серия,
	|	ПропущенныеМарки.НачальныйНомерДиапазона КАК НачальныйНомерДиапазона,
	|	ПропущенныеМарки.КонечныйНомерДиапазона КАК КонечныйНомерДиапазона,
	|	ПропущенныеМарки.НомерМарки КАК НомерМарки,
	|	ПропущенныеМарки.СледующийНомерМарки КАК СледующийНомерМарки
	|ИЗ
	|	ПропущенныеМарки КАК ПропущенныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДиапазоныМаркировки.Серия КАК Серия,
	|	ДиапазоныМаркировки.НачалоРулона КАК НачалоРулона,
	|	ДиапазоныМаркировки.КонецРулона КАК КонецРулона,
	|	ДиапазоныМаркировки.НачальныйНомерМаркировки КАК НачальныйНомерМаркировки,
	|	ДиапазоныМаркировки.КонечныйНомерМаркировки КАК КонечныйНомерМаркировки
	|ИЗ
	|	ДиапазоныМаркировки КАК ДиапазоныМаркировки";
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПропущенныеМарки    = Результат[0].Выбрать();
	ВыборкаДиапазоныМаркировки = Результат[1].Выбрать();
	
	ТаблицаПропущенныеМарки = Новый ТаблицаЗначений;
	ТаблицаПропущенныеМарки.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаПропущенныеМарки.Колонки.Добавить("НомерМарки", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	
	Пока ВыборкаПропущенныеМарки.Следующий() Цикл
		НомерМарки = ВыборкаПропущенныеМарки.НомерМарки;
		Пока НомерМарки < ВыборкаПропущенныеМарки.СледующийНомерМарки Цикл
			бг_ДобавитьПропущеннуюМаркуВТаблицу(ТаблицаПропущенныеМарки, НомерМарки, ВыборкаПропущенныеМарки.Серия);
			
			НомерМарки = НомерМарки + 1;
		КонецЦикла;
	КонецЦикла;
	
	МинимальныйОстатокФСМВРулоне = бг_КонстантыПовтИсп.ЗначениеКонстанты("МинимальныйОстатокФСМВРулоне");
	
	Пока ВыборкаДиапазоныМаркировки.Следующий() Цикл
		НомерМарки = ВыборкаДиапазоныМаркировки.НачалоРулона;
		
		// Пропущенные марки в начале рулона
		Пока НомерМарки < ВыборкаДиапазоныМаркировки.НачальныйНомерМаркировки Цикл
			бг_ДобавитьПропущеннуюМаркуВТаблицу(ТаблицаПропущенныеМарки, НомерМарки, ВыборкаДиапазоныМаркировки.Серия);
			
			НомерМарки = НомерМарки + 1;
		КонецЦикла;
		
		// Остаток марок в рулоне менее допустимого
		ОстатокМарокВРулоне = ВыборкаДиапазоныМаркировки.КонецРулона - ВыборкаДиапазоныМаркировки.КонечныйНомерМаркировки;
		Если ЗначениеЗаполнено(МинимальныйОстатокФСМВРулоне)
			И ОстатокМарокВРулоне > 0
			И ОстатокМарокВРулоне < МинимальныйОстатокФСМВРулоне Тогда
			
			НомерМарки = ВыборкаДиапазоныМаркировки.КонечныйНомерМаркировки + 1;
			
			Пока НомерМарки <= ВыборкаДиапазоныМаркировки.КонецРулона Цикл
				бг_ДобавитьПропущеннуюМаркуВТаблицу(ТаблицаПропущенныеМарки, НомерМарки, ВыборкаДиапазоныМаркировки.Серия);
			
				НомерМарки = НомерМарки + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	бг_ЗаписатьПропущенныеМарки(ТаблицаДвижениеМарок, ПериодДвиженийМарок, ТаблицаПропущенныеМарки, СтатусыДвиженияМарок);
КонецПроцедуры

Процедура бг_ДобавитьПропущеннуюМаркуВТаблицу(ТаблицаПропущенныеМарки, НомерМарки, Серия)
	СтрокаПропущеннаяМарка = ТаблицаПропущенныеМарки.Добавить();
	СтрокаПропущеннаяМарка.НомерМарки = НомерМарки;
	СтрокаПропущеннаяМарка.Серия = Серия;
КонецПроцедуры

Процедура бг_ЗаписатьПропущенныеМарки(ТаблицаДвижениеМарок, Период, ТаблицаПропущенныеМарки, СтатусыДвиженияМарок)
	Если ТаблицаПропущенныеМарки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПропущенныеМарки.Серия КАК Серия,
	|	ПропущенныеМарки.НомерМарки КАК НомерМарки
	|ПОМЕСТИТЬ ПропущенныеМарки
	|ИЗ
	|	&ПропущенныеМарки КАК ПропущенныеМарки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|	ИдентификаторыМарок.НомерМарки КАК НомерМарки
	|ПОМЕСТИТЬ ИдентификаторыМарокТекущийДокумент
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК ИдентификаторыМарок
	|		ПО (ДвижениеМарок.Регистратор = &Ссылка)
	|			И (ДвижениеМарок.СтатусМарки = &СтатусМаркиПропущена)
	|			И ДвижениеМарок.ГУИДМарки = ИдентификаторыМарок.ГУИДМарки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПропущенныеМарки.Серия КАК Серия,
	|	ПропущенныеМарки.НомерМарки КАК НомерМарки,
	|	ЕСТЬNULL(ИдентификаторыМарокТекущийДокумент.ГУИДМарки, НЕОПРЕДЕЛЕНО) КАК ГУИДМарки,
	|	СерииНоменклатуры.бг_ОрганизацияЕГАИСВладелец КАК ОрганизацияЕГАИС
	|ИЗ
	|	ПропущенныеМарки КАК ПропущенныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИдентификаторыМарокТекущийДокумент КАК ИдентификаторыМарокТекущийДокумент
	|		ПО ПропущенныеМарки.НомерМарки = ИдентификаторыМарокТекущийДокумент.НомерМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК ИдентификаторыМарок
	|		ПО ПропущенныеМарки.НомерМарки = ИдентификаторыМарок.НомерМарки
	|			И ПропущенныеМарки.Серия = ИдентификаторыМарок.СерияФСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ДвижениеМарок КАК ДвижениеМарок
	|		ПО (ИдентификаторыМарок.ГУИДМарки = ДвижениеМарок.ГУИДМарки)
	|			И (ДвижениеМарок.СтатусМарки = &СтатусМаркиВключенаВЭтап)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ПропущенныеМарки.Серия = СерииНоменклатуры.Ссылка
	|ГДЕ
	|	ДвижениеМарок.ГУИДМарки ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ПропущенныеМарки", ТаблицаПропущенныеМарки);
	Запрос.УстановитьПараметр("СтатусМаркиПропущена", СтатусыДвиженияМарок.МаркаПропущена);
	Запрос.УстановитьПараметр("СтатусМаркиВключенаВЭтап", СтатусыДвиженияМарок.ЭтапПроизводстваЗавершен);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ИдентификаторМарки = ?(Выборка.ГУИДМарки = Неопределено, Новый УникальныйИдентификатор(), Выборка.ГУИДМарки);
		
		НоваяЗаписьДвижениеМарок = ТаблицаДвижениеМарок.Добавить();
		НоваяЗаписьДвижениеМарок.Период      = Период;
		НоваяЗаписьДвижениеМарок.ГУИДМарки   = ИдентификаторМарки;
		НоваяЗаписьДвижениеМарок.СтатусМарки = СтатусыДвиженияМарок.МаркаПропущена;
		
		РегистрыСведений.бг_ИдентификаторыМарок.ЗаписатьИдентификаторМарки(
			ИдентификаторМарки, 
			Выборка.НомерМарки, 
			Формат(Выборка.НомерМарки, "ЧГ=0"), 
			Выборка.ОрганизацияЕГАИС, 
			Выборка.Серия);
	КонецЦикла;
КонецПроцедуры

Процедура бг_ДобавитьДокументДляОтложеннойОбработки(Отказ)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(Ссылка, 
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьДокументы);
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(Ссылка, 
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОбработатьАкцизныеМарки);
	КонецЕсли;
КонецПроцедуры

Процедура бг_УстановитьДатыДокумента(Отказ, РежимЗаписи)
	Если Отказ Или Не РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		Возврат;
	КонецЕсли;
	Если ВыходныеИзделия.Количество() > 0 
		И ЗначениеЗаполнено(ВыходныеИзделия[0].ДатаПроизводства) Тогда
		ДатаПроизводства = ВыходныеИзделия[0].ДатаПроизводства;
		ДатаОтгрузки = ДатаПроизводства;
		НеОтгружатьЧастями = Истина;
		Для каждого СтрокаДокумента Из ОбеспечениеМатериаламиИРаботами Цикл
			СтрокаДокумента.ДатаОтгрузки = ДатаПроизводства;
		КонецЦикла;
		ДатаРасхода = ДатаПроизводства;
		РасходОднойДатой = Истина;
		Для каждого СтрокаДокумента Из РасходМатериаловИРабот Цикл
			СтрокаДокумента.ДатаРасхода = ДатаПроизводства;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура бг_ВыполнитьКонтрольИзмененийДокумента(Отказ)
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусЭтапаПроизводства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
	Если СтатусЭтапаПроизводства <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("бг_КорректировкаЗавершенныхЭтаповПроизводстваБезКонтроляИзменений", , Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.битОтчетОПроизводствеЕГАИС) Тогда
		Если бг_ЭтапПроизводства2_2.ОтправленОтчетВЕГАИС(Ссылка) Тогда
			бг_ЭтапПроизводства2_2.ВыполнитьКонтрольИзмененияВыходныхИзделий(ЭтотОбъект, Отказ);
			бг_ЭтапПроизводства2_2.ВыполнитьКонтрольИзмененияОбеспеченияМатериалами(ЭтотОбъект, Отказ);
		КонецЕсли;
	ИначеЕсли Пользователи.РолиДоступны("бг_КорректировкаСписанияМатериаловЗавершенныхЭтаповПроизводства", , Ложь) Тогда
		бг_ЭтапПроизводства2_2.ВыполнитьКонтрольИзмененияВыходныхИзделий(ЭтотОбъект, Отказ);
		
		КонролируемыеВидыНоменклатуры = Новый Массив;
		КонролируемыеВидыНоменклатуры.Добавить(бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка"));
		КонролируемыеВидыНоменклатуры.Добавить(бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидНоменклатурыСпирт"));
		бг_ЭтапПроизводства2_2.ВыполнитьКонтрольИзмененияОбеспеченияМатериалами(ЭтотОбъект, Отказ, КонролируемыеВидыНоменклатуры);
	Иначе
		ТекстСообщения = НСтр("ru = 'Редактирование документа запрещено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
КонецПроцедуры

Процедура бг_УстановитьПризнакОбособленногоОбеспечения()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|	И Номенклатура.ВидНоменклатуры В(&ВидыНоменклатуры)";
	Запрос.УстановитьПараметр("Номенклатура", ОбеспечениеМатериаламиИРаботами.ВыгрузитьКолонку("Номенклатура"));
	
	ВидыНоменклатурыОбособленноеОбеспечение = Новый Массив;
	ВидыНоменклатурыОбособленноеОбеспечение.Добавить(бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка"));
	Запрос.УстановитьПараметр("ВидыНоменклатуры", ВидыНоменклатурыОбособленноеОбеспечение);
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Отбор = Новый Структура("Номенклатура", Выборка.Номенклатура);
		СтрокиОбеспечение = ОбеспечениеМатериаламиИРаботами.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОбеспечение Из СтрокиОбеспечение Цикл
			СтрокаОбеспечение.Обособленно = Истина;
			СтрокаОбеспечение.Назначение  = НазначениеМатериалы;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#Область АкцизыПоПриобретеннымЦенностям

Процедура бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ) Экспорт
	// В рамках одного этапа производства должен выпускаться один вид продукции с одной серией
	// Иные сценарии не поддерживаются
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЭтапПроизводства2_2Локализация.бг_ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыСостоянияСписываемогоСырья = ЭтапПроизводства2_2Локализация.бг_СтатусыСостоянияСписываемогоСырья();
	
	бг_АкцизМатериалы = бг_АкцизПоПриобретеннымЦенностямМатериалы.ВыгрузитьКолонки();
	бг_АкцизПродукция = бг_АкцизПоПриобретеннымЦенностямПродукция.ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",           Ссылка);
	Если ДополнительныеСвойства.Свойство("бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям")
		И ДополнительныеСвойства.бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям = Истина Тогда
		ДатаОстатков = Новый Граница(КонецДня(ВыходныеИзделия[0].ДатаПроизводства), ВидГраницы.Включая);
	Иначе
		ДатаОстатков = '00010101';
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатков",     ДатаОстатков);
	Запрос.УстановитьПараметр("Товары",           РасходМатериаловИРабот.Выгрузить(, "НомерСтроки, Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("ВыходныеИзделия",  ВыходныеИзделия.Выгрузить(Новый Структура("Отменено", Ложь), "Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("СтатусыАкциза",    СтатусыСостоянияСписываемогоСырья.СтатусыАкциза);
	Запрос.УстановитьПараметр("СостоянияСырья",   СтатусыСостоянияСписываемогоСырья.СостоянияСырья);
	Запрос.УстановитьПараметр("ТипМестаХранения", Перечисления.бг_ТипыМестХраненияПодакцизнойПродукции.Подразделение);
	
	ТочностьУчетаМатериалов = РегистрыНакопления.бг_АкцизПоПриобретеннымЦенностям.ТочностьУчетаПодакцизныхМатериалов();
	Запрос.УстановитьПараметр("ТочностьУчета", ТочностьУчетаМатериалов);
	
	// Списание акциза по материалам
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаТаблицаМатериалы());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаПродукция());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиАкцизовПоМатериалам());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаСписаниеАкцизовПоМатериалам());
	МассивТекстов.Добавить(ЭтапПроизводства2_2Локализация.бг_ТекстЗапросаАкцизыСписаниеМатериалов());
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Результат = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[Результат.ВГраница() - 1].Выгрузить(), бг_АкцизМатериалы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[Результат.ВГраница()].Выгрузить(), бг_АкцизПродукция);
	
	// Списание акцизов по продукции (выпущенная спиртосодержащая смесь)
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаТаблицаМатериалы());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаПродукция());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиАкцизовПоПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиВыпущеннойПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаРасчетСписанияАкцизовПоПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаСписаниеВыпускПродукции());
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Результат = Запрос.ВыполнитьПакет();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[Результат.ВГраница() - 1].Выгрузить(), бг_АкцизМатериалы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат[Результат.ВГраница()].Выгрузить(), бг_АкцизПродукция);
	
	бг_АкцизПоПриобретеннымЦенностямМатериалы.Загрузить(бг_АкцизМатериалы);
	бг_АкцизПоПриобретеннымЦенностямПродукция.Загрузить(бг_АкцизПродукция);
КонецПроцедуры

#КонецОбласти

Процедура бг_ПроверитьСтатьюКалькуляции(Отказ)
	
	бг_Номенклатура.ПроверитьСтатьюКалькуляцииВТЧ(ЭтотОбъект,
		"РасходМатериаловИРабот,ОбеспечениеМатериаламиИРаботами", Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
