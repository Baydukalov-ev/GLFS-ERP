#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
		ДокументСсылка,
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче);
	
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	
	СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВУТМ;
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	
	СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Неопределено;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
			
		Статусы = СтатусыБазовыйПроцесс;
			
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
			
		Статусы = СтатусыБазовыйПроцесс;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Перечисления.ВидыДокументовЕГАИС.бг_ДобавлениеНовойПродукцииЕГАИС, ДокументСсылка);
	
	Возврат Таблица;
	
КонецФункции

Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
		|ИЗ
		|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битДобавлениеНовойПродукцииЕГАИС КАК ДобавлениеНовойПродукцииЕГАИС
		|		ПО СтатусыДокументовЕГАИС.Документ = ДобавлениеНовойПродукцииЕГАИС.Ссылка
		|ГДЕ
		|	ДобавлениеНовойПродукцииЕГАИС.Ссылка ЕСТЬ НЕ NULL 
		|	И НЕ ДобавлениеНовойПродукцииЕГАИС.ПометкаУдаления
		|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
		|	И (ДобавлениеНовойПродукцииЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
		|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
		|	И (ДобавлениеНовойПродукцииЕГАИС.Ответственный = &Ответственный
		|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битДобавлениеНовойПродукцииЕГАИС КАК ДобавлениеНовойПродукцииЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ДобавлениеНовойПродукцииЕГАИС.Ссылка
	|ГДЕ
	|	ДобавлениеНовойПродукцииЕГАИС.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ ДобавлениеНовойПродукцииЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ДобавлениеНовойПродукцииЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ДобавлениеНовойПродукцииЕГАИС.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат СообщениеЗапросаДобавленияПродукцииXML(ДокументСсылка);
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

Функция СообщениеЗапросаДобавленияПродукцииXML(ДокументСсылка)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_ДобавлениеНовойПродукцииЕГАИС;

	ДанныеДляЗапросаДобавленияПродукции = ДанныеДляЗапросаДобавленияПродукции(ДокументСсылка);
	
	Если ДанныеДляЗапросаДобавленияПродукции.Организация = Неопределено Тогда
		Возврат 
			СообщениеЗапросаДобавленияПродукцииXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Нет данных для выгрузки.';
					|en = 'Нет данных для выгрузки.'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗапросаДобавленияПродукции.ОрганизацияЕГАИС) Тогда
		Возврат 
			СообщениеЗапросаДобавленияПродукцииXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Не сопоставлена организация ЕГАИС.';
					|en = 'Не сопоставлена организация ЕГАИС.'"));
	КонецЕсли;
	
	ОрганизацияЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляЗапросаДобавленияПродукции.ОрганизацияЕГАИС, "Код, ФорматОбмена");
	ИдентификаторФСРАР = ОрганизацияЕГАИС.Код;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(ОрганизацияЕГАИС.ФорматОбмена);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено Или ИмяТипа = Неопределено Тогда
		Возврат 
			СообщениеЗапросаДобавленияПродукцииXMLСОшибкой(
				Операция, 
				ДокументСсылка,
				СтрШаблон(
					НСтр(
						"ru = 'Операция не поддерживается в версии формата обмена: %1.';
						|en = 'Операция не поддерживается в версии формата обмена: %1.'"),
					ФорматОбмена));
	КонецЕсли;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка); //НомерВерсии
	
	RequestAddProducts = RequestAddProducts(
			ПространствоИмен, 
			Строка(ДокументСсылка.УникальныйИдентификатор()),
			ДанныеДляЗапросаДобавленияПродукции,
			ИдентификаторФСРАР, 
			СообщениеXML);
		
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(RequestAddProducts, ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ДанныеДляЗапросаДобавленияПродукции.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);
	
КонецФункции

Функция ДанныеДляЗапросаДобавленияПродукции(ДокументСсылка)
	
	ПоляЗаголовка = Новый Структура(
		"Номер, 
		|Дата, 
		|Организация, 
		|ОрганизацияЕГАИС,
		|Объем, 
		|Крепость, 
		|КрепостьМин, 
		|КрепостьМакс, 
		|Производитель, 
		|НаименованиеПолное, 
		|Наименование, 
		|ВидПродукции, 
		|ТипПродукции, 
		|РегистрационныйКодФРАП, 
		|Бренд, 
		|КодТипаУпаковки, 
		|Комментарий");
	
	ДанныеДляЗапросаДобавленияПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ПоляЗаголовка);
	ДанныеДляЗапросаДобавленияПродукции.Номер       = СокрЛП(ДанныеДляЗапросаДобавленияПродукции.Номер);		
	ДанныеДляЗапросаДобавленияПродукции.Комментарий = СокрЛП(ДанныеДляЗапросаДобавленияПродукции.Комментарий);		
	
	Возврат ДанныеДляЗапросаДобавленияПродукции
	
КонецФункции

Функция СообщениеЗапросаДобавленияПродукцииXMLСОшибкой(Операция, ДокументСсылка, ТекстОшибки)
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);	
	
КонецФункции

Функция RequestAddProducts(ПространствоИмен, Identity, ДанныеДляЗапросаДобавленияПродукции, ИдентификаторФСРАР, СообщениеXML)
	
	RequestAddProducts = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "RequestAddProducts");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(RequestAddProducts, "RequestNumber", ДанныеДляЗапросаДобавленияПродукции.Номер, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(RequestAddProducts, "RequestDate", ДанныеДляЗапросаДобавленияПродукции.Дата, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(RequestAddProducts, "ClientId", ИдентификаторФСРАР, СообщениеXML);
	
	RequestAddProducts.Content = Content(ПространствоИмен, RequestAddProducts, ДанныеДляЗапросаДобавленияПродукции, СообщениеXML);
	
	Возврат RequestAddProducts 

КонецФункции

Функция Content(ПространствоИмен, RequestAddProducts, ДанныеДляЗапросаДобавленияПродукции, СообщениеXML)
	
	Content = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", RequestAddProducts);
	
	ПроизводительЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляЗапросаДобавленияПродукции.Производитель, "Код, КодСтраны");
	ДанныеВидаПродукции = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляЗапросаДобавленияПродукции.ВидПродукции, "Код, ВидЛицензии");
	
	ПеречислениеВидыЛицензий = Перечисления.ВидыЛицензийАлкогольнойПродукции;
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(ПеречислениеВидыЛицензий.АлкогольнаяПродукция               , "АП");
	ТипыАП.Вставить(ПеречислениеВидыЛицензий.Пиво                               , "АП");
	ТипыАП.Вставить(ПеречислениеВидыЛицензий.СпиртосодержащаяНеПищеваяПродукция , "ССНП");
	ТипыАП.Вставить(ПеречислениеВидыЛицензий.СпиртосодержащаяПищеваяПродукция   , "ССПП");
	ТипыАП.Вставить(ПеречислениеВидыЛицензий.Спирт							    , "ЭС");
	
	ТипыПродукции = Новый Соответствие;
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.ПустаяСсылка()   , 0);
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Упакованная      , 0);
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Неупакованная    , 1);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "Producer",        ПроизводительЕГАИС.Код,                                          СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "Type",            ТипыАП[ДанныеВидаПродукции.ВидЛицензии],                         СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "VidCode",         ДанныеВидаПродукции.Код,                                         СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "CountryCode",     Прав("000" + Строка(ПроизводительЕГАИС.КодСтраны), 3),           СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "FullName",        ДанныеДляЗапросаДобавленияПродукции.НаименованиеПолное,          СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "ShortName",       ДанныеДляЗапросаДобавленияПродукции.Наименование,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "Unpacked_Flag",   ТипыПродукции[ДанныеДляЗапросаДобавленияПродукции.ТипПродукции], СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "Capacity",        ДанныеДляЗапросаДобавленияПродукции.Объем,                       СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "PERCENT_ALC",     ДанныеДляЗапросаДобавленияПродукции.Крепость,                    СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "PERCENT_ALC_min", ДанныеДляЗапросаДобавленияПродукции.КрепостьМин,                 СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "PERCENT_ALC_max", ДанныеДляЗапросаДобавленияПродукции.КрепостьМакс,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "FRAPID",          "-",                                                             СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "Brand",           ДанныеДляЗапросаДобавленияПродукции.Бренд,                       СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Content, "PackageType",     ДанныеДляЗапросаДобавленияПродукции.КодТипаУпаковки,             СообщениеXML);
	
	Возврат Content

КонецФункции

#КонецОбласти

#Область ОбработкаПолученияКвитанцииСКодом

Процедура ОбработатьПолучениеКвитанции(ДокументОбъект, ДанныеДокумента) Экспорт
	
	ДокументОбъект.КодПродукции = ПолучитьКодПродукции(ДанныеДокумента.Объект.OperationResult.OperationComment);
	
	Если ЗначениеЗаполнено(ДокументОбъект.КодПродукции) Тогда
		СоздатьОбновитьАлкогольнуюПродукциюЕГАИС(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКодПродукции(OperationComment)
	
	НачалоКодаПродукции = СтрНайти(OperationComment, ": ");
	
	Если НачалоКодаПродукции = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	КодПродукции = Прав(OperationComment, СтрДлина(OperationComment) - НачалоКодаПродукции - 1);
	
	Возврат КодПродукции
	
КонецФункции

Процедура СоздатьОбновитьАлкогольнуюПродукциюЕГАИС(ДокументОбъект)
	
	РезультатПоиска = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.НайтиПоКоду(ДокументОбъект.КодПродукции);
	Если Не ЗначениеЗаполнено(РезультатПоиска) Тогда
		АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
	Иначе
		АлкогольнаяПродукция = РезультатПоиска.ПолучитьОбъект();
	КонецЕсли;
	
	АлкогольнаяПродукция.Код = ДокументОбъект.КодПродукции;
	АлкогольнаяПродукция.Наименование = ДокументОбъект.Наименование;
	АлкогольнаяПродукция.НаименованиеПолное = ДокументОбъект.НаименованиеПолное;
	АлкогольнаяПродукция.Объем = ДокументОбъект.Объем;
	АлкогольнаяПродукция.Крепость = ДокументОбъект.Крепость;
	АлкогольнаяПродукция.ВидПродукции = ДокументОбъект.ВидПродукции;
	АлкогольнаяПродукция.Производитель = ДокументОбъект.Производитель;
	АлкогольнаяПродукция.ТипПродукции = ДокументОбъект.ТипПродукции;
	
	АлкогольнаяПродукция.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
