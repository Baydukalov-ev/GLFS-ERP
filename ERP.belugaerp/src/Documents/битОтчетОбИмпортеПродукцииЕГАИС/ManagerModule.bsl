#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОбИмпорте Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
	
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОбИмпорте Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПроведенЕГАИС;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Неопределено;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведения = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведения.Принят           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.Обрабатывается   = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведения.ОтменаПроведения = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.ОшибкаПроведения = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.Ошибка           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведения.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено 
		И ДополнительныеПараметры.Свойство("ОперацияКвитанции") 
		И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС 
		И ТекущийСтатус(ДокументСсылка) = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден Тогда
		
		ОбрабатыватьКакФинальный = Истина;
	Иначе
		ОбрабатыватьКакФинальный = Ложь;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве ИЛИ ОбрабатыватьКакФинальный Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
		ДокументСсылка,
		Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
		Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОбИмпорте Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОбИмпорте Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			ОбработатьРегистрациюКОформлению(ДокументСсылка);
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС, ДокументСсылка);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОбИмпорте, ДокументСсылка);
	
	Возврат Таблица;
	
КонецФункции

Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	ПриИзмененииСтатусаДокументаОбработатьСправки1(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

Функция СтатусыДвижений()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден);
	
	Возврат Результат;
	
КонецФункции

Функция ТекущийСтатус(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Статус КАК СтатусОбработки
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатусОбработки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьРегистрациюКОформлению(ДокументСсылка)
	
	НаборЗаписей = РегистрыСведений.СтатусыОформленияДокументовЕГАИС.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Основание.Установить(ДокументСсылка.ДокументОснование);
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		Если  Запись.СтатусОформления <> Перечисления.СтатусыОформленияДокументовЕГАИС.НеОформлено Тогда
			Запись.Документ = Документы.битОтчетОбИмпортеПродукцииЕГАИС.ПустаяСсылка();
			Запись.СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.НеОформлено;
		КонецЕсли;
	КонецЦикла; 
	
	НаборЗаписей.Записать(); 
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОформите() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Таблица.Основание) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Классификатор
	|		ПО (Классификатор.Контрагент = Таблица.Контрагент)
	|ГДЕ
	|	Таблица.Документ = ЗНАЧЕНИЕ(Документ.битОтчетОбИмпортеПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.СтатусОформления В (ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.НеОформлено), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично), ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовЕГАИС.ТребуетсяСопоставлениеНоменклатуры))
	|	И НЕ Таблица.Архивный
	|	И (Классификатор.Ссылка В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
		|ИЗ
		|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битОтчетОбИмпортеПродукцииЕГАИС КАК ОтчетОбИмпортеПродукцииЕГАИС
		|		ПО СтатусыДокументовЕГАИС.Документ = ОтчетОбИмпортеПродукцииЕГАИС.Ссылка
		|ГДЕ
		|	ОтчетОбИмпортеПродукцииЕГАИС.Ссылка ЕСТЬ НЕ NULL 
		|	И НЕ ОтчетОбИмпортеПродукцииЕГАИС.ПометкаУдаления
		|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
		|	И (ОтчетОбИмпортеПродукцииЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
		|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
		|	И (ОтчетОбИмпортеПродукцииЕГАИС.Ответственный = &Ответственный
		|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битОтчетОбИмпортеПродукцииЕГАИС КАК ОтчетОбИмпортеПродукцииЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ОтчетОбИмпортеПродукцииЕГАИС.Ссылка
	|ГДЕ
	|	ОтчетОбИмпортеПродукцииЕГАИС.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ ОтчетОбИмпортеПродукцииЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ОтчетОбИмпортеПродукцииЕГАИС.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ОтчетОбИмпортеПродукцииЕГАИС.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат СообщениеЗапросаОтчетОбИмпортеXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения Тогда
		
		Возврат ЗапросНаОтменуПроведенияXML(ДокументСсылка);
		
	КонецЕсли;
	
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Интерфейс для отложенной обработки
//
// Параметры:
//   Документ - ДокументСсылка.битОтчетОбИмпортеПродукцииЕГАИС
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов, Неопределено - вариант обработки
//   Отказ - Булево - отказ от обработки
//
Процедура бг_ОтложеннаяОбработкаОбъекта(Документ, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтправитьЗапросыСправки1ЕГАИС Тогда
		бг_ИнтеграцияЕГАИС.ОтправитьЗапросыСправок1ВУТМ(Документ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияЕГАИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.Ссылка                  КАК Ссылка,
	|	ДанныеШапки.ОрганизацияЕГАИС        КАК ОрганизацияЕГАИС,
	|	СтатусыДокументовЕГАИС.Статус       КАК СтатусОбработки
	|ИЗ
	|	Документ.битОтчетОбИмпортеПродукцииЕГАИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ДанныеШапки.Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",        Реквизиты.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("ТекущийСтатус",        	 Реквизиты.СтатусОбработки);
	
	Запрос.УстановитьПараметр("СтатусыДвижений", СтатусыДвижений());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	&ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция      КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                  КАК Справка2,
	|	ТаблицаТовары.Количество				КАК СвободныйОстаток,
	|	ТаблицаТовары.Количество                КАК Количество,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|ГДЕ
	|	&ТекущийСтатус В (&СтатусыДвижений)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТТовары";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Количество           КАК Количество,
	|	ТаблицаТовары.Справка2             КАК Справка2
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.битОтчетОбИмпортеПродукцииЕГАИС.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

Функция СообщениеЗапросаОтчетОбИмпортеXML(ДокументСсылка)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС;

	ДанныеДляЗапросаОтчетОбИмпорте = ДанныеДляЗапросаОтчетОбИмпорте(ДокументСсылка);
	
	Если ДанныеДляЗапросаОтчетОбИмпорте.Организация = Неопределено Тогда
		Возврат 
			СообщениеЗапросаОтчетОбИмпортеXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Нет данных для выгрузки.';
					|en = 'Нет данных для выгрузки.'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗапросаОтчетОбИмпорте.ОрганизацияЕГАИС) Тогда
		Возврат 
			СообщениеЗапросаОтчетОбИмпортеXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Не сопоставлена организация ЕГАИС.';
					|en = 'Не сопоставлена организация ЕГАИС.'"));
	КонецЕсли;
	
	ОрганизацияЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляЗапросаОтчетОбИмпорте.ОрганизацияЕГАИС, "Код, ФорматОбмена");
	ИдентификаторФСРАР = ОрганизацияЕГАИС.Код;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(ОрганизацияЕГАИС.ФорматОбмена);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено Или ИмяТипа = Неопределено Тогда
		Возврат 
			СообщениеЗапросаОтчетОбИмпортеXMLСОшибкой(
				Операция, 
				ДокументСсылка,
				СтрШаблон(
					НСтр(
						"ru = 'Операция не поддерживается в версии формата обмена: %1.';
						|en = 'Операция не поддерживается в версии формата обмена: %1.'"),
					ФорматОбмена));
	КонецЕсли;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка); //НомерВерсии
	
	RepImported = RepImported(
			ПространствоИмен, 
			Строка(ДокументСсылка.УникальныйИдентификатор()),
			ДанныеДляЗапросаОтчетОбИмпорте,
			СообщениеXML);
		
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(RepImported, ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ДанныеДляЗапросаОтчетОбИмпорте.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	//СообщениеXML.Версия            = НомерВерсии;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);
	
КонецФункции

Функция ЗапросНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОбИмпорте;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                           КАК Номер,
	|	Шапка.Дата                            КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование               КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС              КАК ИдентификаторЕГАИС,
	|	Шапка.ОрганизацияЕГАИС                КАК ОрганизацияЕГАИС,
	|	Шапка.ОрганизацияЕГАИС.Код            КАК ИдентификаторФСРАР,
	|	Шапка.ОрганизацияЕГАИС.ФорматОбмена   КАК ФорматОбмена,
	|	Шапка.Ответственный                   КАК Ответственный
	|ИЗ
	|	Документ.битОтчетОбИмпортеПродукцииЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка); //НомерВерсии

		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.';
																			|en = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
							|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryRejectRepImported");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "RegId",      Шапка.ИдентификаторЕГАИС, СообщениеXML);
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ДанныеДляЗапросаОтчетОбИмпорте(ДокументСсылка)
	
	ПоляЗаголовка = Новый Структура(
		"Номер, 
		|Дата, 
		|Организация, 
		|ОрганизацияЕГАИС,
		|ДатаИмпорта, 
		|НомерКонтракта, 
		|ДатаКонтракта, 
		|Поставщик, 
		|НомерГТД, 
		|ДатаГТД, 
		|КодСтраны, 
		|Комментарий");
	
	ДанныеДляЗапросаОтчетОбИмпорте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ПоляЗаголовка);
	ДанныеДляЗапросаОтчетОбИмпорте.Номер       = СокрЛП(ДанныеДляЗапросаОтчетОбИмпорте.Номер);		
	ДанныеДляЗапросаОтчетОбИмпорте.Комментарий = СокрЛП(ДанныеДляЗапросаОтчетОбИмпорте.Комментарий);		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.НомерСтроки КАК НомерСтроки,
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.Количество КАК Количество,
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.Крепость КАК Крепость,
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.КрепостьМин КАК КрепостьМин,
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.КрепостьМакс КАК КрепостьМакс,
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.НомерПартии КАК НомерПартии,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Код КАК Код
	|ИЗ
	|	Документ.битОтчетОбИмпортеПродукцииЕГАИС.Товары КАК битОтчетОбИмпортеПродукцииЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО битОтчетОбИмпортеПродукцииЕГАИСТовары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|ГДЕ
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	битОтчетОбИмпортеПродукцииЕГАИСТовары.НомерСтроки";
	
	ДанныеДляЗапросаОтчетОбИмпорте.Вставить("Содержимое", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляЗапросаОтчетОбИмпорте
	
КонецФункции

Функция ОрганизацияЕГАИС(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент"              , Организация);
	Запрос.УстановитьПараметр("СоответствуетОрганизации", Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации = &СоответствуетОрганизации";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;

КонецФункции	

Функция СообщениеЗапросаОтчетОбИмпортеXMLСОшибкой(Операция, ДокументСсылка, ТекстОшибки)
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);	
	
КонецФункции

Функция RepImported(ПространствоИмен, Identity, ДанныеДляЗапросаОтчетОбИмпорте, СообщениеXML)
	
	RepImported = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "RepImportedType_v4");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(RepImported, "Identity", Identity, СообщениеXML);
	
	RepImported.Header  = Header(ПространствоИмен, RepImported, ДанныеДляЗапросаОтчетОбИмпорте, СообщениеXML);
	RepImported.Content = Content(ПространствоИмен, RepImported, ДанныеДляЗапросаОтчетОбИмпорте, СообщениеXML);
	
	Возврат RepImported 

КонецФункции

Функция Header(ПространствоИмен, RepImported, ДанныеДляЗапросаОтчетОбИмпорте, СообщениеXML)
	
	Header = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", RepImported);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "NUMBER",               ДанныеДляЗапросаОтчетОбИмпорте.Номер,        СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Date",                 ДанныеДляЗапросаОтчетОбИмпорте.Дата,         СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "ImportedDate",         ДанныеДляЗапросаОтчетОбИмпорте.ДатаИмпорта,  СообщениеXML);
	
	Header.Importer = OrgInfoRus(ДанныеДляЗапросаОтчетОбИмпорте.ОрганизацияЕГАИС,  СообщениеXML);
	Header.Supplier = OrgInfoForeign(ДанныеДляЗапросаОтчетОбИмпорте.Поставщик,     СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "ContractNUMBER",       ДанныеДляЗапросаОтчетОбИмпорте.НомерКонтракта,         				СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "ContractDate",         ДанныеДляЗапросаОтчетОбИмпорте.ДатаКонтракта,         				СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "GTDNUMBER",            ДанныеДляЗапросаОтчетОбИмпорте.НомерГТД,         						СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "GTDDate",              ДанныеДляЗапросаОтчетОбИмпорте.ДатаГТД,         						СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Country",              Формат(ДанныеДляЗапросаОтчетОбИмпорте.КодСтраны,"ЧЦ=3; ЧН=; ЧВН=") ,  СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Note",                 ДанныеДляЗапросаОтчетОбИмпорте.Комментарий,        			 		СообщениеXML);
	

	Возврат Header
	
КонецФункции

Функция OrgInfoRus(ОрганизацияЕГАИС, СообщениеXML)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	OrgInfoRus = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoRus_v2")); 
	
	РеквизитыОрганизацииЕГАИС = Новый Структура(
		"Код,
		|НаименованиеПолное,
		|Наименование,
		|ИНН,
		|КПП,
		|КодСтраны,
		|КодРегиона,
		|ПредставлениеАдреса");
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, РеквизитыОрганизацииЕГАИС); 
	
	OrgInfoRus.UL = UL(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат OrgInfoRus
	
КонецФункции

Функция UL(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML)
	
	UL = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ULType")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "ClientRegId", РеквизитыОрганизацииЕГАИС.Код,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "FullName",    РеквизитыОрганизацииЕГАИС.НаименованиеПолное, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "INN",         РеквизитыОрганизацииЕГАИС.ИНН,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "KPP",         РеквизитыОрганизацииЕГАИС.КПП,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "ShortName",         РеквизитыОрганизацииЕГАИС.Наименование, СообщениеXML);
	
	UL.address    = OrgAddress(ПространствоИмен, "OrgAddressTypeULFL",   РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат UL
	
КонецФункции
 
Функция OrgAddress(ПространствоИмен, ИмяТипа, РеквизитыАдреса, СообщениеXML)
	
	OrgAddress = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа)); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "Country",     Формат(РеквизитыАдреса.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "RegionCode",  Формат(РеквизитыАдреса.КодРегиона, "ЧЦ=2; ЧВН="),     СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "description", СокрЛП(РеквизитыАдреса.ПредставлениеАдреса),          СообщениеXML);
	
	Возврат OrgAddress
	
КонецФункции

Функция OrgInfoForeign(ОрганизацияЕГАИС, СообщениеXML)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	OrgInfoForeign = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoForeign_v2")); 
	
	РеквизитыОрганизацииЕГАИС = Новый Структура(
		"Код,
		|НаименованиеПолное,
		|Наименование,
		|КодСтраны,
		|ПредставлениеАдреса");
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, РеквизитыОрганизацииЕГАИС); 
	
	OrgInfoForeign.FO = FO(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат OrgInfoForeign
	
КонецФункции

Функция FO(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML)
	
	FO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "FOType")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(FO, "ClientRegId", РеквизитыОрганизацииЕГАИС.Код,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(FO, "FullName",    РеквизитыОрганизацииЕГАИС.НаименованиеПолное, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(FO, "ShortName",         РеквизитыОрганизацииЕГАИС.Наименование, СообщениеXML);
	
	FO.address    = OrgAddressFOTS(ПространствоИмен, "OrgAddressTypeFOTS",   РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат FO
	
КонецФункции
 
Функция OrgAddressFOTS(ПространствоИмен, ИмяТипа, РеквизитыАдреса, СообщениеXML)
	
	OrgAddressFOTS = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа)); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddressFOTS, "Country",     Формат(РеквизитыАдреса.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddressFOTS, "description", СокрЛП(РеквизитыАдреса.ПредставлениеАдреса),          СообщениеXML);
	
	Возврат OrgAddressFOTS
	
КонецФункции

Функция Content(ПространствоИмен, RepImported, ДанныеДляЗапросаОтчетОбИмпорте, СообщениеXML)
	
	Content = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", RepImported);
	
	Для Каждого Позиция Из ДанныеДляЗапросаОтчетОбИмпорте.Содержимое Цикл
		
		Position = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Content, "Position");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "ProductCode",  	Позиция.Код,    		СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity",  		Позиция.Количество,     СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "alcPercent", 		Позиция.Крепость, 		СообщениеXML); 
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "alcPercentMin",    Позиция.КрепостьМин,    СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "alcPercentMax",    Позиция.КрепостьМакс,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",   		Позиция.НомерСтроки,    СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    		Позиция.НомерПартии,    СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Comment1",    		"",                 	СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Comment2",    		"",                 	СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Comment3",    		"",                 	СообщениеXML);
		
		Content.Position.Добавить(Position);
		
	КонецЦикла;
	
	Возврат Content

КонецФункции

#КонецОбласти

Процедура ПриИзмененииСтатусаДокументаОбработатьСправки1(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус)
	
	СтатусПодтвержден = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден;
	
	ТребуетсяОбрабатыватьСправки1 = ПредыдущийСтатус <> СтатусПодтвержден И НовыйСтатус = СтатусПодтвержден;
		
	Если ТребуетсяОбрабатыватьСправки1 Тогда
		бг_ИнтеграцияЕГАИС.ЗарегистрироватьДокументДляОтложенногоЗапросаСправок1(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
