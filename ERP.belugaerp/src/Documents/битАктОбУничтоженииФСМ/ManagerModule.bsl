#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияАктаОбУничтожении Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
	
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияАктаОбУничтожении Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПроведенЕГАИС;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Неопределено;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведения = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведения.Принят           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.Обрабатывается   = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведения.ОтменаПроведения = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.ОшибкаПроведения = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.Ошибка           = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведения.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено 
		И ДополнительныеПараметры.Свойство("ОперацияКвитанции") 
		И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ 
		И ТекущийСтатус(ДокументСсылка) = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден Тогда
		
		ОбрабатыватьКакФинальный = Истина;
	Иначе
		ОбрабатыватьКакФинальный = Ложь;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияАктаОбУничтожении Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПолученЕГАИС",
			ДополнительныеПараметры.СтатусОбработки,
			Статусы,
			ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияАктаОбУничтожении Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС",
			ДополнительныеПараметры.СтатусОбработки,
			Статусы,
			ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(
		Таблица,
		0,
		Исходящий,
		Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ,
		ДокументСсылка);
		
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(
		Таблица,
		0,
		Исходящий,
		Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияАктаОбУничтожении,
		ДокументСсылка);
	
	Возврат Таблица;
	
КонецФункции

Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(
		ДокументСсылка,
		ПредыдущийСтатус,
		НовыйСтатус,
		ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

Функция СтатусыДвижений()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден);
	
	Возврат Результат;
	
КонецФункции

Функция ТекущийСтатус(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Статус КАК СтатусОбработки
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатусОбработки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битАктОбУничтоженииФСМ КАК АктОбУничтоженииФСМ
	|		ПО СтатусыДокументовЕГАИС.Документ = АктОбУничтоженииФСМ.Ссылка
	|ГДЕ
	|	АктОбУничтоженииФСМ.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ АктОбУничтоженииФСМ.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (АктОбУничтоженииФСМ.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (АктОбУничтоженииФСМ.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битАктОбУничтоженииФСМ КАК АктОбУничтоженииФСМ
	|		ПО СтатусыДокументовЕГАИС.Документ = АктОбУничтоженииФСМ.Ссылка
	|ГДЕ
	|	АктОбУничтоженииФСМ.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ АктОбУничтоженииФСМ.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (АктОбУничтоженииФСМ.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (АктОбУничтоженииФСМ.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат СообщениеЗапросаАктОбУничтоженииФСМ(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Команды

Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
    Документы.ВнутреннееПотреблениеТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
КонецПроцедуры

#КонецОбласти 

// Возвращает марки документа по табличной части марки
//
// Параметры:
//   Ссылка - ДокументСсылка.битАктОбУничтоженииФСМ 
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные о марках документа, содержит колонки:
//  	* Серия - СправочникСсылка.СерииНоменклатуры - Серия ФСМ
//  	* НомерМарки - Число - Номер марки
//
Функция МаркиДокумента(Ссылка) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ШаблонПолныйНомер = "%1%2";
	ОписаниеТиповНомерМарки = ОбщегоНазначения.ОписаниеТипаЧисло(РегистрыСведений.бг_ИдентификаторыМарок.ДлинаНомераМарки());
	КодПродукцииРазрядДлина = 6;
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Результат.Колонки.Добавить("НомерМарки", ОписаниеТиповНомерМарки);
	Результат.Колонки.Добавить("ОрганизацияЕГАИС", Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битАктОбУничтоженииФСММарки.НачальныйНомерПоддиапазона КАК НачалоДиапазона,
	|	битАктОбУничтоженииФСММарки.КонечныйНомерПоддиапазона КАК КонецДиапазона,
	|	битАктОбУничтоженииФСММарки.Серия КАК Серия,
	|	СерииНоменклатуры.бг_ПолныйНачальныйНомерДиапазона КАК ПолныйНачальныйНомерДиапазона,
	|	битАктОбУничтоженииФСММарки.Ссылка.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ИЗ
	|	Документ.битАктОбУничтоженииФСМ.Марки КАК битАктОбУничтоженииФСММарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО битАктОбУничтоженииФСММарки.Серия = СерииНоменклатуры.Ссылка
	|			И (битАктОбУничтоженииФСММарки.Ссылка = &Ссылка)";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПолныйНомерДиапазонаСтрока = Формат(Выборка.ПолныйНачальныйНомерДиапазона, "ЧГ=0");
		КодПродукцииРазряд = Лев(ПолныйНомерДиапазонаСтрока, КодПродукцииРазрядДлина);
		НачалоДиапазонаСтрока = СтрШаблон(ШаблонПолныйНомер, КодПродукцииРазряд, Выборка.НачалоДиапазона);
		НачалоДиапазона = ОписаниеТиповНомерМарки.ПривестиЗначение(НачалоДиапазонаСтрока);
		КонецДиапазонаСтрока = СтрШаблон(ШаблонПолныйНомер, КодПродукцииРазряд, Выборка.КонецДиапазона);
		КонецДиапазона = ОписаниеТиповНомерМарки.ПривестиЗначение(КонецДиапазонаСтрока);
		Для ТекущаяМарка = НачалоДиапазона По КонецДиапазона Цикл
			СтрокаМарка = Результат.Добавить();
			СтрокаМарка.Серия = Выборка.Серия;
			СтрокаМарка.НомерМарки = ТекущаяМарка;
			СтрокаМарка.ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

Функция СообщениеЗапросаАктОбУничтоженииФСМ(ДокументСсылка)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ;

	ДанныеДляЗапросаАктОбУничтоженииФСМ = ДанныеДляЗапросаАктОбУничтоженииФСМ(ДокументСсылка);
	
	Если ДанныеДляЗапросаАктОбУничтоженииФСМ.Организация = Неопределено Тогда
		Возврат 
			СообщениеЗапросаАктОбУничтоженииФСМXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Нет данных для выгрузки.';
					|en = 'Нет данных для выгрузки.'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗапросаАктОбУничтоженииФСМ.ОрганизацияЕГАИС) Тогда
		Возврат 
			СообщениеЗапросаАктОбУничтоженииФСМXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Не сопоставлена организация ЕГАИС.';
					|en = 'Не сопоставлена организация ЕГАИС.'"));
	КонецЕсли;
	
	ДанныеОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеДляЗапросаАктОбУничтоженииФСМ.ОрганизацияЕГАИС,
		"Код, ФорматОбмена");
		
	ИдентификаторФСРАР = ДанныеОрганизацииЕГАИС.Код;
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(ДанныеОрганизацииЕГАИС.ФорматОбмена);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено Или ИмяТипа = Неопределено Тогда
		Возврат 
			СообщениеЗапросаАктОбУничтоженииФСМXMLСОшибкой(
				Операция, 
				ДокументСсылка,
				СтрШаблон(
					НСтр(
						"ru = 'Операция не поддерживается в версии формата обмена: %1.';
						|en = 'Операция не поддерживается в версии формата обмена: %1.'"),
					ФорматОбмена));
	КонецЕсли;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка); //НомерВерсии
	
	ReportDestructionAMFSM = ReportDestructionAMFSM(
			ПространствоИмен, 
			Строка(ДокументСсылка.УникальныйИдентификатор()),
			ДанныеДляЗапросаАктОбУничтоженииФСМ,
			СообщениеXML);
		
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ReportDestructionAMFSM, ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ДанныеДляЗапросаАктОбУничтоженииФСМ.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);
	
КонецФункции

Функция ДанныеДляЗапросаАктОбУничтоженииФСМ(ДокументСсылка)
	
	ПоляЗаголовка = Новый Структура("Номер, Дата, Организация, ОрганизацияЕГАИС, ОбщееКоличество");
	
	ДанныеДляЗапросаАктОбУничтоженииФСМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ПоляЗаголовка);
	ДанныеДляЗапросаАктОбУничтоженииФСМ.Номер = СокрЛП(ДанныеДляЗапросаАктОбУничтоженииФСМ.Номер);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битАктОбУничтоженииФСММарки.НомерСтроки КАК НомерСтроки,
	|	битАктОбУничтоженииФСММарки.НачальныйНомерПоддиапазона КАК НачальныйНомерПоддиапазона,
	|	битАктОбУничтоженииФСММарки.КонечныйНомерПоддиапазона КАК КонечныйНомерПоддиапазона,
	|	битАктОбУничтоженииФСММарки.КоличествоМарок КАК КоличествоМарок,
	|	битАктОбУничтоженииФСММарки.ПричинаУничтожения КАК ПричинаУничтожения,
	|	битАктОбУничтоженииФСММарки.Серия.бг_СерияМарки КАК СерияМарки,
	|	битАктОбУничтоженииФСММарки.Серия.бг_НомерРулона КАК НомерРулона,
	|	битАктОбУничтоженииФСММарки.Серия.бг_НомерДиапазонаВРулоне КАК НомерДиапазонаВРулоне,
	|	битАктОбУничтоженииФСММарки.Номенклатура.бг_ТипМарки.Код КАК КодТипаМарки,
	|	битАктОбУничтоженииФСММарки.Номенклатура.бг_ТипМарки.Наименование КАК НаименованиеТипаМарки
	|ИЗ
	|	Документ.битАктОбУничтоженииФСМ.Марки КАК битАктОбУничтоженииФСММарки
	|ГДЕ
	|	битАктОбУничтоженииФСММарки.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	битАктОбУничтоженииФСММарки.НомерСтроки";
	
	ДанныеДляЗапросаАктОбУничтоженииФСМ.Вставить("Содержимое", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляЗапросаАктОбУничтоженииФСМ;
	
КонецФункции

Функция ОрганизацияЕГАИС(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент"              , Организация);
	Запрос.УстановитьПараметр("СоответствуетОрганизации", Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации = &СоответствуетОрганизации";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;

КонецФункции	

Функция СообщениеЗапросаАктОбУничтоженииФСМXMLСОшибкой(Операция, ДокументСсылка, ТекстОшибки)
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);	
	
КонецФункции

Функция ReportDestructionAMFSM(ПространствоИмен, Identity, ДанныеДляЗапросаАктОбУничтоженииФСМ, СообщениеXML)
	
	ReportDestructionAMFSM = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ReportDestructionAMFSMType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ReportDestructionAMFSM, "Identity", Identity, СообщениеXML);
	
	ReportDestructionAMFSM.Header  = Header(ПространствоИмен, ReportDestructionAMFSM, ДанныеДляЗапросаАктОбУничтоженииФСМ, СообщениеXML);
	ReportDestructionAMFSM.Content = Content(ПространствоИмен, ReportDestructionAMFSM, ДанныеДляЗапросаАктОбУничтоженииФСМ, СообщениеXML);
	
	Возврат ReportDestructionAMFSM; 

КонецФункции

Функция Header(ПространствоИмен, ReportDestructionAMFSM, ДанныеДляЗапросаАктОбУничтоженииФСМ, СообщениеXML)
	
	Header = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ReportDestructionAMFSM);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "NUMBER", ДанныеДляЗапросаАктОбУничтоженииФСМ.Номер, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Date", ДанныеДляЗапросаАктОбУничтоженииФСМ.Дата, СообщениеXML);
	
	Header.Client = OrgInfoRus(ДанныеДляЗапросаАктОбУничтоженииФСМ.ОрганизацияЕГАИС, СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TotalQuantity",
		ДанныеДляЗапросаАктОбУничтоженииФСМ.ОбщееКоличество,
		СообщениеXML);

	Возврат Header;
	
КонецФункции

Функция OrgInfoRus(ОрганизацияЕГАИС, СообщениеXML)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	OrgInfoRus = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoRus_ClaimIssue")); 
	
	РеквизитыОрганизацииЕГАИС = Новый Структура(
		"Код,
		|НаименованиеПолное,
		|Наименование,
		|ИНН,
		|КПП,
		|КодСтраны,
		|КодРегиона,
		|ПредставлениеАдреса");
	
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, РеквизитыОрганизацииЕГАИС); 
	
	OrgInfoRus.UL = UL(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат OrgInfoRus;
	
КонецФункции

Функция UL(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML)
	
	UL = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ULType_ClaimIssue")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "ClientRegId", РеквизитыОрганизацииЕГАИС.Код,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "FullName",    РеквизитыОрганизацииЕГАИС.НаименованиеПолное, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "INN",         РеквизитыОрганизацииЕГАИС.ИНН,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "KPP",         РеквизитыОрганизацииЕГАИС.КПП,                СообщениеXML);
	
	UL.address    = OrgAddress(ПространствоИмен, "OrgAddressTypeULFL",   РеквизитыОрганизацииЕГАИС, СообщениеXML);
	UL.address_ur = OrgAddress(ПространствоИмен, "OrgUrAddressTypeULFL", РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат UL;
	
КонецФункции
 
Функция OrgAddress(ПространствоИмен, ИмяТипа, РеквизитыАдреса, СообщениеXML)
	
	OrgAddress = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа)); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "Country",     Формат(РеквизитыАдреса.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "RegionCode",  Формат(РеквизитыАдреса.КодРегиона, "ЧЦ=2; ЧВН="),     СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "description", СокрЛП(РеквизитыАдреса.ПредставлениеАдреса),          СообщениеXML);
	
	Возврат OrgAddress;
	
КонецФункции

Функция Content(ПространствоИмен, ReportDestructionAMFSM, ДанныеДляЗапросаАктОбУничтоженииФСМ, СообщениеXML)
	
	Content = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ReportDestructionAMFSM);
	
	Для Каждого Позиция Из ДанныеДляЗапросаАктОбУничтоженииФСМ.Содержимое Цикл
		
		Position = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Content, "Position");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",            Позиция.НомерСтроки,                СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "CauseOfDestruction",  Позиция.ПричинаУничтожения,         СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "MarkType",            Позиция.КодТипаМарки,               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "SampleFSM",           Позиция.НаименованиеТипаМарки,      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "RollNumber",          Позиция.НомерРулона,                СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "RangeNumberInRoll",   Позиция.НомерДиапазонаВРулоне,      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Rank",                Позиция.СерияМарки,                 СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Start",               Позиция.НачальныйНомерПоддиапазона, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Last",                Позиция.КонечныйНомерПоддиапазона,  СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "QuantityRange",       Позиция.КоличествоМарок,            СообщениеXML);
		
		Content.Position.Добавить(Position);
		
	КонецЦикла;
	
	Возврат Content;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
