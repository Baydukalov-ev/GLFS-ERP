
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	КартинкиТиповУпаковок = бг_МаркируемаяПродукция.КартинкиТиповУпаковок();
	ЗначенияТиповУпаковок = бг_МаркируемаяПродукция.ЗначенияТиповУпаковок();
	ДлиныШтрихкодовМарок = бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок();
	
	ПриПолученииДанныхНаСервере();
	
	УстановитьВидимостьЭлементов();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьТоварыПоШтрихкодамПоДаннымМарок(Команда)
	ОчиститьСообщения();
	ЗаполнитьТоварыПоШтрихкодамПоДаннымМарокНаСервере(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РасходныйОрдерНаТоварыПриИзменении(Элемент)
	РасходныйОрдерНаТоварыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатусSolvoОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтатусSolvoПриИзменении(Элемент)
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыШтрихкодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Штрихкоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	
	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		ТекущиеДанные,
		КонтекстЗаполненияДанныхТиповУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиШтрихкодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Марки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	
	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		ТекущиеДанные,
		КонтекстЗаполненияДанныхТиповУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркиШтрихкодРодительПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Марки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ШтрихкодРодитель = СокрЛП(ТекущиеДанные.ШтрихкодРодитель);
	
	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"ШтрихкодРодитель",
		"ТипУпаковкиРодителя",
		"КартинкаТипаУпаковкиРодителя");
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		ТекущиеДанные,
		КонтекстЗаполненияДанныхТиповУпаковок);
		
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиШтрихкодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Упаковки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	
	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		ТекущиеДанные,
		КонтекстЗаполненияДанныхТиповУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкиШтрихкодРодительПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Упаковки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ШтрихкодРодитель = СокрЛП(ТекущиеДанные.ШтрихкодРодитель);
	
	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"ШтрихкодРодитель",
		"ТипУпаковкиРодителя",
		"КартинкаТипаУпаковкиРодителя");
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		ТекущиеДанные,
		КонтекстЗаполненияДанныхТиповУпаковок);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
		
	ШтрихкодыЗаполнитьДанныеТиповУпаковок();
	МаркиЗаполнитьДанныеТиповУпаковок();
	УпаковкиЗаполнитьДанныеТиповУпаковок();
	
	ЗаполнитьВспомогательныеДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ШтрихкодыЗаполнитьДанныеТиповУпаковок()

	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
	
	Для каждого СтрокаШтрихкоды Из Объект.Штрихкоды Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаШтрихкоды,
			КонтекстЗаполненияДанныхТиповУпаковок);
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура МаркиЗаполнитьДанныеТиповУпаковок()

	КонтекстЗаполненияДанныхТиповУпаковокШтрихкод = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
		
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"ШтрихкодРодитель",
		"ТипУпаковкиРодителя",
		"КартинкаТипаУпаковкиРодителя");
	
	Для каждого СтрокаМарки Из Объект.Марки Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаМарки,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкод);
			
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаМарки,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель);
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура УпаковкиЗаполнитьДанныеТиповУпаковок()

	КонтекстЗаполненияДанныхТиповУпаковокШтрихкод = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
		
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"ШтрихкодРодитель",
		"ТипУпаковкиРодителя",
		"КартинкаТипаУпаковкиРодителя");
	
	Для каждого СтрокаУпаковки Из Объект.Упаковки Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаУпаковки,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкод);
			
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаУпаковки,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель);
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоШтрихкодамПоДаннымМарокНаСервере(ВыводитьОшибки = Ложь)

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ТоварыПоШтрихкодамПоДаннымМарок = ДокументОбъект.ТоварыПоШтрихкодам();
	
	ТоварыПоШтрихкодам.Загрузить(ТоварыПоШтрихкодамПоДаннымМарок);
	
	Для каждого СтрокаТоварыПоШтрихкодам Из ТоварыПоШтрихкодам Цикл
		
		СтрокаТоварыПоШтрихкодам.КартинкаТипаУпаковки = КартинкиТиповУпаковок.Бутылка;
		
		СтрокаТоварыПоШтрихкодам.КартинкаТипаУпаковкиРодителя = бг_МаркируемаяПродукцияКлиентСервер.КартинкаПоТипуУпаковкиШтрихкода(
			СтрокаТоварыПоШтрихкодам.ТипУпаковкиРодителя,
			ЗначенияТиповУпаковок,
			КартинкиТиповУпаковок);
			
	КонецЦикла;
		
	ТоварыПоШтрихкодам.Сортировать("ТипУпаковкиРодителя, ШтрихкодРодитель, Номенклатура, Серия");
	
	РезультатПроверки = ДокументОбъект.ТоварыПоШтрихкодамСовпадают(
		ТоварыПоШтрихкодамПоДаннымМарок,
		Истина);
	
	Если Не РезультатПроверки.ТаблицыСовпадают И ВыводитьОшибки Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			бг_МаркируемаяПродукция.ТекстОшибкиРасхожденийТоваровПоМаркамИВДокументе(),
			Объект.Ссылка);
		
		Для каждого ТекстОшибки Из РезультатПроверки.Ошибки Цикл
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеДанныеФормы()

	ЭтоSolvo = Объект.ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()

	// Обнуляем видимость.
	Элементы.СтатусSolvo.Видимость                = Ложь;
	Элементы.Переупаковка.Видимость               = Ложь;
	Элементы.СтраницаШтрихкоды.Видимость          = Ложь;
	Элементы.Штрихкоды.Видимость                  = Ложь;
	Элементы.СтраницыМаркиУпаковки.Видимость      = Ложь;
	Элементы.СтраницаТовары.Видимость             = Ложь;
	Элементы.СтраницаТоварыПоШтрихкодам.Видимость = Ложь;
	
	// Подготавливаем данные, влияющие на видимость.
	Если Не ЗначениеЗаполнено(Объект.РасходныйОрдерНаТовары) Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен расходнный ордер'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТипВнешнейСкладскойСистемы) Тогда
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен тип WMS в складе'"));
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	МенеджерДокумента = Документы.битОтражениеФактаПоРасходномуОрдеру;
	ОписаниеСтатусаSolvo = МенеджерДокумента.ОписаниеСтатусаSolvo(Объект.СтатусSolvo);
	ТипыСтатусовSolvo = МенеджерДокумента.ТипыСтатусовSolvo();
	ЭтоКонечныйСтатусSolvo = ОписаниеСтатусаSolvo = ТипыСтатусовSolvo.СогласованиеСЕРП
		Или ОписаниеСтатусаSolvo = ТипыСтатусовSolvo.КонечныйИнформативный;
		
	// Устанавливаем видимость в зависимости от полученных данных.
	Элементы.СтатусSolvo.Видимость                = ЭтоSolvo;
	Элементы.Переупаковка.Видимость               = Объект.ЕстьМаркируемаяАлкогольнаяПродукция И Не ЭтоSolvo;
	Элементы.СтраницаШтрихкоды.Видимость          = Объект.ЕстьМаркируемаяАлкогольнаяПродукция;
	Элементы.Штрихкоды.Видимость                  = Объект.ЕстьМаркируемаяАлкогольнаяПродукция И Не ЭтоSolvo;
	Элементы.СтраницыМаркиУпаковки.Видимость      = Объект.ЕстьМаркируемаяАлкогольнаяПродукция И ЭтоSolvo И ЭтоКонечныйСтатусSolvo;
	Элементы.СтраницаТовары.Видимость             = ЭтоSolvo И ЭтоКонечныйСтатусSolvo Или Не ЭтоSolvo;
	Элементы.СтраницаТоварыПоШтрихкодам.Видимость = Объект.ЕстьМаркируемаяАлкогольнаяПродукция
		И (ЭтоSolvo И ЭтоКонечныйСтатусSolvo Или Не ЭтоSolvo);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ВозможностьРедактированияЭлементов = Пользователи.РолиДоступны("бг_РедактированиеОтраженийФактаПоРасходнымОрдерам")
		Или Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.РасходныйОрдерНаТовары.ТолькоПросмотр = Не ВозможностьРедактированияЭлементов;
	Элементы.Переупаковка.ТолькоПросмотр = Не ВозможностьРедактированияЭлементов;
	Элементы.СтатусSolvo.ТолькоПросмотр = Не ВозможностьРедактированияЭлементов;
	Элементы.ОператорТСД.ТолькоПросмотр = Не ВозможностьРедактированияЭлементов;
	Элементы.ВремяВыполнения.ТолькоПросмотр = Не ВозможностьРедактированияЭлементов;
	
	Элементы.Штрихкоды.ИзменятьПорядокСтрок = ВозможностьРедактированияЭлементов;
	Элементы.Штрихкоды.ИзменятьСоставСтрок = ВозможностьРедактированияЭлементов;
	
	Элементы.Марки.ИзменятьПорядокСтрок = ВозможностьРедактированияЭлементов;
	Элементы.Марки.ИзменятьСоставСтрок = ВозможностьРедактированияЭлементов;
	
	Элементы.Упаковки.ИзменятьПорядокСтрок = ВозможностьРедактированияЭлементов;
	Элементы.Упаковки.ИзменятьСоставСтрок = ВозможностьРедактированияЭлементов;
	
	Элементы.Товары.ИзменятьПорядокСтрок = ВозможностьРедактированияЭлементов;
	Элементы.Товары.ИзменятьСоставСтрок = ВозможностьРедактированияЭлементов;
	
КонецПроцедуры

&НаСервере
Процедура РасходныйОрдерНаТоварыПриИзмененииНаСервере()
	
	ДанныеОрдераWMS = Документы.РасходныйОрдерНаТовары.бг_ДанныеОрдераWMS(Объект.РасходныйОрдерНаТовары);
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОрдераWMS);
	
	ЗаполнитьВспомогательныеДанныеФормы();
	
	УстановитьВидимостьЭлементов();

КонецПроцедуры

#КонецОбласти
