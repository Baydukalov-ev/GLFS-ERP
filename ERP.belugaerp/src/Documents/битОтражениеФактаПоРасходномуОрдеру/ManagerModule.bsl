
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.бг_ДвижениеМарок.ДобавитьКомандуДвижениеМарокПоДокументу(КомандыОтчетов);
	
КонецПроцедуры

// Возвращает организацию в зависимости от типа распоряжения связанного ордера.
//
// Параметры:
//   ОтражениеФактаПоРасходномуОрдеру - ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру
//   РасходныйОрдерНаТовары - ДокументСсылка.РасходныйОрдерНаТовары
//  
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ОрганизацияДокумента(ОтражениеФактаПоРасходномуОрдеру = Неопределено, РасходныйОрдерНаТовары = Неопределено) Экспорт
	
	Организация = Неопределено;
	
	Если РасходныйОрдерНаТовары = Неопределено Тогда
		РасходныйОрдерНаТовары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОтражениеФактаПоРасходномуОрдеру,
			"РасходныйОрдерНаТовары");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасходныйОрдерНаТовары) Тогда
		Возврат Организация;
	КонецЕсли;
	
	Распоряжение = Документы.РасходныйОрдерНаТовары.бг_Распоряжение(РасходныйОрдерНаТовары);
	Если Распоряжение = Неопределено Тогда
		Возврат Организация;
	КонецЕсли;
	
	УчитываемыеТипыРаспоряжений = Новый Массив;
	УчитываемыеТипыРаспоряжений.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	УчитываемыеТипыРаспоряжений.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	
	Если УчитываемыеТипыРаспоряжений.Найти(ТипЗнч(Распоряжение)) = Неопределено Тогда
		Возврат Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Организация");
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

// Возвращает организацию ЕГАИС документа.
//
// Параметры:
//   ОтражениеФактаПоРасходномуОрдеру - ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру
//  
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторОрганизацийЕГАИС
//
Функция ОрганизацияЕГАИСДокумента(ОтражениеФактаПоРасходномуОрдеру) Экспорт
	// TODO рефакторинг BG-3199. Сделать один запрос для получения организации ЕГИАС
	ОрганизацияЕГАИС = Неопределено;
	
	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ОтражениеФактаПоРасходномуОрдеру,
		"Склад");
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ОрганизацияЕГАИС = Справочники.Склады.бг_ОрганизацияЕГАИС(Склад);
	КонецЕсли;
	
	Возврат ОрганизацияЕГАИС;
	
КонецФункции

#Область Solvo

// Возвращает описание статусов Solvo.
//
// Возвращаемое значение:
//  Соответствие
//
Функция ОписаниеСтатусовSolvo()
	
	ОписаниеСтатусов = Новый Соответствие;
	
	ТипыСтатусовSolvo = ТипыСтатусовSolvo();
	
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.Спланирован,
		ТипыСтатусовSolvo.НачальныйИнформативный);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.ВРаботе,
		ТипыСтатусовSolvo.НачальныйИнформативный);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.Собран,
		ТипыСтатусовSolvo.НачальныйИнформативный);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.Упакован,
		ТипыСтатусовSolvo.НачальныйИнформативный);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.ГотовКОтгрузке,
		ТипыСтатусовSolvo.СогласованиеСЕРП);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.Погрузка,
		ТипыСтатусовSolvo.КонечныйИнформативный);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.Погружен,
		ТипыСтатусовSolvo.КонечныйИнформативный);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.Отгружается,
		ТипыСтатусовSolvo.КонечныйИнформативный);
		
	ОписаниеСтатусов.Вставить(
		Перечисления.бг_СтатусыОтгрузкиSolvo.Отгружен,
		ТипыСтатусовSolvo.КонечныйИнформативный);
		
	Возврат ОписаниеСтатусов;
	
КонецФункции

// Возвращает описание статуса Solvo.
//
// Параметры:
//  Статус - ПеречислениеСсылка.бг_СтатусыОтгрузкиSolvo
//  ИмяСтатуса - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеСтатусаSolvo(Статус = Неопределено, ИмяСтатуса = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Статус) И Не ЗначениеЗаполнено(ИмяСтатуса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяСтатуса <> Неопределено Тогда
		Статус = Перечисления.бг_СтатусыОтгрузкиSolvo[ИмяСтатуса];
	КонецЕсли;
	
	ОписаниеСтатусовSolvo = ОписаниеСтатусовSolvo();
	
	Возврат ОписаниеСтатусовSolvo.Получить(Статус);
	
КонецФункции

// Возвращает типы статусов Solvo.
//
Функция ТипыСтатусовSolvo() Экспорт
	
	ТипыСтатусов = Новый Структура;
	
	// Сообщения от Solvo носят служебный характер - исключетельно обновляется статус
	// сборки расходного ордера до отправки полноценного факта отгрузки в ЕРП.
	ТипыСтатусов.Вставить("НачальныйИнформативный", "НачальныйИнформативный");
	
	// Сообщения от Solvo содержат полноценные данные: товары, марки, упаковки.
	ТипыСтатусов.Вставить("СогласованиеСЕРП", "СогласованиеСЕРП");
	
	// Сообщения от Solvo носят служебный характер - исключетельно обновляется статус
	// сборки расходного ордера после отправки полноценного факта отгрузки в ЕРП.
	ТипыСтатусов.Вставить("КонечныйИнформативный", "КонечныйИнформативный");
	
	Возврат ТипыСтатусов;
	
КонецФункции

#КонецОбласти // Конец Solvo

#Область ОтложеннаяОбработка

Процедура бг_ОтложеннаяОбработкаОбъекта(ДокументСсылка, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВсеВарианты = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов;
	
	Если ВариантОбработки = ВсеВарианты.ОбработатьДокументыWMS Тогда
		ОтложеннаяОбработкаПроведение(ДокументСсылка);
	ИначеЕсли ВариантОбработки = ВсеВарианты.РассчитатьПоказателиРаботыОператоровWMS Тогда
		ОтложеннаяОбработкаРасчетПоказателейРаботыОператоровWMS(ДокументСсылка);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтложеннаяОбработкаПроведение(ДокументСсылка)
	
	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ШапкаОшибкиПроведения = ОписаниеОшибки();
		
		Если ДокументОбъект.Проведен
			И ДокументОбъект.ЕстьАлкогольнаяПродукция
			И Не ДокументОбъект.ОтраженаТТНИсходящая() Тогда
			
			Попытка
				// Если документ уже был проведен, от WMS пришла измененная версия, и повторное проведение завершилось с ошибкой,
				// то необходимо отменить проведение документа, чтобы пользователь не смог согласовать отгрузку в ЕГАИС, если
				// ТТН еще не создавалась.
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				ШапкаОшибкиОтменыПроведения = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
		
		ТелоОшибки = "";
		Для каждого СообщениеПользователю Из ПолучитьСообщенияПользователю(Истина) Цикл
			ТелоОшибки = ТелоОшибки + ?(ПустаяСтрока(ТелоОшибки), "", Символы.ПС) + СообщениеПользователю.Текст;
		КонецЦикла;
		
		ТекстОшибки = ШапкаОшибкиПроведения
			+ Символы.ПС
			+ ?(ЗначениеЗаполнено(ШапкаОшибкиОтменыПроведения), Символы.ПС + ШапкаОшибкиОтменыПроведения, "")
			+ ТелоОшибки;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура бг_ЗафиксироватьОшибкуОбработкиПроведения(ДокументСсылка, ТекстОшибки) Экспорт

	РегистрыСведений.бг_ДокументыИнтеграцииСоСкладскимиСистемами.ОбновитьСтатусДокумента(
		ДокументСсылка,
		ТекущаяДатаСеанса(),
		Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженБезОбработки,
		0,
		ТекстОшибки);

КонецПроцедуры

Процедура ОтложеннаяОбработкаРасчетПоказателейРаботыОператоровWMS(ДокументСсылка) Экспорт
	
	ДанныеДляРасчета = бг_WMS.НовыйДанныеДляРасчетаПоказателейРаботыОператоровWMS();
	ЗаполнитьДанныеДляРасчетаПоказателейРаботыОператоровWMS(ДанныеДляРасчета, ДокументСсылка);
	бг_WMS.СформироватьДвиженияПоказателейРаботыОператоровWMS(ДанныеДляРасчета);
	
КонецПроцедуры

#КонецОбласти // Конец ОтложеннаяОбработка

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДокументаДляРешенияОПроведении(ДокументСсылка)
	
	ДанныеДокументаДляРешенияОПроведении = Новый Структура("СтатусSolvo, ТипВнешнейСкладскойСистемы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битОтражениеФактаПоРасходномуОрдеру.СтатусSolvo КАК СтатусSolvo,
	|	битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары.Склад.бг_ТипВнешнейСкладскойСистемы КАК ТипВнешнейСкладскойСистемы
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеру.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДанныеДокументаДляРешенияОПроведении, Выборка);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДокументаДляРешенияОПроведении;

КонецФункции

#Область РасчетПоказателейРаботыОператоровWMS

Процедура ЗаполнитьДанныеДляРасчетаПоказателейРаботыОператоровWMS(ДанныеДляРасчета, ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляРасчета.Организация = Документы.битОтражениеФактаПоРасходномуОрдеру.ОрганизацияДокумента(
		ДокументСсылка);
	ДанныеДляРасчета.ОрганизацияЕГАИС = Документы.битОтражениеФактаПоРасходномуОрдеру.ОрганизацияЕГАИСДокумента(
		ДокументСсылка);
	
	СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(
		Метаданные.Документы.битОтражениеФактаПоРасходномуОрдеру.Имя);
	
	ДанныеДляРасчета.СтатусыМарок = СтатусыМарокПоОперации.СтатусыДоВключенияВОтгрузку;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляРасчетаПоказателейРаботыОператоровWMS();
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПоследнийИндекс = РезультатыЗапроса.ВГраница();
	
	ЗаполнитьЗначенияСвойств(
		ДанныеДляРасчета.ДанныеШапкиДокумента,
		РезультатыЗапроса[ПоследнийИндекс - 3].Выгрузить()[0]);
		
	Для каждого СтрокаТоварыРаспоряжения Из РезультатыЗапроса[ПоследнийИндекс - 2].Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ТоварыРаспоряжения.Добавить(), СтрокаТоварыРаспоряжения);
	КонецЦикла;
	
	Для каждого СтрокаТоварыДокумента Из РезультатыЗапроса[ПоследнийИндекс - 1].Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ТоварыДокумента.Добавить(), СтрокаТоварыДокумента);
	КонецЦикла;
	
	Для каждого СтрокаШтрихкодыДокумента Из РезультатыЗапроса[ПоследнийИндекс].Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ШтрихкодыДокумента.Добавить(), СтрокаШтрихкодыДокумента);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДляРасчетаПоказателейРаботыОператоровWMS()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	битОтражениеФактаПоРасходномуОрдеру.Ссылка КАК Документ,
	|	битОтражениеФактаПоРасходномуОрдеру.Проведен КАК Проведен,
	|	битОтражениеФактаПоРасходномуОрдеру.Дата КАК Дата,
	|	битОтражениеФактаПоРасходномуОрдеру.ВремяВыполнения КАК ВремяВыполнения,
	|	битОтражениеФактаПоРасходномуОрдеру.ОператорТСД КАК ОператорТСД,
	|	РасходныйОрдерНаТоварыТоварыРаспоряжениям.Распоряжение КАК Распоряжение,
	|	битОтражениеФактаПоРасходномуОрдеру.Склад.бг_ПунктРазгрузки КАК ПунктРазгрузки
	|ПОМЕСТИТЬ ШапкаИРаспоряжения
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыРаспоряжениям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|		ПО РасходныйОрдерНаТоварыТоварыРаспоряжениям.Ссылка = битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары
	|			И (битОтражениеФактаПоРасходномуОрдеру.Ссылка = &ДокументСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Распоряжение,
	|	ЗаказКлиента.бг_КаналПродаж КАК КаналПродаж,
	|	ЗаказКлиента.бг_ПунктНазначения.Территория КАК Территория
	|ПОМЕСТИТЬ ДанныеРаспоряжения
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ПО ЗаказКлиента.Ссылка = ШапкаИРаспоряжения.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаИРаспоряжения.Документ КАК Документ,
	|	ШапкаИРаспоряжения.Проведен КАК Проведен,
	|	ШапкаИРаспоряжения.Дата КАК Дата,
	|	ШапкаИРаспоряжения.ВремяВыполнения КАК ВремяВыполнения,
	|	ШапкаИРаспоряжения.ОператорТСД КАК ОператорТСД,
	|	ШапкаИРаспоряжения.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ШапкаИРаспоряжения.Распоряжение КАК Распоряжение,
	|	ДанныеРаспоряжения.КаналПродаж КАК КаналПродаж,
	|	ДанныеРаспоряжения.Территория КАК Территория
	|ИЗ
	|	ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаспоряжения КАК ДанныеРаспоряжения
	|		ПО ШапкаИРаспоряжения.Распоряжение = ДанныеРаспоряжения.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Серия КАК Серия,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество,
	|	СУММА(ЗаказКлиентаТовары.СуммаСНДС) КАК Сумма
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ПО ЗаказКлиентаТовары.Ссылка = ШапкаИРаспоряжения.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Серия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Серия,
	|	СУММА(ПеремещениеТоваровТовары.Количество),
	|	0
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ПО ПеремещениеТоваровТовары.Ссылка = ШапкаИРаспоряжения.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Номенклатура,
	|	ПеремещениеТоваровТовары.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Номенклатура КАК Номенклатура,
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Серия КАК Серия,
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Количество КАК Количество
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру.Товары КАК битОтражениеФактаПоРасходномуОрдеруТовары
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битОтражениеФактаПоРасходномуОрдеруШтрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру.Штрихкоды КАК битОтражениеФактаПоРасходномуОрдеруШтрихкоды
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеруШтрихкоды.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Конец РасчетПоказателейРаботыОператоровWMS

#КонецОбласти

#КонецЕсли
