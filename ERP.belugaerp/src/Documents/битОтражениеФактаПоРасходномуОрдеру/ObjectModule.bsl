
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает таблицу, содержащую идентификаторы марок, их ГУИДы и товары.
// 
// Возвращаемое значение:
//   ТаблицаЗначений
//   Состав полей таблицы см. в бг_МаркируемаяПродукция.НовыйДанныеМарокПоШтрихкодам()
//
Функция ТоварыПоШтрихкодам() Экспорт
	
	Если ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo Тогда
		// Присутствуют только марки.
		ОтгружаемыеШтрихкоды = Марки.Выгрузить().ВыгрузитьКолонку("Штрихкод");
	Иначе
		// Присутствуют все возможные штрихкоды: марки, коробки, упаковки.
		ОтгружаемыеШтрихкоды = Штрихкоды.Выгрузить().ВыгрузитьКолонку("Штрихкод");
	КонецЕсли;
	
	// Список статусов марок, анализируемых при получении доступных марок для отгрузки.
	СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);
	СтатусыМарокДляОтгрузки = СтатусыМарокПоОперации.СтатусыДоВключенияВОтгрузку;
	
	ДатаПолученияШтрихкодов = бг_МаркируемаяПродукция.ДатаПолученияШтрихкодов(ЭтотОбъект);
	
	// Разузловываем штрихкоды коробок и паллет, получаем таблицу товаров по штрихкодам марок (детальные записи).
	ТоварыПоШтрихкодам = бг_МаркируемаяПродукция.ДанныеМарокПоШтрихкодам(
		ОтгружаемыеШтрихкоды,
		Документы.битОтражениеФактаПоРасходномуОрдеру.ОрганизацияЕГАИСДокумента(Ссылка),
		СтатусыМарокДляОтгрузки,
		ДатаПолученияШтрихкодов);

	Возврат ТоварыПоШтрихкодам;
	
КонецФункции

Функция ТоварыПоШтрихкодамСовпадают(ТоварыПоШтрихкодам, ФиксироватьОшибки) Экспорт

	// Сравнивается таблица товаров, полученная из движений марок по данным ERP, с таблицей товаров, полученной из внешней системы.
	КлючевыеПоляТоваров = "Номенклатура, Серия";
	ВсеПоляТоваров = "Номенклатура, Серия, Количество";
	
	// Подготовливаем ТоварыПоШтрихкодам к сравнению.
	ТоварыПоШтрихкодамСгруппированные = ТоварыПоШтрихкодам.Скопировать(, КлючевыеПоляТоваров);
	
	ТоварыПоШтрихкодамСгруппированные.Колонки.Добавить(
		"Количество",
		Метаданные.Документы.битОтражениеФактаПоРасходномуОрдеру.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип);
		
	ТоварыПоШтрихкодамСгруппированные.ЗаполнитьЗначения(1, "Количество");
	ТоварыПоШтрихкодамСгруппированные.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	// Подготовливаем товары из внешней системы к сравнению.
	ТоварыИзВнешнейСистемы = Товары.Выгрузить(, ВсеПоляТоваров);
	ТоварыИзВнешнейСистемы.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	// Сравниваем таблицы.
	Возврат бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ТоварыПоШтрихкодамСгруппированные,
		ТоварыИзВнешнейСистемы,
		Истина,
		ФиксироватьОшибки);
		
КонецФункции

// Фиксирует реквизиты, измененные в объекте.
//
Процедура ЗафиксироватьИзмененияПередЗаписью() Экспорт
	
	Если ДополнительныеСвойства.Свойство("ИзмененныеРеквизиты") Тогда
		// Фиксация изменений уже выполнялась.
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(
		"ИзмененныеРеквизиты",
		бг_ОбщегоНазначенияСервер.ИзмененияОбъекта(
			ЭтотОбъект,
			Новый Структура("РасходныйОрдерНаТовары, ОператорТСД, СтатусSolvo"),
			Новый Структура("Штрихкоды, Марки, Упаковки, Товары")));
		
КонецПроцедуры

// Фиксирует реквизиты, измененные в объекте.
//
// Возвращаемое значение:
//  Булево
Функция ВДокументВнесеныВажныеИзменения() Экспорт
	
	Возврат ДополнительныеСвойства.Свойство("ИзмененныеРеквизиты")
		И (ДополнительныеСвойства.ИзмененныеРеквизиты.Свойство("Реквизиты")
			Или ДополнительныеСвойства.ИзмененныеРеквизиты.Свойство("ТабличныеЧасти"));
	
КонецФункции

// Возвращает признак наличия связанной ТТН исходящей.
//
// Возвращаемое значение:
//  Булево
//
Функция ОтраженаТТНИсходящая() Экспорт
	
	Возврат ДополнительныеСвойства.Свойство("ТТНИсходящаяЕГАИС")
		И ЗначениеЗаполнено(ДополнительныеСвойства.ТТНИсходящаяЕГАИС);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваИзОрдера(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеБазовыхРеквизитов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бг_WMS.ОбработатьВходящиеТовары(Товары);
	ИнициализироватьДополнительныеСвойства(РежимЗаписи);
	ОчиститьДанныеДокументаНеСоответствующиеСтатусуSolvo();
	
	Если ДополнительныеСвойства.ЭтоSolvo
		И Не ДополнительныеСвойства.НеобходимоПроведениеДокументаПоСтатусуSolvo
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru='Факт отгрузки по Solvo в статусе %1 не должен проводиться'"), СтатусSolvo),,,,
			Отказ);
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьДанныеПередОтражениемВУчете(Отказ);
		ПроверитьИдентификаторыТоваров(Отказ);
		
		Если Не Отказ Тогда
			
			Если ЗначениеЗаполнено(Ссылка)
				И ЕстьАлкогольнаяПродукция
				И ОтраженаТТНИсходящая() Тогда
				
				ЗафиксироватьИзмененияПередЗаписью();
				
				Если ВДокументВнесеныВажныеИзменения() Тогда
					бг_WMS.СообщитьПользователю(
						НСтр("ru='Нельзя изменять документ, если уже отражена ТТН исходящая.'"),
						Ссылка,
						Отказ);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ДополнительныеСвойства.ЭтоSolvo Тогда
				ПроверитьВозможностьПроведенияСвязьСПереупаковкой(Отказ);
			КонецЕсли;
			
			Если ЕстьМаркируемаяАлкогольнаяПродукция Тогда
				ПодготовитьТоварыПоШтрихкодам(Отказ);
				ПроверитьСоответствиеТоваровПоШтрихкодам(Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Распоряжение = РаспоряжениеОрдера(Отказ);
		ДополнительныеСвойства.Вставить("Распоряжение", Распоряжение);
		
		Если Не Отказ Тогда
			
			Если СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаКлиенту Тогда
				
				РасхожденияСерийЗаказФакт = РасхожденияСерийЗаказФакт(Распоряжение);
				
				Если НеобходимоЗаменятьСерииВЗаказе(РасхожденияСерийЗаказФакт) Тогда
					ВнестиИзмененияВЗаказ(Распоряжение, РасхожденияСерийЗаказФакт, Отказ);
					ВнестиИзмененияВОрдер(Распоряжение, Отказ);
				ИначеЕсли НужноИзменитьОрдер() Тогда
					ВнестиИзмененияВОрдер(Распоряжение, Отказ);
				Иначе
					//NOP
				КонецЕсли;
			
			ИначеЕсли СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению Тогда
				
				Если НужноИзменитьОрдер() Тогда
					ВнестиИзмененияВОрдер(Распоряжение, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись
		И Не ДополнительныеСвойства.ЭтоSolvo Тогда
		
		бг_WMS.ОбновитьСтатусДокумента(
			Ссылка,
			Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженБезОбработки,
			ДополнительныеСвойства,
			Отказ);
			
	КонецЕсли;
	
	ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ);
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.бг_ДвижениеМарок.Записывать = Истина;
	Движения.бг_СоставУпаковок.Записывать = Истина;
	
	Если ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		СформироватьДвиженияПоМаркам(Отказ);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДатаОкончанияОбработки", ТекущаяДатаСеанса());
	
	Если Не ДополнительныеСвойства.ЭтоSolvo Тогда
		
		бг_WMS.ОбновитьСтатусДокумента(
			Ссылка,
			Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженИОбработан,
			ДополнительныеСвойства,
			Отказ);
		
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Ссылка,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.РассчитатьПоказателиРаботыОператоровWMS);
			
	КонецЕсли;

КонецПроцедуры

&После("ОбработкаУдаленияПроведения")
Процедура бг_ОбработкаУдаленияПроведения(Отказ)
	
	Если ЕстьАлкогольнаяПродукция И ОтраженаТТНИсходящая() Тогда
		бг_WMS.СообщитьПользователю(
			НСтр("ru='Нельзя распроводить документ, если уже отражена ТТН исходящая.'"),
			Ссылка,
			Отказ);
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.ЭтоSolvo Тогда
		бг_WMS.ОбновитьСтатусДокумента(
			Ссылка,
			Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженБезОбработки,
			ДополнительныеСвойства,
			Отказ);
	КонецЕсли;
	
	ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеБазовыхРеквизитов(Отказ)

	Если Не ЗначениеЗаполнено(ТипВнешнейСкладскойСистемы) Тогда
		бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнен тип внешней складской системы для склада.'"), Ссылка, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СкладскаяОперация) Тогда
		бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнена складская операция.'"), Ссылка, Отказ);
	КонецЕсли;
	
	Если ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo Тогда
		Если Не ЗначениеЗаполнено(СтатусSolvo) Тогда
			бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнен статус Solvo.'"), Ссылка, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваИзОрдера(Отказ)
	
	Если Не (ЗначениеЗаполнено(РасходныйОрдерНаТовары) И ОбщегоНазначения.СсылкаСуществует(РасходныйОрдерНаТовары)) Тогда
		бг_WMS.СообщитьПользователю(НСтр("ru='Документ должен быть связан с ордером'"), Ссылка, Отказ);
		Возврат;
	КонецЕсли;
	
	ДанныеОрдераWMS = Документы.РасходныйОрдерНаТовары.бг_ДанныеОрдераWMS(РасходныйОрдерНаТовары);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОрдераWMS);
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеСвойства(РежимЗаписи)
	
	МенеджерДокумента = Документы.битОтражениеФактаПоРасходномуОрдеру;
	
#Область СвойстваЗаписьПроведение

	// РежимЗаписи
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// ЭтоSolvo
	ЭтоSolvo = ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo;
	ДополнительныеСвойства.Вставить("ЭтоSolvo", ЭтоSolvo);
	
	Если ЭтоSolvo Тогда
		
		// НеобходимоПроведениеДокументаПоСтатусуSolvo
		ОписаниеСтатусаSolvo = МенеджерДокумента.ОписаниеСтатусаSolvo(СтатусSolvo);
		ТипыСтатусовSolvo = МенеджерДокумента.ТипыСтатусовSolvo();
		НеобходимоПроведениеДокументаПоСтатусуSolvo = ОписаниеСтатусаSolvo = ТипыСтатусовSolvo.СогласованиеСЕРП
			Или ОписаниеСтатусаSolvo = ТипыСтатусовSolvo.КонечныйИнформативный;
		
		ДополнительныеСвойства.Вставить(
			"НеобходимоПроведениеДокументаПоСтатусуSolvo",
			НеобходимоПроведениеДокументаПоСтатусуSolvo);
		
	КонецЕсли;
	
	Если ЕстьАлкогольнаяПродукция Тогда
		
		// ТТНИсходящаяЕГАИС
		Если ЭтоНовый() Тогда
			ДанныеТТНИсходящей = Документы.ТТНИсходящаяЕГАИС.бг_ДанныеТТНИсходящейПоСвязанномуДокументу(РасходныйОрдерНаТовары);
		Иначе
			ДанныеТТНИсходящей = Документы.ТТНИсходящаяЕГАИС.бг_ДанныеТТНИсходящейПоСвязанномуДокументу(Ссылка);
		КонецЕсли;
		
		Если ДанныеТТНИсходящей <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("ТТНИсходящаяЕГАИС", ДанныеТТНИсходящей.Документ);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти // Конец СвойстваЗаписьПроведение
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
#Область СвойстваПроведение

	// ДатаНачалаОбработки
	ДополнительныеСвойства.Вставить("ДатаНачалаОбработки", ТекущаяДатаСеанса());
	
#КонецОбласти // Конец СвойстваПроведение

КонецПроцедуры

Процедура ПроверитьДанныеПередОтражениемВУчете(Отказ)

	Если ЕстьАлкогольнаяПродукция Тогда
		Если ДополнительныеСвойства.ЭтоSolvo Тогда
			Если ДополнительныеСвойства.НеобходимоПроведениеДокументаПоСтатусуSolvo И Марки.Количество() = 0 Тогда
				бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнены марки.'"), Ссылка, Отказ);
			КонецЕсли;
		Иначе
			Если Штрихкоды.Количество() = 0 Тогда
				бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнены штрихкоды.'"), Ссылка, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеДокументаНеСоответствующиеСтатусуSolvo()
	
	Если ДополнительныеСвойства.ЭтоSolvo И Не ДополнительныеСвойства.НеобходимоПроведениеДокументаПоСтатусуSolvo Тогда
		Марки.Очистить();
		Упаковки.Очистить();
		Товары.Очистить();
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСоШтрихкодами

Процедура ПодготовитьТоварыПоШтрихкодам(Отказ)

	Если Отказ Или Не ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
			
	ДополнительныеСвойства.Вставить("ТоварыПоШтрихкодам", ТоварыПоШтрихкодам());

КонецПроцедуры

Процедура ПроверитьСоответствиеТоваровПоШтрихкодам(Отказ)
	
	Если Отказ Или Не ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ТоварыПоШтрихкодамСовпадают(ДополнительныеСвойства.ТоварыПоШтрихкодам, Ложь);
	
	Если Не РезультатПроверки.ТаблицыСовпадают Тогда
		бг_WMS.СообщитьПользователю(
			бг_МаркируемаяПродукция.ТекстОшибкиРасхожденийТоваровПоМаркамИВДокументе(),
			Ссылка,
			Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Конец РаботаСоШтрихкодами

#Область ЗаполнениеРасходногоОрдера

Процедура ПроверитьВозможностьПроведенияСвязьСПереупаковкой(Отказ)

	// Проверка оформления переупаковки совместно с отгрузкой.
	Если Не ЗначениеЗаполнено(Переупаковка) Или Не ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;

	ПереупаковкаЗагружена = ОбщегоНазначения.СсылкаСуществует(Переупаковка);
	
	Если ПереупаковкаЗагружена Тогда
		ПереупаковкаПроведена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Переупаковка, "Проведен");
	Иначе
		ПереупаковкаПроведена = Ложь;
	КонецЕсли;
	
	Если Не ПереупаковкаЗагружена Или Не ПереупаковкаПроведена Тогда
		
		бг_WMS.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Совместно с ордером оформлена переупаковка, которая еще не %1.'"),
				?(Не ПереупаковкаЗагружена, НСтр("ru='загружена'"), НСтр("ru='проведена'"))),
			Ссылка,	
			Отказ);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьИдентификаторыТоваров(Отказ)
	
	КлючевыеПоля = "Номенклатура, Серия";
	ПроверяемыеТовары = Товары.Выгрузить(, КлючевыеПоля);
	ПроверяемыеТовары.Свернуть(КлючевыеПоля);
	
	Если бг_Номенклатура.ЕстьБитыеСсылкиВТоварах(ПроверяемыеТовары) Тогда
		бг_WMS.СообщитьПользователю(
			НСтр("ru='Из внешней системы загружены товары с некорректными идентификаторами.'"),
			Ссылка,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ТоварыВБазеДанных()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Номенклатура КАК Номенклатура,
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Серия КАК Серия,
	|	СУММА(битОтражениеФактаПоРасходномуОрдеруТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру.Товары КАК битОтражениеФактаПоРасходномуОрдеруТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО битОтражениеФактаПоРасходномуОрдеруТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО битОтражениеФактаПоРасходномуОрдеруТовары.Серия = СправочникСерииНоменклатуры.Ссылка
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Ссылка = &Ссылка
	|	И СправочникСерииНоменклатуры.бг_Номенклатура = СправочникНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Серия,
	|	битОтражениеФактаПоРасходномуОрдеруТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НужноИзменитьОрдер()

	// Если реквизиты шапки ордера не удовлетворяют условиям, то изменение ордера необходимо вне зависимости от товаров.
	РеквизитыОрдера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РасходныйОрдерНаТовары, "Статус, Проведен");
	
	Если РеквизитыОрдера.Статус <> Перечисления.СтатусыРасходныхОрдеров.Отгружен
		Или Не РеквизитыОрдера.Проведен Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// Если реквизиты шапки ордера не удовлетворяют условиям, нужно проверить состав товаров.
	ПоляДляСравнения = "Номенклатура, Серия, Количество";
	ТоварыДокумента = Товары.Выгрузить(, ПоляДляСравнения);
	ТоварыДокумента.Свернуть("Номенклатура, Серия", "Количество");
	
	ТоварыОрдера = ТоварыОрдера();
	ТоварыОрдера.Индексы.Добавить(ПоляДляСравнения);
	
	РезультатСравненияТаблиц = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ТоварыДокумента,
		ТоварыОрдера,
		Истина);
		
	Возврат Не РезультатСравненияТаблиц.ТаблицыСовпадают;

КонецФункции

Процедура ВнестиИзмененияВОрдер(Распоряжение, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РасходныйОрдерНаТоварыОбъект = РасходныйОрдерНаТовары.ПолучитьОбъект();
	
	РасходныйОрдерНаТоварыОбъект.ПометкаУдаления = Ложь;
	РасходныйОрдерНаТоварыОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	РасходныйОрдерНаТоварыОбъект.ДатаОтгрузки = Дата;
	
	РасходныйОрдерНаТоварыОбъект.ТоварыПоРаспоряжениям.Очистить();
	РасходныйОрдерНаТоварыОбъект.ОтгружаемыеТовары.Очистить();
	
	Если ДополнительныеСвойства.ЭтоSolvo Тогда
		
		Серии = Новый Массив;
		Для каждого СтрокаТовары Из Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Серия)
				И Серии.Найти(СтрокаТовары.Серия) = Неопределено Тогда
				
				Серии.Добавить(СтрокаТовары.Серия);
			КонецЕсли;
		КонецЦикла;
		
		УпаковкиПаллетыСерий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Серии, "бг_УпаковкаПаллета");
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Товары Цикл
	
		НоваяСтрокаТоварыПоРаспоряжениям = РасходныйОрдерНаТоварыОбъект.ТоварыПоРаспоряжениям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыПоРаспоряжениям, СтрокаТовары);
		НоваяСтрокаТоварыПоРаспоряжениям.Распоряжение = Распоряжение;
		
		Если ЗначениеЗаполнено(СтрокаТовары.Серия) И ДополнительныеСвойства.ЭтоSolvo Тогда
			УпаковкаПаллета = УпаковкиПаллетыСерий.Получить(СтрокаТовары.Серия);
			Если ЗначениеЗаполнено(УпаковкаПаллета) Тогда
				НоваяСтрокаТоварыПоРаспоряжениям.бг_УпаковкаПаллета = УпаковкаПаллета;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрокаОтгружаемыеТовары = РасходныйОрдерНаТоварыОбъект.ОтгружаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгружаемыеТовары, СтрокаТовары);
		НоваяСтрокаОтгружаемыеТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		НоваяСтрокаОтгружаемыеТовары.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(
		РасходныйОрдерНаТоварыОбъект,
		Документы.РасходныйОрдерНаТовары);
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		РасходныйОрдерНаТоварыОбъект,
		ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		РасходныйОрдерНаТоварыОбъект,
		ПараметрыУказанияСерий.ОтгружаемыеТовары);
	
	РасходныйОрдерНаТоварыОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция ТоварыОрдера()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия КАК Серия,
	|	СУММА(РасходныйОрдерНаТоварыОтгружаемыеТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ОтгружаемыеТовары КАК РасходныйОрдерНаТоварыОтгружаемыеТовары
	|ГДЕ
	|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Ссылка = &РасходныйОрдерНаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Серия,
	|	РасходныйОрдерНаТоварыОтгружаемыеТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти // Конец ЗаполнениеРасходногоОрдера

#Область ЗаполнениеЗаказаКлиента

Процедура ВнестиИзмененияВЗаказ(Заказ, РасхожденияСерийЗаказФакт, Отказ)

	ЗаказОбъект = Заказ.ПолучитьОбъект();
	
	НеобрабатываемыеСтроки = ВыделитьСтрокиВЗаказеКоторыеНельзяИзменять(ЗаказОбъект, РасхожденияСерийЗаказФакт);
	РаспределитьТоварыПоСериямВЗаказе(ЗаказОбъект, РасхожденияСерийЗаказФакт, НеобрабатываемыеСтроки);
	УстановитьПараметрыУказанияСерийВЗаказе(ЗаказОбъект, НеобрабатываемыеСтроки);
	СвернутьТоварыПоСериямВЗаказе(ЗаказОбъект);
	ВыполнитьПостОбработкуЗаказа(ЗаказОбъект);
	ВыполнитьПроверкуТоваровДоПослеВЗаказе(ЗаказОбъект, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказОбъект.ДополнительныеСвойства.Вставить("бг_ЭтоОбновлениеЗаказаWMS", Истина);
	ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция РаспоряжениеОрдера(Отказ)

	РаспоряженияОрдера = РаспоряженияОрдера();
	Если РаспоряженияОрдера.Количество() <> 1 Тогда
		бг_WMS.СообщитьПользователю(НСтр("ru='В ордере ожидается только одно распоряжение.'"), Ссылка, Отказ);
		Возврат Неопределено;
	Иначе
		Возврат РаспоряженияОрдера[0];
	КонецЕсли;
		
КонецФункции

Функция РаспоряженияОрдера()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение КАК Распоряжение
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &РасходныйОрдерНаТовары";
	
	Запрос.УстановитьПараметр("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Распоряжение");
		
КонецФункции

Функция РасхожденияСерийЗаказФакт(ЗаказКлиента)

	// Вычитаем из товаров, которые осталось отгрузить, товары, которые отгружаются в данном документе.
	// Если образуется минус - то это те серии, которые в заказе необходимо заменить.
	// Ордер, на который ссылается документ, может быть проведен. Чтобы не снимать с проведения ордер,
	// к остаткам товаров к отгрузке прибавляем расходные движения, совершенные ордером, чтобы получить остатки
	// без учета движений ордера - нужна картина остатков к отгрузке заказа за вычетом того, что уже отгружено без учета
	// текущего потенциально изменяемого ордера.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтгружаемыеТовары.Номенклатура КАК Номенклатура,
	|	ОтгружаемыеТовары.Серия КАК Серия,
	|	ОтгружаемыеТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ОтгружаемыеТовары
	|ИЗ
	|	&ОтгружаемыеТовары КАК ОтгружаемыеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Серия КАК Серия,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК Количество
	|ПОМЕСТИТЬ ВТ_РасхожденияПоТоварамГруппировать
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки = &ЗаказКлиента) КАК ТоварыКОтгрузкеОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Серия,
	|	ТоварыКОтгрузкеОбороты.КОтгрузкеРасход
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , Регистратор, ) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ТоварыКОтгрузкеОбороты.Регистратор = &РасходныйОрдерНаТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ОтгружаемыеТовары.Номенклатура,
	|	ВТ_ОтгружаемыеТовары.Серия,
	|	-ВТ_ОтгружаемыеТовары.Количество
	|ИЗ
	|	ВТ_ОтгружаемыеТовары КАК ВТ_ОтгружаемыеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РасхожденияПоТоварамГруппировать.Номенклатура КАК Номенклатура,
	|	ВТ_РасхожденияПоТоварамГруппировать.Серия КАК Серия,
	|	СУММА(ВТ_РасхожденияПоТоварамГруппировать.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользоватьСерии = ИСТИНА
	|				И СправочникНоменклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры)
	|			ТОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК УпаковкаПаллета,
	|	ВЫБОР
	|		КОГДА СУММА(ВТ_РасхожденияПоТоварамГруппировать.Количество) > 0
	|			ТОГДА ""СверхПотребности""
	|		ИНАЧЕ ""Нехватка""
	|	КОНЕЦ КАК ТипРасхождения
	|ИЗ
	|	ВТ_РасхожденияПоТоварамГруппировать КАК ВТ_РасхожденияПоТоварамГруппировать
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ВТ_РасхожденияПоТоварамГруппировать.Серия = СерииНоменклатуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ВТ_РасхожденияПоТоварамГруппировать.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РасхожденияПоТоварамГруппировать.Серия,
	|	ВТ_РасхожденияПоТоварамГруппировать.Номенклатура,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ИспользоватьСерии = ИСТИНА
	|				И СправочникНоменклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры)
	|			ТОГДА ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_РасхожденияПоТоварамГруппировать.Количество) <> 0";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("ОтгружаемыеТовары", Товары.Выгрузить());
	Запрос.УстановитьПараметр("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
	
	РасхожденияСерийЗаказФакт = Запрос.Выполнить().Выгрузить();
	
	Возврат РасхожденияСерийЗаказФакт;
	
КонецФункции

Функция НеобходимоЗаменятьСерииВЗаказе(РасхожденияСерийЗаказФакт)

	Возврат РасхожденияСерийЗаказФакт.НайтиСтроки(Новый Структура("ТипРасхождения", "Нехватка")).Количество() > 0;		

КонецФункции

Функция ВыделитьСтрокиВЗаказеКоторыеНельзяИзменять(ЗаказОбъект, РасхожденияСерийЗаказФакт)

	// Необходимо строки заказа, которые уже отгружены/реализованы, оставить в табличной части без изменений,
	// выделить и запомнить эти строки - в них нельзя изменять серии, т.к. они уже отгружены и по ним есть движения.
	// Различаем два вида таких строк, которые нельзя изменять:
	// 1. Реализованные строки - строки, по которым уже оформлена реализация. В этих строках нельзя изменять даже
	// КодСтроки, т.к. по нему есть расходные движения, например, по регистру ЗаказыКлиентов.
	// 2. Отгруженные строки - строки, по которым оформлены расходные ордера, но еще не оформлена реализация.
	// У таких строк необязательно оставлять неизменным КодСтроки, но нужно обеспечить неизменность серии.
	
	ИзменяемаяНоменклатура = РасхожденияСерийЗаказФакт.ВыгрузитьКолонку("Номенклатура");
	
	НеобрабатываемыеСтроки = Новый Массив;
	
	РеализованныеТовары = РеализованныеПоЗаказуТовары(ЗаказОбъект.Ссылка, ИзменяемаяНоменклатура);	
	
	ВыделитьСтрокиВЗаказеПоРеализованнымТоварам(
		ЗаказОбъект,
		РеализованныеТовары,
		НеобрабатываемыеСтроки);
		
	ОтгруженныеТовары = ОтгруженныеВОрдерахПоЗаказуТовары(
		ЗаказОбъект.Ссылка,
		ИзменяемаяНоменклатура,
		РеализованныеТовары);
		
	ВыделитьСтрокиВЗаказеПоОтгруженнымТоварам(
		ЗаказОбъект,
		ОтгруженныеТовары,
		НеобрабатываемыеСтроки);
		
	Возврат НеобрабатываемыеСтроки;	
	
КонецФункции

Процедура ВыделитьСтрокиВЗаказеПоРеализованнымТоварам(ЗаказОбъект, РеализованныеТовары, НеобрабатываемыеСтроки)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	
	Для каждого СтрокаРеализованныйТовар Из РеализованныеТовары Цикл
	
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("КодСтроки", СтрокаРеализованныйТовар.КодСтроки);
		ПараметрыПоиска.Вставить("Отменено", Ложь);
		
		// Найти по каждому реализованному товару строки в заказе; оставить в строках то количество,
		//  которое отгружено - его нельзя изменять; запомнить эти строки.
		НайденныеСтрокиТоварыЗаказ = ЗаказОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
		
		ОсталосьСписать = СтрокаРеализованныйТовар.Количество;
		
		Для каждого СтрокаТоварыЗаказ Из НайденныеСтрокиТоварыЗаказ Цикл
			
			Если НеобрабатываемыеСтроки.Найти(СтрокаТоварыЗаказ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Запоминаем старую строку, ее в дальнейшем нельзя будет модифицировать.
			НеобрабатываемыеСтроки.Добавить(СтрокаТоварыЗаказ);
			
			Если СтрокаТоварыЗаказ.Количество <= ОсталосьСписать Тогда
				
				// В строке заказа количество меньше, чем реализовано. Полностью запоминаем эту строку, ее не нужно изменять.
				ОсталосьСписать = ОсталосьСписать - СтрокаТоварыЗаказ.Количество;
				
			Иначе
				
				// Сразу под старой строкой заказа создаем новую.
				НоваяСтрокаТоварыЗаказ = ЗаказОбъект.Товары.Вставить(ЗаказОбъект.Товары.Индекс(СтрокаТоварыЗаказ) + 1);
				
				// Заполняем все поля по старой строке, кроме рассчитываемых и кода строки.
				ЗаполнитьЗначенияСвойств(
					НоваяСтрокаТоварыЗаказ,
					СтрокаТоварыЗаказ,
					, // СписокСвойств
					"Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки,
					| КодСтроки, КлючСвязи, ИдентификаторСтроки");
					
				// Если в строке заказа количество больше чем реализовано, то нужно в строке оставить только реализованное,
				//  а остаток вынести в новую строку - по нему может быть заменена серия.
				НоваяСтрокаТоварыЗаказ.Количество = СтрокаТоварыЗаказ.Количество - ОсталосьСписать;
				СтрокаТоварыЗаказ.Количество = ОсталосьСписать;
				ОсталосьСписать = 0;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоварыЗаказ, СтруктураДействий, Неопределено);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТоварыЗаказ, СтруктураДействий, Неопределено);
				
				Если ЗначениеЗаполнено(НоваяСтрокаТоварыЗаказ.Упаковка) Тогда
					
					// Если по новой строке получилось дробное количество упаковок, то необходимо разбить строки.
					//  Если по старой строке получилось дробное количество упаковок - здесь ничего не сделать, т.к. есть движения по
					//  существующему коду строки, нужно оставить дробные упаковки.
					ОбработатьРазделениеСтрокНаЦелыеУпаковки(ЗаказОбъект, НоваяСтрокаТоварыЗаказ, СтруктураПересчетаСуммы);
				КонецЕсли;
			КонецЕсли;
			
			Если ОсталосьСписать = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Во всех остальных строках, которые можно модифицировать, код строки очищаем.
	Для каждого СтрокаТоварыЗаказ Из ЗаказОбъект.Товары Цикл
	
		Если НеобрабатываемыеСтроки.Найти(СтрокаТоварыЗаказ) = Неопределено Тогда
			СтрокаТоварыЗаказ.КодСтроки = 0;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РеализованныеПоЗаказуТовары(ЗаказКлиента, ИзменяемаяНоменклатура)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыКлиентовОбороты.Номенклатура КАК Номенклатура,
	|	ЗаказыКлиентовОбороты.КодСтроки КАК КодСтроки,
	|	ЗаказыКлиентовОбороты.КОформлениюРасход КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Обороты(
	|			,
	|			,
	|			,
	|			ЗаказКлиента = &ЗаказКлиента
	|				И Номенклатура В (&ИзменяемаяНоменклатура)) КАК ЗаказыКлиентовОбороты";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("ИзменяемаяНоменклатура", ИзменяемаяНоменклатура);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВыделитьСтрокиВЗаказеПоОтгруженнымТоварам(ЗаказОбъект, ОтгруженныеТовары, НеобрабатываемыеСтроки)

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	
	Для каждого СтрокаОтгруженныйТовар Из ОтгруженныеТовары Цикл
	
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", СтрокаОтгруженныйТовар.Номенклатура);
		ПараметрыПоиска.Вставить("КодСтроки",    0);
		ПараметрыПоиска.Вставить("Отменено",     Ложь);
		
		// Найти по каждому отгруженному товару строки в заказе; оставить в строках то количество,
		//  которое отгружено - его нельзя изменять; запомнить эти строки.
		НайденныеСтрокиТоварыЗаказ = ЗаказОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
		
		ОсталосьСписать = СтрокаОтгруженныйТовар.Количество;
		
		Для каждого СтрокаТоварыЗаказ Из НайденныеСтрокиТоварыЗаказ Цикл
			
			Если НеобрабатываемыеСтроки.Найти(СтрокаТоварыЗаказ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Запоминаем старую строку, ее в дальнейшем нельзя будет модифицировать.
			НеобрабатываемыеСтроки.Добавить(СтрокаТоварыЗаказ);
			
			Если СтрокаТоварыЗаказ.Количество <= ОсталосьСписать Тогда
				
				// В строке заказа количество меньше, чем реализовано. Полностью запоминаем эту строку, ее не нужно изменять.
				ОсталосьСписать = ОсталосьСписать - СтрокаТоварыЗаказ.Количество;
				
			Иначе
				
				// Сразу под старой строкой заказа создаем новую.
				НоваяСтрокаТоварыЗаказ = ЗаказОбъект.Товары.Вставить(ЗаказОбъект.Товары.Индекс(СтрокаТоварыЗаказ) + 1);
				
				// Заполняем все поля по старой строке, кроме рассчитываемых и кода строки.
				ЗаполнитьЗначенияСвойств(
					НоваяСтрокаТоварыЗаказ,
					СтрокаТоварыЗаказ,
					, // СписокСвойств
					"Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки,
					| КлючСвязи, ИдентификаторСтроки");
					
				// Если в строке заказа количество больше чем отгружено, то нужно в строке оставить только отгруженное,
				//  а остаток вынести в новую строку - по нему может быть заменена серия.
				НоваяСтрокаТоварыЗаказ.Количество = СтрокаТоварыЗаказ.Количество - ОсталосьСписать;
				СтрокаТоварыЗаказ.Количество = ОсталосьСписать;
				ОсталосьСписать = 0;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоварыЗаказ, СтруктураДействий, Неопределено);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТоварыЗаказ, СтруктураДействий, Неопределено);
				
				Если ЗначениеЗаполнено(НоваяСтрокаТоварыЗаказ.Упаковка) Тогда
					
					// Если по новой строке получилось дробное количество упаковок, то необходимо разбить строки.
					//  Если по старой строке получилось дробное количество упаковок - здесь ничего не сделать, т.к. есть движения по
					//  существующему коду строки, нужно оставить дробные упаковки.
					ОбработатьРазделениеСтрокНаЦелыеУпаковки(ЗаказОбъект, НоваяСтрокаТоварыЗаказ, СтруктураПересчетаСуммы);
				КонецЕсли;
			КонецЕсли;
			
			Если ОсталосьСписать = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтгруженныеВОрдерахПоЗаказуТовары(ЗаказКлиента, ИзменяемаяНоменклатура, РеализованныеТовары)

	// Ввиду того, что по уже реализованным товарам (есть реализация) также были расходные движения,
	// необходимо вычесть из отгруженных товаров те, которые были реализованы.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализованныеТовары.Номенклатура КАК Номенклатура,
	|	РеализованныеТовары.Количество КАК Количество
	|ПОМЕСТИТЬ РеализованныеТовары
	|ИЗ
	|	&РеализованныеТовары КАК РеализованныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОбороты.Номенклатура КАК Номенклатура,
	|	СУММА(ТоварыНаСкладахОбороты.ВНаличииРасход) КАК Количество
	|ПОМЕСТИТЬ ОтгруженыеТоварыМинусРеализованныеСгруппировать
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Номенклатура В (&ИзменяемаяНоменклатура)
	|				И Склад = &Склад) КАК ТоварыНаСкладахОбороты
	|ГДЕ
	|	ТоварыНаСкладахОбороты.Регистратор В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК РасходныйОрдерНаТовары
	|			ИЗ
	|				Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|			ГДЕ
	|				РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &ЗаказКлиента)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОбороты.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализованныеТовары.Номенклатура,
	|	-РеализованныеТовары.Количество
	|ИЗ
	|	РеализованныеТовары КАК РеализованныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтгруженыеТоварыМинусРеализованныеСгруппировать.Номенклатура КАК Номенклатура,
	|	СУММА(ОтгруженыеТоварыМинусРеализованныеСгруппировать.Количество) КАК Количество
	|ИЗ
	|	ОтгруженыеТоварыМинусРеализованныеСгруппировать КАК ОтгруженыеТоварыМинусРеализованныеСгруппировать
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтгруженыеТоварыМинусРеализованныеСгруппировать.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ОтгруженыеТоварыМинусРеализованныеСгруппировать.Количество) > 0";

	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("ИзменяемаяНоменклатура", ИзменяемаяНоменклатура);
	Запрос.УстановитьПараметр("Склад", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РасходныйОрдерНаТовары, "Склад"));
	Запрос.УстановитьПараметр("РеализованныеТовары", РеализованныеТовары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура РаспределитьТоварыПоСериямВЗаказе(ЗаказОбъект, РасхожденияСерийЗаказФакт, НеобрабатываемыеСтроки)

	ПричинаОтмены = бг_КонстантыПовтИсп.ЗначениеКонстанты("ПричинаЗаменыСерииВЗаказеКлиентаПоРезультатамСборкиНаСкладе");
	
	СтрокиНедостающиеСерии = РасхожденияСерийЗаказФакт.НайтиСтроки(Новый Структура("ТипРасхождения", "Нехватка"));
	
	ТаблицаЛишниеСерии = РасхожденияСерийЗаказФакт.Скопировать(
		РасхожденияСерийЗаказФакт.НайтиСтроки(
			Новый Структура("ТипРасхождения", "СверхПотребности")));
	
	// Все действия направлены лишь на разделение строк товаров по сериям. Ключевые поля в строках не меняются.
	//  Уже реализованные товары не изменюятся, в них сохраняется исходный код строки и отгруженное количество.
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	
	// Обходим товары, которых не хватает в заказе - была указана новая серия при отгрузке.
	Для каждого СтрокаНедостающаяСерия Из СтрокиНедостающиеСерии Цикл
		
		СтрокаНедостающаяСерия.Количество = -СтрокаНедостающаяСерия.Количество;
		
		// Находим все строки по номенклатуре в заказе, без уточнения серии по пустому коду строки
		//  - это строки, которые еще не реализованы (реализованные с заполненным кодом строки).
		ПараметрыПоискаНоменклатура = Новый Структура;
		ПараметрыПоискаНоменклатура.Вставить("Номенклатура", СтрокаНедостающаяСерия.Номенклатура);
		ПараметрыПоискаНоменклатура.Вставить("КодСтроки", 0);
		ПараметрыПоискаНоменклатура.Вставить("Отменено", Ложь);
		
		Если ДополнительныеСвойства.ЭтоSolvo
			И ЗначениеЗаполнено(СтрокаНедостающаяСерия.УпаковкаПаллета) Тогда
			
			ПараметрыПоискаНоменклатура.Вставить("бг_УпаковкаПаллета", СтрокаНедостающаяСерия.УпаковкаПаллета);
		КонецЕсли;
		
		СтрокиНоменклатураТоварыЗаказ = ЗаказОбъект.Товары.НайтиСтроки(ПараметрыПоискаНоменклатура);
		
		ОсталосьСписать = СтрокаНедостающаяСерия.Количество;
		
		Для каждого СтрокаТоварыЗаказ Из СтрокиНоменклатураТоварыЗаказ Цикл
			
			// Можем заменить серию только в строках заказа, которые еще не были реализованы или отгружены другими ордерами.
			Если НеобрабатываемыеСтроки.Найти(СтрокаТоварыЗаказ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Можем заменить серию, отличную от той, которую ищем, по этой итак недостаток.
			Если СтрокаТоварыЗаказ.Серия = СтрокаНедостающаяСерия.Серия Тогда
				Продолжить;
			КонецЕсли;
			
			// Можем заменить только из пула серий, остаток по которым избыточен.
			ПараметрыПоискаЛишнихСерий = Новый Структура("Номенклатура, Серия");
			ЗаполнитьЗначенияСвойств(ПараметрыПоискаЛишнихСерий, СтрокаТоварыЗаказ);
			
			СтрокиЛишниеСерии = ТаблицаЛишниеСерии.НайтиСтроки(ПараметрыПоискаЛишнихСерий);
			Если СтрокиЛишниеСерии.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеЛишнейСерии = СтрокиЛишниеСерии[0];
			
			ВозможноСписать = Мин(ДанныеЛишнейСерии.Количество,	ОсталосьСписать);
			СерияУказанаПриПланированииОтгрузки = ЗначениеЗаполнено(СтрокаТоварыЗаказ.Серия);
			
			Если СтрокаТоварыЗаказ.Количество <= ВозможноСписать Тогда
				
				// Если в заказе при планировании отгрузки не указывали серию, то такую строку отменять не надо.
				ОтмененнаяКопияСтроки = Неопределено;
				Если СерияУказанаПриПланированииОтгрузки Тогда 
					// Вставляем полную копию строки перед текущей, отменяем.
					ОтмененнаяКопияСтроки = ВставитьОтмененнуюКопиюСтроки(
												ЗаказОбъект,
												СтрокаТоварыЗаказ,
												ПричинаОтмены);
				КонецЕсли;
				
				// В текущей строке заменяем серию.
				ОсталосьСписать = ОсталосьСписать - СтрокаТоварыЗаказ.Количество;
				ДанныеЛишнейСерии.Количество = ДанныеЛишнейСерии.Количество - СтрокаТоварыЗаказ.Количество;
				
				СтрокаТоварыЗаказ.Серия = СтрокаНедостающаяСерия.Серия;
				
				НеобрабатываемыеСтроки.Добавить(СтрокаТоварыЗаказ);
				
			Иначе
				
				// В строку с новой серией поместим только нужное количество, в старой строке оставим дельту.
				СтрокаТоварыЗаказ.Количество = СтрокаТоварыЗаказ.Количество - ВозможноСписать;
				
				// Если в заказе при планировании отгрузки не указывали серию, то такую строку отменять не надо.
				ОтмененнаяКопияСтроки = Неопределено;
				Если СерияУказанаПриПланированииОтгрузки Тогда 
					// Вставляем полную копию строки перед текущей, отменяем.
					ОтмененнаяКопияСтроки = ВставитьОтмененнуюКопиюСтроки(
												ЗаказОбъект,
												СтрокаТоварыЗаказ,
												ПричинаОтмены);
					ОтмененнаяКопияСтроки.Количество = ВозможноСписать;
				КонецЕсли;
				
				// Вставляем копию строки ниже с новой серией.
				НоваяСтрокаТоварыЗаказ = ЗаказОбъект.Товары.Вставить(ЗаказОбъект.Товары.Индекс(СтрокаТоварыЗаказ) + 1);
				
				// Заполняем все поля по старой строке, кроме рассчитываемых.
				ЗаполнитьЗначенияСвойств(
					НоваяСтрокаТоварыЗаказ,
					СтрокаТоварыЗаказ,
					, // СписокСвойств
					"Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки,
					| КлючСвязи, ИдентификаторСтроки, Серия");
					
				НоваяСтрокаТоварыЗаказ.Серия = СтрокаНедостающаяСерия.Серия;
				НоваяСтрокаТоварыЗаказ.Количество = ВозможноСписать;
				
				ОсталосьСписать = ОсталосьСписать - ВозможноСписать;
				
				ДанныеЛишнейСерии.Количество = ДанныеЛишнейСерии.Количество - ВозможноСписать;
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				СтрокиКОбработке = Новый Массив;
				Если СерияУказанаПриПланированииОтгрузки Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ОтмененнаяКопияСтроки, СтруктураДействий, Неопределено);
					СтрокиКОбработке.Добавить(ОтмененнаяКопияСтроки);
				КонецЕсли;	
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоварыЗаказ, СтруктураДействий, Неопределено);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТоварыЗаказ, СтруктураДействий, Неопределено);
				
				СтрокиКОбработке.Добавить(СтрокаТоварыЗаказ);
				СтрокиКОбработке.Добавить(НоваяСтрокаТоварыЗаказ);
				бг_ЗаказыКлиентов.ПересчитатьКоличествоКоробокИПаллетВТЧ(СтрокиКОбработке);
				
				// Если по новой или старой строке получилось дробное количество упаковок, то необходимо разбить строки.
				ОбработатьРазделениеСтрокНаЦелыеУпаковки(ЗаказОбъект, СтрокаТоварыЗаказ, СтруктураПересчетаСуммы);
				ОбработатьРазделениеСтрокНаЦелыеУпаковки(ЗаказОбъект, НоваяСтрокаТоварыЗаказ, СтруктураПересчетаСуммы);
			КонецЕсли;
			
			Если ДанныеЛишнейСерии.Количество = 0 Тогда
				ТаблицаЛишниеСерии.Удалить(ДанныеЛишнейСерии);
			КонецЕсли;
			
			Если ОсталосьСписать = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьПараметрыУказанияСерийВЗаказе(ЗаказОбъект, НеобрабатываемыеСтроки)
	
	ТоварыКОбработке = Новый Массив;
	
    Для каждого СтрокаТовары Из ЗаказОбъект.Товары Цикл
	
		Если Не ЗначениеЗаполнено(СтрокаТовары.Серия)
			Или НеобрабатываемыеСтроки.Найти(СтрокаТовары.Серия) <> Неопределено
			Или СтрокаТовары.Отменено Тогда
			
			Продолжить;
		КонецЕсли;
		
		ТоварыКОбработке.Добавить(СтрокаТовары);
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(
		ЗаказОбъект,
		Документы.ЗаказКлиента);
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		ЗаказОбъект,
		ПараметрыУказанияСерий,
		ТоварыКОбработке);

КонецПроцедуры

Функция ВставитьОтмененнуюКопиюСтроки(ЗаказОбъект, СтрокаТоварыЗаказ, ПричинаОтмены)

	ОтмененнаяКопияСтроки = ЗаказОбъект.Товары.Вставить(ЗаказОбъект.Товары.Индекс(СтрокаТоварыЗаказ));
	ЗаполнитьЗначенияСвойств(ОтмененнаяКопияСтроки, СтрокаТоварыЗаказ);
	ОтмененнаяКопияСтроки.Отменено = Истина;
	ОтмененнаяКопияСтроки.ПричинаОтмены = ПричинаОтмены;

	Возврат ОтмененнаяКопияСтроки;
	
КонецФункции

Процедура ОбработатьРазделениеСтрокНаЦелыеУпаковки(ЗаказОбъект, СтрокаТоварыЗаказ, СтруктураПересчетаСуммы)

	Если Не ЗначениеЗаполнено(СтрокаТоварыЗаказ.Упаковка) Тогда
		Возврат;
	КонецЕсли;
		
	Если СтрокаТоварыЗаказ.КоличествоУпаковок = Цел(СтрокаТоварыЗаказ.КоличествоУпаковок) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТоварыЗаказ.КоличествоУпаковок = Цел(СтрокаТоварыЗаказ.КоличествоУпаковок);
	КоличествоВСтрокеДоПересчета = СтрокаТоварыЗаказ.Количество;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоварыЗаказ, СтруктураДействий, Неопределено);
	
	СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
	Дельта = КоличествоВСтрокеДоПересчета - СтрокаТоварыЗаказ.Количество;
	
	Если Дельта > 0 Тогда
		
		// Под новой строкой заказа создаем еще одну новую с пустой упаковкой, чтобы отнести на нее дельту.
		СтрокаТоварыЗаказДельта = ЗаказОбъект.Товары.Вставить(ЗаказОбъект.Товары.Индекс(СтрокаТоварыЗаказ) + 1);
		
		ЗаполнитьЗначенияСвойств(
			СтрокаТоварыЗаказДельта,
			СтрокаТоварыЗаказ,
			, // СписокСвойств
			"Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки,
			| КодСтроки, КлючСвязи, ИдентификаторСтроки, Упаковка");
			
		СтрокаТоварыЗаказДельта.Количество = Дельта;
		СтрокаТоварыЗаказДельта.КоличествоУпаковок = Дельта;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоварыЗаказДельта, СтруктураДействий, Неопределено);
	КонецЕсли;						

КонецПроцедуры

Процедура СвернутьТоварыПоСериямВЗаказе(ЗаказОбъект)
	
	// Строки, которые можно без последствий соединить друг с другом, имеют код строки = 0.
	КлючевыеПоля =
		"Номенклатура,
		|Серия,
		|Упаковка,
		|Отменено,
		|Цена,
		|КодСтроки,
		|ВариантОбеспечения,
		|бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения,
		|бг_ЗаказКлиентаИсточникОбеспечения,
		|бг_ЗаказПоставщикуИсточникОбеспечения,
		|бг_КодПозицииПредзаказаКлиента,
		|бг_КодСтрокиЗаявки,
		|бг_НомерПредзаказаКлиента,
		|бг_ПриходныйОрдерОбособленногоОбеспечения,
		|бг_УпаковкаПаллета";
	
	ТоварыВозможноСоединить = ЗаказОбъект.Товары.Выгрузить(Новый Структура("КодСтроки", 0), КлючевыеПоля);
	ТоварыВозможноСоединить.Свернуть(КлючевыеПоля);
	
	УдаляемыеСтрокиТовары = Новый Массив;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	
	Для каждого ОтборТоварыСоединить Из ТоварыВозможноСоединить Цикл
	
		ПараметрыПоиска = Новый Структура(КлючевыеПоля);
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ОтборТоварыСоединить);
		
		// К первой строке, попавшей под условия отбора, присоединяем другие строки.
		СтрокиТоварыСоединяемые = ЗаказОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
		
		Если СтрокиТоварыСоединяемые.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТоварыПриемник = СтрокиТоварыСоединяемые[0];
		
		Для ИндексСтрокиТовары = 1 По СтрокиТоварыСоединяемые.ВГраница() Цикл
			СтрокаТоварыИсточник = СтрокиТоварыСоединяемые[ИндексСтрокиТовары];
			СтрокаТоварыПриемник.Количество = СтрокаТоварыПриемник.Количество + СтрокаТоварыИсточник.Количество;
			УдаляемыеСтрокиТовары.Добавить(СтрокаТоварыИсточник);
		КонецЦикла;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоварыПриемник, СтруктураДействий, Неопределено);
		
	КонецЦикла;
	
	Для каждого СтрокаТоварыУдалить Из УдаляемыеСтрокиТовары Цикл
		ЗаказОбъект.Товары.Удалить(СтрокаТоварыУдалить);
	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьПостОбработкуЗаказа(ЗаказОбъект)
	
	СкидкиНаценкиСервер.ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(ЗаказОбъект, "Товары");
	бг_РасчетСкидок.ПрименитьТекущиеСкидкиНаценки(ЗаказОбъект);
	ЗаказОбъект.СкидкиРассчитаны = Истина;
	
	СуммаЗаказанныхСтрок = ЗаказОбъект.ПолучитьСуммуЗаказанныхСтрок();
	СуммаЗалоговойТары = ЗаказОбъект.ПолучитьСуммуЗаказанныхСтрок(Истина);
	
	Если ЗначениеЗаполнено(ЗаказОбъект.ГрафикОплаты) Тогда
		
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплатыДокументаПродажиПоГрафикуОплаты(
			ЗаказОбъект,
			СуммаЗаказанныхСтрок - СуммаЗалоговойТары,
			СуммаЗалоговойТары,
			Ложь);
			
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьПроверкуТоваровДоПослеВЗаказе(ЗаказОбъект, Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказОбъект.Ссылка);
	
	ТоварыЗаказПосле = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПоиска = Новый Структура("Отменено", Ложь);
	ТоварыЗаказДо = ЗаказОбъект.Товары.Выгрузить(ПараметрыПоиска, "Номенклатура, Количество");
	ТоварыЗаказДо.Свернуть("Номенклатура", "Количество");
	
	РезультатСравненияТаблиц = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ТоварыЗаказПосле,
		ТоварыЗаказДо,
		Ложь);
	
	Если Не РезультатСравненияТаблиц.ТаблицыСовпадают Тогда
			
		бг_WMS.СообщитьПользователю(
			НСтр("ru='Ошибка в алгоритме: товары в заказе до изменения не соответствуют товарам в заказе после'"),
			Ссылка,
			Отказ);
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Конец ЗаполнениеЗаказаКлиента

#Область ДвижениеМарок

Процедура СформироватьДвиженияПоМаркам(Отказ)
	
	Если Не ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);
	
	Если ДополнительныеСвойства.ЭтоSolvo Тогда
		ДанныеМарокФакт = Марки.Выгрузить();
		ДанныеМарокФакт.Индексы.Добавить("Штрихкод");
	КонецЕсли;
	
	Для каждого СтрокаТоварыПоШтрихкодам Из ДополнительныеСвойства.ТоварыПоШтрихкодам Цикл
		
		Запись = Движения.бг_ДвижениеМарок.Добавить();
		Запись.Период = Дата;
		Запись.ГУИДМарки = СтрокаТоварыПоШтрихкодам.ГУИДМарки;
		Запись.Серия = СтрокаТоварыПоШтрихкодам.Серия;
		
		Если ДополнительныеСвойства.ЭтоSolvo Тогда
			ДанныеМаркиФакт = ДанныеМарокФакт.Найти(СтрокаТоварыПоШтрихкодам.Штрихкод, "Штрихкод");
			Запись.КодУпаковки = ДанныеМаркиФакт.ШтрихкодРодитель;
		Иначе
			Запись.КодУпаковки = СтрокаТоварыПоШтрихкодам.ШтрихкодРодитель;
		КонецЕсли;
		
		Запись.СтатусМарки = СтатусыПоОперации.СтатусВключенаВОтгрузку;
		
	КонецЦикла;
	
	Если ДополнительныеСвойства.ЭтоSolvo Тогда
		Для каждого СтрокаУпаковки Из Упаковки Цикл
			Запись = Движения.бг_СоставУпаковок.Добавить();
			Запись.Период = Дата;
			Запись.КодУпаковки = СтрокаУпаковки.Штрихкод;
			Запись.КодВышестоящейУпаковки = СтрокаУпаковки.ШтрихкодРодитель;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец ДвижениеМарок

#Область ПоказателиРаботыОператоровWMS

#КонецОбласти // Конец ПоказателиРаботыОператоровWMS

Процедура ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ)

	Если Отказ
		Или ДополнительныеСвойства.Свойство("бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению")
		И ДополнительныеСвойства.бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("Распоряжение") Тогда
		Распоряжение = ДополнительныеСвойства.Распоряжение;
	Иначе 
		Распоряжение = РаспоряжениеОрдера(Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
	
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Распоряжение,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтразитьДополнительныеСведенияЗаказаКлиента,,
			РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.ПоказателиПоТипуДокумента(Ссылка));
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
