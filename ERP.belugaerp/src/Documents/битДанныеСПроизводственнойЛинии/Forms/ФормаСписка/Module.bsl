#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПроизводственнуюЛинию(Команда)
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаПроизводственнойЛинии", ЭтотОбъект);
		
		ПоказатьВводЗначения(
			Оповещение,
			,
			НСтр("ru = 'Выберите производственную линию'"),
			"СправочникСсылка.бг_ПроизводственныеЛинии"
		);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно установить статус. Не выбраны данные с производственной линии'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуРозлива(Команда)
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаДатыРозлива", ЭтотОбъект);
		
		ПоказатьВводДаты(
			Оповещение,
			,
			НСтр("ru = 'Укажите дату розлива'"),
			ЧастиДаты.Дата
		);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно установить статус. Не выбраны данные с производственной линии'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНоменклатуру(Команда)
	Если Элементы.Список.ВыделенныеСтроки.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеВводаНоменклатуры", ЭтотОбъект);
		
		ПоказатьВводЗначения(
			Оповещение,
			,
			НСтр("ru = 'Укажите номенклатуру'"),
			"СправочникСсылка.Номенклатура"
		);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно установить статус. Не выбраны данные с производственной линии'"));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусОтборПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Статус", СтатусОтбор,
											ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СтатусОтбор));
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОтборПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Номенклатура", НоменклатураОтбор,
											ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(НоменклатураОтбор));
КонецПроцедуры

&НаКлиенте
Процедура ДатаРозливаОтборПриИзменении(Элемент)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ДатаРозлива", ДатаРозливаОтбор,
											ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДатаРозливаОтбор));
КонецПроцедуры

&НаКлиенте
Процедура МаркаОтборПриИзменении(Элемент)
	СсылкиОтбор = Новый Массив;
	
	Если Не ПустаяСтрока(МаркаОтбор) Тогда
		СсылкиОтбор = ДокументыПоНомеруМарки(МаркаОтбор);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", СсылкиОтбор,
											ВидСравненияКомпоновкиДанных.ВСписке,, Не ПустаяСтрока(МаркаОтбор));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ДокументыПоНомеруМарки(НомерМарки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвижениеМарок.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК ДвижениеМарок
	|ГДЕ
	|	ДвижениеМарок.Марка = &Марка";
	Запрос.УстановитьПараметр("Марка", НомерМарки);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Регистратор");
КонецФункции

&НаКлиенте
Процедура ПослеВводаПроизводственнойЛинии(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		МассивСсылок = Элементы.Список.ВыделенныеСтроки;
		
		УстановитьПроизводственнуюЛинию(МассивСсылок, Результат);
		
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПроизводственнуюЛинию(МассивСсылок, ПроизводственнаяЛиния)
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru = 'Не удалось заблокировать %1. %2';
										|en = 'Cannot block %1. %2'");
	ШаблонОшибкиЗаписать          = НСтр("ru = 'Не удалось записать %1. %2';
										|en = 'Cannot save %1. %2'");
	
	Для Каждого ДанныеСПроизводственнойЛинии Из МассивСсылок Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ДанныеСПроизводственнойЛинии);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать, ДанныеСПроизводственнойЛинии, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеСПроизводственнойЛинии);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = ДанныеСПроизводственнойЛинии.ПолучитьОбъект();
		ДокументОбъект.ПроизводственнаяЛиния = ПроизводственнаяЛиния;
		
		Попытка
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьДвижений", Истина);
			ДокументОбъект.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, ДанныеСПроизводственнойЛинии, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеСПроизводственнойЛинии);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаДатыРозлива(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		МассивСсылок = Элементы.Список.ВыделенныеСтроки;
		
		УстановитьДатуРозлива(МассивСсылок, Результат);
		
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДатуРозлива(МассивСсылок, ДатаРозлива)
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru = 'Не удалось заблокировать %1. %2';
										|en = 'Cannot block %1. %2'");
	ШаблонОшибкиЗаписать          = НСтр("ru = 'Не удалось записать %1. %2';
										|en = 'Cannot save %1. %2'");
	
	Для Каждого ДанныеСПроизводственнойЛинии Из МассивСсылок Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ДанныеСПроизводственнойЛинии);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать, ДанныеСПроизводственнойЛинии, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеСПроизводственнойЛинии);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = ДанныеСПроизводственнойЛинии.ПолучитьОбъект();
		ДокументОбъект.ДатаРозлива = ДатаРозлива;
		
		НачатьТранзакцию();
		Попытка
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьДвижений", Истина);
			ДокументОбъект.Записать();
			
			УстановитьДатуРозливаВДвиженияхДокумента(ДанныеСПроизводственнойЛинии, ДатаРозлива);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, ДанныеСПроизводственнойЛинии, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеСПроизводственнойЛинии);
			
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДатуРозливаВДвиженияхДокумента(ДанныеСПроизводственнойЛинии, ДатаРозлива)
	НаборЗаписейДвиженияМарок = РегистрыСведений.бг_ДвижениеМарок.СоздатьНаборЗаписей();
	НаборЗаписейДвиженияМарок.Отбор.Регистратор.Установить(ДанныеСПроизводственнойЛинии);
	НаборЗаписейДвиженияМарок.Прочитать();
	Для Каждого СтрокаНабор Из НаборЗаписейДвиженияМарок Цикл
		СтрокаНабор.Период = ДатаРозлива;
	КонецЦикла;
	НаборЗаписейДвиженияМарок.Записать();
	
	НаборЗаписейСоставУпаковок = РегистрыСведений.бг_СоставУпаковок.СоздатьНаборЗаписей();
	НаборЗаписейСоставУпаковок.Отбор.Регистратор.Установить(ДанныеСПроизводственнойЛинии);
	НаборЗаписейСоставУпаковок.Прочитать();
	Для Каждого СтрокаНабор Из НаборЗаписейСоставУпаковок Цикл
		СтрокаНабор.Период = ДатаРозлива;
	КонецЦикла;
	НаборЗаписейСоставУпаковок.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаНоменклатуры(Результат, Параметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		МассивСсылок = Элементы.Список.ВыделенныеСтроки;
		
		УстановитьНоменклатуру(МассивСсылок, Результат);
		
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьНоменклатуру(МассивСсылок, Номенклатура)
	
	ШаблонОшибкиЗаблокировать     = НСтр("ru = 'Не удалось заблокировать %1. %2';
										|en = 'Cannot block %1. %2'");
	ШаблонОшибкиЗаписать          = НСтр("ru = 'Не удалось записать %1. %2';
										|en = 'Cannot save %1. %2'");
	
	Для Каждого ДанныеСПроизводственнойЛинии Из МассивСсылок Цикл
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ДанныеСПроизводственнойЛинии);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать, ДанныеСПроизводственнойЛинии, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеСПроизводственнойЛинии);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = ДанныеСПроизводственнойЛинии.ПолучитьОбъект();
		ДокументОбъект.Номенклатура = Номенклатура;
		
		Попытка
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПропуститьЗаписьДвижений", Истина);
			ДокументОбъект.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, ДанныеСПроизводственнойЛинии, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеСПроизводственнойЛинии);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
