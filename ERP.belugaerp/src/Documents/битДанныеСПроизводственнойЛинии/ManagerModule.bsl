#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает параметры загрузки данных
//
// Возвращаемое значение:
//    Структура - Параметры загрузки
//
Функция ПараметрыЗагрузкиДанныхСПроизводственнойЛинии() Экспорт
	ЭтоРабочаяБаза = бг_ОбщегоНазначенияСервер.ЭтоРабочаяБаза();
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ФорматФайлов", "csv");
	СтруктураПараметры.Вставить("КаталогФайлов", бг_КонстантыПовтИсп.ЗначениеКонстанты("КаталогФайловДанныхСПУМ"));
	
	УдалениеФайловПослеЗагрузкиЗначениеНастройки = бг_КонстантыПовтИсп.ЗначениеКонстанты("УдалятьФайлыДанныхСПУМПослеЗагрузки");
	УдалениеФайловПослеЗагрузкиЗначениеНастройки = ?(УдалениеФайловПослеЗагрузкиЗначениеНастройки = Неопределено, Ложь, УдалениеФайловПослеЗагрузкиЗначениеНастройки);
	
	СтруктураПараметры.Вставить("УдалятьФайлыПослеЗагрузки", ЭтоРабочаяБаза И УдалениеФайловПослеЗагрузкиЗначениеНастройки);
	
	СтруктураПараметры.Вставить("РазделительДанныеФайла", ";");
	СтруктураПараметры.Вставить("РазделительДанныеИмяФайла", "_");
	СтруктураПараметры.Вставить("ИндексКолонкиФайлаКодКороба", 1);
	СтруктураПараметры.Вставить("ИндексКолонкиФайлаИдентификаторМарки", 2);
	СтруктураПараметры.Вставить("ДлинаМаркиБезКриптохвоста", РегистрыСведений.бг_ИдентификаторыМарок.ДлинаНомераМарки());
	СтруктураПараметры.Вставить("СоответствиеКодовОрганизациям", СоответствиеКодовОрганизациям());
	СтруктураПараметры.Вставить("ДлинаКодаУпаковки", РегистрыСведений.бг_СоставУпаковок.ДлинаКодаУпаковки());
	
	СтруктураПараметры.Вставить("ВыводитьСообщенияПользователю", Ложь);
	
	Возврат СтруктураПараметры;
КонецФункции

Функция ДанныеЗагруженногоДокумента(ИмяФайла) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеСПроизводственнойЛинии.Ссылка КАК Ссылка,
	|	ДанныеСПроизводственнойЛинии.ХешСуммаФайлаДанных КАК ХешФайлаДанных,
	|	ДанныеСПроизводственнойЛинии.Проведен
	|		ИЛИ ДанныеСПроизводственнойЛинии.ПометкаУдаления КАК ФайлДанныхОбработан
	|ИЗ
	|	Документ.битДанныеСПроизводственнойЛинии КАК ДанныеСПроизводственнойЛинии
	|ГДЕ
	|	ДанныеСПроизводственнойЛинии.ИмяФайла = &ИмяФайла";
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗагруженныеДанные = Новый Структура("Ссылка, ФайлДанныхОбработан, ХешФайлаДанных");
		ЗаполнитьЗначенияСвойств(ЗагруженныеДанные, Выборка);
		
		Возврат ЗагруженныеДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьДокументПоДаннымФайла(Объект) Экспорт
	ФайлДанных = АктуальныйПрисоединенныйФайлСДанными(Объект.Ссылка);
	Если ФайлДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = ПараметрыЗагрузкиДанныхСПроизводственнойЛинии();
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ПараметрыЗагрузки.ВыводитьСообщенияПользователю = Истина;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДокументаПоИмениФайла(Объект, ПараметрыЗагрузки);
	ЗаполнитьДвиженияДокумента(Объект, ФайлДанных.Ссылка, ПараметрыЗагрузки);
КонецПроцедуры

Процедура ЗафиксироватьОшибкуЗагрузки(Документ, ТекстОшибки, Отказ = Ложь, СообщениеПользователю = Ложь) Экспорт
	Документ.Статус = Перечисления.бг_СтатусыЗагрузкиДанныхСПроизводственнойЛинии.ЗагруженСОшибками;
	
	Если СообщениеПользователю Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	Иначе
		Документ.Комментарий = Документ.Комментарий + ?(ПустаяСтрока(Документ.Комментарий), "", Символы.ПС) + ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьПроверкуЗагруженныхМарок(ДанныеСПроизводственнойЛинии, СообщатьПользователю = Ложь, Отказ = Ложь) Экспорт
	ОшибкиЗаполнения = Новый Массив;
	
	// Проверка наличия движений РС бг_ДвижениеМарок
	Если ДанныеСПроизводственнойЛинии.Движения.бг_ДвижениеМарок.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не заполнены движения марок'");
		ОшибкиЗаполнения.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ДлинаКодаУпаковки = РегистрыСведений.бг_СоставУпаковок.ДлинаКодаУпаковки();
	
	// Проверка корректности кода паллеты
	Если Не КодУпаковкиКорректный(ДанныеСПроизводственнойЛинии.КодПаллеты, ДлинаКодаУпаковки) Тогда
		ТекстОшибки = НСтр("ru = 'Некорректный код паллеты'");
		ОшибкиЗаполнения.Добавить(ТекстОшибки);
	КонецЕсли;
	
	// Проверка корректности кода короба
	НомерСтроки = 1;
	Для Каждого СтрокаДвиженияМарок Из ДанныеСПроизводственнойЛинии.Движения.бг_ДвижениеМарок Цикл
		Если Не КодУпаковкиКорректный(СтрокаДвиженияМарок.КодУпаковки, ДлинаКодаУпаковки) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректный код короба. Строка №%1'"), НомерСтроки);
			ОшибкиЗаполнения.Добавить(ТекстОшибки);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ПроверитьУникальностьКодаПаллеты(ДанныеСПроизводственнойЛинии, ОшибкиЗаполнения);
	ПроверитьДублированиеДвиженийМарок(ДанныеСПроизводственнойЛинии, ОшибкиЗаполнения);
	
	Если СообщатьПользователю Тогда
		Для Каждого ТекстОшибки Из ОшибкиЗаполнения Цикл
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОшибкиЗаполнения;
КонецФункции

Процедура ПодготовитьВременныеТаблицыДвижениеМарок(Запрос, ДанныеСПроизводственнойЛинии) Экспорт
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДвижениеМарок.НомерСтроки КАК НомерСтроки,
	|	ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|	ДвижениеМарок.КодУпаковки КАК КодУпаковки,
	|	ДвижениеМарок.СтатусМарки КАК СтатусМарки
	|ПОМЕСТИТЬ ДвижениеМарок
	|ИЗ
	|	&ДвижениеМарок КАК ДвижениеМарок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГУИДМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеМарок.НомерСтроки КАК НомерСтроки,
	|	ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|	ИдентификаторыМарок.НомерМарки КАК НомерМарки,
	|	ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ДвижениеМарок.КодУпаковки КАК КодУпаковки,
	|	ДвижениеМарок.СтатусМарки КАК СтатусМарки
	|ПОМЕСТИТЬ ДанныеМарок
	|ИЗ
	|	ДвижениеМарок КАК ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК ИдентификаторыМарок
	|		ПО ДвижениеМарок.ГУИДМарки = ИдентификаторыМарок.ГУИДМарки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеМарок.КодУпаковки КАК КодУпаковки
	|ПОМЕСТИТЬ КодыКоробок
	|ИЗ
	|	ДанныеМарок КАК ДанныеМарок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодУпаковки";
	Запрос.УстановитьПараметр("ДвижениеМарок", ДанныеСПроизводственнойЛинии.Движения.бг_ДвижениеМарок.Выгрузить(, "НомерСтроки, ГУИДМарки, КодУпаковки, СтатусМарки"));
	Запрос.Выполнить();
КонецПроцедуры

// Возвращает организацию ЕГАИС документа.
//
// Параметры:
//   Документ - ДокументСсылка.битДанныеСПроизводственнойЛинии
//  
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторОрганизацийЕГАИС
//
Функция ОрганизацияЕГАИСДокумента(Документ) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Документ,
		"ПроизводственнаяЛиния.ОрганизацияЕГАИС");
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоответствиеКодовОрганизациям()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Префикс КАК Префикс
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	СоответствиеОрганизации = Новый Соответствие;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеОрганизации.Вставить(Выборка.Префикс, Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СоответствиеОрганизации;
КонецФункции

Функция АктуальныйПрисоединенныйФайлСДанными(Документ)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.битДанныеСПроизводственнойЛинииПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрисоединенныеФайлы.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("ВладелецФайла", Документ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьРеквизитыДокументаПоИмениФайла(ДанныеСПроизводственнойЛинии, ПараметрыЗагрузки)
	// Формат имени файла данных, формируемого СПУМ:
	// "Код производителя / маркировщика" + "_" + "Код производственной / маркировочной линии" + "_" + "Код номенклатуры в учетной системе"
	// + "_" + "ШК паллеты" + "_" + "Дата розлива / маркировки"+".csv"
	//
	
	ДанныеИзИмениФайла = СтрРазделить(ДанныеСПроизводственнойЛинии.ИмяФайла, ПараметрыЗагрузки.РазделительДанныеИмяФайла);
	
	Если ДанныеИзИмениФайла.Количество() <> 5 Тогда
		ТекстОшибки = НСтр("ru = 'Некорректный формат имени файла'");
		ЗафиксироватьОшибкуЗагрузки(ДанныеСПроизводственнойЛинии, ТекстОшибки, , ПараметрыЗагрузки.ВыводитьСообщенияПользователю);
		Возврат;
	КонецЕсли;
	
	ДанныеСПроизводственнойЛинии.Организация            = ПараметрыЗагрузки.СоответствиеКодовОрганизациям.Получить(ДанныеИзИмениФайла[0]);
	ДанныеСПроизводственнойЛинии.ПроизводственнаяЛиния  = Справочники.бг_ПроизводственныеЛинии.НайтиПоНаименованию(ДанныеИзИмениФайла[1], Истина);
	ДанныеСПроизводственнойЛинии.Номенклатура           = РегистрыСведений.бг_КодыНоменклатурыСПУМ.ПолучитьНоменклатуру(ДанныеИзИмениФайла[2]);
	ДанныеСПроизводственнойЛинии.КодПаллеты              = ДанныеИзИмениФайла[3];
	ДанныеСПроизводственнойЛинии.ДатаРозлива            = ПреобразоватьСтрокуВДату(ДанныеИзИмениФайла[4]);
КонецПроцедуры

Функция ПреобразоватьСтрокуВДату(ДатаСтрокой)
	// Формат даты от СПУМ (строка): dd.MM.yyyy
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	
	ЭлементыДаты = СтрРазделить(ДатаСтрокой, ".");
	Если ЭлементыДаты.Количество() <> 3 Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	СтроковоеПредставлениеДаты = СтрШаблон("%1%2%3", Лев(ЭлементыДаты[2], 4), Лев(ЭлементыДаты[1], 2), Лев(ЭлементыДаты[0], 2));
	
	Возврат ОписаниеТипаДата.ПривестиЗначение(СтроковоеПредставлениеДаты);
КонецФункции

Процедура ЗаполнитьДвиженияДокумента(Документ, ПрисоединенныйФайл, ПараметрыЗагрузки)
	ДвиженияДокумента = Документ.Движения;
	ДвиженияДокумента.бг_ДвижениеМарок.Очистить();
	ДвиженияДокумента.бг_СоставУпаковок.Очистить();
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("csv");
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	СтатусыДвиженияМарок = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные.Документы.битДанныеСПроизводственнойЛинии.Имя);
	СтатусДвиженияМарок  = СтатусыДвиженияМарок.СтатусПолученыДанныеОтСПУМ;
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент;
	ЗагружаемыйФайл.Прочитать(ИмяВременногоФайла);
	
	ТаблицаРегистрацияДвиженийМарок = ТаблицаРегистрацияДвиженийМарок();
	
	Для НомерСтроки = 1 По ЗагружаемыйФайл.КоличествоСтрок() Цикл
		СтрокаДанные = ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаДанные) Тогда
			Продолжить;
		КонецЕсли;
		
		ДвижениеДвиженияМарок = ТаблицаРегистрацияДвиженийМарок.Добавить();
		ДвижениеДвиженияМарок.Период = Документ.ДатаРозлива;
		ДвижениеДвиженияМарок.КодВышестоящейУпаковки = Документ.КодПаллеты;
		
		ДанныеСтроки = СтрРазделить(СтрокаДанные, ПараметрыЗагрузки.РазделительДанныеФайла);
		Если ДанныеСтроки.Количество() < 10 Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка формата строки №%1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, НомерСтроки);
			ЗафиксироватьОшибкуЗагрузки(Документ, ТекстОшибки, , ПараметрыЗагрузки.ВыводитьСообщенияПользователю);
			Продолжить;
		КонецЕсли;
		
		ДвижениеДвиженияМарок.ИдентификаторМарки = ДанныеСтроки[ПараметрыЗагрузки.ИндексКолонкиФайлаИдентификаторМарки];
		ДвижениеДвиженияМарок.НомерМарки = Лев(ДвижениеДвиженияМарок.ИдентификаторМарки, ПараметрыЗагрузки.ДлинаМаркиБезКриптохвоста);
		
		КодУпаковки = ДанныеСтроки[ПараметрыЗагрузки.ИндексКолонкиФайлаКодКороба];
		Если СтрДлина(КодУпаковки) > ПараметрыЗагрузки.ДлинаКодаУпаковки Тогда
			ДополнениеКодУпаковки = "<...>";
			КодУпаковки = СтрШаблон("%1%2",
						Лев(КодУпаковки, ПараметрыЗагрузки.ДлинаКодаУпаковки - СтрДлина(ДополнениеКодУпаковки)),
						ДополнениеКодУпаковки);
		КонецЕсли;
		
		ДвижениеДвиженияМарок.КодУпаковки = КодУпаковки;
	КонецЦикла;
	
	ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.ПроизводственнаяЛиния, "ОрганизацияЕГАИС");
	
	ТаблицаДвижениеМарок = ТаблицаДвижениеМарок(ТаблицаРегистрацияДвиженийМарок, ОрганизацияЕГАИС);
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ЗаписыватьИдентификаторыМарокОднимНабором") Тогда
		
		НаборЗаписейИдентификаторыМарок = РегистрыСведений.бг_ИдентификаторыМарок.СоздатьНаборЗаписей();
	
		Для Каждого СтрокаРегистрацияДвижений Из ТаблицаРегистрацияДвиженийМарок Цикл
			
			ДвижениеДвиженияМарок = ДвиженияДокумента.бг_ДвижениеМарок.Добавить();
			
			ГУИДМарки = ГУИДМарки(СтрокаРегистрацияДвижений.ИдентификаторМарки, ТаблицаДвижениеМарок);
			
			Если ГУИДМарки = Неопределено Тогда
				
				ГУИДМарки = Новый УникальныйИдентификатор;
				
				ЗаписьИдентификаторыМарок = НаборЗаписейИдентификаторыМарок.Добавить();
				
				ЗаписьИдентификаторыМарок.ГУИДМарки = ГУИДМарки;
				ЗаписьИдентификаторыМарок.ИдентификаторМарки = СтрокаРегистрацияДвижений.ИдентификаторМарки;
				ЗаписьИдентификаторыМарок.НомерМарки = СтрокаРегистрацияДвижений.НомерМарки;
				ЗаписьИдентификаторыМарок.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
				
			КонецЕсли;
			
			ДвижениеДвиженияМарок.ГУИДМарки = ГУИДМарки;
			ЗаполнитьЗначенияСвойств(ДвижениеДвиженияМарок, СтрокаРегистрацияДвижений);
			ДвижениеДвиженияМарок.СтатусМарки = СтатусДвиженияМарок;
		КонецЦикла;
		
		Если НаборЗаписейИдентификаторыМарок.Количество() > 0 Тогда
			НаборЗаписейИдентификаторыМарок.Записать(Ложь);
		КонецЕсли;
			
	Иначе
		
		Для Каждого СтрокаРегистрацияДвижений Из ТаблицаРегистрацияДвиженийМарок Цикл
			
			ДвижениеДвиженияМарок = ДвиженияДокумента.бг_ДвижениеМарок.Добавить();
			
			ГУИДМарки = ГУИДМарки(СтрокаРегистрацияДвижений.ИдентификаторМарки, ТаблицаДвижениеМарок);
			
			Если ГУИДМарки = Неопределено Тогда
				
				ГУИДМарки = Новый УникальныйИдентификатор;
				
				РегистрыСведений.бг_ИдентификаторыМарок.ЗаписатьИдентификаторМарки(
					ГУИДМарки,
					СтрокаРегистрацияДвижений.НомерМарки,
					СтрокаРегистрацияДвижений.ИдентификаторМарки,
					ОрганизацияЕГАИС);
			КонецЕсли;
			
			ДвижениеДвиженияМарок.ГУИДМарки = ГУИДМарки;
			ЗаполнитьЗначенияСвойств(ДвижениеДвиженияМарок, СтрокаРегистрацияДвижений);
			ДвижениеДвиженияМарок.СтатусМарки = СтатусДвиженияМарок;
		КонецЦикла;
	КонецЕсли;
		
	УдалитьФайлы(ИмяВременногоФайла);
	
	ТаблицаРегистрацияДвиженийМарок.Свернуть("КодУпаковки, КодВышестоящейУпаковки, Период");
	ДвиженияДокумента.бг_СоставУпаковок.Загрузить(ТаблицаРегистрацияДвиженийМарок);
КонецПроцедуры

Функция ТаблицаДвижениеМарок(ДвиженияМарок, ОрганизацияЕГАИС)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДвиженияМарок.ИдентификаторМарки КАК ИдентификаторМарки
	|ПОМЕСТИТЬ ДвиженияМарок
	|ИЗ
	|	&ДвиженияМарок КАК ДвиженияМарок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ИдентификаторыМарок.ГУИДМарки КАК ГУИДМарки
	|ИЗ
	|	ДвиженияМарок КАК ДвиженияМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК ИдентификаторыМарок
	|		ПО ДвиженияМарок.ИдентификаторМарки = ИдентификаторыМарок.ИдентификаторМарки
	|ГДЕ
	|	ИдентификаторыМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС";
	Запрос.УстановитьПараметр("ДвиженияМарок", ДвиженияМарок);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Результат = Запрос.Выполнить();
	
	ТаблицаДвижениеМарок = Результат.Выгрузить();
	ТаблицаДвижениеМарок.Индексы.Добавить("ИдентификаторМарки");
	
	Возврат ТаблицаДвижениеМарок;
КонецФункции

Функция ГУИДМарки(ИдентификаторМарки, ТаблицаДвижениеМарок)
	Отбор = Новый Структура("ИдентификаторМарки", ИдентификаторМарки);
	СтрокиДвижениеМарок = ТаблицаДвижениеМарок.НайтиСтроки(Отбор);
	
	Если СтрокиДвижениеМарок.Количество() > 0 Тогда
		Возврат СтрокиДвижениеМарок[0].ГУИДМарки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

#Область ПроверкаКорректностиЗагруженныхДанных

Функция КодУпаковкиКорректный(КодУпаковки, ДлинаКодаУпаковки)
	Возврат СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодУпаковки)
									И СтрДлина(КодУпаковки) = ДлинаКодаУпаковки;
КонецФункции

Процедура ПроверитьУникальностьКодаПаллеты(ДанныеСПроизводственнойЛинии, ОшибкиЗаполнения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	битДанныеСПроизводственнойЛинии.Ссылка КАК Ссылка,
	|	битДанныеСПроизводственнойЛинии.Номер КАК Номер,
	|	битДанныеСПроизводственнойЛинии.Дата КАК Дата
	|ИЗ
	|	Документ.битДанныеСПроизводственнойЛинии КАК битДанныеСПроизводственнойЛинии
	|ГДЕ
	|	битДанныеСПроизводственнойЛинии.КодПаллеты = &КодПаллеты
	|	И битДанныеСПроизводственнойЛинии.Проведен
	|	И битДанныеСПроизводственнойЛинии.Статус = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыЗагрузкиДанныхСПроизводственнойЛинии.Загружен)
	|	И битДанныеСПроизводственнойЛинии.Ссылка <> &ТекущийДокумент";
	Запрос.УстановитьПараметр("КодПаллеты", ДанныеСПроизводственнойЛинии.КодПаллеты);
	Запрос.УстановитьПараметр("ТекущийДокумент", ДанныеСПроизводственнойЛинии.Ссылка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	ШаблонТекстОшибки = НСтр("ru = 'Код паллеты %1 дублируется в загрузке данных с производственной линии №%2 от %3'");
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = СтрШаблон(ШаблонТекстОшибки, ДанныеСПроизводственнойЛинии.КодПаллеты, Выборка.Номер, Выборка.Дата);
		ОшибкиЗаполнения.Добавить(ТекстОшибки);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьДублированиеДвиженийМарок(ДанныеСПроизводственнойЛинии, ОшибкиЗаполнения)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущийДокумент", ДанныеСПроизводственнойЛинии.Ссылка);
	
	ПодготовитьВременныеТаблицыДвижениеМарок(Запрос, ДанныеСПроизводственнойЛинии);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеМарок.ИдентификаторМарки КАК Марка
	|ИЗ
	|	ДанныеМарок КАК ДанныеМарок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеМарок.ИдентификаторМарки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ДанныеМарок.ИдентификаторМарки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ВЫРАЗИТЬ(ДвижениеМарок.Регистратор КАК Документ.битДанныеСПроизводственнойЛинии).Номер КАК НомерДокумента,
	|	ВЫРАЗИТЬ(ДвижениеМарок.Регистратор КАК Документ.битДанныеСПроизводственнойЛинии).Дата КАК ДатаДокумента,
	|	ВЫРАЗИТЬ(ДвижениеМарок.Регистратор КАК Документ.битДанныеСПроизводственнойЛинии).КодПаллеты КАК КодПаллеты,
	|	ДвижениеМарок.КодУпаковки КАК КодУпаковки
	|ИЗ
	|	ДанныеМарок КАК ДанныеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК ИдентификаторыМарок
	|		ПО ДанныеМарок.НомерМарки = ИдентификаторыМарок.НомерМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ДвижениеМарок КАК ДвижениеМарок
	|		ПО (ИдентификаторыМарок.ГУИДМарки = ДвижениеМарок.ГУИДМарки)
	|			И (ДвижениеМарок.Активность)
	|ГДЕ
	|	ДанныеМарок.ИдентификаторМарки = ИдентификаторыМарок.ИдентификаторМарки
	|	И ТИПЗНАЧЕНИЯ(ДвижениеМарок.Регистратор) = ТИП(Документ.битДанныеСПроизводственнойЛинии)
	|	И ДвижениеМарок.Регистратор <> &ТекущийДокумент
	|	И ИдентификаторыМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКодыКоробок.КодУпаковки КАК КодУпаковки,
	|	ВЫРАЗИТЬ(СоставУпаковок.Регистратор КАК Документ.битДанныеСПроизводственнойЛинии).Номер КАК НомерДокумента,
	|	ВЫРАЗИТЬ(СоставУпаковок.Регистратор КАК Документ.битДанныеСПроизводственнойЛинии).Дата КАК ДатаДокумента,
	|	ВЫРАЗИТЬ(СоставУпаковок.Регистратор КАК Документ.битДанныеСПроизводственнойЛинии).КодПаллеты КАК КодПаллеты
	|ИЗ
	|	КодыКоробок КАК втКодыКоробок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_СоставУпаковок КАК СоставУпаковок
	|		ПО втКодыКоробок.КодУпаковки = СоставУпаковок.КодУпаковки
	|			И (СоставУпаковок.Активность)
	|			И (ТИПЗНАЧЕНИЯ(СоставУпаковок.Регистратор) = ТИП(Документ.битДанныеСПроизводственнойЛинии))
	|			И (СоставУпаковок.Регистратор <> &ТекущийДокумент)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМарок.НомерСтроки КАК НомерСтроки,
	|	ДанныеМарок.ИдентификаторМарки КАК Марка
	|ИЗ
	|	ДанныеМарок КАК ДанныеМарок
	|ГДЕ
	|	ДанныеМарок.НомерМарки = 0";
	Запрос.УстановитьПараметр(
		"ОрганизацияЕГАИС",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСПроизводственнойЛинии.ПроизводственнаяЛиния, "ОрганизацияЕГАИС"));
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДублированиеНомеровМарокВнутриДокумента = Результат[0].Выбрать();
	ШаблонТекстОшибки = НСтр("ru = 'В загруженных данных дублируется марка %1'");
	Пока ВыборкаДублированиеНомеровМарокВнутриДокумента.Следующий() Цикл
		ТекстОшибки = СтрШаблон(ШаблонТекстОшибки, ВыборкаДублированиеНомеровМарокВнутриДокумента.Марка);
		ОшибкиЗаполнения.Добавить(ТекстОшибки);
	КонецЦикла;
	
	ВыборкаДублированиеНомеровМарок = Результат[1].Выбрать();
	ШаблонТекстОшибки = НСтр("ru = 'Марка %1 дублируется в загрузке данных с производственной линии №%2 от %3 (паллета: %4, код короба: %5)'");
	Пока ВыборкаДублированиеНомеровМарок.Следующий() Цикл
		ТекстОшибки = СтрШаблон(ШаблонТекстОшибки, ВыборкаДублированиеНомеровМарок.ИдентификаторМарки,
				ВыборкаДублированиеНомеровМарок.НомерДокумента, ВыборкаДублированиеНомеровМарок.ДатаДокумента,
				ВыборкаДублированиеНомеровМарок.КодПаллеты, ВыборкаДублированиеНомеровМарок.КодУпаковки);
		
		ОшибкиЗаполнения.Добавить(ТекстОшибки);
	КонецЦикла;
	
	ВыборкаДублированиеКодовКоробов = Результат[2].Выбрать();
	ШаблонТекстОшибки = НСтр("ru = 'Короб с кодом %1 дублируется в загрузке данных с производственной линии №%2 от %3 (паллета: %4)'");
	Пока ВыборкаДублированиеКодовКоробов.Следующий() Цикл
		ТекстОшибки = СтрШаблон(ШаблонТекстОшибки, ВыборкаДублированиеКодовКоробов.КодУпаковки,
				ВыборкаДублированиеКодовКоробов.НомерДокумента, ВыборкаДублированиеКодовКоробов.ДатаДокумента,
				ВыборкаДублированиеКодовКоробов.КодПаллеты);
		
		ОшибкиЗаполнения.Добавить(ТекстОшибки);
	КонецЦикла;
	
	ВыборкаОшибкаФорматаИдентификатора = Результат[3].Выбрать();
	ШаблонТекстОшибки = НСтр("ru = 'Ошибка формата идентификатора марки. Строка №%1'");
	Пока ВыборкаОшибкаФорматаИдентификатора.Следующий() Цикл
		ТекстОшибки = СтрШаблон(ШаблонТекстОшибки, ВыборкаОшибкаФорматаИдентификатора.НомерСтроки);
		ОшибкиЗаполнения.Добавить(ТекстОшибки);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Функция ТаблицаРегистрацияДвиженийМарок()
	ДлинаКодаУпаковки = РегистрыСведений.бг_СоставУпаковок.ДлинаКодаУпаковки();
	ДлинаНомераМарки  = РегистрыСведений.бг_ИдентификаторыМарок.ДлинаНомераМарки();
	
	ТаблицаРегистрацияДвижений = Новый ТаблицаЗначений;
	ТаблицаРегистрацияДвижений.Колонки.Добавить("ИдентификаторМарки", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаРегистрацияДвижений.Колонки.Добавить("НомерМарки", ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомераМарки));
	ТаблицаРегистрацияДвижений.Колонки.Добавить("КодУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаКодаУпаковки));
	ТаблицаРегистрацияДвижений.Колонки.Добавить("КодВышестоящейУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаКодаУпаковки));
	ТаблицаРегистрацияДвижений.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ТаблицаРегистрацияДвижений;
КонецФункции

#КонецОбласти

#КонецЕсли
