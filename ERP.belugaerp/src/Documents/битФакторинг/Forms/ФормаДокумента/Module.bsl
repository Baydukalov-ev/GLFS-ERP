
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Объект.СтавкаНДС = УчетНДСУПВызовСервера.СтавкаНДСПоУмолчанию(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Объект.СтавкаНДС = УчетНДСУПВызовСервера.СтавкаНДСПоУмолчанию(Объект.Организация, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВключаетНДСПриИзменении(Элемент)
	
	КоличествоКомиссий = 3;
	Для Каждого СтрокаКОбработке Из Объект.ДокументыРеализации Цикл
		Для ПостфиксЭлементов = 1 По КоличествоКомиссий Цикл
			РассчитатьСуммыКомиссии(СтрокаКОбработке, Строка(ПостфиксЭлементов));
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыРеализации

&НаКлиенте
Процедура ДокументыРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДокументыРеализацииОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииДокументРеализацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыРеализации.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументРеализации) Тогда
		ПриИзмененииРеализацииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииСуммаПриИзменении(Элемент)
	
	РассчитатьОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииСуммаФинансированияПриИзменении(Элемент)
	
	РассчитатьОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииКомиссияБезНДС1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыРеализации.ТекущиеДанные;
	ПостфиксЭлементов = "1";
	РассчитатьСуммыКомиссии(ТекущиеДанные, ПостфиксЭлементов);
	РассчитатьОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииКомиссияБезНДС2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыРеализации.ТекущиеДанные;
	ПостфиксЭлементов = "2";
	РассчитатьСуммыКомиссии(ТекущиеДанные, ПостфиксЭлементов);
	РассчитатьОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииКомиссияБезНДС3ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыРеализации.ТекущиеДанные;
	ПостфиксЭлементов = "3";
	РассчитатьСуммыКомиссии(ТекущиеДанные, ПостфиксЭлементов);
	РассчитатьОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииКомиссияНДС1ПриИзменении(Элемент)
	
	ПостфиксЭлементов = "1";
	РассчитатьСуммуСНДС(ПостфиксЭлементов);
	РассчитатьОстаток();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииКомиссияНДС2ПриИзменении(Элемент)
	
	ПостфиксЭлементов = "2";
	РассчитатьСуммуСНДС(ПостфиксЭлементов);
	РассчитатьОстаток();

КонецПроцедуры

&НаКлиенте
Процедура ДокументыРеализацииКомиссияНДС3ПриИзменении(Элемент)
	
	ПостфиксЭлементов = "3";
	РассчитатьСуммуСНДС(ПостфиксЭлементов);
	РассчитатьОстаток();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборПоРеализациям(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВидПодбора", "ПоРеализациям");
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	
	ОткрытьФорму("Документ.битФакторинг.Форма.ФормаПодбора", ПараметрыФормы, Элементы.ДокументыРеализации, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоСФ(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ВидПодбора", "ПоСчетамФактурам");
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	
	ОткрытьФорму("Документ.битФакторинг.Форма.ФормаПодбора", ПараметрыФормы, Элементы.ДокументыРеализации, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоПлатежнымПоручениям(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Документ.битФакторинг.Форма.ФормаПодбораПоПлатежнымПоручениям", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПодборПоПлатежнымПоручениямЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтбору(Команда)
	
	Описание = Новый ОписаниеОповещения("ЗаполнитьПоОтборуЗавершение", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Табличная часть будет очищена, продолжить?';
		|en = 'Табличная часть будет очищена, продолжить?'");
	
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПересчитатьВсе(Команда)
	
	ПересчитатьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВыделенные(Команда)
	
	Идентификаторы = Элементы.ДокументыРеализации.ВыделенныеСтроки;
	ПересчитатьНаСервере(Идентификаторы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзЭкселя(Команда)

	Если Не ОбязательныеПоляДляЗагрузкиФайлаЗаполнены() Тогда

		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поля организация, фактор и вид операции должны быть заполнены.'"));
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ДокументыРеализации.Количество() Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПодтверждениеОчисткиДокументовРеализации", ЭтотОбъект),
			НСтр("ru = 'Очистить табличную часть перед заполнением?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	НачатьВыборВариантаПоискаДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииПервичныйДокумент.Имя);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПродажаДебитору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПогашениеФинансирования);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ВознаграждениеФактора);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = Список;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииСумма.Имя);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПродажаДебитору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПогашениеФинансирования);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = Список;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииСуммаФинансирования.Имя);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ФинансированиеФактором);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПогашениеФинансирования);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = Список;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссияБезНДС1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссияНДС1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссия1.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссияБезНДС2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссияНДС2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссия2.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссияБезНДС3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссияНДС3.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииКомиссия3.Имя);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ВознаграждениеФактора);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = Список;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииОстаток.Имя);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПереводОстаткаФактором);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = Список;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииДатаПогашенияФинансирования.Имя);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ВознаграждениеФактора);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ФинансированиеФактором);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = Список;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДокументыРеализацииПервоначальнаяСуммаСчетФактуры.Имя);
	
	Список = Новый СписокЗначений;
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПродажаДебитору);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование);
	Список.Добавить(Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидОперации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = Список;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	УстановитьВидимостьЭлементов();
	УстановитьЗаголовкиЭлементов();

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиЭлементов()
	
	Если Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование
		Или Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж Тогда
		Элементы.ДокументыРеализацииСумма.Заголовок = НСтр("ru = 'Сумма уступки'");
	ИначеЕсли Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору Тогда
		Элементы.ДокументыРеализацииСумма.Заголовок = НСтр("ru = 'Сумма платежа'");
		Элементы.ДокументыРеализацииСуммаФинансирования.Заголовок = НСтр("ru = 'Сумма погашенного финансирования'");
	ИначеЕсли Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам Тогда
		Элементы.ДокументыРеализацииСумма.Заголовок = НСтр("ru = 'Сумма погашения уступленного долга'");
	Иначе
		Элементы.ДокументыРеализацииСуммаФинансирования.Заголовок = НСтр("ru = 'Сумма финансирования'"); 
		Элементы.ДокументыРеализацииСумма.Заголовок = НСтр("ru = 'Сумма реализации'");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ВознаграждениеФактора Тогда
		Элементы.ДокументыРеализацииДатаПогашенияФинансирования.Заголовок = НСтр("ru = 'Период комиссии'");
	Иначе	
		Элементы.ДокументыРеализацииДатаПогашенияФинансирования.Заголовок = НСтр("ru = 'Дата погашения финансирования'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()

	ЭтоПередачаДокументов =
		Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование
		Или Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж;
		
	Элементы.НомерРеестра.Видимость = ЭтоПередачаДокументов;
	Элементы.СтатьяРасходов.Видимость = ЭтоПередачаДокументов;
	Элементы.СтатьяДоходов.Видимость = ЭтоПередачаДокументов;
	
	Элементы.СтраницаОтражениеВУчете.Видимость = 
		Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам
		Или ЭтоПередачаДокументов;
	
	ВидимостьРеквизитовНДС = Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору
		Или Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ВознаграждениеФактора
		Или Объект.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам;
		
	Элементы.СуммаВключаетНДС.Видимость = ВидимостьРеквизитовНДС;
	Элементы.СтавкаНДС.Видимость = ВидимостьРеквизитовНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоПлатежнымПоручениямЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументыРеализацииПоПлатежнымПоручениям(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтборуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ОтборОрганизация", Объект.Организация);
	
	ОткрытьФорму("Документ.битФакторинг.Форма.ФормаЗаполненияПоОтбору",
		ПараметрыФормы, Элементы.ДокументыРеализации, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыРеализацииПоПлатежнымПоручениям(ПлатежныеПоручения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Платеж.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РеквизитыПоступленияДС.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(РеквизитыОбъектаРасчетов.Объект, НЕОПРЕДЕЛЕНО) КАК ДокументРеализации,
	|	ЕСТЬNULL(РеквизитыОбъектаРасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	Платеж.Ссылка КАК ПервичныйДокумент,
	|	Платеж.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК Платеж
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеБезналичныхДенежныхСредств КАК РеквизитыПоступленияДС
	|		ПО Платеж.Ссылка = РеквизитыПоступленияДС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК РеквизитыОбъектаРасчетов
	|		ПО Платеж.ОбъектРасчетов = РеквизитыОбъектаРасчетов.Ссылка
	|ГДЕ
	|	Платеж.Ссылка В (&Документы)";
	
	Запрос.УстановитьПараметр("Документы", ПлатежныеПоручения);
	
	РезультатЗапрос = Запрос.Выполнить();
	Выборка = РезультатЗапрос.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.ДокументыРеализации.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыРеализацииОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ДокументыРеализацииЗаполнитьПоОтбору(ВыбранноеЗначение);
		
	Иначе
		
		Для Каждого Строка Из Объект.ДокументыРеализации Цикл
			
			Если Строка.ДокументРеализации = ВыбранноеЗначение Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока = Объект.ДокументыРеализации.Добавить();
		НоваяСтрока.ДокументРеализации = ВыбранноеЗначение;
		
		ПриИзмененииРеализацииНаСервере(НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыРеализацииЗаполнитьПоОтбору(ПараметрыОтбора)
	
	ПараметрыОтбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	ДанныеПоОтбору = ДанныеПоОтбору(ПараметрыОтбора);
	
	Объект.ДокументыРеализации.Очистить();
	
	Пока ДанныеПоОтбору.Следующий() Цикл
		
		НоваяСтрока = Объект.ДокументыРеализации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПоОтбору);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоОтбору(Данные)
	
	ПараметрыОтбора = Документы.битФакторинг.ПараметрыОтбораДокументов();
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Данные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Контрагент КАК Контрагент,
	|	Контрагенты.Договор КАК Договор
	|ПОМЕСТИТЬ ВтКонтрагенты
	|ИЗ
	|	&Контрагенты КАК Контрагенты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	ДД.АналитикаУчетаПоПартнерам.Договор КАК Договор,
	|	ДД.ДолгОстаток КАК СуммаОстаток,
	|	ДД.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ВтВсеОстатки
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			,
	|			ОбъектРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
	|				И АналитикаУчетаПоПартнерам.Организация = &Организация
	|				И (ОбъектРасчетов = &ОбъектРасчетов
	|					ИЛИ &ВсеОбъектыРасчетов)
	|				И (АналитикаУчетаПоПартнерам.Контрагент В
	|						(ВЫБРАТЬ
	|							ДД.Контрагент
	|						ИЗ
	|							ВтКонтрагенты КАК ДД)
	|					ИЛИ &ПоВсемКонтрагентам)) КАК ДД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.Контрагент,
	|	ДД.ДоговорКонтрагента,
	|	-ДД.СуммаВзаиморасчетовОстаток,
	|	ДД.ОбъектРасчетов
	|ИЗ
	|	РегистрНакопления.бг_ОперацииПоФакторингу.Остатки(
	|			,
	|			ВидРасчетов = ЗНАЧЕНИЕ(Перечисление.бг_ВидРасчетовПоФакторингу.СФактором)
	|				И Организация = &Организация
	|				И (ОбъектРасчетов = &ОбъектРасчетов
	|					ИЛИ &ВсеОбъектыРасчетов)
	|				И (Контрагент В
	|						(ВЫБРАТЬ
	|							ДД.Контрагент
	|						ИЗ
	|							ВтКонтрагенты КАК ДД)
	|					ИЛИ &ПоВсемКонтрагентам)) КАК ДД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДД.Контрагент,
	|	ДД.ДоговорКонтрагента,
	|	ДД.СуммаВзаиморасчетов,
	|	ДД.ОбъектРасчетов
	|ИЗ
	|	РегистрНакопления.бг_ОперацииПоФакторингу КАК ДД
	|ГДЕ
	|	ДД.ВидРасчетов = ЗНАЧЕНИЕ(Перечисление.бг_ВидРасчетовПоФакторингу.СФактором)
	|	И ДД.Организация = &Организация
	|	И (ДД.ОбъектРасчетов = &ОбъектРасчетов
	|			ИЛИ &ВсеОбъектыРасчетов)
	|	И (ДД.Контрагент В
	|				(ВЫБРАТЬ
	|					ДД.Контрагент
	|				ИЗ
	|					ВтКонтрагенты КАК ДД)
	|			ИЛИ &ПоВсемКонтрагентам)
	|	И ДД.Регистратор = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтВсеОстатки.Контрагент КАК Контрагент,
	|	ВтВсеОстатки.Договор КАК Договор,
	|	СУММА(ВтВсеОстатки.СуммаОстаток) КАК СуммаОстаток,
	|	ВтВсеОстатки.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ВтОстатки
	|ИЗ
	|	ВтВсеОстатки КАК ВтВсеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтВсеОстатки.Контрагент,
	|	ВтВсеОстатки.Договор,
	|	ВтВсеОстатки.ОбъектРасчетов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВтВсеОстатки.СуммаОстаток) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор,
	|	ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОстатки.Контрагент КАК Контрагент,
	|	ВтОстатки.Договор КАК ДоговорКонтрагента,
	|	ВтОстатки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВтОстатки.ОбъектРасчетов.Объект КАК ДокументРеализации,
	|	ВтОстатки.СуммаОстаток КАК Сумма,
	|	ВтОстатки.ОбъектРасчетов.Сумма КАК ПервоначальнаяСуммаСчетФактуры,
	|	ЕСТЬNULL(ВтОстатки.СуммаОстаток, 0) * ЕСТЬNULL(ДоговорыКонтрагентов.бг_ПроцентФинансированияФакторинга, 0) / 100 КАК СуммаФинансирования
	|ИЗ
	|	ВтОстатки КАК ВтОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКонтрагенты КАК ВтКонтрагенты
	|		ПО ВтОстатки.Контрагент = ВтКонтрагенты.Контрагент
	|			И ВтОстатки.Договор = ВтКонтрагенты.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВтОстатки.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	(ВтОстатки.ОбъектРасчетов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ВсеДаты)
	|	И (ВтОстатки.СуммаОстаток = ВтОстатки.ОбъектРасчетов.Сумма
	|			ИЛИ НЕ &НеУчитыватьЧастичноОплаченные)
	|	И НЕ &ПоВсемКонтрагентам
	|	И ВтКонтрагенты.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОстатки.Контрагент,
	|	ВтОстатки.Договор,
	|	ВтОстатки.ОбъектРасчетов,
	|	ВтОстатки.ОбъектРасчетов.Объект,
	|	ВтОстатки.СуммаОстаток,
	|	ВтОстатки.ОбъектРасчетов.Сумма,
	|	ЕСТЬNULL(ВтОстатки.СуммаОстаток, 0) * ЕСТЬNULL(ДоговорыКонтрагентов.бг_ПроцентФинансированияФакторинга, 0) / 100
	|ИЗ
	|	ВтОстатки КАК ВтОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКонтрагенты КАК ВтКонтрагенты
	|		ПО ВтОстатки.Контрагент = ВтКонтрагенты.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВтОстатки.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	(ВтОстатки.ОбъектРасчетов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ВсеДаты)
	|	И (ВтОстатки.СуммаОстаток = ВтОстатки.ОбъектРасчетов.Сумма
	|			ИЛИ НЕ &НеУчитыватьЧастичноОплаченные)
	|	И НЕ &ПоВсемКонтрагентам
	|	И ВтКонтрагенты.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтОстатки.Контрагент,
	|	ВтОстатки.Договор,
	|	ВтОстатки.ОбъектРасчетов,
	|	ВтОстатки.ОбъектРасчетов.Объект,
	|	ВтОстатки.СуммаОстаток,
	|	ВтОстатки.ОбъектРасчетов.Сумма,
	|	ЕСТЬNULL(ВтОстатки.СуммаОстаток, 0) * ЕСТЬNULL(ДоговорыКонтрагентов.бг_ПроцентФинансированияФакторинга, 0) / 100
	|ИЗ
	|	ВтОстатки КАК ВтОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВтОстатки.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	(ВтОстатки.ОбъектРасчетов.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ВсеДаты)
	|	И (ВтОстатки.СуммаОстаток = ВтОстатки.ОбъектРасчетов.Сумма
	|			ИЛИ НЕ &НеУчитыватьЧастичноОплаченные)
	|	И &ПоВсемКонтрагентам";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", ПараметрыОтбора.ТекущийДокумент);
	Запрос.УстановитьПараметр("ВсеДаты", Не ЗначениеЗаполнено(ПараметрыОтбора.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыОтбора.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыОтбора.ДатаОкончания);
	
	Запрос.УстановитьПараметр("НеУчитыватьЧастичноОплаченные", ПараметрыОтбора.НеУчитыватьЧастичноОплаченные);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
	
	Запрос.УстановитьПараметр("ОбъектРасчетов", ПараметрыОтбора.ОбъектРасчетов);
	Запрос.УстановитьПараметр("ВсеОбъектыРасчетов", Не ЗначениеЗаполнено(ПараметрыОтбора.ОбъектРасчетов));
	
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", ПараметрыОтбора.Контрагенты.Количество() = 0);
	
	Если ПараметрыОтбора.Контрагенты.Количество() = 0 Тогда
		
		Данные = Новый Структура("Контрагент,Договор",
			Справочники.Контрагенты.ПустаяСсылка(),
			Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
			
		ПараметрыОтбора.Контрагенты.Добавить(Данные);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагенты", ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ПараметрыОтбора.Контрагенты));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

&НаСервере
Процедура ПриИзмененииРеализацииНаСервере(Идентификатор)
	
	ТекущиеДанные = Объект.ДокументыРеализации.НайтиПоИдентификатору(Идентификатор);
	ТекущиеДанные.ОбъектРасчетов = ОбъектыРасчетовСервер.ОбъектРасчетовИзСсылки(ТекущиеДанные.ДокументРеализации);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОбъектРасчетов", ТекущиеДанные.ОбъектРасчетов);
	ПараметрыОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("ТекущийДокумент", Объект.Ссылка);
	
	ДанныеПоОтбору = ДанныеПоОтбору(ПараметрыОтбора);
	
	Если ДанныеПоОтбору.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеПоОтбору);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьНаСервере(Идентификаторы = Неопределено)
	
	Договора = Новый Массив;
	Строки = Новый Массив;
	
	Для Каждого Строка Из Объект.ДокументыРеализации Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ДоговорКонтрагента)
			Или Идентификаторы <> Неопределено
			И Идентификаторы.Найти(Строка.ПолучитьИдентификатор()) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Договора.Добавить(Строка.ДоговорКонтрагента);
		Строки.Добавить(Строка);
		
	КонецЦикла;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Договора, "бг_ПроцентФинансированияФакторинга");
	
	Для Каждого Строка Из Строки Цикл
		
		Строка.СуммаФинансирования = Строка.Сумма
			* Реквизиты[Строка.ДоговорКонтрагента].бг_ПроцентФинансированияФакторинга / 100;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыКомиссии(ТекущаяСтрока, НомерКомиссии)
	
	ИменаПолей = ИменаПолейКомиссииПоШаблону(НомерКомиссии);
	РасчетнаяСтрока = Новый Структура;
	РасчетнаяСтрока.Вставить("Сумма", ТекущаяСтрока[ИменаПолей.СуммаБезНДС]);
	РасчетнаяСтрока.Вставить("СуммаНДС", 0);
	РасчетнаяСтрока.Вставить("СуммаСНДС", 0);
	РасчетнаяСтрока.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Объект.СуммаВключаетНДС);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(РасчетнаяСтрока, СтруктураДействий, Неопределено);
	
	ТекущаяСтрока[ИменаПолей.СуммаНДС] = РасчетнаяСтрока.СуммаНДС;
	ТекущаяСтрока[ИменаПолей.СуммаСНДС] = РасчетнаяСтрока.СуммаСНДС;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСНДС(НомерКомиссии)

	Если Объект.СуммаВключаетНДС Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ДокументыРеализации.ТекущиеДанные;
	ИменаПолей = ИменаПолейКомиссииПоШаблону(НомерКомиссии);
	
	ТекущаяСтрока[ИменаПолей.СуммаСНДС] = ТекущаяСтрока[ИменаПолей.СуммаНДС]
		+ ТекущаяСтрока[ИменаПолей.СуммаБезНДС];

КонецПроцедуры

&НаКлиенте
Функция ИменаПолейКомиссииПоШаблону(НомерКомиссии)
	
	ИменаПолей = Новый Структура;
	ИменаПолей.Вставить("СуммаБезНДС", СтрШаблон("КомиссияБезНДС%1", НомерКомиссии));
	ИменаПолей.Вставить("СуммаНДС", СтрШаблон("КомиссияНДС%1", НомерКомиссии));
	ИменаПолей.Вставить("СуммаСНДС", СтрШаблон("Комиссия%1", НомерКомиссии));
	
	Возврат ИменаПолей;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьОстаток()
	
	ТребуемыйВидОперации = ПредопределенноеЗначение("Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору");
	Если Объект.ВидОперации = ТребуемыйВидОперации Тогда
		
		ТекущиеДанные = Элементы.ДокументыРеализации.ТекущиеДанные;
		ТекущиеДанные.Остаток = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаФинансирования - ТекущиеДанные.Комиссия1
			- ТекущиеДанные.Комиссия2 - ТекущиеДанные.Комиссия3;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеОчисткиДокументовРеализации(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДокументыРеализации.Очистить();
	КонецЕсли;
	
	НачатьВыборВариантаПоискаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборВариантаПоискаДокумента()
	
	ВариантыПоиска = Новый СписокЗначений;
	ВариантыПоиска.Добавить("ПоСчетФактуре", НСтр("ru = 'Счета-фактуры'"));
	ВариантыПоиска.Добавить("ПоРеализации", НСтр("ru = 'Реализации товаров и услуг'"));
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыборВариантаПоискаДокументаЗавершение", ЭтотОбъект),
		НСтр("ru = 'Выполнить поиск по номеру:'"), ВариантыПоиска, , ВариантыПоиска[0].Значение,
		НСтр("ru = 'Вариант поиска документа реализации'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаПоискаДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ВариантПоискаДокумента = "ПоСчетФактуре";
	Иначе
		ВариантПоискаДокумента = Результат;
	КонецЕсли;
	
	НачатьВыборФайлаДляЗагрузки(ВариантПоискаДокумента);

КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборФайлаДляЗагрузки(ВариантПоискаДокумента)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантПоискаДокумента", ВариантПоискаДокумента);
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьФайлПослеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.Диалог.Фильтр = "Факторинг (*.xls;*.xlsx)|*.xls;*.xlsx";
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыЗагрузки.Диалог.Заголовок = НСтр("ru = 'Выберите файл с данными для загрузки'");
	
	ФайловаяСистемаКлиент.ЗагрузитьФайл(Обработчик, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайлПослеВыбора(ОписаниеФайла, ДополнительныеПараметры) Экспорт
	
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеФакторингаИзФайла(ОписаниеФайла, ДополнительныеПараметры.ВариантПоискаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеФакторингаИзФайла(ОписаниеФайла, ВариантПоискаДокумента)
	
	ОписаниеКолонок = РегистрыСведений.бг_НастройкиЗагрузкиФайловФакторинга.ОписаниеЗагружаемыхКолонок(
		Объект.Фактор, Объект.ВидОперации);
	Если Не ОписаниеКолонок.Количество() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не заданы настройки для загрузки данных из файла для текущего вида операции и фактора.'"));
		Возврат;
		
	КонецЕсли;

	ТаблицаДанных = ПреобразоватьДанныеФайлаВТаблицуЗначений(ОписаниеФайла, ОписаниеКолонок);
	Если ТаблицаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КоличествоКомиссий = 3;
	
	ЕстьКолонкаДатаПогашенияФинансирования =
		Не ТаблицаДанных.Колонки.Найти("ДатаПогашенияФинансирования") = Неопределено;
	Для Каждого Данные Из ТаблицаДанных Цикл
		
		ДатаДокумента = ОбщегоНазначенияКлиентСервер.СтрокаВДату(Данные.ДатаДокумента);
		Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеДокумента = ПолучитьОписаниеДокументаРеализацииПоНомеру(
			Данные.НомерДокумента, ДатаДокумента, ВариантПоискаДокумента = "ПоСчетФактуре");
		
		НоваяСтрокаТаблицы = Объект.ДокументыРеализации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Данные);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ОписаниеДокумента);
		ЗаполнитьЗначенияКолонокСНесколькимиИсточниками(НоваяСтрокаТаблицы, Данные, ОписаниеКолонок);
		Если ЕстьКолонкаДатаПогашенияФинансирования И ЗначениеЗаполнено(Данные.ДатаПогашенияФинансирования) Тогда
			НоваяСтрокаТаблицы.ДатаПогашенияФинансирования =
				ОбщегоНазначенияКлиентСервер.СтрокаВДату(Данные.ДатаПогашенияФинансирования);
		КонецЕсли;
		
		НоваяСтрокаТаблицы.ОбъектРасчетов = ОбъектыРасчетовСервер.ОбъектРасчетовИзСсылки(
			НоваяСтрокаТаблицы.ДокументРеализации);
		
		Для ПостфиксЭлемента = 1 По КоличествоКомиссий Цикл
			Если Не ЗначениеЗаполнено(НоваяСтрокаТаблицы["Комиссия" + ПостфиксЭлемента]) Тогда
				НоваяСтрокаТаблицы["Комиссия" + ПостфиксЭлемента] =
					НоваяСтрокаТаблицы["КомиссияБезНДС" + ПостфиксЭлемента]
					+ НоваяСтрокаТаблицы["КомиссияНДС" + ПостфиксЭлемента];
			ИначеЕсли Не ЗначениеЗаполнено(НоваяСтрокаТаблицы["КомиссияБезНДС" + ПостфиксЭлемента]) Тогда
				НоваяСтрокаТаблицы["КомиссияБезНДС" + ПостфиксЭлемента] =
					НоваяСтрокаТаблицы["Комиссия" + ПостфиксЭлемента]
					- НоваяСтрокаТаблицы["КомиссияНДС" + ПостфиксЭлемента];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияКолонокСНесколькимиИсточниками(НоваяСтрокаТаблицы, Данные, ОписаниеКолонок)
	
	Для Каждого Колонка Из ОписаниеКолонок Цикл
		
		Если Колонка.Значение.Количество() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Источник Из Колонка.Значение Цикл
			НоваяСтрокаТаблицы[Колонка.Ключ] = НоваяСтрокаТаблицы[Колонка.Ключ] + Данные[Источник.Ключ];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеДокументаРеализацииПоНомеру(НомерДокумента, ДатаДокумента, ИскатьПоНомеруСчетФактуры = Ложь)

	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("ДокументРеализации", Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	ОписаниеДокумента.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ОписаниеДокумента.Вставить("ДоговорКонтрагента", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	Если ИскатьПоНомеруСчетФактуры Тогда
			
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Договор КАК ДоговорКонтрагента,
		|	2 КАК Приоритет
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО (СчетФактураВыданный.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И СчетФактураВыданный.Номер ПОДОБНО &Номер
		|	И РеализацияТоваровУслуг.Организация = &Организация";
	
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияТоваровУслуг.Ссылка КАК ДокументРеализации,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Договор КАК ДоговорКонтрагента,
		|	2 КАК Приоритет
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И РеализацияТоваровУслуг.Номер ПОДОБНО &Номер
		|	И РеализацияТоваровУслуг.Организация = &Организация";
		
	КонецЕсли; 

	ТекстыЗапросов = Новый Массив;
	ТекстыЗапросов.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПервичныйДокумент.Ссылка КАК ДокументРеализации,
		|	ПервичныйДокумент.Контрагент КАК Контрагент,
		|	ПервичныйДокумент.Договор КАК ДоговорКонтрагента,
		|	1 КАК Приоритет
		|ИЗ
		|	Документ.ПервичныйДокумент КАК ПервичныйДокумент
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПервичныйДокумент.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И ПервичныйДокумент.Номер ПОДОБНО &Номер
		|	И ПервичныйДокумент.Организация = &Организация");
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ГотовыйТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ГотовыйТекстЗапроса = ГотовыйТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ГотовыйТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	Если Найти(НомерДокумента,"/") <> 0 Или Найти(НомерДокумента,"\") <> 0 Тогда
		Запрос.УстановитьПараметр("Номер", СтрШаблон("%1%%", НомерДокумента));
	Иначе
		Запрос.УстановитьПараметр("Номер", СтрШаблон("%%000%1%%", НомерДокумента));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеДокумента, ВыборкаДетальныеЗаписи);
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Не найден документ №%1 от %2'");
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ШаблонОшибки, XMLСтрока(НомерДокумента), Формат(ДатаДокумента, "ДФ=dd.MM.yyyy;")));
		
	КонецЕсли;
	
	Возврат ОписаниеДокумента;
	
КонецФункции

&НаСервере
Функция ПреобразоватьДанныеФайлаВТаблицуЗначений(ОписаниеФайла, ОписаниеКолонок)
	
	РасширениеФайла = Сред(ОписаниеФайла.Имя, СтрНайти(ОписаниеФайла.Имя, ".", НаправлениеПоиска.СКонца) + 1);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ТабличныйДокументКЗагрузку = Новый ТабличныйДокумент;
	Попытка
		ТабличныйДокументКЗагрузку.Прочитать(ИмяВременногоФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Возврат бг_ЗагрузкаЛицензий.ТаблицаДанныхИзФайла(
		ТабличныйДокументКЗагрузку, ОписаниеКолонок.ПерваяСтрока.ПерваяСтрока, ОписаниеКолонок);
	
КонецФункции

&НаКлиенте
Функция ОбязательныеПоляДляЗагрузкиФайлаЗаполнены()
	
	Возврат ЗначениеЗаполнено(Объект.Организация)
			И ЗначениеЗаполнено(Объект.Фактор)
			И ЗначениеЗаполнено(Объект.ВидОперации);
	
КонецФункции

#КонецОбласти
