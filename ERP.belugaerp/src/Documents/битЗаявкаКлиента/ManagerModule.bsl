#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Синхронизирует (создает/актуализирует) зависимые документы по Заявке клиента, 
//  вызывается из обработчика события "При записи" документа Заявка клиента. 
//
// Параметры:
//  Источник - ДокументОбъект.битЗаявкаКлиента - Заявка клиента, по которой надо синхронизировать зависимые документы. 
//  Отказ - Булево - флаг отказа, неудачной попытки синхронизировать зависимые документы. 
//
Процедура СинхронизироватьЗависимыеДокументы(Источник, Отказ = Ложь) Экспорт

	Если Источник.ОбменДанными.Загрузка 
		Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("бг_ОтключитьСинхронизациюЗависимыхДокументов") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		// Формировние заказов контрагентов ВГО выполняется особым образом в специализированном АРМ.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	РежимЗаписиИсточника = Источник.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи;
	
	// Синхронизируем Заказы клиента.
	Если Не ФормироватьЗаказыКлиентовРегламентнымЗаданием() Тогда
		
		Попытка
			СинхронизироватьЗаказыКлиента(Источник, Отказ);		
			
			Если Источник.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда	
				Если Источник.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.Резервирование Тогда
					ОсновнойКодОтвета = "200";
				ИначеЕсли Источник.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.ОтменаРезервирования Тогда	
				    ОсновнойКодОтвета = "202";
				КонецЕсли;
				Если РежимЗаписиИсточника = РежимЗаписиДокумента.Проведение Тогда
					бг_ИнтеграцияSAP.ЗарегистрироватьИсходящееСообщениеReserveOrderResponse(Источник.Ссылка, ОсновнойКодОтвета, Истина);
				КонецЕсли;	
			КонецЕсли;
		Исключение	
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось сформировать Заказы клиентов по %1.
					       |По причине: %2
						   |';
					 |en = 'Failed to generate Sales Orders by %1.
					       |Reason: %2
						   |'",	
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Источник,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииСозданияЗаказовКлиентов(),
				УровеньЖурналаРегистрации.Ошибка,
				Источник.Метаданные(),
				Источник,
				ТекстСообщения);
				
			Если Источник.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда	
				// Здесь надо иметь ввиду, что зарегистрированное исходящее сообщение не будет записано в ИБ, так как при отмене
				// транзакции записи документа, будет отменена и запись всех связанных данных.
				// Но при этом сообщение с ответом об ошибке будет отправлено. 
				Если РежимЗаписиИсточника = РежимЗаписиДокумента.Проведение Тогда
					бг_ИнтеграцияSAP.ЗарегистрироватьИсходящееСообщениеReserveOrderResponse(Источник.Ссылка, "500", ТекстСообщения, Истина);
				КонецЕсли;	
			КонецЕсли;
				
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	Иначе	
		Если Источник.Товары.Количество() > 0 Тогда
			ДатаОтгрузки = Источник.Товары[0].ДатаОтгрузки;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			ДатаОтгрузки = ТекущаяДатаСеанса();	
		КонецЕсли;
		
		// Чтобы отсортировать при создании заказов заявки по дате отгрузки,
		// в качестве приоритета будем использовать порядковый номер дня отгрузки, считая от 01.01.2000.
		ДеньОтгрузки = Цел((ДатаОтгрузки - '20000101000000') / 86400); 

		Если Источник.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
			ВариантОтложеннойОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьИнтернетЗаказыКлиентов;
		Иначе	
        	ВариантОтложеннойОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьЗаказыКлиентов;	
		КонецЕсли;	
		
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Источник.Ссылка, 
			ВариантОтложеннойОбработки,
			ДеньОтгрузки);
			
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

// Интерфейс для отложенной обработки заявок клиентов.
//
// Параметры:
//   Источник - ДокументСсылка.битЗаявкаКлиента - заявка клиента, которую надо обработать.
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов - вариант обработки заявки клиента.
//   Отказ - Булево - Отказ от обработки.
//
Процедура бг_ОтложеннаяОбработкаОбъекта(Источник, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НачалоВремя = ОценкаПроизводительности.НачатьЗамерВремени();
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Операция,Проведен");
	
	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьЗаказыКлиентов 
		Или ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьИнтернетЗаказыКлиентов Тогда
		
		НетВнешнейТранзакции = Не ТранзакцияАктивна();
		Если НетВнешнейТранзакции Тогда
			НачатьТранзакцию();	
		КонецЕсли;	
		
		Попытка
			СинхронизироватьЗаказыКлиента(Источник, Отказ);
			
			Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьИнтернетЗаказыКлиентов Тогда	
				Если РеквизитыЗаявки.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.Резервирование Тогда
					ОсновнойКодОтвета = "200";
				ИначеЕсли РеквизитыЗаявки.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.ОтменаРезервирования Тогда	
				    ОсновнойКодОтвета = "202";
				КонецЕсли;
				Если РеквизитыЗаявки.Проведен Тогда
					бг_ИнтеграцияSAP.ЗарегистрироватьИсходящееСообщениеReserveOrderResponse(Источник, ОсновнойКодОтвета);
				КонецЕсли;	
			КонецЕсли;
			
			Если НетВнешнейТранзакции Тогда
				ЗафиксироватьТранзакцию();	
			КонецЕсли;	

			ОценкаПроизводительности.ЗакончитьЗамерВремени(
				"ОбработкаЗаявок.СформироватьЗаказыКлиентов", 
				НачалоВремя, 
				Источник.Товары.Количество(),
				СокрЛП(Источник), 
				Ложь);
			
		Исключение
			
			Если НетВнешнейТранзакции Тогда
				ОтменитьТранзакцию();	
			КонецЕсли;	
			
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось сформировать Заказы клиентов по %1.
					       |По причине: %2
						   |';
					 |en = 'Failed to generate Sales Orders by %1.
					       |Reason: %2
						   |'",	
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				Источник,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрацииСозданияЗаказовКлиентов(),
				УровеньЖурналаРегистрации.Ошибка,
				Источник.Метаданные(),
				Источник,
				ТекстСообщения);
				
			ВызватьИсключение ТекстСообщения;	
		КонецПопытки;	
	КонецЕсли;

КонецПроцедуры

// Интерфейс для регистрации ошибок отложенной обработки заявок клиентов.
//
// Параметры:
//   Источник - ДокументСсылка.битЗаявкаКлиента - заявка клиента, которую надо обработать.
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов - вариант обработки заявки клиента.
//   ТекстОшибки - Строка - Описание ошибки обработки.
//
Процедура бг_ЗафиксироватьОшибкуОтложеннойОбработки(Источник, ВариантОбработки, ТекстОшибки) Экспорт

	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "Операция,Проведен");
	
	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьИнтернетЗаказыКлиентов 
		И РеквизитыЗаявки.Проведен Тогда	
		бг_ИнтеграцияSAP.ЗарегистрироватьИсходящееСообщениеReserveOrderResponse(Источник, "500", ТекстОшибки);	
	КонецЕсли;

КонецПроцедуры

#Область ФормированиеЗаказовКлиентов

// Синхронизирует (создает/актуализирует) Заказы клиента по переданной Заявке клиента. 
//
// Параметры:
//  Источник - ДокументОбъект.битЗаявкаКлиента, ДокументСсылка.битЗаявкаКлиента - Заявка клиента, по которой надо синхронизировать зависимые документы. 
//  Отказ - Булево - флаг отказа, неудачной попытки синхронизировать зависимые документы. 
//
Процедура СинхронизироватьЗаказыКлиента(Источник, Отказ = Ложь) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда		
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	РеквизитыИсточника = РеквизитыЗаявкиКлиентаДляФормированияЗаказов(Источник);
	
	ЗаполнитьКодыSAPвСКЮМТ(РеквизитыИсточника);
	
	Если РеквизитыИсточника.ИсточникЗаказа 
			= Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		// Формировние заказов контрагентов ВГО выполняется особым образом в специализированном АРМ.
		Возврат;
	КонецЕсли;
	
	Если РеквизитыИсточника.ПометкаУдаления Тогда
		ТребуютсяЗависимыеДокументы = Ложь;
	Иначе	
		ЕстьСтрокиСНеПустымКоличеством = Ложь;
		Для Каждого СтрокаТЧ Из РеквизитыИсточника.Товары Цикл
			Если СтрокаТЧ.Количество <> 0 Тогда
				ЕстьСтрокиСНеПустымКоличеством = Истина;		
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		ТребуютсяЗависимыеДокументы = 
		    РеквизитыИсточника.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.ОтменаРезервирования
				Или (РеквизитыИсточника.Товары.Количество() > 0 И ЕстьСтрокиСНеПустымКоличеством);
	КонецЕсли;	
	
	Если РеквизитыИсточника.Товары.Количество() = 0
		И РеквизитыИсточника.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
  		ШаблонСообщения = 
			НСтр("ru = '%1, не указан список товаров в интернет-заказе %2.';
				 |en = '%1, не указан список товаров в интернет-заказе %2.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, РеквизитыИсточника.Ссылка, РеквизитыИсточника.НомерПоДаннымКлиента);
			
		ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
	    ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ТаблицаЗависимыхДокументов = ТаблицаЗаказовПоЗаявкеКлиента(РеквизитыИсточника.Ссылка);
	
	Если ТаблицаЗависимыхДокументов.Количество() > 0 Тогда
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказКлиента");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаЗависимыхДокументов;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ЗависимыйДокумент");
			Блокировка.Заблокировать();
		Исключение
			Если ТаблицаЗависимыхДокументов.Количество() = 1 Тогда
				ТекстСообщения = НСтр("ru = 'Документ %1. Не удалось установить блокировку.';
										           |en = 'Document %1. Failed to set lock.'",	
									               КодОсновногоЯзыка);
				ТекстСообщения = СтрШаблон(ТекстСообщения, ТаблицаЗависимыхДокументов[0].ЗависимыйДокумент);
			Иначе	
				ТекстСообщения = 
					НСтр("ru = 'Не удалось установить блокировку на Заказы клиентов.';
						 |en = 'Failed to set lock on Sales Orders.'",	
					КодОсновногоЯзыка);
			КонецЕсли;
										   
			ТекстСообщения =  ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			
			ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;	
		КонецПопытки;
	КонецЕсли;	
	
	Если ТребуютсяЗависимыеДокументы И РеквизитыИсточника.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗаполнитьЗаказыКлиентаПоЗаявкеКлиента(РеквизитыИсточника, ТаблицаЗависимыхДокументов);
		
		Для Каждого СтрокаЗависимыхДокументов Из ТаблицаЗависимыхДокументов Цикл 
			Если СтрокаЗависимыхДокументов.ПометкаУдаления И СтрокаЗависимыхДокументов.СостояниеПометкиУдаления Тогда
				// Ничего делать не надо, зависимый документ (ЗаказКлиента),
				// созданный на основании документа источника (битЗаявкаКлиента) уже помечен на удаление.
				СтрокаЗависимыхДокументов.ТребуетсяЗапись = Ложь;
			КонецЕсли;		
		КонецЦикла;
	Иначе	
		Для Каждого СтрокаЗависимыхДокументов Из ТаблицаЗависимыхДокументов Цикл 
			Если СтрокаЗависимыхДокументов.ПометкаУдаления Тогда
				// Ничего делать не надо, зависимый документ (ЗаказКлиента),
				// созданный на основании документа источника (битЗаявкаКлиента) уже помечен на удаление.
				СтрокаЗависимыхДокументов.ТребуетсяЗапись = Ложь;
			КонецЕсли;		
		КонецЦикла;
	КонецЕсли;
	
	ЗаписатьЗависимыеДокументвВИБ(РеквизитыИсточника, ТаблицаЗависимыхДокументов);
	
	ЗаписатьПротоколРасхожденийДанныхКЗ(РеквизитыИсточника, ТребуютсяЗависимыеДокументы);
	
КонецПроцедуры	

// Возвращает реквизиты заявки клиента, необходимые для формирования заказов клиента.
//
// Параметры:
//  Источник - ДокументОбъект.битЗаявкаКлиента, ДокументСсылка.битЗаявкаКлиента - Заявка клиента.
//  АктуализацияОбеспечения - Булево - Если Истина, значит вызвано из процедуры актуализации обеспечения заказов.   
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Используется только при актуализации обеспечения. 
//                                               Если передан, то актуализации обеспечения будет проводится по этому
//                                               заказу обособленно. Только по товарам заказа и со склада заказа.
//
// Возвращаемое значение:
//  РеквизитыИсточника- Структура - параметры для формирования заказов клиента.
//
Функция РеквизитыЗаявкиКлиентаДляФормированияЗаказов(Источник, 
													АктуализацияОбеспечения = Ложь, 
													ЗаказКлиента = Неопределено) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда		
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;

	РеквизитыИсточникаСтрока = 
		"ПометкаУдаления,Проведен,Ссылка,Дата,Партнер,Организация,Контрагент,КодГрузополучателя,"
		+ "ДатаПоДаннымКлиента,НомерПоДаннымКлиента,ИсточникЗаказа,ДатаДоставки,ДоставкаСледующийДень,Операция,"
		+ "НаименованиеГрузополучателя,алкПунктРазгрузкиОрганизации,СтатусЗаявкиКлиентаСобственногоКонтрагента,"
		+ "КодТТSY,Комментарий,ГУИДЗаказаСПортала,ВиртуальныйЗаказ,Исходный,"
		+ "ДатаПодтверждения,ГУИДПредзаказаСобственногоКонтрагента,ПунктНазначения,ДатаОтгрузки";
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.битЗаявкаКлиента") Тогда
		РеквизитыИсточника = Новый Структура(РеквизитыИсточникаСтрока);
		ЗаполнитьЗначенияСвойств(РеквизитыИсточника, Источник);
		РеквизитыИсточника.Вставить("Товары", Источник.Товары.Выгрузить());
		
		РежимЗаписиИсточника = Источник.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.РежимЗаписи;
		
		// Добавим и заполним универсальную колонку для работы общих алгоритмов формирования заказов.
		РеквизитыИсточника.Товары.Колонки.Добавить("КодДляПоискаНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(18)); 
		ИсточникЗаказа = РеквизитыИсточника.ИсточникЗаказа;
		Для Каждого СтрокаТЧ Из РеквизитыИсточника.Товары Цикл
			Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
				Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
				СтрокаТЧ.КодДляПоискаНоменклатуры = СтрокаТЧ.КодSKUMT;
			ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
				СтрокаТЧ.КодДляПоискаНоменклатуры = СтрокаТЧ.КодНСИ;
			Иначе
				СтрокаТЧ.КодДляПоискаНоменклатуры = СтрокаТЧ.КодНоменклатурыSAP;
			КонецЕсли;
	    КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.битЗаявкаКлиента") Тогда

		Если ТранзакцияАктивна() Тогда
			// Если получаем реквизиты в транзакции, например, при обработке из очереди, то блокируем заявку. 
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.битЗаявкаКлиента");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Источник);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Документ %1. Не удалось установить блокировку.';
										           |en = 'Document %1. Failed to set lock.'",	
									               ОбщегоНазначения.КодОсновногоЯзыка());
				ТекстСообщения = СтрШаблон(ТекстСообщения, Источник);
				ТекстСообщения =  ТекстСообщения + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());			
				ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
				ВызватьИсключение ТекстСообщения;	
			КонецПопытки;
		КонецЕсли;
		
		РеквизитыИсточника = РеквизитыЗаявкиКлиентаДляФормированияЗаказовПоСсылке(
				Источник,
				РеквизитыИсточникаСтрока,
				АктуализацияОбеспечения,
				ЗаказКлиента);
		
		РежимЗаписиИсточника = ?(РеквизитыИсточника.Проведен,
				РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	Иначе

		ТекстСообщения = НСтр("ru = 'Документ %1. Не верный тип документа для формирования заказов.';
								           |en = 'Document %1. Incorrect document type for generating sales orders.'",	
							               ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрШаблон(ТекстСообщения, Источник);
		
		ДополнитьТекстСообщениямиПользователю(ТекстСообщения);	
		ВызватьИсключение ТекстСообщения;
	КонецЕсли; 	
	
	ИсточникЗаказа = РеквизитыИсточника.ИсточникЗаказа;
	
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
	    РеквизитыИсточника.Вставить(
			"СегментНоменклатурыЗапрещеннойКПродаже",
			бг_КонстантыПовтИсп.ЗначениеКонстанты("СегментНоменклатурыНеПродаватьВинлаб"));

	    РеквизитыИсточника.Вставить(
			"СегментНоменклатурыПриоритетнойКПродаже",
			бг_КонстантыПовтИсп.ЗначениеКонстанты("СегментНоменклатурыПриоритетнаяДляПродажиВинлаб"));
	КонецЕсли;
	
	РеквизитыИсточника.Вставить("ОбособленныйЗаказКлиента", ЗаказКлиента);
	РеквизитыИсточника.Вставить("КаналПродаж", КаналПродажЗаявкиКлиента(РеквизитыИсточника));
	РеквизитыИсточника.Вставить("ДатаОтгрузки", ДатаОтгрузкиЗаявкиКлиента(РеквизитыИсточника));
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		РеквизитыИсточника.Вставить(
			"Склад",
			бг_КонстантыПовтИсп.ЗначениеКонстанты("ОсновнойСкладОтгрузкиВГО"));
	КонецЕсли;
	
	РеквизитыИсточника.Вставить("РежимЗаписи", РежимЗаписиИсточника);	
		
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP 
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		РеквизитыИсточника.Вставить("ОбеспечиватьИзОжидаемыхПоступлений", Истина);
		РеквизитыИсточника.Вставить("ИспользоватьПравилаОкругленияДоКороба", Истина);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаявкаКлиента", РеквизитыИсточника.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Заказы.Ссылка КАК ЗаказКлиента
		|ИЗ
		|	Документ.ЗаказКлиента КАК Заказы
		|ГДЕ
		|	НЕ Заказы.ПометкаУдаления
		|	И Заказы.бг_ЗаявкаКлиента = &ЗаявкаКлиента";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ПараметрыПередачиНаСборку = 
				бг_ЗаказыКлиентов.ПараметрыПередачиНаСборкуЗаказаКлиента(Выборка.ЗаказКлиента);
			Если ПараметрыПередачиНаСборку.ПередатьНаСборку Тогда
				// Если уже пришло время передавать заказ на сборку,
				// то обеспечивать из ожидаемых поступлений не нужно.
				РеквизитыИсточника.Вставить("ОбеспечиватьИзОжидаемыхПоступлений", Ложь);
			КонецЕсли;	
		КонецЕсли;
	Иначе	
		// Интернет и консолидированные заказы из ожидаемых поступлений не обеспечиваем 
		// и до коробок не округляем.
		РеквизитыИсточника.Вставить("ОбеспечиватьИзОжидаемыхПоступлений", Ложь);
		РеквизитыИсточника.Вставить("ИспользоватьПравилаОкругленияДоКороба", Ложь);
	КонецЕсли;
	
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		РеквизитыИсточника.Вставить("ПодборНоменклатурыПоНаибольшимОстаткамСерий", Истина);
	КонецЕсли;
	
	Возврат РеквизитыИсточника;
	
КонецФункции	

// Возвращает признак того, что заказы клиентов формируются отложенно регламентным заданием.
//
Функция ФормироватьЗаказыКлиентовРегламентнымЗаданием() Экспорт
	
	Возврат Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецФункции	

// Обновляет обеспечение в заказах клиентов, сформированных по заявке клиента.
//  В строках с действием "К обеспечению", по новым данным о доступности товаров.
//
// Параметры:
//  ЗаявкаКлиента - ДокументСсылка.битЗаявкаКлиента - Заявка клиента.
//
Процедура ОбновитьОбеспечениеЗаказовПоЗаявкиКлиента(ДанныеЗаявкиКлиента, ТоварыЗаказКлиента) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда		
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТаблицаЗависимыхДокументов = ТаблицаЗаказовПоЗаявкеКлиента(
		ДанныеЗаявкиКлиента.Ссылка,
		ДанныеЗаявкиКлиента.ОбособленныйЗаказКлиента);
	ТоварыЗаказКлиента.Сортировать("бг_КодСтрокиЗаявки");
	СоздатьОбновитьЗаказыКлиентов(ДанныеЗаявкиКлиента, ТоварыЗаказКлиента, ТаблицаЗависимыхДокументов, Истина);
	ЗаписатьЗависимыеДокументвВИБ(ДанныеЗаявкиКлиента, ТаблицаЗависимыхДокументов);
	
КонецПроцедуры

// Возвращает событие журнала регистрации для записи информации и ошибок создания заказов клиентов по заявкам.   
//
Функция СобытиеЖурналаРегистрацииСозданияЗаказовКлиентов() Экспорт 
	
	Возврат НСтр("ru = 'Формирование заказов клиентов';
	             |en = 'Generating sales orders'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());

КонецФункции

// Возвращает таблицу протокола расхождений консолидированного заказа от SAP и предзаказов от Hybris.
//
//  Параметры:
//   ЗаявкаКлиента  - ДокументСсылка.битЗаявкаКлиента  - Ссылка на заявку клиента КЗ, для которой 
//                                                       надо сформировать протокол расхождений данных.
// 
//  Возвращаемое значение:
//   ТаблицаРасхождений - ТаблицаЗначений - Таблица, содержащая данные по расхождениям, подготовленная
//                              для записи в РС "бг_РасхожденияДанныхКонсолидированныхЗаказовSAPиHybris". 
//
Функция ТаблицаРасхожденийДанныхКонсолидированныхЗаказов(ЗаявкаКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ТаблицаРасхождений = Новый ТаблицаЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаКлиента", ЗаявкаКлиента);
	Запрос.Текст = 
    #Область ТекстЗапроса
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ПОМЕСТИТЬ СписокКонсолидированныхЗаказов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.бг_ЗаявкаКлиента = &ЗаявкаКлиента
	|	И ЗаказКлиента.бг_ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED)
	|	И ЗаказКлиента.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Товары.бг_ЗаказКлиентаИсточникОбеспечения КАК Документ.ЗаказКлиента).бг_ЗаявкаКлиента КАК ЗаявкаКлиента
	|ПОМЕСТИТЬ СписокЗаявокПредзаказов
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокКонсолидированныхЗаказов КАК СписокКонсолидированныхЗаказов
	|		ПО Товары.Ссылка = СписокКонсолидированныхЗаказов.ЗаказКлиента
	|ГДЕ
	|	НЕ Товары.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаявкаКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК ЗаявкаКлиента,
	|	Товары.КодПозицииЗаказа КАК КодПозицииПредзаказаКлиента,
	|	МАКСИМУМ(Товары.КодНоменклатурыSAP) КАК КодНоменклатурыSAP
	|ПОМЕСТИТЬ КодыНоменклатурыSAPЗаявокПредзаказов
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокЗаявокПредзаказов КАК СписокЗаявокПредзаказов
	|		ПО Товары.Ссылка = СписокЗаявокПредзаказов.ЗаявкаКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	Товары.КодПозицииЗаказа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаявкаКлиента,
	|	КодПозицииПредзаказаКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КодПозицииЗаказа КАК КодПозицииКонсолидированногоЗаказа,
	|	Товары.НомерПредзаказаКлиента КАК НомерПредзаказаКлиента,
	|	Товары.КодПозицииПредзаказаКлиента КАК КодПозицииПредзаказаКлиента,
	|	Товары.КодНоменклатурыSAP КАК КодНоменклатурыSAP,
	|	Товары.Количество КАК КоличествоSAP,
	|	0 КАК КоличествоКОтгрузке
	|ПОМЕСТИТЬ ТоварыСводныеДанные
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ЗаявкаКлиента
	|	И Товары.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.бг_КодСтрокиЗаявки,
	|	Товары.бг_НомерПредзаказаКлиента,
	|	Товары.бг_КодПозицииПредзаказаКлиента,
	|	ЕСТЬNULL(КодыНоменклатурыSAPЗаявокПредзаказов.КодНоменклатурыSAP, """"),
	|	0,
	|	Товары.Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокКонсолидированныхЗаказов КАК СписокКонсолидированныхЗаказов
	|		ПО Товары.Ссылка = СписокКонсолидированныхЗаказов.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыНоменклатурыSAPЗаявокПредзаказов КАК КодыНоменклатурыSAPЗаявокПредзаказов
	|		ПО (ВЫРАЗИТЬ(Товары.бг_ЗаказКлиентаИсточникОбеспечения КАК Документ.ЗаказКлиента).бг_ЗаявкаКлиента = КодыНоменклатурыSAPЗаявокПредзаказов.ЗаявкаКлиента)
	|			И Товары.бг_КодПозицииПредзаказаКлиента = КодыНоменклатурыSAPЗаявокПредзаказов.КодПозицииПредзаказаКлиента
	|ГДЕ
	|	НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ЗаявкаКлиента КАК ЗаявкаКлиента,
	|	Товары.КодПозицииКонсолидированногоЗаказа КАК КодПозицииКонсолидированногоЗаказа,
	|	Товары.НомерПредзаказаКлиента КАК НомерПредзаказаКлиента,
	|	Товары.КодПозицииПредзаказаКлиента КАК КодПозицииПредзаказаКлиента,
	|	Товары.КодНоменклатурыSAP КАК КодНоменклатурыSAP,
	|	СУММА(Товары.КоличествоSAP) КАК КоличествоSAP,
	|	СУММА(Товары.КоличествоКОтгрузке) КАК КоличествоКОтгрузке,
	|	ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка) КАК СкюМТ,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(500)) КАК ТекстПротокола
	|ИЗ
	|	ТоварыСводныеДанные КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.КодПозицииКонсолидированногоЗаказа,
	|	Товары.НомерПредзаказаКлиента,
	|	Товары.КодПозицииПредзаказаКлиента,
	|	Товары.КодНоменклатурыSAP
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.КоличествоSAP) <> СУММА(Товары.КоличествоКОтгрузке)";
	#КонецОбласти
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаРасхождений = РезультатЗапроса.Выгрузить();
		ЗаполнитьСвязанныеКолонкиТаблицаРасхождений(ТаблицаРасхождений, ЗаявкаКлиента);
	КонецЕсли;
	
	Возврат ТаблицаРасхождений;
	
КонецФункции	
	
#КонецОбласти

// Возвращает рассчитанный статус заявки клиента собственного контрагента. 
//
// Параметры:
//  Объект - ДокументОбъект.битЗаявкаКлиента - Заявка клиента, по которой надо рассчитать статус.
//
// Возвращаемое значение:
//  Статус - ПеречислениеСсылка.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов -
//                                      рассчитанный статус заявки клиента собственного контрагента
//
Функция бг_СтатусЗаявкиКлиентаСобственногоКонтрагента(Объект) Экспорт
	
	Если Объект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		
		Если ЗначениеЗаполнено(Объект.ДатаОтмены) Тогда
			Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Отменена;
		ИначеЕсли ЗначениеЗаполнено(Объект.ДатаПодтверждения) Тогда
			Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Подтверждена;
		ИначеЕсли ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.ЧастичноПодтверждена;
		Иначе
			Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.КОбработке;
		КонецЕсли;
		
	Иначе
		
		Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Формирует и отправляет электронное письмо с подтверждением заявки (предзаказа) клиенту ВГО. 
//
//  Параметры:
//   ЗаявкаКлиента          - ДокументСсылка.битЗаявкаКлиента  - Ссылка на заявку клиента.
//   ПодтверждаемыеЗаказы   - Массив - массив ссылок на заказы клиентов, которые подтверждаем.
//   ЧастичноеПодтверждение - Булево - Истина - Частичное, Ложь - Полное подтверждение.
//
Процедура ОтправитьПодтверждениеЗаявкиКлиентаСобственногоКонтрагента(ЗаявкаКлиента,
																	ПодтверждаемыеЗаказы,
																	ЧастичноеПодтверждение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаВыгружаемыхФайлов = Новый Соответствие;
	ИменаВыгружаемыхФайловТекстПисьма = Новый Массив; 
	Если Не ЧастичноеПодтверждение Тогда
		ИмяФайла = ИмяВыгружаемогоФайла(ЗаявкаКлиента);
		ИменаВыгружаемыхФайлов.Вставить(ЗаявкаКлиента, ИмяФайла);
		ИменаВыгружаемыхФайловТекстПисьма.Добавить(ИмяФайла);
	КонецЕсли;
	Для Каждого ЗаказКлиента Из ПодтверждаемыеЗаказы Цикл
		ИмяФайла = ИмяВыгружаемогоФайла(ЗаказКлиента);
		ИменаВыгружаемыхФайлов.Вставить(ЗаказКлиента, ИмяФайла);
		ИменаВыгружаемыхФайловТекстПисьма.Добавить(ИмяФайла);
	КонецЦикла;
	
	ШаблонСообщения = бг_КонстантыПовтИсп.ЗначениеКонстанты("ШаблонСообщенияДляОтправкиПодтвержденийПоЗаявкамВГО");
	ТипТекстаПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ШаблонСообщения, "ТипТекстаПисьма");
	Если ТипТекстаПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.HTML Тогда
		ТекстИменаФайлов = СтрСоединить(ИменаВыгружаемыхФайловТекстПисьма, "<br>");
	Иначе
		ТекстИменаФайлов = СтрСоединить(ИменаВыгружаемыхФайловТекстПисьма, Символы.ПС);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ПроизвольныеПараметры = Новый Соответствие;
	ПроизвольныеПараметры.Вставить("ИменаФайлов", ТекстИменаФайлов);
	ДополнительныеПараметры.Вставить("ПроизвольныеПараметры", ПроизвольныеПараметры);
	
	ДанныеПисьма = ШаблоныСообщений.СформироватьСообщение(
		ШаблонСообщения,
		ЗаявкаКлиента,
		Новый УникальныйИдентификатор,
		ДополнительныеПараметры);
	
	УчетнаяЗапись = УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию();
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстСообщения = НСтр("ru = 'Нет доступных учетных записей для отправки почты.'"); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	АдресПолучателя = "";
	ВидКИ = бг_ОбщегоНазначенияСервер.ВидКонтактнойИнформацииПоИдентификаторуДляФормул(
		"EMailДляОбменаЭлектроннымиДокументами");
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		ТекстСообщения = 
			НСтр("ru = 'Не найден видконтактной информации ""E-Mail обмена электронными документами"".'"); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаКлиента, "Партнер");
	Если ЗначениеЗаполнено(Партнер) Тогда
		АдресПолучателя = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Партнер, ВидКИ); 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(АдресПолучателя) Тогда
		ШаблонСообщения = НСтр("ru = 'Для пратнера %1 не указан E-Mail обмена электронными документами.'"); 
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Партнер); 
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ДанныеПисьма.Получатель.Добавить(АдресПолучателя);
	
	Если Не ЧастичноеПодтверждение Тогда
		ОбъектXDTO = СформироватьОбъектXDTOПодтверждениеЗаявки(ЗаявкаКлиента);
		Представление = ИменаВыгружаемыхФайлов.Получить(ЗаявкаКлиента);
		ДобавитьВложениеФайлаXML(ДанныеПисьма.Вложения, ОбъектXDTO, Представление);
	КонецЕсли;
	
	Для Каждого ЗаказКлиента Из ПодтверждаемыеЗаказы Цикл
		ОбъектXDTO = СформироватьОбъектXDTO(ЗаказКлиента);
		Представление = ИменаВыгружаемыхФайлов.Получить(ЗаказКлиента);
		ДобавитьВложениеФайлаXML(ДанныеПисьма.Вложения, ОбъектXDTO, Представление);
	КонецЦикла;
	
	// Заполним даты отправки подтверждений в заказах клиентов, если будет ошибка в отправке письма
	// то транзакция будет отменена.
	ЗаполнитьДатаОтправкиПодтверждений(ЗаявкаКлиента, ПодтверждаемыеЗаказы, ЧастичноеПодтверждение);
	
	РезультатОтправки = Взаимодействия.СоздатьПисьмо(ДанныеПисьма, УчетнаяЗапись, Истина);
	
	Если Не РезультатОтправки.Отправлено Тогда
		ВызватьИсключение РезультатОтправки.ОписаниеОшибки; 
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Отправлено %1 по предзаказу %2. %3'"); 
	ТекстСообщения = СтрШаблон(
		ШаблонСообщения,
		?(ЧастичноеПодтверждение, НСтр("ru = 'частичное подтверждение'"), НСтр("ru = 'подтверждение/закрытие'")),
		ЗаявкаКлиента,
		РезультатОтправки.СсылкаНаПисьмо);
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, РезультатОтправки.СсылкаНаПисьмо);
	
КонецПроцедуры

// Возвращает флаг возможности отправить подтверждение по заказам, сформированным по заявке. 
//
//  Параметры:
//   ЗаявкаКлиента          - ДокументСсылка.битЗаявкаКлиента  - Ссылка на заявку клиента.
//
//  Возвращаемое значение:
//   Булево - Истина, возможно подтверждение заказов.
//
Функция ВозможноПодтверждениеЗаказовПоЗаявке(ЗаявкаКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗаявкаКлиента,
		"ИсточникЗаказа,СтатусЗаявкиКлиентаСобственногоКонтрагента,Проведен");
	
	СтатусОтмены = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Отменена;
	СтатусПолногоПодтверждения = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Подтверждена;
	
	Возврат РеквизитыЗаявки.Проведен
		И РеквизитыЗаявки.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент
		И РеквизитыЗаявки.СтатусЗаявкиКлиентаСобственногоКонтрагента <> СтатусОтмены
		И РеквизитыЗаявки.СтатусЗаявкиКлиентаСобственногоКонтрагента <> СтатусПолногоПодтверждения;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеЗаказовКлиентов

Процедура ЗаполнитьЗаказыКлиентаПоЗаявкеКлиента(ДанныеЗаявкиКлиента, ТаблицаЗависимыхДокументов)
	
	Если ДанныеЗаявкиКлиента.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда 
		ДанныеЗаявкиКлиента.Вставить(
				"ТаблицаРезервыПредзаказовСторнированныеКЗ", 
				ТаблицаРезервыПредзаказовСторнированныеКонсолидированнымиЗаказами(ТаблицаЗависимыхДокументов));
		ТоварыЗаказКлиента = бг_ЗаказыКлиентов.ТЧТоварыЗаказаКлиента(ДанныеЗаявкиКлиента, Неопределено);	
	ИначеЕсли ДанныеЗаявкиКлиента.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS 
		И ДанныеЗаявкиКлиента.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.ОтменаРезервирования Тогда	
		ОтменитьЗаказыКлиентов(ДанныеЗаявкиКлиента, ТаблицаЗависимыхДокументов);
		Возврат;
	Иначе
		// Так как свободные остатки и долгосрочные резервы для обеспечения позиций заказов клиентов
		// при формировании данных по номенклатуре подбираются по данным регистра сведений РаспределениеЗапасов,
		// распроведем уже сформированные и проведенные по заявке заказы клиентов, чтобы движения этих
		// заказов не уменьшали доступные остатки и резервы для обеспечения.
		Для Каждого СтрокаЗависимыхДокументов Из ТаблицаЗависимыхДокументов Цикл
			Если СтрокаЗависимыхДокументов.Проведен Тогда
				ЗависимыйДокументОбъект = СтрокаЗависимыхДокументов.ЗависимыйДокумент.ПолучитьОбъект();
				Попытка
					// Отмена проведения и проведение выполняются в одной транзакции, не будем лишний раз
					// регистрировать заказ к обмену в исходящих сообщениях адаптера.
					ЗависимыйДокументОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоГрупповаяОбработкаДанных");
					ЗависимыйДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					СтрокаЗависимыхДокументов.Проведен = Ложь;
				Исключение	
					ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось отменить проведение документа %1.';
											           |en = 'The posting of the %1 document is not cancelled.'",	
										               ОбщегоНазначения.КодОсновногоЯзыка());
													   
					ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки, СтрокаЗависимыхДокументов.ЗависимыйДокумент) + 
						Символы.ПС + 
						НСтр("ru = 'По причине: '; en = 'Reason: '", ОбщегоНазначения.КодОсновногоЯзыка()) +
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
				
					ВызватьИсключение ТекстСообщения;
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ДанныеПоНоменклатуре = бг_ЗаказыКлиентов.ДанныеПоНоменклатуре(ДанныеЗаявкиКлиента);		
		ТоварыЗаказКлиента = бг_ЗаказыКлиентов.ТЧТоварыЗаказаКлиента(ДанныеЗаявкиКлиента, ДанныеПоНоменклатуре);
	КонецЕсли;	
	
	ТоварыЗаказКлиента.Сортировать("бг_КодСтрокиЗаявки");
	СоздатьОбновитьЗаказыКлиентов(ДанныеЗаявкиКлиента, ТоварыЗаказКлиента, ТаблицаЗависимыхДокументов, Ложь);
	
КонецПроцедуры

Процедура ОтменитьЗаказыКлиентов(ДанныеЗаявкиКлиента, ТаблицаЗависимыхДокументов)
	
	// Нельзя отменять интернет-заказ, если он уже был включен в консолидированный заказ.
	// Так как по одной заявке клиента может быть сформировано несколько заказов клиента,
	// проверим, что ни один из заказов клиента не включен в консолидированный заказ.
	ЕстьПозицииВключенныеВКЗ = Ложь;
	Для каждого СтрокаСЗависимымДокументом Из ТаблицаЗависимыхДокументов Цикл
		Если Документы.ЗаказКлиента.бг_ИнтернетЗаказВключенВКонсолидированныйЗаказ(СтрокаСЗависимымДокументом.ЗависимыйДокумент) Тогда
			ЕстьПозицииВключенныеВКЗ = Истина;
			Прервать;	
		КонецЕсли;	
	КонецЦикла;
	
	Если ЕстьПозицииВключенныеВКЗ Тогда
		// Сбросим флаг необходимости записи для всех заказов клиентов.
		Для каждого СтрокаСЗависимымДокументом Из ТаблицаЗависимыхДокументов Цикл
			СтрокаСЗависимымДокументом.ТребуетсяЗапись = Ложь;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаСЗависимымДокументом Из ТаблицаЗависимыхДокументов Цикл
		
		// При отмене заказа пометку удаления не меняем.  
		СтрокаСЗависимымДокументом.СостояниеПометкиУдаления = СтрокаСЗависимымДокументом.ПометкаУдаления;	
		
		Если СтрокаСЗависимымДокументом.ПометкаУдаления Тогда
			// При отмене заказа в помеченных на удаление заказах ничего менять не надо.
			СтрокаСЗависимымДокументом.ТребуетсяЗапись = Ложь;
			Продолжить;	
		КонецЕсли;
		
		ДокументОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокумент.ПолучитьОбъект();
		СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = ДокументОбъект;
		
		БылиНеОтмененныеСтроки = Ложь; 
		Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
			Если Не СтрокаТЧ.Отменено Тогда
				СтрокаТЧ.Отменено = Истина;
				СтрокаТЧ.ПричинаОтмены = бг_КонстантыПовтИсп.ЗначениеКонстанты("ПричинаОтменыОтказКлиентаИнтернетМагазина");
				БылиНеОтмененныеСтроки = Истина;
			КонецЕсли;	
		КонецЦикла;

		Если Не БылиНеОтмененныеСтроки Тогда
			// В заказе ничего не меняли, сбросим флаг необходимости записи.
			СтрокаСЗависимымДокументом.ТребуетсяЗапись = Ложь;
			Продолжить;	
		КонецЕсли;
		
		ДокументОбъект.ЭтапыГрафикаОплаты.Очистить();
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект,
			Документы.ЗаказКлиента));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		
		ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
		
		ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументОбъект);
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура СоздатьОбновитьЗаказыКлиентов(ДанныеЗаявкиКлиента, 
										ТоварыЗаказКлиента, 
										ТаблицаЗависимыхДокументов, 
										АктуализацияОбеспечения)

	Если АктуализацияОбеспечения Тогда
		
		// При актуализации обеспечения записывать будем, только те заказы, которые изменим.
		Для каждого СтрокаСЗависимымДокументом Из ТаблицаЗависимыхДокументов Цикл
			СтрокаСЗависимымДокументом.ТребуетсяЗапись = Ложь;
		КонецЦикла;
		
		Если Не бг_ЗаказыКлиентов.ВыполненаАктуализацияОбеспечения(ТоварыЗаказКлиента) Тогда
			// При актуализации обеспечения не нашли новых доступных остатков ни по одной позиции.
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаЗависимыхДокументов.Колонки.Добавить("ПолученДокументОбъект", Новый ОписаниеТипов("Булево"));
	
	Если ДанныеЗаявкиКлиента.ИсточникЗаказа = 
			Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		ЗаполнитьЦеныПоИмеющейсяНоменклатуре(ТоварыЗаказКлиента);	
	КонецЕсли;

	// Разделим заказы по ключевым реквизитам (складам, видам номенклатуры).
	КлючевыеРеквизиты = КлючевыеРеквизитыЗаказаКлиента();
	ТаблицаКлючевыхРеквизитов = ТоварыЗаказКлиента.Скопировать(, КлючевыеРеквизиты); 
	ТаблицаКлючевыхРеквизитов.Свернуть(КлючевыеРеквизиты, );
	ОтборКлючевыхРеквизитов = Новый Структура(КлючевыеРеквизиты);
	Для каждого СтрокаКлючевыхРеквизитов Из ТаблицаКлючевыхРеквизитов Цикл
		СоздатьОбновитьЗаказКлиента(
			СтрокаКлючевыхРеквизитов, 
			ОтборКлючевыхРеквизитов,
			ДанныеЗаявкиКлиента,
			ТоварыЗаказКлиента,
			ТаблицаЗависимыхДокументов, 
			АктуализацияОбеспечения);
	КонецЦикла;
	
	Если АктуализацияОбеспечения Тогда
		ОбработатьЗаказыКлиентовПослеАктуализацииОбеспечения(ТаблицаЗависимыхДокументов, ДанныеЗаявкиКлиента);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьОбновитьЗаказКлиента(СтрокаКлючевыхРеквизитов, 
										ОтборКлючевыхРеквизитов, 
										ДанныеЗаявкиКлиента, 
										ТоварыЗаказКлиента, 
										ТаблицаЗависимыхДокументов,
										АктуализацияОбеспечения)
	
	ДанныеЗаявкиКлиента.Вставить("ВидНоменклатуры", СтрокаКлючевыхРеквизитов.ВидНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(ОтборКлючевыхРеквизитов, СтрокаКлючевыхРеквизитов); 
	НайденныеСтрокиЗависимыхДокументов = ТаблицаЗависимыхДокументов.НайтиСтроки(ОтборКлючевыхРеквизитов);	
	Если НайденныеСтрокиЗависимыхДокументов.Количество() = 1 Тогда
		НайденнаяСтрокаСЗависимымДокументом = НайденныеСтрокиЗависимыхДокументов[0];
		
		// В случае актуализация обеспечения флаг ТребуетсяЗапись сбрасывали.
		НайденнаяСтрокаСЗависимымДокументом.ТребуетсяЗапись = Истина;
		НайденнаяСтрокаСЗависимымДокументом.СостояниеПометкиУдаления = Ложь;
		ДокументОбъект = НайденнаяСтрокаСЗависимымДокументом.ЗависимыйДокумент.ПолучитьОбъект();
		ДокументСсылка = НайденнаяСтрокаСЗависимымДокументом.ЗависимыйДокумент;	
	ИначеЕсли ЗначениеЗаполнено(ДанныеЗаявкиКлиента.ОбособленныйЗаказКлиента) Тогда
		// Это актуализация обеспечения по обособленному заказу клиента.
		// Новый заказ в этом случае не создаем.
		Возврат;
	Иначе
		НайденнаяСтрокаСЗависимымДокументом = ТаблицаЗависимыхДокументов.Добавить();
		НайденнаяСтрокаСЗависимымДокументом.ТребуетсяЗапись = Истина;
		НайденнаяСтрокаСЗависимымДокументом.ПометкаУдаления = Ложь;
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		
		УстановитьСсылкуНовогоПоГУИДЗаказаСПортала(ДокументОбъект, ДанныеЗаявкиКлиента.ГУИДЗаказаСПортала);
		НайденнаяСтрокаСЗависимымДокументом.ЗависимыйДокумент = ДокументОбъект.ПолучитьСсылкуНового(); 
	КонецЕсли;
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Очистить();
	
	НайденныеСтрокиТовары = ТоварыЗаказКлиента.НайтиСтроки(ОтборКлючевыхРеквизитов);
	
	Если АктуализацияОбеспечения Тогда

		// Это актуализация обеспечения в заказе клиента перед передачей на сборку 
		// или по кнопке из формы списка заказов.
		Если ДокументОбъект.ЭтоНовый() Тогда	
			// При актуализации обеспечения создан новый заказ клиента.
			// Такая ситуация возможна, например, если необеспеченный заказ при загрузке из SAP
			// был создан на приоритетный склад (Винлаб Крекшино), а при актуализации обеспечения
			// нашелся доступный остаток на неприоритетном складе (Основной склад Крекшино). 
			// Соответственно будет создан новый заказ на Основной склад Крекшино. 
			ЗаполнитьШапкуЗаказаКлиента(ДокументОбъект, ДанныеЗаявкиКлиента, СтрокаКлючевыхРеквизитов.Склад);	
		КонецЕсли;	

		Если Не ДокументОбъект.ЭтоНовый()
			И Не ДокументОбъект.Проведен Тогда
			// Если при создании заказов по заявке нашли какой-то старый, помеченный на удаление, 
			// или непроведенный заказ, то очистим его ТЧ полностью.
			ДокументОбъект.Товары.Очистить();
		КонецЕсли;
		
		УдалитьСтрокиКОбеспечениюИзЗаказаКлиента(
				ДокументОбъект, 
				ДанныеЗаявкиКлиента,
				СтрокаКлючевыхРеквизитов.Склад);
		
	Иначе
		
		// Это формирование заказов клиента по заявке.
		ДокументОбъект.Товары.Очистить();	
		ЗаполнитьШапкуЗаказаКлиента(ДокументОбъект, ДанныеЗаявкиКлиента, СтрокаКлючевыхРеквизитов.Склад);	
		ДокументОбъект.МаксимальныйКодСтроки = 0;	
		
	КонецЕсли;	
	
	ЗаполнитьТЧТоварыЗаказаКлиента(ДокументОбъект, НайденныеСтрокиТовары, ДанныеЗаявкиКлиента);
	Если АктуализацияОбеспечения Тогда
		СтруктураДействий = СтруктураДействийДляОбработкиСтрокТоваровЗаказаКлиента(ДокументОбъект);
		// В алгоритме свертывания ТЧ Товары добавляем количество, поэтому
		// из структуры действий удалим пересчет количества и добавим пересчет количества упаковок. 
		СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		
		бг_ЗаказыКлиентов.СвернутьТЧТоварыЗаказаКлиента(
			ДокументОбъект,
			СтруктураДействий);	
	КонецЕсли;	
	ДозаполнитьЗаказКлиентаПередЗаписью(
		ДокументОбъект, 
		АктуализацияОбеспечения,
		ДанныеЗаявкиКлиента.ДоставкаСледующийДень);
	
	НайденнаяСтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = ДокументОбъект;
	НайденнаяСтрокаСЗависимымДокументом.ПолученДокументОбъект = Истина;

КонецПроцедуры	

// Устанавливает новому заказу клиента ссылку по ГУИД заказа, переданному с портала.
// Для B2B и PortalDistr.
//
Процедура УстановитьСсылкуНовогоПоГУИДЗаказаСПортала(ДокументОбъект, ГУИДЗаказаСПортала)
	
	Если ЗначениеЗаполнено(ГУИДЗаказаСПортала) Тогда
		
		Попытка
			КлючУникальности = Новый УникальныйИдентификатор(ГУИДЗаказаСПортала);
		Исключение
			КлючУникальности = Новый УникальныйИдентификатор();
		КонецПопытки;
		
		ДокументСсылка = Документы.ЗаказКлиента.ПолучитьСсылку(КлючУникальности);
		
		Если ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
			// По этому ГУИД уже создан заказ клиента. Теоретически такое возможно,
			// если по заявке созданы два заказа. В этом случае для нового объекта создадим
			// новую уникальную ссылку.
			ДокументСсылка = Документы.ЗаказКлиента.ПолучитьСсылку();
		КонецЕсли;
		
	Иначе
		
		ДокументСсылка = Документы.ЗаказКлиента.ПолучитьСсылку();
		
	КонецЕсли;  
	
	ДокументОбъект.УстановитьСсылкуНового(ДокументСсылка);
	
КонецПроцедуры

// В строках с незаполненными ценами заполняет цены по той же номенклатуре, если номенклатура
// есть в других строках, и в них указана цена. Для того, чтобы заказе, и далее в реализации,
// исключить ситуацию, когда по одной номенклатуре будут строки с разными ценами.
// Используется для консолидированных заказов, в случае если в КЗ добавляли товары по данным резервов
// предзаказов, тогда нет цены из заявки клиента.
//
Процедура ЗаполнитьЦеныПоИмеющейсяНоменклатуре(ТоварыЗаказКлиента)
	
	Для каждого СтрокаТоварыЗаказКлиента Из ТоварыЗаказКлиента Цикл
		// Сначала ищем цену по точному соответствию номенклатуры.
		Если ЗначениеЗаполнено(СтрокаТоварыЗаказКлиента.Номенклатура)
			И (СтрокаТоварыЗаказКлиента.ЦенаСНДС = 0 Или СтрокаТоварыЗаказКлиента.ЦенаБезНДС = 0) Тогда
			ОтборНоменклатура = Новый Структура("Номенклатура", СтрокаТоварыЗаказКлиента.Номенклатура);
			НайденныеСтрокиТоварыТоварыЗаказКлиента = ТоварыЗаказКлиента.НайтиСтроки(ОтборНоменклатура);
			ЗаполнитьЦеныПоИмеющейсяНоменклатуреВСтроке(
					СтрокаТоварыЗаказКлиента, 
					НайденныеСтрокиТоварыТоварыЗаказКлиента);
		КонецЕсли;
		
		// Затем, если не нашли, ищем по номенклатуре в рамках СКЮ МТ.
		Если ЗначениеЗаполнено(СтрокаТоварыЗаказКлиента.СКЮ_МТ)
			И (СтрокаТоварыЗаказКлиента.ЦенаСНДС = 0 Или СтрокаТоварыЗаказКлиента.ЦенаБезНДС = 0) Тогда
			ОтборСКЮ_МТ = Новый Структура("СКЮ_МТ", СтрокаТоварыЗаказКлиента.СКЮ_МТ);
			НайденныеСтрокиТоварыТоварыЗаказКлиента = ТоварыЗаказКлиента.НайтиСтроки(ОтборСКЮ_МТ);
			ЗаполнитьЦеныПоИмеющейсяНоменклатуреВСтроке(
					СтрокаТоварыЗаказКлиента,
					НайденныеСтрокиТоварыТоварыЗаказКлиента);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры	

Процедура ЗаполнитьЦеныПоИмеющейсяНоменклатуреВСтроке(СтрокаТоварыЗаказКлиента, НайденныеСтрокиТоварыТоварыЗаказКлиента)
	
	Для каждого НайденнаяСтрокаТоварыЗаказКлиента Из НайденныеСтрокиТоварыТоварыЗаказКлиента Цикл
		Если СтрокаТоварыЗаказКлиента.ЦенаСНДС = 0
			И НайденнаяСтрокаТоварыЗаказКлиента.ЦенаСНДС > 0 Тогда
		    СтрокаТоварыЗаказКлиента.ЦенаСНДС = НайденнаяСтрокаТоварыЗаказКлиента.ЦенаСНДС;
		КонецЕсли;
		Если СтрокаТоварыЗаказКлиента.ЦенаБезНДС = 0
			И НайденнаяСтрокаТоварыЗаказКлиента.ЦенаБезНДС > 0 Тогда
		    СтрокаТоварыЗаказКлиента.ЦенаБезНДС = НайденнаяСтрокаТоварыЗаказКлиента.ЦенаБезНДС;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры	

// Удаляет при необходимости из заказа клиента старые строки "К обеспечению", которые будут заменены
// на строки с актуализированным обеспечением.
//
Процедура УдалитьСтрокиКОбеспечениюИзЗаказаКлиента(ДокументОбъект, 
															ДанныеЗаявкиКлиента,
															Склад)

	// При актуализации обеспечения в таблице ТоварыЗаказКлиента учитывались только те строки, в которых 
	// в исходном заказе клиента был указан вариант обеспечения "К обеспечению".
	// Поэтому ТЧ документа не будем очищать полностью, 
	// а удалим только строки с вариантом обеспечения "К обеспечению".
	// Затем вместо этих удаленных строк добавим актуализированные строки из ТоварыЗаказКлиента.
	МаксимальныйИндекс = ДокументОбъект.Товары.Количество() - 1;
	МаксимальныйКодСтроки = 0; 
	Для ОбратныйИндекс = 0 По МаксимальныйИндекс Цикл
		СтрокаТЧ = ДокументОбъект.Товары[МаксимальныйИндекс - ОбратныйИндекс];
		Если СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению
			И Не СтрокаТЧ.Отменено Тогда
			ДокументОбъект.Товары.Удалить(СтрокаТЧ);	
		Иначе
			МаксимальныйКодСтроки = Макс(МаксимальныйКодСтроки, СтрокаТЧ.КодСтроки);
		КонецЕсли;
	КонецЦикла;
	ДокументОбъект.МаксимальныйКодСтроки = МаксимальныйКодСтроки; 
	
КонецПроцедуры	

Процедура ЗаполнитьШапкуЗаказаКлиента(ДокументОбъект, ДанныеЗаявкиКлиента, Склад)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		ДокументОбъект.Автор = Пользователи.АвторизованныйПользователь();
		ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	КонецЕсли;
	
	ДокументОбъект.бг_ИсточникЗаказа = ДанныеЗаявкиКлиента.ИсточникЗаказа;
	ДокументОбъект.Дата = ДанныеЗаявкиКлиента.Дата;
	ДокументОбъект.Партнер = ДанныеЗаявкиКлиента.Партнер;
	ДокументОбъект.Контрагент = ДанныеЗаявкиКлиента.Контрагент;
	ДокументОбъект.Организация = ДанныеЗаявкиКлиента.Организация;
	ДокументОбъект.бг_ЗаявкаКлиента = ДанныеЗаявкиКлиента.Ссылка;
	ДокументОбъект.Склад = Склад;
	ДокументОбъект.ЦенаВключаетНДС = Истина; 
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ДокументОбъект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументОбъект.Организация);
	Если ДанныеЗаявкиКлиента.Исходный Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	Иначе
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
	КонецЕсли;
	
	ДокументОбъект.ДатаСогласования = ДанныеЗаявкиКлиента.Дата;
	ДокументОбъект.Согласован = Истина;

	ДокументОбъект.Комментарий = 
	НСтр("ru = '#Сформирован автоматически по Заявке клиента#';
			 |en = '#Generated automatically by Client Request#'",
	КодОсновногоЯзыка);
		
	бг_ЗаказыКлиентов.ЗаполнитьСоглашениеДоговорУсловияПродаж(ДокументОбъект, ДанныеЗаявкиКлиента, Истина);
	
	НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(ДокументОбъект.НаправлениеДеятельности, ДокументОбъект.Соглашение, ДокументОбъект.Договор);
	
	Если ДанныеЗаявкиКлиента.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
		Или ДанныеЗаявкиКлиента.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		ДокументОбъект.ЦенаВключаетНДС 		= Истина;
		ДокументОбъект.Комментарий			= ДокументОбъект.Комментарий + Символы.ПС + ДанныеЗаявкиКлиента.Комментарий;
		ДокументОбъект.бг_ГУИДЗаказаСПортала= ДанныеЗаявкиКлиента.ГУИДЗаказаСПортала;
	КонецЕсли;
	
	ЗаполнитьГрузополучателяПунктНазначенияИЛицензию(ДокументОбъект, ДанныеЗаявкиКлиента);
	
	ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ДокументОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ДокументОбъект.НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация = ДокументОбъект.Организация;
	СтруктураПараметров.БанковскийСчет = ДокументОбъект.БанковскийСчет;
	ДокументОбъект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	ДокументОбъект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(
		ДокументОбъект.Контрагент, , 
		ДокументОбъект.БанковскийСчетКонтрагента);
		
	ДокументОбъект.МаксимальныйКодСтроки = 0;			
		
	ДокументОбъект.НомерПоДаннымКлиента = ДанныеЗаявкиКлиента. НомерПоДаннымКлиента;
	ДокументОбъект.ДатаПоДаннымКлиента = ДанныеЗаявкиКлиента.ДатаПоДаннымКлиента;

	ДокументОбъект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетов(
										Истина,
										,
										ДокументОбъект.Соглашение,
										ДокументОбъект.Договор);	
	
	Если ДокументОбъект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		ДокументОбъект.ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ДокументОбъект);
	Иначе
		ДокументОбъект.ИдентификаторПлатежа = Неопределено;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") Тогда
		ДокументОбъект.СкидкиРассчитаны = Истина;
	КонецЕсли;

	ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ДокументОбъект, Ложь);
	ДокументОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ДокументОбъект.Менеджер, ДокументОбъект.Подразделение);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ДокументОбъект);
	
КонецПроцедуры

Функция КаналПродажЗаявкиКлиента(ДанныеЗаявкиКлиента)
	
	КаналПродаж = Неопределено;
	
	ИсточникЗаказа = ДанныеЗаявкиКлиента.ИсточникЗаказа;
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		ПунктНазначения = бг_ИнтеграцияB2B.ПунктНазначенияПоКодуTTSY(ДанныеЗаявкиКлиента.КодТТSY);
		Если ЗначениеЗаполнено(ПунктНазначения) Тогда
			КаналПродаж = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктНазначения, "КаналПродаж");
		КонецЕсли;
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		КаналПродаж = бг_КонстантыПовтИсп.ЗначениеКонстанты("КаналПродажВГО"); 
	Иначе
		КаналПродаж = бг_КонстантыПовтИсп.ЗначениеКонстанты("КаналПродажСобственнаяРозница"); 
	КонецЕсли;	
	
	Возврат КаналПродаж; 
	
КонецФункции	

Функция ДатаОтгрузкиЗаявкиКлиента(ДанныеЗаявкиКлиента)
	
	ДатаОтгрузки = '00010101';
	
	ИсточникЗаказа = ДанныеЗаявкиКлиента.ИсточникЗаказа;
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
		ДатаОтгрузки = ДанныеЗаявкиКлиента.ДатаДоставки;
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		ДатаОтгрузки = ДанныеЗаявкиКлиента.ДатаОтгрузки;
	Иначе
		Если ДанныеЗаявкиКлиента.Товары.Количество() > 0 Тогда
			ДатаОтгрузки = ДанныеЗаявкиКлиента.Товары[0].ДатаОтгрузки;	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ДатаОтгрузки; 
	
КонецФункции	

Процедура ЗаполнитьГрузополучателяПунктНазначенияИЛицензию(ДокументОбъект, ДанныеЗаявкиКлиента)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	Если ДанныеЗаявкиКлиента.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
		Или ДанныеЗаявкиКлиента.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		ДокументОбъект.бг_ПунктНазначения 	= бг_ИнтеграцияB2B.ПунктНазначенияПоКодуTTSY(ДанныеЗаявкиКлиента.КодТТSY);
		ДокументОбъект.Грузополучатель 		= бг_ИнтеграцияB2B.ГрузополучательПоКодуTTSY(ДанныеЗаявкиКлиента.КодТТSY);
		ДокументОбъект.бг_Лицензия 			= бг_УчетАлкоголя.ТекущаяЛицензияПунктаНазначения(
														ДокументОбъект.бг_ПунктНазначения, 
														ДанныеЗаявкиКлиента.ДатаПоДаннымКлиента);
	Иначе
		Если ДанныеЗаявкиКлиента.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP Тогда
			ДокументОбъект.Грузополучатель = бг_ИнтеграцияSAP.НайтиСоздатьГрузополучателяПоКодуSAP(
				ДанныеЗаявкиКлиента.КодГрузополучателя, 
				ДанныеЗаявкиКлиента.Контрагент, 
				ДанныеЗаявкиКлиента.НаименованиеГрузополучателя);
		Иначе
			ДокументОбъект.Грузополучатель = 
				бг_ИнтеграцияSAP.КонтрагентПоКодуSAP(ДанныеЗаявкиКлиента.КодГрузополучателя);		
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Грузополучатель) Тогда
			бг_УчетАлкоголя.ЗаполнитьПунктНазначенияИЛицензиюВДокументе(ДокументОбъект);
		КонецЕсли;		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Грузополучатель) Тогда
		ДокументОбъект.бг_ПунктНазначения = Неопределено;
		ДокументОбъект.бг_Лицензия = Неопределено;
		
		ШаблонСообщения = 
			НСтр("ru = 'Не найден пункт грузополучатель %1.';
				 |en = 'Не найден пункт грузополучатель %1.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ДанныеЗаявкиКлиента.КодГрузополучателя);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.бг_ПунктНазначения) Тогда
		ШаблонСообщения = 
			НСтр("ru = 'Не определен пункт разгрузки грузополучателя %1.';
				 |en = 'Не определен пункт разгрузки грузополучателя %1.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ДокументОбъект.Грузополучатель);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;

КонецПроцедуры	

Процедура ЗаполнитьТЧТоварыЗаказаКлиента(ДокументОбъект, НайденныеСтрокиТовары, ДанныеЗаявкиКлиента)
	
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение, "ВидЦен");
	Иначе
		ВидЦены = Неопределено;
	КонецЕсли;
	УказанВидЦены = ЗначениеЗаполнено(ВидЦены);
	СтруктураДействийЗаполнитьЦену = Новый Структура;
	СтруктураДействийЗаполнитьЦену.Вставить(
		"ЗаполнитьЦенуПродажи", 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(ДокументОбъект));
	МассивОшибок = Новый Массив; 
	
	СтруктураДействий = СтруктураДействийДляОбработкиСтрокТоваровЗаказаКлиента(ДокументОбъект);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ИсточникЗаказа = ДанныеЗаявкиКлиента.ИсточникЗаказа;
	
	Для каждого СтрокаТовары Из НайденныеСтрокиТовары Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		Если ДокументОбъект.ЦенаВключаетНДС Тогда
			НоваяСтрока.Цена = СтрокаТовары.ЦенаСНДС;
		Иначе
			НоваяСтрока.Цена = СтрокаТовары.ЦенаБезНДС;
		КонецЕсли;
		
		// Для консолидированных заказов, в случае если в КЗ добавляли товары по данным резервов предзаказов,
		// может не быть цены в заявке клиента. Поставим цену по прайсу.
		Если НоваяСтрока.Цена = 0 
			И ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED 
			И УказанВидЦены Тогда
			ЗаполнитьЦенуВСтрокеТЧТоварыЗаказаКлиента(
				ДокументОбъект,
				НоваяСтрока,
				ВидЦены,
				СтруктураДействийЗаполнитьЦену,
				КэшированныеЗначения,
				МассивОшибок);
		КонецЕсли;
		
		// Для заказов B2B пересчитаем цены по виду цен.
		Если УказанВидЦены
			И (ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B
				Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr) Тогда
			ЗаполнитьЦенуВСтрокеТЧТоварыЗаказаКлиента(
				ДокументОбъект,
				НоваяСтрока,
				ВидЦены,
				СтруктураДействийЗаполнитьЦену,
				КэшированныеЗначения,
				МассивОшибок);
		КонецЕсли;
		
		НоваяСтрока.КодСтроки = 0;
		НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
		
		// Заполнение цен, ставок НДС, пересчет количества единиц и сумм в ТЧ Товары. 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				НоваяСтрока,
				СтруктураДействий, 
				КэшированныеЗначения);
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстСообщения = Символы.ПС + СтрСоединить(МассивОшибок, Символы.ПС);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуВСтрокеТЧТоварыЗаказаКлиента(ДокументОбъект, 
													СтрокаТЧ,
													ВидЦены,
													СтруктураДействий,
													КэшированныеЗначения,
													МассивОшибок)
	
	СтрокаТЧ.ВидЦены = ВидЦены;
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
			СтрокаТЧ, 
			СтруктураДействий, 
			КэшированныеЗначения);
	
	Если СтрокаТЧ.Цена = 0 Тогда
		
		НомерСтроки = ДокументОбъект.Товары.Индекс(СтрокаТЧ) + 1;
		ШаблонСообщения = 
			НСтр("ru = 'Стр. %1, для товара ""%2"" не задана цена ""%3"" на дату %4.';
				 |en = 'Стр. %1, для товара ""%2"" не задана цена ""%3"" на дату %4.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			НомерСтроки,
			СтрокаТЧ.Номенклатура,
			ВидЦены,
			Формат(ДокументОбъект.Дата, "ДФ=dd.MM.yyyy"));
		
		МассивОшибок.Добавить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДозаполнитьЗаказКлиентаПередЗаписью(ДокументОбъект, АктуализацияОбеспечения, ДоставкаСледующийДень)
	
	УстановитьКодыСтрокБюджетаВЗаказеКлиента(ДокументОбъект);
	бг_ЗаказыКлиентов.УстановитьФлагНеОтгружатьЧастямиИДатуОтгрузкиВЗаказе(ДокументОбъект);
	РассчитатьДатуОтгрузкиПоПараметрамЛогистики(ДокументОбъект, АктуализацияОбеспечения, ДоставкаСледующийДень);
	
	Если ДокументОбъект.ЭтоНовый() Тогда
		// Новый номер устанавливаем после заполнения шапки, чтобы сработали механизмы префиксации.
		ДокументОбъект.УстановитьНовыйНомер();	
	КонецЕсли;
	
	ИсточникЗаказа = ДокументОбъект.бг_ИсточникЗаказа; 
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
		СкидкиНаценкиСервер.Рассчитать(ДокументОбъект, СтруктураПараметры);
		ДокументОбъект.СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект,
		Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ДокументОбъект, "Товары");
	ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументОбъект);

КонецПроцедуры

// Сдвигает дату отгрузки на срок доставки между пунктами погрузки и назначения,
// и еще на один день назад для ночных пунктов назначения.
//
Процедура РассчитатьДатуОтгрузкиПоПараметрамЛогистики(ДокументОбъект, АктуализацияОбеспечения, ДоставкаСледующийДень)
	
	ИсточникЗаказа = ДокументОбъект.бг_ИсточникЗаказа;
	Если ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		И ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		// Дату отгрузки корректируем только для сети Винлаб.  
		Возврат;
	КонецЕсли;
	
	Если АктуализацияОбеспечения
		И Не ДокументОбъект.ЭтоНовый() Тогда
		// При актуализации обеспечения у существующих заказов не меняем дату отгрузки,
		// так как ее могли перенести.
		Возврат;
	КонецЕсли;
	
	НачалоОкнаДоставки = '00010101';
	ПунктНазначения = ДокументОбъект.бг_ПунктНазначения;
	Если ЗначениеЗаполнено(ПунктНазначения) Тогда
		НачалоОкнаДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктНазначения, "ВремяРаботыС");
	КонецЕсли;
	
	СрокДоставки = бг_ТранспортнаяЛогистика.СрокДоставкиДоПунктаНазначения(
			ДокументОбъект.Склад, ПунктНазначения);
	
	ДесятьЧасовВечера = '00010101220000';
	Если Не ДоставкаСледующийДень
		И НачалоОкнаДоставки >= ДесятьЧасовВечера Тогда
		// Это ночная доставка, машина должна выехать заранее, то есть предыдущего числа.
		СрокДоставки = СрокДоставки + 1;
	КонецЕсли;
	
	СекундВСутках = 86400;
	СдвигДатыОтгрузки = СрокДоставки * СекундВСутках;
	Если СдвигДатыОтгрузки > 0 Тогда
		ДокументОбъект.ДатаОтгрузки = ДокументОбъект.ДатаОтгрузки - СдвигДатыОтгрузки;
		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
			СтрокаТЧ.ДатаОтгрузки = СтрокаТЧ.ДатаОтгрузки - СдвигДатыОтгрузки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКодыСтрокБюджетаВЗаказеКлиента(ДокументОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("битЗаявкаКлиента", ДокументОбъект.бг_ЗаявкаКлиента);
	Запрос.УстановитьПараметр("КодыПозицийЗаказа", ДокументОбъект.Товары.ВыгрузитьКолонку("бг_КодСтрокиЗаявки"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	битЗаявкаКлиентаТовары.КодСтрокиБюджета КАК КодСтрокиБюджета
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК битЗаявкаКлиентаТовары
	|ГДЕ
	|	битЗаявкаКлиентаТовары.Ссылка = &битЗаявкаКлиента
	|	И битЗаявкаКлиентаТовары.КодСтрокиБюджета <> """"
	|	И битЗаявкаКлиентаТовары.КодПозицииЗаказа В(&КодыПозицийЗаказа)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДокументОбъект.бг_КодыСтрокБюджета = "";
	Иначе
		КодыСтрокБюджета = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("КодСтрокиБюджета");
		ДокументОбъект.бг_КодыСтрокБюджета = СтрСоединить(КодыСтрокБюджета, ";");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЗаказыКлиентовПослеАктуализацииОбеспечения(ТаблицаЗависимыхДокументов, ДанныеЗаявкиКлиента)

	Для каждого СтрокаСЗависимымДокументом Из ТаблицаЗависимыхДокументов Цикл
		
		Если СтрокаСЗависимымДокументом.ТребуетсяЗапись
			Или Не СтрокаСЗависимымДокументом.Проведен Тогда
			// Этот заказ уже обработан, или был и останется непроведенным.
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаСЗависимымДокументом.ЗависимыйДокумент.ПолучитьОбъект();
		КоличествоСтрокТоваровДоПодготовки = ДокументОбъект.Товары.Количество(); 
		
		УдалитьСтрокиКОбеспечениюИзЗаказаКлиента(
				ДокументОбъект, 
				ДанныеЗаявкиКлиента,
				ДокументОбъект.Склад);
				
		КоличествоСтрокТоваровПослеПодготовки = ДокументОбъект.Товары.Количество();		
		Если КоличествоСтрокТоваровДоПодготовки <> КоличествоСтрокТоваровПослеПодготовки Тогда
			СтрокаСЗависимымДокументом.ТребуетсяЗапись = Истина; 
			Если КоличествоСтрокТоваровПослеПодготовки > 0 Тогда	
				СтрокаСЗависимымДокументом.СостояниеПометкиУдаления = Ложь;
			Иначе
				// Возможна ситуация, когда из заказа удалили все строки.
				// Например, при создании заказов все товары были поставлены к обемпечению 
				// с приоритетного склада (Винлаб Крекшино), а при актуализации обеспечения оказалось, 
				// что все товары есть на  на неприоритетном складе (Основной склад Крекшино).
				// Соответственно будет создан новый заказ на Основной склад Крекшино,
				// а в заказе со склада (Винлаб Крекшино) товаров не останется.
				// В этом случае укажем, что заказ надо пометить на удаление.
				СтрокаСЗависимымДокументом.СостояниеПометкиУдаления = Истина;
			КонецЕсли;	
			СтрокаСЗависимымДокументом.ЗависимыйДокументОбъект = ДокументОбъект;
			СтрокаСЗависимымДокументом.ПолученДокументОбъект = Истина;
		КонецЕсли;		
			
	КонецЦикла;

КонецПроцедуры

// Возвращает реквизиты заявки клиента, необходимые для формирования заказов клиента, по ссылке на заявку.
//
Функция РеквизитыЗаявкиКлиентаДляФормированияЗаказовПоСсылке(ЗаявкаСсылка, 
															РеквизитыИсточникаСтрока,
															АктуализацияОбеспечения, 
															ЗаказКлиента)
	
	РеквизитыИсточника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаСсылка, РеквизитыИсточникаСтрока);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументИсточник", ЗаявкаСсылка);
	Запрос.УстановитьПараметр("ИсточникЗаказа", РеквизитыИсточника.ИсточникЗаказа);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Если АктуализацияОбеспечения Тогда
		
		// Если это актуализация обеспечения, то оставим з таблицы товаров, только те товары, 
		// которые требуется обеспечить в сформированных заказах клиентов. 
		// Таким образом будем обеспечивать только ранее необеспеченные позиции.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЗаказыКлиентаПоЗаявке
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.бг_ЗаявкаКлиента = &ДокументИсточник
		|	И &УсловиеЗаказКлиента
		|	И ЗаказКлиента.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.бг_КодСтрокиЗаявки КАК КодПозицииЗаказа,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ НеОбеспеченныеПозиции
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗаказыКлиентаПоЗаявке КАК ЗаказыКлиентаПоЗаявке
		|		ПО ТаблицаТовары.Ссылка = ЗаказыКлиентаПоЗаявке.Ссылка
		|ГДЕ
		|	НЕ ТаблицаТовары.Отменено
		|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.бг_КодСтрокиЗаявки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	битЗаявкаКлиентаТовары.НомерСтроки КАК НомерСтроки,
		|	битЗаявкаКлиентаТовары.КодПозицииЗаказа КАК КодПозицииЗаказа,
		|	битЗаявкаКлиентаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
		|	битЗаявкаКлиентаТовары.Номенклатура КАК Номенклатура,
		|	битЗаявкаКлиентаТовары.ШтрихКодНоменклатуры КАК ШтрихКодНоменклатуры,
		|	битЗаявкаКлиентаТовары.КодНоменклатурыSAP КАК КодНоменклатурыSAP,
		|	ВЫБОР
		|		КОГДА &ИсточникЗаказа В (ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B), 
		|					ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr))
		|			ТОГДА битЗаявкаКлиентаТовары.КодSKUMT
		|		КОГДА &ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент)
		|			ТОГДА битЗаявкаКлиентаТовары.КодНСИ
		|		ИНАЧЕ битЗаявкаКлиентаТовары.КодНоменклатурыSAP
		|	КОНЕЦ КАК КодДляПоискаНоменклатуры,
		|	битЗаявкаКлиентаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	битЗаявкаКлиентаТовары.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
		|	ЕСТЬNULL(НеОбеспеченныеПозиции.Количество, 0) КАК Количество,
		|	битЗаявкаКлиентаТовары.Цена КАК Цена,
		|	битЗаявкаКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
		|	битЗаявкаКлиентаТовары.КодСтавкиНДС КАК КодСтавкиНДС,
		|	битЗаявкаКлиентаТовары.ЦенаНДС КАК ЦенаНДС,
		|	битЗаявкаКлиентаТовары.Сумма КАК Сумма,
		|	битЗаявкаКлиентаТовары.СуммаНДС КАК СуммаНДС,
		|	битЗаявкаКлиентаТовары.ТорговаяТочка КАК ТорговаяТочка,
		|	битЗаявкаКлиентаТовары.КодТорговойТочки КАК КодТорговойТочки,
		|	битЗаявкаКлиентаТовары.СкладОтгрузки КАК СкладОтгрузки,
		|	битЗаявкаКлиентаТовары.алкЛицензияКонтрагента КАК алкЛицензияКонтрагента,
		|	битЗаявкаКлиентаТовары.МаркерДействия КАК МаркерДействия,
		|	битЗаявкаКлиентаТовары.НомерПредзаказаКлиента КАК НомерПредзаказаКлиента,
		|	битЗаявкаКлиентаТовары.КодПозицииПредзаказаКлиента КАК КодПозицииПредзаказаКлиента,
		|	битЗаявкаКлиентаТовары.ИдентификаторSKUMT КАК ИдентификаторSKUMT,
		|	битЗаявкаКлиентаТовары.КодСтрокиБюджета КАК КодСтрокиБюджета,
		|	битЗаявкаКлиентаТовары.КодSKUMT КАК КодSKUMT,
		|	битЗаявкаКлиентаТовары.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	битЗаявкаКлиентаТовары.КодНСИ КАК КодНСИ
		|ИЗ
		|	Документ.битЗаявкаКлиента.Товары КАК битЗаявкаКлиентаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ НеОбеспеченныеПозиции КАК НеОбеспеченныеПозиции
		|		ПО битЗаявкаКлиентаТовары.КодПозицииЗаказа = НеОбеспеченныеПозиции.КодПозицииЗаказа
		|ГДЕ
		|	битЗаявкаКлиентаТовары.Ссылка = &ДокументИсточник
		|	И ЕСТЬNULL(НеОбеспеченныеПозиции.Количество, 0) > 0";
	
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
			ТекстУсловияЗаказКлиента = "ЗаказКлиента.Ссылка = &ЗаказКлиента";
		Иначе
			ТекстУсловияЗаказКлиента = "ИСТИНА";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗаказКлиента", ТекстУсловияЗаказКлиента);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	битЗаявкаКлиентаТовары.НомерСтроки КАК НомерСтроки,
		|	битЗаявкаКлиентаТовары.КодПозицииЗаказа КАК КодПозицииЗаказа,
		|	битЗаявкаКлиентаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
		|	битЗаявкаКлиентаТовары.Номенклатура КАК Номенклатура,
		|	битЗаявкаКлиентаТовары.ШтрихКодНоменклатуры КАК ШтрихКодНоменклатуры,
		|	битЗаявкаКлиентаТовары.КодНоменклатурыSAP КАК КодНоменклатурыSAP,
		|	ВЫБОР
		|		КОГДА &ИсточникЗаказа В (ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B), 
		|					ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr))
		|			ТОГДА битЗаявкаКлиентаТовары.КодSKUMT
		|		КОГДА &ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент)
		|			ТОГДА битЗаявкаКлиентаТовары.КодНСИ
		|		ИНАЧЕ битЗаявкаКлиентаТовары.КодНоменклатурыSAP
		|	КОНЕЦ КАК КодДляПоискаНоменклатуры,
		|	битЗаявкаКлиентаТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	битЗаявкаКлиентаТовары.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
		|	битЗаявкаКлиентаТовары.Количество КАК Количество,
		|	битЗаявкаКлиентаТовары.Цена КАК Цена,
		|	битЗаявкаКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
		|	битЗаявкаКлиентаТовары.КодСтавкиНДС КАК КодСтавкиНДС,
		|	битЗаявкаКлиентаТовары.ЦенаНДС КАК ЦенаНДС,
		|	битЗаявкаКлиентаТовары.Сумма КАК Сумма,
		|	битЗаявкаКлиентаТовары.СуммаНДС КАК СуммаНДС,
		|	битЗаявкаКлиентаТовары.ТорговаяТочка КАК ТорговаяТочка,
		|	битЗаявкаКлиентаТовары.КодТорговойТочки КАК КодТорговойТочки,
		|	битЗаявкаКлиентаТовары.СкладОтгрузки КАК СкладОтгрузки,
		|	битЗаявкаКлиентаТовары.алкЛицензияКонтрагента КАК алкЛицензияКонтрагента,
		|	битЗаявкаКлиентаТовары.МаркерДействия КАК МаркерДействия,
		|	битЗаявкаКлиентаТовары.НомерПредзаказаКлиента КАК НомерПредзаказаКлиента,
		|	битЗаявкаКлиентаТовары.КодПозицииПредзаказаКлиента КАК КодПозицииПредзаказаКлиента,
		|	битЗаявкаКлиентаТовары.ИдентификаторSKUMT КАК ИдентификаторSKUMT,
		|	битЗаявкаКлиентаТовары.КодСтрокиБюджета КАК КодСтрокиБюджета,
		|	битЗаявкаКлиентаТовары.КодSKUMT КАК КодSKUMT,
		|	битЗаявкаКлиентаТовары.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	битЗаявкаКлиентаТовары.КодНСИ КАК КодНСИ
		|ИЗ
		|	Документ.битЗаявкаКлиента.Товары КАК битЗаявкаКлиентаТовары
		|ГДЕ
		|	битЗаявкаКлиентаТовары.Ссылка = &ДокументИсточник";
		
	КонецЕсли;
	
	РеквизитыИсточника.Вставить("Товары", Запрос.Выполнить().Выгрузить());
		
    Возврат РеквизитыИсточника;
	
КонецФункции

// Возвращает таблицу заказов клиента, сформированных по заявке клиента.
//
Функция ТаблицаЗаказовПоЗаявкеКлиента(ЗаявкаСсылка, ОбособленныйЗаказКлиента = Неопределено)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументИсточник", ЗаявкаСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК ЗаказКлиента,
	|	МАКСИМУМ(ТаблицаТовары.Номенклатура.ВидНоменклатуры) КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВидНоменклатурыЗаказовКлиента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка.бг_ЗаявкаКлиента = &ДокументИсточник
	|	И &УсловиеТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК ЗависимыйДокумент,
	|	ТаблицаДокументов.Склад КАК Склад,
	|	ЕСТЬNULL(ВидНоменклатурыЗаказовКлиента.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
	|	ТаблицаДокументов.Статус КАК Статус,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ЗаказКлиента КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВидНоменклатурыЗаказовКлиента КАК ВидНоменклатурыЗаказовКлиента
	|		ПО ТаблицаДокументов.Ссылка = ВидНоменклатурыЗаказовКлиента.ЗаказКлиента
	|ГДЕ
	|	ТаблицаДокументов.бг_ЗаявкаКлиента = &ДокументИсточник
	|	И &УсловиеЗависимыйДокумент";
	
	Если ЗначениеЗаполнено(ОбособленныйЗаказКлиента) Тогда
		ТекстУсловиеТаблицаТовары = "ТаблицаТовары.Ссылка = &ОбособленныйЗаказКлиента";
		ТекстУсловиеЗависимыйДокумент = "ТаблицаДокументов.Ссылка = &ОбособленныйЗаказКлиента";
		Запрос.УстановитьПараметр("ОбособленныйЗаказКлиента", ОбособленныйЗаказКлиента);
	Иначе
		ТекстУсловиеТаблицаТовары = "ИСТИНА";
		ТекстУсловиеЗависимыйДокумент = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТаблицаТовары", ТекстУсловиеТаблицаТовары);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЗависимыйДокумент", ТекстУсловиеЗависимыйДокумент);
	
	ТаблицаЗависимыхДокументов = Запрос.Выполнить().Выгрузить();	

	ТаблицаЗависимыхДокументов.Колонки.Добавить("СостояниеПометкиУдаления", Новый ОписаниеТипов("Булево"));
	ТаблицаЗависимыхДокументов.ЗаполнитьЗначения(Истина, "СостояниеПометкиУдаления");
	ТаблицаЗависимыхДокументов.Колонки.Добавить("ТребуетсяЗапись", Новый ОписаниеТипов("Булево"));
	ТаблицаЗависимыхДокументов.ЗаполнитьЗначения(Истина, "ТребуетсяЗапись");
	ТаблицаЗависимыхДокументов.Колонки.Добавить("ЗависимыйДокументОбъект", Новый ОписаниеТипов("ДокументОбъект.ЗаказКлиента"));
	
	Возврат ТаблицаЗависимыхДокументов;
	
КонецФункции	

Функция ТаблицаРезервыПредзаказовСторнированныеКонсолидированнымиЗаказами(ТаблицаЗависимыхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗависимыеДокументы", ТаблицаЗависимыхДокументов.ВыгрузитьКолонку("ЗависимыйДокумент"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеЗапасовДвижения.Склад КАК Склад,
	|	РаспределениеЗапасовДвижения.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(РаспределениеЗапасовДвижения.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РаспределениеЗапасовДвижения.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента), ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) КАК ЗаказНаОтгрузку,
	|	РаспределениеЗапасовДвижения.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РаспределениеЗапасовДвижения.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
	|	-РаспределениеЗапасовДвижения.Резервировать КАК Зарезервировано
	|ИЗ
	|	РегистрНакопления.РаспределениеЗапасовДвижения КАК РаспределениеЗапасовДвижения
	|ГДЕ
	|	РаспределениеЗапасовДвижения.Регистратор В(&ЗависимыеДокументы)
	|	И ВЫРАЗИТЬ(РаспределениеЗапасовДвижения.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS)
	|	И РаспределениеЗапасовДвижения.Резервировать <> 0";
	
	ТаблицаРезервыПредзаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезервыПредзаказов;
	
КонецФункции	

// Возвращает структуру действий для обработки добавленных при формировании заказов клиентов строк ТЧ Товары.
//
Функция СтруктураДействийДляОбработкиСтрокТоваровЗаказаКлиента(ДокументОбъект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ДокументОбъект);
	ПараметрыЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокументОбъект, Истина);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	Возврат СтруктураДействий;
	
КонецФункции	

// Возвращает ключевые реквизиты, по которым надо разделять заказы клиентов при формировании по заявке.
//
Функция КлючевыеРеквизитыЗаказаКлиента() 
	
	Возврат "Склад,ВидНоменклатуры";
	
КонецФункции	

#КонецОбласти

#Область ТаблицаРасхожденийДанныхКЗ

Процедура ЗаписатьПротоколРасхожденийДанныхКЗ(РеквизитыИсточника, ТребуютсяЗависимыеДокументы)
	
	Если РеквизитыИсточника.ИсточникЗаказа 
			= Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
			
		МенеджерРегистра = РегистрыСведений.бг_РасхожденияДанныхКонсолидированныхЗаказовSAPиHybris;
		ЗаявкаКлиента = РеквизитыИсточника.Ссылка; 
		Если ТребуютсяЗависимыеДокументы 
			И РеквизитыИсточника.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТаблицаРасхождений = ТаблицаРасхожденийДанныхКонсолидированныхЗаказов(ЗаявкаКлиента);
			Если ТаблицаРасхождений.Количество() > 0 Тогда		
				МенеджерРегистра.ДобавитьЗаявкуКлиентаВПротоколРасхожденияДанных(
						ЗаявкаКлиента, 
						ТаблицаРасхождений);
			Иначе
				МенеджерРегистра.УдалитьЗаявкуКлиентаИзПротоколаРасхожденияДанных(ЗаявкаКлиента);
			КонецЕсли;			
		Иначе	
			МенеджерРегистра.УдалитьЗаявкуКлиентаИзПротоколаРасхожденияДанных(ЗаявкаКлиента);	
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры	

// Заполняет колонки СкюМТ и ТекстПротокола в таблице расхождений данных КЗ.
//
Процедура ЗаполнитьСвязанныеКолонкиТаблицаРасхождений(ТаблицаРасхождений, ЗаявкаКлиента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодыНоменклатурыSAP = ТаблицаРасхождений.ВыгрузитьКолонку("КодНоменклатурыSAP");
	СКЮМТ = СКЮМТКодовНоменклатурыSAP(КодыНоменклатурыSAP);

    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаКлиента", ЗаявкаКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битЗаявкаКлиента.КодГрузополучателя КАК КодГрузополучателя,
	|	битЗаявкаКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	битЗаявкаКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	битЗаявкаКлиента.ДатаДоставки КАК ДатаДоставки
	|ИЗ
	|	Документ.битЗаявкаКлиента КАК битЗаявкаКлиента
	|ГДЕ
	|	битЗаявкаКлиента.Ссылка = &ЗаявкаКлиента";
	
	РеквизитыКЗ = Запрос.Выполнить().Выбрать();
	РеквизитыКЗ.Следующий();
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Для каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
		
		СтрокаРасхождений.СкюМТ = СКЮМТ.Получить(СтрокаРасхождений.КодНоменклатурыSAP);
		
		ОсталосьРаспределить = СтрокаРасхождений.КоличествоSAP - СтрокаРасхождений.КоличествоКОтгрузке;
		
		ШаблонНачалаСообщения = 
			НСтр("ru = 'Торговая точка %1 КЗ %2 от %3 код строки ""%4"". Отгрузка %5 по Предзаказу %6 поз. ""%7"". ';
			     |en = 'Торговая точка %1 КЗ %2 от %3 код строки ""%4"". Отгрузка %5 по Предзаказу %6 поз. ""%7"". '", 
			КодОсновногоЯзыка);
		
		НачалоСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                        ШаблонНачалаСообщения,
								РеквизитыКЗ.КодГрузополучателя, 
								РеквизитыКЗ.НомерПоДаннымКлиента,
								Формат(РеквизитыКЗ.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"),
								СтрокаРасхождений.КодПозицииКонсолидированногоЗаказа,
								Формат(РеквизитыКЗ.ДатаДоставки, "ДФ=dd.MM.yyyy"),
								СтрокаРасхождений.НомерПредзаказаКлиента,
								СтрокаРасхождений.КодПозицииПредзаказаКлиента);
		
		Если ОсталосьРаспределить > 0 Тогда
			// Это значит, что в консолидированного заказе из SAP товаров больше, 
			// чем зарезервировано по предзаказам из Hybris.
			// Такая ситуация возможна при нарушении согласованности данных SAP и Hybris.
			// Например, в SAP не отработали отмену интернет-закза. 
			ШаблонСообщения = 
				НСтр("ru = 'Товар ""%1"" код SAP ""%2"" не отгружен в количестве %3. Пришел в КЗ от SAP, но не был зарезервирован по предзаказу.';
					 |en = 'Товар ""%1"" код SAP ""%2"" не отгружен в количестве %3. Пришел в КЗ от SAP, но не был зарезервирован по предзаказу.'",
				КодОсновногоЯзыка);
	
			ТекстСообщения = НачалоСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения, 
								СтрокаРасхождений.СкюМТ, 
								СтрокаРасхождений.КодНоменклатурыSAP,
								ОсталосьРаспределить);
														
		Иначе	
			// Это значит, что зарезервировано по предзаказам из Hybris товаров больше, 
			// чем в консолидированного заказе из SAP. В этои случае эти товары были добавлены
			// в консолидированный заказ.	
			ШаблонСообщения = 
				НСтр("ru = 'Товар ""%1"" код SAP ""%2"" добавлен к отгрузке в количестве %3. Зарезервирован по предзаказу, но в КЗ от SAP не пришел.';
					 |en = 'Товар ""%1"" код SAP ""%2"" добавлен к отгрузке в количестве %3. Зарезервирован по предзаказу, но в КЗ от SAP не пришел.'",
				КодОсновногоЯзыка);
	
			ТекстСообщения = НачалоСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				СтрокаРасхождений.СкюМТ, 
				СтрокаРасхождений.КодНоменклатурыSAP, 
				- ОсталосьРаспределить);
		КонецЕсли;
		
		СтрокаРасхождений.ТекстПротокола = ТекстСообщения; 
	КонецЦикла;

КонецПроцедуры	

// Возвращает соответствие СКЮ МТ и кодов SAP номенклатуры. 
//
Функция СКЮМТКодовНоменклатурыSAP(КодыНоменклатурыSAP)

	УстановитьПривилегированныйРежим(Истина);

    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыНоменклатурыSAP", КодыНоменклатурыSAP);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТПартнеры
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.бг_КодSAP <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураКонтрагентов.Номенклатура.ТоварнаяКатегория.бг_СкюМТ, ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка)) КАК СКЮ_МТ,
	|	МАКСИМУМ(ВЫРАЗИТЬ(НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента КАК СТРОКА(18))) КАК КодНоменклатурыSAP
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПартнеры КАК ВТПартнеры
	|		ПО НоменклатураКонтрагентов.Владелец = ВТПартнеры.Партнер
	|ГДЕ
	|	НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|	И ВЫРАЗИТЬ(НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента КАК СТРОКА(18)) В (&КодыНоменклатурыSAP)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(НоменклатураКонтрагентов.Номенклатура.ТоварнаяКатегория.бг_СкюМТ, ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка))";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СКЮМТ = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СКЮМТ.Вставить(Выборка.КодНоменклатурыSAP, Выборка.СКЮ_МТ);	
	КонецЦикла;
	
	Возврат СКЮМТ;
	
КонецФункции	

#КонецОбласти 

#Область ОтправкаПодтвержденийКлиентамВГО

Функция ИмяВыгружаемогоФайла(Заказ)
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заказ, "Номер,Дата,Организация"); 
	
	Номер = СтрЗаменить(СтрЗаменить(СокрЛП(РеквизитыЗаказа.Номер), "/", ""), "\", "");
	ТикерОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗаказа.Организация, "бг_Тикер");
	
	ТипЗаказа = ТипЗнч(Заказ);
	
	Если ТипЗаказа = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		Префикс = "ZKPBG";
	ИначеЕсли ТипЗаказа = Тип("ДокументСсылка.битЗаявкаКлиента") Тогда
		Префикс = "PZKZBG";
	Иначе
		Префикс = "BG";
	КонецЕсли; 
	
	ЧастиИмени = Новый Массив;
	ЧастиИмени.Добавить(Префикс);
	ЧастиИмени.Добавить(СокрЛП(ТикерОрганизации));
	ЧастиИмени.Добавить(СокрЛП(Номер));
	ЧастиИмени.Добавить(Формат(РеквизитыЗаказа.Дата, "ДФ=yyyyMMdd"));
	ЧастиИмени.Добавить(Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd_HHmmss"));
	
	Возврат СтрСоединить(ЧастиИмени, "_") + ".xml";;
	
КонецФункции

Процедура ДобавитьВложениеФайлаXML(Вложения, ОбъектXDTO, Представление)
	
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, "ПакетЭОД");
	ЗаписьXML.Закрыть();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	// Удаляем временный файл.
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подтверждение количества в заявках. Отправка подтверждения'"),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	НовоеВложение = Вложения.Добавить();
	НовоеВложение.АдресВоВременномХранилище = 
		ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
	НовоеВложение.Представление = Представление;
	
КонецПроцедуры

Функция СформироватьОбъектXDTOПодтверждениеЗаявки(ЗаявкаКлиента)
	
	// Создадим модель по данным фабрики XDTO.
	ПространствоИмен = ПространствоИменОтправкиПодтверждений();
	ТипОбъектаXDTO_Document = ФабрикаXDTO.Тип(ПространствоИмен, "Document");
	ОбъектXDTO_Document = ФабрикаXDTO.Создать(ТипОбъектаXDTO_Document);	
	
	// Шапка.
	СтруктураШапки = ПолучитьСтруктуруШапкиДокументаПодтверждениеЗаявки(ЗаявкаКлиента);
	ЗаполнитьЭлементXDTOПоСтруктуре(ОбъектXDTO_Document, СтруктураШапки);
	
	Возврат ОбъектXDTO_Document;
	
КонецФункции

Функция ПолучитьСтруктуруШапкиДокументаПодтверждениеЗаявки(ДокументСсылка)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипДокумента", "10");
	Запрос.УстановитьПараметр("PackageVersion", "2");
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&PackageVersion КАК PackageVersion,
	|	ВыгружаемыйДокумент.Организация.бг_Тикер КАК SenderTiker,
	|	&ТипДокумента КАК DocumentType,
	|	ВыгружаемыйДокумент.Контрагент.бг_Тикер КАК RecipientTiker,
	|	ВыгружаемыйДокумент.Контрагент КАК Контрагент,
	|	ВыгружаемыйДокумент.Организация КАК Организация,
	|	ВыгружаемыйДокумент.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ВыгружаемыйДокумент.Ответственный.Наименование, &ПустаяСтрока) КАК ОтветственныйНаименование,
	|	ВыгружаемыйДокумент.Комментарий КАК Comment,
	|	ВыгружаемыйДокумент.ДатаПоДаннымКлиента КАК OrderDate,
	|	ВыгружаемыйДокумент.НомерПоДаннымКлиента КАК OrderNumber,
	|	ВыгружаемыйДокумент.Номер КАК Number,
	|	ВыгружаемыйДокумент.Дата КАК Date,
	|	&ТекущаяДата КАК SFDate
	|ИЗ
	|	Документ.битЗаявкаКлиента КАК ВыгружаемыйДокумент
	|ГДЕ
	|	ВыгружаемыйДокумент.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(); 
	Выборка.Следующий();
	
	СтруктураШапкиДокумента = Новый Структура;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураШапкиДокумента.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Выборка.ОтветственныйНаименование) Тогда
		СтруктураШапкиДокумента.Вставить("Comment", Выборка.ОтветственныйНаименование + ": " + Выборка.Comment);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("IdLoadPoint", "000");
	СтруктураШапкиДокумента.Вставить("IdUnloadPoint", "000");
	
	СтруктураШапкиДокумента.Вставить("UnloadDate", ТекущаяДата);
	СтруктураШапкиДокумента.Вставить("UnloadTime", Формат(ТекущаяДата, "ДЛФ=T"));
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

Функция СформироватьОбъектXDTO(ЗаказКлиента)
	
	// Создадим модель по данным фабрики XDTO.
	ПространствоИмен = ПространствоИменОтправкиПодтверждений();
	ТипОбъектаXDTO_Document = ФабрикаXDTO.Тип(ПространствоИмен, "Document");
	ОбъектXDTO_Document = ФабрикаXDTO.Создать(ТипОбъектаXDTO_Document);	
	
	// Шапка.
	СтруктураШапки = ПолучитьСтруктуруШапкиДокумента(ЗаказКлиента);
	ЗаполнитьЭлементXDTOПоСтруктуре(ОбъектXDTO_Document, СтруктураШапки);
	
	// Products.
	ОбъектXDTO_Products = СформироватьБлокProducts(ЗаказКлиента);
	ОбъектXDTO_Document.Products = ОбъектXDTO_Products;
	
	// Content.
	ОбъектXDTO_Content = СформироватьБлокContent(ЗаказКлиента);
	ОбъектXDTO_Document.Content = ОбъектXDTO_Content;
	
	Возврат ОбъектXDTO_Document;
	
КонецФункции

Функция ПолучитьСтруктуруШапкиДокумента(ДокументСсылка) 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ТипДокумента", "6");
	Запрос.УстановитьПараметр("PackageVersion", "2");
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ТранспортнаяИнформация.Объект КАК Ссылка,
	|	МАКСИМУМ(бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиПо) КАК ПлановаяДатаДоставкиПо
	|ПОМЕСТИТЬ ПлановыеДатыДоставки
	|ИЗ
	|	РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|ГДЕ
	|	бг_ТранспортнаяИнформация.Объект = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	бг_ТранспортнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&PackageVersion КАК PackageVersion,
	|	ВыгружаемыйДокумент.Организация.бг_Тикер КАК SenderTiker,
	|	ВыгружаемыйДокумент.Контрагент.бг_Тикер КАК RecipientTiker,
	|	&ТипДокумента КАК DocumentType,
	|	ВыгружаемыйДокумент.Номер КАК Number,
	|	ВыгружаемыйДокумент.Дата КАК Date,
	|	ВыгружаемыйДокумент.бг_ЗаявкаКлиента.ДатаПоДаннымКлиента КАК OrderDate,
	|	ВыгружаемыйДокумент.бг_ЗаявкаКлиента.НомерПоДаннымКлиента КАК OrderNumber,
	|	ВыгружаемыйДокумент.ДатаОтгрузки КАК SFDate,
	|	ВыгружаемыйДокумент.Склад КАК Склад,
	|	ВыгружаемыйДокумент.Склад.бг_ПунктНазначения КАК СкладПунктНазначения,
	|	ВыгружаемыйДокумент.Склад.бг_ПунктНазначения.ОрганизацияЕГАИС КАК СкладПунктНазначенияОрганизацияЕГАИС,
	|	ВыгружаемыйДокумент.Склад.бг_ПунктНазначения.ОрганизацияЕГАИС.Код КАК IdLoadPoint,
	|	ВыгружаемыйДокумент.бг_ПунктНазначения КАК ПунктНазначения,
	|	ВыгружаемыйДокумент.бг_ПунктНазначения.ОрганизацияЕГАИС КАК ПунктНазначенияОрганизацияЕГАИС,
	|	ВыгружаемыйДокумент.бг_ПунктНазначения.ОрганизацияЕГАИС.Код КАК IdUnloadPoint,
	|	ЕСТЬNULL(ПлановыеДатыДоставки.ПлановаяДатаДоставкиПо, ДАТАВРЕМЯ(1, 1, 1)) КАК SFSrcDate,
	|	ВыгружаемыйДокумент.Комментарий КАК Comment,
	|	ВыгружаемыйДокумент.Менеджер КАК Менеджер,
	|	ЕСТЬNULL(ВыгружаемыйДокумент.Менеджер.Наименование, &ПустаяСтрока) КАК МенеджерНаименование
	|ИЗ
	|	Документ.ЗаказКлиента КАК ВыгружаемыйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеДатыДоставки КАК ПлановыеДатыДоставки
	|		ПО ВыгружаемыйДокумент.Ссылка = ПлановыеДатыДоставки.Ссылка
	|ГДЕ
	|	ВыгружаемыйДокумент.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(); 
	Выборка.Следующий();
	
	ПроверитьОрганизациюЕГАИССклада(ДокументСсылка, Выборка);
	ПроверитьОрганизациюЕГАИСПунктаНазначения(ДокументСсылка, Выборка);
	
	СтруктураШапкиДокумента = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураШапкиДокумента.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтруктураШапкиДокумента.SFSrcDate) Тогда
		СтруктураШапкиДокумента.Удалить("SFSrcDate");
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("Comment", Выборка.Comment + " Подтверждение от: " + Выборка.МенеджерНаименование); 
	СтруктураШапкиДокумента.Вставить("GUID", Строка(ДокументСсылка.УникальныйИдентификатор()));
	
	ТекущаяДата = ТекущаяДатаСеанса();
	СтруктураШапкиДокумента.Вставить("UnloadDate", ТекущаяДата);
	СтруктураШапкиДокумента.Вставить("UnloadTime", Формат(ТекущаяДата, "ДЛФ=T"));	
	
	Возврат СтруктураШапкиДокумента;
	
КонецФункции

Функция СформироватьБлокProducts(ДокументСсылка)
	
	ПространствоИмен = ПространствоИменОтправкиПодтверждений();
	ТипОбъектаXDTO_Products = ФабрикаXDTO.Тип(ПространствоИмен, "Products");
	ОбъектXDTO_Products = ФабрикаXDTO.Создать(ТипОбъектаXDTO_Products);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Партнер КАК Партнер
	|ПОМЕСТИТЬ РеквизитыЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыЗаказа.Партнер КАК Партнер,
	|	РеквизитыЗаказа.Контрагент КАК Контрагент,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Номенклатура.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(ЗаказКлиентаТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(500)) КАК НаименованиеПолное,
	|	ЗаказКлиентаТовары.Номенклатура.Код КАК Код,
	|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК УпаковкаКоличествоВложений,
	|	УпаковкиЕдиницыИзмерения.Родитель КАК УпаковкаРодитель,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК УпаковкаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.Код КАК УпаковкаЕдиницаИзмеренияКод,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения КАК УпаковкаТипЕдиницыИзмерения
	|ПОМЕСТИТЬ НоменклатураЗаказа
	|ИЗ
	|	РеквизитыЗаказа КАК РеквизитыЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|			ПО ЗаказКлиентаТовары.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|		ПО РеквизитыЗаказа.Ссылка = ЗаказКлиентаТовары.Ссылка
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения В (ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка), ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДокументТовары.Номенклатура.Код КАК ProductCode,
	|	ДокументТовары.Номенклатура.Код КАК ProductID,
	|	ДокументТовары.Номенклатура.Наименование КАК ProductName,
	|	ДокументТовары.Номенклатура.ЕдиницаИзмерения.Код КАК UnitOfMeasure,
	|	ДокументТовары.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДокументТовары.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры КАК CodeEK,
	|	ДокументТовары.Номенклатура.ТоварнаяКатегория.бг_СкюМТ.Код КАК CodeEK_SKU
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураЗаказа.Номенклатура КАК Номенклатура,
	|	НоменклатураЗаказа.Упаковка КАК Упаковка,
	|	НоменклатураЗаказа.УпаковкаКоличествоВложений КАК УпаковкаКоличествоВложений,
	|	НоменклатураЗаказа.УпаковкаЕдиницаИзмеренияКод КАК УпаковкаЕдиницаИзмеренияКод
	|ИЗ
	|	НоменклатураЗаказа КАК НоменклатураЗаказа
	|ГДЕ
	|	НоменклатураЗаказа.УпаковкаТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураЗаказа.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	НоменклатураЗаказа КАК НоменклатураЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бг_Штрихкоды_ЕК_Номенклатуры КАК ШтрихкодыНоменклатуры
	|		ПО НоменклатураЗаказа.Упаковка = ШтрихкодыНоменклатуры.Владелец
	|ГДЕ
	|	НЕ ШтрихкодыНоменклатуры.Ссылка ЕСТЬ NULL
	|	И ШтрихкодыНоменклатуры.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|	И НЕ ШтрихкодыНоменклатуры.Штрихкод = """"";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ТаблицаУпаковки = Результаты[3].Выгрузить();
	ТаблицаШтрихкоды = Результаты[4].Выгрузить();
	
	ОтборНоменклатура = Новый Структура("Номенклатура");
	РезультатЗапросаТовары = Результаты[2];
	Выборка = РезультатЗапросаТовары.Выбрать(); 
	Пока Выборка.Следующий() Цикл
		
		СтруктураProduct = Новый Структура;
		ТипОбъектаXDTO_Product = ФабрикаXDTO.Тип(ПространствоИмен, "Product");
		ОбъектXDTO_Product = ФабрикаXDTO.Создать(ТипОбъектаXDTO_Product);
		
		Для Каждого Колонка Из РезультатЗапросаТовары.Колонки Цикл
			СтруктураProduct.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		
		ОтборНоменклатура.Номенклатура = Выборка.Номенклатура;
		
		СтрокиУпаковок = ТаблицаУпаковки.НайтиСтроки(ОтборНоменклатура);
		Если СтрокиУпаковок.Количество() > 0 Тогда
			СтрокаУпаковки = СтрокиУпаковок[0];
			СтруктураProduct.Вставить("UnitPackSize", СтрокаУпаковки.УпаковкаКоличествоВложений);
			СтруктураProduct.Вставить("UnitOfPack", СтрокаУпаковки.УпаковкаЕдиницаИзмеренияКод);
		КонецЕсли;
		
		СтрокиШтрихКодов = ТаблицаШтрихкоды.НайтиСтроки(ОтборНоменклатура);
		Если СтрокиШтрихКодов.Количество() > 0 Тогда
			СтрокаШтрихКода = СтрокиШтрихКодов[0];
			СтруктураProduct.Вставить("BarCode", СтрокаШтрихКода.Штрихкод);
		КонецЕсли;
		
		СтруктураProduct.Вставить("BuyerProductCode", "");
		
		ЗаполнитьЭлементXDTOПоСтруктуре(ОбъектXDTO_Product, СтруктураProduct); 
		ОбъектXDTO_Products.Product.Добавить(ОбъектXDTO_Product);
		
	КонецЦикла;
	
	Возврат ОбъектXDTO_Products;
	
КонецФункции

Функция СформироватьБлокContent(ДокументСсылка)
	
	ПространствоИмен = ПространствоИменОтправкиПодтверждений();
	ТипОбъектаXDTO_Content = ФабрикаXDTO.Тип(ПространствоИмен, "Content");
	ОбъектXDTO_Content = ФабрикаXDTO.Создать(ТипОбъектаXDTO_Content);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.НомерСтроки КАК LineNumber,
	|	ДокументТовары.Номенклатура.Код КАК ProductID,
	|	ДокументТовары.Количество КАК Quantity,
	|	ДокументТовары.бг_КоличествоКоробок КАК QuantityOfPacks,
	|	ДокументТовары.Цена КАК Price,
	|	ЕСТЬNULL(ДокументТовары.СтавкаНДС.Ставка, 0) КАК VATRate,
	|	ДокументТовары.Сумма КАК Amount,
	|	ДокументТовары.СуммаНДС КАК VATAmount
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДокументТовары
	|ГДЕ
	|	ДокументТовары.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		СтруктураLine = Новый Структура;
		ТипОбъектаXDTO_Line = ФабрикаXDTO.Тип(ПространствоИмен, "Line");
		ОбъектXDTO_Line = ФабрикаXDTO.Создать(ТипОбъектаXDTO_Line);
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			СтруктураLine.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		ЗаполнитьЭлементXDTOПоСтруктуре(ОбъектXDTO_Line, СтруктураLine); 
		ОбъектXDTO_Content.Line.Добавить(ОбъектXDTO_Line);
	КонецЦикла;
	
	Возврат ОбъектXDTO_Content;
	
КонецФункции

Процедура ЗаполнитьЭлементXDTOПоСтруктуре(ЭлементXDTO, Структура)
	
	Для Каждого СвойствоXDTO Из ЭлементXDTO.Свойства() Цикл
		Если Не Структура.Свойство(СвойствоXDTO.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Структура[СвойствоXDTO.Имя] = Null Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Если ТипЗнч(Структура[СвойствоXDTO.Имя]) = Тип("Строка") Тогда 
				Структура[СвойствоXDTO.Имя] = СокрЛП(Структура[СвойствоXDTO.Имя]);
			КонецЕсли;
			ЭлементXDTO[СвойствоXDTO.Имя] = Структура[СвойствоXDTO.Имя];
		Исключение 
			ШаблонСообщения = НСтр("ru = 'Не заполнено Свойство XDTO %1 значением %2. По причине: %3.'"); 
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения,
				СвойствоXDTO.Имя,
				Структура[СвойствоXDTO.Имя],
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОрганизациюЕГАИССклада(ДокументСсылка, Выборка)
	
	Если Не ЗначениеЗаполнено(Выборка.IdLoadPoint) Тогда
		
		Если Не ЗначениеЗаполнено(Выборка.Склад) Тогда
			ШаблонСообщения = НСтр("ru = 'Документ %1 Не заполнен склад.'"); 
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументСсылка);
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.СкладПунктНазначения) Тогда
			ШаблонСообщения = НСтр("ru = 'Документ %1 Не заполнен пункт назначения для склада %2.'"); 
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументСсылка, Выборка.Склад);
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.СкладПунктНазначенияОрганизацияЕГАИС) Тогда
			ШаблонСообщения = 
				НСтр("ru = 'Документ %1 Не заполнена организация ЕГАИС для пункта назначения %2 склада %3.'"); 
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ДокументСсылка,
				Выборка.СкладПунктНазначения,
				Выборка.Склад);
		Иначе 
			ШаблонСообщения = НСтр("ru = 'Документ %1 Не заполнен код в ФСРАР для организации ЕГАИС %2.'"); 
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументСсылка, Выборка.СкладПунктНазначенияОрганизацияЕГАИС);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОрганизациюЕГАИСПунктаНазначения(ДокументСсылка, Выборка)
	
	Если Не ЗначениеЗаполнено(Выборка.IdUnloadPoint) Тогда
		
		Если Не ЗначениеЗаполнено(Выборка.ПунктНазначения) Тогда
			ШаблонСообщения = НСтр("ru = 'Документ %1 Не заполнен пункт назначения грузополучателя.'"); 
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументСсылка);
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПунктНазначенияОрганизацияЕГАИС) Тогда
			ШаблонСообщения = 
				НСтр("ru = 'Документ %1 Не заполнена организация ЕГАИС для пункта назначения %2 грузополучателя.'"); 
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, ДокументСсылка,
				Выборка.ПунктНазначения);
		Иначе 
			ШаблонСообщения = НСтр("ru = 'Документ %1 Не заполнен код в ФСРАР для организации ЕГАИС %2.'"); 
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументСсылка, Выборка.ПунктНазначенияОрганизацияЕГАИС);
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатаОтправкиПодтверждений(ЗаявкаКлиента, 
											ПодтверждаемыеЗаказы, 
											ЧастичноеПодтверждение)
	
	КомментарийКВерсииОтправкиПодтверждения =
		НСтр("ru = 'АРМ Подтверждение количества в заявках (предзаказах), отправка подтверждения.'");
	
	// Заполним даты отправки подтверждений в заказах клиентов.
	Для Каждого ЗаказКлиента Из ПодтверждаемыеЗаказы Цикл
		ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
		ЗаказКлиентаОбъект.бг_ДатаОтправкиПодтвержденияСобственномуКонтрагенту = ТекущаяДатаСеанса();
		
		ЗаказКлиентаОбъект.ОбменДанными.Загрузка = Истина;
		ЗаказКлиентаОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
		ЗаказКлиентаОбъект.Заблокировать();
		ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		// Так как в режиме загрузки версии объектов не создаются, создадим версию.
		ЗаказКлиентаОбъект.ОбменДанными.Загрузка = Ложь;
		ЗаказКлиентаОбъект.ДополнительныеСвойства.Вставить(
			"ВерсионированиеОбъектовКомментарийКВерсии",
			КомментарийКВерсииОтправкиПодтверждения);
		ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(ЗаказКлиентаОбъект, РежимЗаписиДокумента.Запись);
	КонецЦикла;
	
	// Заполним ответственного в заявке клиента.
	ЗаявкаКлиентаОбъект = ЗаявкаКлиента.ПолучитьОбъект();
	Изменена = Ложь;
	Если Не ЗначениеЗаполнено(ЗаявкаКлиентаОбъект.Ответственный) Тогда
		ЗаявкаКлиентаОбъект.Ответственный = Пользователи.ТекущийПользователь();
		Изменена = Истина;
	КонецЕсли;
	
	Если ЧастичноеПодтверждение Тогда
		НовыйСтатус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.ЧастичноПодтверждена;
	Иначе
		НовыйСтатус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Подтверждена;
		ЗаявкаКлиентаОбъект.ДатаПодтверждения = ТекущаяДатаСеанса();
		Изменена = Истина;
	КонецЕсли;
	Если ЗаявкаКлиентаОбъект.СтатусЗаявкиКлиентаСобственногоКонтрагента <> НовыйСтатус Тогда
		ЗаявкаКлиентаОбъект.СтатусЗаявкиКлиентаСобственногоКонтрагента = НовыйСтатус;
		Изменена = Истина;
	КонецЕсли;
	
	Если Изменена Тогда
		ЗаявкаКлиентаОбъект.ОбменДанными.Загрузка = Истина;
		ЗаявкаКлиентаОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
		ЗаявкаКлиентаОбъект.ДополнительныеСвойства.Вставить("бг_ОтключитьСинхронизациюЗависимыхДокументов");
		ЗаявкаКлиентаОбъект.Заблокировать();
		ЗаявкаКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		// Так как в режиме загрузки версии объектов не создаются, создадим версию.
		ЗаявкаКлиентаОбъект.ОбменДанными.Загрузка = Ложь;
		ЗаявкаКлиентаОбъект.ДополнительныеСвойства.Вставить(
			"ВерсионированиеОбъектовКомментарийКВерсии",
			КомментарийКВерсииОтправкиПодтверждения);
		ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(ЗаявкаКлиентаОбъект, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Функция ПространствоИменОтправкиПодтверждений()
	
	Возврат "http://www.sygroup.ru/DocExchange/";
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеКодовSAPвSKUMT

Процедура ЗаполнитьКодыSAPвСКЮМТ(ДанныеЗаявкиКлиента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникЗаказа = ДанныеЗаявкиКлиента.ИсточникЗаказа;
	Если ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		И ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		Возврат;
	КонецЕсли;
	
	МассивОшибок = Новый Массив;
	Для Каждого СтрокаТЧ Из ДанныеЗаявкиКлиента.Товары Цикл
		
		КодНоменклатурыSAP = СтрокаТЧ.КодНоменклатурыSAP;
		КодSKUMT = СтрокаТЧ.КодSKUMT;
		
		Если Не ЗначениеЗаполнено(КодНоменклатурыSAP) 
			Или Не ЗначениеЗаполнено(КодSKUMT) Тогда
			Продолжить;
		КонецЕсли;
		
		СКЮМТ = СКЮМТПоКоду(КодSKUMT);
		Если Не ЗначениеЗаполнено(СКЮМТ.Ссылка) Тогда
			ШаблонОшибки = 
				НСтр("ru = 'Код позиции заказа %1. Не найдена SKU MT по коду ""%2""'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, СтрокаТЧ.КодПозицииЗаказа, СтрокаТЧ.КодSKUMT);
			МассивОшибок.Добавить(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если СКЮМТ.КодНоменклатурыSAP = КодНоменклатурыSAP Тогда
			// Код SAP в SKU MT уже заполнен.
			Продолжить;
		КонецЕсли;
		
		Если Не ПроверитьДубльСКЮМТПоКодуSAP(СКЮМТ.Ссылка, КодНоменклатурыSAP, СтрокаТЧ, МассивОшибок) Тогда
			Продолжить;
		КонецЕсли;
		
		СКЮМТОбъект = СКЮМТ.Ссылка.ПолучитьОбъект();
		СКЮМТОбъект.ОбменДанными.Загрузка = Истина;
		СКЮМТОбъект.КодНоменклатурыSAP = КодНоменклатурыSAP;
		СКЮМТОбъект.Записать();
		
		// Так как в режиме загрузки версии объектов не создаются, создадим версию.
		СКЮМТОбъект.ОбменДанными.Загрузка = Ложь;
		ШаблонКомментарияКВерсии = НСтр("ru = 'Записан код SAP по данным %1'");
		КомментарияКВерсии = СтрШаблон(ШаблонКомментарияКВерсии, ДанныеЗаявкиКлиента.Ссылка);
		СКЮМТОбъект.ДополнительныеСвойства.Вставить(
			"ВерсионированиеОбъектовКомментарийКВерсии",
			КомментарияКВерсии);
		ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(СКЮМТОбъект);
		
		бг_НоменклатураКонтрагентов.СинхронизироватьНоменклатуруКонтрагентовПоКодуSAP(СКЮМТ.Ссылка);
		
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		МассивОшибок.Вставить(0, Строка(ТекущаяДатаСеанса()));
		МассивОшибок.Вставить(1, "------------------------------------------------------------------");
		МассивОшибок.Вставить(2, НСтр("ru = 'При обновлении кодов SAP в SKU MT были ошибки:'"));
		ТекстСообщения = СтрСоединить(МассивОшибок, Символы.ПС);
		// Добавим информацию в протокол загрузки заявки.
		ШаблонПротокола = НСтр("ru = '
								|%1.'");
		ЗаявкаКлиентаОбъект = ДанныеЗаявкиКлиента.Ссылка.ПолучитьОбъект();
		ПротоколЗагрузки = 
			ЗаявкаКлиентаОбъект.ПротоколЗагрузки + СтрШаблон(ШаблонПротокола, ТекстСообщения);
		ЗаявкаКлиентаОбъект.ПротоколЗагрузки = СокрЛП(ПротоколЗагрузки);
		ЗаявкаКлиентаОбъект.ОбменДанными.Загрузка = Истина;
		ЗаявкаКлиентаОбъект.Записать();
		
		// Так как в режиме загрузки версии объектов не создаются, создадим версию.
		ЗаявкаКлиентаОбъект.ОбменДанными.Загрузка = Ложь;
		ЗаявкаКлиентаОбъект.ДополнительныеСвойства.Вставить(
			"ВерсионированиеОбъектовКомментарийКВерсии",
			НСтр("ru = 'Обновление кодов SAP в SKU MT'"));
		ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(ЗаявкаКлиентаОбъект, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Функция СКЮМТПоКоду(КодSKUMT)
	
	СКЮМТ = Новый Структура;
	СКЮМТ.Вставить("Ссылка", Справочники.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка());
	СКЮМТ.Вставить("КодНоменклатурыSAP", "");
	
	Если Не ЗначениеЗаполнено(КодSKUMT) Тогда
		Возврат СКЮМТ;
	КонецЕсли;
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("КодSKUMT", КодSKUMT);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СКЮМТ.Ссылка КАК Ссылка,
	|	СКЮМТ.КодНоменклатурыSAP КАК КодНоменклатурыSAP
	|ИЗ
	|	Справочник.бг_ЕК_СКЮ_СкюМТ КАК СКЮМТ
	|ГДЕ
	|	НЕ СКЮМТ.ПометкаУдаления
	|	И СКЮМТ.Код = &КодSKUMT";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(СКЮМТ, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СКЮМТ; 
	
КонецФункции

Функция ПроверитьДубльСКЮМТПоКодуSAP(СКЮМТ, КодНоменклатурыSAP, СтрокаТЧ, МассивОшибок)
	
	ЕстьДубли = Ложь;
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("КодНоменклатурыSAP", КодНоменклатурыSAP);
	Запрос.УстановитьПараметр("СКЮМТ", СКЮМТ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СКЮМТ.Ссылка КАК Ссылка,
	|	СКЮМТ.Код КАК Код
	|ИЗ
	|	Справочник.бг_ЕК_СКЮ_СкюМТ КАК СКЮМТ
	|ГДЕ
	|	СКЮМТ.КодНоменклатурыSAP = &КодНоменклатурыSAP
	|	И СКЮМТ.Ссылка <> &СКЮМТ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ШаблонОшибки = 
			бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
				НСтр("ru = 'Код позиции заказа %1. Не записан код SAP ""%2"" в SKU MT %3 (%4),
				| обнаружен дубль по коду SAP - SKU MT %5 (%6)'"));
		ТекстОшибки = СтрШаблон(
			ШаблонОшибки,
			СтрокаТЧ.КодПозицииЗаказа,
			КодНоменклатурыSAP,
			СКЮМТ,
			СтрокаТЧ.КодSKUMT,
			Выборка.Ссылка,
			Выборка.Код);
		МассивОшибок.Добавить(ТекстОшибки);
		
		ЕстьДубли = Истина;
	КонецЕсли;
	
	Возврат Не ЕстьДубли;
	
КонецФункции

#КонецОбласти 

// Записывает созданные и модифицированные документы в ИБ.
//
Процедура ЗаписатьЗависимыеДокументвВИБ(РеквизитыИсточника, ТаблицаЗависимыхДокументов)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	// Выполняем требуемые действия.
	Для Каждого СтрокаЗависимыхДокументов Из ТаблицаЗависимыхДокументов Цикл 
		
		Если Не СтрокаЗависимыхДокументов.ТребуетсяЗапись Тогда 
			Продолжить;
		КонецЕсли;
		
		Если СтрокаЗависимыхДокументов.СостояниеПометкиУдаления Тогда 
			// Пометка на удаление.
			ЗависимыйДокументОбъект = СтрокаЗависимыхДокументов.ЗависимыйДокумент.ПолучитьОбъект();  
			
			ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось пометить на удаление документ %1.';
									           |en = 'Document %1 is not marked for deletion.'",	
								               КодОсновногоЯзыка);
			
			РежимЗаписи = ?(СтрокаЗависимыхДокументов.Проведен,
				РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
			
			ЗависимыйДокументОбъект.ПометкаУдаления = Истина;
			
		Иначе // Cнятие пометки на удаление и обновление реквизитов.	
			
			ЗависимыйДокументОбъект = СтрокаЗависимыхДокументов.ЗависимыйДокументОбъект;
			
			Если РеквизитыИсточника.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;

				ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось провести документ %1.';
										           |en = 'Document %1 is not posted.'",	
									               КодОсновногоЯзыка);
			Иначе
				РежимЗаписи = ?(СтрокаЗависимыхДокументов.Проведен, 
					РежимЗаписиДокумента.ОтменаПроведения, РежимЗаписиДокумента.Запись);
					
				Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
					ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось отменить проведение документа %1.';
											           |en = 'The posting of the %1 document is not cancelled.'",	
										               КодОсновногоЯзыка);
				Иначе		
					ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось записать документ %1.';
											           |en = 'Document %1 is not saved.'",	
										               КодОсновногоЯзыка);
				КонецЕсли;  
			КонецЕсли;	
			
			ЗависимыйДокументОбъект.ПометкаУдаления = Ложь;
			
		КонецЕсли;
	
		Попытка
			
			ЕстьОшибкиЗаполнения = Ложь;
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Если НЕ ЗависимыйДокументОбъект.ПроверитьЗаполнение() Тогда
					ЕстьОшибкиЗаполнения = Истина;
					
					ТекстОшибкиЗаполнения = 
						НСтр("ru = 'Документ %1 невозможно записать по причине некорректного заполнения.';
							 |en = 'Document %1 is not saved. Reason: the document is filled incorrectly.'",
						КодОсновногоЯзыка);
					ТекстСообщения = СтрШаблон(ТекстОшибкиЗаполнения, ЗависимыйДокументОбъект);					
					ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
					
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ЕстьОшибкиЗаполнения Тогда
				ЗависимыйДокументОбъект.Записать(РежимЗаписи);
			КонецЕсли;	
			
		Исключение
			
			Если Не ЕстьОшибкиЗаполнения Тогда
				ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки, ЗависимыйДокументОбъект) + 
					Символы.ПС + 
					НСтр("ru = 'По причине: '; en = 'Reason: '", КодОсновногоЯзыка) +
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
			КонецЕсли;
			
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		Если Не РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры	

Процедура ДополнитьТекстСообщениямиПользователю(ТекстСообщения) 
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Сообщение Из Сообщения Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + Сообщение.Текст;
	КонецЦикла;
	
КонецПроцедуры

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона:
//         * Имя            - Строка - Уникальное имя общего реквизита.
//         * Представление  - Строка - Представление общего реквизита.
//         * Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         * Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения:
//         * Имя            - Строка - Уникальное имя вложения.
//         * Представление  - Строка - Представление варианта.
//         * ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов:
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов:
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS:
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
