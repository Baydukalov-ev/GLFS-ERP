
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_битЗаявкаКлиента", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникЗаказаПриИзменении(Элемент)
	
	ИсточникЗаказаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗаявкиКлиентаСобственногоКонтрагентаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодПозицииЗаказа = "";
		ТекущиеДанные.ТоварнаяКатегория = Неопределено;
		ТекущиеДанные.КодНСИ = "";
		ТекущиеДанные.Количество = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодНСИПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.ТоварнаяКатегория = ТоварнаяКатегорияПоКодуНСИ(ТекущиеДанные.КодНСИ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварнаяКатегорияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТекущиеДанные.КодНСИ = КодНСИТоварнойКатегории(ТекущиеДанные.ТоварнаяКатегория);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ИсточникСобственныйКонтрагент = 
		ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент");
	Если Объект.ИсточникЗаказа <> ИсточникСобственныйКонтрагент Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("Заголовок", НСтр("ru = 'Загрузка товарных категорий из внешних файлов'"));
	
	ОповещениеОЗагрузке = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.бг_ЗагрузкаТоварныхКатегорийИзВнешнихФайлов.Форма",
		ПараметрыЗагрузки,
		ЭтотОбъект,,,,
		ОповещениеОЗагрузке);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ЗагрузкаИзВнешнихФайлов

// Обработчик завершения загрузки товарных категорий из внешнего файла.
//
//  Параметры:
//   АдресЗагруженныхДанных  - Строка - адрес таблицы товарных категорий во временном хранилище.
//   ДополнительныеПараметры - Структура, дполнительные параметры передаваемые обработчику.
//
&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		ПолучитьЗагруженныеТоварныеКатегорииИзХранилища(АдресЗагруженныхДанных);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварныеКатегорииИзХранилища(АдресТоварныхКатегорийВХранилище)
	
	ТоварныеКатегории = ПолучитьИзВременногоХранилища(АдресТоварныхКатегорийВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварныеКатегории Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров, , "Количество");
		СтрокаТЧТовары.КоличествоПервичное = СтрокаТоваров.Количество;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

 #Область ОбслуживаниеОбработчиковСобытийЭлементовФормы

&НаСервере
Процедура ИсточникЗаказаПриИзмененииСервер()
	
	УстановитьВидимостьЭлементовПоИсточникуЗаказа();
	УстановитьВидимостьЭлементовСтатуса();
	
КонецПроцедуры

 &НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Организация = Объект.Организация;
	
	Если Объект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент 
		И ЗначениеЗаполнено(Организация) Тогда
		Объект.КодОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "бг_Тикер");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	Контрагент = Объект.Контрагент;
	
	Если Объект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент 
		И ЗначениеЗаполнено(Контрагент) Тогда
		
		Объект.КодКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "бг_Тикер");
		
		Если ЗначениеЗаполнено(Объект.ПунктНазначения)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПунктНазначения, "Клиент") <> Контрагент Тогда
			Объект.ПунктНазначения = Неопределено;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
			Объект.ПунктНазначения = бг_ТранспортнаяЛогистика.ПунктНазначенияГрузополучателя(Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТоварнаяКатегорияПоКодуНСИ(КодНСИ)
	
	Возврат бг_ОбщегоНазначенияСервер.ТоварнаяКатегорияПоКодуНСИ(КодНСИ);
	
КонецФункции

&НаСервереБезКонтекста
Функция КодНСИТоварнойКатегории(ТоварнаяКатегория)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
		КодНСИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяКатегория, "бг_КодНСИ");
	Иначе
		КодНСИ = "";
	КонецЕсли;
	
	Возврат КодНСИ;
	
КонецФункции
 
 #КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьВидимостьЭлементовПоИсточникуЗаказа();
	УстановитьВидимостьЭлементовСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтатуса()
	
	ИсточникЗаказа = Объект.ИсточникЗаказа;
	Статус = Объект.СтатусЗаявкиКлиентаСобственногоКонтрагента;
	
	ПодтвержденаСобственногоКонтрагента =
		ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент
		И Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Подтверждена;
	
	ОтмененаСобственногоКонтрагента = 
		ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент
		И Статус = Перечисления.бг_СтатусыЗаявокКлиентовСобственныхКонтрагентов.Отменена;
	
	Элементы.ДатаПодтверждения.Видимость = ПодтвержденаСобственногоКонтрагента; 
	Элементы.ДатаОтмены.Видимость = ОтмененаСобственногоКонтрагента;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоИсточникуЗаказа()
	
	ИспользуемыеЭлементыИсточников = Новый Соответствие;
	ВсеУправляемыеЭлементы = Новый Массив;
	
	ИспользуемыеЭлементы = 
		ИспользуемыеЭлементыИсточника(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP);
	ИспользуемыеЭлементыИсточников.Вставить(
		Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP,
		ИспользуемыеЭлементы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУправляемыеЭлементы, ИспользуемыеЭлементы, Истина);
	
	ИспользуемыеЭлементы = 
		ИспользуемыеЭлементыИсточника(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS);
	ИспользуемыеЭлементыИсточников.Вставить(
		Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS,
		ИспользуемыеЭлементы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУправляемыеЭлементы, ИспользуемыеЭлементы, Истина);
	
	ИспользуемыеЭлементы = 
		ИспользуемыеЭлементыИсточника(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED);
	ИспользуемыеЭлементыИсточников.Вставить(
		Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED,
		ИспользуемыеЭлементы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУправляемыеЭлементы, ИспользуемыеЭлементы, Истина);
	
	ИспользуемыеЭлементы = 
		ИспользуемыеЭлементыИсточника(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B);
	ИспользуемыеЭлементыИсточников.Вставить(
		Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B,
		ИспользуемыеЭлементы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУправляемыеЭлементы, ИспользуемыеЭлементы, Истина);
	
	ИспользуемыеЭлементы = 
		ИспользуемыеЭлементыИсточника(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr);
	ИспользуемыеЭлементыИсточников.Вставить(
		Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr,
		ИспользуемыеЭлементы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУправляемыеЭлементы, ИспользуемыеЭлементы, Истина);
	
	ИспользуемыеЭлементы = 
		ИспользуемыеЭлементыИсточника(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент);
	ИспользуемыеЭлементыИсточников.Вставить(
		Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент,
		ИспользуемыеЭлементы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУправляемыеЭлементы, ИспользуемыеЭлементы, Истина);
	
	ИспользуемыеЭлементы = 
		ИспользуемыеЭлементыИсточника(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr);
	ИспользуемыеЭлементыИсточников.Вставить(
		Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr,
		ИспользуемыеЭлементы);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеУправляемыеЭлементы, ИспользуемыеЭлементы, Истина);
	
	// Отключим видимость у всех элементов, использование которых зависит от источника.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		ВсеУправляемыеЭлементы,
		"Видимость",
		Ложь);
	
	// Включим видимость элементов, которые используются для текущего источника.
	ИспользуемыеЭлементы = ИспользуемыеЭлементыИсточников.Получить(Объект.ИсточникЗаказа);
	Если ИспользуемыеЭлементы <> Неопределено Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Элементы,
			ИспользуемыеЭлементыИсточников.Получить(Объект.ИсточникЗаказа),
			"Видимость",
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользуемыеЭлементыИсточника(Источник)
	
	ИспользуемыеЭлементы = Новый Массив;
	
	Если Источник = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP Тогда
		ИспользуемыеЭлементы.Добавить("ТоварыКодТорговойТочки");
		ИспользуемыеЭлементы.Добавить("ТоварыСкладОтгрузки");
		ИспользуемыеЭлементы.Добавить("НаименованиеОрганизации");
		ИспользуемыеЭлементы.Добавить("НаименованиеКонтрагента");
		ИспользуемыеЭлементы.Добавить("АдресДоставки");
		ИспользуемыеЭлементы.Добавить("НаименованиеГрузоотправителя");
		ИспользуемыеЭлементы.Добавить("КодГрузоотправителя");
		ИспользуемыеЭлементы.Добавить("НаименованиеГрузополучателя");
		ИспользуемыеЭлементы.Добавить("ГруппаЗакупок");
		ИспользуемыеЭлементы.Добавить("ДатаОтправкиOrderSP");
		ИспользуемыеЭлементы.Добавить("ПлановаяДатаДоставки");
		ИспользуемыеЭлементы.Добавить("ВиртуальныйЗаказ");
		ИспользуемыеЭлементы.Добавить("ТоварыНоменклатура");
		ИспользуемыеЭлементы.Добавить("ТоварыШтрихКодНоменклатуры");
		ИспользуемыеЭлементы.Добавить("ТоварыЕдиницаИзмерения");
		ИспользуемыеЭлементы.Добавить("ТоварыКодЕдиницыИзмерения");
		ИспользуемыеЭлементы.Добавить("ТоварыЦена");
		ИспользуемыеЭлементы.Добавить("ТоварыСтавкаНДС");
		ИспользуемыеЭлементы.Добавить("ТоварыСумма");
		ИспользуемыеЭлементы.Добавить("ТоварыСуммаНДС");
		ИспользуемыеЭлементы.Добавить("КодГрузополучателя");
		ИспользуемыеЭлементы.Добавить("КодSAP");
		ИспользуемыеЭлементы.Добавить("ТоварыКодНоменклатурыSAP");
		ИспользуемыеЭлементы.Добавить("ТоварыКодSKUMT");
		ИспользуемыеЭлементы.Добавить("ТоварыДатаОтгрузки");
		ИспользуемыеЭлементы.Добавить("ТоварыЦенаНДС");
		ИспользуемыеЭлементы.Добавить("КодКонтрагента");
		ИспользуемыеЭлементы.Добавить("КодОрганизации");
		ИспользуемыеЭлементы.Добавить("ДатаДоставки");
	ИначеЕсли Источник = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
		ИспользуемыеЭлементы.Добавить("КодСкладаИнтернетМагазина");
		ИспользуемыеЭлементы.Добавить("КодГрузополучателя");
		ИспользуемыеЭлементы.Добавить("КодSAP");
		ИспользуемыеЭлементы.Добавить("ТоварыКодНоменклатурыSAP");
		ИспользуемыеЭлементы.Добавить("ДатаДоставки");
	ИначеЕсли Источник = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		ИспользуемыеЭлементы.Добавить("ДоставкаСледующийДень");
		ИспользуемыеЭлементы.Добавить("ТоварыНомерПредзаказаКлиента");
		ИспользуемыеЭлементы.Добавить("ТоварыКодПозицииПредзаказаКлиента");
		ИспользуемыеЭлементы.Добавить("НаименованиеОрганизации");
		ИспользуемыеЭлементы.Добавить("НаименованиеКонтрагента");
		ИспользуемыеЭлементы.Добавить("АдресДоставки");
		ИспользуемыеЭлементы.Добавить("НаименованиеГрузоотправителя");
		ИспользуемыеЭлементы.Добавить("КодГрузоотправителя");
		ИспользуемыеЭлементы.Добавить("НаименованиеГрузополучателя");
		ИспользуемыеЭлементы.Добавить("ГруппаЗакупок");
		ИспользуемыеЭлементы.Добавить("ДатаОтправкиOrderSP");
		ИспользуемыеЭлементы.Добавить("ПлановаяДатаДоставки");
		ИспользуемыеЭлементы.Добавить("ТоварыНоменклатура");
		ИспользуемыеЭлементы.Добавить("ТоварыШтрихКодНоменклатуры");
		ИспользуемыеЭлементы.Добавить("ТоварыЕдиницаИзмерения");
		ИспользуемыеЭлементы.Добавить("ТоварыКодЕдиницыИзмерения");
		ИспользуемыеЭлементы.Добавить("ТоварыЦена");
		ИспользуемыеЭлементы.Добавить("ТоварыСтавкаНДС");
		ИспользуемыеЭлементы.Добавить("ТоварыСумма");
		ИспользуемыеЭлементы.Добавить("ТоварыСуммаНДС");
		ИспользуемыеЭлементы.Добавить("КодГрузополучателя");
		ИспользуемыеЭлементы.Добавить("КодSAP");
		ИспользуемыеЭлементы.Добавить("ТоварыКодНоменклатурыSAP");
		ИспользуемыеЭлементы.Добавить("ТоварыКодSKUMT");
		ИспользуемыеЭлементы.Добавить("ТоварыЦенаНДС");
		ИспользуемыеЭлементы.Добавить("КодКонтрагента");
		ИспользуемыеЭлементы.Добавить("КодОрганизации");
		ИспользуемыеЭлементы.Добавить("ДатаДоставки");
	ИначеЕсли Источник = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B Тогда
		ИспользуемыеЭлементы.Добавить("КодТТSY");
		ИспользуемыеЭлементы.Добавить("ГУИДЗаказаСПортала");
		ИспользуемыеЭлементы.Добавить("ВремяДоставкиС");
		ИспользуемыеЭлементы.Добавить("ВремяДоставкиДО");
		ИспользуемыеЭлементы.Добавить("ТоварыИдентификаторSKUMT");
		ИспользуемыеЭлементы.Добавить("ТоварыКодСтрокиБюджета");
		ИспользуемыеЭлементы.Добавить("ТоварыКодSKUMT");
		ИспользуемыеЭлементы.Добавить("ТоварыДатаОтгрузки");
		ИспользуемыеЭлементы.Добавить("ТоварыЦенаНДС");
		ИспользуемыеЭлементы.Добавить("КодОрганизации");
	ИначеЕсли Источник = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		ИспользуемыеЭлементы.Добавить("КодТТSY");
		ИспользуемыеЭлементы.Добавить("ГУИДЗаказаСПортала");
		ИспользуемыеЭлементы.Добавить("ВремяДоставкиС");
		ИспользуемыеЭлементы.Добавить("ВремяДоставкиДО");
		ИспользуемыеЭлементы.Добавить("ТоварыИдентификаторSKUMT");
		ИспользуемыеЭлементы.Добавить("ТоварыКодSKUMT");
		ИспользуемыеЭлементы.Добавить("ТоварыДатаОтгрузки");
		ИспользуемыеЭлементы.Добавить("ТоварыЦенаНДС");
		ИспользуемыеЭлементы.Добавить("КодОрганизации");
		ИспользуемыеЭлементы.Добавить("Исходный");
	ИначеЕсли Источник = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		ИспользуемыеЭлементы.Добавить("Ответственный");
		ИспользуемыеЭлементы.Добавить("ПунктНазначения");
		ИспользуемыеЭлементы.Добавить("СтатусЗаявкиКлиентаСобственногоКонтрагента");
		ИспользуемыеЭлементы.Добавить("ПрисоединенныйФайлВходящегоПисьма");
		ИспользуемыеЭлементы.Добавить("ГУИДПредзаказаСобственногоКонтрагента");
		ИспользуемыеЭлементы.Добавить("ТоварыТоварнаяКатегория");
		ИспользуемыеЭлементы.Добавить("ТоварыЗагрузитьИзВнешнегоФайла");
		ИспользуемыеЭлементы.Добавить("ТоварыКодНСИ");
		ИспользуемыеЭлементы.Добавить("ТоварыКоличествоПервичное");
		ИспользуемыеЭлементы.Добавить("ТоварыПримечание");
		ИспользуемыеЭлементы.Добавить("КодКонтрагента");
		ИспользуемыеЭлементы.Добавить("КодОрганизации");
		ИспользуемыеЭлементы.Добавить("ДатаДоставки");
	Иначе
		ИспользуемыеЭлементы = Новый Массив;
	КонецЕсли;
	
	Возврат ИспользуемыеЭлементы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

