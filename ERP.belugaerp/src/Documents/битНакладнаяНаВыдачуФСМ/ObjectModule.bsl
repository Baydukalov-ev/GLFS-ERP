#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	
Процедура ЗаполнитьНоменклатуруТоваровПоЗаявлениюНаВыдачуФСМ(ДокументСсылка) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ВидНоменклатуры = бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка");
	
	// Первым проходом заполняем собственно номенклатуру по заявлению о выдаче ФСМ
	
	НоменклатураЗаявления = НоменклатураЗаявления(ЗаявлениеОВыдачеФСМ);
	НоменклатураЗаявления.Индексы.Добавить("ТипМарки");

	Для Каждого ТоварнаяПозиция Из Товары Цикл
		
		// Номенклатуру определяем из заявления на выпуск ФСМ сопоставлением по типу марки
		ТоварнаяПозицияЗаявления = НоменклатураЗаявления.Найти(ТоварнаяПозиция.ТипМарки, "ТипМарки");
		Если ТоварнаяПозицияЗаявления = Неопределено Тогда
			ВызватьИсключение 
				СтрШаблон(
					НСтр("ru = 'В %1 не найдена позиция с типом марки %2'"),
					ЗаявлениеОВыдачеФСМ,
					ТоварнаяПозиция.ТипМарки);
		КонецЕсли;
		ТоварнаяПозиция.Номенклатура = ТоварнаяПозицияЗаявления.Номенклатура;
		
	КонецЦикла;

	// Вторым проходом определяем серии только что заполненной номенклатуры
	// Серию пытаемся найти среди существующих по ключевым реквизитам,
	// при неудаче создаем по загруженным данным товарной позиции
	
	КлючевыеРеквизитыСерий = КлючевыеРеквизитыСерий();
	
	СуществующиеСерииНомеклатуры = СуществующиеСерииНомеклатурыТоваров(ВидНоменклатуры, КлючевыеРеквизитыСерий);
	СуществующиеСерииНомеклатуры.Индексы.Добавить(КлючевыеРеквизитыСерий.Строкой);
	
	ПараметрыОтбораСерий = Новый Структура(КлючевыеРеквизитыСерий.Строкой);
	Для Каждого ТоварнаяПозиция Из Товары Цикл
		
		ПараметрыОтбораСерий.бг_Номенклатура = ТоварнаяПозиция.Номенклатура;
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСерий, Новый Структура("ГоденДо", ГоденДоСерии()));
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСерий, Новый Структура("бг_ЗаявлениеОВыдачеФСМ",  ЗаявлениеОВыдачеФСМ));
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСерий, Новый Структура("бг_НакладнаяНаВыдачуФСМ", ДокументСсылка));
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСерий, ТоварнаяПозиция);
		
		СерияТоварнойПозиции = СуществующиеСерииНомеклатуры.НайтиСтроки(ПараметрыОтбораСерий);
		
		Если СерияТоварнойПозиции.Количество() = 0 Тогда
			
			ТоварнаяПозиция.Серия = НоваяСерияНомеклатуры(
				ВидНоменклатуры,
				ТоварнаяПозиция,
				КлючевыеРеквизитыСерий,
				ДокументСсылка);
				
		Иначе
			ТоварнаяПозиция.Серия = СерияТоварнойПозиции[0].Ссылка;
		КонецЕсли;	
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ВнесеныВажныеИзменения() Экспорт

	ВнесеныВажныеИзменения = ДополнительныеСвойства.Свойство("СтруктураИзменений") 
		И ДополнительныеСвойства.СтруктураИзменений.Количество() > 0;
		
	Возврат ВнесеныВажныеИзменения;	
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

&Вместо("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаПроверкиЗаполненияСерий(Отказ);
	
КонецПроцедуры

&Вместо("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьТаблицуИзменений(РежимЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&Вместо("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	ОбновитьЗаполнитьПодчиненныеДокументы(Отказ);
	АктуализироватьСерии();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодчиненныеДокументы

Процедура ЗаполнитьТаблицуИзменений(РежимЗаписи)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;

	НепроверяемыеРеквизиты = Новый Структура;
	НепроверяемыеРеквизиты.Вставить("ОрганизацияЕГАИС");
	НепроверяемыеРеквизиты.Вставить("ТерриториальныйОрганРАР");
	НепроверяемыеРеквизиты.Вставить("ЗаявлениеОВыдачеФСМ");
	НепроверяемыеРеквизиты.Вставить("НаименованиеПроизводителяМарок");
	НепроверяемыеРеквизиты.Вставить("Комментарий");
	
	СтруктураИзменений = ОбщегоНазначенияУТ.ИзмененияДокумента(ЭтотОбъект, НепроверяемыеРеквизиты);
	
	// Проверка изменений БСП не анализирует стандартные реквизиты. Проверяем если не было других изменений.
	Если Не	СтруктураИзменений.Свойство("Реквизиты") Тогда
		
		ВыполненоПроведениеНепроведенного =
			РежимЗаписи = РежимЗаписиДокумента.Проведение
			И ЗначениеЗаполнено(Ссылка)
			И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проведен");
			
		Если ВыполненоПроведениеНепроведенного Тогда
				
			ТаблицаИзмененныхРеквизитов = Новый ТаблицаЗначений;
			ТаблицаИзмененныхРеквизитов.Колонки.Добавить("Имя");
			ТаблицаИзмененныхРеквизитов.Колонки.Добавить("НовоеЗначение");
			ТаблицаИзмененныхРеквизитов.Колонки.Добавить("СтароеЗначение");
			
			НоваяСтрокаИзменений = ТаблицаИзмененныхРеквизитов.Добавить();
			НоваяСтрокаИзменений.Имя = "Проведен";
			НоваяСтрокаИзменений.НовоеЗначение = Истина;
			НоваяСтрокаИзменений.СтароеЗначение = Ложь;
			
			СтруктураИзменений.Вставить("Реквизиты", ТаблицаИзмененныхРеквизитов);
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СтруктураИзменений", СтруктураИзменений);

КонецПроцедуры

Процедура ОбновитьЗаполнитьПодчиненныеДокументы(Отказ)

	УстановитьПривилегированныйРежим(Истина);
	
	Если Проведен Тогда
		
		// Заполняем и проводим подчиненные документы.
		Если Не ВозможноФормированиеПодчиненныхДокументов(Отказ) Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьЗаполнитьПодчиненныеДокументы();
		
	Иначе
		
		// Актуализируем состояние подчиненных документов при необходимости (удаление, отмена проведения).
		ОбновитьСостояниеПодчиненныхДокументов();
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Функция ВозможноФормированиеПодчиненныхДокументов(Отказ)

	ВозможноФормированиеПодчиненныхДокументов = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битНакладнаяНаВыдачуФСМ.Соглашение.ВидЦеныПоставщика КАК ВидЦеныПоставщика
	|ИЗ
	|	Документ.битНакладнаяНаВыдачуФСМ КАК битНакладнаяНаВыдачуФСМ
	|ГДЕ
	|	битНакладнаяНаВыдачуФСМ.Ссылка = &НакладнаяНаВыдачуФСМ";
	
	Запрос.УстановитьПараметр("НакладнаяНаВыдачуФСМ", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда

		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ВидЦеныПоставщика) Тогда
			ВозможноФормированиеПодчиненныхДокументов = Ложь;
			ТекстОшибки = "Не заполнен вид цены поставщика в соглашении!";
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Соглашение", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозможноФормированиеПодчиненныхДокументов;

КонецФункции

Процедура СформироватьЗаполнитьПодчиненныеДокументы()

	ПодчиненныеДокументы = Документы.битНакладнаяНаВыдачуФСМ.ПодчиненныеДокументы(Ссылка);
	
	// Создаем/заполняем приобретение товаров и услуг.
	ДанныеПодчиненногоДокумента = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"ПриобретениеТоваровУслуг");
	
	Если Не НеобходимоПереформироватьПодчиненныеДокументы(ДанныеПодчиненногоДокумента) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДанныеПодчиненногоДокумента = Неопределено Тогда
		ПриобретениеТоваровУслугОбъект = СформироватьПриобретениеТоваровУслуг();
	Иначе
		ПриобретениеТоваровУслугОбъект = СформироватьПриобретениеТоваровУслуг(ДанныеПодчиненногоДокумента.Документ);
	КонецЕсли;
	
	// Создаем/заполняем счет-фактуру полученную.
	ДанныеПодчиненногоДокумента = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"СчетФактураПолученный");
	
	Если ДанныеПодчиненногоДокумента = Неопределено Тогда
		СформироватьСчетФактураПолученный(ПриобретениеТоваровУслугОбъект);
	Иначе
		СформироватьСчетФактураПолученный(ПриобретениеТоваровУслугОбъект, ДанныеПодчиненногоДокумента.Документ);
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоПереформироватьПодчиненныеДокументы(ДанныеПодчиненногоДокумента)

	НеобходимоПереформироватьПодчиненныеДокументы = Ложь;
	
	// Если документы еще не были сформированы, их безусловно нужно формировать.
	Если ДанныеПодчиненногоДокумента = Неопределено Тогда
		НеобходимоПереформироватьПодчиненныеДокументы = Истина;
		Возврат НеобходимоПереформироватьПодчиненныеДокументы;
	КонецЕсли;
	
	// При обычном перепроведении документа каждый раз формировать подчиненные документы не нужно,
	// только если есть потребность.
	Если ДанныеПодчиненногоДокумента.ПометкаУдаления
		Или Не ДанныеПодчиненногоДокумента.Проведен
		Или ВнесеныВажныеИзменения()
		Или ДополнительныеСвойства.Свойство("бг_АктуализироватьПодчиненныеДокументы")
		И ДополнительныеСвойства.бг_АктуализироватьПодчиненныеДокументы = Истина Тогда
		
		НеобходимоПереформироватьПодчиненныеДокументы = Истина;
	КонецЕсли;
	
	Возврат НеобходимоПереформироватьПодчиненныеДокументы;

КонецФункции

Функция СформироватьПриобретениеТоваровУслуг(ПриобретениеТоваровУслуг = Неопределено)

	Если ПриобретениеТоваровУслуг = Неопределено Тогда
		ПриобретениеТоваровУслугОбъект = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
	Иначе
		ПриобретениеТоваровУслугОбъект = ПриобретениеТоваровУслуг.ПолучитьОбъект();
		ОчиститьПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект);
	КонецЕсли;
	
	ПриобретениеТоваровУслугОбъект.Заполнить(Соглашение);
	
	ЗаполнитьШапкуПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект);
	ЗаполнитьТоварыСерииПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект);
	
	Если НеобходимоПроводитьПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект) Тогда
		ПриобретениеТоваровУслугОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ПриобретениеТоваровУслугОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат ПриобретениеТоваровУслугОбъект;

КонецФункции

Процедура ОчиститьПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект)

	ПриобретениеТоваровУслугОбъект.Товары.Очистить();
	ПриобретениеТоваровУслугОбъект.РасшифровкаПлатежа.Очистить();
	ПриобретениеТоваровУслугОбъект.Серии.Очистить();
	ПриобретениеТоваровУслугОбъект.ВидыЗапасов.Очистить();
	ПриобретениеТоваровУслугОбъект.ЭтапыГрафикаОплаты.Очистить();
	ПриобретениеТоваровУслугОбъект.ШтрихкодыУпаковок.Очистить();

КонецПроцедуры

Процедура ЗаполнитьШапкуПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект)

	ПриобретениеТоваровУслугОбъект.ПометкаУдаления = Ложь;
	ПриобретениеТоваровУслугОбъект.бг_НакладнаяНаВыдачуФСМ = Ссылка;
	
	ЗаполнитьЗначенияСвойств(
		ПриобретениеТоваровУслугОбъект,
		ЭтотОбъект,
		"Дата, Организация, Контрагент, Партнер, Соглашение, Договор, НомерВходящегоДокумента, ДатаВходящегоДокумента, Склад");
		
		Если ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
			Если ЗначениеЗаполнено(ПорядокРасчетов) Тогда
				ПриобретениеТоваровУслугОбъект.ПорядокРасчетов = ПорядокРасчетов;
			КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТоварыСерииПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект)

	НовыеИменаКолонок = Новый Структура("КоличествоМарок", "Количество");
	ТаблицаТоварыИсточник = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Товары,
		, // Строки
		"Номенклатура, Серия, КоличествоМарок",
		, // КолонкиПоЗначению
		НовыеИменаКолонок);
		
	ТаблицаТоварыИсточник.Свернуть("Номенклатура, Серия", "Количество");	
	
	// Предполагаем по умолчанию, что для настроек склада/вида номенклатуры используются параметры учета серий
	//  "по себестоимости", если бы использовались "FEFO" - нужно было бы серии добавлять в ТЧ "Серии".
	Для каждого СтрокаТоварыИсточник Из ТаблицаТоварыИсточник Цикл
		
		// Товары
		НоваяСтрокаТоварыПТУ = ПриобретениеТоваровУслугОбъект.Товары.Добавить();
		
		НоваяСтрокаТоварыПТУ.Номенклатура = СтрокаТоварыИсточник.Номенклатура;
		НоваяСтрокаТоварыПТУ.Серия = СтрокаТоварыИсточник.Серия;
		НоваяСтрокаТоварыПТУ.КоличествоУпаковок = СтрокаТоварыИсточник.Количество;
		НоваяСтрокаТоварыПТУ.Количество = СтрокаТоварыИсточник.Количество;
		НоваяСтрокаТоварыПТУ.Склад = Склад;
		
	КонецЦикла;
	
	// Заполненяем статус указания серий.
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ПриобретениеТоваровУслугОбъект, Документы.ПриобретениеТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПриобретениеТоваровУслугОбъект, ПараметрыУказанияСерий);
	
	// Рассчитываем цены и связанные реквизиты.	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ПриобретениеТоваровУслугОбъект);
	
	ПараметрыЗаполнения = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦеныПоставщика");
	ПараметрыЗаполнения.Вставить("Дата", ПриобретениеТоваровУслугОбъект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", ПриобретениеТоваровУслугОбъект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", ПриобретениеТоваровУслугОбъект.Соглашение);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", ПриобретениеТоваровУслугОбъект.НалогообложениеНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			
	ЦеныЗаполнены = ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(
		ПриобретениеТоваровУслугОбъект.Товары,
		Неопределено, // ВыделенныеСтроки
		ПараметрыЗаполнения,
		СтруктураДействий);
		
КонецПроцедуры

Функция НеобходимоПроводитьПриобретениеТоваровУслуг(ПриобретениеТоваровУслугОбъект)

	НеобходимоПроводить = Истина;
	
	Если ПриобретениеТоваровУслугОбъект.Товары.Найти(0, "Цена") <> Неопределено Тогда
		НеобходимоПроводить = Ложь;	
	КонецЕсли;
	
	Возврат НеобходимоПроводить;

КонецФункции

Процедура СформироватьСчетФактураПолученный(ПриобретениеТоваровУслугОбъект, СчетФактураПолученный = Неопределено)

	ПараметрыРегистрации = Документы.ПриобретениеТоваровУслуг.ПараметрыРегистрацииСчетовФактурПолученных(
		ПриобретениеТоваровУслугОбъект);
		
	ПараметрыНеобходимости = УчетНДСРФ.СчетаФактурыПолученныеНаОсновании(ПараметрыРегистрации);
	Если Не ПараметрыНеобходимости.ДокументПоОснованиюТребуется Тогда
		Возврат;
	КонецЕсли;
	
	Если СчетФактураПолученный = Неопределено Тогда
		СчетФактураПолученныйОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
	Иначе
		СчетФактураПолученныйОбъект = СчетФактураПолученный.ПолучитьОбъект();
		СчетФактураПолученныйОбъект.ДокументыОснования.Очистить();
		СчетФактураПолученныйОбъект.Продавцы.Очистить();
	КонецЕсли;
	
	ДанныеЗаполненияСчетФактуры = Новый Структура;
	ДанныеЗаполненияСчетФактуры.Вставить("ДокументОснование", ПриобретениеТоваровУслугОбъект.Ссылка);
	ДанныеЗаполненияСчетФактуры.Вставить("Организация", ПараметрыРегистрации.Организация);
	ДанныеЗаполненияСчетФактуры.Вставить("Контрагент", ПараметрыРегистрации.Контрагент);
	ДанныеЗаполненияСчетФактуры.Вставить("Исправление", ПараметрыРегистрации.ИсправлениеОшибок);
	ДанныеЗаполненияСчетФактуры.Вставить("Корректировочный", ПараметрыРегистрации.КорректировкаПоСогласованиюСторон);
	
	СчетФактураПолученныйОбъект.ПометкаУдаления = Ложь;
	СчетФактураПолученныйОбъект.Дата = Дата;
	
	СчетФактураПолученныйОбъект.Заполнить(ДанныеЗаполненияСчетФактуры);

	Если ПриобретениеТоваровУслугОбъект.Проведен И ЗначениеЗаполнено(СчетФактураПолученныйОбъект.Номер) Тогда
		СчетФактураПолученныйОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		СчетФактураПолученныйОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСостояниеПодчиненныхДокументов()

	ПодчиненныеДокументы = Документы.битНакладнаяНаВыдачуФСМ.ПодчиненныеДокументы(Ссылка);
	
	Если ПометкаУдаления Тогда
		бг_РаботаСДокументами.ПометитьНаУдалениеПодчиненныйДокумент(ПодчиненныеДокументы, "СчетФактураПолученный");
		бг_РаботаСДокументами.ПометитьНаУдалениеПодчиненныйДокумент(ПодчиненныеДокументы, "ПриобретениеТоваровУслуг");
	Иначе
		бг_РаботаСДокументами.ОтменитьПроведениеПодчиненногоДокумента(ПодчиненныеДокументы, "СчетФактураПолученный");
		бг_РаботаСДокументами.ОтменитьПроведениеПодчиненногоДокумента(ПодчиненныеДокументы, "ПриобретениеТоваровУслуг");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // ПодчиненныеДокументы

Функция КлючевыеРеквизитыСерий()
	
	НастройкиИспользованияСерий = 
		Справочники.ВидыНоменклатуры.НастройкиИспользованияСерий(
			бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка"));
			
	ИспользуемыеРеквизитыСерий = Новый Соответствие;
	Для Каждого Описание Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
		Если Описание.Использование Тогда
			ИспользуемыеРеквизитыСерий.Вставить(Описание.ИмяРеквизита, Истина);
		КонецЕсли	
	КонецЦикла;	
	
	КлючевыеРеквизитыСерий = Новый Массив;
	
	// Номенклатура — всегда.
	КлючевыеРеквизитыСерий.Добавить(Метаданные.Справочники.СерииНоменклатуры.Реквизиты.бг_Номенклатура.Имя); 
	
	// Срок годности, когда настроено использование.
	ГоденДо = Метаданные.Справочники.СерииНоменклатуры.Реквизиты.ГоденДо.Имя;
	Если ИспользуемыеРеквизитыСерий[ГоденДо] = Истина Тогда
		КлючевыеРеквизитыСерий.Добавить(ГоденДо); 
	КонецЕсли;	
	
	// Реквизиты ФСМ, для которых настроено использование.
	Для Каждого РеквизитФСМ Из бг_СерииНоменклатуры.РеквизитыФСМ() Цикл
		Если ИспользуемыеРеквизитыСерий[РеквизитФСМ.Имя] = Истина Тогда
			КлючевыеРеквизитыСерий.Добавить(РеквизитФСМ.Имя); 
		КонецЕсли	
	КонецЦикла;	
	
	Возврат 
		Новый Структура(
			"Массивом,
			|Строкой",
			КлючевыеРеквизитыСерий,
			СтрСоединить(КлючевыеРеквизитыСерий, ", "));
	
КонецФункции

Функция НоменклатураЗаявления(ЗаявлениеОВыдачеФСМ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битЗаявлениеОВыдачеФСМТовары.Номенклатура.бг_ТипМарки КАК ТипМарки,
	|	битЗаявлениеОВыдачеФСМТовары.Номенклатура КАК Номенклатура,
	|	битЗаявлениеОВыдачеФСМТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Документ.битЗаявлениеОВыдачеФСМ.Товары КАК битЗаявлениеОВыдачеФСМТовары
	|ГДЕ
	|	битЗаявлениеОВыдачеФСМТовары.Ссылка = &ЗаявлениеОВыдачеФСМ";
	Запрос.УстановитьПараметр("ЗаявлениеОВыдачеФСМ", ЗаявлениеОВыдачеФСМ);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции	

Функция СуществующиеСерииНомеклатурыТоваров(ВидНоменклатуры, КлючевыеРеквизитыСерий)

	// Значения реквизитов, используемых для серий, в товарах документа
	ЗначенияРеквизитовСерий = Товары.Выгрузить();
	
	ЗначенияРеквизитовСерий.Колонки.Добавить("ГоденДо", Метаданные.Справочники.СерииНоменклатуры.Реквизиты.ГоденДо.Тип);
	ЗначенияРеквизитовСерий.ЗаполнитьЗначения(ГоденДоСерии(), "ГоденДо");
	
	бг_ЗаявлениеОВыдачеФСМ = Метаданные.Справочники.СерииНоменклатуры.Реквизиты.бг_ЗаявлениеОВыдачеФСМ;
	Если КлючевыеРеквизитыСерий.Массивом.Найти(бг_ЗаявлениеОВыдачеФСМ.Имя) <> Неопределено Тогда  
		ЗначенияРеквизитовСерий.Колонки.Добавить(бг_ЗаявлениеОВыдачеФСМ.Имя, бг_ЗаявлениеОВыдачеФСМ.Тип);
		ЗначенияРеквизитовСерий.ЗаполнитьЗначения(ЗаявлениеОВыдачеФСМ, бг_ЗаявлениеОВыдачеФСМ.Имя);
	КонецЕсли;	
	
	бг_НакладнаяНаВыдачуФСМ = Метаданные.Справочники.СерииНоменклатуры.Реквизиты.бг_НакладнаяНаВыдачуФСМ;
	Если КлючевыеРеквизитыСерий.Массивом.Найти(бг_НакладнаяНаВыдачуФСМ.Имя) <> Неопределено Тогда  
		ЗначенияРеквизитовСерий.Колонки.Добавить(бг_НакладнаяНаВыдачуФСМ.Имя, бг_НакладнаяНаВыдачуФСМ.Тип);
		ЗначенияРеквизитовСерий.ЗаполнитьЗначения(Ссылка, бг_НакладнаяНаВыдачуФСМ.Имя);
	КонецЕсли;	
	
	ЗначенияРеквизитовСерий.Колонки.Номенклатура.Имя = Метаданные.Справочники.СерииНоменклатуры.Реквизиты.бг_Номенклатура.Имя;
	
	ЗначенияРеквизитовСерий.Свернуть(КлючевыеРеквизитыСерий.Строкой);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ЗначенияРеквизитовСерий", ЗначенияРеквизитовСерий);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ПоляРеквизитовСерии,
		|	СерииНоменклатуры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|ГДЕ
		|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
		|	И СерииНоменклатуры.ПометкаУдаления = ЛОЖЬ
		|	И (&ПоляРеквизитовСерии) В (&ЗначенияРеквизитовСерий)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СерииНоменклатуры.ГоденДо";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, 
		"&ПоляРеквизитовСерии", 
		СтрСоединить(ОбщегоНазначения.ВыгрузитьКолонку(ЗначенияРеквизитовСерий.Колонки, "Имя"), ",")); // важен одинаковый порядок полей
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НоваяСерияНомеклатуры(ВидНоменклатуры, ТоварнаяПозиция, КлючевыеРеквизитыСерий, ДокументСсылка)
	
	ДанныеЗаполнения = ОжидаемыеСвойстваСерии(ВидНоменклатуры, ТоварнаяПозиция, КлючевыеРеквизитыСерий, ДокументСсылка);
		
	НоваяСерия = Справочники.СерииНоменклатуры.ПустойОбъект(ВидНоменклатуры);
	НоваяСерия.Заполнить(ДанныеЗаполнения);

	// Обработка заполнения серий переносит из данных заполнения вид номеклатуры и используемые реквизиты из настроек.
	// Поэтому устанавливаем номенклатуру, которая должна быть всегда, но в настройки не входит.
	НоваяСерия.бг_Номенклатура = ДанныеЗаполнения.бг_Номенклатура;
	НоваяСерия.бг_ОрганизацияВладелец = Организация;
	НоваяСерия.бг_ОрганизацияЕГАИСВладелец = ОрганизацияЕГАИС;
	
	НоваяСерия.Записать();
	
	Возврат НоваяСерия.Ссылка;
	
КонецФункции

Функция ОжидаемыеСвойстваСерии(ВидНоменклатуры, ТоварнаяПозиция, КлючевыеРеквизитыСерий, ДокументСсылка)
	
	ОжидаемыеСвойстваСерии = Новый Структура(КлючевыеРеквизитыСерий.Строкой);
	ЗаполнитьЗначенияСвойств(ОжидаемыеСвойстваСерии, ТоварнаяПозиция); 
	
	РеквизитыСерии = Метаданные.Справочники.СерииНоменклатуры.Реквизиты;
	ОжидаемыеСвойстваСерии.Вставить(РеквизитыСерии.бг_Номенклатура.Имя,         ТоварнаяПозиция.Номенклатура);
	ОжидаемыеСвойстваСерии.Вставить(РеквизитыСерии.ВидНоменклатуры.Имя,         ВидНоменклатуры);
	ОжидаемыеСвойстваСерии.Вставить(РеквизитыСерии.ГоденДо.Имя,                 ГоденДоСерии());  
	ОжидаемыеСвойстваСерии.Вставить(РеквизитыСерии.бг_ЗаявлениеОВыдачеФСМ.Имя,  ЗаявлениеОВыдачеФСМ);  
	ОжидаемыеСвойстваСерии.Вставить(РеквизитыСерии.бг_НакладнаяНаВыдачуФСМ.Имя, ДокументСсылка);  
	
	Возврат ОжидаемыеСвойстваСерии;
	
КонецФункции	
	
Функция ГоденДоСерии()
	Возврат ДобавитьМесяц(ДатаВходящегоДокумента, 9); // срок действия марок 9 месяцев с момента выдачи
КонецФункции

Процедура ОбработкаПроверкиЗаполненияСерий(Отказ)
	
	КлючевыеРеквизитыСерий = КлючевыеРеквизитыСерий();
	ФактическиеСвойстваСерий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Товары.ВыгрузитьКолонку("Серия"), КлючевыеРеквизитыСерий.Строкой); 
	
	ВидНоменклатуры = бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка");
	
	Для Каждого ТоварнаяПозиция Из Товары Цикл
		Если ЗначениеЗаполнено(ТоварнаяПозиция.Серия) Тогда 
			
			СвойстваСерииПлан = ОжидаемыеСвойстваСерии(ВидНоменклатуры, ТоварнаяПозиция, КлючевыеРеквизитыСерий, Ссылка);
		    СвойстваСерииФакт = ФактическиеСвойстваСерий[ТоварнаяПозиция.Серия];
			
			ОшибкиСерии = Новый Массив;
			Для Каждого Реквизит Из КлючевыеРеквизитыСерий.Массивом Цикл
				Если СвойстваСерииФакт[Реквизит] <> СвойстваСерииПлан[Реквизит] Тогда
					ОшибкиСерии.Добавить(
						Символы.Таб +
						СтрШаблон(
							НСтр(
								"ru = '%1 в серии %2, а в товарной позиции - %3'; 
								|en = '%1 в серии %2, а в товарной позиции - %3'"),
							Метаданные.Справочники.СерииНоменклатуры.Реквизиты[Реквизит].Синоним,
							СвойстваСерииФакт[Реквизит],
							СвойстваСерииПлан[Реквизит]));
				КонецЕсли	
			КонецЦикла;
			
			Если ОшибкиСерии.Количество() > 0 Тогда 
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр(
							"ru = 'В строке %1 реквизиты серии (%2) отличаются от ожидаемых:'; 
							|en = 'В строке %1 реквизиты серии (%2) отличаются от ожидаемых:'"),
						ТоварнаяПозиция.НомерСтроки,
						ТоварнаяПозиция.Серия)
						+ Символы.ПС
						+ СтрСоединить(ОшибкиСерии, Символы.ПС),
						Ссылка,,,
						Отказ);
			КонецЕсли;
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ОбщиеМеханизмы.АктуализацияСерийДокумента
Процедура АктуализироватьСерии()
	
	КлючевыеПоля = "Серия, Номенклатура, бг_СерияМарки, бг_НомерРулона,
	| бг_НомерДиапазонаВРулоне, бг_НачальныйНомерДиапазона, бг_КонечныйНомерДиапазона";
	
	СерииДокумента = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Товары,,
		КлючевыеПоля);
		
	СерииДокумента.Свернуть(КлючевыеПоля);
	
	СерииДокумента.Колонки.Добавить(
		"ЗаявлениеОВыдачеФСМ",
		Новый ОписаниеТипов("ДокументСсылка.битЗаявлениеОВыдачеФСМ"));
		
	СерииДокумента.Колонки.Добавить(
		"НакладнаяНаВыдачуФСМ",
		Новый ОписаниеТипов("ДокументСсылка.битНакладнаяНаВыдачуФСМ"));
	
	СерииДокумента.Колонки.Добавить(
		"ОрганизацияВладелец",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	СерииДокумента.Колонки.Добавить(
		"ОрганизацияЕГАИСВладелец",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
		
	СерииДокумента.ЗаполнитьЗначения(ЗаявлениеОВыдачеФСМ, "ЗаявлениеОВыдачеФСМ");
	СерииДокумента.ЗаполнитьЗначения(Ссылка, "НакладнаяНаВыдачуФСМ");
	СерииДокумента.ЗаполнитьЗначения(Организация, "ОрганизацияВладелец");
	СерииДокумента.ЗаполнитьЗначения(ОрганизацияЕГАИС, "ОрганизацияЕГАИСВладелец");
	
	СерииКАктуализации = СерииКАктуализации(СерииДокумента);
	
	Для Каждого ДанныеСерииКАктуализации Из СерииКАктуализации Цикл
		АктуализироватьСерию(ДанныеСерииКАктуализации);
	КонецЦикла;
	
КонецПроцедуры

Функция СерииКАктуализации(СерииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	СерииДокумента.ОрганизацияВладелец КАК ОрганизацияВладелец,
	|	СерииДокумента.ОрганизацияЕГАИСВладелец КАК ОрганизацияЕГАИСВладелец,
	|	СерииДокумента.бг_СерияМарки КАК бг_СерияМарки,
	|	СерииДокумента.бг_НомерРулона КАК бг_НомерРулона,
	|	СерииДокумента.бг_НомерДиапазонаВРулоне КАК бг_НомерДиапазонаВРулоне,
	|	СерииДокумента.бг_НачальныйНомерДиапазона КАК бг_НачальныйНомерДиапазона,
	|	СерииДокумента.бг_КонечныйНомерДиапазона КАК бг_КонечныйНомерДиапазона
	|ПОМЕСТИТЬ СерииДокумента
	|ИЗ
	|	&СерииДокумента КАК СерииДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК бг_Номенклатура,
	|	СерииДокумента.ОрганизацияВладелец КАК бг_ОрганизацияВладелец,
	|	СерииДокумента.ОрганизацияЕГАИСВладелец КАК бг_ОрганизацияЕГАИСВладелец,
	|	СерииДокумента.бг_СерияМарки КАК бг_СерияМарки,
	|	СерииДокумента.бг_НомерРулона КАК бг_НомерРулона,
	|	СерииДокумента.бг_НомерДиапазонаВРулоне КАК бг_НомерДиапазонаВРулоне,
	|	СерииДокумента.бг_НачальныйНомерДиапазона КАК бг_НачальныйНомерДиапазона,
	|	СерииДокумента.бг_КонечныйНомерДиапазона КАК бг_КонечныйНомерДиапазона
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииДокумента КАК СерииДокумента
	|		ПО (СерииДокумента.Серия = СправочникСерииНоменклатуры.Ссылка)
	|ГДЕ
	|	(СерииДокумента.Номенклатура <> СправочникСерииНоменклатуры.бг_Номенклатура
	|			ИЛИ СерииДокумента.ОрганизацияВладелец <> СправочникСерииНоменклатуры.бг_ОрганизацияВладелец
	|			ИЛИ СерииДокумента.ОрганизацияЕГАИСВладелец <> СправочникСерииНоменклатуры.бг_ОрганизацияЕГАИСВладелец
	|			ИЛИ СерииДокумента.бг_СерияМарки <> СправочникСерииНоменклатуры.бг_СерияМарки
	|			ИЛИ СерииДокумента.бг_НомерРулона <> СправочникСерииНоменклатуры.бг_НомерРулона
	|			ИЛИ СерииДокумента.бг_НомерДиапазонаВРулоне <> СправочникСерииНоменклатуры.бг_НомерДиапазонаВРулоне
	|			ИЛИ СерииДокумента.бг_НачальныйНомерДиапазона <> СправочникСерииНоменклатуры.бг_НачальныйНомерДиапазона
	|			ИЛИ СерииДокумента.бг_КонечныйНомерДиапазона <> СправочникСерииНоменклатуры.бг_КонечныйНомерДиапазона)";
	
	Запрос.УстановитьПараметр("СерииДокумента", СерииДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура АктуализироватьСерию(ДанныеСерииКАктуализации)
	
	СерияОбъект = ДанныеСерииКАктуализации.Серия.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(СерияОбъект, ДанныеСерииКАктуализации);
	СерияОбъект.Записать();
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.АктуализацияСерийДокумента

#КонецОбласти // СлужебныеПроцедурыИФункции

#КонецЕсли
