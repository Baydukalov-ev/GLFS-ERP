#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды.
	
	УстановитьВидимостьДоступностьЭлементов();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьДанныеПодвала(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АкцизыПриИзменении(Элемент)
	ОбновитьДанныеПодвала();
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПриИзменении(Элемент)
	УстановитьВидимостьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьАвансыКОплате(Команда)
	ЗаполнитьАвансыКОплатеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВычетыПоАвансам(Команда)
	ЗаполнитьВычетыПоАвансамНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	РасчетВычетовПоАвансам = (Объект.ХозяйственнаяОперация = Перечисления.бг_ОперацииРасчетаАвансовПоАкцизам.РасчетВозмещенияАвансов);
	
	Элементы.АкцизыЗаполнитьВычетыПоАвансам.Видимость = РасчетВычетовПоАвансам;
	Элементы.АкцизыЗаполнитьАвансыКОплате.Видимость = Не РасчетВычетовПоАвансам;
	Элементы.КорректируемыйПериод.Видимость = Объект.Корректировка;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвансыКОплатеНаСервере()
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	Конецесли;
	
	ДатаРасчета = КонецДня(?(Объект.Корректировка, Объект.КорректируемыйПериод, Объект.Дата));
	АвансыКОплате = Документы.битРасчетАвансовПоАкцизам.АвансыКОплате(Объект.Организация,
																	ДатаРасчета, Объект.Ссылка);
	Объект.Акцизы.Загрузить(АвансыКОплате);

	ОбновитьДанныеПодвала();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВычетыПоАвансамНаСервере()
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	Конецесли;
	
	ДатаРасчета = КонецДня(?(Объект.Корректировка, Объект.КорректируемыйПериод, Объект.Дата));
	ВычетыПоАвансам = Документы.битРасчетАвансовПоАкцизам.ВычетыПоАвансам(Объект.Организация,
																	ДатаРасчета, Объект.Ссылка);
	Объект.Акцизы.Очистить();
	ПериодыСписанияИмпортногоСырья = ПериодыСписанияИмпортногоСырья(ВычетыПоАвансам);
	
	Для Каждого СтрокаВычет Из ВычетыПоАвансам Цикл
		Если СтрокаВычет.СтатусАкциза = Перечисления.бг_СостоянияОплатыВходящегоАкциза.АкцизПоОплаченнымМЦ Тогда
			ДополнитьВычетамиПоИмпортномуСырью(СтрокаВычет, ПериодыСписанияИмпортногоСырья);
		Иначе
			НоваяСтрокаАкцизы = Объект.Акцизы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАкцизы, СтрокаВычет);
			
			НоваяСтрокаАкцизы.ПериодНачисленияАванса = ?(ЗначениеЗаполнено(НоваяСтрокаАкцизы.ПериодНачисленияАванса),
												НоваяСтрокаАкцизы.ПериодНачисленияАванса, КонецМесяца(Объект.Дата));
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеПодвала();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПодвала(ЗаполнитьСуммуДокумента = Истина)

	Если ЗаполнитьСуммуДокумента = Истина Тогда
		ЗаполнитьСуммуДокумента();
	КонецЕсли;
	
	ИтоговыеПоказатели = "Количество, СуммаАкциза";
	ОтборПродажаНаЭкспорт = Новый Структура("ПродажаНаЭкспорт", Истина);
	ТаблицаПродажаНаЭкспорт = Объект.Акцизы.Выгрузить(ОтборПродажаНаЭкспорт, ИтоговыеПоказатели);
	
	Количество = Объект.Акцизы.Итог("Количество");
	КоличествоЭкспорт = ТаблицаПродажаНаЭкспорт.Итог("Количество");
	СуммаЭкспорт = ТаблицаПродажаНаЭкспорт.Итог("СуммаАкциза");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуДокумента()
	Объект.СуммаДокумента = Документы.битРасчетАвансовПоАкцизам.ПолучитьСуммуДокумента(Объект);
КонецПроцедуры

&НаСервере
Функция ПериодыСписанияИмпортногоСырья(ВычетыПоАвансам)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Вычеты.Сделка КАК Сделка,
	|	Вычеты.СтатусАкциза КАК СтатусАкциза,
	|	Вычеты.Номенклатура КАК Номенклатура,
	|	Вычеты.СерияНоменклатуры КАК СерияНоменклатуры,
	|	Вычеты.СерияПродукции КАК СерияПродукции
	|ПОМЕСТИТЬ Вычеты
	|ИЗ
	|	&Вычеты КАК Вычеты
	|ГДЕ
	|	Вычеты.СтатусАкциза = ЗНАЧЕНИЕ(Перечисление.бг_СостоянияОплатыВходящегоАкциза.АкцизПоОплаченнымМЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизПоПриобретеннымОбороты.Регистратор КАК Регистратор,
	|	АкцизПоПриобретеннымОбороты.Сделка КАК Сделка,
	|	АкцизПоПриобретеннымОбороты.Номенклатура КАК Номенклатура,
	|	АкцизПоПриобретеннымОбороты.СерияНоменклатуры КАК СерияНоменклатуры,
	|	АкцизПоПриобретеннымОбороты.СостояниеОплатыАванса КАК СостояниеОплатыАванса,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(АкцизПоПриобретеннымОбороты.Регистратор) = ТИП(Документ.битРасчетАвансовПоАкцизам)
	|			ТОГДА -АкцизПоПриобретеннымОбороты.КоличествоПриход
	|		ИНАЧЕ АкцизПоПриобретеннымОбороты.КоличествоПриход
	|	КОНЕЦ КАК Количество,
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(АкцизПоПриобретеннымОбороты.ПериодМесяц, МЕСЯЦ), ДЕНЬ) КАК Период
	|ПОМЕСТИТЬ РасходИмпортногоСырьяПоПериодам
	|ИЗ
	|	РегистрНакопления.бг_АкцизПоПриобретеннымЦенностям.Обороты(
	|			,
	|			,
	|			Авто,
	|			Организация = &Организация
	|				И (Сделка, Номенклатура, СерияНоменклатуры, СерияПродукции) В
	|					(ВЫБРАТЬ
	|						Вычеты.Сделка КАК Сделка,
	|						Вычеты.Номенклатура КАК Номенклатура,
	|						Вычеты.СерияНоменклатуры КАК СерияНоменклатуры,
	|						Вычеты.СерияПродукции КАК СерияПродукции
	|					ИЗ
	|						Вычеты КАК Вычеты)
	|				И СостояниеСырья В (ЗНАЧЕНИЕ(Перечисление.бг_СостоянияПодакцизногоСырья.ВГотовойПродукции),
	|									ЗНАЧЕНИЕ(Перечисление.бг_СостоянияПодакцизногоСырья.ВСписанныхМПЗПоНорме))) КАК АкцизПоПриобретеннымОбороты
	|ГДЕ
	|	АкцизПоПриобретеннымОбороты.Регистратор <> &Ссылка
	|	И ТИПЗНАЧЕНИЯ(АкцизПоПриобретеннымОбороты.Регистратор) В (
	|									ТИП(Документ.ВнутреннееПотреблениеТоваров),
	|									ТИП(Документ.ЭтапПроизводства2_2),
	|									ТИП(Документ.битРасчетАвансовПоАкцизам))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходИмпортногоСырьяПоПериодам.Сделка КАК Сделка,
	|	РасходИмпортногоСырьяПоПериодам.Номенклатура КАК Номенклатура,
	|	РасходИмпортногоСырьяПоПериодам.СерияНоменклатуры КАК СерияНоменклатуры,
	|	СУММА(РасходИмпортногоСырьяПоПериодам.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходИмпортногоСырьяПоПериодам.Регистратор) = ТИП(Документ.битРасчетАвансовПоАкцизам)
	|			ТОГДА РасходИмпортногоСырьяПоПериодам.СостояниеОплатыАванса.Период
	|		ИНАЧЕ РасходИмпортногоСырьяПоПериодам.Период
	|	КОНЕЦ КАК Период
	|ИЗ
	|	РасходИмпортногоСырьяПоПериодам КАК РасходИмпортногоСырьяПоПериодам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходИмпортногоСырьяПоПериодам.Сделка,
	|	РасходИмпортногоСырьяПоПериодам.Номенклатура,
	|	РасходИмпортногоСырьяПоПериодам.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(РасходИмпортногоСырьяПоПериодам.Регистратор) = ТИП(Документ.битРасчетАвансовПоАкцизам)
	|			ТОГДА РасходИмпортногоСырьяПоПериодам.СостояниеОплатыАванса.Период
	|		ИНАЧЕ РасходИмпортногоСырьяПоПериодам.Период
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасходИмпортногоСырьяПоПериодам.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Запрос.УстановитьПараметр("Вычеты", ВычетыПоАвансам);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
КонецФункции

&НаСервере
Процедура ДополнитьВычетамиПоИмпортномуСырью(ДанныеВычет, ПериодыСписанияИмпортногоСырья)
	Отбор = Новый Структура("Сделка, Номенклатура, СерияНоменклатуры");
	ЗаполнитьЗначенияСвойств(Отбор, ДанныеВычет);
	
	СтрокиПериодыСписания = ПериодыСписанияИмпортногоСырья.НайтиСтроки(Отбор);
	
	КоличествоРаспределить = ДанныеВычет.Количество;
	Для Каждого СтрокаПериодСписания Из СтрокиПериодыСписания Цикл
		Если СтрокаПериодСписания.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоРаспределено = ?(КоличествоРаспределить > СтрокаПериодСписания.Количество, СтрокаПериодСписания.Количество, КоличествоРаспределить);
		
		НоваяСтрокаАкциз = Объект.Акцизы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаАкциз, ДанныеВычет);
		НоваяСтрокаАкциз.ПериодНачисленияАванса = СтрокаПериодСписания.Период;
		НоваяСтрокаАкциз.Количество = КоличествоРаспределено;
		НоваяСтрокаАкциз.СуммаАкциза = НоваяСтрокаАкциз.Количество * НоваяСтрокаАкциз.НалоговаяСтавка * 10;
		
		СтрокаПериодСписания.Количество = СтрокаПериодСписания.Количество - КоличествоРаспределено;
		КоличествоРаспределить = КоличествоРаспределить - КоличествоРаспределено;
		
		Если КоличествоРаспределить = 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоРаспределить > 0 Тогда
		НоваяСтрокаАкциз = Объект.Акцизы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаАкциз, ДанныеВычет);
		НоваяСтрокаАкциз.Количество = КоличествоРаспределено;
		НоваяСтрокаАкциз.СуммаАкциза = НоваяСтрокаАкциз.Количество * НоваяСтрокаАкциз.НалоговаяСтавка * 10;
		НоваяСтрокаАкциз.ПериодНачисленияАванса = КонецМесяца(Объект.Дата);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
