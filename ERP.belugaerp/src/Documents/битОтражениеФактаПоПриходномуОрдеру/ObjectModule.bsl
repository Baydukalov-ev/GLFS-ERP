
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает таблицу, содержащую идентификаторы марок, их ГУИДы и товары.
// 
// Возвращаемое значение:
//   ТаблицаЗначений
//   Состав полей таблицы см. в бг_МаркируемаяПродукция.НовыйДанныеМарокПоШтрихкодам()
//
Функция ТоварыПоШтрихкодам(Отказ) Экспорт
	
	Если РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ПолноеСоответствиеПлану Тогда
		
		Если Не (ДополнительныеСвойства.Свойство("ТТНВходящаяЕГАИС")
			И ЗначениеЗаполнено(ДополнительныеСвойства.ТТНВходящаяЕГАИС)) Тогда
			
			ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Ссылка);
			Если ДанныеТТНВходящей <> Неопределено Тогда
				ТТНВходящаяЕГАИС = ДанныеТТНВходящей.Документ;
			КонецЕсли;
			
		Иначе
			ТТНВходящаяЕГАИС = ДополнительныеСвойства.ТТНВходящаяЕГАИС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
			ТоварыПоШтрихкодам = ТоварыПоШтрихкодамПоТТНВходящейЕГАИС(ТТНВходящаяЕГАИС, Отказ);
		Иначе
			ТоварыПоШтрихкодам = бг_МаркируемаяПродукция.НовыйДанныеМарокПоШтрихкодам();
		КонецЕсли;
		
	ИначеЕсли РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана Тогда
		
		СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);
		
		ДатаПолученияШтрихкодов = бг_МаркируемаяПродукция.ДатаПолученияШтрихкодов(ЭтотОбъект);
		
		ТоварыПоШтрихкодам = бг_МаркируемаяПродукция.ДанныеМарокПоШтрихкодам(
			Марки.Выгрузить().ВыгрузитьКолонку("Штрихкод"),
			Документы.битОтражениеФактаПоПриходномуОрдеру.ОрганизацияЕГАИСДокумента(Ссылка),
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтатусыМарокПоОперации.СтатусОприходоватьНаСкладе),
			ДатаПолученияШтрихкодов);
			
	Иначе		
		// NOP
	КонецЕсли;

	Возврат ТоварыПоШтрихкодам;	
		
КонецФункции

// Фиксирует реквизиты, измененные в объекте.
//
Процедура ЗафиксироватьИзмененияПередЗаписью() Экспорт
	
	Если ДополнительныеСвойства.Свойство("ИзмененныеРеквизиты") Тогда
		// Фиксация изменений уже выполнялась.
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить(
		"ИзмененныеРеквизиты",
		бг_ОбщегоНазначенияСервер.ИзмененияОбъекта(
			ЭтотОбъект,
			Новый Структура("ПриходныйОрдерНаТовары, ОператорТСД, СтатусSolvo"),
			Новый Структура("Марки, Упаковки, Товары, Штрихкоды")));
		
КонецПроцедуры

// Фиксирует реквизиты, измененные в объекте.
//
// Возвращаемое значение:
//  Булево
Функция ВДокументВнесеныВажныеИзменения() Экспорт
	
	Возврат ДополнительныеСвойства.Свойство("ИзмененныеРеквизиты")
		И (ДополнительныеСвойства.ИзмененныеРеквизиты.Свойство("Реквизиты")
			Или ДополнительныеСвойства.ИзмененныеРеквизиты.Свойство("ТабличныеЧасти"));
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваИзОрдера(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьЗаполнениеБазовыхРеквизитов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бг_WMS.ОбработатьВходящиеТовары(Товары);
	ИнициализироватьДополнительныеСвойства(РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ДополнительныеСвойства.ОтражатьДокументВУчете Тогда
			
			ПроверитьДанныеПередОтражениемВУчете(Отказ);
			ПроверитьИдентификаторыТоваров(Отказ);
		
			Если ЕстьАлкогольнаяПродукция Тогда
				
				Если ТТНДоверительная() Тогда
					бг_WMS.СообщитьПользователю(
						НСтр("ru='Нельзя вводить документ, если ТТН входящая оформлена с доверительной приемкой.'"),
						Ссылка,
						Отказ);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		
			Если Не Отказ Тогда
		
				Если ЕстьМаркируемаяАлкогольнаяПродукция Тогда
					ПодготовитьТоварыПоШтрихкодам(Отказ);
					ПроверитьСоответствиеТоваровПоШтрихкодам(Отказ);
				КонецЕсли;
			
				ПроверитьСоответствиеПлановыхТоваров(Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ДополнительныеСвойства.ОтражатьДокументВУчете Тогда
			
			Если РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ПолноеСоответствиеПлану Тогда
				
				Если НужноИзменитьПриходныйОрдер() Тогда
					ИзменитьПриходныйОрдер(Отказ);
				КонецЕсли;
				
				Если ЕстьАлкогольнаяПродукция И НужноИзменитьТТНВходящую(Истина) Тогда
					ИзменитьТТНВходящую(Истина, Отказ);
				КонецЕсли;
				
			ИначеЕсли ПриемкаОтменена() Тогда
				
				Если НужноИзменитьПриходныйОрдер() Тогда
					ИзменитьПриходныйОрдер(Отказ);
				КонецЕсли;
				
			ИначеЕсли РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана Тогда
				
				Если НужноИзменитьПриходныйОрдер() Тогда
					ИзменитьПриходныйОрдер(Отказ);
				КонецЕсли;
				
				Если ЕстьАлкогольнаяПродукция И НужноИзменитьТТНВходящую(Истина) Тогда
					ИзменитьТТНВходящую(Истина, Отказ);
				КонецЕсли;

			Иначе
				
				бг_WMS.СообщитьПользователю(НСтр("ru='Неизвестный результат приемки.'"), Ссылка, Отказ);

			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		
		СтатусыОбработкиДокумента = Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами;
		
		Если ДополнительныеСвойства.ЭтоSolvo Тогда
			
			СтатусSolvoУказаниеТоваровИМарок = Документы.битОтражениеФактаПоПриходномуОрдеру.СтатусSolvoУказаниеТоваровИМарок(
				ЕстьМаркируемаяАлкогольнаяПродукция);
			
			Если СтатусSolvo <> СтатусSolvoУказаниеТоваровИМарок Тогда
				СтатусОбработкиДокумента = СтатусыОбработкиДокумента.ЗагруженИОбработан;
			Иначе
				СтатусОбработкиДокумента = СтатусыОбработкиДокумента.ЗагруженБезОбработки;
			КонецЕсли;
		Иначе
			СтатусОбработкиДокумента = СтатусыОбработкиДокумента.ЗагруженБезОбработки;
		КонецЕсли;
			
		бг_WMS.ОбновитьСтатусДокумента(
			Ссылка,
			СтатусОбработкиДокумента,
			ДополнительныеСвойства,
			Отказ);
			
	КонецЕсли;
	
	Если ЕстьАлкогольнаяПродукция Тогда
		АктуализироватьРасширенныйСтатусТТНВходящей(Отказ);
	КонецЕсли;
		
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.бг_ДвижениеМарок.Записывать = Истина;
	Движения.бг_СоставУпаковок.Записывать = Истина;
	
	Если Не ДополнительныеСвойства.ОтражатьДокументВУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьМаркируемаяАлкогольнаяПродукция И Не ПриемкаОтменена() Тогда
		СформироватьДвиженияПоМаркам();
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДатаОкончанияОбработки", ТекущаяДатаСеанса());
	
	бг_WMS.ОбновитьСтатусДокумента(
		Ссылка,
		Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженИОбработан,
		ДополнительныеСвойства,
		Отказ);
		
	Если Не ДополнительныеСвойства.ЭтоSolvo Тогда
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Ссылка,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.РассчитатьПоказателиРаботыОператоровWMS);
	КонецЕсли;
	
КонецПроцедуры

&После("ОбработкаУдаленияПроведения")
Процедура бг_ОбработкаУдаленияПроведения(Отказ)
	
	Если ЕстьАлкогольнаяПродукция Тогда
		
		Если ТТНВКонечномСтатусе() Тогда
			
			// После подтверждения ТТН входящей она формирует движения с новым статусом "на балансе", старые движения
			// "к оприходованию" затираются, поэтому факт приемки корректно не сможет быть проведен.
			бг_WMS.СообщитьПользователю(
				НСтр("ru='Нельзя распроводить документ, если ТТН входящая подтверждена.'"),
				Ссылка,
				Отказ);
			Возврат;
		КонецЕсли;
		
		АктуализироватьТТНВходящуюПриУдаленииПроведения(Отказ);
		
	КонецЕсли;
	
	бг_WMS.ОбновитьСтатусДокумента(
		Ссылка,
		Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженБезОбработки,
		ДополнительныеСвойства,
		Отказ);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеБазовыхРеквизитов(Отказ)

	Если Не ЗначениеЗаполнено(ТипВнешнейСкладскойСистемы) Тогда
		бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнен тип внешней складской системы для склада.'"), Ссылка, Отказ);
	КонецЕсли;
	
	Если ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo Тогда
		
		Если Не ЗначениеЗаполнено(СтатусSolvo) Тогда
			бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнен статус Solvo.'"), Ссылка, Отказ);
		КонецЕсли;    
		
		КонечныеСтатусыSolvo = Документы.битОтражениеФактаПоПриходномуОрдеру.КонечныеСтатусыSolvo(
			ЕстьМаркируемаяАлкогольнаяПродукция);
		
		Если КонечныеСтатусыSolvo.Найти(СтатусSolvo) <> Неопределено И Не ЗначениеЗаполнено(РезультатПриемки) Тогда
			бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнен результат приемки.'"), Ссылка, Отказ);
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(РезультатПриемки) Тогда
			бг_WMS.СообщитьПользователю(НСтр("ru='Не заполнен результат приемки.'"), Ссылка, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваИзОрдера(Отказ)
	
	Если Не (ЗначениеЗаполнено(ПриходныйОрдерНаТовары) И ОбщегоНазначения.СсылкаСуществует(ПриходныйОрдерНаТовары)) Тогда
		бг_WMS.СообщитьПользователю(НСтр("ru='Документ должен быть связан с ордером'"), Ссылка, Отказ);
	КонецЕсли;
	
	ДанныеОрдераWMS = Документы.ПриходныйОрдерНаТовары.бг_ДанныеОрдераWMS(ПриходныйОрдерНаТовары);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОрдераWMS);
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеСвойства(РежимЗаписи)
	
#Область СвойстваЗаписьПроведение
	
	// РежимЗаписи
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ЕстьАлкогольнаяПродукция Тогда
		
		// ТТНВходящаяЕГАИС, ТекущийСтатусТТН, ДоверительнаяПриемкаТТН
		Если ЭтоНовый() Тогда
			ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(ПриходныйОрдерНаТовары);
		Иначе
			ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Ссылка);
		КонецЕсли;
		
		Если ДанныеТТНВходящей <> Неопределено Тогда
			ДополнительныеСвойства.Вставить("ТТНВходящаяЕГАИС", ДанныеТТНВходящей.Документ);
			ДополнительныеСвойства.Вставить("ДоверительнаяПриемкаТТН", ДанныеТТНВходящей.ДоверительнаяПриемка);
			ДополнительныеСвойства.Вставить("ТекущийСтатусТТН", ДанныеТТНВходящей.ТекущийСтатус);
		КонецЕсли;
		
	КонецЕсли;
	
	// ЭтоSolvo
	ЭтоSolvo = ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo;
	ДополнительныеСвойства.Вставить("ЭтоSolvo", ЭтоSolvo);
	
	Если ЭтоSolvo Тогда
		
		// ЭтоКонечныйСтатусSolvo
		КонечныеСтатусыSolvo = Документы.битОтражениеФактаПоПриходномуОрдеру.КонечныеСтатусыSolvo(ЕстьМаркируемаяАлкогольнаяПродукция);
		ЭтоКонечныйСтатусSolvo = КонечныеСтатусыSolvo.Найти(СтатусSolvo) <> Неопределено;
		
		ДополнительныеСвойства.Вставить("ЭтоКонечныйСтатусSolvo", ЭтоКонечныйСтатусSolvo);
		
	КонецЕсли;
	
#КонецОбласти // Конец СвойстваЗаписьПроведение
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
#Область СвойстваПроведение
	
	// ДатаНачалаОбработки
	ДополнительныеСвойства.Вставить("ДатаНачалаОбработки", ТекущаяДатаСеанса());
	
	// ТоварыПринятые
	ТоварыПринятые = Неопределено;
	
	Если РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана Тогда
		// В случае, если есть расхождения, в ордере должны храниться только те товары, которые фактически пришли из WMS.
		ТоварыПринятые = Товары.Выгрузить();
	ИначеЕсли РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ПолноеСоответствиеПлану Тогда
		// Если расхождений нет - только товары распоряжения.
		ТоварыПринятые = ТоварыПринятыеПоРаспоряжению();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТоварыПринятые) Тогда
		ТоварыПринятые.Свернуть("Номенклатура, Серия", "Количество");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТоварыПринятые", ТоварыПринятые);
	
	// ОтражатьДокументВУчете
	ДополнительныеСвойства.Вставить("ОтражатьДокументВУчете", ОтражатьДокументВУчете());
	
#КонецОбласти // Конец СвойстваПроведение
	
КонецПроцедуры

Функция ОтражатьДокументВУчете()

	ЭтоПроведение = ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДополнительныеСвойства.ЭтоSolvo Тогда
		Возврат ЭтоПроведение И ДополнительныеСвойства.ЭтоКонечныйСтатусSolvo;
	Иначе
		Возврат ЭтоПроведение;
	КонецЕсли;

КонецФункции

Процедура ПроверитьДанныеПередОтражениемВУчете(Отказ)

	Если ЕстьАлкогольнаяПродукция И Не ЗначениеЗаполнено(ДополнительныеСвойства.ТТНВходящаяЕГАИС) Тогда
		бг_WMS.СообщитьПользователю(НСтр("ru='Не найдена ТТН входящая.'"), Ссылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПриемкаОтменена()
	
	Возврат РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ПриемкаОтменена;
		
КонецФункции

#Область РаботаСТоварамиШтрихкодами

Процедура ПодготовитьТоварыПоШтрихкодам(Отказ)
	
	Если Отказ Или ПриемкаОтменена() Или Не ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТоварыПоШтрихкодам", ТоварыПоШтрихкодам(Отказ));	

КонецПроцедуры

Процедура ПроверитьСоответствиеТоваровПоШтрихкодам(Отказ)
	
	Если Отказ Или ПриемкаОтменена() Или Не ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ТоварыПоШтрихкодамСовпадают(
		ДополнительныеСвойства.ТоварыПоШтрихкодам,
		Ложь);
	
	Если Не РезультатПроверки.ТаблицыСовпадают Тогда
			
		бг_WMS.СообщитьПользователю(
			бг_МаркируемаяПродукция.ТекстОшибкиРасхожденийТоваровПоМаркамИВДокументе(),
			Ссылка,
			Отказ);
			
		Для каждого ТекстОшибки Из РезультатПроверки.Ошибки Цикл
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСоответствиеПлановыхТоваров(Отказ)

	Если Отказ Или РезультатПриемки <> Перечисления.бг_РезультатыПриемкиWMS.ПолноеСоответствиеПлану Тогда
		Возврат;
	КонецЕсли;
	
	// Сравнивается таблица товаров, полученная из ордера по данным ERP, с таблицей товаров, полученной из внешней системы.
	КлючевыеПоляТоваров = "Номенклатура, Серия";
	ВсеПоляТоваров = "Номенклатура, Серия, Количество";
	
	ТоварыОрдера = ДополнительныеСвойства.ТоварыПринятые.Скопировать();
	ТоварыОрдера.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	ТоварыИзВнешнейСистемы = Товары.Выгрузить(, ВсеПоляТоваров);
	ТоварыИзВнешнейСистемы.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	РезультатПроверки = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ТоварыОрдера,
		ТоварыИзВнешнейСистемы,
		Истина,
		Истина);
	
	Если Не РезультатПроверки.ТаблицыСовпадают Тогда
			
		бг_WMS.СообщитьПользователю(
			НСтр("ru='Товары по плану приемки не совпадают с данными товаров из внешней системы.'"),
			Ссылка,
			Отказ);
			
		Для каждого ТекстОшибки Из РезультатПроверки.Ошибки Цикл
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка);	
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ТоварыПоШтрихкодамСовпадают(ТоварыПоШтрихкодам, ФиксироватьОшибки)

	// Сравнивается таблица товаров, полученная из движений марок по данным ERP, с таблицей товаров, полученной из внешней системы.
	КлючевыеПоляТоваров = "Номенклатура, Серия";
	ВсеПоляТоваров = "Номенклатура, Серия, Количество";
	
	// Подготовливаем ТоварыПоШтрихкодам к сравнению.
	ТоварыПоШтрихкодамСгруппированные = ТоварыПоШтрихкодам.Скопировать(, КлючевыеПоляТоваров);
	
	ТоварыПоШтрихкодамСгруппированные.Колонки.Добавить(
		"Количество",
		Метаданные.Документы.битОтражениеФактаПоПриходномуОрдеру.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип);
		
	ТоварыПоШтрихкодамСгруппированные.ЗаполнитьЗначения(1, "Количество");
	ТоварыПоШтрихкодамСгруппированные.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	// Подготовливаем товары из внешней системы к сравнению.
	ТоварыИзВнешнейСистемы = Товары.Выгрузить(, ВсеПоляТоваров);
	ТоварыИзВнешнейСистемы.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	// Сравниваем таблицы.
	Возврат бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ТоварыПоШтрихкодамСгруппированные,
		ТоварыИзВнешнейСистемы,
		Истина,
		Истина);
		
КонецФункции

Функция ТоварыПоШтрихкодамПоТТНВходящейЕГАИС(ТТНВходящаяЕГАИС, Отказ)
		
	ТоварыПоШтрихкодам = бг_МаркируемаяПродукция.НовыйДанныеМарокПоШтрихкодам();
	ТоварыПоШтрихкодам.Колонки.Удалить("СтатусМарки");
	
	ДанныеПринимаемыхШтрихкодовПлан = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовПлан(ТТНВходящаяЕГАИС, Отказ);
	
	МаркиСерии = ДанныеПринимаемыхШтрихкодовПлан.Марки.Скопировать(, "Серия");
	МаркиСерии.Свернуть("Серия");
	Серии = МаркиСерии.ВыгрузитьКолонку("Серия");
	НоменклатураСерий = НоменклатураСерий(Серии);
	НоменклатураСерий.Индексы.Добавить("Серия");	
		
	Для каждого СтрокаМарки Из ДанныеПринимаемыхШтрихкодовПлан.Марки Цикл
	
		НоваяСтрокаТоварыПоШтрихкодам = ТоварыПоШтрихкодам.Добавить();
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаТоварыПоШтрихкодам,
			СтрокаМарки,
			"Серия, ГУИДМарки, Организация");
			
		НоваяСтрокаТоварыПоШтрихкодам.Штрихкод = СтрокаМарки.ИдентификаторМарки;
		НоваяСтрокаТоварыПоШтрихкодам.ШтрихкодРодитель = СтрокаМарки.КодУпаковки;
		
		НайденныеСтрокиНоменклатураСерий = НоменклатураСерий.НайтиСтроки(Новый Структура("Серия", СтрокаМарки.Серия));
		Если НайденныеСтрокиНоменклатураСерий.Количество() > 0 Тогда
			НоваяСтрокаТоварыПоШтрихкодам.Номенклатура = НайденныеСтрокиНоменклатураСерий[0].Номенклатура;
		Иначе
			бг_WMS.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Не заполнена номенклатура в серии ""%1""'"), СтрокаМарки.Серия),
				Ссылка,
				Отказ);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТоварыПоШтрихкодам;
	
КонецФункции

Функция НоменклатураСерий(Серии)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.бг_Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка В(&Серии)
	|	И СерииНоменклатуры.бг_Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Серии", Серии);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти // Конец РаботаСТоварамиШтрихкодами

#Область ЗаполнениеПриходногоОрдера

Функция ТоварыПринятыеПоРаспоряжению()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Серия КАК Серия,
	|	СУММА(ПриобретениеТоваровУслугТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Серия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
	|	ВозвратТоваровОтКлиентаТовары.Серия,
	|	СУММА(ВозвратТоваровОтКлиентаТовары.Количество)
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|ГДЕ
	|	ВозвратТоваровОтКлиентаТовары.Ссылка = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
	|	ВозвратТоваровОтКлиентаТовары.Серия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПересортицаТоваровТовары.НоменклатураОприходование,
	|	ПересортицаТоваровТовары.СерияОприходование,
	|	СУММА(ПересортицаТоваровТовары.Количество)
	|ИЗ
	|	Документ.ПересортицаТоваров.Товары КАК ПересортицаТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ПересортицаТоваровТовары.Ссылка.бг_Основание = ТТНВходящаяЕГАИС.Ссылка
	|			И (ТТНВходящаяЕГАИС.ДокументОснование = &Распоряжение)
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ДокументОснование = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПересортицаТоваровТовары.СерияОприходование,
	|	ПересортицаТоваровТовары.НоменклатураОприходование";
	
	Запрос.УстановитьПараметр(
		"Распоряжение",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПриходныйОрдерНаТовары, "Распоряжение"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПроверитьИдентификаторыТоваров(Отказ)
	
	Если ПриемкаОтменена() Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеПоля = "Номенклатура, Серия";
	ПроверяемыеТовары = Товары.Выгрузить(, КлючевыеПоля);
	ПроверяемыеТовары.Свернуть(КлючевыеПоля);
	
	Если бг_Номенклатура.ЕстьБитыеСсылкиВТоварах(ПроверяемыеТовары) Тогда
		бг_WMS.СообщитьПользователю(
			НСтр("ru='Из внешней системы загружены товары с некорректными идентификаторами.'"),
			Ссылка,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ТоварыВБазеДанных()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Номенклатура КАК Номенклатура,
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Серия КАК Серия,
	|	СУММА(битОтражениеФактаПоПриходномуОрдеруТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.битОтражениеФактаПоПриходномуОрдеру.Товары КАК битОтражениеФактаПоПриходномуОрдеруТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО битОтражениеФактаПоПриходномуОрдеруТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО битОтражениеФактаПоПриходномуОрдеруТовары.Серия = СправочникСерииНоменклатуры.Ссылка
	|			И (битОтражениеФактаПоПриходномуОрдеруТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Серия,
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НужноИзменитьПриходныйОрдер()
	
	// Если реквизиты шапки ордера не удовлетворяют условиям, то изменение ордера необходимо вне зависимости от товаров.
	РеквизитыОрдера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПриходныйОрдерНаТовары,
		"Статус, Проведен, ПометкаУдаления");
		
	Если ПриемкаОтменена() Тогда
		
		НужноИзменитьПриходныйОрдер = Не РеквизитыОрдера.ПометкаУдаления;
		
	Иначе
		
		Если ЕстьАлкогольнаяПродукция Тогда
			ЦелевойСтатусОрдера = Документы.ПриходныйОрдерНаТовары.бг_СтатусОрдераПоСтатусуЕГАИС(
				ДополнительныеСвойства.ТекущийСтатусТТН);
		Иначе
			ЦелевойСтатусОрдера = Перечисления.СтатусыПриходныхОрдеров.Принят;
		КонецЕсли;
		
		ШапкаОрдераИмеетЦелевойВид =
			РеквизитыОрдера.Статус = ЦелевойСтатусОрдера
				И РеквизитыОрдера.Проведен;
			
		// Если ордер не находится в нужном статусе или не проведен, его нужно изменять вне зависимости от состояния его товаров.	
		Если Не ШапкаОрдераИмеетЦелевойВид Тогда
			
			НужноИзменитьПриходныйОрдер = Истина;
			
		Иначе
			
			// Проверяем товары ордера.
			ПоляДляСравнения = "Номенклатура, Серия, Количество";
			
			ТоварыОрдера = ТоварыОрдера();
			ТоварыОрдера.Индексы.Добавить(ПоляДляСравнения);
			
			РезультатСравненияТаблиц = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
				ДополнительныеСвойства.ТоварыПринятые,
				ТоварыОрдера,
				Истина);
				
			НужноИзменитьПриходныйОрдер = Не РезультатСравненияТаблиц.ТаблицыСовпадают;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат НужноИзменитьПриходныйОрдер;
	
КонецФункции

Процедура ИзменитьПриходныйОрдер(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПриходныйОрдерНаТоварыОбъект = ПриходныйОрдерНаТовары.ПолучитьОбъект();
	
	Если ПриемкаОтменена() Тогда
		
		ПриходныйОрдерНаТоварыОбъект.УстановитьПометкуУдаления(Истина);
		
	Иначе
		
		ПриходныйОрдерНаТоварыОбъект.Товары.Очистить();
		
		ПриходныйОрдерНаТоварыОбъект.ПометкаУдаления = Ложь;
		ПриходныйОрдерНаТоварыОбъект.Дата = Дата;
		
		Если ЕстьМаркируемаяАлкогольнаяПродукция Тогда
			ПриходныйОрдерНаТоварыОбъект.Статус = Документы.ПриходныйОрдерНаТовары.бг_СтатусОрдераПоСтатусуЕГАИС(
				ДополнительныеСвойства.ТекущийСтатусТТН);
		Иначе
			ПриходныйОрдерНаТоварыОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
		КонецЕсли;
		
		Для каждого СтрокаТоварыФактПриемки Из ДополнительныеСвойства.ТоварыПринятые Цикл
			
			НоваяСтрокаТоварыОрдер = ПриходныйОрдерНаТоварыОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(
				НоваяСтрокаТоварыОрдер,
				СтрокаТоварыФактПриемки,
				"Номенклатура, Серия, Количество");
				
			НоваяСтрокаТоварыОрдер.КоличествоУпаковок = НоваяСтрокаТоварыОрдер.Количество;
			НоваяСтрокаТоварыОрдер.Принято = ПриходныйОрдерНаТоварыОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
			
		КонецЦикла;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(
			ПриходныйОрдерНаТоварыОбъект,
			Документы.ПриходныйОрдерНаТовары);
			
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			ПриходныйОрдерНаТоварыОбъект,
			ПараметрыУказанияСерий);
		
		ПриходныйОрдерНаТоварыОбъект.ДополнительныеСвойства.Вставить(
			"бг_НеВыполнятьАктуализациюРасширенногоСтатусаТТН",
			Истина);
			
		ПриходныйОрдерНаТоварыОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТоварыОрдера()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Серия КАК Серия,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ПриходныйОрдерНаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Серия,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("ПриходныйОрдерНаТовары", ПриходныйОрдерНаТовары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти // Конец ЗаполнениеПриходногоОрдера

#Область ЗаполнениеТТНВходящей

Функция НужноИзменитьТТНВходящую(ЭтоПроведение)
	
	ДанныеТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДополнительныеСвойства.ТТНВходящаяЕГАИС,
		"СтатусПроверкиИПодбора, ЕстьРасхождения");
		
	ДанныеСтатусаТТНВходящей = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(
		ДополнительныеСвойства.ТТНВходящаяЕГАИС);
		
	ДальнейшееДействие1 = ДанныеСтатусаТТНВходящей.ДальнейшееДействие1;
	
	Если ЭтоПроведение Тогда
		НужноИзменитьТТНВходящую = НужноИзменитьТТНВходящуюПроведение(ДанныеТТН, ДальнейшееДействие1);
	Иначе
		НужноИзменитьТТНВходящую = НужноИзменитьТТНВходящуюУдалениеПроведения(ДанныеТТН, ДальнейшееДействие1);
	КонецЕсли;
	
	Возврат НужноИзменитьТТНВходящую;
	
КонецФункции

Функция НужноИзменитьТТНВходящуюПроведение(ДанныеТТН, ДальнейшееДействие1)
	
	Если РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана Тогда
		
		ПоляДляСравнения = "Номенклатура, Серия, Количество";
		
		ТоварыФактТТН = ТоварыФактТТН(ДополнительныеСвойства.ТТНВходящаяЕГАИС);
		ТоварыФактТТН.Индексы.Добавить(ПоляДляСравнения);
		
		// TODO в рамках задачи по поддержке нескольких приходных ордеров, нужно будет смотреть не товары конкретного
		// факта приемки, а данные всех фактов приемки вместе взятых, метод перенести в менеджер ТТН входящей.
		РезультатСравненияТаблиц = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
			ДополнительныеСвойства.ТоварыПринятые,
			ТоварыФактТТН,
			Истина);
			
		НужноИзменитьТТНВходящую = ДанныеТТН.СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Завершено
			Или ДанныеТТН.ЕстьРасхождения <> Истина
			Или Не РезультатСравненияТаблиц.ТаблицыСовпадают
			Или ДальнейшееДействие1 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеПроверку;
			
	Иначе
		
		НужноИзменитьТТНВходящую = ДанныеТТН.СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Завершено
			Или ДальнейшееДействие1 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеПроверку;
		
	КонецЕсли;
		
	Возврат НужноИзменитьТТНВходящую;
	
КонецФункции

Функция НужноИзменитьТТНВходящуюУдалениеПроведения(ДанныеТТН, ДальнейшееДействие1)
	
	НужноИзменитьТТНВходящую = Ложь;
	
	ТоварыФактТТН = ТоварыФактТТН(ДополнительныеСвойства.ТТНВходящаяЕГАИС);
	
	Если ТоварыФактТТН.Итог("Количество") > 0 Тогда
		
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ТоварыФактТТН Цикл
		Если СтрокаТовары.Количество > 0 Тогда
			НужноИзменитьТТНВходящую = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеТТН.СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось
		Или ДанныеТТН.ЕстьРасхождения
		Или ДальнейшееДействие1 <> Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеПроверку Тогда
		
		НужноИзменитьТТНВходящую = Истина;
	КонецЕсли;
	
	Возврат НужноИзменитьТТНВходящую;
	
КонецФункции

Функция ТоварыФактТТН(ТТНВходящаяЕГАИС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	СУММА(ТТНВходящаяЕГАИСТовары.КоличествоФакт) КАК Количество
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНВходящаяЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИСТовары.Серия,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура";
	
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ИзменитьТТНВходящую(ЭтоПроведение, Отказ)
	
	Если Отказ Или Не ЕстьАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	ТТНВходящаяЕГАИСОбъект = ДополнительныеСвойства.ТТНВходящаяЕГАИС.ПолучитьОбъект();
	
	Если ЭтоПроведение Тогда
		ИзменитьТТНВходящуюПроведение(ТТНВходящаяЕГАИСОбъект, Отказ);
	Иначе
		ИзменитьТТНВходящуюУдалениеПроведения(ТТНВходящаяЕГАИСОбъект, Отказ);
	КонецЕсли;
	
	ТТНВходящаяЕГАИСОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	ТТНВходящаяЕГАИСОбъект.ДополнительныеСвойства.Вставить(
		"бг_НеВыполнятьАктуализациюРасширенногоСтатусаТТН",
		Истина);
	
	ТТНВходящаяЕГАИСОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Документы.ТТНВходящаяЕГАИС.бг_ОтразитьИзменениеСтатусаДокументаЕГАИСПриемкаЗавершена(
		ТТНВходящаяЕГАИСОбъект,
		ДополнительныеСвойства.ТТНВходящаяЕГАИС);
	
КонецПроцедуры

Процедура ИзменитьТТНВходящуюПроведение(ТТНВходящаяЕГАИСОбъект, Отказ)
	
	ТТНВходящаяЕГАИСОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
	
	Если РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана Тогда
		
		ТТНВходящаяЕГАИСОбъект.ЕстьРасхождения = Истина;
		
		Для каждого СтрокаТоварыТТН Из ТТНВходящаяЕГАИСОбъект.Товары Цикл
			СтрокаТоварыТТН.КоличествоФакт = 0;
		КонецЦикла;
		
		Для каждого СтрокаТоварыПриемка Из Товары Цикл
		
			ПараметрыПоиска = Новый Структура("Номенклатура, Серия");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТоварыПриемка);
			
			НайденныеСтрокиТоварыТТН = ТТНВходящаяЕГАИСОбъект.Товары.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтрокиТоварыТТН.Количество() > 0 Тогда
				НайденныеСтрокиТоварыТТН[0].КоличествоФакт = СтрокаТоварыПриемка.Количество;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаТоварыТТН Из ТТНВходящаяЕГАИСОбъект.Товары Цикл
			СтрокаТоварыТТН.КоличествоФакт = СтрокаТоварыТТН.Количество;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьТТНВходящуюУдалениеПроведения(ТТНВходящаяЕГАИСОбъект, Отказ)
	
	ТТНВходящаяЕГАИСОбъект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.НеВыполнялось;
	ТТНВходящаяЕГАИСОбъект.ЕстьРасхождения = Ложь;
	
	Для каждого СтрокаТовары Из ТТНВходящаяЕГАИСОбъект.Товары Цикл
		СтрокаТовары.КоличествоФакт = 0;
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализироватьРасширенныйСтатусТТНВходящей(Отказ)
	
	Если Не ЕстьАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ДополнительныеСвойства.Свойство("ТТНВходящаяЕГАИС")
		И ЗначениеЗаполнено(ДополнительныеСвойства.ТТНВходящаяЕГАИС)) Тогда
		
		ВызватьИсключение СтрШаблон(НСтр("ru='Документ ""%1"" не связан с ТТН. Обработка невозможна.'"), Ссылка);
	КонецЕсли;
	
	Документы.ТТНВходящаяЕГАИС.бг_ОбновитьРасширенныйСтатусЕГАИС(ДополнительныеСвойства.ТТНВходящаяЕГАИС);

КонецПроцедуры

Функция ТТНВКонечномСтатусе()
	
	Возврат Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ДополнительныеСвойства.ТекущийСтатусТТН);
	
КонецФункции

Функция ТТНДоверительная()
	
	Возврат ДополнительныеСвойства.Свойство("ДоверительнаяПриемкаТТН")
		И ДополнительныеСвойства.ДоверительнаяПриемкаТТН = Истина;
	
КонецФункции

Процедура АктуализироватьТТНВходящуюПриУдаленииПроведения(Отказ)
	
	НеВыполнятьАктуализациюТТН = Неопределено;
	ДополнительныеСвойства.Свойство("бг_НеВыполнятьАктуализациюТТН", НеВыполнятьАктуализациюТТН);
	
	Если НеВыполнятьАктуализациюТТН = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НужноИзменитьТТНВходящую(Ложь) Тогда
		ИзменитьТТНВходящую(Ложь, Отказ);
	КонецЕсли;
	
	АктуализироватьРасширенныйСтатусТТНВходящей(Отказ);
	
КонецПроцедуры

#КонецОбласти // Конец ЗаполнениеТТНВходящей

#Область ДвижениеМарок

Процедура СформироватьДвиженияПоМаркам()
	
	Если Не ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);
	
	// бг_ДвижениеМарок
	Если РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана Тогда
		
		Для каждого СтрокаТоварыПоШтрихкодам Из ДополнительныеСвойства.ТоварыПоШтрихкодам Цикл
			Запись = Движения.бг_ДвижениеМарок.Добавить();
			Запись.Период = Дата;
			Запись.ГУИДМарки = СтрокаТоварыПоШтрихкодам.ГУИДМарки;
			Запись.Серия = СтрокаТоварыПоШтрихкодам.Серия;
			Запись.КодУпаковки = СтрокаТоварыПоШтрихкодам.ШтрихкодРодитель;
			Запись.СтатусМарки = СтатусыПоОперации.СтатусПодтвержденаНаСкладе;
		КонецЦикла;
	КонецЕсли;
	
	// бг_СоставУпаковок
	Если ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.MobileSmarts
		И РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ЕстьРасхожденияОтПлана Тогда
		
		// При приемке реальный состав паллет и коробок мог отличаться от планового по ТТН входящей.
		// Для MobileSmarts необходимо в ERP  хранить актуальную структуру состава упаковок.
		// Для Solvo это не имеет смысла - данные в ERP по точному составу упаковок не нужны.
		Для каждого СтрокаУпаковки Из Упаковки Цикл
			Запись = Движения.бг_СоставУпаковок.Добавить();
			Запись.Период = Дата;
			Запись.КодУпаковки = СтрокаУпаковки.Штрихкод;
			Запись.КодВышестоящейУпаковки = СтрокаУпаковки.ШтрихкодРодитель;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец ДвижениеМарок

#КонецОбласти

#КонецЕсли
