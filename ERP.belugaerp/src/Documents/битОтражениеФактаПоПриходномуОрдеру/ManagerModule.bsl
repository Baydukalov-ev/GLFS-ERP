
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

&После("ОбработкаПолученияПолейПредставления")
Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	Поля.Добавить("РезультатПриемки");
	
КонецПроцедуры

&После("ОбработкаПолученияПредставления")
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.РезультатПриемки = Перечисления.бг_РезультатыПриемкиWMS.ПриемкаОтменена Тогда
		Представление = СтрШаблон(
			НСтр("ru='Отражение факта по приходному ордеру №%1 от %2 (отменен)'"),
			Данные.Номер,
			Данные.Дата);
	Иначе
		Представление = СтрШаблон(
			НСтр("ru='Отражение факта по приходному ордеру №%1 от %2'"),
			Данные.Номер,
			Данные.Дата);
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.бг_ДвижениеМарок.ДобавитьКомандуДвижениеМарокПоДокументу(КомандыОтчетов);
	
КонецПроцедуры

// Возвращает организацию по документу.
//
// Параметры:
//  ОтражениеФактаПоПриходномуОрдеру - ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру
//  ПриходныйОрдерНаТовары - ДокументСсылка.ПриходныйОрдерНаТовары
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ОрганизацияДокумента(ОтражениеФактаПоПриходномуОрдеру = Неопределено, ПриходныйОрдерНаТовары = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПриходныйОрдерНаТовары) Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПриходныйОрдерНаТовары,
			"Распоряжение.Организация");
		
	Иначе
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОтражениеФактаПоПриходномуОрдеру,
			"ПриходныйОрдерНаТовары.Распоряжение.Организация");
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

// Возвращает организацию ЕГАИС документа.
//
// Параметры:
//  ОтражениеФактаПоПриходномуОрдеру - ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру
//  
// Возвращаемое значение:
//   СправочникСсылка.КлассификаторОрганизацийЕГАИС
//
Функция ОрганизацияЕГАИСДокумента(ОтражениеФактаПоПриходномуОрдеру) Экспорт
	// TODO рефакторинг BG-3199. Сделать один запрос для получения организации ЕГИАС
	ОрганизацияЕГАИС = Неопределено;
	
	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ОтражениеФактаПоПриходномуОрдеру,
		"Склад");
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ОрганизацияЕГАИС = Справочники.Склады.бг_ОрганизацияЕГАИС(Склад);
	КонецЕсли;
	
	Возврат ОрганизацияЕГАИС;
	
КонецФункции

// Возвращает признак необходимости проводить документ, опираясь на тип внешней складской системы и статус.
//
// Параметры:
//   ОтражениеФактаПоРасходномуОрдеру - ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру
//  
// Возвращаемое значение:
//   Булево
//
Функция НеобходимоПроводитьДокумент(Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"ТипВнешнейСкладскойСистемы, ЕстьМаркируемаяАлкогольнаяПродукция, СтатусSolvo");
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		ДанныеДокумента = Новый Структура("ТипВнешнейСкладскойСистемы, ЕстьМаркируемаяАлкогольнаяПродукция, СтатусSolvo");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Документ);
		
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДокумента.ТипВнешнейСкладскойСистемы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоSolvo = ДанныеДокумента.ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo;
	
	Если ЭтоSolvo И Не ЗначениеЗаполнено(ДанныеДокумента.СтатусSolvo) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтатусSolvoУказаниеТоваровИМарок = СтатусSolvoУказаниеТоваровИМарок(ДанныеДокумента.ЕстьМаркируемаяАлкогольнаяПродукция);
	
	ЭтоСтатусSolvoСДаннымиТоваровИМарок = ДанныеДокумента.СтатусSolvo = СтатусSolvoУказаниеТоваровИМарок;

	Если ЭтоSolvo И ЭтоСтатусSolvoСДаннымиТоваровИМарок Или Не ЭтоSolvo Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область Solvo

// Возвращает список статусов Solvo, при которых документ в ERP полноценно заполнен и может быть принят к учету,
// предшествующие статусы являются информативными: отображают сведения о статусе сборки на стороне WMS.
//  
// Параметры:
//  ЕстьМаркируемаяАлкогольнаяПродукция - Булево - Признак наличия маркируемой алкогольной продукции в документе.
//  
// Возвращаемое значение:
//   Массив
//
Функция КонечныеСтатусыSolvo(ЕстьМаркируемаяАлкогольнаяПродукция) Экспорт

	КонечныеСтатусыSolvo = Новый Массив;
	
	Если ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		КонечныеСтатусыSolvo.Добавить(Перечисления.бг_СтатусыПриемкиSolvo.Согласование);
		КонечныеСтатусыSolvo.Добавить(Перечисления.бг_СтатусыПриемкиSolvo.Принят);
	Иначе
		КонечныеСтатусыSolvo.Добавить(Перечисления.бг_СтатусыПриемкиSolvo.Принят);
	КонецЕсли;
	
	Возврат КонечныеСтатусыSolvo;

КонецФункции

// Возвращает список статусов Solvo, при которых документ в ERP уже полноценно заполнен и принят к учету,
// статусы являются информативными: отображают сведения о статусе завершения приемки на стороне WMS.
//  
// Параметры:
//  ЕстьМаркируемаяАлкогольнаяПродукция - Булево - Признак наличия маркируемой алкогольной продукции в документе.
//  
// Возвращаемое значение:
//   Массив
//
Функция КонечныеИнформативныеСтатусыSolvo(ЕстьМаркируемаяАлкогольнаяПродукция) Экспорт

	КонечныеИнформативныеСтатусы = Новый Массив;
	
	Если ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		КонечныеИнформативныеСтатусы.Добавить(Перечисления.бг_СтатусыПриемкиSolvo.Принят);
	КонецЕсли;
	
	Возврат КонечныеИнформативныеСтатусы;

КонецФункции

// Статус Solvo, при котором WMS завершает сборку и присылает полноценное сообщение с заполненными табличными частями.
//                                                                          
// Параметры:
//  ЕстьМаркируемаяАлкогольнаяПродукция - Булево - Признак наличия маркируемой алкогольной продукции в документе.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.бг_СтатусыПриемкиSolvo
//
Функция СтатусSolvoУказаниеТоваровИМарок(ЕстьМаркируемаяАлкогольнаяПродукция) Экспорт
	
	Если ЕстьМаркируемаяАлкогольнаяПродукция Тогда
		Возврат Перечисления.бг_СтатусыПриемкиSolvo.Согласование;
	Иначе
		Возврат Перечисления.бг_СтатусыПриемкиSolvo.Принят;
	КонецЕсли;

КонецФункции

#КонецОбласти // Конец Solvo

#Область ОтложеннаяОбработка

Процедура бг_ОтложеннаяОбработкаОбъекта(ДокументСсылка, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не бг_КонстантыПовтИсп.ЗначениеКонстанты("ПроводитьДокументыОтWMSОтложенно") Тогда
		Возврат;
	КонецЕсли;
	
	ВсеВарианты = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов;
	
	Если ВариантОбработки = ВсеВарианты.ОбработатьДокументыWMS Тогда
		ОтложеннаяОбработкаПроведение(ДокументСсылка);
	ИначеЕсли ВариантОбработки = ВсеВарианты.РассчитатьПоказателиРаботыОператоровWMS Тогда
		ОтложеннаяОбработкаРасчетПоказателейРаботыОператоровWMS(ДокументСсылка);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтложеннаяОбработкаПроведение(ДокументСсылка)
	
	Попытка
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
			
		ШапкаОшибки = ОписаниеОшибки();
		
		ТелоОшибки = "";
		Для каждого СообщениеПользователю Из ПолучитьСообщенияПользователю(Истина) Цикл
			ТелоОшибки = ТелоОшибки + ?(ПустаяСтрока(ТелоОшибки), "", Символы.ПС) + СообщениеПользователю.Текст;
		КонецЦикла;
		
		ТекстОшибки = ШапкаОшибки + Символы.ПС + ТелоОшибки;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура бг_ЗафиксироватьОшибкуОтложеннойОбработки(ДокументСсылка, ТекстОшибки) Экспорт

	РегистрыСведений.бг_ДокументыИнтеграцииСоСкладскимиСистемами.ОбновитьСтатусДокумента(
		ДокументСсылка,
		ТекущаяДатаСеанса(),
		Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженБезОбработки,
		0,
		ТекстОшибки);

КонецПроцедуры

Процедура ОтложеннаяОбработкаРасчетПоказателейРаботыОператоровWMS(ДокументСсылка) Экспорт
	
	ДанныеДляРасчета = бг_WMS.НовыйДанныеДляРасчетаПоказателейРаботыОператоровWMS();
	ЗаполнитьДанныеДляРасчетаПоказателейРаботыОператоровWMS(ДанныеДляРасчета, ДокументСсылка);
	бг_WMS.СформироватьДвиженияПоказателейРаботыОператоровWMS(ДанныеДляРасчета);
	
КонецПроцедуры

#КонецОбласти // Конец ОтложеннаяОбработка

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетПоказателейРаботыОператоровWMS

Процедура ЗаполнитьДанныеДляРасчетаПоказателейРаботыОператоровWMS(ДанныеДляРасчета, ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляРасчета.Организация = Документы.битОтражениеФактаПоПриходномуОрдеру.ОрганизацияДокумента(
		ДокументСсылка);
	ДанныеДляРасчета.ОрганизацияЕГАИС = Документы.битОтражениеФактаПоПриходномуОрдеру.ОрганизацияЕГАИСДокумента(
		ДокументСсылка);
	
	СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(
		Метаданные.Документы.битОтражениеФактаПоПриходномуОрдеру.Имя);
	
	ДанныеДляРасчета.СтатусыМарок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		СтатусыМарокПоОперации.СтатусОприходоватьНаСкладе);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляРасчетаПоказателейРаботыОператоровWMS();
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПоследнийИндекс = РезультатыЗапроса.ВГраница();
	
	ЗаполнитьЗначенияСвойств(
		ДанныеДляРасчета.ДанныеШапкиДокумента,
		РезультатыЗапроса[ПоследнийИндекс - 3].Выгрузить()[0]);
		
	Для каждого СтрокаТоварыРаспоряжения Из РезультатыЗапроса[ПоследнийИндекс - 2].Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ТоварыРаспоряжения.Добавить(), СтрокаТоварыРаспоряжения);
	КонецЦикла;
	
	Для каждого СтрокаТоварыДокумента Из РезультатыЗапроса[ПоследнийИндекс - 1].Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ТоварыДокумента.Добавить(), СтрокаТоварыДокумента);
	КонецЦикла;
	
	Для каждого СтрокаШтрихкодыДокумента Из РезультатыЗапроса[ПоследнийИндекс].Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ШтрихкодыДокумента.Добавить(), СтрокаШтрихкодыДокумента);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДляРасчетаПоказателейРаботыОператоровWMS()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	битОтражениеФактаПоПриходномуОрдеру.Ссылка КАК Документ,
	|	битОтражениеФактаПоПриходномуОрдеру.Проведен КАК Проведен,
	|	битОтражениеФактаПоПриходномуОрдеру.Дата КАК Дата,
	|	битОтражениеФактаПоПриходномуОрдеру.ВремяВыполнения КАК ВремяВыполнения,
	|	битОтражениеФактаПоПриходномуОрдеру.ОператорТСД КАК ОператорТСД,
	|	ДокументПриходныйОрдерНаТовары.Распоряжение КАК Распоряжение,
	|	битОтражениеФактаПоПриходномуОрдеру.Склад.бг_ПунктРазгрузки КАК ПунктРазгрузки
	|ПОМЕСТИТЬ ШапкаИРаспоряжения
	|ИЗ
	|	Документ.битОтражениеФактаПоПриходномуОрдеру КАК битОтражениеФактаПоПриходномуОрдеру
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ДокументПриходныйОрдерНаТовары
	|		ПО битОтражениеФактаПоПриходномуОрдеру.ПриходныйОрдерНаТовары = ДокументПриходныйОрдерНаТовары.Ссылка
	|			И (битОтражениеФактаПоПриходномуОрдеру.Ссылка = &ДокументСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Ссылка КАК Распоряжение,
	|	ПриобретениеТоваровУслуг.бг_ПунктПогрузки.КаналПродаж КАК КаналПродаж,
	|	ПриобретениеТоваровУслуг.бг_ПунктПогрузки.Территория КАК Территория
	|ПОМЕСТИТЬ ДанныеРаспоряжения
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ШапкаИРаспоряжения.Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Ссылка,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ПО ВозвратТоваровОтКлиента.Ссылка = ШапкаИРаспоряжения.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШапкаИРаспоряжения.Документ КАК Документ,
	|	ШапкаИРаспоряжения.Проведен КАК Проведен,
	|	ШапкаИРаспоряжения.Дата КАК Дата,
	|	ШапкаИРаспоряжения.ВремяВыполнения КАК ВремяВыполнения,
	|	ШапкаИРаспоряжения.ОператорТСД КАК ОператорТСД,
	|	ШапкаИРаспоряжения.ПунктРазгрузки КАК ПунктРазгрузки,
	|	ШапкаИРаспоряжения.Распоряжение КАК Распоряжение,
	|	ДанныеРаспоряжения.КаналПродаж КАК КаналПродаж,
	|	ДанныеРаспоряжения.Территория КАК Территория
	|ИЗ
	|	ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРаспоряжения КАК ДанныеРаспоряжения
	|		ПО ШапкаИРаспоряжения.Распоряжение = ДанныеРаспоряжения.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Серия КАК Серия,
	|	СУММА(ПриобретениеТоваровУслугТовары.Количество) КАК Количество,
	|	СУММА(ПриобретениеТоваровУслугТовары.СуммаСНДС) КАК Сумма
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка = ШапкаИРаспоряжения.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Серия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
	|	ВозвратТоваровОтКлиентаТовары.Серия,
	|	СУММА(ВозвратТоваровОтКлиентаТовары.Количество),
	|	ВозвратТоваровОтКлиентаТовары.СуммаСНДС
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШапкаИРаспоряжения КАК ШапкаИРаспоряжения
	|		ПО ВозвратТоваровОтКлиентаТовары.Ссылка = ШапкаИРаспоряжения.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
	|	ВозвратТоваровОтКлиентаТовары.Серия,
	|	ВозвратТоваровОтКлиентаТовары.СуммаСНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Номенклатура КАК Номенклатура,
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Серия КАК Серия,
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Количество КАК Количество
	|ИЗ
	|	Документ.битОтражениеФактаПоПриходномуОрдеру.Товары КАК битОтражениеФактаПоПриходномуОрдеруТовары
	|ГДЕ
	|	битОтражениеФактаПоПриходномуОрдеруТовары.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битОтражениеФактаПоПриходномуОрдеруШтрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	Документ.битОтражениеФактаПоПриходномуОрдеру.Штрихкоды КАК битОтражениеФактаПоПриходномуОрдеруШтрихкоды
	|ГДЕ
	|	битОтражениеФактаПоПриходномуОрдеруШтрихкоды.Ссылка = &ДокументСсылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Конец РасчетПоказателейРаботыОператоровWMS

#КонецОбласти

#КонецЕсли
