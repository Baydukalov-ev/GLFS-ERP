
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("Основание")
		И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.СборкаТоваров") Тогда
		
		ЗаполнитьПоСборке(ДанныеЗаполнения.Основание);
		
	КонецЕсли;
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьДанныеМарокПоШтрихкодам(Отказ, РежимПроведения);
	ИнициализироватьПроверитьСоответствиеНоменклатурыЕГАИС(Отказ);
	ПроверитьЗаполнениеТоваровШтрихкодов(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьДвиженияПоМаркам();
	СформироватьДвиженияСоответствиеНоменклатурыЕГАИС();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент()
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДанныеМарокПоШтрихкодам(Отказ, РежимПроведения)
	
	ДанныеМарокПоШтрихкодам = НовыйДанныеМарокПоШтрихкодам();
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		ДатаПолученияШтрихкодов = Неопределено;
	Иначе
		ДатаПолученияШтрихкодов = Дата;
	КонецЕсли;
	
	Документы.битКомплектацияПродукцииЕГАИС.ЗаполнитьТекущиеДанныеТоваровВШтрихкодах(
		ДанныеМарокПоШтрихкодам,
		ОрганизацияЕГАИС,
		бг_МаркируемаяПродукция.ДатаПолученияШтрихкодов(ЭтотОбъект));
		
	Для Индекс = 0 По (ДанныеМарокПоШтрихкодам.Количество() - 1) Цикл
		
		ДанныеМарки = ДанныеМарокПоШтрихкодам[Индекс];
		
		ДанныеМарки.ИндексИсходнойСтроки = Индекс;
		
		ДанныеТовара = ДанныеТовараПоШтрихкоду(ДанныеМарки.КлючСвязи);
		
		Если ДанныеТовара = Неопределено Тогда
			
			СообщитьОшибкуСПривязкойКТаблице(
				СтрШаблон(
					НСтр("ru='По штрихкоду %1 не найден связанный товар, либо найдено больше одного товара.'"),
					ДанныеМарки.Штрихкод),
				"Штрихкоды",
				Индекс,
				"Штрихкод",
				Отказ);
				
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеМарки, ДанныеТовара);
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ДанныеМарокПоШтрихкодам", ДанныеМарокПоШтрихкодам);
	
КонецПроцедуры

Функция НовыйДанныеМарокПоШтрихкодам()
	
	ДанныеМарокПоШтрихкодам = Штрихкоды.Выгрузить(); // Штрихкод, КлючСвязи
	
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"СтараяНоменклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"СтараяСерия",
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"НоваяНоменклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"НоваяСерия",
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"АлкогольнаяПродукция",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"Справка2",
		Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"ШтрихкодРодитель",
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок().Упаковка));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"ГУИДМарки",
		Новый ОписаниеТипов("УникальныйИдентификатор"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"СтатусМарки",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_СтатусыАкцизныхМарок"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"ИндексИсходнойСтроки",
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат ДанныеМарокПоШтрихкодам;
	
КонецФункции

Процедура ИнициализироватьПроверитьСоответствиеНоменклатурыЕГАИС(Отказ)
	
	СоответствиеНоменклатурыЕГАИС = ДополнительныеСвойства.ДанныеМарокПоШтрихкодам.Скопировать();
	СоответствиеНоменклатурыЕГАИС.Свернуть("НоваяНоменклатура, НоваяСерия, АлкогольнаяПродукция, Справка2");
	
	КлючевыеПоля = "НоваяНоменклатура, НоваяСерия";
	СерииНоменклатуры = СоответствиеНоменклатурыЕГАИС.Скопировать(, КлючевыеПоля);
	СерииНоменклатуры.Свернуть(КлючевыеПоля);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.НоваяНоменклатура КАК НоваяНоменклатура,
	|	СерииНоменклатуры.НоваяСерия КАК НоваяСерия
	|ПОМЕСТИТЬ ПроверяемыеСерииНоменклатуры
	|ИЗ
	|	&СерииНоменклатуры КАК СерииНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеСерииНоменклатуры.НоваяНоменклатура КАК НоваяНоменклатура,
	|	ПроверяемыеСерииНоменклатуры.НоваяСерия КАК НоваяСерия,
	|	СерииНоменклатуры.бг_Номенклатура КАК НоваяСерияНоменклатура,
	|	СерииНоменклатуры.Справка2ЕГАИС КАК НоваяСерияСправка2,
	|	СерииНоменклатуры.Справка2ЕГАИС.АлкогольнаяПродукция КАК НоваяСерияАлкогольнаяПродукция
	|ИЗ
	|	ПроверяемыеСерииНоменклатуры КАК ПроверяемыеСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ПроверяемыеСерииНоменклатуры.НоваяСерия = СерииНоменклатуры.Ссылка";
	
	Запрос.УстановитьПараметр("СерииНоменклатуры", СерииНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска = Новый Структура("НоваяНоменклатура, НоваяСерия");
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Выборка);
		НайденныеСтроки = СоответствиеНоменклатурыЕГАИС.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].АлкогольнаяПродукция = Выборка.НоваяСерияАлкогольнаяПродукция;
			НайденныеСтроки[0].Справка2 = Выборка.НоваяСерияСправка2;
			
		ИначеЕсли НайденныеСтроки.Количество() = 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='По указанной новой серии не найдена серия в базе данных (указана битая ссылка).'"),
					Выборка.НоваяСерия),,,,
				Отказ);
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.НоваяНоменклатура)
			И Выборка.НоваяНоменклатура <> Выборка.НоваяСерияНоменклатура Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='В новой серии %1 номенклатура не совпадает с указанной в документе.'"),
					Выборка.НоваяСерия),,,,
				Отказ);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.НоваяСерияСправка2) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='В новой серии %1 не заполнена справка 2 ЕГАИС.'"),
					Выборка.НоваяСерия),,,,
				Отказ);
				
		Иначе
				
			Если Не ЗначениеЗаполнено(Выборка.НоваяСерияАлкогольнаяПродукция) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='В справке 2 ЕГАИС новой серии %1 не заполнена алкогольная продукция.'"),
					Выборка.НоваяСерия),,,,
				Отказ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("СоответствиеНоменклатурыЕГАИС", СоответствиеНоменклатурыЕГАИС);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТоваровШтрихкодов(Отказ)
	
	// Выполняем в т.ч. элементарные проверки заполнения реквизитов,
	// т.к. документ может быть загружен из внешней системы.
	Если Товары.Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Должен быть указан хотя бы один товар.'"),,,,
			Отказ);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.ДанныеМарокПоШтрихкодам.Количество() = 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Должен быть указан хотя бы один штрихкод.'"),,,,
			Отказ);
		
	КонецЕсли;
	
	ШтрихкодыПроверкаДублей = ДополнительныеСвойства.ДанныеМарокПоШтрихкодам.Скопировать();
	КоличествоДоСвертывания = ШтрихкодыПроверкаДублей.Количество();
	ШтрихкодыПроверкаДублей.Свернуть("Штрихкод");
	КоличествоПослеСвертывания = ШтрихкодыПроверкаДублей.Количество();
	Если КоличествоДоСвертывания < КоличествоПослеСвертывания Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Найдены дубли штрихкодов.'"),,,,
			Отказ);
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Товары Цикл
		
		ШтрихкодыПоТовару = ДанныеШтрихкодовПоТовару(СтрокаТовары.КодСтроки);
		
		Если СтрокаТовары.Количество <> ШтрихкодыПоТовару.Количество() Тогда
			
			СообщитьОшибкуСПривязкойКТаблице(
				СтрШаблон(
					НСтр("ru='Количество по товару (номенклатура ""%1"", серия ""%2""): %3, введено штрихкодов: %4'"),
					СтрокаТовары.СтараяНоменклатура,
					СтрокаТовары.СтараяСерия,
					СтрокаТовары.Количество,
					ШтрихкодыПоТовару.Количество()),
				"Товары",
				Товары.Индекс(СтрокаТовары),
				"Количество",
				Отказ);
				
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ДанныеМарки Из ДополнительныеСвойства.ДанныеМарокПоШтрихкодам Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеМарки.НоваяНоменклатура) Тогда
			
			СообщитьОшибкуСПривязкойКТаблице(
				СтрШаблон(НСтр("ru='Не заполнена новая номенклатура по штрихкоду %1'"), ДанныеМарки.Штрихкод),
				"Штрихкоды",
				ДанныеМарки.ИндексИсходнойСтроки,
				"Штрихкод",
				Отказ);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеМарки.НоваяСерия) Тогда
			
			СообщитьОшибкуСПривязкойКТаблице(
				СтрШаблон(НСтр("ru='Не заполнена новая серия по штрихкоду %1'"), ДанныеМарки.Штрихкод),
				"Штрихкоды",
				ДанныеМарки.ИндексИсходнойСтроки,
				"Штрихкод",
				Отказ);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеМарки.СтараяНоменклатура) Тогда
			
			СообщитьОшибкуСПривязкойКТаблице(
				СтрШаблон(НСтр("ru='Не найдена старая номенклатура штрихкода %1.'"), ДанныеМарки.Штрихкод),
				"Штрихкоды",
				ДанныеМарки.ИндексИсходнойСтроки,
				"Штрихкод",
				Отказ);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеМарки.СтараяСерия) Тогда
			
			СообщитьОшибкуСПривязкойКТаблице(
				СтрШаблон(НСтр("ru='Не найдена старая серия штрихкода %1.'"), ДанныеМарки.Штрихкод),
				"Штрихкоды",
				ДанныеМарки.ИндексИсходнойСтроки,
				"Штрихкод",
				Отказ);
				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоМаркам()
	
	Для каждого ДанныеМарки Из ДополнительныеСвойства.ДанныеМарокПоШтрихкодам Цикл
		
		Запись = Движения.бг_ДвижениеМарок.Добавить();
		
		Запись.Период = Дата;
		
		Запись.ГУИДМарки = ДанныеМарки.ГУИДМарки;
		Запись.Серия = ДанныеМарки.НоваяСерия;
		Запись.СтатусМарки = ДанныеМарки.СтатусМарки;
		Запись.КодУпаковки = ДанныеМарки.ШтрихкодРодитель;
		
	КонецЦикла;
	
	Движения.бг_ДвижениеМарок.Записать();
	
КонецПроцедуры

Процедура СформироватьДвиженияСоответствиеНоменклатурыЕГАИС()
	
	Для каждого СтрокаСоответствиеНоменклатурыЕГАИС Из ДополнительныеСвойства.СоответствиеНоменклатурыЕГАИС Цикл
	
		// Проверяем наличие записи по новому товару.
		НаборЗаписейНовыйТовар = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		НаборЗаписейНовыйТовар.Отбор.Номенклатура.Установить(СтрокаСоответствиеНоменклатурыЕГАИС.НоваяНоменклатура);
		НаборЗаписейНовыйТовар.Отбор.АлкогольнаяПродукция.Установить(СтрокаСоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция);
		НаборЗаписейНовыйТовар.Отбор.Серия.Установить(СтрокаСоответствиеНоменклатурыЕГАИС.НоваяСерия);
		НаборЗаписейНовыйТовар.Отбор.Справка2.Установить(СтрокаСоответствиеНоменклатурыЕГАИС.Справка2);
		
		НаборЗаписейНовыйТовар.Прочитать();
		
		Если НаборЗаписейНовыйТовар.Количество() > 0 Тогда
			
			// Необходимая запись уже создана.
			Продолжить;
			
		Иначе
			
			Запись = НаборЗаписейНовыйТовар.Добавить();
			
			Запись.Номенклатура = СтрокаСоответствиеНоменклатурыЕГАИС.НоваяНоменклатура;
			Запись.АлкогольнаяПродукция = СтрокаСоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция;
			Запись.Серия = СтрокаСоответствиеНоменклатурыЕГАИС.НоваяСерия;
			Запись.Справка2 = СтрокаСоответствиеНоменклатурыЕГАИС.Справка2;
			
			НаборЗаписейНовыйТовар.Записать();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеШтрихкодовПоТовару(КодСтроки)
	
	ПараметрыПоиска = Новый Структура("КлючСвязи", КодСтроки);
	Возврат Штрихкоды.НайтиСтроки(ПараметрыПоиска);
	
КонецФункции

Функция ДанныеТовараПоШтрихкоду(КлючСвязи)
	
	ПараметрыПоиска = Новый Структура("КодСтроки", КлючСвязи);
	СтрокиТоваров = Товары.НайтиСтроки(ПараметрыПоиска);
	
	Если СтрокиТоваров.Количество() <> 1 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтрокиТоваров[0];
	КонецЕсли;
	
КонецФункции

Процедура СообщитьОшибкуСПривязкойКТаблице(ТекстОшибки, ИмяТаблицы, Индекс, ИмяПоля, Отказ)
	
	Поле = СтрШаблон(
		"%1[%2].%3",
		ИмяТаблицы,
		Формат(Индекс, "ЧГ=0"),
		ИмяПоля);
		
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, Поле, "Объект", Отказ);
	
КонецПроцедуры

Процедура ОчиститьДвиженияДокумента()
	
	ОчиститьДвиженияРегистраБезРегистрацииСообщения(Движения.бг_ДвижениеМарок);
	
КонецПроцедуры

Процедура ОчиститьДвиженияРегистраБезРегистрацииСообщения(НаборЗаписей)
	
	НаборЗаписей.Очистить();
	НаборЗаписей.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	НаборЗаписей.Записать();
	НаборЗаписей.ДополнительныеСвойства.Удалить("адаптер_ЭтоЗагрузкаДанных");
	
КонецПроцедуры

Процедура ЗаполнитьПоСборке(СборкаТоваров)
	
	ДанныеСборки = ДанныеСборки(СборкаТоваров);
	Если ДанныеСборки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Основание = СборкаТоваров;
	Организация = ДанныеСборки.Шапка.Организация;
	
	ОрганизацииЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.бг_ОрганизацииЕГАИСПоОрганизации(
		Организация,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаТоваров, "Склад"));
		
	Если ОрганизацииЕГАИС.Количество() = 1 Тогда
		ОрганизацияЕГАИС = ОрганизацииЕГАИС[0];
	КонецЕсли;
	
	Товары.Очистить();
	
	Для каждого СтрокаТоварыСборки Из ДанныеСборки.Товары Цикл
		НоваяСтрокаТоварыКомплектация = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыКомплектация, СтрокаТоварыСборки);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыКомплектация, ДанныеСборки.Шапка);
		НоваяСтрокаТоварыКомплектация.Количество = СтрокаТоварыСборки.Количество;
		НоваяСтрокаТоварыКомплектация.КодСтроки = НоваяСтрокаТоварыКомплектация.НомерСтроки;
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеСборки(СборкаТоваров)
	
	Если Не ЗначениеЗаполнено(СборкаТоваров) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СборкаТоваров.Организация КАК Организация,
	|	СборкаТоваров.Номенклатура КАК НоваяНоменклатура,
	|	СборкаТоваров.Серия КАК НоваяСерия,
	|	СборкаТоваров.Количество КАК Количество
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СборкаТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.АлкогольнаяПродукция
	|				И СправочникНоменклатура.ВидАлкогольнойПродукции.Маркируемый)
	|ГДЕ
	|	СборкаТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкаТоваровТовары.Номенклатура КАК СтараяНоменклатура,
	|	СборкаТоваровТовары.Серия КАК СтараяСерия,
	|	СУММА(СборкаТоваровТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СборкаТоваровТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.АлкогольнаяПродукция
	|				И СправочникНоменклатура.ВидАлкогольнойПродукции.Маркируемый)
	|ГДЕ
	|	СборкаТоваровТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкаТоваровТовары.Номенклатура,
	|	СборкаТоваровТовары.Серия";
	
	Запрос.УстановитьПараметр("Ссылка", СборкаТоваров);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапросов[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСборки = Новый Структура;
	ДанныеСборки.Вставить("Шапка", РезультатыЗапросов[0].Выгрузить()[0]);
	ДанныеСборки.Вставить("Товары", РезультатыЗапросов[1].Выгрузить());
	
	Возврат ДанныеСборки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
