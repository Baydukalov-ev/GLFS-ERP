#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция бг_СтатусОрдераПоСтатусуЕГАИС(СтатусТТНВходящейЕГАИС) Экспорт

	Если Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(СтатусТТНВходящейЕГАИС) Тогда
		Возврат Перечисления.СтатусыПриходныхОрдеров.Принят;
	Иначе
		Возврат Перечисления.СтатусыПриходныхОрдеров.ТребуетсяОбработка;
	КонецЕсли;
	
КонецФункции

Функция бг_ДанныеОрдераWMS(ПриходныйОрдерНаТовары) Экспорт
	
	ДанныеОрдера = Новый Структура;
	ДанныеОрдера.Вставить("Склад", Справочники.Склады.ПустаяСсылка());
	ДанныеОрдера.Вставить("ЕстьАлкогольнаяПродукция", Ложь);
	ДанныеОрдера.Вставить("ЕстьМаркируемаяАлкогольнаяПродукция", Ложь);
	ДанныеОрдера.Вставить("ТипВнешнейСкладскойСистемы", Перечисления.бг_ТипыВнешнихСкладскихСистем.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(ПриходныйОрдерНаТовары) Тогда
		Возврат ДанныеОрдера;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.бг_ЕстьАлкогольнаяПродукция КАК ЕстьАлкогольнаяПродукция,
	|	ПриходныйОрдерНаТовары.бг_ЕстьМаркируемаяАлкогольнаяПродукция КАК ЕстьМаркируемаяАлкогольнаяПродукция,
	|	ПриходныйОрдерНаТовары.Склад.бг_ТипВнешнейСкладскойСистемы КАК ТипВнешнейСкладскойСистемы
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &ПриходныйОрдерНаТовары";
	
	Запрос.УстановитьПараметр("ПриходныйОрдерНаТовары", ПриходныйОрдерНаТовары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеОрдера, Выборка);
	КонецЕсли;
	
	Возврат ДанныеОрдера;
	
КонецФункции

&ИзменениеИКонтроль("ЗаполнитьСерииПоРаспоряжению")
Функция бг_ЗаполнитьСерииПоРаспоряжению(Объект, ВыдаватьОшибки)

	Если Не ВозможноЗаполнениеСерийПоРаспоряжению(Объект, ВыдаватьОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению Тогда
#Вставка
		ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Объект.Распоряжение);
		
		Если ДанныеТТНВходящей <> Неопределено Тогда
			Серии = бг_ТаблицаСерийПоТТНВходящейПриПеремещении(Объект, ДанныеТТНВходящей.Документ);
		Иначе
			Серии = ТаблицаСерийПоОтгрузкеПриПеремещении(Объект);
		КонецЕсли;
#КонецВставки
#Удаление
		Серии = ТаблицаСерийПоОтгрузкеПриПеремещении(Объект);
#КонецУдаления
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства Тогда
		Серии = ТаблицаСерийВыпущеннойПродукции(Объект);
	ИначеЕсли Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию Тогда
		Серии = ТаблицаСерийПриПриемкеПоПрочемуОприходованию(Объект);
	Иначе
		Серии = ТаблицаФинансовыхСерийИзРаспоряжения(Объект);
	КонецЕсли;
	
	Если Серии.Количество() = 0 Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'По распоряжению нет серий, которые можно перенести в ордер.';
									|en = 'There are no batch for the reference which can be transferred to the note.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары);
	
	НоменклатураСервер.ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, Серии,, Истина);
	
	Действия = Новый Структура;
	Действия.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда 
		Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	Иначе
		Действия.Вставить("ПересчитатьКоличествоУпаковок");
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСерииВТЧПоТаблицеСерий(Объект,
														ПараметрыУказанияСерий,
														Серии,
														Действия);
	Возврат Истина;
КонецФункции

Функция бг_ТаблицаСерийПоТТНВходящейПриПеремещении(Объект, ТТНВходящаяЕГАИС)
	
	Запрос = Новый Запрос; 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура	КАК Номенклатура,
	|	ТоварыДокумента.Характеристика	КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьАдресноеХранение
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДокумента.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ							КАК Упаковка,
	|	ТоварыДокумента.Количество		КАК Количество,
	|	ВЫБОР
	|		КОГДА &ИспользоватьАдресноеХранение
	|			ТОГДА ТоварыДокумента.КоличествоУпаковок
	|		ИНАЧЕ ТоварыДокумента.Количество
	|	КОНЕЦ							КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТоварыОрдераДляЗапроса
	|ИЗ
	|	&ТаблицаТовары КАК ТоварыДокумента
	|ГДЕ
	|	НЕ ТоварыДокумента.ЭтоУпаковочныйЛист
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Назначение КАК Назначение
	|ПОМЕСТИТЬ НазначенияТоваров
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.КОформлениюОрдеров > 0
	|	И ТоварыКПоступлению.ДокументПоступления В(&Распоряжение)
	|	И ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура					КАК Номенклатура,
	|	ТоварыДокумента.Характеристика					КАК Характеристика,
	|	ЕСТЬNULL(НазначенияТоваров.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение,
	|	ТоварыДокумента.Упаковка						КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)	КАК КоэффициентУпаковки,
	|	СУММА(ТоварыДокумента.Количество)				КАК Количество,
	|	СУММА(ТоварыДокумента.КоличествоУпаковок)		КАК КоличествоУпаковок
	|ИЗ
	|	ТоварыОрдераДляЗапроса КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ НазначенияТоваров КАК НазначенияТоваров
	|		ПО ТоварыДокумента.Номенклатура = НазначенияТоваров.Номенклатура
	|			И ТоварыДокумента.Характеристика = НазначенияТоваров.Характеристика
	|
	|ГДЕ
	|	ЕСТЬNULL(ТоварыДокумента.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика,
	|	ЕСТЬNULL(НазначенияТоваров.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)),
	|	ТоварыДокумента.Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоэффициентУпаковки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 
	|ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	СУММА(ТТНВходящаяЕГАИСТовары.Количество) КАК Количество,
	|	СУММА(ТТНВходящаяЕГАИСТовары.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНВходящаяЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИСТовары.Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Характеристика,
	|	ТТНВходящаяЕГАИСТовары.Серия";

	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ТоварыДокумента.Упаковка",
			"ТоварыДокумента.Номенклатура"));
		
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров")
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение, "ПеремещениеПоЗаказам") Тогда
		
		РаспоряжениеНаПеремещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект.Распоряжение, 
			"ЗаказНаПеремещение");
			
		Если Не ЗначениеЗаполнено(РаспоряжениеНаПеремещение) Тогда
			РаспоряжениеНаПеремещение = ОбщегоНазначения.ВыгрузитьКолонку(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение, "Товары").Выгрузить(),
				"ЗаказНаПеремещение",
				Истина);
		КонецЕсли;
	Иначе
		РаспоряжениеНаПеремещение = Объект.Распоряжение;
	КонецЕсли;
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(
		Объект.Склад,
		Объект.Помещение,
		Объект.Дата);
	
	Запрос.УстановитьПараметр("Распоряжение", РаспоряжениеНаПеремещение);
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение", ИспользоватьАдресноеХранение);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТоварыДокумента	= РезультатЗапроса[РезультатЗапроса.ВГраница() - 1].Выгрузить();
	СерииПоТТН = РезультатЗапроса[РезультатЗапроса.ВГраница()].Выгрузить();
	
	ТоварыДокумента.Индексы.Добавить("Номенклатура, Характеристика, Назначение");
	
	Серии = СерииПоТТН.СкопироватьКолонки();
	
	ЗаполнитьТаблицуСерийПеремещения(Серии, СерииПоТТН, ТоварыДокумента);

	Возврат Серии;
	
КонецФункции

Функция бг_ЕстьПриходныйОрдерНаТоварыСФинальнымСтатусомПоДокументу(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	НЕ ПриходныйОрдерНаТовары.ПометкаУдаления
	|	И ПриходныйОрдерНаТовары.Распоряжение = &ДокументОснование
	|	И ПриходныйОрдерНаТовары.Проведен
	|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Проведен УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Интерфейс для отложенной обработки приходных ордеров.
//
// Параметры:
//   Источник - ДокументСсылка.ПриходныйОрдерНаТовары - приходный ордер, который надо обработать.
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов - вариант обработки.
//   Отказ - Булево - Отказ от обработки.
//
Процедура бг_ОтложеннаяОбработкаОбъекта(Источник, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	
	Обработки.бг_ФормированиеДолгосрочныхРезервов.АктуализироватьРезервыПриПоступленииТовара(
		Источник, ВариантОбработки, Отказ, ДополнительныеСведения);
	
КонецПроцедуры

&Вместо("ДанныеДокументаДляПроведения")
Функция бг_ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры)
	
	Результат = ПродолжитьВызов(Документ, Регистры, ДопПараметры); 
	
	Если ДопПараметры.Свойство("бг_ТребуетсяОтложеннаяОбработка")
		И ДопПараметры.бг_ТребуетсяОтложеннаяОбработка
		И ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ТаблицаРаспределениеЗапасовДвижения") Тогда
		
		НаборЗаписей = РегистрыНакопления.РаспределениеЗапасовДвижения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		НаборЗаписей.Прочитать();
		
		Результат.Вставить("ТаблицаРаспределениеЗапасовДвижения", НаборЗаписей.Выгрузить());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
