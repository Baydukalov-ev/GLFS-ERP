
#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Отказ Или ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("бг_РежимЗаписи", РежимЗаписи);
	
	ДополнительныеСвойства.Вставить("бг_ПредыдущийСтатус",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Ссылка, "Статус"));
		
	ДополнительныеСвойства.Вставить("бг_ТребуетсяОтложеннаяОбработка", ТребуетсяОтложеннаяОбработка(РежимЗаписи));
	ДополнительныеСвойства.Вставить("бг_Распоряжение", ЭтотОбъект.Распоряжение);
	
	бг_ЗаполнитьТипПриемки(ЭтотОбъект);
	бг_Номенклатура.ЗаполнитьПризнакиНаличияАлкогольнойПродукцииПоНоменклатуре(ЭтотОбъект, "Товары");
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		бг_АктуализироватьРасширенныйСтатусТТНВходящей();
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Перем ИмяПоля;
	Перем ДокументОснование;
	Перем ДатаПоступления;
	ТекстСообщенияОНекорректномСоздании = НСтр("ru = 'Приходный ордер на товары нужно вводить из формы ""Приемка"".';
	|en = 'To register a goods receipt, use the ""Receipt"" form.'");

	Если ДанныеЗаполнения = "АвтоТест" Тогда
		Возврат;
	КонецЕсли;	

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда

		ДанныеЗаполнения.Свойство("Склад",                      Склад);
		ДанныеЗаполнения.Свойство("Помещение",                  Помещение);
		ДанныеЗаполнения.Свойство("Распоряжение",               Распоряжение);
		ДанныеЗаполнения.Свойство("ДатаПоступления",            ДатаПоступления);
		ДанныеЗаполнения.Свойство("ЗонаПриемки",                ЗонаПриемки);
		ДанныеЗаполнения.Свойство("СкладскаяОперация",          СкладскаяОперация);
		ДанныеЗаполнения.Свойство("Отправитель",                Отправитель);
		ДанныеЗаполнения.Свойство("ДатаВходящегоДокумента",     ДатаВходящегоДокумента);
		ДанныеЗаполнения.Свойство("НомерВходящегоДокумента",    НомерВходящегоДокумента);
		ДанныеЗаполнения.Свойство("ХозяйственнаяОперация",      ХозяйственнаяОперация);

		Если СкладскаяОперация <> Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров
			И ЗначениеЗаполнено(Распоряжение) Тогда
			СкладскаяОперация = СкладыКлиентСервер.СкладскаяОперацияПриемкиПоХозяйственнойОперации(ХозяйственнаяОперация);
			УстановитьПривилегированныйРежим(Истина);
			Если СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению
#Вставка
				Или СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика
#КонецВставки
				Или СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПродукцииИзПроизводства Тогда
				ЗаполнитьТоварыПоТоварамКПоступлению("НоменклатураКоличество", ДатаПоступления);
			Иначе
				ЗаполнитьТоварыПоТоварамКПоступлению("Номенклатура", ДатаПоступления);
			КонецЕсли;

			Документы.ПриходныйОрдерНаТовары.ЗаполнитьСерииПоРаспоряжению(ЭтотОбъект, Ложь);
			УстановитьПривилегированныйРежим(Ложь);
		ИначеЕсли СкладскаяОперация <> Перечисления.СкладскиеОперации.ВозвратНепринятыхТоваров Тогда
			ВызватьИсключение ТекстСообщенияОНекорректномСоздании;
		КонецЕсли;

	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполненияПосле(ДанныеЗаполнения, СтандартнаяОбработка)
	
	бг_ЗаполнитьТипПриемки(ЭтотОбъект);
	бг_ПроверитьЗаполнениеВесогабаритныхХарактеристикИШтрихкодовНоменклатуры();

КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	Обработки.бг_ФормированиеДолгосрочныхРезервов.СинхронизироватьЗависимыеДокументыПриходногоОрдера(
		ЭтотОбъект,
		Отказ);
	
КонецПроцедуры

&После("ОбработкаУдаленияПроведения")
Процедура бг_ОбработкаУдаленияПроведения(Отказ)
	
	Обработки.бг_ФормированиеДолгосрочныхРезервов.СинхронизироватьЗависимыеДокументыПриходногоОрдера(
		ЭтотОбъект,
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

&После("ИнициализироватьДокумент")
Процедура бг_ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	бг_ЗаполнитьТипПриемки(ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура бг_ЗаполнитьТипПриемки(ДанныеПриходныйОрдерНаТовары)
	
	Если ЗначениеЗаполнено(бг_ТипПриемки) Тогда
		Возврат;
	КонецЕсли;
	
	ТипВнешнейСкладскойСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ДанныеПриходныйОрдерНаТовары.Склад, "бг_ТипВнешнейСкладскойСистемы");
	ТипПриемкиПоУмолчанию = Справочники.битТипыПриемкиWMS.ТипПриемкиПоУмолчанию();
	
	Если ТипЗнч(ДанныеПриходныйОрдерНаТовары.Отправитель) = Тип("СправочникСсылка.Партнеры") Тогда
		бг_ТипПриемки = Справочники.битТипыПриемкиWMS.ТипПриемкиПартнераПоСегменту(ДанныеПриходныйОрдерНаТовары.Отправитель);
		Если Не ЗначениеЗаполнено(бг_ТипПриемки) Тогда
			бг_ТипПриемки = ТипПриемкиПоУмолчанию;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеПриходныйОрдерНаТовары.Отправитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		Если ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.MobileSmarts Тогда
			бг_ТипПриемки = Справочники.битТипыПриемкиWMS.БезПроверки;
		Иначе
			бг_ТипПриемки = ТипПриемкиПоУмолчанию;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеПриходныйОрдерНаТовары.Отправитель) = Тип("СправочникСсылка.Склады") Тогда
		Если бг_ЭтоПеремещениеВнутриОдногоПунктаРазгрузки(ДанныеПриходныйОрдерНаТовары)
			И ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.MobileSmarts Тогда
			бг_ТипПриемки = Справочники.битТипыПриемкиWMS.БезПроверки;
		Иначе
			бг_ТипПриемки = ТипПриемкиПоУмолчанию;
		КонецЕсли;
	Иначе
		бг_ТипПриемки = ТипПриемкиПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ЭтоПеремещениеВнутриОдногоПунктаРазгрузки(ДанныеПриходныйОрдерНаТовары)
	
	СкладОтправитель = ДанныеПриходныйОрдерНаТовары.Отправитель;
	СкладПолучатель = ДанныеПриходныйОрдерНаТовары.Склад;
	
	СкладыПеремещения = Новый Массив;
	СкладыПеремещения.Добавить(СкладОтправитель);
	СкладыПеремещения.Добавить(СкладПолучатель);
	
	ПунктыРазгрузкиСкладов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СкладыПеремещения, "бг_ПунктРазгрузки");
	
	Возврат ПунктыРазгрузкиСкладов.Получить(СкладОтправитель) = ПунктыРазгрузкиСкладов.Получить(СкладПолучатель);
	
КонецФункции

Процедура бг_АктуализироватьРасширенныйСтатусТТНВходящей()
	
	Если Не бг_ЕстьАлкогольнаяПродукция Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("бг_НеВыполнятьАктуализациюРасширенногоСтатусаТТН")
		И ДополнительныеСвойства.бг_НеВыполнятьАктуализациюРасширенногоСтатусаТТН = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Ссылка);
	
	Если ДанныеТТНВходящей <> Неопределено Тогда
		Документы.ТТНВходящаяЕГАИС.бг_ОбновитьРасширенныйСтатусЕГАИС(ДанныеТТНВходящей.Документ);
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяОтложеннаяОбработка(РежимЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДД.ЗаказПоставщику КАК Ссылка
	|ПОМЕСТИТЬ втЗаказПоставщику
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДД
	|ГДЕ
	|	ДД.Ссылка = &Распоряжение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВтТоварыПосле
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДД.Номенклатура КАК Номенклатура,
	|	ДД.Серия.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДД.Количество КАК Количество
	|ПОМЕСТИТЬ втРазница
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ДД
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК Реквизиты
	|	ПО ДД.Ссылка = Реквизиты.Ссылка
	|ГДЕ
	|	ДД.Ссылка = &Ссылка
	|	И Реквизиты.Проведен
	|	И Реквизиты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтТоварыПосле.Номенклатура,
	|	ВтТоварыПосле.Серия.бг_УпаковкаПаллета,
	|	-ВтТоварыПосле.Количество
	|ИЗ
	|	ВтТоварыПосле КАК ВтТоварыПосле
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И &ЭтоПроведение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Разница.Номенклатура КАК Номенклатура,
	|	СУММА(Разница.Количество) КАК Количество,
	|	Разница.УпаковкаПаллета КАК УпаковкаПаллета
	|ИЗ
	|	втРазница КАК Разница
	|
	|СГРУППИРОВАТЬ ПО
	|	Разница.Номенклатура,
	|	Разница.УпаковкаПаллета
	|
	|ИМЕЮЩИЕ
	|	СУММА(Разница.Количество) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДД.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ДД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗаказПоставщику КАК ЗаказПоставщику
	|		ПО ДД.бг_ЗаказПоставщикуИсточникОбеспечения = ЗаказПоставщику.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Распоряжение", ЭтотОбъект.Распоряжение);
	Запрос.УстановитьПараметр("Статус", ЭтотОбъект.Статус);
	Запрос.УстановитьПараметр("ЭтоПроведение", РежимЗаписи = РежимЗаписиДокумента.Проведение);
	Запрос.УстановитьПараметр("Товары", ЭтотОбъект.Товары.Выгрузить(,"Номенклатура, Серия, Количество"));
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ЕстьИзмененияВПринятыхТоварах = Не Результаты[Результаты.ВГраница() - 1].Пустой();
	ЕстьСвязанныеЗаказы = Не Результаты[Результаты.ВГраница()].Пустой();
	
	Возврат ЕстьИзмененияВПринятыхТоварах И ЕстьСвязанныеЗаказы;
	
КонецФункции

#Область ПроверкаКорректностиНСИ

&НаСервере
Процедура бг_ПроверитьЗаполнениеВесогабаритныхХарактеристикИШтрихкодовНоменклатуры()
	
	Отказ = Ложь;
	
	ТекстСообщенияОНекорректномСоздании = НСтр(
		"ru = 'Невозможно создать ""Приходный ордер на товары"". НСИ заведены некорректно.'");

	ТипВнешнейСкладскойСистемы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Склад,
		"бг_ТипВнешнейСкладскойСистемы");
		
	Если Товары.Количество() > 0 
		И ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		И ТипВнешнейСкладскойСистемы = ОбщегоНазначения.ПредопределенныйЭлемент(
			"Перечисление.бг_ТипыВнешнихСкладскихСистем.Solvo") Тогда
	
		Данные = бг_УпаковкиЕдиницыИзмерения.ДанныеДляПроверкиПолнотыЗаполненияУпаковокИШтрихкодов(
			Товары.Выгрузить());

		Если Данные.Штрихкоды.Количество() > 0 Тогда
			СообщитьОбОшибкахВШтрихкодах(Данные.Штрихкоды, Отказ);
		КонецЕсли;

		Если Данные.ВесогабаритныеХарактеристики.Количество() > 0 Тогда
			СообщитьОбОшибкахВВесогабаритныхХарактеристиках(
				Данные.ВесогабаритныеХарактеристики, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			ВызватьИсключение ТекстСообщенияОНекорректномСоздании;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОбОшибкахВШтрихкодах(Штрихкоды, Отказ);
	
	Отказ = Истина;

	ТекстОшибки = НСтр("ru = 'Для номенклатуры %1 нет штрихкода ед.изм. - ""%2"", упаковка - ""%3""'");

	Для Каждого СтрокаШтриход Из Штрихкоды Цикл
		
		ТекстСообщения = СтрШаблон(
			ТекстОшибки,
			СтрокаШтриход.Номенклатура,
			СтрокаШтриход.ЕдиницаИзмерения,
			СтрокаШтриход.Упаковка);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаШтриход.Номенклатура);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СообщитьОбОшибкахВВесогабаритныхХарактеристиках(ВесогабаритныеХарактеристики, Отказ);
	
	ТекстОшибки = НСтр("ru = 'Для упаковки %1 не заполнен параметр - ""%2"". Номенклатура %3'");

	Для Каждого СтрокаВГХ Из ВесогабаритныеХарактеристики Цикл
		
		Если СтрокаВГХ.ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Паллета Тогда
			
			Если СтрокаВГХ.КоличествоМестВСлое = 0 Тогда
				ТекстСообщения = СтрШаблон(
					ТекстОшибки,
					СтрокаВГХ.Упаковка,
					НСтр("ru = 'Количество мест в слое'"),
					СтрокаВГХ.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаВГХ.Упаковка);
	
			КонецЕсли;	
			
			Если СтрокаВГХ.КоличествоСлоевВПаллете = 0 Тогда
				ТекстСообщения = СтрШаблон(
					ТекстОшибки,
					СтрокаВГХ.Упаковка,
					НСтр("ru = 'Количество слоев в паллете'"),
					СтрокаВГХ.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения ,СтрокаВГХ.Упаковка);
			КонецЕсли;

		КонецЕсли;
		
		Если СтрокаВГХ.ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Коробка
			Или СтрокаВГХ.ТипЕдиницыИзмерения = Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда

			
			Если СтрокаВГХ.Вес = 0 Тогда
				ТекстСообщения = СтрШаблон(
					ТекстОшибки,
					СтрокаВГХ.Упаковка,
					НСтр("ru = 'Вес'"),
					СтрокаВГХ.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаВГХ.Упаковка);
			КонецЕсли;	
			
			Если СтрокаВГХ.Высота = 0 Тогда
				ТекстСообщения = СтрШаблон(
					ТекстОшибки,
					СтрокаВГХ.Упаковка,
					НСтр("ru = 'Высота'"),
					СтрокаВГХ.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаВГХ.Упаковка);
			КонецЕсли;	
			
			Если СтрокаВГХ.Глубина = 0 Тогда
				ТекстСообщения = СтрШаблон(
					ТекстОшибки,
					СтрокаВГХ.Упаковка,
					НСтр("ru = 'Глубина'"),
					СтрокаВГХ.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаВГХ.Упаковка);
			КонецЕсли;	
			
			Если СтрокаВГХ.Ширина = 0 Тогда
				ТекстСообщения = СтрШаблон(
					ТекстОшибки,
					СтрокаВГХ.Упаковка,
					НСтр("ru = 'Ширина'"),
					СтрокаВГХ.Номенклатура);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СтрокаВГХ.Упаковка);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
