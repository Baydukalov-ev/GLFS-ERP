#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	
	СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВУТМ;
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	
	СтатусыБазовыйПроцесс.Ошибка = 
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
				ДокументСсылка,
				СтатусОбработки,
				СтатусыБазовыйПроцесс);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС -
//                            Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.бг_Подтвержден;
	СтатусыБазовыйПроцесс.Обрабатывается =
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Неопределено;
	СтатусыБазовыйПроцесс.Ошибка =
		Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ТекущееСостояниеОпределено(ДополнительныеПараметры) Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = СтатусыБазовыйПроцесс;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПолученЕГАИС",
				ДополнительныеПараметры.СтатусОбработки,
				Статусы,
				ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = СтатусыБазовыйПроцесс;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПроведенЕГАИС",
				ДополнительныеПараметры.СтатусОбработки,
				Статусы,
				ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры для расчета статуса документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, 
														Операция, 
														ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
				ДокументСсылка,
				ПараметрыОбновления,
				ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры для расчета статуса документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, 
											Операция, 
											СтатусОбработки, 
											ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
				ДокументСсылка,
				ПараметрыОбновления,
				ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС -
//                            Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, 
											Операция, 
											ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
				ДокументСсылка,
				ПараметрыОбновления,
				ДополнительныеПараметры);
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС -
//                           Документ, для которого требуется обновить статус.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа ЕГАИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	Возврат РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
				ДокументСсылка,
				ПараметрыОбновления,
				ДополнительныеПараметры);
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС -
//                          Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(
		Таблица, 
		0, 
		Исходящий,
		Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС, 
		ДокументСсылка);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, 
										ПредыдущийСтатус,
										НовыйСтатус,
										ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(
		ДокументСсылка, 
		ПредыдущийСтатус,
		НовыйСтатус,
		ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.КПередаче;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, не требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(
		Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС КАК УведомлениеОНачалеОборота
	|		ПО СтатусыДокументовЕГАИС.Документ = УведомлениеОНачалеОборота.Ссылка
	|ГДЕ
	|	УведомлениеОНачалеОборота.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ УведомлениеОНачалеОборота.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (УведомлениеОНачалеОборота.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (УведомлениеОНачалеОборота.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС КАК УведомлениеОНачалеОборота
	|		ПО СтатусыДокументовЕГАИС.Документ = УведомлениеОНачалеОборота.Ссылка
	|ГДЕ
	|	УведомлениеОНачалеОборота.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ УведомлениеОНачалеОборота.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (УведомлениеОНачалеОборота.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (УведомлениеОНачалеОборота.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	
КонецФункции

#КонецОбласти

#Область XMLСообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат УведомлениеОНачалеОборотаXML(ДокументСсылка);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ВЫБОР КОГДА ОрганизацияЕГАИС.Сопоставлено И ОрганизацияЕГАИС.СоответствуетОрганизации Тогда ЗначениеРазрешено(ОрганизацияЕГАИС.Контрагент)
	|	КОГДА ОрганизацияЕГАИС.Сопоставлено И НЕ ОрганизацияЕГАИС.СоответствуетОрганизации Тогда ЗначениеРазрешено(ОрганизацияЕГАИС.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА КОНЕЦ ";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Возвращает минимальную дату первой поставки, которая отличается от указанной даты уведомления
// на 4 рабочих дня, входящих в основной производственный календарь.
//
// Параметры:
//   ДатаУведомления - Дата - дата уведомления, от которой нужно рассчитать количество дней.
//
// Возвращаемое значение:
//   Дата, Неопределено - дата первой поставки, увеличенная на 4 рабочих дня, входящих в
//                        основной производственный календарь.
//                        Если не рассчитана возвращается Неопределено.
//
Функция ДатаПервойПоставки(Знач ДатаУведомления) Экспорт
	
	СдвигРабочихДней = 4;
	
	Возврат КалендарныеГрафики.ДатаПоКалендарю(
		КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(),
		ДатаУведомления,
		СдвигРабочихДней,
		Ложь);
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекущееСостояниеОпределено(ДополнительныеПараметры)
	
	Возврат ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.Свойство("ТекущееСостояние")
			И ДополнительныеПараметры.ТекущееСостояние <> Неопределено;
	
КонецФункции

#Область XMLСообщенияЕГАИС

Функция УведомлениеОНачалеОборотаXML(ДокументСсылка)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС;
	
	ДанныеДляУведомленияXML = ДанныеДляУведомленияXML(ДокументСсылка);
	
	Если Не ЗначениеЗаполнено(ДанныеДляУведомленияXML.Уведомитель) Тогда
		Возврат УведомлениеXMLОшибкой(
			Операция,
			ДокументСсылка, 
			НСтр("ru = 'Не заполнен уведомитель.'"));
	КонецЕсли;
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(
		Операция,
		ДанныеДляУведомленияXML.ФорматОбмена);
		
	ИмяТипа = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(
		Операция,
		ДанныеДляУведомленияXML.ФорматОбмена);
	
	Если Не ЗначениеЗаполнено(ПространствоИмен) Или Не ЗначениеЗаполнено(ИмяТипа) Тогда
		Возврат УведомлениеXMLОшибкой(
			Операция, 
			ДокументСсылка,
			СтрШаблон(
				НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"),
				ДанныеДляУведомленияXML.ФорматОбмена));
	КонецЕсли;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	УведомлениеОНачалеОборотаXDTO = УведомлениеОНачалеОборотаXDTO(
		ПространствоИмен, 
		ДанныеДляУведомленияXML,
		СообщениеXML);
		
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(
		УведомлениеОНачалеОборотаXDTO,
		ДанныеДляУведомленияXML.ИдентификаторФСРАР,
		ПространствоИмен,
		ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ДанныеДляУведомленияXML.Уведомитель;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ДанныеДляУведомленияXML.ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);
	
КонецФункции

Функция ДанныеДляУведомленияXML(ДокументСсылка)
	
	ДанныеДляУведомленияXML = Новый Структура(
		"Идентификатор,
		|Уведомитель,
		|ИдентификаторФСРАР,
		|ФорматОбмена,
		|Номер,
		|Дата, 
		|ТипОрганизации,
		|Производитель,
		|ВидАлкогольнойПродукцииНаименование,
		|ВидАлкогольнойПродукцииКод,
		|НаименованиеПолное,
		|ТипПива,
		|СпособОбработкиПива,
		|НаименованиеПолноеНаЯзыкеПроизводителя,
		|Бренд,
		|СтранаПроисхожденияКод,
		|КрепостьМин,
		|КрепостьМакс,
		|РынокПоставки,
		|НациональныйСтандарт,
		|НациональныйСтандартНаименование,
		|НациональныйСтандартНаименованиеПолное,
		|ОтличительныеХарактеристики,
		|ТемператураМин,
		|ТемператураМакс,
		|ВлажностьМин,
		|ВлажностьМакс,
		|ОтличительныеХарактеристикиХранения,
		|КодОКПД2,
		|КодТНВЭД,
		|ДекларацияОСоответствии,
		|ДекларацияОСоответствииНомер,
		|ДекларацияОСоответствииДатаНачала,
		|ДекларацияОСоответствииДатаОкончания,
		|СертификатСоответствия,
		|СертификатСоответствияНомер,
		|СертификатСоответствияДатаНачала,
		|СертификатСоответствияДатаОкончания,
		|ДатаПервойПоставки,
		|НаименованиеТоварногоЗнака,
		|НомерГосударственнойРегистрации,
		|ДатаГосударственнойРегистрации,
		|НаименованиеПравообладателя,
		|УсловияПеревозки,
		|УсловияРеализации,
		|УсловияУтилизации,
		|Комментарий");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УведомлениеОНачалеОборота.Номер КАК Номер,
	|	УведомлениеОНачалеОборота.Дата КАК Дата,
	|	УведомлениеОНачалеОборота.ОрганизацияЕГАИС КАК Уведомитель,
	|	УведомлениеОНачалеОборота.ОрганизацияЕГАИС.Код КАК ИдентификаторФСРАР,
	|	УведомлениеОНачалеОборота.ОрганизацияЕГАИС.ФорматОбмена КАК ОрганизацияЕГАИСФорматОбмена,
	|	УведомлениеОНачалеОборота.ТипОрганизации КАК ТипОрганизации,
	|	УведомлениеОНачалеОборота.Производитель КАК Производитель,
	|	УведомлениеОНачалеОборота.ВидАлкогольнойПродукции.Наименование КАК ВидАлкогольнойПродукцииНаименование,
	|	УведомлениеОНачалеОборота.ВидАлкогольнойПродукции.Код КАК ВидАлкогольнойПродукцииКод,
	|	УведомлениеОНачалеОборота.НаименованиеПолное КАК НаименованиеПолное,
	|	УведомлениеОНачалеОборота.ТипПива КАК ТипПива,
	|	УведомлениеОНачалеОборота.СпособОбработкиПива КАК СпособОбработкиПива,
	|	УведомлениеОНачалеОборота.НаименованиеПолноеНаЯзыкеПроизводителя КАК НаименованиеПолноеНаЯзыкеПроизводителя,
	|	УведомлениеОНачалеОборота.Бренд КАК Бренд,
	|	УведомлениеОНачалеОборота.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	УведомлениеОНачалеОборота.КрепостьМин КАК КрепостьМин,
	|	УведомлениеОНачалеОборота.КрепостьМакс КАК КрепостьМакс,
	|	УведомлениеОНачалеОборота.РынокПоставки КАК РынокПоставки,
	|	УведомлениеОНачалеОборота.НациональныйСтандарт КАК НациональныйСтандарт,
	|	УведомлениеОНачалеОборота.НациональныйСтандарт.Наименование КАК НациональныйСтандартНаименование,
	|	УведомлениеОНачалеОборота.НациональныйСтандарт.НаименованиеПолное КАК НациональныйСтандартНаименованиеПолное,
	|	УведомлениеОНачалеОборота.ОтличительныеХарактеристики КАК ОтличительныеХарактеристики,
	|	УведомлениеОНачалеОборота.ТемператураМин КАК ТемператураМин,
	|	УведомлениеОНачалеОборота.ТемператураМакс КАК ТемператураМакс,
	|	УведомлениеОНачалеОборота.ВлажностьМин КАК ВлажностьМин,
	|	УведомлениеОНачалеОборота.ВлажностьМакс КАК ВлажностьМакс,
	|	УведомлениеОНачалеОборота.ОтличительныеХарактеристикиХранения.Значение КАК ОтличительныеХарактеристикиХранения,
	|	УведомлениеОНачалеОборота.КодОКПД2.Код КАК КодОКПД2,
	|	УведомлениеОНачалеОборота.КодТНВЭД.Код КАК КодТНВЭД,
	|	УведомлениеОНачалеОборота.ДекларацияОСоответствии КАК ДекларацияОСоответствии,
	|	УведомлениеОНачалеОборота.ДекларацияОСоответствии.Номер КАК ДекларацияОСоответствииНомер,
	|	УведомлениеОНачалеОборота.ДекларацияОСоответствии.ДатаНачалаСрокаДействия КАК ДекларацияОСоответствииДатаНачала,
	|	УведомлениеОНачалеОборота.ДекларацияОСоответствии.ДатаОкончанияСрокаДействия КАК ДекларацияОСоответствииДатаОкончания,
	|	УведомлениеОНачалеОборота.СертификатСоответствия КАК СертификатСоответствия,
	|	УведомлениеОНачалеОборота.СертификатСоответствия.Номер КАК СертификатСоответствияНомер,
	|	УведомлениеОНачалеОборота.СертификатСоответствия.ДатаНачалаСрокаДействия КАК СертификатСоответствияДатаНачала,
	|	УведомлениеОНачалеОборота.СертификатСоответствия.ДатаОкончанияСрокаДействия КАК СертификатСоответствияДатаОкончания,
	|	УведомлениеОНачалеОборота.ДатаПервойПоставки КАК ДатаПервойПоставки,
	|	УведомлениеОНачалеОборота.НаименованиеТоварногоЗнака КАК НаименованиеТоварногоЗнака,
	|	УведомлениеОНачалеОборота.НомерГосударственнойРегистрации КАК НомерГосударственнойРегистрации,
	|	УведомлениеОНачалеОборота.ДатаГосударственнойРегистрации КАК ДатаГосударственнойРегистрации,
	|	УведомлениеОНачалеОборота.НаименованиеПравообладателя КАК НаименованиеПравообладателя,
	|	УведомлениеОНачалеОборота.УсловияПеревозки.Значение КАК УсловияПеревозки,
	|	УведомлениеОНачалеОборота.УсловияРеализации.Значение КАК УсловияРеализации,
	|	УведомлениеОНачалеОборота.УсловияУтилизации.Значение КАК УсловияУтилизации,
	|	УведомлениеОНачалеОборота.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС КАК УведомлениеОНачалеОборота
	|ГДЕ
	|	УведомлениеОНачалеОборота.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Емкости.НомерСтроки КАК НомерСтроки,
	|	Емкости.Объем КАК Объем,
	|	Емкости.ВидТары КАК ВидТары,
	|	Емкости.ОписаниеТары КАК ОписаниеТары,
	|	Емкости.Этикетка КАК Этикетка,
	|	Емкости.НазначениеТары КАК НазначениеТары,
	|	Емкости.СрокГодности КАК СрокГодности
	|ИЗ
	|	Документ.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС.Емкости КАК Емкости
	|ГДЕ
	|	Емкости.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состав.НомерСтроки КАК НомерСтроки,
	|	Состав.Сырье КАК Сырье,
	|	Состав.Сырье.Значение КАК СырьеЗначение,
	|	Состав.Компонент КАК Компонент,
	|	Состав.ДругаяАлкогольнаяПродукция КАК ДругаяАлкогольнаяПродукция,
	|	Состав.ДругаяАлкогольнаяПродукция.Наименование КАК ДругаяАлкогольнаяПродукцияНаименование,
	|	Состав.ДругаяАлкогольнаяПродукция.Код КАК ДругаяАлкогольнаяПродукцияКод,
	|	Состав.ИноеСырье КАК ИноеСырье
	|ИЗ
	|	Документ.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС.Состав КАК Состав
	|ГДЕ
	|	Состав.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТехническиеРегламенты.НомерСтроки КАК НомерСтроки,
	|	ТехническиеРегламенты.Регламент КАК Регламент,
	|	ТехническиеРегламенты.Номер КАК Номер,
	|	ТехническиеРегламенты.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Документ.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС.ТехническиеРегламенты КАК ТехническиеРегламенты
	|ГДЕ
	|	ТехническиеРегламенты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТехнологическиеИнструкции.НомерСтроки КАК НомерСтроки,
	|	ТехнологическиеИнструкции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТехнологическиеИнструкции.Номер КАК Номер,
	|	ТехнологическиеИнструкции.Дата КАК Дата,
	|	ТехнологическиеИнструкции.Файл КАК Файл
	|ИЗ
	|	Документ.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС.ТехнологическиеИнструкции КАК ТехнологическиеИнструкции
	|ГДЕ
	|	ТехнологическиеИнструкции.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатЗапроса = МассивРезультатов[0]; // Результат запроса по шапке.
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
			
		ЗаполнитьЗначенияСвойств(ДанныеДляУведомленияXML, Выборка);
			
		ДанныеДляУведомленияXML.Идентификатор = Строка(ДокументСсылка.УникальныйИдентификатор());
		ДанныеДляУведомленияXML.ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(
			Выборка.ОрганизацияЕГАИСФорматОбмена);
		ДанныеДляУведомленияXML.Номер = СокрЛП(Выборка.Номер);	
	КонецЕсли;
	
	ДанныеДляУведомленияXML.Вставить("Емкости", МассивРезультатов[1].Выгрузить());
	ДанныеДляУведомленияXML.Вставить("Состав", МассивРезультатов[2].Выгрузить());
	ДанныеДляУведомленияXML.Вставить("ТехническиеРегламенты", МассивРезультатов[3].Выгрузить());
	ДанныеДляУведомленияXML.Вставить("ТехнологическиеИнструкции", МассивРезультатов[4].Выгрузить());
	
	Возврат ДанныеДляУведомленияXML;
	
КонецФункции

Функция УведомлениеXMLОшибкой(Операция, ДокументСсылка, ТекстОшибки)
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);	
	
КонецФункции

#КонецОбласти

#Область XDTO

Функция УведомлениеОНачалеОборотаXDTO(ПространствоИмен, ДанныеДляУведомленияXML, СообщениеXML)
	
	FrapClaims = FrapClaims(ПространствоИмен, СообщениеXML);
	
	FrapClaims.Header = Header(
		ПространствоИмен,
		FrapClaims,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	Возврат FrapClaims; 
	
КонецФункции

Функция FrapClaims(ПространствоИмен, СообщениеXML)
	
	FrapClaims = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "FrapClaimsType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		FrapClaims,
		"NameDoc",
		"Уведомление о начале оборота на территории РФ АП",
		СообщениеXML);
	
	Возврат FrapClaims;
	
КонецФункции

Функция Header(ПространствоИмен, FrapClaims, ДанныеДляУведомленияXML, СообщениеXML)
	
	Header = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", FrapClaims);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"DocNumber",
		ДанныеДляУведомленияXML.Номер,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"DocDate",
		ДанныеДляУведомленияXML.Дата,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(
		Header,
		"Notifier",
		ДанныеДляУведомленияXML.Уведомитель,,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TypeOrg",
		ДанныеДляУведомленияXML.ТипОрганизации,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(
		Header,
		"Producer",
		ДанныеДляУведомленияXML.Производитель,,
		СообщениеXML);
	
	VidAP = СтрШаблон(
		"%1 %2",
		СокрЛП(ДанныеДляУведомленияXML.ВидАлкогольнойПродукцииНаименование),
		СокрЛП(ДанныеДляУведомленияXML.ВидАлкогольнойПродукцииКод));
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"VidAP",
		VidAP,
		СообщениеXML);
	
	Header.NameAP = NameAP(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"FullNameManufacturerLanguage",
		СокрЛП(ДанныеДляУведомленияXML.НаименованиеПолноеНаЯзыкеПроизводителя),
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"Brend",
		ДанныеДляУведомленияXML.Бренд,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"CountryOrigin",
		ДанныеДляУведомленияXML.СтранаПроисхожденияКод,
		СообщениеXML);
	
	Header.AlcVolume = AlcVolume(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	Header.CapacityList = CapacityList(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"MarketSupply",
		СокрЛП(ДанныеДляУведомленияXML.РынокПоставки),
		СообщениеXML);
	
	Header.CompositionProducts = CompositionProducts(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	ЗаполнитьТехнологическиеРегламентыВXDTO(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML);
	
	Header.AdditionalDocuments = AdditionalDocuments(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"DistinctiveCharacteristics",
		СокрЛП(ДанныеДляУведомленияXML.ОтличительныеХарактеристики),
		СообщениеXML);
	
	Header.StorageTemperature = StorageTemperature(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	Header.StorageHumidity = StorageHumidity(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"OtherStorageCharacteristics",
		СокрЛП(ДанныеДляУведомленияXML.ОтличительныеХарактеристикиХранения),
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"CodOKPD2",
		СокрЛП(ДанныеДляУведомленияXML.КодОКПД2),
		СообщениеXML);
	
	Header.CodTNVED = CodTNVED(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	Header.DeclarationCertificate = DeclarationCertificate(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"DateFirstDelivery",
		ДанныеДляУведомленияXML.ДатаПервойПоставки,
		СообщениеXML);
	
	TrademarkDetails = TrademarkDetails(
		ПространствоИмен,
		Header,
		ДанныеДляУведомленияXML,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TrademarkDetails",
		TrademarkDetails,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TermsTransportation",
		ДанныеДляУведомленияXML.УсловияПеревозки,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TermsSale",
		ДанныеДляУведомленияXML.УсловияРеализации,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"TermsDisposal",
		ДанныеДляУведомленияXML.УсловияУтилизации,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Header,
		"Note",
		ДанныеДляУведомленияXML.Комментарий,
		СообщениеXML);
	
	Возврат Header;
	
КонецФункции

Функция NameAP(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	NameAP = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "NameAP", Header);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		NameAP,
		"FullName",
		СокрЛП(ДанныеДляУведомленияXML.НаименованиеПолное),
		СообщениеXML);
	
	Если ЗначениеЗаполнено(ДанныеДляУведомленияXML.ТипПива) Тогда
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			NameAP,
			"TypeBeer",
			СокрЛП(ДанныеДляУведомленияXML.ТипПива),
			СообщениеXML);
		Если ЗначениеЗаполнено(ДанныеДляУведомленияXML.СпособОбработкиПива) Тогда
			СпособыОбработки = СтрРазделить(ДанныеДляУведомленияXML.СпособОбработкиПива, ";", Ложь);
			Для каждого СпособОбработки Из СпособыОбработки Цикл
				ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
					NameAP,
					"BeerProcessingMethod",
					СокрЛП(СпособОбработки),
					СообщениеXML);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат NameAP;
	
КонецФункции

Функция AlcVolume(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	AlcVolume = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AlcVolume", Header);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		AlcVolume,
		"AlcVolumeMin",
		ДанныеДляУведомленияXML.КрепостьМин,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		AlcVolume,
		"AlcVolumeMax",
		ДанныеДляУведомленияXML.КрепостьМакс,
		СообщениеXML);
	
	Возврат AlcVolume;
	
КонецФункции

// Возвращает ОбъектXDTO Position с заполненным свойством Identity. 
//
Функция Position(ПространствоИмен, ОбъектXDTOРодитель, НомерПозиции, СообщениеXML)
	
	Position = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"Position",
		ОбъектXDTOРодитель);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Position,
		"Identity",
		Строка(НомерПозиции),
		СообщениеXML);
	
	Возврат Position;
	
КонецФункции

#Область ЕмкостиXDTO

Функция CapacityList(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	CapacityList = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "CapacityList", Header);
	
	Для каждого Емкость Из ДанныеДляУведомленияXML.Емкости Цикл
		CapacityDescr = CapacityDescr(
			ПространствоИмен,
			CapacityList,
			Емкость,
			СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			CapacityList,
			"CapacityDescr",
			CapacityDescr,
			СообщениеXML);
	КонецЦикла;
	
	Возврат CapacityList;
	
КонецФункции

Функция CapacityDescr(ПространствоИмен, CapacityList, Емкость, СообщениеXML)
	
	CapacityDescr = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "CapacityDescr", CapacityList);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		CapacityDescr,
		"Capacity",
		Емкость.Объем,
		СообщениеXML);
	
	DescriptionPackaging = DescriptionPackaging(
		ПространствоИмен,
		CapacityDescr,
		Емкость,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		CapacityDescr,
		"DescriptionPackaging",
		DescriptionPackaging,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		CapacityDescr,
		"ShelfLife",
		Емкость.СрокГодности,
		СообщениеXML);
	
	Возврат CapacityDescr;
	
КонецФункции

Функция DescriptionPackaging(ПространствоИмен, CapacityDescr, Емкость, СообщениеXML)
	
	DescriptionPackaging = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"DescriptionPackaging",
		CapacityDescr);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DescriptionPackaging,
		"PackageType",
		СокрЛП(Емкость.ВидТары),
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DescriptionPackaging,
		"ContComposition",
		СокрЛП(Емкость.ОписаниеТары),
		СообщениеXML);
	
	LabelFotoAP = LabelFotoAP(
		ПространствоИмен,
		DescriptionPackaging,
		Емкость,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DescriptionPackaging,
		"LabelFotoAP",
		LabelFotoAP,
		СообщениеXML);
	
	Возврат DescriptionPackaging;
	
КонецФункции

Функция LabelFotoAP(ПространствоИмен, DescriptionPackaging, Емкость, СообщениеXML)
	
	LabelFotoAP = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LabelFotoAP", DescriptionPackaging);
	
	Если ЗначениеЗаполнено(Емкость.Этикетка) Тогда
		ДанныеФайлаЭтикетки = РаботаСФайлами.ДвоичныеДанныеФайла(Емкость.Этикетка, Ложь);
		Если ДанныеФайлаЭтикетки <> Неопределено Тогда
			ЭтикеткаBase64 = Base64Строка(ДанныеФайлаЭтикетки);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
				LabelFotoAP,
				"LabelFoto",
				ЭтикеткаBase64,
				СообщениеXML);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		LabelFotoAP,
		"CapacityDescrVal",
		СокрЛП(Емкость.НазначениеТары),
		СообщениеXML);
	
	Возврат LabelFotoAP;
	
КонецФункции

#КонецОбласти

#Область СоставXDTO

Функция CompositionProducts(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	CompositionProducts = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "CompositionProducts", Header);
	
	Для каждого КомпозиционнаяПозиция Из ДанныеДляУведомленияXML.Состав Цикл
		CompositionPosition = CompositionPosition(
			ПространствоИмен,
			CompositionProducts,
			КомпозиционнаяПозиция,
			СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			CompositionProducts,
			"Position",
			CompositionPosition,
			СообщениеXML);
	КонецЦикла;
	
	Возврат CompositionProducts;
	
КонецФункции

Функция CompositionPosition(ПространствоИмен, CompositionProducts, КомпозиционнаяПозиция, СообщениеXML)
	
	CompositionPosition = Position(
		ПространствоИмен,
		CompositionProducts,
		КомпозиционнаяПозиция.НомерСтроки,
		СообщениеXML);
	
	ЕстьСырье = Ложь;
	ЕстьДругаяАлкогольнаяПродукция = Ложь;
	
	Если ЗначениеЗаполнено(КомпозиционнаяПозиция.Сырье) Тогда
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			CompositionPosition,
			"CompulsoryRawMaterials",
			СокрЛП(КомпозиционнаяПозиция.СырьеЗначение),
			СообщениеXML);
		
		Если ЗначениеЗаполнено(КомпозиционнаяПозиция.Компонент) Тогда
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
				CompositionPosition,
				"CompulsoryRawMaterialsDescr",
				СокрЛП(КомпозиционнаяПозиция.Компонент),
				СообщениеXML);
		КонецЕсли;
		
		ЕстьСырье = Истина; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомпозиционнаяПозиция.ДругаяАлкогольнаяПродукция) Тогда
		
		Если ЕстьСырье Тогда
			АдресОшибки = НСтр("ru = 'Строка %НомерСтроки%. ';
							   |en = 'Строка %НомерСтроки%. '");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", КомпозиционнаяПозиция.НомерСтроки);
			
			ШаблонСообщения = 
				НСтр("ru = 'списка ""Состав"" указана другая алкогольная продукция одновременно с сырьем.';
					|en = 'списка ""Состав"" указана другая алкогольная продукция одновременно с сырьем.'");
			
			ТекстСообщения = АдресОшибки + ШаблонСообщения;
				
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		OtherAP = СтрШаблон(
			"%1 %2",
			СокрЛП(КомпозиционнаяПозиция.ДругаяАлкогольнаяПродукцияНаименование),
			СокрЛП(КомпозиционнаяПозиция.ДругаяАлкогольнаяПродукцияКод));
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			CompositionPosition,
			"OtherAP",
			OtherAP,
			СообщениеXML);
		
		ЕстьДругаяАлкогольнаяПродукция = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомпозиционнаяПозиция.ИноеСырье) Тогда
		
		Если ЕстьСырье Или ЕстьДругаяАлкогольнаяПродукция Тогда
			АдресОшибки = НСтр("ru = 'Строка %НомерСтроки%. ';
								|en = 'Строка %НомерСтроки%. '");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", КомпозиционнаяПозиция.НомерСтроки);
			
			ШаблонСообщения = 
				НСтр("ru = 'списка ""Состав"" указано Иное сырье одновременно с сырьем или другой алкогольной продукцией.';
					|en = 'списка ""Состав"" указано Иное сырье одновременно с сырьем или другой алкогольной продукцией.'");
			
			ТекстСообщения = АдресОшибки + ШаблонСообщения;
				
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			CompositionPosition,
			"OtherRawMaterials",
			СокрЛП(КомпозиционнаяПозиция.ИноеСырье),
			СообщениеXML);
		
	КонецЕсли;
	
	Возврат CompositionPosition;
	
КонецФункции

#КонецОбласти

#Область ТехническиеРегламентыИНациональныеСтандартыXDTO

Процедура ЗаполнитьТехнологическиеРегламентыВXDTO(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	Для каждого Регламент Из ДанныеДляУведомленияXML.ТехническиеРегламенты Цикл
		
		TechReglStandard = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TechReglStandard", Header);
		
		TechRegl = TechRegl(
			ПространствоИмен,
			TechReglStandard,
			Регламент,
			СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			TechReglStandard,
			"TechRegl",
			TechRegl,
			СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			Header,
			"TechReglStandard",
			TechReglStandard,
			СообщениеXML);
		
	КонецЦикла;
	
	// Добавим национальный стандарт, так как используется всегда один, то он у нас в реквизите документа, 
	// а не в табличной части.
	Если ЗначениеЗаполнено(ДанныеДляУведомленияXML.НациональныйСтандарт) Тогда
		
		TechReglStandard = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TechReglStandard", Header);
		
		TechStandard = TechStandard(
			ПространствоИмен,
			TechReglStandard,
			ДанныеДляУведомленияXML,
			СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			TechReglStandard,
			"TechStandard",
			TechStandard,
			СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			Header,
			"TechReglStandard",
			TechReglStandard,
			СообщениеXML);
		
	КонецЕсли;
	
КонецПроцедуры

Функция TechRegl(ПространствоИмен, TechReglStandard, Регламент, СообщениеXML)
	
	TechRegl = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TechRegl", TechReglStandard);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TechRegl,
		"TechReglNumber",
		СокрЛП(Регламент.Номер),
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TechRegl,
		"TechReglName",
		СокрЛП(Регламент.НаименованиеПолное),
		СообщениеXML);
	
	Возврат TechRegl;
	
КонецФункции

Функция TechStandard(ПространствоИмен, TechReglStandard, ДанныеДляУведомленияXML, СообщениеXML)
	
	TechStandard = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TechStandard", TechReglStandard);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TechStandard,
		"StandardNumber",
		СокрЛП(ДанныеДляУведомленияXML.НациональныйСтандартНаименование),
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TechStandard,
		"StandardName",
		СокрЛП(ДанныеДляУведомленияXML.НациональныйСтандартНаименованиеПолное),
		СообщениеXML);
	
	Возврат TechStandard;
	
КонецФункции

#КонецОбласти

#Область ДополнительныеДокументыXDTO

Функция AdditionalDocuments(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	AdditionalDocuments = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "AdditionalDocuments", Header);
	
	НомерПозиции = 0;
	Для каждого ТехнологическаяИнструкция Из ДанныеДляУведомленияXML.ТехнологическиеИнструкции Цикл
		
		НомерПозиции = НомерПозиции + 1;
		
		DocumentsPosition = Position(
			ПространствоИмен,
			AdditionalDocuments,
			НомерПозиции,
			СообщениеXML);
		
		ЗаполнитьТехнологическуюИнструкциюВXDTO(
			ПространствоИмен,
			DocumentsPosition,
			ТехнологическаяИнструкция,
			СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			AdditionalDocuments,
			"Position",
			DocumentsPosition,
			СообщениеXML);
		
	КонецЦикла;
	
	ЗаполнитьНеиспользуемыеДополнительныеДокументыВXDTO(
		ПространствоИмен,
		AdditionalDocuments,
		НомерПозиции,
		СообщениеXML);
	
	Возврат AdditionalDocuments;
	
КонецФункции

Процедура ЗаполнитьТехнологическуюИнструкциюВXDTO(ПространствоИмен,
												DocumentsPosition,
												ТехнологическаяИнструкция,
												СообщениеXML)
	
	AdditionalDoc = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"AdditionalDoc",
		DocumentsPosition);
	
	TechnologicalInstruction = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"TechnologicalInstruction",
		AdditionalDoc);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TechnologicalInstruction,
		"TINumber",
		СокрЛП(ТехнологическаяИнструкция.Номер),
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TechnologicalInstruction,
		"TIDate",
		ТехнологическаяИнструкция.Дата,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TechnologicalInstruction,
		"TIName",
		СокрЛП(ТехнологическаяИнструкция.НаименованиеПолное),
		СообщениеXML);
	
	Если ЗначениеЗаполнено(ТехнологическаяИнструкция.Файл) Тогда
		ДанныеФайлаИнструкции = РаботаСФайлами.ДвоичныеДанныеФайла(ТехнологическаяИнструкция.Файл, Ложь);
		Если ДанныеФайлаИнструкции <> Неопределено Тогда
			ИнструкцияBase64 = Base64Строка(ДанныеФайлаИнструкции);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
				TechnologicalInstruction,
				"TIElectronicView",
				ИнструкцияBase64,
				СообщениеXML);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		AdditionalDoc,
		"TechnologicalInstruction",
		TechnologicalInstruction,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DocumentsPosition,
		"AdditionalDoc",
		AdditionalDoc,
		СообщениеXML);
	
КонецПроцедуры

Процедура ЗаполнитьНеиспользуемыеДополнительныеДокументыВXDTO(ПространствоИмен,
															AdditionalDocuments,
															НомерПозиции,
															СообщениеXML)
	
	// Стандарт организации. 
	НомерПозиции = НомерПозиции + 1;
	ПараметрыЗаполнения = ПараметрыЗаполненияПустогоДополнительногоДокументаВXDTO();
	ПараметрыЗаполнения.НомерПозиции = НомерПозиции;
	ПараметрыЗаполнения.ИмяСвойстваВидДокумента = "OrganizationStandard";
	ПараметрыЗаполнения.ИмяСвойстваНомерДокумента = "OSNumber";
	ПараметрыЗаполнения.ИмяСвойстваДатаДокумента = "OSDate";
	ПараметрыЗаполнения.ИмяСвойстваНаименованиеДокумента = "OSName";
	
	ЗаполнитьПустойДополнительныйДокументВXDTO(
		ПространствоИмен,
		AdditionalDocuments,
		ПараметрыЗаполнения,
		СообщениеXML);
	
	// Международный стандарт страны происхождения. 
	НомерПозиции = НомерПозиции + 1;
	ПараметрыЗаполнения = ПараметрыЗаполненияПустогоДополнительногоДокументаВXDTO();
	ПараметрыЗаполнения.НомерПозиции = НомерПозиции;
	ПараметрыЗаполнения.ИмяСвойстваВидДокумента = "InternationalStandardCountryOrigin";
	ПараметрыЗаполнения.ИмяСвойстваНомерДокумента = "ISCONumber";
	ПараметрыЗаполнения.ИмяСвойстваНаименованиеДокумента = "ISCOName";
	
	ЗаполнитьПустойДополнительныйДокументВXDTO(
		ПространствоИмен,
		AdditionalDocuments,
		ПараметрыЗаполнения,
		СообщениеXML);
	
	// Национальный стандарт страны происхождения. 
	НомерПозиции = НомерПозиции + 1;
	ПараметрыЗаполнения = ПараметрыЗаполненияПустогоДополнительногоДокументаВXDTO();
	ПараметрыЗаполнения.НомерПозиции = НомерПозиции;
	ПараметрыЗаполнения.ИмяСвойстваВидДокумента = "NationalStandardCountryOrigin";
	ПараметрыЗаполнения.ИмяСвойстваНомерДокумента = "NSCONumber";
	ПараметрыЗаполнения.ИмяСвойстваНаименованиеДокумента = "NSCOName";
	
	ЗаполнитьПустойДополнительныйДокументВXDTO(
		ПространствоИмен,
		AdditionalDocuments,
		ПараметрыЗаполнения,
		СообщениеXML);
	
	// Национальный регламент. 
	НомерПозиции = НомерПозиции + 1;
	ПараметрыЗаполнения = ПараметрыЗаполненияПустогоДополнительногоДокументаВXDTO();
	ПараметрыЗаполнения.НомерПозиции = НомерПозиции;
	ПараметрыЗаполнения.ИмяСвойстваВидДокумента = "NationalRegulations";
	ПараметрыЗаполнения.ИмяСвойстваНомерДокумента = "NRNumber";
	ПараметрыЗаполнения.ИмяСвойстваНаименованиеДокумента = "NRName";
	
	ЗаполнитьПустойДополнительныйДокументВXDTO(
		ПространствоИмен,
		AdditionalDocuments,
		ПараметрыЗаполнения,
		СообщениеXML);
	
	// Техническая документация. 
	НомерПозиции = НомерПозиции + 1;
	ПараметрыЗаполнения = ПараметрыЗаполненияПустогоДополнительногоДокументаВXDTO();
	ПараметрыЗаполнения.НомерПозиции = НомерПозиции;
	ПараметрыЗаполнения.ИмяСвойстваВидДокумента = "TechnicalDocumentation";
	ПараметрыЗаполнения.ИмяСвойстваНомерДокумента = "TDNumber";
	ПараметрыЗаполнения.ИмяСвойстваДатаДокумента = "TDDate";
	ПараметрыЗаполнения.ИмяСвойстваНаименованиеДокумента = "TDName";
	ПараметрыЗаполнения.ИмяСвойстваФайлДокумента = "TDElectronicView";
	
	ЗаполнитьПустойДополнительныйДокументВXDTO(
		ПространствоИмен,
		AdditionalDocuments,
		ПараметрыЗаполнения,
		СообщениеXML);
	
	// Рецептура. 
	НомерПозиции = НомерПозиции + 1;
	ПараметрыЗаполнения = ПараметрыЗаполненияПустогоДополнительногоДокументаВXDTO();
	ПараметрыЗаполнения.НомерПозиции = НомерПозиции;
	ПараметрыЗаполнения.ИмяСвойстваВидДокумента = "RC";
	ПараметрыЗаполнения.ИмяСвойстваНомерДокумента = "RCNumber";
	ПараметрыЗаполнения.ИмяСвойстваДатаДокумента = "RCDate";
	ПараметрыЗаполнения.ИмяСвойстваНаименованиеДокумента = "RCName";
	
	ЗаполнитьПустойДополнительныйДокументВXDTO(
		ПространствоИмен,
		AdditionalDocuments,
		ПараметрыЗаполнения,
		СообщениеXML);
	
КонецПроцедуры

Процедура ЗаполнитьПустойДополнительныйДокументВXDTO(ПространствоИмен,
													AdditionalDocuments,
													ПараметрыЗаполнения,
													СообщениеXML)
	
	DocumentsPosition = Position(
		ПространствоИмен,
		AdditionalDocuments,
		ПараметрыЗаполнения.НомерПозиции,
		СообщениеXML);
	
	AdditionalDoc = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"AdditionalDoc",
		DocumentsPosition);
	
	ВидДокументаXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		ПараметрыЗаполнения.ИмяСвойстваВидДокумента,
		AdditionalDoc);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ВидДокументаXDTO,
		ПараметрыЗаполнения.ИмяСвойстваНомерДокумента,
		ЗначениеОтсутствует(),
		СообщениеXML);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ИмяСвойстваДатаДокумента) Тогда
		
		Если ПараметрыЗаполнения.ИмяСвойстваДатаДокумента = "TDDate" Тогда
			ЗначениеСвойства = '19700101';
		Иначе
			ЗначениеСвойства = ПустаяДата();
		КонецЕсли;
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			ВидДокументаXDTO,
			ПараметрыЗаполнения.ИмяСвойстваДатаДокумента,
			ЗначениеСвойства,
			СообщениеXML);
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		ВидДокументаXDTO,
		ПараметрыЗаполнения.ИмяСвойстваНаименованиеДокумента,
		ЗначениеОтсутствует(),
		СообщениеXML);
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.ИмяСвойстваФайлДокумента) Тогда
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			ВидДокументаXDTO,
			ПараметрыЗаполнения.ИмяСвойстваФайлДокумента,
			ПустойФайлPDFBase64(),
			СообщениеXML);
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		AdditionalDoc,
		ПараметрыЗаполнения.ИмяСвойстваВидДокумента,
		ВидДокументаXDTO,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DocumentsPosition,
		"AdditionalDoc",
		AdditionalDoc,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		AdditionalDocuments,
		"Position",
		DocumentsPosition,
		СообщениеXML);
	
КонецПроцедуры

Функция ПараметрыЗаполненияПустогоДополнительногоДокументаВXDTO()
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("НомерПозиции", 0);
	ПараметрыЗаполнения.Вставить("ИмяСвойстваВидДокумента", "");
	ПараметрыЗаполнения.Вставить("ИмяСвойстваНомерДокумента", "");
	ПараметрыЗаполнения.Вставить("ИмяСвойстваДатаДокумента", "");
	ПараметрыЗаполнения.Вставить("ИмяСвойстваНаименованиеДокумента", "");
	ПараметрыЗаполнения.Вставить("ИмяСвойстваФайлДокумента", "");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

Функция StorageTemperature(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	StorageTemperature = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "StorageTemperature", Header);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		StorageTemperature,
		"StorageTemperatureMin",
		ДанныеДляУведомленияXML.ТемператураМин,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		StorageTemperature,
		"StorageTemperatureMax",
		ДанныеДляУведомленияXML.ТемператураМакс,
		СообщениеXML);
	
	Возврат StorageTemperature;
	
КонецФункции

Функция StorageHumidity(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	StorageHumidity = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "StorageHumidity", Header);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		StorageHumidity,
		"StorageHumidityMin",
		ДанныеДляУведомленияXML.ВлажностьМин,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		StorageHumidity,
		"StorageHumidityMax",
		ДанныеДляУведомленияXML.ВлажностьМакс,
		СообщениеXML);
	
	Возврат StorageHumidity;
	
КонецФункции

Функция CodTNVED(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	CodTNVED = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "CodTNVED", Header);
	
	КодТНВЭД = СокрЛП(ДанныеДляУведомленияXML.КодТНВЭД);
	Если СтрДлина(КодТНВЭД) = 10 Тогда
		ЧастиКодаТНВЭД = Новый Массив;
		ЧастиКодаТНВЭД.Добавить(Лев(КодТНВЭД, 4));
		ЧастиКодаТНВЭД.Добавить(Сред(КодТНВЭД, 5, 2));
		ЧастиКодаТНВЭД.Добавить(Сред(КодТНВЭД, 7, 3));
		ЧастиКодаТНВЭД.Добавить(Прав(КодТНВЭД, 1));
		
		КодТНВЭД = СтрСоединить(ЧастиКодаТНВЭД, " "); 
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		CodTNVED,
		"CodTNVEDTS",
		КодТНВЭД,
		СообщениеXML);
	
	Возврат CodTNVED;
	
КонецФункции

#Область ДекларацииИСертификатыXDTO

Функция DeclarationCertificate(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	DeclarationCertificate = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"DeclarationCertificate",
		Header);
	
	// Декларация о соответствии.
	НомерПозиции = 1;
	DeclarationCertificatePosition = Position(
		ПространствоИмен,
		DeclarationCertificate,
		НомерПозиции,
		СообщениеXML);
	
	DeclarCertif = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"DeclarCertif",
		DeclarationCertificatePosition);
	
	Declaration = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"Declaration",
		DeclarCertif);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Declaration,
		"DeclarationNumber",
		СокрЛП(ДанныеДляУведомленияXML.ДекларацияОСоответствииНомер),
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Declaration,
		"DateValidity",
		ДанныеДляУведомленияXML.ДекларацияОСоответствииДатаНачала,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Declaration,
		"DateExpiration",
		ДанныеДляУведомленияXML.ДекларацияОСоответствииДатаОкончания,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DeclarCertif,
		"Declaration",
		Declaration,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DeclarationCertificatePosition,
		"DeclarCertif",
		DeclarCertif,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			DeclarationCertificate,
			"Position",
			DeclarationCertificatePosition,
			СообщениеXML);
			
			
	
	// Сертификат соответствия.
	ПустаяДата = ПустаяДата();
	НомерПозиции = 2;
	DeclarationCertificatePosition = Position(
		ПространствоИмен,
		DeclarationCertificate,
		НомерПозиции,
		СообщениеXML);
	
	DeclarCertif = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"DeclarCertif",
		DeclarationCertificatePosition);
	
	Certificate = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(
		ПространствоИмен,
		"Certificate",
		DeclarCertif);
	
	Если ЗначениеЗаполнено(ДанныеДляУведомленияXML.СертификатСоответствия) Тогда
		РегистрационныйНомер = СокрЛП(ДанныеДляУведомленияXML.СертификатСоответствияНомер);
		ДатаРегистрации = ДанныеДляУведомленияXML.СертификатСоответствияДатаНачала;
		ДатаОкончанияДействия = ДанныеДляУведомленияXML.СертификатСоответствияДатаОкончания;
	Иначе
		РегистрационныйНомер = ЗначениеОтсутствует();
		ДатаРегистрации = ПустаяДата;
		ДатаОкончанияДействия = ПустаяДата;
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Certificate,
		"CertificateNumber",
		РегистрационныйНомер,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Certificate,
		"DateValidity",
		ДатаРегистрации,
		СообщениеXML,,
		Истина);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		Certificate,
		"DateExpiration",
		ДатаОкончанияДействия,
		СообщениеXML,,
		Истина);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DeclarCertif,
		"Certificate",
		Certificate,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		DeclarationCertificatePosition,
		"DeclarCertif",
		DeclarCertif,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
			DeclarationCertificate,
			"Position",
			DeclarationCertificatePosition,
			СообщениеXML);
	
	Возврат DeclarationCertificate;
	
КонецФункции

#КонецОбласти

Функция TrademarkDetails(ПространствоИмен, Header, ДанныеДляУведомленияXML, СообщениеXML)
	
	TrademarkDetails = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TrademarkDetails", Header);
	
	НаименованиеТоварногоЗнака = СокрЛП(ДанныеДляУведомленияXML.НаименованиеТоварногоЗнака);
	НаименованиеПравообладателя = СокрЛП(ДанныеДляУведомленияXML.НаименованиеПравообладателя);
	НомерГосударственнойРегистрации = СокрЛП(ДанныеДляУведомленияXML.НомерГосударственнойРегистрации);
	ДатаГосударственнойРегистрации = ДанныеДляУведомленияXML.ДатаГосударственнойРегистрации;
	ЗначениеОтсутствует = ЗначениеОтсутствует();
	Если Не ЗначениеЗаполнено(НаименованиеТоварногоЗнака) Тогда
		НаименованиеТоварногоЗнака = ЗначениеОтсутствует;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НаименованиеПравообладателя) Тогда
		НаименованиеПравообладателя = ЗначениеОтсутствует;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерГосударственнойРегистрации) Тогда
		НомерГосударственнойРегистрации = "000000";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаГосударственнойРегистрации) Тогда
		ДатаГосударственнойРегистрации = '19700101';
	КонецЕсли;
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TrademarkDetails,
		"TrademarkName",
		НаименованиеТоварногоЗнака,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TrademarkDetails,
		"StateRegistrationNumber",
		НомерГосударственнойРегистрации,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TrademarkDetails,
		"DateStateRegistration",
		ДатаГосударственнойРегистрации,
		СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(
		TrademarkDetails,
		"NameCopyrightHolder",
		НаименованиеПравообладателя,
		СообщениеXML);
	
	Возврат TrademarkDetails;
	
КонецФункции

Функция ПустаяДата()
	Возврат '00010101';
КонецФункции

Функция ЗначениеОтсутствует()
	Возврат НСтр("ru = 'отсутствует'");
КонецФункции

Функция ПустойФайлPDFBase64()
	
	ДанныеФайла = ПолучитьОбщийМакет("бг_ПустойФайлPDF");
	
	Возврат Base64Строка(ДанныеФайла);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли


