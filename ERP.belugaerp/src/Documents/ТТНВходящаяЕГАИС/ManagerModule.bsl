#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

&ИзменениеИКонтроль("СтатусПослеПолученияДанных")
Функция бг_СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
#Вставка
	// Когда квитанция на получение пришла после квитанции на проведение, делать уже ничего не надо
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС
		И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение
		И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения
		И РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка).Статус 
			= Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден Тогда
			
		Возврат Неопределено;	
	
	КонецЕсли;
#КонецВставки	
	СтатусыАктТТНПодтверждение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыАктТТНПодтверждение.Принят           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден;
	СтатусыАктТТНПодтверждение.Обрабатывается   = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияОбрабатываетсяЕГАИС;
	СтатусыАктТТНПодтверждение.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком;
	СтатусыАктТТНПодтверждение.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияОшибка;
	СтатусыАктТТНПодтверждение.Ошибка           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияОшибка;
	СтатусыАктТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение);
	СтатусыАктТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыАктТТНПодтверждение.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтатусыАктТТНПодтверждение.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыАктТТНПодтверждение.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыАктТТНРасхождения = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыАктТТНРасхождения.Принят           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями;
	СтатусыАктТТНРасхождения.Обрабатывается   = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийОбрабатываетсяЕГАИС;
	СтатусыАктТТНРасхождения.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком;
	СтатусыАктТТНРасхождения.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийОшибка;
	СтатусыАктТТНРасхождения.Ошибка           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийОшибка;
	СтатусыАктТТНРасхождения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение);
	СтатусыАктТТНРасхождения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыАктТТНРасхождения.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтатусыАктТТНРасхождения.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыАктТТНРасхождения.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыАктТТНОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыАктТТНОтказ.Принят           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Отменен;
	СтатусыАктТТНОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС;
	СтатусыАктТТНОтказ.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Отменен;
	СтатусыАктТТНОтказ.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка;
	СтатусыАктТТНОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка;
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыАктТТНОтказ.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтатусыАктТТНОтказ.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыАктТТНОтказ.ОтменаПроведенияДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтатусыАктТТНОтказ.ОтменаПроведенияДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыАктТТНОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведения = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведения.Принят           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
	СтатусыЗапросНаОтменуПроведения.Обрабатывается   = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведения.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
	СтатусыЗапросНаОтменуПроведения.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.Ошибка           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведения.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение);
	СтатусыЗапросНаОтменуПроведения.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыЗапросНаОтменуПроведения.ОтменаПроведенияДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение);
	СтатусыЗапросНаОтменуПроведения.ОтменаПроведенияДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыЗапросНаОтменуПроведения.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведенияОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведенияОтказ.Принят           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден;
#Вставка
	ЕстьРасхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ЕстьРасхождения");
	Если ЕстьРасхождения Тогда
		СтатусыЗапросНаОтменуПроведенияОтказ.Принят           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями;	
	КонецЕсли;
#КонецВставки
	СтатусыЗапросНаОтменуПроведенияОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведенияОтказ.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведенияОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведенияОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведенияОтказ.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтатусыЗапросНаОтменуПроведенияОтказ.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ТТН
		Или Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
		
		Если (ДополнительныеПараметры <> Неопределено) И (ДополнительныеПараметры.ДокументОбъект <> Неопределено) Тогда
			ЗавершенаПроверкаИПодбор = ЗавершенаПроверкаИПодбор(ДополнительныеПараметры.ДокументОбъект);
		Иначе
			ЗавершенаПроверкаИПодбор = ЗавершенаПроверкаИПодбор(ДокументСсылка);
		КонецЕсли;
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС;
		Если НЕ ЗавершенаПроверкаИПодбор Тогда
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеПроверку);
		Иначе 
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение);
		КонецЕсли;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
		
		Статусы = СтатусыАктТТНРасхождения;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС", Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументОтменен,
			Статусы, Ложь);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
		
		Статусы = СтатусыАктТТНРасхождения;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС", Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен,
			Статусы, Ложь);
			
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
		
		Статусы = СтатусыЗапросНаОтменуПроведенияОтказ;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС", Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен,
			Статусы, Ложь);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение Тогда
			
			Статусы = СтатусыАктТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения Тогда
			
			Статусы = СтатусыАктТТНРасхождения;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
			
			ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
			Если ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуАктаОтказаПереданВУТМ Тогда
				Статусы = СтатусыЗапросНаОтменуПроведения;
				Статусы.Обрабатывается   = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуАктаОтказаОбрабатываетсяЕГАИС;
				Статусы.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуАктаОтказаОшибка;
				Статусы.Ошибка           = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуАктаОтказаОшибка;
			Иначе
				Статусы = СтатусыЗапросНаОтменуПроведения;
			КонецЕсли;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение Тогда
			
			Статусы = СтатусыАктТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения Тогда
			
			Статусы = СтатусыАктТТНРасхождения;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Неопределено
			И ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументРаспроведен Тогда
			
			СтатусыРаспроведение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
			СтатусыРаспроведение.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком;
			
			Статусы = СтатусыРаспроведение;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ИсторияСправок2ПоТТН Тогда
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

&После("ПриИзмененииСтатусаДокумента")
Процедура бг_ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса)

	бг_ПриИзмененииСтатусаДокументаДвижениеМарок(ДокументСсылка, НовыйСтатус);
	бг_АктуализироватьПриходныеОрдера(ДокументСсылка, НовыйСтатус);
	
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено Тогда
		
		бг_ПометитьНаУдалениеСвязанныеДокументы(ДокументСсылка);
		
	ИначеЕсли бг_СтатусЯвляетсяПодтвержденным(НовыйСтатус) Тогда
		
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
				И Документы.ПриобретениеТоваровУслуг.бг_ПриходныеОрдера(ДокументОснование).Количество() > 0 Тогда
				
				бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(ДокументОснование);
				
			ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
				И Документы.ВозвратТоваровОтКлиента.бг_ПриходныеОрдера(ДокументОснование).Количество() > 0 Тогда
				
				бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(ДокументОснование);
			КонецЕсли;
			
			Если бг_ТребуетсяИзменятьДатыСвязанныхУчетныхДокументов(ДокументСсылка, ДокументОснование) Тогда
				бг_ИнтеграцияЕГАИС.ЗарегистрироватьДокументДляОтложенногоИзмененияДатыСвязанныхУчетныхДокументов(ДокументСсылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает плановые данные по принимаемым штрихкодам и упаковкам по ТТН входящей (из XML).
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВхоодящаяЕГАИС.
//
// Возвращаемое значение:
//   Структура - Описание:
//    * Марки - ТаблицаЗначений.
//    * Упаковки - ТаблицаЗначений.
//
Функция бг_ДанныеПринимаемыхШтрихкодовПлан(ТТНВходящаяЕГАИС, Отказ = Ложь) Экспорт

	ДанныеПринимаемыхШтрихкодовПлан = бг_НовыйДанныеПринимаемыхШтрихкодовПлан();
	бг_ЗаполнитьДанныеПринимаемыхШтрихкодовПлан(ДанныеПринимаемыхШтрихкодовПлан, ТТНВходящаяЕГАИС, Отказ);
	бг_ЗаполнитьГУИДыМарокШтрихкодыПлан(ДанныеПринимаемыхШтрихкодовПлан);
	бг_ДозаполнитьШтрихкодыПланДаннымиТоваровТТН(ДанныеПринимаемыхШтрихкодовПлан, ТТНВходящаяЕГАИС, Отказ);
	
	Возврат ДанныеПринимаемыхШтрихкодовПлан;

КонецФункции

// Возвращает фактические данные по принимаемым штрихкодам и упаковкам по ТТН входящей (из XML).
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВхоодящаяЕГАИС.
//
// Возвращаемое значение:
//   Структура - Описание:
//    * Марки - ТаблицаЗначений.
//    * Упаковки - ТаблицаЗначений.
//
Функция бг_ДанныеПринимаемыхШтрихкодовФакт(ТТНВходящаяЕГАИС, ТолькоЗаполненныеМарки = Истина) Экспорт

	РегистраторыДвиженияМарок = бг_ДокументыОтраженияФактаWMS(ТТНВходящаяЕГАИС);
	Если РегистраторыДвиженияМарок.Количество() < 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Предполагается, что в ТТН входящей ТЧ Товары всегда свернута,
	// и по одной Номенклатуре + Серии + АП + Справке2 не может быть нескольких строк с разными идентификаторами.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтрокиТТН,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	ТТНВходящаяЕГАИСТовары.Ссылка.Грузоотправитель КАК Грузоотправитель,
	|	СУММА(ТТНВходящаяЕГАИСТовары.КоличествоФакт) КАК Количество
	|ПОМЕСТИТЬ ТоварыТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНВходящаяЕГАИС
	|	И ТТНВходящаяЕГАИСТовары.КоличествоФакт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Справка2,
	|	ТТНВходящаяЕГАИСТовары.Ссылка.Грузоотправитель,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Серия,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|	бг_ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ДвижениеМарок.Номенклатура КАК Номенклатура,
	|	ДвижениеМарок.Серия КАК Серия,
	|	ДвижениеМарок.КодУпаковки КАК КодУпаковки
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	(ВЫБРАТЬ
	|		бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
	|		бг_ДвижениеМарок.Серия.бг_Номенклатура КАК Номенклатура,
	|		бг_ДвижениеМарок.Серия КАК Серия,
	|		бг_ДвижениеМарок.КодУпаковки КАК КодУпаковки
	|	ИЗ
	|		РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
	|	ГДЕ
	|		бг_ДвижениеМарок.Активность
	|		И бг_ДвижениеМарок.Регистратор В(&РегистраторыДвиженияМарок)
	|		И бг_ДвижениеМарок.СтатусМарки = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыАкцизныхМарок.ПодтвержденаНаСкладе)) КАК ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|		ПО ДвижениеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
	|ГДЕ
	|	ДвижениеМарок.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ДвижениеМарок.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.Номенклатура КАК Номенклатура,
	|	Марки.Серия КАК Серия,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ МаркиИтоги
	|ИЗ
	|	Марки КАК Марки
	|
	|СГРУППИРОВАТЬ ПО
	|	Марки.Серия,
	|	Марки.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.ГУИДМарки КАК ГУИДМарки,
	|	Марки.ИдентификаторМарки КАК ИдентификаторМарки,
	|	Марки.Номенклатура КАК Номенклатура,
	|	Марки.Серия КАК Серия,
	|	Марки.КодУпаковки КАК КодУпаковки,
	|	МаркиИтоги.Количество КАК КоличествоПоТовару
	|ПОМЕСТИТЬ МаркиСИтогами
	|ИЗ
	|	Марки КАК Марки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаркиИтоги КАК МаркиИтоги
	|		ПО Марки.Номенклатура = МаркиИтоги.Номенклатура
	|			И Марки.Серия = МаркиИтоги.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТоварыТТН.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС,
	|	ТоварыТТН.НомерСтрокиТТН КАК НомерСтрокиТТН,
	|	ТоварыТТН.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ЕСТЬNULL(МаркиСИтогами.Номенклатура, ТоварыТТН.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(МаркиСИтогами.Серия, ТоварыТТН.Серия) КАК Серия,
	|	МаркиСИтогами.ГУИДМарки КАК ГУИДМарки,
	|	ЕСТЬNULL(МаркиСИтогами.ИдентификаторМарки, """") КАК ИдентификаторМарки,
	|	ЕСТЬNULL(МаркиСИтогами.КодУпаковки, """") КАК КодУпаковки,
	|	ЕСТЬNULL(ТоварыТТН.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(ТоварыТТН.Справка2, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК Справка2,
	|	ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК КоличествоМарок,
	|	ЕСТЬNULL(ТоварыТТН.Количество, 0) КАК КоличествоТТН,
	|	ЕСТЬNULL(ТоварыТТН.Количество, 0) <> ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК НесоответствиеКоличества,
	|	ТоварыТТН.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|		ИЛИ ТоварыТТН.АлкогольнаяПродукция ЕСТЬ NULL
	|		ИЛИ ТоварыТТН.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|		ИЛИ ТоварыТТН.Справка2 ЕСТЬ NULL
	|		ИЛИ ТоварыТТН.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ ТоварыТТН.Номенклатура ЕСТЬ NULL
	|		ИЛИ ТоварыТТН.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИЛИ ТоварыТТН.Серия ЕСТЬ NULL КАК НеЗаполненыПоляТоваровДокумента,
	|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL
	|		ИЛИ МаркиСИтогами.ИдентификаторМарки ЕСТЬ NULL
	|		ИЛИ МаркиСИтогами.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИЛИ МаркиСИтогами.Номенклатура ЕСТЬ NULL
	|		ИЛИ МаркиСИтогами.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		ИЛИ МаркиСИтогами.Серия ЕСТЬ NULL КАК НеЗаполненыПоляМарок,
	|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL КАК НетСоответствияТовараТТНДляМарки
	|ИЗ
	|	ТоварыТТН КАК ТоварыТТН
	|		ПОЛНОЕ СОЕДИНЕНИЕ МаркиСИтогами КАК МаркиСИтогами
	|		ПО ТоварыТТН.Номенклатура = МаркиСИтогами.Номенклатура
	|			И ТоварыТТН.Серия = МаркиСИтогами.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_СоставУпаковокСрезПоследних.КодУпаковки КАК КодУпаковки,
	|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
	|ИЗ
	|	РегистрСведений.бг_СоставУпаковок.СрезПоследних(
	|			,
	|			КодУпаковки В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Марки.КодУпаковки КАК КодУпаковки
	|				ИЗ
	|					Марки КАК Марки)) КАК бг_СоставУпаковокСрезПоследних
	|ГДЕ
	|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки <> """"";
	
	Запрос.УстановитьПараметр("РегистраторыДвиженияМарок", РегистраторыДвиженияМарок);
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВерхнийИндексПакета = ПакетРезультатовЗапроса.ВГраница();
	
	ДанныеПринимаемыхШтрихкодовФакт = Новый Структура;
	ДанныеПринимаемыхШтрихкодовФакт.Вставить("Марки", ПакетРезультатовЗапроса[ВерхнийИндексПакета - 1].Выгрузить());
	ДанныеПринимаемыхШтрихкодовФакт.Вставить("Упаковки", ПакетРезультатовЗапроса[ВерхнийИндексПакета].Выгрузить());
	
	Если ТолькоЗаполненныеМарки Тогда
		ПараметрыПоискаНеНайденныхМарок = Новый Структура("НетСоответствияТовараТТНДляМарки", Истина);
		СтрокиСНенайденнымиМарками = ДанныеПринимаемыхШтрихкодовФакт.Марки.НайтиСтроки(ПараметрыПоискаНеНайденныхМарок);
		Для каждого СтрокаСНенайденнойМаркой Из СтрокиСНенайденнымиМарками Цикл
			ДанныеПринимаемыхШтрихкодовФакт.Марки.Удалить(СтрокаСНенайденнойМаркой);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПринимаемыхШтрихкодовФакт;
	
КонецФункции

// Возвращает плановые и фактические данные по принимаемым штрихкодам и упаковкам по ТТН входящей
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВхоодящаяЕГАИС.
// 
// Возвращаемое значение:
//  ТаблицаЗначение
//
Функция бг_ДанныеПринимаемыхШтрихкодовПланФакт(ТТНВходящаяЕГАИС) Экспорт
	
	ПринимаемыеМарки = бг_НоваяТаблицаПринимаемыеМаркиПланФакт();
	
	// Получаем данные о штрихкодах.
	ДанныеШтрихкодовПлан = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовПлан(ТТНВходящаяЕГАИС);
	ДанныеШтрихкодовФакт = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовФакт(ТТНВходящаяЕГАИС);
	
	Если ДанныеШтрихкодовПлан = Неопределено Тогда
			
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не найдены плановые принимаемые штрихкоды'"));
			
		Возврат ПринимаемыеМарки;
	КонецЕсли;
	
	Если ДанныеШтрихкодовФакт = Неопределено Тогда
			
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не найдены фактические принимаемые штрихкоды'"));
			
		Возврат ПринимаемыеМарки;
	КонецЕсли;
	
	// Преобразовываем полученные данные в необходимую для отчета структуру.
	// Для упрощения реализации формируем отчет конкретно под трехуровневую структуру паллетирования.
	ДанныеШтрихкодовПлан.Упаковки.Индексы.Добавить("КодУпаковки");
	ДанныеШтрихкодовФакт.Упаковки.Индексы.Добавить("КодУпаковки");
	
	Для каждого СтрокаМаркиПлан Из ДанныеШтрихкодовПлан.Марки Цикл
			
		НоваяСтрокаПринимаемыеМарки = ПринимаемыеМарки.Добавить();
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаПринимаемыеМарки,
			СтрокаМаркиПлан,
			"НомерСтрокиТТН, ИдентификаторСтроки, Номенклатура, Серия, АлкогольнаяПродукция, Справка2");
			
		НоваяСтрокаПринимаемыеМарки.КодМарки = СтрокаМаркиПлан.ИдентификаторМарки;
		НоваяСтрокаПринимаемыеМарки.КоличествоПлан = 1;
		
		НоваяСтрокаПринимаемыеМарки.КодКоробки = СтрокаМаркиПлан.КодУпаковки;
		
		ПараметрыПоискаПаллеты = Новый Структура("КодУпаковки", СтрокаМаркиПлан.КодУпаковки);
		НайденныеСтрокиПаллета = ДанныеШтрихкодовПлан.Упаковки.НайтиСтроки(ПараметрыПоискаПаллеты);
		Если НайденныеСтрокиПаллета.Количество() = 1 Тогда
			НоваяСтрокаПринимаемыеМарки.КодПаллеты = НайденныеСтрокиПаллета[0].КодВышестоящейУпаковки;	
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаМаркиФакт Из ДанныеШтрихкодовФакт.Марки Цикл
			
		НоваяСтрокаПринимаемыеМарки = ПринимаемыеМарки.Добавить();
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрокаПринимаемыеМарки,
			СтрокаМаркиФакт,
			"НомерСтрокиТТН, ИдентификаторСтроки, Номенклатура, Серия, АлкогольнаяПродукция, Справка2");
			
		НоваяСтрокаПринимаемыеМарки.КодМарки = СтрокаМаркиФакт.ИдентификаторМарки;
		НоваяСтрокаПринимаемыеМарки.КоличествоФакт = 1;
		
		НоваяСтрокаПринимаемыеМарки.КодКоробки = СтрокаМаркиФакт.КодУпаковки;
		
		ПараметрыПоискаПаллеты = Новый Структура("КодУпаковки", СтрокаМаркиФакт.КодУпаковки);
		НайденныеСтрокиПаллета = ДанныеШтрихкодовФакт.Упаковки.НайтиСтроки(ПараметрыПоискаПаллеты);
		Если НайденныеСтрокиПаллета.Количество() = 1 Тогда
			НоваяСтрокаПринимаемыеМарки.КодПаллеты = НайденныеСтрокиПаллета[0].КодВышестоящейУпаковки;	
		КонецЕсли;
	КонецЦикла;
	
	ПринимаемыеМарки.Свернуть(
		"НомерСтрокиТТН, ИдентификаторСтроки, Номенклатура, Серия, АлкогольнаяПродукция, Справка2, КодМарки, КодКоробки, КодПаллеты",
		"КоличествоПлан, КоличествоФакт");
	
	Возврат ПринимаемыеМарки;	

КонецФункции

// Возвращает плановые и фактические данные по принимаемым штрихкодам и упаковкам по ТТН входящей
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВхоодящаяЕГАИС.
// 
// Возвращаемое значение:
//  ТаблицаЗначение
//
Функция бг_ДанныеПринимаемыхШтрихкодовРасхождения(ТТНВходящаяЕГАИС) Экспорт
	
	МаркиСРасхождениями = бг_НоваяТаблицаПринимаемыеМаркиПланФакт();
	
	МаркиПланФакт = бг_ДанныеПринимаемыхШтрихкодовПланФакт(ТТНВходящаяЕГАИС);
	
	Для Каждого ДанныеМаркиПланФакт Из МаркиПланФакт Цикл 
		Если ДанныеМаркиПланФакт.КоличествоПлан <> ДанныеМаркиПланФакт.КоличествоФакт  Тогда
			ЗаполнитьЗначенияСвойств(МаркиСРасхождениями.Добавить(), ДанныеМаркиПланФакт);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаркиСРасхождениями;	

КонецФункции

// Возвращает признак соответствия марок товарам ТТН входящей ЕГАИС.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВходящаяЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак соответствия марок товарам ТТН входящей ЕГАИС.
//
Функция бг_МаркиФактСоответствуютАлкогольнойПродукцииТТН(Марки, ТТНВходящаяЕГАИС, Отказ = Ложь) Экспорт

	МаркиСоответствуютАлкогольнойПродукцииТТН = Истина;
	
	ВыведенныеОшибкиПоАП = Новый Массив;
	
	Для каждого ДанныеОшибочнойМарки Из Марки Цикл
		
		Если ДанныеОшибочнойМарки.НесоответствиеКоличества
			И ВыведенныеОшибкиПоАП.Найти(ДанныеОшибочнойМарки.АлкогольнаяПродукция) = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Принимаемая алкогольная продукция %1 по ТТН входящей не соответствует данным штрихкодов'"),
					?(ЗначениеЗаполнено(ДанныеОшибочнойМарки.АлкогольнаяПродукция),
						ДанныеОшибочнойМарки.АлкогольнаяПродукция,
						НСтр("ru='<нет сопоставления с движениями марок>'"))),
				ТТНВходящаяЕГАИС,
				, // Поле
				, // ПутьКДанным
				Отказ);
					
			МаркиСоответствуютАлкогольнойПродукцииТТН = Ложь;
			
			// Не дублировать выведенные ошибки по одной алкогольной продукции.
			ВыведенныеОшибкиПоАП.Добавить(ДанныеОшибочнойМарки.АлкогольнаяПродукция);
		КонецЕсли;
				
		Если ДанныеОшибочнойМарки.НеЗаполненыПоляТоваровДокумента
			И ВыведенныеОшибкиПоАП.Найти(ДанныеОшибочнойМарки.АлкогольнаяПродукция) = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеОшибочнойМарки.АлкогольнаяПродукция) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru='Несоответствие ключевых полей товаров ТТН и данных штрихкодов по:
					| Номенклатура: %1, серия %2:, алкогольная продукция: %3, справка2: %4'"),
					ДанныеОшибочнойМарки.Номенклатура,
					ДанныеОшибочнойМарки.Серия,
					ДанныеОшибочнойМарки.АлкогольнаяПродукция,
					ДанныеОшибочнойМарки.Справка2);
					
			Иначе
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru='Несоответствие ключевых полей товаров ТТН и данных штрихкодов по:
					| Номенклатура: %1, серия %2:'"),
					ДанныеОшибочнойМарки.Номенклатура,
					ДанныеОшибочнойМарки.Серия);
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ТТНВходящаяЕГАИС,
				, // Поле
				, // ПутьКДанным
				Отказ);
					
			МаркиСоответствуютАлкогольнойПродукцииТТН = Ложь;		
			
			// Не дублировать выведенные ошибки по одной алкогольной продукции.
			ВыведенныеОшибкиПоАП.Добавить(ДанныеОшибочнойМарки.АлкогольнаяПродукция);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаркиСоответствуютАлкогольнойПродукцииТТН;
			
КонецФункции

// Функция - Проверяет по тексту сообщения XML от ЕГАИС признак возврата товаров от клиента
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ ТТНВходящаяЕГАИС 
//                                                                        
// Возвращаемое значение:
//  Булево - Истина, если это возврат товаров от клиента, Ложь в противном случае
//
Функция бг_ЭтоТТНПоВозвратуТоваровОтКлиента(ТТНВходящаяЕГАИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Документ
	|	И ЕГАИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ТТН)
	|	И НЕ ЕГАИСПрисоединенныеФайлы.ПометкаУдаления";	
	Запрос.УстановитьПараметр("Документ", ТТНВходящаяЕГАИС);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЭтоВозвратТоваровОтКлиента = Ложь;
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(ВыборкаДетальныеЗаписи.Ссылка);
		Если СтрНайти(ТекстСообщенияXML, "WBReturnFromMe") Тогда
			ЭтоВозвратТоваровОтКлиента = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоВозвратТоваровОтКлиента; 
	
КонецФункции

// Возвращает признак наличия маркируемой алкогольной продукции в ТТН входящей (необходимы движения по маркам).
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВходящаяЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак наличия маркируемой алкогольной продукции.
//
Функция бг_ЕстьМаркируемаяАлкогольнаяПродукция(ТТНВходящаяЕГАИС) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция.ВидПродукции.Маркируемый
	|	И ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка
	|	И ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция.ВидПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНВходящаяЕГАИС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак необходимости использования механизма движений марок вместо типового механизма ШУТов. 
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВходящаяЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак использования.
//
Функция бг_ИспользоватьМеханизмДвиженийМарок(ТТНВходящаяЕГАИС) Экспорт
	
	Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(ТТНВходящаяЕГАИС);	

КонецФункции

// Возвращает статус марки, по которому должны быть сформированы движения по ТТН входящей.
//       
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВходящаяЕГАИС.
//       
// Возвращаемое значение:
//  Дата
//
Функция бг_СтатусДвиженийМарок(ТекущийСтатус) Экспорт

	СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные.Документы.ТТНВходящаяЕГАИС.Имя);
	
	Если Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ТекущийСтатус) Тогда
		СтатусМарки = СтатусыМарокПоОперации.СтатусПослеПотвердженияПостановкиНаБаланс;
	Иначе
		СтатусМарки = СтатусыМарокПоОперации.СтатусОприходоватьНаСкладе;
	КонецЕсли;
	
	Возврат СтатусМарки;

КонецФункции

// Возвращает дату, на которую должны быть сформированы движения по ТТН входящей.
//       
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВходящаяЕГАИС.
//  ТекущийСтатусЕГАИС - ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС - Текущий статус документа.
//  Дата - Дата - Дата из ТТНВходящаяЕГАИС.
//  ДатаРегистрацииДвижений - Дата - ДатаРегистрацииДвижений из ТТНВходящаяЕГАИС.
//       
// Возвращаемое значение:
//  Дата
//
Функция бг_ДатаДвиженияМарок(ТТНВходящаяЕГАИС, ТекущийСтатусЕГАИС, Дата = Неопределено, ДатаРегистрацииДвижений = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		ДатыТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяЕГАИС, "ДатаРегистрацииДвижений, Дата");
		Дата = ДатыТТН.Дата;
		ДатаРегистрацииДвижений = ДатыТТН.ДатаРегистрацииДвижений;
	КонецЕсли;
	
	Если Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ТекущийСтатусЕГАИС) Тогда
		
		Если ЗначениеЗаполнено(ДатаРегистрацииДвижений) Тогда
			ДатаДвиженияМарок = ДатаРегистрацииДвижений;
		Иначе
			ДатаДвиженияМарок = Дата;
		КонецЕсли;
		
		// Може возникнуть ситуация, когда дата ТТН будет меньше даты документа приемки,
		// тогда финальный статус марки не будет последним в таблице регистра.
		ПредыдущиеРегистраторыМарок = бг_ДокументыОтраженияФактаWMS(ТТНВходящаяЕГАИС);
		
		Если ПредыдущиеРегистраторыМарок.Количество() > 0 Тогда
			
			ПоследнийРегистратор = ПредыдущиеРегистраторыМарок[ПредыдущиеРегистраторыМарок.ВГраница()];
			
			МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ПоследнийРегистратор,
				"Дата");
				
			Если МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок >= ДатаДвиженияМарок Тогда
				ДатаДвиженияМарок = МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок + 1;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ДатаДвиженияМарок = Дата;
	КонецЕсли;
		
	Возврат ДатаДвиженияМарок;
	
КонецФункции

// Возвращает документы отражения факта приемки WMS, которые являются регистраторами предыдущих
// в цепочке движений по РС "Движение марок" статусов марок.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ ТТНВходящаяЕГАИС.
//
// Возвращаемое значение:
//   Массив - элементов с типом ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру.
//
Функция бг_ДокументыОтраженияФактаWMS(ТТНВходящаяЕГАИС) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	битОтражениеФактаПоПриходномуОрдеру.Ссылка КАК битОтражениеФактаПоПриходномуОрдеру,
	|	ТТНВходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.битОтражениеФактаПоПриходномуОрдеру КАК битОтражениеФактаПоПриходномуОрдеру
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО битОтражениеФактаПоПриходномуОрдеру.ПриходныйОрдерНаТовары.Распоряжение = ТТНВходящаяЕГАИС.ДокументОснование
	|			И (ТТНВходящаяЕГАИС.Ссылка = &ТТНВходящаяЕГАИС)
	|ГДЕ
	|	битОтражениеФактаПоПриходномуОрдеру.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	битОтражениеФактаПоПриходномуОрдеру.МоментВремени";
	
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("битОтражениеФактаПоПриходномуОрдеру");
	
КонецФункции

// Обновляет статус ТТН входящей ЕГАИС в регистре бг_РасширенныеСтатусыДокументовЕГАИС.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС.
//
Процедура бг_ОбновитьРасширенныйСтатусЕГАИС(ТТНВходящаяЕГАИС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ТТНВходящаяЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготавливаем данные для расчета статуса.
	ТекущиеДанные = бг_СвязанныеДанныеПоТТН(ТТНВходящаяЕГАИС);
	
	// Анализируем данные для расчета статуса.
	ПараметрыПоискаПроведенных = Новый Структура("Проведен", Истина);;
	
	ВведенПервичныйДокумент = ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование)
		И ТекущиеДанные.ДокументОснованиеПроведен = Истина;
		
	ВведенПриходныйОрдер = ТекущиеДанные.ДанныеПриходныхОрдеров.Количество() > 0
		И ТекущиеДанные.ДанныеПриходныхОрдеров.НайтиСтроки(ПараметрыПоискаПроведенных).Количество() > 0;
		
	ВведенФактПриемки = ТекущиеДанные.ДанныеФактовПриемки.Количество() > 0
		И ТекущиеДанные.ДанныеФактовПриемки.НайтиСтроки(ПараметрыПоискаПроведенных).Количество() > 0;
		
	РезультатыПриемки = Перечисления.бг_РезультатыПриемкиWMS;
		
	РезультатПриемки = Неопределено;
	
	Для каждого ДанныеФактаПриемки Из ТекущиеДанные.ДанныеФактовПриемки.НайтиСтроки(ПараметрыПоискаПроведенных) Цикл
		Если ДанныеФактаПриемки.РезультатПриемки = РезультатыПриемки.ЕстьРасхожденияОтПлана Тогда
			РезультатПриемки = РезультатыПриемки.ЕстьРасхожденияОтПлана;
			Прервать;
		ИначеЕсли ДанныеФактаПриемки.РезультатПриемки = РезультатыПриемки.ПолноеСоответствиеПлану Тогда
			РезультатПриемки = РезультатыПриемки.ПолноеСоответствиеПлану;
			Прервать;
		ИначеЕсли ДанныеФактаПриемки.РезультатПриемки = РезультатыПриемки.ПриемкаОтменена Тогда
			РезультатПриемки = РезультатыПриемки.ПриемкаОтменена;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Рассчитываем новый статус.
	РасширенныеСтатусыЕГАИС = Перечисления.бг_РасширенныеСтатусыОбработкиТТНВходящейЕГАИС;
	
	Если КонечныеСтатусы().Найти(ТекущиеДанные.ТекущийСтатусЕГАИС) <> Неопределено Тогда
		
		НовыйСтатус = РасширенныеСтатусыЕГАИС.ПриемкаОтменена;
		
	ИначеЕсли ВведенПервичныйДокумент И ТекущиеДанные.ДоверительнаяПриемка Тогда
		
		НовыйСтатус = РасширенныеСтатусыЕГАИС.ОрдерОбработанНаСкладеПолноеСоответствиеПлану;
		
	ИначеЕсли ВведенПервичныйДокумент И ВведенПриходныйОрдер И ВведенФактПриемки Тогда
		
		Если РезультатПриемки = РезультатыПриемки.ЕстьРасхожденияОтПлана Тогда
			
			НовыйСтатус = РасширенныеСтатусыЕГАИС.ОрдерОбработанНаСкладеЕстьРасхожденияОтПлана;
			
		ИначеЕсли РезультатПриемки = РезультатыПриемки.ПолноеСоответствиеПлану Тогда
			
			НовыйСтатус = РасширенныеСтатусыЕГАИС.ОрдерОбработанНаСкладеПолноеСоответствиеПлану;
			
		ИначеЕсли РезультатПриемки = РезультатыПриемки.ПриемкаОтменена Тогда
			
			НовыйСтатус = РасширенныеСтатусыЕГАИС.ПриемкаОтменена;
			
		Иначе
			
			НовыйСтатус = РасширенныеСтатусыЕГАИС.ОшибкаРасчетаСтатуса;
			
		КонецЕсли;
		
	ИначеЕсли ВведенПервичныйДокумент И ВведенПриходныйОрдер Тогда
		
		НовыйСтатус = РасширенныеСтатусыЕГАИС.ОрдерОбрабатываетсяНаСкладе;
		
	Иначе
		
		НовыйСтатус = РасширенныеСтатусыЕГАИС.ОрдерКСозданию;
		
	КонецЕсли;
	
	Если ТекущиеДанные.ТекущийРасширенныйСтатусЕГАИС <> НовыйСтатус Тогда
		РегистрыСведений.бг_РасширенныеСтатусыДокументовЕГАИС.ОбновитьСтатус(ТТНВходящаяЕГАИС, НовыйСтатус);
	КонецЕсли;

КонецПроцедуры

// Помечает на удаление связанные с ТТН документы.
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС.
//
Процедура бг_ПометитьНаУдалениеСвязанныеДокументы(ТТНВходящаяЕГАИС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПоТТН = бг_СвязанныеДанныеПоТТН(ТТНВходящаяЕГАИС);
	Если КонечныеСтатусы().Найти(ДанныеПоТТН.ТекущийСтатусЕГАИС) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВнешняяТранзакцияАктивна = ТранзакцияАктивна();
	ВыполнятьВТранзакции = Не ВнешняяТранзакцияАктивна;
	
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
	
		Для каждого ДанныеФактаПриемки Из ДанныеПоТТН.ДанныеФактовПриемки Цикл
			
			Если Не ДанныеФактаПриемки.ПометкаУдаления
				И ДанныеФактаПриемки.РезультатПриемки <> Перечисления.бг_РезультатыПриемкиWMS.ПриемкаОтменена Тогда
				
				бг_ПометитьНаУдалениеДокумент(ДанныеФактаПриемки.ОтражениеФактаПоПриходномуОрдеру);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ДанныеПриходногоОрдера Из ДанныеПоТТН.ДанныеПриходныхОрдеров Цикл
			
			Если Не ДанныеПриходногоОрдера.ПометкаУдаления Тогда
				бг_ПометитьНаУдалениеДокумент(ДанныеПриходногоОрдера.ПриходныйОрдерНаТовары);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеПоТТН.ДокументОснование) И Не ДанныеПоТТН.ДокументОснованиеПометкаУдаления Тогда
			бг_ПометитьНаУдалениеДокумент(ДанныеПоТТН.ДокументОснование);
		КонецЕсли;
		
		Если ВыполнятьВТранзакции И ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение

		ОписаниеОшибки = ОписаниеОшибки();
		
		Если ВыполнятьВТранзакции И ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;

КонецПроцедуры

Функция бг_СтатусыПодтвержденные() Экспорт

	СтатусыПодтвержденные = Новый Массив;
	
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.Подтвержден);
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Возврат СтатусыПодтвержденные;

КонецФункции

Функция бг_СтатусЯвляетсяПодтвержденным(Статус) Экспорт

	Возврат бг_СтатусыПодтвержденные().Найти(Статус) <> Неопределено;

КонецФункции

Процедура бг_АктуализироватьПриходныеОрдера(ТТНВходящаяЕГАИС, СтатусТТНВходящейЕГАИС = Неопределено) Экспорт

	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ТТНВходящаяЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтатусТТНВходящейЕГАИС = Неопределено Тогда
		СтатусТТНВходящейЕГАИС = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ТТНВходящаяЕГАИС).Статус;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатусТТНВходящейЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	ЦелевойСтатусОрдера = Документы.ПриходныйОрдерНаТовары.бг_СтатусОрдераПоСтатусуЕГАИС(СтатусТТНВходящейЕГАИС);
	
	ПриходныеОрдераКАктуализации = бг_ПриходныеОрдераКАктуализации(ТТНВходящаяЕГАИС, ЦелевойСтатусОрдера);
	
	Для каждого ПриходныйОрдерНаТовары Из ПриходныеОрдераКАктуализации Цикл
		
		ПриходныйОрдерНаТоварыОбъект = ПриходныйОрдерНаТовары.ПолучитьОбъект();
		
		ПриходныйОрдерНаТоварыОбъект.Статус = ЦелевойСтатусОрдера;
		
		Для каждого СтрокаТовары Из ПриходныйОрдерНаТоварыОбъект.Товары Цикл
			СтрокаТовары.Принято = ЦелевойСтатусОрдера = Перечисления.СтатусыПриходныхОрдеров.Принят;
		КонецЦикла;
		
		ПриходныйОрдерНаТоварыОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;

КонецПроцедуры

// Интерфейс для отложенной обработки
//
// Параметры:
//   Документ - ДокументСсылка.битОтчетОПроизводствеЕГАИС
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов, Неопределено - вариант обработки
//   Отказ - Булево - отказ от обработки
//
Процедура бг_ОтложеннаяОбработкаОбъекта(Документ, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтправитьЗапросыСправки1ЕГАИС Тогда
		бг_ИнтеграцияЕГАИС.ОтправитьЗапросыСправок1ВУТМ(Документ);
	ИначеЕсли ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ИзменитьДатуСвязанныхУчетныхДокументов Тогда
		бг_ИнтеграцияЕГАИС.ИзменитьДатуСвязанныхУчетныхДокументовТТНВходящейЕГАИС(Документ);
	ИначеЕсли ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьДвиженияМарок Тогда
		бг_ОтложеннаяОбработкаДвиженийМарок.СформироватьДвиженияМарок(Документ, ДополнительныеСведения);
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ОтложеннаяОбработкаОбъектаВременноЗаблокирована(Документ, ВариантОбработки, 
	ДополнительныеСведения = Неопределено) Экспорт
	
	ОбработкаЗаблокирована = Ложь;
	
	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьДвиженияМарок Тогда
		ОбработкаЗаблокирована = РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.ДвиженияЗаписываютсяВДанныйМомент(Документ);
	КонецЕсли;
	
	Возврат ОбработкаЗаблокирована;
	
КонецФункции

// Возвращает данные всех ТТН входящих, связанных с документом.
//
// Параметры:
//  Документ - ДокументСсылка - связанный с ТТН документ.
//  ТолькоПроведенные - Булево
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция бг_ДанныеТТНВходящихПоСвязанномуДокументу(Документ, ТолькоПроведенные = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаТТНПоСвязанномуДокументу = бг_ТекстЗапросаТТНПоСвязанномуДокументу(Документ);
	Если ТекстЗапросаТТНПоСвязанномуДокументу = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапросаДанныхТТН = бг_ТекстЗапросаДанныхТТН();
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаТТНПоСвязанномуДокументу);
	ЧастиЗапроса.Добавить(ТекстЗапросаДанныхТТН);
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, ";" + Символы.ПС);
	
	Запрос.УстановитьПараметр("СвязанныйДокумент", Документ);
	
	ДанныеТТНВходящих = Запрос.Выполнить().Выгрузить();
	Если ТолькоПроведенные Тогда
		Возврат ДанныеТТНВходящих.Скопировать(ДанныеТТНВходящих.НайтиСтроки(Новый Структура("Проведен", Истина)));
	Иначе
		Возврат ДанныеТТНВходящих;
	КонецЕсли;
	
КонецФункции

// Возвращает данные ТТН входящей - частный случай, когда ТТН введена только одна.
//
// Параметры:
//  Документ - ДокументСсылка - связанный с ТТН документ.
//  ТолькоПроведенная - Булево
//
// Возвращаемое значение:
//   Структура
//
Функция бг_ДанныеТТНВходящейПоСвязанномуДокументу(Документ, ТолькоПроведенная = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТТНВходящихПоСвязанномуДокументу = бг_ДанныеТТНВходящихПоСвязанномуДокументу(Документ, ТолькоПроведенная);
	
	Если ДанныеТТНВходящихПоСвязанномуДокументу <> Неопределено
		И ДанныеТТНВходящихПоСвязанномуДокументу.Количество() > 0 Тогда
		
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеТТНВходящихПоСвязанномуДокументу)[0];
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает признак о смене статуса на один вниз по стандартной цепочке статусов ТТН входящей ЕГАИС.
// Обычно это происходит всвязи с ошибкой в последовательности обработки статусов ЕГАИС.
//
Функция бг_ЭтоЗапретныйДаунгрейдСтатуса(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	ВсеСтатусы = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС;
	
	Возврат ПредыдущийСтатус = ВсеСтатусы.ПодтвержденСРасхождениями
		И НовыйСтатус = ВсеСтатусы.АктРасхожденийОбрабатываетсяЕГАИС;
		
КонецФункции

// Возвращает организацию владельца по данным документа.
// 
// Параметры:
//  ДанныеОбъекта - ДокументОбъект.ТТНВходящаяЕГАИС, ДанныеФормыКоллекция.
//
// Возвращаемое значение:
//  СправочникСсылка.Организации
//
Функция ОрганизацияВладелец(ДанныеОбъекта) Экспорт
	
	ОрганизацияВладелец = ДанныеОбъекта.Организация;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Грузополучатель) Тогда
		
		ОрганизацияИзГрузополучателя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДанныеОбъекта.Грузополучатель,
			"Контрагент");
			
		Если ТипЗнч(ОрганизацияИзГрузополучателя) = Тип("СправочникСсылка.Организации")
			И ЗначениеЗаполнено(ОрганизацияИзГрузополучателя) Тогда
			
			ОрганизацияВладелец = ОрганизацияИзГрузополучателя;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОрганизацияВладелец;
	
КонецФункции

// Выполняет необходимые записи в регистре СтатусыДокументовЕГАИС для завершения приемки.
//
// Параметры:
//  ТТНВходящаяЕГАИСОбъект - ДокументОбъект.ТТНВходящаяЕГАИС
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС
//
Процедура бг_ОтразитьИзменениеСтатусаДокументаЕГАИСПриемкаЗавершена(ТТНВходящаяЕГАИСОбъект, ТТНВходящаяЕГАИС) Экспорт
	
	ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса();
	ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
	ПараметрыОбновленияСтатуса.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
	ПараметрыОбновленияСтатуса.ДокументОбъект = ТТНВходящаяЕГАИСОбъект;
	
	Документы.ТТНВходящаяЕГАИС.ОбновитьСтатусПослеПолученияДанных(
		ТТНВходящаяЕГАИС,
		Перечисления.ВидыДокументовЕГАИС.ТТН,
		ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

// Функция - Сравнивает организации грузополучателя и грузоотправителя, 
//		в случае если совпадают, то это ТТН по перемещению
//
// Параметры:
//  ТТНВходящаяЕГАИС - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ ТТНВходящаяЕГАИС 
//                                                                        
// Возвращаемое значение:
//  Булево - Истина, если это перемещение товаров
//
Функция бг_ЭтоТТНПоПеремещениюТоваров(ТТНВходящаяЕГАИС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент = ТТНВходящаяЕГАИС.Грузополучатель.Контрагент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПеремещениеТоваров
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.Ссылка = &Документ";
	
	Запрос.УстановитьПараметр("Документ", ТТНВходящаяЕГАИС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЭтоПеремещениеТоваров = Ложь;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ЭтоПеремещениеТоваров = ВыборкаДетальныеЗаписи.ЭтоПеремещениеТоваров;
		
	КонецЕсли;
	
	Возврат ЭтоПеремещениеТоваров;
	
КонецФункции

#КонецОбласти

#Область Отчеты

&После("ДобавитьКомандыОтчетов")
Процедура бг_ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры)

	Отчеты.бг_ДвижениеМарок.ДобавитьКомандуДвижениеМарокПоДокументу(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

&ИзменениеИКонтроль("АктРасхожденийXML")
Функция бг_АктРасхожденийXML(ДокументСсылка)

	СообщенияXML = Новый Массив;

	Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения;

	ТекстыЗапроса = Новый СписокЗначений;

	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|//#РезультатЗапроса#////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                        КАК Номер,
	|	Шапка.Дата                         КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование            КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС                    КАК ИдентификаторЕГАИС,
	|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(500)) КАК Комментарий,
	|	
	|	Шапка.Грузополучатель               КАК ОрганизацияЕГАИС,
	|	Шапка.Грузополучатель.Код           КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.ФорматОбмена                  КАК ФорматОбмена,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|",
	"Шапка");

	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика,
	|	Товары.Серия                КАК Серия,
	|	Товары.НомерСтроки          КАК НомерСтроки,
	|	Товары.ИдентификаторСтроки  КАК ИдентификаторСтроки,
	|	Товары.Справка2             КАК Справка2,
	|	Товары.Количество           КАК Количество,
	|	Товары.КоличествоФакт       КАК КоличествоФакт
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка");

	ТекстыЗапроса.Добавить(
	ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
	"ВТТовары",
	"ВТКоэффициентыПересчетаВЕдиницыЕГАИС"));

	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки                   КАК НомерСтроки,
	|	Товары.ИдентификаторСтроки           КАК ИдентификаторСтроки,
	|	Товары.Справка2                      КАК Справка2,
	|	Товары.Справка2.РегистрационныйНомер КАК НомерСправки2,
	|	Товары.АлкогольнаяПродукция          КАК АлкогольнаяПродукция,
	|	Товары.Количество                    КАК Количество,
	|	Товары.КоличествоФакт                КАК КоличествоФакт,
	|	
	|	ЕСТЬNULL(ЕдиницыЕГАИС.ПроверятьОбъемДАЛ, ЛОЖЬ) КАК ПроверятьОбъемДАЛ,
	|	ЕСТЬNULL(ЕдиницыЕГАИС.ОбъемДАЛ, 0)             КАК ОбъемДАЛ
	|ИЗ
	|	ВТТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = Товары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = Товары.Характеристика
	|		 И ЕдиницыЕГАИС.Серия = Товары.Серия
	|",
	"Товары");

	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = ДокументСсылка;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС         = "Грузополучатель";

#Удаление
	ТекстыЗапроса.Добавить(
	ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
	"ВложенныеШтрихкоды");
#КонецУдаления
#Вставка
	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ДокументСсылка) Тогда
		ТекстыЗапроса.Добавить(
			ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(
				ПараметрыФормированияТекстаЗапроса),
				"ВложенныеШтрихкоды");
	КонецЕсли;
#КонецВставки

	ПустыеЗначенияНоменклатуры = ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.Номенклатура);

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",                     ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",                   Операция);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ПустыеЗначенияНоменклатуры);
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);

	//@skip-warning
	Шапка  = РезультатыЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатыЗапроса["Товары"].Выгрузить();

	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда

		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка);

		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.';
		|en = 'Нет данных для выгрузки.'"));

		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;

	КонецЕсли;

	Если Товары.Итог("КоличествоФакт") = 0 Тогда

		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка);

		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеXML,
		НСтр("ru = 'Некорректная операция. Для передачи факта отказа необходимо воспользоваться командой ""Отказаться от накладной"".';
		|en = 'Некорректная операция. Для передачи факта отказа необходимо воспользоваться командой ""Отказаться от накладной"".'"));

		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;

	КонецЕсли;

	Если Товары.Итог("КоличествоФакт") = Товары.Итог("Количество") Тогда

		ПрерватьВыполнение = Ложь;
		Для Каждого СтрокаТЧ Из Товары Цикл
			Если СтрокаТЧ.КоличествоФакт <> СтрокаТЧ.Количество Тогда
				ПрерватьВыполнение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Не ПрерватьВыполнение Тогда

			СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
			СообщениеXML.Документ = ДокументСсылка;
			СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);

			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			НСтр("ru = 'Некорректная операция. Для передачи факта полного подтверждения необходимо воспользоваться командой ""Принять без расхождений"".';
			|en = 'Некорректная операция. Для передачи факта полного подтверждения необходимо воспользоваться командой ""Принять без расхождений"".'"));

			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;

		КонецЕсли;

	КонецЕсли;

	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);

	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
	Операция, ДокументСсылка, НомерВерсии);

	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);

	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеXML,
		СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
		|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;

	#Область АктТТНРасхождения

	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда

		#Область ФорматОбмена_V1

		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType");

		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "rwb"), СообщениеXML, 3);

		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");

		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Accepted",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);

		АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");

		Для Каждого СтрокаТЧ Из Товары Цикл

			НомерСтроки = Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0");

			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");

			Если СтрокаТЧ.ПроверятьОбъемДАЛ
				И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.';
				|en = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), НомерСтроки));
			КонецЕсли;

			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",     СтрокаТЧ.ИдентификаторСтроки, СообщениеXML, 5);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "InformBRegId", СтрокаТЧ.НомерСправки2,       СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "RealQuantity", СтрокаТЧ.КоличествоФакт,      СообщениеXML);

			АктXDTO.Content.Position.Добавить(Position);

			Если СтрокаТЧ.КоличествоФакт > СтрокаТЧ.Количество Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(
				НСтр("ru = 'По алкогольной продукции %1 (номер справки 2: %2) фактическое количество (%3) превышает количество в ТТН (%4).';
				|en = 'По алкогольной продукции %1 (номер справки 2: %2) фактическое количество (%3) превышает количество в ТТН (%4).'"),
				СтрокаТЧ.АлкогольнаяПродукция,
				СтрокаТЧ.НомерСправки2,
				СтрокаТЧ.КоличествоФакт,
				СтрокаТЧ.Количество));
			КонецЕсли;

		КонецЦикла;

		#КонецОбласти

	ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда

		#Область ФорматОбмена_V2

		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v2");

		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "rwb"), СообщениеXML, 3);

		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");

		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Differences",            СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);

		АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");

		Для Каждого СтрокаТЧ Из Товары Цикл

			НомерСтроки = Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0");

			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");

			Если СтрокаТЧ.ПроверятьОбъемДАЛ
				И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.';
				|en = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), НомерСтроки));
			КонецЕсли;

			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",      СтрокаТЧ.ИдентификаторСтроки, СообщениеXML, 5);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "InformF2RegId", СтрокаТЧ.НомерСправки2,       СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "RealQuantity",  СтрокаТЧ.КоличествоФакт,      СообщениеXML);

			АктXDTO.Content.Position.Добавить(Position);

			Если СтрокаТЧ.КоличествоФакт > СтрокаТЧ.Количество Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(
				НСтр("ru = 'По алкогольной продукции %1 (номер справки 2: %2) фактическое количество (%3) превышает количество в ТТН (%4).';
				|en = 'По алкогольной продукции %1 (номер справки 2: %2) фактическое количество (%3) превышает количество в ТТН (%4).'"),
				СтрокаТЧ.АлкогольнаяПродукция,
				СтрокаТЧ.НомерСправки2,
				СтрокаТЧ.КоличествоФакт,
				СтрокаТЧ.Количество));
			КонецЕсли;

		КонецЦикла;

		#КонецОбласти

	Иначе

		ВходящиеАкцизныеМарки = ВходящиеАкцизныеМарки(ДокументСсылка, Товары);
		ВходящиеАкцизныеМарки.Индексы.Добавить("Справка2");

		//@skip-warning

#Удаление
		Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
		ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
		Выборка, МенеджерВременныхТаблиц);
#КонецУдаления
#Вставка
		Если бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ДокументСсылка) Тогда
			// Выполняется подмена данных для формирования XML сообщения:
			//  типовой алгоритм опирался на справочник ШтрихкодыУпаковокТоваров;
			//  свой алгоритм опирается на регистры бг_ДвижениеМарок и бг_СоставУпаковок.
	        ВложенныеШтрихкодыУпаковок = бг_ИнтеграцияЕГАИС.ДанныеШтрихкодовДляГенерацииЕГАИСXML(
				ДокументСсылка,
				СообщениеXML);
		Иначе
			// Типовой алгоритм
			Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
			ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
				Выборка,
				МенеджерВременныхТаблиц);
		КонецЕсли;
#КонецВставки

		ЗначенияШтрихкодов = ВложенныеШтрихкодыУпаковок.МаркированныеТовары;
		ЗначенияШтрихкодов.Индексы.Добавить("Штрихкод");

		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
			АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v3");
		Иначе
			АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v4");
		КонецЕсли;

		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "rwb"), СообщениеXML, 3);

		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");

		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Differences",            СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);

		АктXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Content");

		Для Каждого СтрокаТЧ Из Товары Цикл

			НомерСтроки = Формат(СтрокаТЧ.НомерСтроки, "ЧГ=0");

			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");

			Если СтрокаТЧ.ПроверятьОбъемДАЛ
				И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.';
				|en = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), НомерСтроки));
			КонецЕсли;

			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",      СтрокаТЧ.ИдентификаторСтроки, СообщениеXML, 5);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "InformF2RegId", СтрокаТЧ.НомерСправки2,       СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "RealQuantity",  СтрокаТЧ.КоличествоФакт,      СообщениеXML);

			АктXDTO.Content.Position.Добавить(Position);

			Если СтрокаТЧ.КоличествоФакт > СтрокаТЧ.Количество Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(
				НСтр("ru = 'По алкогольной продукции %1 (номер справки 2: %2) фактическое количество (%3) превышает количество в ТТН (%4).';
				|en = 'По алкогольной продукции %1 (номер справки 2: %2) фактическое количество (%3) превышает количество в ТТН (%4).'"),
				СтрокаТЧ.АлкогольнаяПродукция,
				СтрокаТЧ.НомерСправки2,
				СтрокаТЧ.КоличествоФакт,
				СтрокаТЧ.Количество));
			КонецЕсли;

			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Справка2", СтрокаТЧ.Справка2);
			НайденныеСтроки = ВходящиеАкцизныеМарки.НайтиСтроки(ПараметрыОтбора);

			КоличествоАкцизныхМарок = НайденныеСтроки.Количество();

			Если КоличествоАкцизныхМарок > 0 Тогда

				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

					Если ЗначенияШтрихкодов.Найти(НайденнаяСтрока.Штрихкод, "Штрихкод") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;

					Если Position.MarkInfo = Неопределено Тогда
						Position.MarkInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "MarkInfo");
					КонецЕсли;

					Position.MarkInfo.amc.Добавить(НайденнаяСтрока.Штрихкод);

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		Если ФорматОбмена <> Перечисления.ФорматыОбменаЕГАИС.V3 Тогда

			АктXDTO.Transport = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Transport");
			АктXDTO.Transport.ChangeOwnership = "IsChange";

		КонецЕсли;

	КонецЕсли;

	#КонецОбласти

	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(АктXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);

	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;

	СообщенияXML.Добавить(СообщениеXML);

	Возврат СообщенияXML;

КонецФункции

#КонецОбласти // Конец СообщенияЕГАИС

#Область ДанныеШтрихкодовДвиженияМарок

Функция бг_НовыйДанныеПринимаемыхШтрихкодовПлан() Экспорт

	ДанныеПринимаемыхШтрихкодовПлан = Новый Структура;
	
	// Для РС бг_ДвижениеМарок
	НаборДвижениеМарок = РегистрыСведений.бг_ДвижениеМарок.СоздатьНаборЗаписей();
	Марки = НаборДвижениеМарок.ВыгрузитьКолонки("ГУИДМарки, Серия, КодУпаковки");
	
	Марки.Колонки.Добавить(
		"ИдентификаторМарки",
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок().ПолнаяМарка));

	Марки.Колонки.Добавить(
		"Организация",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	Марки.Колонки.Добавить(
		"ОрганизацияЕГАИС",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
		
	ДанныеПринимаемыхШтрихкодовПлан.Вставить("Марки", Марки);
	
	// Для РС бг_СоставУпаковок
	НаборСоставУпаковок = РегистрыСведений.бг_СоставУпаковок.СоздатьНаборЗаписей();
	Упаковки = НаборСоставУпаковок.ВыгрузитьКолонки("КодУпаковки, КодВышестоящейУпаковки");
	ДанныеПринимаемыхШтрихкодовПлан.Вставить("Упаковки", Упаковки);
	
	// Для РС бг_ИдентификаторыМарок
	НаборЗаписейИдентификаторыМарок = РегистрыСведений.бг_ИдентификаторыМарок.СоздатьНаборЗаписей();
	ИдентификаторыМарок = НаборЗаписейИдентификаторыМарок.ВыгрузитьКолонки(
		"ГУИДМарки, НомерМарки, ИдентификаторМарки, Организация, ОрганизацияЕГАИС");
	ДанныеПринимаемыхШтрихкодовПлан.Вставить("ИдентификаторыМарок", ИдентификаторыМарок);
	
	Возврат ДанныеПринимаемыхШтрихкодовПлан;
	
КонецФункции

Процедура бг_ЗаполнитьДанныеПринимаемыхШтрихкодовПлан(ДанныеПринимаемыхШтрихкодовПлан, ТТНВходящаяЕГАИС, Отказ)

	ДанныеРасшифровкиВходящегоСообщения = Документы.ТТНВходящаяЕГАИС.ВходящееДеревоУпаковок(ТТНВходящаяЕГАИС);
	ДеревоМаркировки = ДанныеРасшифровкиВходящегоСообщения.ДеревоУпаковок;
	
	КонтекстОбхода = Новый Структура;
	КонтекстОбхода.Вставить("ДлиныШтрихкодовМарок", бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок());
	КонтекстОбхода.Вставить("КоличествоНеобработанных", 0);
	КонтекстОбхода.Вставить("Организация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "Организация"));
	КонтекстОбхода.Вставить(
		"ОрганизацияЕГАИС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНВходящаяЕГАИС, "Грузополучатель"));
		
	бг_ДобавитьСтрокиВТаблицуЗаписейМарокУпаковокРекурсивно(
		ДанныеПринимаемыхШтрихкодовПлан,
		ДеревоМаркировки,
		КонтекстОбхода);
		
	Если КонтекстОбхода.КоличествоНеобработанных > 0 Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Обнаружено %1 записей марок с неизвестным заполнением.'"),
				КонтекстОбхода.КоличествоНеобработанных),
			ТТНВходящаяЕГАИС,
			, // Поле
			, // ПутьКДанным
			Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура бг_ДобавитьСтрокиВТаблицуЗаписейМарокУпаковокРекурсивно(ДанныеПринимаемыхШтрихкодовПлан, РодительскаяСтрока, КонтекстОбхода, Знач Уровень = 0)
	
	Уровень = Уровень + 1;
	
	ПодчиненныеСтроки = РодительскаяСтрока.Строки;
	
	Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаАлкогольнойПродукции.БутылкиБезКоробки Тогда
			
			бг_ДобавитьСтрокиВТаблицуЗаписейМарокУпаковокРекурсивно(
				ДанныеПринимаемыхШтрихкодовПлан,
				ПодчиненнаяСтрока,
				КонтекстОбхода,
				Уровень);
			
		Иначе
			
			ТипУпаковкиШтрихкода = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(
				ПодчиненнаяСтрока.Штрихкод,
				КонтекстОбхода.ДлиныШтрихкодовМарок);
			
			Если ТипУпаковкиШтрихкода = Неопределено Тогда
				КонтекстОбхода.КоличествоНеобработанных = КонтекстОбхода.КоличествоНеобработанных + 1;
				Продолжить;                                     
			КонецЕсли;
			
			Если ТипУпаковкиШтрихкода = Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда
				
				Если Не бг_СтрокаБутылкиИмеетОжидаемоеЗаполнение(ПодчиненнаяСтрока) Тогда
					КонтекстОбхода.КоличествоНеобработанных = КонтекстОбхода.КоличествоНеобработанных + 1;
					Продолжить;
				КонецЕсли;
				
				КороткаяМарка = Лев(ПодчиненнаяСтрока.Штрихкод, КонтекстОбхода.ДлиныШтрихкодовМарок.КороткаяМарка);
				
				ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
				КороткаяМаркаЧисло = ОписаниеТипаЧисло.ПривестиЗначение(КороткаяМарка);
				
				СтрокаМарки = ДанныеПринимаемыхШтрихкодовПлан.Марки.Добавить();
				СтрокаМарки.Серия = ПодчиненнаяСтрока.Серия;
				СтрокаМарки.КодУпаковки = РодительскаяСтрока.Штрихкод;
				СтрокаМарки.ИдентификаторМарки = ПодчиненнаяСтрока.Штрихкод;
				СтрокаМарки.Организация = КонтекстОбхода.Организация;
				СтрокаМарки.ОрганизацияЕГАИС = КонтекстОбхода.ОрганизацияЕГАИС;
				
				ЗаписьИдентификаторМарки = ДанныеПринимаемыхШтрихкодовПлан.ИдентификаторыМарок.Добавить();
				ЗаписьИдентификаторМарки.НомерМарки = КороткаяМаркаЧисло;
				ЗаписьИдентификаторМарки.ИдентификаторМарки = ПодчиненнаяСтрока.Штрихкод;
				ЗаписьИдентификаторМарки.Организация = КонтекстОбхода.Организация;
				ЗаписьИдентификаторМарки.ОрганизацияЕГАИС = КонтекстОбхода.ОрганизацияЕГАИС;
				
			Иначе
				
				Если Не бг_СтрокаУпаковкиИмеетОжидаемоеЗаполнение(ПодчиненнаяСтрока) Тогда
					КонтекстОбхода.КоличествоНеобработанных = КонтекстОбхода.КоличествоНеобработанных + 1;
					Продолжить;
				КонецЕсли;
				
				НеобходимоСделатьЗаписьСоставаУпаковок = Ложь;
				
				Если СтрДлина(ПодчиненнаяСтрока.Штрихкод) = КонтекстОбхода.ДлиныШтрихкодовМарок.СтараяУпаковка Тогда
					
					// Если штрихкод - старая упаковка (18 символов), то непонятно паллета это или коробка.
					// Запись в состав упаковок нужно делать именно для коробки. Поэтому для старой упаковки определяем
					// тип упаковки анализом вложенных упаковок: если внутри коробки, то это паллета и запись не нужна,
					// если внутри бутылки, то это коробка и запись нужна.
					Если ПодчиненнаяСтрока.Строки.Количество() Тогда
						
						ТипШтрихкодаВложеннойУпаковки = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(
							ПодчиненнаяСтрока.Строки[0].Штрихкод,
							КонтекстОбхода.ДлиныШтрихкодовМарок);
							
						НеобходимоСделатьЗаписьСоставаУпаковок = ТипШтрихкодаВложеннойУпаковки = Перечисления.бг_ТипыЕдиницИзмерения.Бутылка;
						
					КонецЕсли;
					
				Иначе
					НеобходимоСделатьЗаписьСоставаУпаковок = ТипУпаковкиШтрихкода = Перечисления.бг_ТипыЕдиницИзмерения.Коробка;
				КонецЕсли;
				
				Если НеобходимоСделатьЗаписьСоставаУпаковок Тогда
				
					СтрокаУпаковки = ДанныеПринимаемыхШтрихкодовПлан.Упаковки.Добавить();
					СтрокаУпаковки.КодУпаковки = ПодчиненнаяСтрока.Штрихкод;
					
					Если ТипЗнч(РодительскаяСтрока) = Тип("СтрокаДереваЗначений") Тогда
						СтрокаУпаковки.КодВышестоящейУпаковки = РодительскаяСтрока.Штрихкод;
					КонецЕсли;
				КонецЕсли;
				
				бг_ДобавитьСтрокиВТаблицуЗаписейМарокУпаковокРекурсивно(
					ДанныеПринимаемыхШтрихкодовПлан,
					ПодчиненнаяСтрока,
					КонтекстОбхода,
					Уровень);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция бг_СтрокаУпаковкиИмеетОжидаемоеЗаполнение(СтрокаУпаковка)

	Возврат СтрокаУпаковка.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
		Или СтрокаУпаковка.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;	

КонецФункции

Функция бг_СтрокаБутылкиИмеетОжидаемоеЗаполнение(СтрокаБутылка)

	Возврат СтрокаБутылка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;

КонецФункции

Процедура бг_ЗаполнитьГУИДыМарокШтрихкодыПлан(ДанныеПринимаемыхШтрихкодовПлан)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ИдентификаторыМарок.НомерМарки КАК НомерМарки,
	|	ИдентификаторыМарок.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ПОМЕСТИТЬ ВТ_ИдентификаторыМарок
	|ИЗ
	|	&ИдентификаторыМарок КАК ИдентификаторыМарок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторМарки,
	|	ОрганизацияЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИдентификаторыМарок.НомерМарки КАК НомерМарки,
	|	ВТ_ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	бг_ИдентификаторыМарок.ГУИДМарки КАК ГУИДМарки,
	|	бг_ИдентификаторыМарок.ГУИДМарки ЕСТЬ NULL КАК ЭтоНоваяМарка,
	|	ВТ_ИдентификаторыМарок.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
	|ИЗ
	|	ВТ_ИдентификаторыМарок КАК ВТ_ИдентификаторыМарок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|		ПО ВТ_ИдентификаторыМарок.ИдентификаторМарки = бг_ИдентификаторыМарок.ИдентификаторМарки
	|			И ВТ_ИдентификаторыМарок.ОрганизацияЕГАИС = бг_ИдентификаторыМарок.ОрганизацияЕГАИС";
	
	Запрос.УстановитьПараметр("ИдентификаторыМарок", ДанныеПринимаемыхШтрихкодовПлан.ИдентификаторыМарок);
	
	РезультатЗапроса = Запрос.Выполнить();
	ИдентификаторыМарок = РезультатЗапроса.Выгрузить();
	
	ДанныеПринимаемыхШтрихкодовПлан.Марки.Индексы.Добавить("ИдентификаторМарки");
	
	// Получаем из запроса соединение входящих марок с марками в РС бг_ИдентификаторыМарок.
	Для каждого СтрокаИдентификаторыМарок Из ИдентификаторыМарок Цикл
		
		// Если такой марки в РС ранее не было - создаем новый идентификатор.
		Если СтрокаИдентификаторыМарок.ЭтоНоваяМарка Тогда
			СтрокаИдентификаторыМарок.ГУИДМарки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("ИдентификаторМарки", СтрокаИдентификаторыМарок.ИдентификаторМарки);
		НайденныеСтроки = ДанныеПринимаемыхШтрихкодовПлан.Марки.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			// Независимо от того, существовала ли такая марка уже в РС, заполняем ГУИД в таблицу движения марок.
			НайденныеСтроки[0].ГУИДМарки = СтрокаИдентификаторыМарок.ГУИДМарки;
		Иначе
			// Такой ситуации не должно быть никогда.
			ВызватьИсключение НСтр("ru='Ошибка в алгоритме движения марок.'");
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаМарка Из ДанныеПринимаемыхШтрихкодовПлан.Марки Цикл
		Если Не ЗначениеЗаполнено(СтрокаМарка.ГУИДМарки) Тогда
			// Такой ситуации не должно быть никогда.
			ВызватьИсключение НСтр("ru='Ошибка в алгоритме движения марок.'");
		КонецЕсли;
	КонецЦикла;
	
	// Записываем в РС бг_ИдентификаторыМарок только новые марки.
	ИдентификаторыМарокКЗаписи = ИдентификаторыМарок.Скопировать(
		ИдентификаторыМарок.НайтиСтроки(
			Новый Структура("ЭтоНоваяМарка", Истина)));
	
	ДанныеПринимаемыхШтрихкодовПлан.Вставить("ИдентификаторыМарокКЗаписи", ИдентификаторыМарокКЗаписи);
	
КонецПроцедуры

Процедура бг_ДозаполнитьШтрихкодыПланДаннымиТоваровТТН(ДанныеПринимаемыхШтрихкодовПлан, ТТНВходящаяЕГАИС, Отказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка.Организация КАК Организация,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки КАК НомерСтрокиТТН,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Серия КАК Серия,
	|	СУММА(ТТНВходящаяЕГАИСТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНВходящаяЕГАИСТовары.Ссылка = &ТТНВходящаяЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИСТовары.АлкогольнаяПродукция,
	|	ТТНВходящаяЕГАИСТовары.Справка2,
	|	ТТНВходящаяЕГАИСТовары.Номенклатура,
	|	ТТНВходящаяЕГАИСТовары.Серия,
	|	ТТНВходящаяЕГАИСТовары.НомерСтроки,
	|	ТТНВходящаяЕГАИСТовары.ИдентификаторСтроки,
	|	ТТНВходящаяЕГАИСТовары.Ссылка.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.ГУИДМарки КАК ГУИДМарки,
	|	Марки.ИдентификаторМарки КАК ИдентификаторМарки,
	|	Марки.Серия КАК Серия,
	|	Марки.КодУпаковки КАК КодУпаковки,
	|	Марки.Организация КАК Организация
	|ПОМЕСТИТЬ МаркиБезНоменклатуры
	|ИЗ
	|	&Марки КАК Марки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиБезНоменклатуры.ГУИДМарки КАК ГУИДМарки,
	|	МаркиБезНоменклатуры.ИдентификаторМарки КАК ИдентификаторМарки,
	|	СерииНоменклатуры.бг_Номенклатура КАК Номенклатура,
	|	МаркиБезНоменклатуры.Серия КАК Серия,
	|	МаркиБезНоменклатуры.КодУпаковки КАК КодУпаковки,
	|	МаркиБезНоменклатуры.Организация КАК Организация
	|ПОМЕСТИТЬ Марки
	|ИЗ
	|	МаркиБезНоменклатуры КАК МаркиБезНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО МаркиБезНоменклатуры.Серия = СерииНоменклатуры.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.Номенклатура КАК Номенклатура,
	|	Марки.Серия КАК Серия,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ МаркиИтоги
	|ИЗ
	|	Марки КАК Марки
	|
	|СГРУППИРОВАТЬ ПО
	|	Марки.Серия,
	|	Марки.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.ГУИДМарки КАК ГУИДМарки,
	|	Марки.ИдентификаторМарки КАК ИдентификаторМарки,
	|	Марки.Номенклатура КАК Номенклатура,
	|	Марки.Серия КАК Серия,
	|	Марки.Организация КАК Организация,
	|	Марки.КодУпаковки КАК КодУпаковки,
	|	МаркиИтоги.Количество КАК КоличествоПоТовару
	|ПОМЕСТИТЬ МаркиСИтогами
	|ИЗ
	|	Марки КАК Марки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаркиИтоги КАК МаркиИтоги
	|		ПО Марки.Номенклатура = МаркиИтоги.Номенклатура
	|			И Марки.Серия = МаркиИтоги.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыТТН.НомерСтрокиТТН КАК НомерСтрокиТТН,
	|	ТоварыТТН.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	МаркиСИтогами.Номенклатура КАК Номенклатура,
	|	МаркиСИтогами.Серия КАК Серия,
	|	МаркиСИтогами.ГУИДМарки КАК ГУИДМарки,
	|	МаркиСИтогами.ИдентификаторМарки КАК ИдентификаторМарки,
	|	МаркиСИтогами.КодУпаковки КАК КодУпаковки,
	|	МаркиСИтогами.Организация КАК Организация,
	|	ТоварыТТН.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТоварыТТН.Справка2 КАК Справка2,
	|	МаркиСИтогами.КоличествоПоТовару КАК КоличествоМарок,
	|	ЕСТЬNULL(ТоварыТТН.Количество, 0) КАК КоличествоТТН,
	|	ЕСТЬNULL(ТоварыТТН.Количество, 0) <> МаркиСИтогами.КоличествоПоТовару
	|		ИЛИ ТоварыТТН.Серия ЕСТЬ NULL КАК ЕстьНесоответствие
	|ИЗ
	|	МаркиСИтогами КАК МаркиСИтогами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыТТН КАК ТоварыТТН
	|		ПО МаркиСИтогами.Номенклатура = ТоварыТТН.Номенклатура
	|			И МаркиСИтогами.Серия = ТоварыТТН.Серия
	|ГДЕ
	|	ТоварыТТН.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	Запрос.УстановитьПараметр("Марки", ДанныеПринимаемыхШтрихкодовПлан.Марки);
	
	РезультатЗапроса = Запрос.Выполнить();
	Марки = РезультатЗапроса.Выгрузить();
	
	ПараметрыПоискаНесоответствий = Новый Структура("ЕстьНесоответствие", Истина);
	СтрокиНесоответствий = Марки.НайтиСтроки(ПараметрыПоискаНесоответствий);
	
	Если СтрокиНесоответствий.Количество() > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru='Алкогольная продукция по %1 не соответствует данным штрихкодов XML'"),
				ТТНВходящаяЕГАИС),
			ТТНВходящаяЕГАИС,
			, // Поле
			, // ПутьКДанным
			Отказ);
	КонецЕсли;
	
	ДанныеПринимаемыхШтрихкодовПлан.Вставить("Марки", Марки);
	
КонецПроцедуры

Процедура бг_ПриИзмененииСтатусаДокументаДвижениеМарок(ТТНВходящаяЕГАИС, НовыйСтатус) Экспорт
	
	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ТТНВходящаяЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	ТТНВходящаяЕГАИСОбъект = ТТНВходящаяЕГАИС.ПолучитьОбъект();
	ТТНВходящаяЕГАИСОбъект.бг_СформироватьДвиженияПоМаркам(Ложь, НовыйСтатус);
	
КонецПроцедуры

#КонецОбласти // Конец ДанныеШтрихкодовДвиженияМарок

#Область ПолучениеДанныхТТН

Функция бг_ТекстЗапросаТТНПоСвязанномуДокументу(Документ)
	
	ТекстЗапроса = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		ТекстЗапроса = бг_ТекстЗапросаТТНПоОтражениюФакта();
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров")
		Или ТипЗнч(Документ) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ТекстЗапроса = бг_ТекстЗапросаТТНПоОснованию();
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		
		ТекстЗапроса = бг_ТекстЗапросаТТНПоПриходномуОрдеру();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция бг_ТекстЗапросаТТНПоОтражениюФакта()
	
	Возврат
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Документ
	|ПОМЕСТИТЬ НайденныеПоСвязанномуДокументуТТНВходящиеЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ДокументОснование В
	|			(ВЫБРАТЬ
	|				битОтражениеФактаПоПриходномуОрдеру.ПриходныйОрдерНаТовары.Распоряжение КАК ПриходныйОрдерНаТоварыРаспоряжение
	|			ИЗ
	|				Документ.битОтражениеФактаПоПриходномуОрдеру КАК битОтражениеФактаПоПриходномуОрдеру
	|			ГДЕ
	|				битОтражениеФактаПоПриходномуОрдеру.Ссылка = &СвязанныйДокумент)";
	
КонецФункции

Функция бг_ТекстЗапросаТТНПоОснованию()
	
	Возврат
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Документ
	|ПОМЕСТИТЬ НайденныеПоСвязанномуДокументуТТНВходящиеЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ДокументОснование = &СвязанныйДокумент";
	
КонецФункции

Функция бг_ТекстЗапросаТТНПоПриходномуОрдеру()
	
	Возврат
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Документ
	|ПОМЕСТИТЬ НайденныеПоСвязанномуДокументуТТНВходящиеЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ПО ТТНВходящаяЕГАИС.ДокументОснование = ПриходныйОрдерНаТовары.Распоряжение
	|			И (ПриходныйОрдерНаТовары.Ссылка = &СвязанныйДокумент)";
	
КонецФункции

Функция бг_ТекстЗапросаДанныхТТН()
	
	Возврат
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК Документ,
	|	ТТНВходящаяЕГАИС.Проведен КАК Проведен,
	|	ТТНВходящаяЕГАИС.ДатаТТН КАК ДатаТТН,
	|	ТТНВходящаяЕГАИС.НомерТТН КАК НомерТТН,
	|	ТТНВходящаяЕГАИС.бг_ДоверительнаяПриемка КАК ДоверительнаяПриемка,
	|	СтатусыДокументовЕГАИС.Статус КАК ТекущийСтатус
	|ИЗ
	|	НайденныеПоСвязанномуДокументуТТНВходящиеЕГАИС КАК НайденныеПоСвязанномуДокументуТТНВходящиеЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО НайденныеПоСвязанномуДокументуТТНВходящиеЕГАИС.Документ = ТТНВходящаяЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО НайденныеПоСвязанномуДокументуТТНВходящиеЕГАИС.Документ = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТТНВходящаяЕГАИС.Проведен УБЫВ,
	|	ТТНВходящаяЕГАИС.МоментВремени УБЫВ";
	
КонецФункции

#КонецОбласти

Функция бг_СвязанныеДанныеПоТТН(ТТНВходящаяЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвязанныеДанныеПоТТН = бг_НовыйСвязанныеДанныеПоТТН();
	
	Если Не ЗначениеЗаполнено(ТТНВходящаяЕГАИС) Тогда
		Возврат СвязанныеДанныеПоТТН;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИС.Ссылка КАК ТТНВходящаяЕГАИС,
	|	ТТНВходящаяЕГАИС.ДокументОснование КАК ДокументОснование,
	|	ТТНВходящаяЕГАИС.бг_ДоверительнаяПриемка КАК ДоверительнаяПриемка,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ДокументОснование КАК Документ.ПриобретениеТоваровУслуг).Проведен
	|		КОГДА ТТНВходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ДокументОснование КАК Документ.ВозвратТоваровОтКлиента).Проведен
	|		КОГДА ТТНВходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ДокументОснование КАК Документ.ПеремещениеТоваров).Проведен
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументОснованиеПроведен,
	|	ВЫБОР
	|		КОГДА ТТНВходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ДокументОснование КАК Документ.ПриобретениеТоваровУслуг).ПометкаУдаления
	|		КОГДА ТТНВходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ДокументОснование КАК Документ.ВозвратТоваровОтКлиента).ПометкаУдаления
	|		КОГДА ТТНВходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ДокументОснование КАК Документ.ПеремещениеТоваров).ПометкаУдаления
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументОснованиеПометкаУдаления,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус,
	|	бг_РасширенныеСтатусыДокументовЕГАИС.Статус КАК РасширенныйСтатус
	|ПОМЕСТИТЬ ДанныеТТН
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ТТНВходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|			И (ТТНВходящаяЕГАИС.Ссылка = &ТТНВходящаяЕГАИС)
	|			И (СтатусыДокументовЕГАИС.Документ = &ТТНВходящаяЕГАИС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_РасширенныеСтатусыДокументовЕГАИС КАК бг_РасширенныеСтатусыДокументовЕГАИС
	|		ПО (бг_РасширенныеСтатусыДокументовЕГАИС.Документ = ТТНВходящаяЕГАИС.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК ПриходныйОрдерНаТовары,
	|	ПриходныйОрдерНаТовары.Проведен КАК Проведен,
	|	ПриходныйОрдерНаТовары.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ДанныеОрдера
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеТТН КАК ДанныеТТН
	|		ПО ПриходныйОрдерНаТовары.Распоряжение = ДанныеТТН.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битОтражениеФактаПоПриходномуОрдеру.Ссылка КАК ОтражениеФактаПоПриходномуОрдеру,
	|	битОтражениеФактаПоПриходномуОрдеру.Проведен КАК Проведен,
	|	битОтражениеФактаПоПриходномуОрдеру.ПометкаУдаления КАК ПометкаУдаления,
	|	битОтражениеФактаПоПриходномуОрдеру.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары,
	|	битОтражениеФактаПоПриходномуОрдеру.РезультатПриемки КАК РезультатПриемки
	|ПОМЕСТИТЬ ДанныеФактовПриемки
	|ИЗ
	|	Документ.битОтражениеФактаПоПриходномуОрдеру КАК битОтражениеФактаПоПриходномуОрдеру
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОрдера КАК ДанныеОрдера
	|		ПО битОтражениеФактаПоПриходномуОрдеру.ПриходныйОрдерНаТовары = ДанныеОрдера.ПриходныйОрдерНаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТТН.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС,
	|	ДанныеТТН.ДокументОснование КАК ДокументОснование,
	|	ДанныеТТН.ДокументОснованиеПроведен КАК ДокументОснованиеПроведен,
	|	ДанныеТТН.ДокументОснованиеПометкаУдаления КАК ДокументОснованиеПометкаУдаления,
	|	ДанныеТТН.ДоверительнаяПриемка КАК ДоверительнаяПриемка,
	|	ДанныеТТН.Статус КАК ТекущийСтатусЕГАИС,
	|	ДанныеТТН.РасширенныйСтатус КАК ТекущийРасширенныйСтатусЕГАИС
	|ИЗ
	|	ДанныеТТН КАК ДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОрдера.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары,
	|	ДанныеОрдера.Проведен КАК Проведен,
	|	ДанныеОрдера.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ДанныеОрдера КАК ДанныеОрдера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеФактовПриемки.ОтражениеФактаПоПриходномуОрдеру КАК ОтражениеФактаПоПриходномуОрдеру,
	|	ДанныеФактовПриемки.Проведен КАК Проведен,
	|	ДанныеФактовПриемки.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеФактовПриемки.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары,
	|	ДанныеФактовПриемки.РезультатПриемки КАК РезультатПриемки
	|ИЗ
	|	ДанныеФактовПриемки КАК ДанныеФактовПриемки";
	
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
    ВерхнийИндекс = РезультатыЗапроса.ВГраница();
	
	РезультатПоТТН = РезультатыЗапроса[ВерхнийИндекс - 2];
	РезультатПоОрдерам = РезультатыЗапроса[ВерхнийИндекс - 1];
	РезультатПоФактамПриемки = РезультатыЗапроса[ВерхнийИндекс];
	
	Если РезультатПоТТН.Пустой() Тогда
		Возврат СвязанныеДанныеПоТТН;
	КонецЕсли;
	
	ВыборкаПоТТН = РезультатПоТТН.Выбрать();
	ВыборкаПоТТН.Следующий();
	ЗаполнитьЗначенияСвойств(СвязанныеДанныеПоТТН, ВыборкаПоТТН);
	
	СвязанныеДанныеПоТТН.Вставить("ДанныеПриходныхОрдеров", РезультатПоОрдерам.Выгрузить());
	СвязанныеДанныеПоТТН.Вставить("ДанныеФактовПриемки", РезультатПоФактамПриемки.Выгрузить());
	
	Возврат СвязанныеДанныеПоТТН;

КонецФункции

Функция бг_НовыйСвязанныеДанныеПоТТН()

	СвязанныеДанныеПоТТН = Новый Структура;
	
	// Данные ТТН
	СвязанныеДанныеПоТТН.Вставить("ДокументОснование", Неопределено);
	СвязанныеДанныеПоТТН.Вставить("ДокументОснованиеПроведен", Ложь);
	СвязанныеДанныеПоТТН.Вставить("ДокументОснованиеПометкаУдаления", Ложь);
	СвязанныеДанныеПоТТН.Вставить("ДоверительнаяПриемка", Ложь);
	
	СвязанныеДанныеПоТТН.Вставить(
		"ТекущийСтатусЕГАИС",
		Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка());
		
	СвязанныеДанныеПоТТН.Вставить(
		"ТекущийРасширенныйСтатусЕГАИС",
		Перечисления.бг_РасширенныеСтатусыОбработкиТТНВходящейЕГАИС.ПустаяСсылка());
	
	// Данные приходных ордеров
	ДанныеПриходныхОрдеров = Новый ТаблицаЗначений;
	
	ДанныеПриходныхОрдеров.Колонки.Добавить(
		"ПриходныйОрдерНаТовары",
		Новый ОписаниеТипов("ДокументСсылка.ПриходныйОрдерНаТовары"));
		
	ДанныеПриходныхОрдеров.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ДанныеПриходныхОрдеров.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	СвязанныеДанныеПоТТН.Вставить("ДанныеПриходныхОрдеров", ДанныеПриходныхОрдеров);
	
	// Данные фактов приемки
	ДанныеФактовПриемки = Новый ТаблицаЗначений;
	
	ДанныеФактовПриемки.Колонки.Добавить(
		"ОтражениеФактаПоПриходномуОрдеру",
		Новый ОписаниеТипов("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру"));
		
	ДанныеФактовПриемки.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ДанныеФактовПриемки.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ДанныеФактовПриемки.Колонки.Добавить(
		"ПриходныйОрдерНаТовары",
		Новый ОписаниеТипов("ДокументСсылка.ПриходныйОрдерНаТовары"));
		
	ДанныеФактовПриемки.Колонки.Добавить(
		"РезультатПриемки",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_РезультатыПриемкиWMS"));
		
	СвязанныеДанныеПоТТН.Вставить("ДанныеФактовПриемки", ДанныеФактовПриемки);
	
	Возврат СвязанныеДанныеПоТТН;
	
КонецФункции

Процедура бг_ПометитьНаУдалениеДокумент(Документ)

	ДокументОбъект = Документ.ПолучитьОбъект();
	ДокументОбъект.Заблокировать();
	ДокументОбъект.ДополнительныеСвойства.Вставить("бг_НеВыполнятьАктуализациюТТН", Истина);
	ДокументОбъект.УстановитьПометкуУдаления(Истина);

КонецПроцедуры

Функция бг_ПриходныеОрдераКАктуализации(ТТНВходящаяЕГАИС, НовыйСтатусПриходногоОрдера)
	
	СвязанныеПриходныеОрдера = бг_СвязанныеПриходныеОрдера(ТТНВходящаяЕГАИС);
	
	ПриходныеОрдераКАктуализации = Новый Массив;
	
	Для каждого ДанныеПриходногоОрдера Из СвязанныеПриходныеОрдера Цикл
		Если ДанныеПриходногоОрдера.Проведен И ДанныеПриходногоОрдера.Статус <> НовыйСтатусПриходногоОрдера Тогда
			ПриходныеОрдераКАктуализации.Добавить(ДанныеПриходногоОрдера.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПриходныеОрдераКАктуализации;
	
КонецФункции

Функция бг_СвязанныеПриходныеОрдера(ТТНВходящаяЕГАИС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТовары.Проведен КАК Проведен,
	|	ПриходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ПриходныйОрдерНаТовары.Распоряжение = ТТНВходящаяЕГАИС.ДокументОснование
	|			И (ТТНВходящаяЕГАИС.Ссылка = &ТТНВходящаяЕГАИС)";
	
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция бг_ТребуетсяИзменятьДатыСвязанныхУчетныхДокументов(ТТНВходящаяЕГАИС, ДокументОснование)
	
	ЕстьМаркируемаяАлкогольнаяПродукция = бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(ТТНВходящаяЕГАИС);
	
	СвязанныеПриходныеОрдера = бг_СвязанныеПриходныеОрдера(ТТНВходящаяЕГАИС);
	ПроведенныеСвязанныеПриходныеОрдера = СвязанныеПриходныеОрдера.НайтиСтроки(Новый Структура("Проведен", Истина));
	ЕстьПроведенныйПриходныйОрдер = ПроведенныеСвязанныеПриходныеОрдера.Количество() > 0;
	
	Возврат ЕстьМаркируемаяАлкогольнаяПродукция
		И ЕстьПроведенныйПриходныйОрдер
		И (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") 
			Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
		
КонецФункции

Функция бг_НоваяТаблицаПринимаемыеМаркиПланФакт() Экспорт

	ПринимаемыеМарки = Новый ТаблицаЗначений;
	
	ПринимаемыеМарки.Колонки.Добавить(
		"НомерСтрокиТТН",
		ОбщегоНазначения.ОписаниеТипаЧисло(5));
		
	ПринимаемыеМарки.Колонки.Добавить(
		"ИдентификаторСтроки",
		ОбщегоНазначения.ОписаниеТипаСтрока(5));
		
	ПринимаемыеМарки.Колонки.Добавить(
		"АлкогольнаяПродукция",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
		
	ПринимаемыеМарки.Колонки.Добавить(
		"Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	ПринимаемыеМарки.Колонки.Добавить(
		"Серия",
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
	ПринимаемыеМарки.Колонки.Добавить(
		"Справка2",
		Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		
	ПринимаемыеМарки.Колонки.Добавить(
		"КодПаллеты",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	ПринимаемыеМарки.Колонки.Добавить(
		"КодКоробки",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	ПринимаемыеМарки.Колонки.Добавить(
		"КодМарки",
		Метаданные.РегистрыСведений.бг_ИдентификаторыМарок.Ресурсы.ИдентификаторМарки.Тип);
		
	ПринимаемыеМарки.Колонки.Добавить(
		"КоличествоПлан",
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	ПринимаемыеМарки.Колонки.Добавить(
		"КоличествоФакт",
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	Возврат ПринимаемыеМарки;
		
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

&ИзменениеИКонтроль("ПриЗаполненииОграниченияДоступа")
Процедура бг_ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ТорговыйОбъект)
#Удаление
	|	И ВЫБОР
	|		КОГДА Грузоотправитель.Сопоставлено И Грузоотправитель.СоответствуетОрганизации
	|			ТОГДА ЗначениеРазрешено(Грузоотправитель.Контрагент)
	|		КОГДА Грузоотправитель.Сопоставлено И НЕ Грузоотправитель.СоответствуетОрганизации
	|			ТОГДА ЗначениеРазрешено(Грузоотправитель.ТорговыйОбъект)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
#КонецУдаления
	|	И ВЫБОР
	|		КОГДА Грузополучатель.Сопоставлено И Грузополучатель.СоответствуетОрганизации
	|			ТОГДА ЗначениеРазрешено(Грузополучатель.Контрагент)
	|		КОГДА Грузополучатель.Сопоставлено И НЕ Грузополучатель.СоответствуетОрганизации
	|			ТОГДА ЗначениеРазрешено(Грузополучатель.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА
	|	КОНЕЦ";

КонецПроцедуры

#КонецОбласти

#КонецЕсли
