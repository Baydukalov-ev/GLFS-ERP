
#Область СлужебныйПрограммныйИнтерфейс

Процедура бг_СформироватьДвиженияПоМаркам(Отказ, ТекущийСтатус = Неопределено) Экспорт
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ОтложеннаяЗаписьДвиженийМарокТТНВходящей") Тогда
		ЗарегистрироватьДокументДляОтложеннойЗаписиМарок(ТекущийСтатус);
	Иначе
		бг_ЗаполнитьТаблицыДляДвиженийМарок(Отказ, ТекущийСтатус);
		бг_ЗаписатьДвиженияМарок();
		бг_ОбработатьДанныеМарокДокумента();
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьТаблицыДляДвиженийМарок(Отказ, ТекущийСтатус = Неопределено) Экспорт
	
	бг_ИнициализироватьДополнительныеСвойстваДляПроведенияПоМаркам(ТекущийСтатус);
	бг_ИнициализироватьТаблицыДляДвиженийМарок();
	
	Если Отказ Или Не ДополнительныеСвойства.бг_ФормироватьДвиженияПоМаркам Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеПринимаемыхШтрихкодов = бг_ДанныеПринимаемыхШтрихкодов(Отказ);
	Если ДанныеПринимаемыхШтрихкодов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеСвойства.Вставить("ДанныеПринимаемыхМарок", ДанныеПринимаемыхШтрихкодов.Марки);
	
	ДатаДвиженияМарок = Документы.ТТНВходящаяЕГАИС.бг_ДатаДвиженияМарок(
		Ссылка,
		ДополнительныеСвойства.бг_ТекущийСтатус,
		Дата,
		ДатаРегистрацииДвижений);
		
	СтатусМарки = Документы.ТТНВходящаяЕГАИС.бг_СтатусДвиженийМарок(ДополнительныеСвойства.бг_ТекущийСтатус);
	
	// РС бг_ДвижениеМарок
	ДвижениеМарок = Движения.бг_ДвижениеМарок.ВыгрузитьКолонки();
	
	Для Каждого ДанныеДвижениеМарок Из ДанныеПринимаемыхШтрихкодов.Марки Цикл
		ЗаписьДвижениеМарок = ДвижениеМарок.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьДвижениеМарок, ДанныеДвижениеМарок);
		ЗаписьДвижениеМарок.Период = ДатаДвиженияМарок;
		ЗаписьДвижениеМарок.СтатусМарки = СтатусМарки;
		ЗаписьДвижениеМарок.Активность = Истина;
	КонецЦикла;
	
	// РС бг_СоставУпаковок
	СоставУпаковок = Движения.бг_СоставУпаковок.ВыгрузитьКолонки();
	
	Для Каждого ДанныеСоставУпаковок Из ДанныеПринимаемыхШтрихкодов.Упаковки Цикл
		ЗаписьСоставУпаковок = СоставУпаковок.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьСоставУпаковок, ДанныеСоставУпаковок);
		ЗаписьСоставУпаковок.Период = ДатаДвиженияМарок;
		ЗаписьСоставУпаковок.Активность = Истина;
	КонецЦикла;
	
	// РС бг_ИдентификаторыМарок
	ИдентификаторыМарок = Неопределено;
	Если ДанныеПринимаемыхШтрихкодов.Свойство("ИдентификаторыМарокКЗаписи")
		И ДанныеПринимаемыхШтрихкодов.ИдентификаторыМарокКЗаписи.Количество() > 0 Тогда
		
		ИдентификаторыМарок = ДанныеПринимаемыхШтрихкодов.ИдентификаторыМарокКЗаписи;
	КонецЕсли;
	
	ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ДвижениеМарок = ДвижениеМарок;
	ДополнительныеСвойства.ТаблицыДляДвиженийМарок.СоставУпаковок = СоставУпаковок;
	ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ИдентификаторыМарок = ИдентификаторыМарок;
	
КонецПроцедуры

Процедура бг_ОбработатьДанныеМарокДокумента() Экспорт
	
	бг_ПерезаполнитьВидМаркиВСерияхНоменклатуры();
	
КонецПроцедуры

Процедура бг_ЗаписатьДвиженияМарок() Экспорт
		
	// РС бг_ДвижениеМарок
	Если ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ДвижениеМарок <> Неопределено Тогда
		Движения.бг_ДвижениеМарок.Загрузить(ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ДвижениеМарок);
	Иначе
		Движения.бг_ДвижениеМарок.Очистить();
	КонецЕсли;
	Движения.бг_ДвижениеМарок.Записать();
	
	// РС бг_СоставУпаковок
	Если ДополнительныеСвойства.ТаблицыДляДвиженийМарок.СоставУпаковок <> Неопределено Тогда
		Движения.бг_СоставУпаковок.Загрузить(ДополнительныеСвойства.ТаблицыДляДвиженийМарок.СоставУпаковок);
	Иначе
		Движения.бг_СоставУпаковок.Очистить();
	КонецЕсли;
	Движения.бг_СоставУпаковок.Записать();
	
	// РС бг_ИдентификаторыМарок
	Если ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ИдентификаторыМарок <> Неопределено
		И ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ИдентификаторыМарок.Количество() > 0 Тогда
		
		Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ЗаписыватьИдентификаторыМарокОднимНабором") Тогда
			НаборЗаписейИдентификаторыМарок = РегистрыСведений.бг_ИдентификаторыМарок.СоздатьНаборЗаписей();
			
			Для Каждого СтрокаИдентификаторыМарок Из ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ИдентификаторыМарок Цикл
				ЗаписьИдентификаторыМарок = НаборЗаписейИдентификаторыМарок.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИдентификаторыМарок, СтрокаИдентификаторыМарок);
			КонецЦикла;
			
			НаборЗаписейИдентификаторыМарок.Записать(Ложь);
		Иначе
			Для Каждого СтрокаИдентификаторыМарок Из ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ИдентификаторыМарок Цикл
				ЗаписьИдентификаторыМарок = РегистрыСведений.бг_ИдентификаторыМарок.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьИдентификаторыМарок, СтрокаИдентификаторыМарок);
				ЗаписьИдентификаторыМарок.Записать();
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьСтатус(
		Ссылка, Перечисления.бг_СтатусыЗаписиДвиженийМарок.ДвиженияУспешноЗаписаны);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("бг_РежимЗаписи", РежимЗаписи);
	
	бг_ЗаполнитьТаблицуИзменений();
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		бг_ЗаполнитьПаллетизациюНоменклатурыПоУмолчаниюВТаблицеТоваров();
	КонецЕсли;
	
	бг_ОбработатьДоверительнуюПриемку();
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бг_АктуализироватьСерии();
	
	бг_АктуализироватьРасширенныйСтатус();
	
	Если ДополнительныеСвойства.бг_РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Документы.ТТНВходящаяЕГАИС.бг_ПометитьНаУдалениеСвязанныеДокументы(Ссылка);
		Документы.ТТНВходящаяЕГАИС.бг_АктуализироватьПриходныеОрдера(Ссылка);
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		бг_ИнтеграцияЕГАИС.ЗарегистрироватьДокументДляОтложенногоЗапросаСправок1(Ссылка);
	Иначе
		бг_ИнтеграцияЕГАИС.ОбработатьЗагруженныеИзУТМСправки1(Ссылка);
	КонецЕсли;
	
	бг_ЗаполнитьДатуНачисленияАкцизаВСправках2();
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ТТНВходящаяЕГАИС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ИнтеграцияИС.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ИнтеграцияИСПереопределяемый.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);

#Вставка
	// Снимаем флаги автоматической записи, чтобы вызываемый ниже метод ИнтеграцияИС.ЗаписатьНаборыЗаписей()
	// не вызывал дополнительную запись пустых наборов регистров марок, которые лишний раз будут выгружаться в WMS. 
	Движения.бг_ДвижениеМарок.Записывать = Ложь;
	Движения.бг_СоставУпаковок.Записывать = Ложь;
#КонецВставки
	
	ИнтеграцияИС.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ИнтеграцияЕГАИСПереопределяемый.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
	ИнтеграцияИС.ОчиститьДополнительныеСвойстваДляПроведения(ЭтотОбъект.ДополнительныеСвойства);
	
#Вставка
	бг_СформироватьДвиженияПоМаркам(Отказ);
	
	бг_ОбновитьСтатусДоверительнаяПриемка();
	
	Если бг_НужноСоздатьПересортицуТоваровПоТТНВходящей() Тогда
		Документы.ПересортицаТоваров.бг_СоздатьДокументПересортицыТоваровНаОснованииТТНВходящей(Ссылка);
	КонецЕсли;
#КонецВставки
	
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	бг_ПроверитьСерииУпаковки(Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция бг_НужноСоздатьПересортицуТоваровПоТТНВходящей()
	
	Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СвязанныйДокументПересортицы = Документы.ПересортицаТоваров.бг_ДокументПересортицыТоваровНаОснованииТТНВходящей(
		Ссылка);
	
	Если ЗначениеЗаполнено(СвязанныйДокументПересортицы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат бг_СерииЗаполнены();
	
КонецФункции

Процедура бг_ЗаполнитьДатуНачисленияАкцизаВСправках2()
	Если ПометкаУдаления Тогда 
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2,
	|	Справки2ЕГАИСПоставщика.бг_ДатаНачисленияАкциза КАК бг_ДатаНачисленияАкциза
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ПО (ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка)
	|			И ТТНВходящаяЕГАИСТовары.Справка2 = Справки2ЕГАИС.Ссылка
	|			И (Справки2ЕГАИС.бг_ДатаНачисленияАкциза = ДАТАВРЕМЯ(1, 1, 1))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИСПоставщика
	|		ПО (ТТНВходящаяЕГАИСТовары.Ссылка = &Ссылка)
	|			И ТТНВходящаяЕГАИСТовары.НомерСправки2Поставщика = Справки2ЕГАИСПоставщика.РегистрационныйНомер
	|			И (НЕ Справки2ЕГАИСПоставщика.бг_ДатаНачисленияАкциза = ДАТАВРЕМЯ(1, 1, 1))";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	ТекстОшибкиШаблон = НСтр("ru='Не удалось установить дату начисления акциза для справки 2 %1 по причине %2'");		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			Справка2Объект = Выборка.Справка2.ПолучитьОбъект();
		    Справка2Объект.бг_ДатаНачисленияАкциза = Выборка.бг_ДатаНачисленияАкциза;
			Справка2Объект.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(ТекстОшибкиШаблон, Выборка.Справка2, ОписаниеОшибки());
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура бг_ПроверитьСерииУпаковки(Отказ)
	ТекстОшибкиШабон = НСтр("ru='В строке %1 заполнена серия и не заполнена упаковка, укажите упаковку'");
	АдресОшибкиШаблон = "Объект.Товары[%1].бг_УпаковкаПаллета";
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Серия КАК Серия,
	|	Таблица.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	&ИсходныеДанные КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанные.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО втДанные.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ВидНоменклатуры = &АлкогольнаяПродукция)
	|			И (НЕ втДанные.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|			И (втДанные.бг_УпаковкаПаллета = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))";
	Запрос.УстановитьПараметр("АлкогольнаяПродукция", бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидНоменклатурыАлкогольнаяПродукция"));
	Запрос.УстановитьПараметр("ИсходныеДанные", Товары.Выгрузить(, "Номенклатура, Серия, НомерСтроки, бг_УпаковкаПаллета"));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ТекстОшибки = СтрШаблон(ТекстОшибкиШабон, Выборка.НомерСтроки);
		АдресОшибки = СтрШаблон(АдресОшибкиШаблон, Выборка.НомерСтроки - 1);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , АдресОшибки, , Отказ);
	КонецЦикла;		
КонецПроцедуры

#Область ДвиженияПоМаркам

Функция бг_СерииЗаполнены()
	
	ПараметрыПоискаПустыхСерий = Новый Структура("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	СтрокиСПустымиСериями = Товары.НайтиСтроки(ПараметрыПоискаПустыхСерий);
	
	Возврат СтрокиСПустымиСериями.Количество() = 0;

КонецФункции	

Процедура бг_ПроверитьСоответствиеМарокТоварам(Отказ, ДанныеПринимаемыхШтрихкодов)
	
		
КонецПроцедуры

Процедура бг_ПерезаполнитьВидМаркиВСерияхНоменклатуры()
	
	Если Не ДополнительныеСвойства.Свойство("ДанныеПринимаемыхМарок") Тогда
		Возврат;
	КонецЕсли;
	
	СерииСоСтарымиМарками = Новый Массив;
	
	Для Каждого ЗаписьДвижениеМарок Из ДополнительныеСвойства.ДанныеПринимаемыхМарок Цикл
		Если Справочники.бг_КлассификаторВидовМарок.ЭтоСтараяМарка(ЗаписьДвижениеМарок.ИдентификаторМарки) Тогда
			Если СерииСоСтарымиМарками.Найти(ЗаписьДвижениеМарок.Серия) = Неопределено
				И ЗначениеЗаполнено(ЗаписьДвижениеМарок.Серия) Тогда
				
				СерииСоСтарымиМарками.Добавить(ЗаписьДвижениеМарок.Серия);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СерииСоСтарымиМарками.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидМаркиСтарая = Справочники.бг_КлассификаторВидовМарок.ВидМаркиСтарая();
	
	СерииКЗаполнениюВидаМаркиСтарая = бг_СерииКЗаполнениюВидаМаркиСтарая(СерииСоСтарымиМарками, ВидМаркиСтарая);
	
	Для Каждого Серия Из СерииКЗаполнениюВидаМаркиСтарая Цикл 
		СерияОбъект = Серия.ПолучитьОбъект();
		СерияОбъект.бг_ВидМарки = ВидМаркиСтарая;
		СерияОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция бг_СерииКЗаполнениюВидаМаркиСтарая(СерииСоСтарымиМарками, ВидМаркиСтарая)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.Ссылка В(&СерииСоСтарымиМарками)
	|	И СерииНоменклатуры.бг_СерияМарки <> &ВидМаркиСтарая";
	
	Запрос.УстановитьПараметр("СерииСоСтарымиМарками", СерииСоСтарымиМарками);
	Запрос.УстановитьПараметр("ВидМаркиСтарая", ВидМаркиСтарая);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Серия");
	
КонецФункции

#КонецОбласти // Конец ДвиженияПоМаркам

Процедура бг_ЗаполнитьТаблицуИзменений()
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураИзменений = ОбщегоНазначенияУТ.ИзмененияДокумента(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("бг_СтруктураИзменений", СтруктураИзменений);
	
КонецПроцедуры

Процедура бг_АктуализироватьРасширенныйСтатус()
	
	Если ДополнительныеСвойства.Свойство("бг_НеВыполнятьАктуализациюРасширенногоСтатусаТТН")
		И ДополнительныеСвойства.бг_НеВыполнятьАктуализациюРасширенногоСтатусаТТН = Истина Тогда
		
		Возврат;
	КонецЕсли;
	
	Документы.ТТНВходящаяЕГАИС.бг_ОбновитьРасширенныйСтатусЕГАИС(Ссылка);

КонецПроцедуры

Процедура бг_ЗаполнитьПаллетизациюНоменклатурыПоУмолчаниюВТаблицеТоваров()

	ПаллетизацияПоУмолчанию = бг_Номенклатура.ПаллетизацияМассиваНоменклатурПоУмолчанию(
		Товары.ВыгрузитьКолонку("Номенклатура"));
		
	Для Каждого СтрокаТоваров Из Товары Цикл 
		СтрокаТоваров.бг_УпаковкаПаллета = ПаллетизацияПоУмолчанию.Получить(СтрокаТоваров.Номенклатура);	
	КонецЦикла;

КонецПроцедуры

Процедура бг_ОбработатьДоверительнуюПриемку()
	
	Если Не бг_ДоверительнаяПриемка Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРасхождения = Ложь;
	СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено;
	
	Для каждого СтрокаТоварыТТН Из Товары Цикл
		СтрокаТоварыТТН.КоличествоФакт = СтрокаТоварыТТН.Количество;
	КонецЦикла;
	
КонецПроцедуры

Процедура бг_ОбновитьСтатусДоверительнаяПриемка()
	
	Если Не бг_ДоверительнаяПриемка Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтатуса = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(Ссылка);
	
	Если ДанныеСтатуса.Статус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС
		И ДанныеСтатуса.ДальнейшееДействие1 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеПроверку Тогда
		
		Документы.ТТНВходящаяЕГАИС.бг_ОтразитьИзменениеСтатусаДокументаЕГАИСПриемкаЗавершена(
			ЭтотОбъект,
			Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// ОбщиеМеханизмы.АктуализацияСерийДокумента
Процедура бг_АктуализироватьСерии()
	
	КлючевыеПоля = "Серия, Номенклатура, бг_УпаковкаПаллета";
	
	СерииДокумента = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Товары,,
		КлючевыеПоля);
		
	СерииДокумента.Свернуть(КлючевыеПоля);
	
	СерииДокумента.Колонки.Добавить(
		"ОрганизацияВладелец",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	СерииДокумента.Колонки.Добавить(
		"ОрганизацияЕГАИСВладелец",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
		
	СерииДокумента.Колонки.Добавить(
		"ДатаРегистрацииДвижений",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
	СерииДокумента.ЗаполнитьЗначения(Документы.ТТНВходящаяЕГАИС.ОрганизацияВладелец(ЭтотОбъект), "ОрганизацияВладелец");
	СерииДокумента.ЗаполнитьЗначения(Грузополучатель, "ОрганизацияЕГАИСВладелец");
	СерииДокумента.ЗаполнитьЗначения(ДатаРегистрацииДвижений, "ДатаРегистрацииДвижений");
	
	СерииКАктуализации = бг_СерииКАктуализации(СерииДокумента);
	
	Для Каждого ДанныеСерииКАктуализации Из СерииКАктуализации Цикл
		бг_АктуализироватьСерию(ДанныеСерииКАктуализации);
	КонецЦикла;
	
КонецПроцедуры

Функция бг_СерииКАктуализации(СерииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	СерииДокумента.ОрганизацияВладелец КАК ОрганизацияВладелец,
	|	СерииДокумента.ОрганизацияЕГАИСВладелец КАК ОрганизацияЕГАИСВладелец,
	|	СерииДокумента.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	СерииДокумента.ДатаРегистрацииДвижений КАК ДатаРегистрацииДвижений
	|ПОМЕСТИТЬ СерииДокумента
	|ИЗ
	|	&СерииДокумента КАК СерииДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК бг_Номенклатура,
	|	СерииДокумента.ОрганизацияВладелец КАК бг_ОрганизацияВладелец,
	|	СерииДокумента.ОрганизацияЕГАИСВладелец КАК бг_ОрганизацияЕГАИСВладелец,
	|	СерииДокумента.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	СправочникНоменклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS КАК бг_ВариантСинхронизацииWMS,
	|	СерииДокумента.ДатаРегистрацииДвижений КАК ДатаРегистрацииДвижений,
	|	СправочникСерииНоменклатуры.бг_ДокументВыпуска КАК бг_ДокументВыпуска
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииДокумента КАК СерииДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО (СправочникНоменклатура.Ссылка = СерииДокумента.Номенклатура)
	|		ПО (СерииДокумента.Серия = СправочникСерииНоменклатуры.Ссылка)
	|ГДЕ
	|	(СерииДокумента.Номенклатура <> СправочникСерииНоменклатуры.бг_Номенклатура
	|			ИЛИ СерииДокумента.ОрганизацияВладелец <> СправочникСерииНоменклатуры.бг_ОрганизацияВладелец
	|			ИЛИ СерииДокумента.ОрганизацияЕГАИСВладелец <> СправочникСерииНоменклатуры.бг_ОрганизацияЕГАИСВладелец
	|			ИЛИ СерииДокумента.ДатаРегистрацииДвижений <> СправочникСерииНоменклатуры.бг_ДатаРегистрацииДвиженийЕГАИС
	|				И СерииДокумента.ДатаРегистрацииДвижений <> ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СерииДокумента.бг_УпаковкаПаллета <> СправочникСерииНоменклатуры.бг_УпаковкаПаллета
	|				И СправочникНоменклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры)
	|			ИЛИ &ЗаполнениеДокументаВыпуска)";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда		
		ТекстЗамены = "СправочникСерииНоменклатуры.бг_ДокументВыпуска <> &ДокументВыпуска";	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЗаполнениеДокументаВыпуска", ТекстЗамены);
		Запрос.УстановитьПараметр("ДокументВыпуска", ДокументОснование);
	Иначе	
		Запрос.УстановитьПараметр("ЗаполнениеДокументаВыпуска", Ложь);	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СерииДокумента", СерииДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура бг_АктуализироватьСерию(ДанныеСерииКАктуализации)
	
	СерияОбъект = ДанныеСерииКАктуализации.Серия.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(СерияОбъект, ДанныеСерииКАктуализации,, "бг_УпаковкаПаллета");
	
	Если ЗначениеЗаполнено(ДатаРегистрацииДвижений) Тогда
		СерияОбъект.бг_ДатаРегистрацииДвиженийЕГАИС = ДатаРегистрацииДвижений;
	КонецЕсли;
	
	Если ДанныеСерииКАктуализации.бг_ВариантСинхронизацииWMS
		= Перечисления.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры Тогда
		
		СерияОбъект.бг_УпаковкаПаллета = ДанныеСерииКАктуализации.бг_УпаковкаПаллета;
	КонецЕсли;
	
	// Для перемещения документом выпуска будет являться само перемещение
	Если СерияОбъект.бг_ДокументВыпуска = Неопределено 
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		СерияОбъект.бг_ДокументВыпуска = ДокументОснование;
		
	КонецЕсли;
	
	СерияОбъект.Записать();
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.АктуализацияСерийДокумента

Процедура бг_ИнициализироватьДополнительныеСвойстваДляПроведенияПоМаркам(ТекущийСтатус = Неопределено)
	
	// бг_ТекущийСтатус
	Если ТекущийСтатус = Неопределено Тогда
		ТекущийСтатус = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(Ссылка).Статус;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("бг_ТекущийСтатус", ТекущийСтатус);
	
	// бг_ФормироватьДвиженияПоМаркам
	ФормироватьДвиженияПоМаркам =
		бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(Ссылка)
		И бг_СерииЗаполнены();
	
	ДополнительныеСвойства.Вставить("бг_ФормироватьДвиженияПоМаркам", ФормироватьДвиженияПоМаркам);
	
КонецПроцедуры

Процедура бг_ИнициализироватьТаблицыДляДвиженийМарок()

	ТаблицыДляДвиженийМарок = Новый Структура("ДвижениеМарок, СоставУпаковок, ИдентификаторыМарок");
	ДополнительныеСвойства.Вставить("ТаблицыДляДвиженийМарок", ТаблицыДляДвиженийМарок);
	
КонецПроцедуры

Функция бг_ДанныеПринимаемыхШтрихкодов(Отказ)
	
	ДанныеПринимаемыхШтрихкодов = Неопределено;
	
	Если Документы.ТТНВходящаяЕГАИС.КонечныеСтатусы().Найти(ДополнительныеСвойства.бг_ТекущийСтатус) <> Неопределено Тогда
		// Ничего не делаем. При конечном статусе движения марок очищаются
	ИначеЕсли Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ДополнительныеСвойства.бг_ТекущийСтатус) Тогда
		Если ЕстьРасхождения Тогда
			ДанныеПринимаемыхШтрихкодов = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовФакт(Ссылка);
			
			Документы.ТТНВходящаяЕГАИС.бг_МаркиФактСоответствуютАлкогольнойПродукцииТТН(
				ДанныеПринимаемыхШтрихкодов.Марки,
				Ссылка,
				Отказ);
				
			Если Отказ Тогда
				ДанныеПринимаемыхШтрихкодов = Неопределено;
			КонецЕсли;
		Иначе
			ДанныеПринимаемыхШтрихкодов = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовПлан(Ссылка, Отказ);
		КонецЕсли;
	Иначе
		ДанныеПринимаемыхШтрихкодов = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовПлан(Ссылка, Отказ);
	КонецЕсли;
	
	Возврат ДанныеПринимаемыхШтрихкодов;
	
КонецФункции

Процедура ЗарегистрироватьДокументДляОтложеннойЗаписиМарок(ТекущийСтатус)
	
	ДополнительныеСведенияОтложеннойОбработки = Новый Структура(
		"ТекущийСтатус", ТекущийСтатус);
	
	// Регистрируем к отложенной обработке в разрезе времени, 
	// чтобы гарантировано перезаписывать движения при каждой смене статуса документа
	РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
		Ссылка,
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьДвиженияМарок,
		,
		Новый ХранилищеЗначения(ДополнительныеСведенияОтложеннойОбработки),
		ТекущаяУниверсальнаяДатаВМиллисекундах());
		
	// Установим статус записи движения марок.
	// Накладываем блокировку для потокобезопасного чтения и последующей записи статуса
	РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьБлокировкуИзмененияСтатуса(Ссылка);
	Если Не РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.ДвиженияЗаписываютсяВДанныйМомент(Ссылка) Тогда
		РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьСтатус(
			Ссылка, Перечисления.бг_СтатусыЗаписиДвиженийМарок.ДвиженияЗарегистрированыКЗаписи);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
