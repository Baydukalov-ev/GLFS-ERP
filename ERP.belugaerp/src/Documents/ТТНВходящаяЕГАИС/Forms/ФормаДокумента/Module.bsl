
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриЧтенииНаСервереПеред(ТекущийОбъект)
	
	бг_ДобавитьРеквизитыФормы();
	бг_ЗаполнитьСлужебныеДанные();
	
КонецПроцедуры

&НаСервере
Процедура бг_ПриЧтенииНаСервереПосле(ТекущийОбъект)
	
	бг_УстановитьВидимостьПолейАлкогольнойПродукции();
	
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПриСозданииНаСервере")
Процедура бг_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
#Вставка
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_ДобавитьРеквизитыФормы();
		бг_ЗаполнитьСлужебныеДанные();
	КонецЕсли;
#КонецВставки
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииПриЧтенииНаСервере();
		ЗаполнитьСтатусыУказанияСерийСервер();
	КонецЕсли;
	
	ВалютаДокумента = ИнтеграцияЕГАИС.ПредставлениеВалютыРегламентированногоУчета();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Перечисления.ВидыПродукцииИС.Алкогольная);
	
#Удаление
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
#КонецУдаления
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Режим отладки
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Элементы.ДокументОснование.Видимость     = Истина;
	КонецЕсли;
	
	Элементы.СтраницаАкцизныеМарки.Видимость = ОбщегоНазначения.РежимОтладки() И Пользователи.ЭтоПолноправныйПользователь();
	
#Вставка
	бг_ДобавитьПоля();
	бг_УстановитьДоступностьПолей();
#КонецВставки
	
КонецПроцедуры

&НаСервере
Процедура бг_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	
	бг_УстановитьДоступностьПолей();
	бг_УстановитьВидимостьПолейАлкогольнойПродукции();
	
КонецПроцедуры

&НаКлиенте
&Перед("ОбработкаОповещения")
Процедура бг_ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ВозвратТоваровОтКлиента" Тогда
		ЭтотОбъект.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура бг_ПроверкаПринимаемыхШтрихкодовНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"бг_ПроверкаПринимаемыхШтрихкодовНажатиеПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Документ предварительно необходимо записать. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
			
		бг_ПроверкаПринимаемыхШтрихкодовНажатиеЗавершение();		
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПроверкаПринимаемыхШтрихкодовНажатиеПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);

	бг_ПроверкаПринимаемыхШтрихкодовНажатиеЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПроверкаПринимаемыхШтрихкодовНажатиеЗавершение()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	Если Не Объект.ЕстьРасхождения Тогда
		ПараметрыФормы.Вставить("КлючВарианта", "ПолноеСоответствиеПлану");
	Иначе
		ПараметрыФормы.Вставить("КлючВарианта", "ЕстьРасхожденияОтПлана");
	КонецЕсли;
	
	ОткрытьФорму(
		"Отчет.бг_АнализПринимаемыхМарок.ФормаОбъекта",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,
		, // Окно
		, // НавигационнаяСсылка
		, // ОписаниеОповещенияОЗакрытии
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_СтатусЕГАИСПредставлениеОбработкаНавигационнойСсылкиВместо(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПроверку"
		И ЭтотОбъект["бг_ИспользоватьМеханизмДвиженийМарок"] Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Проверка приемки выполняется на стороне внешней WMS системы.'"));
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("бг_СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Отправить акт отказа по ""%1""?'"), Объект.Ссылка);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьОтменуПроведения"
			И Не Объект.ЕстьРасхождения Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("бг_СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Запросить отмену проведения акта подтверждения по ""%1""?'"), Объект.Ссылка);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьПолучение"
			И Не Объект.ЕстьРасхождения Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("бг_СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Отправить акт подтверждения по ""%1""?'"), Объект.Ссылка);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьОтменуПроведения"
			И Объект.ЕстьРасхождения Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("бг_СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Запросить отмену проведения акта расхождения по ""%1""?'"), Объект.Ссылка);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьПолучение"
			И Объект.ЕстьРасхождения Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("бг_СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Отправить акт расхождения по ""%1""?'"), Объект.Ссылка);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);	
			
	Иначе
		ПродолжитьВызов(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_УказатьДатуНачисленияАкциза(Команда)
	Справки2 = Новый Массив;
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		Справки2.Добавить(СтрокаТовары.Справка2);
	КонецЦикла;                                                                                    
	ПараметрыФормы = Новый Структура("Справки2", Справки2);
	ОповещениеЗавершения = Новый ОписаниеОповещения("бг_УказатьДатуНачисленияАкцизаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Справки2ЕГАИС.Форма.бг_ФормаУказанияДатыНачисленияАкциза", 
		ПараметрыФормы, , , , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура бг_УказатьДатуНачисленияАкцизаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОповеститьОбИзменении(Тип("СправочникСсылка.Справки2ЕГАИС"));
	Элементы.Товары.Обновить();
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьРеквизитыФормы()
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "бг_ЭтоКонтролерЕГАИС") Тогда
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				"бг_ЭтоКонтролерЕГАИС",
				Новый ОписаниеТипов("Булево")));
	
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "бг_ЭтоТТНПоВозвратуТоваровОтКлиента") Тогда
	
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				"бг_ЭтоТТНПоВозвратуТоваровОтКлиента",
				Новый ОписаниеТипов("Булево")));
				
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "бг_ЭтоТТНПоПеремещениюТоваров") Тогда
	
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				"бг_ЭтоТТНПоПеремещениюТоваров",
				Новый ОписаниеТипов("Булево")));
				
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "бг_ИспользоватьМеханизмДвиженийМарок") Тогда
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				"бг_ИспользоватьМеханизмДвиженийМарок",
				Новый ОписаниеТипов("Булево")));
	
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "бг_ТекущийСтатусЕГАИС") Тогда
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				"бг_ТекущийСтатусЕГАИС",
				Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС")));
	
	КонецЕсли;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьСлужебныеДанные()

	ЭтотОбъект["бг_ЭтоКонтролерЕГАИС"] = РольДоступна("бг_КонтролерЕГАИС");
	ЭтотОбъект["бг_ЭтоТТНПоВозвратуТоваровОтКлиента"] = Документы.ТТНВходящаяЕГАИС.бг_ЭтоТТНПоВозвратуТоваровОтКлиента(Объект.Ссылка);
	ЭтотОбъект["бг_ЭтоТТНПоПеремещениюТоваров"] = Документы.ТТНВходящаяЕГАИС.бг_ЭтоТТНПоПеремещениюТоваров(Объект.Ссылка);
	ЭтотОбъект["бг_ИспользоватьМеханизмДвиженийМарок"] = бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтотОбъект["бг_ТекущийСтатусЕГАИС"] = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(Объект.Ссылка).Статус;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеФактическаяКрепость()

	КонтекстПоляФактическаяКрепость = бг_ПрограммныйИнтерфейс.НовыйКонтекстЭлемента(ЭтаФорма, Элементы.Товары);
	
	ПолеФактическаяКрепость = бг_ПрограммныйИнтерфейс.НовоеПолеТабличнойЧастиформы(
		КонтекстПоляФактическаяКрепость,
		"Объект.Товары",
		"бг_ФактическаяКрепость");
		
	ПолеФактическаяКрепость.ТолькоПросмотр = Истина;

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьКомандуУказатьДатуНачисленияАкциза()
	ИмяКоманды       = "бг_УказатьДатуНачисленияАкциза";
	ЗаголовокКоманды = НСтр("ru = 'Указать дату начисления акциза'");
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект, ИмяКоманды,	Элементы.ТоварыГруппаДополнительныеКоманды, ЗаголовокКоманды,
		ИмяКоманды, ИмяКоманды, , ВидКнопкиФормы.КнопкаКоманднойПанели);
	ТекущаяКоманда = Команды[ИмяКоманды];
	ТекущаяКоманда.ИзменяетСохраняемыеДанные = Ложь;
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеДатаНачисленияАкциза()
	бг_ТоварыДатаНачисленияАкциза = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ТоварыДатаНачисленияАкциза", 
		Элементы.Товары, 
		"Объект.Товары.Справка2.бг_ДатаНачисленияАкциза", 
		, 
		Элементы.ТоварыНомерСправки2Поставщика);
	бг_ТоварыДатаНачисленияАкциза.Ширина = 15;   
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеДоверительнаяПриемка()
	
	бг_ДоверительнаяПриемка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ДоверительнаяПриемка",
		Элементы.ГруппаШапкаДополнительно,
		"Объект.бг_ДоверительнаяПриемка",,,
		"ПолеФлажка");
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеУпаковкаПаллета()
	
	бг_ТоварыУпаковкаПаллета = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ТоварыУпаковкаПаллета", 
		Элементы.Товары, 
		"Объект.Товары.бг_УпаковкаПаллета", 
		, 
		Элементы.ТоварыКоличество);
	бг_ТоварыУпаковкаПаллета.Ширина = 15;

КонецПроцедуры

&НаСервере
Процедура бг_УстановитьВидимостьПолейАлкогольнойПродукции()
	
	ИспользоватьМеханизмДвиженийМарок = 
		ЗначениеЗаполнено(Объект.Ссылка)
		И ЭтотОбъект["бг_ИспользоватьМеханизмДвиженийМарок"];
		
	Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость = Не ИспользоватьМеханизмДвиженийМарок;
	бг_ГиперссылкаПроверкиПринимаемыхШтрихкодов().Видимость = ИспользоватьМеханизмДвиженийМарок;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПоля()
	
	бг_ДобавитьПолеФактическаяКрепость();
	бг_ДобавитьПолеУпаковкаПаллета();
	бг_ДобавитьПолеДатаНачисленияАкциза();
	бг_ДобавитьПолеДоверительнаяПриемка();
	бг_ДобавитьКомандуУказатьДатуНачисленияАкциза();
	
КонецПроцедуры

&НаСервере
Процедура бг_УстановитьДоступностьПолей()
	
	Если Элементы.Найти("бг_ДоверительнаяПриемка") <> Неопределено Тогда
		Элементы.бг_ДоверительнаяПриемка.ТолькоПросмотр = Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(
			ЭтотОбъект["бг_ТекущийСтатусЕГАИС"]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция бг_ГиперссылкаПроверкиПринимаемыхШтрихкодов()

	ГиперссылкаПроверкиПринимаемыхШтрихкодов = Элементы.Найти("бг_ПроверкаПринимаемыхШтрихкодов");
	Если ГиперссылкаПроверкиПринимаемыхШтрихкодов <> Неопределено Тогда
		Возврат ГиперссылкаПроверкиПринимаемыхШтрихкодов;
	КонецЕсли;
	
	ГиперссылкаПроверкиПринимаемыхШтрихкодов = Элементы.Вставить(
		"бг_ПроверкаПринимаемыхШтрихкодов",
		Тип("ДекорацияФормы"),
		Элементы.СтраницаТовары,
		Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции);
		
	ГиперссылкаПроверкиПринимаемыхШтрихкодов.Вид = ВидДекорацииФормы.Надпись;
	ГиперссылкаПроверкиПринимаемыхШтрихкодов.Гиперссылка = Истина;
	ГиперссылкаПроверкиПринимаемыхШтрихкодов.Заголовок = "Проверить принимаемые штрихкоды";
	ГиперссылкаПроверкиПринимаемыхШтрихкодов.УстановитьДействие("Нажатие", "бг_ПроверкаПринимаемыхШтрихкодовНажатие");
	
	Возврат ГиперссылкаПроверкиПринимаемыхШтрихкодов;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_НоменклатураСоответствуетАП(Номенклатура, АлкогольнаяПродукция, Справка2)
	
	ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Номенклатура,
		"ОсобенностьУчета, ВидАлкогольнойПродукции, ОбъемДАЛ, Крепость, ТипНоменклатуры");
		
	ПараметрыОтбора = бг_ДанныеАПДляПроверкиСоответствияНоменклатуре(АлкогольнаяПродукция, Справка2);
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НоменклатураСоответствуетАП = Истина;
	
	Для каждого ПараметрОтбора Из ПараметрыОтбора Цикл
		
		ИмяРеквизита = ПараметрОтбора.Ключ;
		ОжидаемоеЗначение = ПараметрОтбора.Значение;
		
		Если ТипЗнч(ОжидаемоеЗначение) = Тип("Массив") Тогда
			
			Если ОжидаемоеЗначение.Найти(ДанныеНоменклатуры[ИмяРеквизита]) = Неопределено Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru='В выбранной номенклатуре указано недопустимое свойство ""%1"" (%2).'"),
					Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита].Представление(),
					ДанныеНоменклатуры[ИмяРеквизита]));
					
				НоменклатураСоответствуетАП = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Если ДанныеНоменклатуры[ИмяРеквизита] <> ОжидаемоеЗначение Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru='В выбранной номенклатуре указано недопустимое свойство ""%1"" (%2), ожидается ""%3"".'"),
					Метаданные.Справочники.Номенклатура.Реквизиты[ИмяРеквизита].Представление(),
					ДанныеНоменклатуры[ИмяРеквизита],
					ОжидаемоеЗначение));
					
				НоменклатураСоответствуетАП = Ложь;
					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоменклатураСоответствуетАП;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_ДанныеАПДляПроверкиСоответствияНоменклатуре(АлкогольнаяПродукция, Справка2)

	// Проверка сделана по аналогии с СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры()
	// + объем и крепость.
	
	ДанныеАП = ИнтеграцияЕГАИСВызовСервера.РеквизитыАлкогольнойПродукцииДляСозданияНоменклатуры(АлкогольнаяПродукция);
	
	ПараметрыОтбора = Новый Структура;
	
	// ОсобенностьУчета
	ОсобенностиУчета = Новый Массив;
	
	ВидыПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииЕГАИС();
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		Для Каждого ВидПродукцииИС Из ВидыПродукции Цикл
			ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидПродукцииИС);
			Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
				ОсобенностиУчета.Добавить(ОсобенностьУчета);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(ВидыПродукции);
		Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
			ОсобенностиУчета.Добавить(ОсобенностьУчета);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("ОсобенностьУчета", ОсобенностиУчета);
	
	// ТипНоменклатуры, ВидАлкогольнойПродукции, Крепость
	ПараметрыОтбора.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар);
	ПараметрыОтбора.Вставить("ВидАлкогольнойПродукции", ДанныеАП.ВидАлкогольнойПродукцииЕГАИС);
	
	Если ДанныеАП.МаркируемаяПродукцияЕГАИС Тогда
		
		Если Не ЗначениеЗаполнено(Справка2) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Необходимо заполнить справку 2'"));
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеСправки2 = бг_ИнтеграцияЕГАИС.ДанныеСправки2(Справка2);
		Если Не ЗначениеЗаполнено(ДанныеСправки2.Справка1) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указана справка 1 в справке 2'"));
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("Крепость", ДанныеСправки2.Крепость);
		
		// ОбъемДАЛ
		ОбъемВЛитрах = ДанныеАП.ОбъемЕГАИС;
		КоэффициентДАЛ = 10; // В 1 ДАЛ содержится 10 литров.
		ПараметрыОтбора.Вставить("ОбъемДАЛ", ОбъемВЛитрах / КоэффициентДАЛ);
		
	КонецЕсли;
	
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Процедура бг_ЗаполнитьПаллетизациюНоменклатурыПоУмолчаниюВСтрокеТоваров(ТекущаяСтрокаТовары)
	
	ТекущаяСтрокаТовары.бг_УпаковкаПаллета = бг_ПаллетизацияНоменклатурыПоУмолчанию(ТекущаяСтрокаТовары.Номенклатура);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция бг_ПаллетизацияНоменклатурыПоУмолчанию(Номенклатура)
	
	Возврат бг_Номенклатура.ПаллетизацияНоменклатурыПоУмолчанию(Номенклатура);
	
КонецФункции

#Область ПриИзмененииРеквизитов

&НаКлиенте
&ИзменениеИКонтроль("ПриИзмененииНоменклатуры")
Процедура бг_ПриИзмененииНоменклатуры()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
#Вставка
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
	
		Если ЗначениеЗаполнено(ТекущиеДанные.АлкогольнаяПродукция) Тогда
			
			Если Не бг_НоменклатураСоответствуетАП(
					ТекущиеДанные.Номенклатура,
					ТекущиеДанные.АлкогольнаяПродукция,
					ТекущиеДанные.Справка2) Тогда
					
				ТекущиеДанные.Номенклатура = Неопределено;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Выбранная номенклатура не соответствует алкогольной продукции.'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
#КонецВставки
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = Истина;
	ПараметрыЗаполнения.ОбработатьУпаковки                 = Ложь;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект,
		ТекущиеДанные,
		КэшированныеЗначения,
		ПараметрыЗаполнения);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ТекущиеДанные.Характеристика = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И (ЗначениеЗаполнено(ТекущиеДанные.Характеристика)
			ИЛИ НЕ ТекущиеДанные.ХарактеристикиИспользуются) Тогда
		ТекущиеДанные.Сопоставлено = Истина;
	Иначе
		ТекущиеДанные.Сопоставлено = Ложь;
	КонецЕсли;
	
	УстановитьОтборСтрок(ЭтотОбъект);
	
#Вставка
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		бг_ЗаполнитьПаллетизациюНоменклатурыПоУмолчаниюВСтрокеТоваров(ТекущиеДанные);
	КонецЕсли;
#КонецВставки

КонецПроцедуры

#КонецОбласти // Конец ПриИзмененииРеквизитов

#Область СканированиеАлкогольнойПродукции

&НаСервере
&После("ОбновитьИнформациюОткрытияФормыСканирования")
Процедура бг_ОбновитьИнформациюОткрытияФормыСканирования(Прочитать)
	
	бг_УстановитьВидимостьПолейАлкогольнойПродукции();
	
КонецПроцедуры

#КонецОбласти // Конец СканированиеАлкогольнойПродукции

#Область ТТНПоВозвратуТоваровОтКлиента

&НаСервере
&После("ОбновитьТекстПоступлениеТоваров")
// Создан по аналогии с кодом типовой процедурой ОбновитьТекстПоступлениеТоваров
//
Процедура бг_ОбновитьТекстПоступлениеТоваров()
	
	Если ЭтаФорма.бг_ЭтоТТНПоВозвратуТоваровОтКлиента Тогда
		
		Строки = Новый Массив;
		
		Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			КоличествоДокументов = 0;
			
			Если ЕстьПравоЧтенияПоступления Тогда
				ИнтеграцияЕГАИСПереопределяемый.бг_ПолучитьКоличествоВозможныхДокументовВозвратТоваровОтКлиента(
					КоличествоДокументов,
					Объект.Организация,
					Объект.ТорговыйОбъект,
					ГрузоотправительПредставлениеСопоставленного);
			КонецЕсли;
			
			Если ЕстьПравоСозданияПоступления Тогда
				Строки.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Оформить возврат товаров от клиента';
							|en = 'Оформить возврат товаров от клиента'"),,
						ЦветаСтиля.ЦветГиперссылкиГосИС,,
						"ОформитьПоступление"));
				Строки.Добавить("    ");
			КонецЕсли;
			
			Если КоличествоДокументов > 0 Тогда
				Строки.Добавить(
					Новый ФорматированнаяСтрока(
						СтрШаблон(НСтр("ru = 'Связать с возвратом товаров от клиента (%1)';
										|en = 'Связать с возвратом товаров от клиента (%1)'"), КоличествоДокументов),,
						ЦветаСтиля.ЦветГиперссылкиГосИС,,
						"СвязатьСПоступлением"));
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстПоступлениеТоваров = Новый ФорматированнаяСтрока(Строки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("СоздатьДокументПоступления")
Процедура бг_СоздатьДокументПоступления(СопоставлятьКлассификаторы = Истина)
	
	НесопоставленныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Сопоставлено", Ложь));
	
	Если НесопоставленныеСтроки.Количество() = 0 Тогда
//#Вставка
		Если ЭтаФорма.бг_ЭтоТТНПоВозвратуТоваровОтКлиента Тогда 
			СобытияФормЕГАИСКлиентПереопределяемый.бг_ОткрытьФормуСозданияДокументаВозвратТоваровОтКлиентаНаОснованииТТНЕГАИС(Объект.Ссылка);
		Иначе
//#КонецВставки
			СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСозданияДокументаПоступленияТоваровНаОснованииТТНЕГАИС(Объект.Ссылка);
//#Вставка
		КонецЕсли;
//#КонецВставки		
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сопоставить';
													|en = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
													|en = 'Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОбработатьОтветНаВопросОбОткрытииФормыСопоставленияКлассификаторовЕГАИС",
				ЭтотОбъект,
				Новый Структура("СоздатьПоступление", Истина)),
			НСтр("ru = 'В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?';
			          |en = 'В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?'"),
			Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("ВыбратьДокументПоступления")
Процедура бг_ВыбратьДокументПоступления(СопоставлятьКлассификаторы = Истина)
	
	НесопоставленныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Сопоставлено", Ложь));
	
	Если НесопоставленныеСтроки.Количество() = 0 Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация",    Объект.Организация);
		СтруктураОтбора.Вставить("ТорговыйОбъект", Объект.ТорговыйОбъект);
		СтруктураОтбора.Вставить("Контрагент",     ГрузоотправительПредставлениеСопоставленного);
//#Вставка
		Если ЭтотОбъект.бг_ЭтоТТНПоВозвратуТоваровОтКлиента Тогда
			СобытияФормЕГАИСКлиентПереопределяемый.бг_ОткрытьФормуВыбораДокументаВозвратТоваровОтКлиента(
				ЭтотОбъект,
				Новый ОписаниеОповещения("ПослеВыбораДокументаПоступления", ЭтотОбъект),
				СтруктураОтбора);
		ИначеЕсли ЭтотОбъект.бг_ЭтоТТНПоПеремещениюТоваров Тогда
				
			СтруктураОтбора.Вставить(
				"СкладОтправитель", 
				ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Грузоотправитель, "ТорговыйОбъект"));
			
			СобытияФормЕГАИСКлиентПереопределяемый.бг_ОткрытьФормуВыбораДокументаПеремещениеТоваров(
				ЭтотОбъект,
				Новый ОписаниеОповещения("ПослеВыбораДокументаПоступления", ЭтотОбъект),
				СтруктураОтбора);		
		Иначе
//#КонецВставки
			СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуВыбораДокументаПоступлениеТоваровУслуг(
				ЭтотОбъект,
				Новый ОписаниеОповещения("ПослеВыбораДокументаПоступления", ЭтотОбъект),
				СтруктураОтбора);
//#Вставка
		КонецЕсли;
//#КонецВставки
	Иначе
		
		Если Не СопоставлятьКлассификаторы Тогда
			Возврат;
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сопоставить';
													|en = 'Сопоставить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена';
													|en = 'Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"ОбработатьОтветНаВопросОбОткрытииФормыСопоставленияКлассификаторовЕГАИС",
				ЭтотОбъект,
				Новый Структура("ВыбратьПоступление",Истина)),
			НСтр("ru = 'В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?';
			          |en = 'В документе найдены несопоставленные элементы классификаторов ЕГАИС.
			          |Сопоставить классификаторы?'"),
			Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец ТТНПоВозвратуТоваровОтКлиента

&ИзменениеИКонтроль("УстановитьУсловноеОформление")
&НаСервере
Процедура бг_УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);

	СобытияФормЕГАИС.УстановитьУсловноеОформлениеПоляКоличество(ЭтотОбъект,
		"Объект.Товары.НеупакованнаяПродукция",
		"ТоварыКоличество,ТоварыКоличествоФакт");
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеНоменклатура"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеХарактеристика"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

#Удаление
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставленоКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
#КонецУдаления

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

#Удаление
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставленоКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
#КонецУдаления

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьСопоставленныеТовары")
&НаСервере
Процедура бг_ЗаполнитьСопоставленныеТовары(АлкогольнаяПродукция)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтСоответствие
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ТабличнаяЧасть.АлкогольнаяПродукция)
	|			И (СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки = ТабличнаяЧасть.ИдентификаторУпаковки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтСоответствие.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ВтСоответствие.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	СУММА(1) КАК Количество
	|ПОМЕСТИТЬ ВтКоличествоСопоставлено
	|ИЗ
	|	ВтСоответствие КАК ВтСоответствие
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтСоответствие.АлкогольнаяПродукция,
	|	ВтСоответствие.ИдентификаторУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КоличествоСопоставлено.Количество, 0) = 1
	|			ТОГДА ВтСоответствие.Номенклатура
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КоличествоСопоставлено.Количество, 0) = 1
	|			ТОГДА ВтСоответствие.Характеристика
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Характеристика,
	|	ЕСТЬNULL(КоличествоСопоставлено.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ ВтОднозначноСопоставлено
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО (КоличествоСопоставлено.АлкогольнаяПродукция = ТабличнаяЧасть.АлкогольнаяПродукция)
	|			И (КоличествоСопоставлено.ИдентификаторУпаковки = ТабличнаяЧасть.ИдентификаторУпаковки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСоответствие КАК ВтСоответствие
	|		ПО (ВтСоответствие.АлкогольнаяПродукция = ТабличнаяЧасть.АлкогольнаяПродукция)
	|			И (ВтСоответствие.ИдентификаторУпаковки = ТабличнаяЧасть.ИдентификаторУпаковки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика
	|ИЗ
	|	ВтСоответствие КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СопоставленоПозиций.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура = &ПустаяНоменклатура
	|				И СопоставленоПозиций.Количество = 1
	|			ТОГДА СопоставленоПозиций.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура = &ПустаяНоменклатура
	|				И СопоставленоПозиций.Количество = 1
	|			ТОГДА СопоставленоПозиций.Характеристика
	|		ИНАЧЕ Товары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ЕСТЬNULL(Классификатор.ТипПродукции, ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)) КАК ТипПродукции
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОднозначноСопоставлено КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция)
	|			И (СопоставленоПозиций.ИдентификаторУпаковки = Товары.ИдентификаторУпаковки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Классификатор
	|		ПО (Классификатор.Ссылка = Товары.АлкогольнаяПродукция)");

	Если ЗначениеЗаполнено(АлкогольнаяПродукция) Тогда
		ПараметрыОтбора = Новый Структура("АлкогольнаяПродукция", АлкогольнаяПродукция);
	Иначе
		ПараметрыОтбора = Неопределено;
	КонецЕсли;
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(ПараметрыОтбора, "АлкогольнаяПродукция, Номенклатура, Характеристика, ИдентификаторУпаковки, Серия, НомерСтроки"));

	Запрос.УстановитьПараметр("ПустаяНоменклатура",   ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));

	РезультатЗапроса = Запрос.ВыполнитьПакет();

	НоменклатураДляВыбора.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить());

	Выборка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл

		СтрокаТЧ = Объект.Товары.Получить(Выборка.НомерСтроки - 1);

		СтрокаТЧ.НеупакованнаяПродукция = Выборка.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная;
		СтрокаТЧ.СопоставленоКоличество = Выборка.Количество;

		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура)
			И (ЗначениеЗаполнено(СтрокаТЧ.Характеристика)
				ИЛИ НЕ СтрокаТЧ.ХарактеристикиИспользуются) Тогда
			НоменклатураЗаполнена = Истина;
		Иначе
			НоменклатураЗаполнена = Ложь;
		КонецЕсли;

		СтрокаТЧ.Сопоставлено = НоменклатураЗаполнена;

#Удаление
		Если Выборка.Количество = 1 И Не НоменклатураЗаполнена Тогда
			//заполнение строки документа
			Если (СтрокаТЧ.Номенклатура <> Выборка.Номенклатура
					Или СтрокаТЧ.Характеристика <> Выборка.Характеристика)
					И ЗначениеЗаполнено(Выборка.Номенклатура) Тогда

				СтрокаТЧ.Номенклатура   = Выборка.Номенклатура;
				СтрокаТЧ.Характеристика = Выборка.Характеристика;
				СтрокаТЧ.Сопоставлено   = Истина;

				ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ            = Истина;
				ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = Истина;
				ПараметрыЗаполнения.ЗаполнитьАртикул                   = Истина;
				ПараметрыЗаполнения.ЗаполнитьКод                       = Истина;
				ПараметрыЗаполнения.ОбработатьУпаковки                 = Ложь;
				СобытияФормЕГАИСПереопределяемый.ПриИзмененииНоменклатуры(
					ЭтотОбъект, СтрокаТЧ, Неопределено,
					ПараметрыЗаполнения, ПараметрыУказанияСерий);

				Модифицированность = Истина;

			КонецЕсли;
		ИначеЕсли Выборка.Количество > 1 Тогда
#КонецУдаления
#Вставка
		Если Выборка.Количество > 0 Тогда
#КонецВставки
			СтрокаТЧ.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>';
																	|en = '<Несколько позиций (%1)>'"), Выборка.Количество);
			СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>';
														|en = '<Не сопоставлено>'");
		Иначе
			СтрокаТЧ.СопоставлениеНоменклатура   = НСтр("ru = '<Не сопоставлено>';
														|en = '<Не сопоставлено>'");
			СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>';
														|en = '<Не сопоставлено>'");
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти // Конец СлужебныеПроцедурыИФункции