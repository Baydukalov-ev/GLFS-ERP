#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтотОбъект, "Объект.МесяцСписания", "МесяцСписанияСтрокой");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УстановитьПараметрыДинамичискихСписков();
	
	ЗаполнитьОтклонение();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)   
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)  
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом  
	
	УстановитьПараметрыДинамичискихСписков();
	ЗаполнитьОтклонение();   
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьОстаткиТоваров(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьОстаткиТоваровЗавершение", ЭтотОбъект);
	Если Объект.ОстаткиТоваров.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Таблица будет очищена. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткиТоваровЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьОстаткиТоваровНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоКонтроль(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьКоличествоКонтрольЗавершение", ЭтотОбъект);
	Если Объект.ОстаткиТоваров.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Данные о контроле будут изменены. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоКонтрольЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьКоличествоКонтрольНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДопустимыеПотери(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьДопустимыеПотериЗавершение", ЭтотОбъект);
	Если Объект.ДопустимыеПотери.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Таблица будет очищена. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДопустимыеПотериЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДопустимыеПотериНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеПотери(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьФактическиеПотериЗавершение", ЭтотОбъект);
	Если Объект.ФактическиеПотери.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Таблица будет очищена. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическиеПотериЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьФактическиеПотериНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределениеПотерь(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРаспределениеПотерьЗавершение", ЭтотОбъект);
	Если Объект.РаспределениеПотерь.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Таблица будет очищена. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределениеПотерьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРаспределениеПотерьНаСервере();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Редактирование месяца строкой.

&НаКлиенте
Процедура МесяцСписанияСтрокойПриИзменении(Элемент)
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцСписания", "МесяцСписанияСтрокой", Модифицированность);
	ПриИзмененииМесяцаСписания();
КонецПроцедуры

&НаКлиенте
Процедура МесяцСписанияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("МесяцСписанияСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцСписания", "МесяцСписанияСтрокой", , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСписанияСтрокойНачалоВыбораЗавершение(ЗначениеВыбрано, ДополнительныеПараметры) Экспорт
	ПриИзмененииМесяцаСписания();
КонецПроцедуры

&НаКлиенте
Процедура МесяцСписанияСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцСписания", "МесяцСписанияСтрокой", Направление, Модифицированность);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияМесяцНачисленияПриИзменении", 0.3, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСписанияСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МесяцСписанияСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровКоличествоФактПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ОстаткиТоваров.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		УстановитьКоличествоОтклонение(ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСписанияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока = Элементы.ДокументыСписания.ТекущиеДанные;
	Если Не ТекущаяСтрока = Неопределено Тогда
		ПараметрыОткрытияФормы = Новый Структура("Ключ", ТекущаяСтрока.Ссылка);
		ОткрытьФорму(ИмяФормыДокументаПоСсылке(ТекущаяСтрока.Ссылка), ПараметрыОткрытияФормы);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИмяФормыДокументаПоСсылке(Ссылка)
	СсылкаМетаданные = Ссылка.Метаданные();
	Результат = СсылкаМетаданные.Формы.ФормаДокумента.ПолноеИмя();
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьПараметрыДинамичискихСписков()
	ПараметрСписаниеПотерь = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		ДокументыСписания, "СписаниеПотерь", ПараметрСписаниеПотерь, Истина);
	КоличествоДокументовСписания = Документы.битСписаниеПотерь.КоличествоДокументовСписания(ПараметрСписаниеПотерь); 
	Элементы.ДокументыСписания.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияМесяцНачисленияПриИзменении()
	ПриИзмененииМесяцаСписания();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииМесяцаСписания()
	Объект.ДопустимыеПотери.Очистить();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстаткиТоваровНаСервере()
	Объект.ОстаткиТоваров.Очистить();
	ТаблицаОстатков = Документы.битСписаниеПотерь.ОстаткиТоваров(
		Объект.Организация, 
		Объект.ЦеховаяКладовая,
		Объект.МесяцСписания,
		Объект.ДатаКонтроляОстатков);
	Объект.ОстаткиТоваров.Загрузить(ТаблицаОстатков);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоКонтрольНаСервере()
	ТаблицаОстатков = Документы.битСписаниеПотерь.ОстаткиТоваров(
		Объект.Организация, 
		Объект.ЦеховаяКладовая,
		Объект.МесяцСписания,
		Объект.ДатаКонтроляОстатков); 
	КолонкиПоиска = "Номенклатура, Серия";
	ТаблицаОстатков.Индексы.Добавить(КолонкиПоиска);
	СтруктураПоиска = Новый Структура(КолонкиПоиска);
	Для каждого СтрокаДокумент Из Объект.ОстаткиТоваров Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумент);
		СтрокиДанных = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		Если СтрокиДанных.Количество() Тогда
			СтрокаДокумент.КоличествоКонтроль = СтрокиДанных[0].КоличествоКонтроль;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопустимыеПотериНаСервере()
	Объект.ДопустимыеПотери.Очистить();
	ТаблицаПотерь = Документы.битСписаниеПотерь.ПотериПоНорме(Объект.МесяцСписания, Объект.Организация);
	Объект.ДопустимыеПотери.Загрузить(ТаблицаПотерь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическиеПотериНаСервере()
	Объект.ФактическиеПотери.Очистить();
	Для каждого СтрокаТовары Из Объект.ОстаткиТоваров Цикл
		Если СтрокаТовары.КоличествоФакт < СтрокаТовары.Количество Тогда
			Потери = Мин(СтрокаТовары.Количество - СтрокаТовары.КоличествоФакт, СтрокаТовары.КоличествоКонтроль);
		Иначе
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ФактическиеПотери.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		НоваяСтрока.Количество = Потери;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределениеПотерьНаСервере()
	Объект.РаспределениеПотерь.Очистить();
	РаспределениеПотерь = Документы.битСписаниеПотерь.РаспределитьПотери(
		Объект.ДопустимыеПотери.Выгрузить(),
		Объект.ФактическиеПотери.Выгрузить());
	Объект.РаспределениеПотерь.Загрузить(РаспределениеПотерь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклонение()
	Для каждого СтрокаТовар Из Объект.ОстаткиТоваров Цикл
		УстановитьКоличествоОтклонение(СтрокаТовар);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКоличествоОтклонение(СтрокаДокумента)
	СтрокаДокумента.КоличествоОтклонение = - СтрокаДокумента.КоличествоФакт + СтрокаДокумента.Количество;
КонецПроцедуры 

#КонецОбласти 