#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗаявлениеОВыдачеФСМ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.КПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗаявлениеОВыдачеФСМ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят         = Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.бг_ПроведенЕГАИС;
	СтатусыБазовыйПроцесс.Обрабатывается = Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.Ошибка         = Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Ложь;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = СтатусыБазовыйПроцесс;		
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, Истина);
			
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = СтатусыБазовыйПроцесс;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
			Статусы, Истина);
			
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Документ ЕГАИС.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа ЕГАИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Перечисления.ВидыДокументовЕГАИС.бг_ЗаявлениеОВыдачеФСМ, ДокументСсылка, Ложь, Ложь);
	ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  Перечисления.ВидыДокументовЕГАИС.бг_НакладнаяНаВыдачуФСМ);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросАкцизныхМарокЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС.ОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.бг_ЗапроситеФСМ;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.бг_ЗапроситеФСМ);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.бг_ОжидайтеПолучениеФСМ);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
		|ИЗ
		|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битЗаявлениеОВыдачеФСМ КАК ЗаявлениеОВыдачеФСМ
		|		ПО СтатусыДокументовЕГАИС.Документ = ЗаявлениеОВыдачеФСМ.Ссылка
		|ГДЕ
		|	ЗаявлениеОВыдачеФСМ.Ссылка ЕСТЬ НЕ NULL 
		|	И НЕ ЗаявлениеОВыдачеФСМ.ПометкаУдаления
		|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
		|	И (ЗаявлениеОВыдачеФСМ.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
		|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
		|	И (ЗаявлениеОВыдачеФСМ.Ответственный = &Ответственный
		|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битЗаявлениеОВыдачеФСМ КАК ЗаявлениеОВыдачеФСМ
	|		ПО СтатусыДокументовЕГАИС.Документ = ЗаявлениеОВыдачеФСМ.Ссылка
	|ГДЕ
	|	ЗаявлениеОВыдачеФСМ.Ссылка ЕСТЬ НЕ NULL 
	|	И НЕ ЗаявлениеОВыдачеФСМ.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ЗаявлениеОВыдачеФСМ.ОрганизацияЕГАИС В (&ОрганизацияЕГАИС)
	|			ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ЗаявлениеОВыдачеФСМ.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.бг_ЗапроситеФСМ Тогда
		
		Возврат СообщениеЗапросаФСМXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

Функция СообщениеЗапросаФСМXML(ДокументСсылка)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗаявлениеОВыдачеФСМ;

	ДанныеДляЗапросаФСМ = ДанныеДляЗапросаФСМ(ДокументСсылка);
	
	Если ДанныеДляЗапросаФСМ.Организация = Неопределено Тогда
		Возврат 
			СообщениеЗапросаФСМXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Нет данных для выгрузки.';
					|en = 'Нет данных для выгрузки.'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗапросаФСМ.ОрганизацияЕГАИС) Тогда
		Возврат 
			СообщениеЗапросаФСМXMLСОшибкой(
				Операция, 
				ДокументСсылка, 
				НСтр(
					"ru = 'Не сопоставлена организация ЕГАИС.';
					|en = 'Не сопоставлена организация ЕГАИС.'"));
	КонецЕсли;
	
	ОрганизацияЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДляЗапросаФСМ.ОрганизацияЕГАИС, "Код, ФорматОбмена");
	ИдентификаторФСРАР = ОрганизацияЕГАИС.Код;
	ФорматОбмена       = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(ОрганизацияЕГАИС.ФорматОбмена);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено Или ИмяТипа = Неопределено Тогда
		Возврат 
			СообщениеЗапросаФСМXMLСОшибкой(
				Операция, 
				ДокументСсылка,
				СтрШаблон(
					НСтр(
						"ru = 'Операция не поддерживается в версии формата обмена: %1.';
						|en = 'Операция не поддерживается в версии формата обмена: %1.'"),
					ФорматОбмена));
	КонецЕсли;
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка); //НомерВерсии
	
	ClaimIssueFSM = ClaimIssueFSM(ПространствоИмен, ДанныеДляЗапросаФСМ, СообщениеXML);
		
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ClaimIssueFSM, ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ДанныеДляЗапросаФСМ.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Неопределено;
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);
	
КонецФункции

Функция ДанныеДляЗапросаФСМ(ДокументСсылка)
	
	ПоляЗаголовка = Новый Структура(
		"Номер, 
		|Дата, 
		|Организация, 
		|ОрганизацияЕГАИС,
		|ТерриториальныйОрганРАР, 
		|ТипЗаявления, 
		|Идентификатор, 
		|Комментарий");
	
	ДанныеДляЗапросаФСМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ПоляЗаголовка);
	ДанныеДляЗапросаФСМ.Номер       = СокрЛП(ДанныеДляЗапросаФСМ.Номер);		
	ДанныеДляЗапросаФСМ.Комментарий = СокрЛП(ДанныеДляЗапросаФСМ.Комментарий);		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции.Наименование КАК ВидАлкогольнойПродукции,
	|	СправочникНоменклатура.ОбъемДАЛ КАК Емкость,
	|	СправочникНоменклатура.Крепость КАК Крепость,
	|	СправочникНоменклатура.бг_ТипМарки.Код КАК КодОбразца,
	|	СправочникНоменклатура.бг_ТипМарки.Наименование КАК ЗаявленныйОбразецФСМ,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	Документ.битЗаявлениеОВыдачеФСМ.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки";
	
	ДанныеДляЗапросаФСМ.Вставить("Содержимое", Запрос.Выполнить().Выгрузить());
	
	Возврат ДанныеДляЗапросаФСМ
	
КонецФункции

Функция ОрганизацияЕГАИС(Организация) Экспорт
	
	ОрганизацияЕГАИС = 
		Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
			Организация,
			Справочники.Склады.ПустаяСсылка(),
			Истина, // СоответствуетОрганизации
			Ложь);  // ТолькоСопоставленные
	
	Возврат ОрганизацияЕГАИС
	
КонецФункции	

Функция СообщениеЗапросаФСМXMLСОшибкой(Операция, ДокументСсылка, ТекстОшибки)
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
	
	Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СообщениеXML);	
	
КонецФункции

Функция ClaimIssueFSM(ПространствоИмен, ДанныеДляЗапросаФСМ, СообщениеXML)
	
	ClaimIssueFSM = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "ClaimIssueFSMType");
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ClaimIssueFSM, "Identity", ДанныеДляЗапросаФСМ.Идентификатор, СообщениеXML);
	
	ClaimIssueFSM.Header  = Header(ПространствоИмен, ClaimIssueFSM, ДанныеДляЗапросаФСМ, СообщениеXML);
	ClaimIssueFSM.Content = Content(ПространствоИмен, ClaimIssueFSM, ДанныеДляЗапросаФСМ, СообщениеXML);
	
	Возврат ClaimIssueFSM 

КонецФункции

Функция Header(ПространствоИмен, ClaimIssueFSM, ДанныеДляЗапросаФСМ, СообщениеXML)
	
	Header = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Header", ClaimIssueFSM);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "NUMBER", ДанныеДляЗапросаФСМ.Номер, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Date",   ДанныеДляЗапросаФСМ.Дата,  СообщениеXML);
	
	Header.TerrOrganRAR = OrgInfoRus(ДанныеДляЗапросаФСМ.ТерриториальныйОрганРАР, СообщениеXML);
	Header.Declarer     = OrgInfoRus(ДанныеДляЗапросаФСМ.ОрганизацияЕГАИС,        СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Note",                 ДанныеДляЗапросаФСМ.Комментарий, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Header, "ReportUseAutoProcess", ReportUseAutoProcess(),          СообщениеXML);
	
	Header.TypeClaimM = TypeClaimM(ПространствоИмен, Header, ДанныеДляЗапросаФСМ, СообщениеXML); 
	
	Возврат Header
	
КонецФункции

Функция OrgInfoRus(ОрганизацияЕГАИС, СообщениеXML)
	
	ПространствоИмен = "http://fsrar.ru/WEGAIS/ClientRef_v2";
	
	OrgInfoRus = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "OrgInfoRus_ClaimIssue")); 
	
	РеквизитыОрганизацииЕГАИС = Новый Структура(
		"Код,
		|НаименованиеПолное,
		|ИНН,
		|КПП,
		|КодСтраны,
		|КодРегиона,
		|ПредставлениеАдреса");
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОрганизацияЕГАИС, РеквизитыОрганизацииЕГАИС); 
	
	OrgInfoRus.UL = UL(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат OrgInfoRus
	
КонецФункции

Функция UL(ПространствоИмен, РеквизитыОрганизацииЕГАИС, СообщениеXML)
	
	UL = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "ULType_ClaimIssue")); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "ClientRegId", РеквизитыОрганизацииЕГАИС.Код,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "FullName",    РеквизитыОрганизацииЕГАИС.НаименованиеПолное, СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "INN",         РеквизитыОрганизацииЕГАИС.ИНН,                СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(UL, "KPP",         РеквизитыОрганизацииЕГАИС.КПП,                СообщениеXML);
	
	UL.address    = OrgAddress(ПространствоИмен, "OrgAddressTypeULFL",   РеквизитыОрганизацииЕГАИС, СообщениеXML);
	UL.address_ur = OrgAddress(ПространствоИмен, "OrgUrAddressTypeULFL", РеквизитыОрганизацииЕГАИС, СообщениеXML);
	
	Возврат UL
	
КонецФункции
 
Функция OrgAddress(ПространствоИмен, ИмяТипа, РеквизитыАдреса, СообщениеXML)
	
	OrgAddress = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ИмяТипа)); 
	
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "Country",     Формат(РеквизитыАдреса.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "RegionCode",  Формат(РеквизитыАдреса.КодРегиона, "ЧЦ=2; ЧВН="),     СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(OrgAddress, "description", СокрЛП(РеквизитыАдреса.ПредставлениеАдреса),          СообщениеXML);
	
	Возврат OrgAddress
	
КонецФункции
 
Функция ReportUseAutoProcess()
	Возврат "Отчет об использовании ФСМ прошу автоматически сформировать на основе данных, зафиксированных заявителем в ЕГАИС расчетным путем."
КонецФункции

Функция TypeClaimM(ПространствоИмен, Header, ДанныеДляЗапросаФСМ, СообщениеXML)
	
	TypeClaimM = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TypeClaimM", Header);
	
	Если ДанныеДляЗапросаФСМ.ТипЗаявления = Перечисления.бг_ТипыЗаявленийОВыдачеФСМ.АППроизведеннаяНаТерриторииРФ Тогда
		TypeClaim1 = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TypeClaim1", TypeClaimM);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(TypeClaim1, "TypeClaim", "1", СообщениеXML);
		TypeClaimM.TypeClaim1 = TypeClaim1; 
	ИначеЕсли ДанныеДляЗапросаФСМ.ТипЗаявления = Перечисления.бг_ТипыЗаявленийОВыдачеФСМ.АПВвозимаяВРФИзГосударствНеЯвляющихсяЧленамиЕАЭС Тогда
	ИначеЕсли ДанныеДляЗапросаФСМ.ТипЗаявления = Перечисления.бг_ТипыЗаявленийОВыдачеФСМ.АПВвозимаяВРФИзГосударствЧленовЕАЭС Тогда
	КонецЕсли;
	
	Возврат TypeClaimM
	
КонецФункции

Функция Content(ПространствоИмен, ClaimIssueFSM, ДанныеДляЗапросаФСМ, СообщениеXML)
	
	Content = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Content", ClaimIssueFSM);
	
	Для Каждого Позиция Из ДанныеДляЗапросаФСМ.Содержимое Цикл
		
		Position = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Content, "Position");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "VidAP171fz",  Позиция.ВидАлкогольнойПродукции,    СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "alcPercent",  Позиция.Крепость,                   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "QuantityDal", Позиция.Емкость*Позиция.Количество, СообщениеXML); // общее количество продукции в дал
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Capacity",    Позиция.Емкость*10,                 СообщениеXML); // емкость единицы продукции в литрах 
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",    Строка(Позиция.НомерСтроки),        СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "SampleFSM",   Позиция.ЗаявленныйОбразецФСМ,       СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "MarkType",    Позиция.КодОбразца,                 СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity",    Позиция.Количество,                 СообщениеXML);
		
		Content.Position.Добавить(Position);
		
	КонецЦикла;
	
	Возврат Content
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
