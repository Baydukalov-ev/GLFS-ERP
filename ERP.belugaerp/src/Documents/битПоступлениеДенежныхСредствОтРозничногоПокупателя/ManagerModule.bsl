#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда         
	
#Область ПрограммныйИнтерфейс

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
		
	
КонецПроцедуры

#Область Проведение
	
  // Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("бг_РасчетыСПокупателямиРозница");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, Документ);
		
		ДополнитьТекстыЗапросаПроведенияРасчетыСРозничнымиКлиентами(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
		
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#КонецОбласти 	
	

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", ДатаДокумента(ДокументСсылка));
	
КонецПроцедуры

Процедура ДополнитьТекстыЗапросаПроведения(Запрос, ТекстыЗапроса, Регистры)
	
	ДополнитьТекстыЗапросаПроведенияРасчетыСРозничнымиКлиентами(Запрос, ТекстыЗапроса, Регистры);
			
КонецПроцедуры

Функция ДатаДокумента(Документ)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Дата КАК Дата
		|ИЗ
		|	Документ.битПоступлениеДенежныхСредствОтРозничногоПокупателя КАК битПоступлениеДенежныхСредствОтРозничногоПокупателя
		|ГДЕ
		|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
		
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат[0];
	
КонецФункции

#КонецОбласти


#Область РозничнымиКлиентами

Процедура ДополнитьТекстыЗапросаПроведенияРасчетыСРозничнымиКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = Метаданные.РегистрыНакопления.бг_РасчетыСРозничнымиКлиентами.Имя;	
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапросаДвиженияРасчетыСРозничнымиКлиентами(), ИмяРегистра);
		
КонецПроцедуры

Функция ТекстЗапросаДвиженияРасчетыСРозничнымиКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Ссылка.Дата КАК Период,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Ссылка.Организация КАК Организация,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Контрагент КАК Контрагент,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Договор КАК Договор,
	|	СУММА(битПоступлениеДенежныхСредствОтРозничногоПокупателя.СуммаВРозницу) КАК СуммаВРозницу,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.ДокументОтгрузки.СуммаДокумента КАК Сумма,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.ДокументОтгрузки.бг_ЗаказРозничногоПокупателя КАК ЗаказРозничногоПокупателя,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.ДокументОтгрузки КАК ДокументОтгрузки
	|ИЗ
	|	Документ.битПоступлениеДенежныхСредствОтРозничногоПокупателя.Оплаты КАК битПоступлениеДенежныхСредствОтРозничногоПокупателя
	|ГДЕ
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Ссылка.Дата,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Контрагент,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Договор,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.Ссылка.Организация,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.ДокументОтгрузки.СуммаДокумента,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.ДокументОтгрузки.бг_ЗаказРозничногоПокупателя,
	|	битПоступлениеДенежныхСредствОтРозничногоПокупателя.ДокументОтгрузки";
	                	
	
	Возврат ТекстЗапроса;		
	
КонецФункции	

#КонецОбласти

#КонецЕсли
