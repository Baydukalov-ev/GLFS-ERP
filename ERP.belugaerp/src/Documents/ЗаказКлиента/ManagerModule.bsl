#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает признак наличия по заказу проведенного расходного ордера.
//
// Параметры:
//  Заказ  - ДокументСсылка.ЗаказКлиента
//
// Возвращаемое значение:
//   Булево
//
Функция бг_ЗаказПереданНаСборку(Заказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Заказ
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Возврат Не Запрос.Выполнить().Пустой()
			Или бг_ЗаполненаДатаПередачиВСборку(Заказ);
	
КонецФункции

// Возвращает признак того, что пользователю разрешено изменение заказов переданных на сборку.
//
Функция бг_РазрешеноИзменениеЗаказовПереданныхНаСборку() Экспорт

	Возврат Пользователи.РолиДоступны(
				"бг_РедактированиеЗаказовКлиентовВСборке, бг_КонтролерЕГАИС",
				Пользователи.АвторизованныйПользователь());		

КонецФункции

// Возвращает признак того, что пользователю разрешено изменение заказов Hybris.
//
Функция бг_РазрешеноИзменениеЗаказовHybris() Экспорт

	Возврат Пользователи.РолиДоступны(
				"ПолныеПрава",
				Пользователи.АвторизованныйПользователь());		

КонецФункции

// Возвращает признак наличия по заказу даты передачи в сборку из УПП
//
// Параметры:
//  ЗаказКлиента  - ДокументСсылка.ЗаказКлиента
//
// Возвращаемое значение:
//   Булево
//
Функция бг_ЗаполненаДатаПередачиВСборку(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_СогласованиеЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента
	|ИЗ
	|	РегистрСведений.бг_СогласованиеЗаказовКлиентов КАК бг_СогласованиеЗаказовКлиентов
	|ГДЕ
	|	бг_СогласованиеЗаказовКлиентов.ЗаказКлиента = &ЗаказКлиента
	|	И НЕ бг_СогласованиеЗаказовКлиентов.ДатаПередачиВСборку = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ бг_СогласованиеЗаказовКлиентов.ЗаказКлиента.ПометкаУдаления
	|	И бг_СогласованиеЗаказовКлиентов.ЗаказКлиента.Проведен";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает признак наличия по интернет-заказу проведенного консолидированного заказа.
//
// Параметры:
//  Заказ   - ДокументСсылка.ЗаказКлиента - интернет-заказ
//
// Возвращаемое значение:
//   Булево - Истина, по интернет-заказу есть проведенный консолидированный заказ.
//          - Ложь, нет.
//
Функция бг_ИнтернетЗаказВключенВКонсолидированныйЗаказ(Заказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка.Проведен
	|	И НЕ Товары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И Товары.бг_ЗаказКлиентаИсточникОбеспечения = &Заказ
	|	И НЕ Товары.Отменено
	|	И Товары.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает подчиненные документы по заказу клиента.
//
// Параметры:
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на документ.
// 
// Возвращаемое значение:
//  Структура - Структура таблиц, где ключами являются имена документов
Функция бг_ПодчиненныеДокументы(ЗаказКлиента) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыПоРаспоряжениям.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РасходныеОрдера
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК ТоварыПоРаспоряжениям
	|ГДЕ
	|	(ВЫРАЗИТЬ(ТоварыПоРаспоряжениям.Распоряжение КАК Документ.ЗаказКлиента)) = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПоРаспоряжениям.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныеОрдера.Ссылка КАК Документ,
	|	РасходныеОрдера.Ссылка.Проведен КАК Проведен,
	|	РасходныеОрдера.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	""РасходныйОрдерНаТовары"" КАК ИмяДокумента
	|ИЗ
	|	РасходныеОрдера КАК РасходныеОрдера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	битОтражениеФактаПоРасходномуОрдеру.Ссылка,
	|	битОтражениеФактаПоРасходномуОрдеру.Проведен,
	|	битОтражениеФактаПоРасходномуОрдеру.ПометкаУдаления,
	|	""битОтражениеФактаПоРасходномуОрдеру""
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары В
	|			(ВЫБРАТЬ
	|				РасходныеОрдера.Ссылка
	|			ИЗ
	|				РасходныеОрдера КАК РасходныеОрдера)";
		
	Запрос.УстановитьПараметр("Распоряжение", ЗаказКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

#Область Проведение

&ИзменениеИКонтроль("ДанныеДокументаДляПроведения")
Функция бг_ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры)

	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;

	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;

	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений

		ЗаполнитьПараметрыИнициализации(Запрос, Документ);

		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);

		ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
#Вставка
		ЗаказКлиентаЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
#КонецВставки
	КонецЕсли;

	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры);
	ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры);
	ЗапланироватьОтгрузкуТоваров(Запрос, ТекстыЗапроса, Регистры);

	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений

	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);

КонецФункции

#КонецОбласти

// В запрос добавлено особое определение статуса указания серий 
//  в случае, если для склада установлен флаг бг_РазрешитьПланированиеОтгрузокБезУказанияСерий.
// В этом случае, несмотря на установленную политику учета серий "УчитыватьСебестоимостьПоСериям",
//  разрешаем не указывать серии при действии отгрузить. Имитируем указание серий
//  по факту отгрузки. Затем у нас придет Отражение факта по расходному ордеру и все серии
//  и в заказе, и в расходном ордере будут скорректированы по факту.
//
&ИзменениеИКонтроль("ТекстЗапросаЗаполненияСтатусовУказанияСерий")
Функция бг_ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА 0
    #Вставка
	|		КОГДА ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).бг_РазрешитьПланированиеОтгрузокБезУказанияСерий
	|			ТОГДА ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 15
	|						КОНЕЦ
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 10
	|							ИНАЧЕ 11
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ВЫБОР	 
	#КонецВставки
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
    #Вставка
	|		КОНЕЦ
	#КонецВставки
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Интерфейс для отложенной обработки заказов клиентов.
//
// Параметры:
//   Источник - ДокументСсылка.ЗаказКлиента - заказ клиента, который надо обработать.
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов - вариант обработки заказа клиента.
//   Отказ - Булево - Отказ от обработки.
//   ПоказателиДополнительныхСведений - ХранилищеЗначения - Показатели дополнительных сведений
Процедура бг_ОтложеннаяОбработкаОбъекта(Источник, ВариантОбработки, Отказ,
	ПоказателиДополнительныхСведений) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктуализироватьОбеспечениеЗаказовКлиентов Тогда 
		
		бг_АктуализироватьОбеспечениеЗаказаКлиента(Источник);
		
	ИначеЕсли ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ПередатьЗаказыКлиентовНаСборку Тогда	
		
		бг_ПередатьЗаказКлиентаНаСборку(Источник);
		
	ИначеЕсли ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СоздатьНоменклатуруПартнера Тогда
		
		бг_ЗаказыКлиентов.СоздатьНоменклатуруПартнераПоДаннымЗаказаКлиента(Источник);
		
	ИначеЕсли ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СоздатьЗаказМагазина Тогда
		
		бг_ЗаказыКлиентов.СоздатьЗаказМагазина(Источник);
		
	ИначеЕсли ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АвтоСогласованиеЗаказовКлиентов Тогда
		
		РегистрыСведений.бг_СогласованиеЗаказовКлиентов.АвтоСогласованиеЗаказа(Источник);
		
	ИначеЕсли ВариантОбработки =
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтразитьДополнительныеСведенияЗаказаКлиента Тогда
		
		Если ЗначениеЗаполнено(ПоказателиДополнительныхСведений)
			И ТипЗнч(ПоказателиДополнительныхСведений) = Тип("Строка") Тогда
			ПоказателиДополнительныхСведений = СтрРазделить(ПоказателиДополнительныхСведений, ",");
		КонецЕсли;
		
		РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.ОтразитьДополнительныеСведенияЗаказаКлиента(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник), Отказ,, ПоказателиДополнительныхСведений);
	КонецЕсли;

КонецПроцедуры

#Область АвтоматическоеЗаполнениеОбеспеченияЗаказаКлиента

// Возвращает реквизиты заказа клиента.
//
// Параметры:
//  ЗаказКлиента            - ДокументОбъект.ЗаказКлиента, ДокументСсылка.ЗаказКлиента - заказ клиента. 
//  АктуализацияОбеспечения - Булево - Признак получения параметров для актуализации обеспечения, используется
//                                      во внутренних алгоритмах. 
//                                      Истина, параметры заполнения получаем для актуализации обеспечения
//                                      Ложь, параметры заполнения получаем для исходного заполнения заказа.
//
// Возвращаемое значение:
//  РеквизитыИсточника - Структура - параметры для формирования заказов клиента.
//
Функция бг_РеквизитыЗаказаКлиентаДляЗаполненияОбеспечения(ЗаказКлиента, АктуализацияОбеспечения = Ложь) Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда		
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	РеквизитыИсточникаСтрока = 
		"ПометкаУдаления, Проведен, Ссылка, Дата, Партнер, Организация, Контрагент, Склад, бг_КаналПродаж"	
		+ "бг_ИсточникЗаказа, Статус, ДатаПоДаннымКлиента, НомерПоДаннымКлиента, ДатаОтгрузки";	
	РеквизитыИсточника = Новый Структура(РеквизитыИсточникаСтрока);
	
	Если ТипЗнч(ЗаказКлиента) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ЗаполнитьЗначенияСвойств(РеквизитыИсточника, ЗаказКлиента);
		РеквизитыИсточника.Вставить("ИсточникЗаказа", РеквизитыИсточника.бг_ИсточникЗаказа);
		РеквизитыИсточника.Удалить("бг_ИсточникЗаказа");
		РеквизитыИсточника.Вставить("КаналПродаж", РеквизитыИсточника.бг_КаналПродаж);
		РеквизитыИсточника.Удалить("бг_КаналПродаж");
		
		РеквизитыИсточника.Вставить("Товары", ЗаказКлиента.Товары.Выгрузить());
		РеквизитыИсточника.Вставить("ВидНоменклатуры", бг_ПолучитьВидНоменклатурыПоТЧТовары(РеквизитыИсточника));																							
		
		// Добавим и заполним универсальную колонку для работы общих алгоритмов формирования заказов.
		РеквизитыИсточника.Товары.Колонки.Добавить(
				"КодДляПоискаНоменклатуры",
				бг_ОбщегоНазначенияСервер.ОписаниеТипаКодНоменклатурыКонтрагента()); 
		РеквизитыИсточника.Товары.Колонки.Добавить(
				"СКЮ_МТ",
				Новый ОписаниеТипов("СправочникСсылка.бг_ЕК_СКЮ_СкюМТ")); 
		// Заполним КодДляПоискаНоменклатуры для каждой СтрокиТЧ из РеквизитыИсточника.Товары
		бг_ЗаполнитьКодДляПоискаНоменклатуры(РеквизитыИсточника); 	
		
	ИначеЕсли ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		РеквизитыИсточника = бг_РеквизитыЗаказаКлиентаДляЗаполненияОбеспеченияПоСсылке(
				ЗаказКлиента, 
				РеквизитыИсточникаСтрока, 
				АктуализацияОбеспечения);
		
	КонецЕсли; 	
	
	РеквизитыИсточника.Вставить("ОбеспечиватьИзОжидаемыхПоступлений", Истина);
	РеквизитыИсточника.Вставить("ИспользоватьПравилаОкругленияДоКороба", Истина);
	
	ПараметрыПередачиНаСборку = 
		бг_ЗаказыКлиентов.ПараметрыПередачиНаСборкуЗаказаКлиента(РеквизитыИсточника.Ссылка);
	Если ПараметрыПередачиНаСборку.ПередатьНаСборку Тогда
		// Если уже пришло время передавать заказ на сборку,
		// то обеспечивать из ожидаемых поступлений не нужно.
		РеквизитыИсточника.Вставить("ОбеспечиватьИзОжидаемыхПоступлений", Ложь);
	Иначе
		РеквизитыИсточника.Вставить("ОбеспечиватьИзОжидаемыхПоступлений", Истина);
	КонецЕсли;	
	
	Возврат РеквизитыИсточника;
	
КонецФункции	 

Функция бг_ПолучитьВидНоменклатурыПоТЧТовары(РеквизитыИсточника) 
	
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка(); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", РеквизитыИсточника.Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Товары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ПОМЕСТИТЬ ВТ_ВидыНоменклатуры
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Товары.Номенклатура.ВидНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВидыНоменклатуры.ВидНоменклатуры) КАК Количество
		|ПОМЕСТИТЬ ВТ_КоличествоВидовНоменклатуры
		|ИЗ
		|	ВТ_ВидыНоменклатуры КАК ВТ_ВидыНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВТ_КоличествоВидовНоменклатуры.Количество = 1
		|			ТОГДА ВТ_ВидыНоменклатуры.ВидНоменклатуры
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК ВидНоменклатуры
		|ИЗ
		|	ВТ_ВидыНоменклатуры КАК ВТ_ВидыНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоВидовНоменклатуры КАК ВТ_КоличествоВидовНоменклатуры
		|		ПО (ИСТИНА)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	
	Пока Выборка.Следующий() Цикл 
		ВидНоменклатуры = Выборка.ВидНоменклатуры;
	КонецЦикла;
	
	Возврат ВидНоменклатуры;
	
КонецФункции

Процедура бг_ЗаполнитьКодДляПоискаНоменклатуры(РеквизитыИсточника)
	
	СписокНоменклатуры = Новый Структура("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", РеквизитыИсточника.Товары);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.бг_ЗафиксированныйТовар КАК бг_ЗафиксированныйТовар
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_Товары.бг_ЗафиксированныйТовар
	|			ТОГДА СпрНоменклатура.Код
	|		ИНАЧЕ СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ.Код
	|	КОНЕЦ КАК КодДляПоискаНоменклатуры,
	|	ВЫРАЗИТЬ(СпрНоменклатура.ТоварнаяКатегория КАК Справочник.ТоварныеКатегории).бг_СкюМТ КАК СКЮ_МТ,
	|	СпрНоменклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО СпрНоменклатура.Ссылка = ВТ_Товары.Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для каждого СтрокаТЧ Из РеквизитыИсточника.Товары Цикл
		
		ЗаполнитьЗначенияСвойств(СписокНоменклатуры, СтрокаТЧ);
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СписокНоменклатуры) Тогда
			СтрокаТЧ.КодДляПоискаНоменклатуры = Выборка.КодДляПоискаНоменклатуры; 	
			СтрокаТЧ.СКЮ_МТ = Выборка.СКЮ_МТ; 	
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает реквизиты заказа клиента, необходимые для обработки, по ссылке на заказ.
//
Функция бг_РеквизитыЗаказаКлиентаДляЗаполненияОбеспеченияПоСсылке(ЗаказКлиента, 
																РеквизитыИсточникаСтрока, 
																АктуализацияОбеспечения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента); 
	Запрос.Текст = бг_ТекстЗапросаДляЗаполненияОбеспечения(АктуализацияОбеспечения);
	
	Результаты = Запрос.ВыполнитьПакет();
	РеквизитыИсточника = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(Результаты[Результаты.Количество() - 2]);
	
	ДанныеТЧТовары = Результаты[Результаты.Количество() - 1].Выгрузить();
	РеквизитыИсточника.Вставить("Товары", ДанныеТЧТовары);
	
	Возврат РеквизитыИсточника;
	
КонецФункции

Функция бг_ТекстЗапросаДляЗаполненияОбеспечения(АктуализацияОбеспечения)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиентаТовары.КодСтроки КАК КодСтроки,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЗаказКлиентаТовары.Цена КАК Цена,
	|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказКлиентаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ЗаказКлиентаТовары.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	ЗаказКлиентаТовары.бг_ЗаказКлиентаИсточникОбеспечения КАК бг_ЗаказКлиентаИсточникОбеспечения,
	|	ЗаказКлиентаТовары.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения КАК бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения,
	|	ЗаказКлиентаТовары.бг_ЗаказПоставщикуИсточникОбеспечения КАК бг_ЗаказПоставщикуИсточникОбеспечения,
	|	ЗаказКлиентаТовары.Отменено КАК Отменено,
    |	ЗаказКлиентаТовары.бг_ЗафиксированныйТовар КАК бг_ЗафиксированныйТовар,
	|	ЗаказКлиентаТовары.Склад КАК Склад
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВТ_ВидыНоменклатуры
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	ВТ_Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Товары.Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ВидыНоменклатуры.ВидНоменклатуры) КАК Количество
	|ПОМЕСТИТЬ ВТ_КоличествоВидовНоменклатуры
	|ИЗ
	|	ВТ_ВидыНоменклатуры КАК ВТ_ВидыНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_КоличествоВидовНоменклатуры.Количество = 1
	|			ТОГДА ВТ_ВидыНоменклатуры.ВидНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВТ_ВидНоменклатурыДокумента
	|ИЗ
	|	ВТ_ВидыНоменклатуры КАК ВТ_ВидыНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоВидовНоменклатуры КАК ВТ_КоличествоВидовНоменклатуры
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Дата КАК Дата,
	|	ЗаказКлиента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаказКлиента.Проведен КАК Проведен,
	|	ЗаказКлиента.Организация КАК Организация,
	|	ЗаказКлиента.Партнер КАК Партнер,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.бг_КаналПродаж КАК КаналПродаж,
	|	ЗаказКлиента.Склад КАК Склад,
	|	ЗаказКлиента.бг_ИсточникЗаказа КАК ИсточникЗаказа,
	|	ЗаказКлиента.Статус КАК Статус,
	|	ЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	ЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_ВидНоменклатурыДокумента.ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидНоменклатурыДокумента КАК ВТ_ВидНоменклатурыДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки КАК НомерСтроки,
	|	ВТ_Товары.Номенклатура КАК Номенклатура,
	|	ВТ_Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВТ_Товары.КодСтроки КАК КодСтроки,
	|	ВТ_Товары.Количество КАК Количество,
	|	ВТ_Товары.Цена КАК Цена,
	|	ВТ_Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВТ_Товары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВТ_Товары.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	ВТ_Товары.бг_ЗаказКлиентаИсточникОбеспечения КАК бг_ЗаказКлиентаИсточникОбеспечения,
	|	ВТ_Товары.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения КАК бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения,
	|	ВТ_Товары.бг_ЗаказПоставщикуИсточникОбеспечения КАК бг_ЗаказПоставщикуИсточникОбеспечения,
	|	ВТ_Товары.Отменено КАК Отменено,
	|	ВТ_Товары.Склад КАК Склад,
    |	ВТ_Товары.бг_ЗафиксированныйТовар КАК бг_ЗафиксированныйТовар,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.бг_ЗафиксированныйТовар
	|			ТОГДА ВТ_Товары.Номенклатура.Код
	|		ИНАЧЕ ВТ_Товары.Номенклатура.ТоварнаяКатегория.бг_СкюМТ.Код
	|	КОНЕЦ КАК КодДляПоискаНоменклатуры,
	|	ВЫРАЗИТЬ(ВТ_Товары.Номенклатура.ТоварнаяКатегория КАК Справочник.ТоварныеКатегории).бг_СкюМТ КАК СКЮ_МТ
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	&УсловиеОтбораТоваров";
	
	Если АктуализацияОбеспечения Тогда
		// Если это актуализация обеспечения, то оставим в таблице товаров, только те товары, 
		// которые требуется обеспечить в сформированных заказах клиентов. 
		// Таким образом будем обеспечивать только ранее необеспеченные позиции.
		ТекстУсловияОтбораТоваров = 		
			"НЕ ВТ_Товары.Отменено
			|	И ВТ_Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)";
	Иначе	
	    ТекстУсловияОтбораТоваров = "ИСТИНА";
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораТоваров", ТекстУсловияОтбораТоваров);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область КредитныеЛимиты

// Возвращает сумму кредитного лимита с учетом дебиторской задолженности на дату сеасна. 
//
Функция бг_КредитныйЛимит(Контрагент, Договор, ПунктНазначения, Организация) Экспорт
	
	ВидыЛимитов = Новый Массив;
	ВидыЛимитов.Добавить(Перечисления.бг_ВидыКредитныхЛимитов.Кредитный);
	ВидыЛимитов.Добавить(Перечисления.бг_ВидыКредитныхЛимитов.ДопустимаяСуммаДЗ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = бг_ТекстЗапросаДляПолученияЛимита();
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ПунктНазначения", ПунктНазначения);
	Запрос.УстановитьПараметр("ВидыЛимитов", ВидыЛимитов);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатЗапросаДляОбработки = Неопределено;
	
	ПоследнийИндекс = РезультатЗапроса.ВГраница();
	
	//Смотрим есть ли результат при отборе по трем измерениям	
	Если Не РезультатЗапроса[ПоследнийИндекс-3].Пустой() Тогда
       РезультатЗапросаДляОбработки = РезультатЗапроса[ПоследнийИндекс-3];	   
	//Смотрим есть ли результат при отборе по Контрагент + Договор
	ИначеЕсли Не РезультатЗапроса[ПоследнийИндекс-2].Пустой() Тогда
       РезультатЗапросаДляОбработки = РезультатЗапроса[ПоследнийИндекс-2];
	//Смотрим есть ли результат при отборе по Контрагент + ПунктНазначения
	ИначеЕсли Не РезультатЗапроса[ПоследнийИндекс-1].Пустой() Тогда
       РезультатЗапросаДляОбработки = РезультатЗапроса[ПоследнийИндекс-1];
	//Смотрим есть ли лимит только для контрагента
	ИначеЕсли Не РезультатЗапроса[ПоследнийИндекс].Пустой() Тогда
       РезультатЗапросаДляОбработки = РезультатЗапроса[ПоследнийИндекс];
	КонецЕсли;		

	Если РезультатЗапросаДляОбработки <> Неопределено Тогда
		ВыборкаПоКонтрагенту = РезультатЗапросаДляОбработки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);		
		
		СуммаЛимита = 0;
			
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			СуммаЛимита = ?(ВыборкаПоКонтрагенту.Сумма < ВыборкаПоКонтрагенту.ОстатокЗадолженности, 
							0, 
							ВыборкаПоКонтрагенту.Сумма - ВыборкаПоКонтрагенту.ОстатокЗадолженности ) 
							+ СуммаЛимита;
		КонецЦикла;
			
		Возврат СуммаЛимита;
   	Иначе
	   
	   Возврат Неопределено;		
	   
   	КонецЕсли;
		
КонецФункции

Функция бг_ТекстЗапросаДляПолученияЛимита()
	
	Текст = 
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Организация КАК АналитикаУчетаПоПартнерамОрганизация,
	|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Контрагент КАК АналитикаУчетаПоПартнерамКонтрагент,
	|	РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам.Договор КАК АналитикаУчетаПоПартнерамДоговор,
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК СуммаОстаток,
	|	РасчетыСКлиентамиОстатки.ОбъектРасчетов.Объект КАК ОбъектРасчетовОбъект
	|ПОМЕСТИТЬ ОстаткиПоКОнтрагенту
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			&Период,
	|			АналитикаУчетаПоПартнерам.Организация = &Организация
	|				И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|				И ТИПЗНАЧЕНИЯ(ОбъектРасчетов.Объект) = ТИП(Документ.РеализацияТоваровУслуг)) КАК РасчетыСКлиентамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация КАК Организация,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент КАК Контрагент,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамДоговор КАК Договор,
	|	ОстаткиПоКОнтрагенту.ОбъектРасчетовОбъект.бг_ПунктНазначения КАК ПунктНазначения,
	|	СУММА(ОстаткиПоКОнтрагенту.СуммаОстаток) КАК ОстатокЗадолженности
	|ПОМЕСТИТЬ ОстаткиПоКонтрагентуСГруппировкойПоТремИзмерениям
	|ИЗ
	|	ОстаткиПоКОнтрагенту КАК ОстаткиПоКОнтрагенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамДоговор,
	|	ОстаткиПоКОнтрагенту.ОбъектРасчетовОбъект.бг_ПунктНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация КАК Организация,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент КАК Контрагент,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамДоговор КАК Договор,
	|	СУММА(ОстаткиПоКОнтрагенту.СуммаОстаток) КАК ОстатокЗадолженности
	|ПОМЕСТИТЬ ОстаткиСГруппировкойПоКонтрагентДоговор
	|ИЗ
	|	ОстаткиПоКОнтрагенту КАК ОстаткиПоКОнтрагенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация КАК Организация,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент КАК Контрагент,
	|	ОстаткиПоКОнтрагенту.ОбъектРасчетовОбъект.бг_ПунктНазначения КАК ПунктНазначения,
	|	СУММА(ОстаткиПоКОнтрагенту.СуммаОстаток) КАК ОстатокЗадолженности
	|ПОМЕСТИТЬ ОстаткиСГруппировкойПоКонтрагентПунктНазначения
	|ИЗ
	|	ОстаткиПоКОнтрагенту КАК ОстаткиПоКОнтрагенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент,
	|	ОстаткиПоКОнтрагенту.ОбъектРасчетовОбъект.бг_ПунктНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент КАК Контрагент,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация КАК Организация,
	|	СУММА(ОстаткиПоКОнтрагенту.СуммаОстаток) КАК ОстатокЗадолженности
	|ПОМЕСТИТЬ ОстаткиСГруппировкойПоКонтрагенту
	|ИЗ
	|	ОстаткиПоКОнтрагенту КАК ОстаткиПоКОнтрагенту
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамКонтрагент,
	|	ОстаткиПоКОнтрагенту.АналитикаУчетаПоПартнерамОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_КредитныеЛимиты.ВидЛимита КАК ВидЛимита,
	|	бг_КредитныеЛимиты.Контрагент КАК Контрагент,
	|	бг_КредитныеЛимиты.Договор КАК Договор,
	|	бг_КредитныеЛимиты.ПунктНазначения КАК ПунктНазначения,
	|	бг_КредитныеЛимиты.Сумма КАК Сумма
	|ПОМЕСТИТЬ ЛимитыПоКонтрагенту
	|ИЗ
	|	РегистрСведений.бг_КредитныеЛимиты КАК бг_КредитныеЛимиты
	|ГДЕ
	|	бг_КредитныеЛимиты.Контрагент = &Контрагент
	|	И бг_КредитныеЛимиты.ВидЛимита В(&ВидыЛимитов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыПоКонтрагенту.Контрагент КАК Контрагент,
	|	ЛимитыПоКонтрагенту.Договор КАК Договор,
	|	ЛимитыПоКонтрагенту.ПунктНазначения КАК ПунктНазначения,
	|	СУММА(ЛимитыПоКонтрагенту.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ЛимитыСГруппировкойПоТремИЗмерениям
	|ИЗ
	|	ЛимитыПоКонтрагенту КАК ЛимитыПоКонтрагенту
	|ГДЕ
	|	ЛимитыПоКонтрагенту.Контрагент = &Контрагент
	|	И ЛимитыПоКонтрагенту.Договор = &Договор
	|	И ЛимитыПоКонтрагенту.ПунктНазначения = &ПунктНазначения
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛимитыПоКонтрагенту.Контрагент,
	|	ЛимитыПоКонтрагенту.Договор,
	|	ЛимитыПоКонтрагенту.ПунктНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыПоКонтрагенту.Контрагент КАК Контрагент,
	|	ЛимитыПоКонтрагенту.Договор КАК Договор,
	|	СУММА(ЛимитыПоКонтрагенту.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ЛимитыСГруппировкойПоКонтрагентДоговор
	|ИЗ
	|	ЛимитыПоКонтрагенту КАК ЛимитыПоКонтрагенту
	|ГДЕ
	|	ЛимитыПоКонтрагенту.Контрагент = &Контрагент
	|	И ЛимитыПоКонтрагенту.Договор = &Договор
	|	И ЛимитыПоКонтрагенту.ПунктНазначения = ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛимитыПоКонтрагенту.Контрагент,
	|	ЛимитыПоКонтрагенту.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыПоКонтрагенту.Контрагент КАК Контрагент,
	|	ЛимитыПоКонтрагенту.ПунктНазначения КАК ПунктНазначения,
	|	СУММА(ЛимитыПоКонтрагенту.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ЛимитыСГруппировкойПоКонтрагентПунктНазначения
	|ИЗ
	|	ЛимитыПоКонтрагенту КАК ЛимитыПоКонтрагенту
	|ГДЕ
	|	ЛимитыПоКонтрагенту.Контрагент = &Контрагент
	|	И ЛимитыПоКонтрагенту.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И ЛимитыПоКонтрагенту.ПунктНазначения = &ПунктНазначения
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛимитыПоКонтрагенту.Контрагент,
	|	ЛимитыПоКонтрагенту.ПунктНазначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыПоКонтрагенту.Контрагент КАК Контрагент,
	|	СУММА(ЛимитыПоКонтрагенту.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ЛимитыСГруппировкойТолькоПоКонтрагенту
	|ИЗ
	|	ЛимитыПоКонтрагенту КАК ЛимитыПоКонтрагенту
	|ГДЕ
	|	ЛимитыПоКонтрагенту.Контрагент = &Контрагент
	|	И ЛимитыПоКонтрагенту.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И ЛимитыПоКонтрагенту.ПунктНазначения = ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛимитыПоКонтрагенту.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыСГруппировкойПоТремИЗмерениям.Контрагент КАК Контрагент,
	|	ЛимитыСГруппировкойПоТремИЗмерениям.Договор КАК Договор,
	|	ЛимитыСГруппировкойПоТремИЗмерениям.ПунктНазначения КАК ПунктНазначения,
	|	ЛимитыСГруппировкойПоТремИЗмерениям.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОстаткиПоКонтрагентуСГруппировкойПоТремИзмерениям.ОстатокЗадолженности, 0) КАК ОстатокЗадолженности
	|ИЗ
	|	ЛимитыСГруппировкойПоТремИЗмерениям КАК ЛимитыСГруппировкойПоТремИЗмерениям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоКонтрагентуСГруппировкойПоТремИзмерениям КАК ОстаткиПоКонтрагентуСГруппировкойПоТремИзмерениям
	|		ПО (ЛимитыСГруппировкойПоТремИЗмерениям.Контрагент = ОстаткиПоКонтрагентуСГруппировкойПоТремИзмерениям.Контрагент
	|				И ЛимитыСГруппировкойПоТремИЗмерениям.Договор = ОстаткиПоКонтрагентуСГруппировкойПоТремИзмерениям.Договор
	|				И ЛимитыСГруппировкойПоТремИЗмерениям.ПунктНазначения = ОстаткиПоКонтрагентуСГруппировкойПоТремИзмерениям.ПунктНазначения)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ОстатокЗадолженности)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыСГруппировкойПоКонтрагентДоговор.Контрагент КАК Контрагент,
	|	ЛимитыСГруппировкойПоКонтрагентДоговор.Договор КАК Договор,
	|	ЛимитыСГруппировкойПоКонтрагентДоговор.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОстаткиСГруппировкойПоКонтрагентДоговор.ОстатокЗадолженности, 0) КАК ОстатокЗадолженности
	|ИЗ
	|	ЛимитыСГруппировкойПоКонтрагентДоговор КАК ЛимитыСГруппировкойПоКонтрагентДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСГруппировкойПоКонтрагентДоговор КАК ОстаткиСГруппировкойПоКонтрагентДоговор
	|		ПО (ЛимитыСГруппировкойПоКонтрагентДоговор.Контрагент = ОстаткиСГруппировкойПоКонтрагентДоговор.Контрагент
	|				И ЛимитыСГруппировкойПоКонтрагентДоговор.Договор = ОстаткиСГруппировкойПоКонтрагентДоговор.Договор)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ОстатокЗадолженности)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыСГруппировкойПоКонтрагентПунктНазначения.Контрагент КАК Контрагент,
	|	ЛимитыСГруппировкойПоКонтрагентПунктНазначения.ПунктНазначения КАК ПунктНазначения,
	|	ЛимитыСГруппировкойПоКонтрагентПунктНазначения.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОстаткиСГруппировкойПоКонтрагентПунктНазначения.ОстатокЗадолженности, 0) КАК ОстатокЗадолженности
	|ИЗ
	|	ЛимитыСГруппировкойПоКонтрагентПунктНазначения КАК ЛимитыСГруппировкойПоКонтрагентПунктНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСГруппировкойПоКонтрагентПунктНазначения КАК ОстаткиСГруппировкойПоКонтрагентПунктНазначения
	|		ПО (ЛимитыСГруппировкойПоКонтрагентПунктНазначения.Контрагент = ОстаткиСГруппировкойПоКонтрагентПунктНазначения.Контрагент
	|				И ЛимитыСГруппировкойПоКонтрагентПунктНазначения.ПунктНазначения = ОстаткиСГруппировкойПоКонтрагентПунктНазначения.ПунктНазначения)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ОстатокЗадолженности)
	|ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыСГруппировкойТолькоПоКонтрагенту.Контрагент КАК Контрагент,
	|	ЛимитыСГруппировкойТолькоПоКонтрагенту.Сумма КАК Сумма,
	|	ЕСТЬNULL(ОстаткиСГруппировкойПоКонтрагенту.ОстатокЗадолженности, 0) КАК ОстатокЗадолженности
	|ИЗ
	|	ЛимитыСГруппировкойТолькоПоКонтрагенту КАК ЛимитыСГруппировкойТолькоПоКонтрагенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСГруппировкойПоКонтрагенту КАК ОстаткиСГруппировкойПоКонтрагенту
	|		ПО (ЛимитыСГруппировкойТолькоПоКонтрагенту.Контрагент = ОстаткиСГруппировкойПоКонтрагенту.Контрагент)
	|ИТОГИ
	|	СУММА(Сумма),
	|	СУММА(ОстатокЗадолженности)
	|ПО
	|	Контрагент";
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ОтсрочкаПлатежа

// Выполняет проверки, установленные финансовыми контроллерами и возвращает результат проверки
// 
//
Функция бг_РезультатПроверокФинКонтроллеров() Экспорт
	
	РезультатПроверки = Ложь;
			
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

// Возвращает реквизиты заказа клиента, необходимые для обработки, по ссылке на заказ.
//
Функция бг_РеквизитыЗаказКлиентаДляЗаполненияОбеспеченияПоСсылке(ЗаказКлиента, 
																РеквизитыИсточникаСтрока, 
																АктуализацияОбеспечения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента); 
	Запрос.Текст = бг_ТекстЗапросаДляЗаполненияОбеспечения(АктуализацияОбеспечения);
	
	Результаты = Запрос.ВыполнитьПакет();
	РеквизитыИсточника = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(Результаты[Результаты.Количество() - 2]);
	
	ДанныеТЧТовары = Результаты[Результаты.Количество() - 1].Выгрузить();
	РеквизитыИсточника.Вставить("Товары", ДанныеТЧТовары);
	
	Возврат РеквизитыИсточника;
	
КонецФункции

// Функция получает для заказов B2B статус заказа B2B
//
// Параметры:
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента 
// 
// Возвращаемое значение:
//   - Значение перечисления Перечисления.бг_СтатусыЗаказаКлиентаB2B
//   - Неопределено - когда статус получить не удалось.
//
Функция бг_СтатусЗаказаКлиентаB2B(ЗаказКлиента) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ДопустимыеСтатусы = Документы.ТТНИсходящаяЕГАИС.бг_СтатусыПодтвержденныеB2B();
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка КАК ТТНИсходящаяЕГАИС
	|ПОМЕСТИТЬ ТТНПоЗаказуКлиента
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|	И ТТНИсходящаяЕГАИС.ДокументОснование.ЗаказКлиента ССЫЛКА Документ.ЗаказКлиента
	|	И ТТНИсходящаяЕГАИС.ДокументОснование.ЗаказКлиента = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНПоЗаказуКлиента.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС,
	|	ЗНАЧЕНИЕ(Перечисление.бг_СтатусыЗаказаКлиентаB2B.Отгружен) КАК Статус
	|ИЗ
	|	ТТНПоЗаказуКлиента КАК ТТНПоЗаказуКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (ТТНПоЗаказуКлиента.ТТНИсходящаяЕГАИС = СтатусыДокументовЕГАИС.Документ
	|				И СтатусыДокументовЕГАИС.Статус В (&ДопустимыеСтатусы))
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ССЫЛКА Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС";
		
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
    Запрос.УстановитьПараметр("ДопустимыеСтатусы", ДопустимыеСтатусы);
	
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();

	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат РезультатЗапроса[0].Статус;
	КонецЕсли;
	
	ЗаказПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "Проведен");
	Если ЗаказПроведен Тогда
		Возврат Перечисления.бг_СтатусыЗаказаКлиентаB2B.Принят;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

// Актуализирует обеспечение в заказе клиента.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Заказ клиента, в котором надо актуализировать обеспечение.
//
Процедура бг_АктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента) Экспорт
	
	НачалоВремя = ОценкаПроизводительности.НачатьЗамерВремени();
	КоличествоТоваровЗаказа = ЗаказКлиента.Товары.Количество();
	
	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		бг_ЗаказыКлиентов.АктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента);
		
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			"ОбработкаЗаказов.АктуализироватьОбеспечениеЗаказовКлиентов", 
			НачалоВремя, 
			КоличествоТоваровЗаказа,
			СокрЛП(ЗаказКлиента), 
			Ложь);
		
	Исключение
		
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		ШаблонСообщения = 
			НСтр("ru = 'Не удалось актуализировать обеспечение Заказа клиента %1.
				       |По причине: %2
					   |';
				 |en = 'Не удалось актуализировать обеспечение Заказа клиента %1.
				       |Reason: %2
					   |'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ЗаказКлиента,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			бг_СобытиеЖурналаРегистрацииАктуализироватьОбеспечение(),
			УровеньЖурналаРегистрации.Ошибка,
			ЗаказКлиента.Метаданные(),
			ЗаказКлиента,
			ТекстСообщения);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Передает заказ клиента на сборку (Формирует по заказу Расходный ордер на товары).
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Заказ клиента, который передается на сборку.
//   ОтменитьНеобеспеченныеПозиции - Булево -
//                        Истина - при передаче в сборку отменить все необеспеченные позиции
//                        Ложь   - не отменять
//
Процедура бг_ПередатьЗаказКлиентаНаСборку(ЗаказКлиента, ОтменитьНеобеспеченныеПозиции = Ложь) Экспорт
	
	НачалоВремя = ОценкаПроизводительности.НачатьЗамерВремени();
	КоличествоТоваровЗаказа = ЗаказКлиента.Товары.Количество();
	
	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		бг_ЗаказыКлиентов.ПередатьЗаказКлиентаНаСборку(ЗаказКлиента, ОтменитьНеобеспеченныеПозиции);
		
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			"ОбработкаЗаказов.ПередатьЗаказыКлиентовНаСборку", 
			НачалоВремя, 
			КоличествоТоваровЗаказа,
			СокрЛП(ЗаказКлиента), 
			Ложь);
		
	Исключение
		
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;	
		
		ШаблонСообщения = 
			НСтр("ru = 'Не удалось передать на сборку Заказ клиента %1.
				       |По причине: %2
					   |';
				 |en = 'Failed to assign %1 sales order to pick up.
				       |Reason: %2
					   |'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ЗаказКлиента,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			бг_СобытиеЖурналаРегистрацииПередатьЗаказКлиентаНаСборку(),
			УровеньЖурналаРегистрации.Ошибка,
			ЗаказКлиента.Метаданные(),
			ЗаказКлиента,
			ТекстСообщения);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

&После("ОбработкаПолученияПолейПредставления")
Процедура бг_ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("бг_ДолгосрочныйРезерв");
	
КонецПроцедуры

&После("ОбработкаПолученияПредставления")
Процедура бг_ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если Данные.бг_ДолгосрочныйРезерв = Истина Тогда
		
		СтандартнаяОбработка = Ложь;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Долгосрочный резерв %1 от %2';
				|en = 'Долгосрочный резерв %1 dated %2'"),
			Данные.Номер,
			Данные.Дата);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

&Перед("ОтразитьРаспределениеЗапасовДвижения")
Процедура бг_ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)

	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                     КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                КАК Период,
		|	ТабЧасть.Номенклатура                               КАК Номенклатура,
		|	ТабЧасть.Характеристика                             КАК Характеристика,
		|	
		|	ВЫБОР КОГДА ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|			ТабЧасть.Подразделение
		|		ИНАЧЕ
		|			ТабЧасть.Склад
		|		КОНЕЦ КАК Склад,
		|	
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	
		|	-ТабЧасть.Количество                                КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) КАК ВариантОбеспечения,
		|	ТабЧасть.бг_ЗаказКлиентаИсточникОбеспечения         КАК Заказ,
		|	
		|	ТабЧасть.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения КАК ЖелаемаяДатаОтгрузки,
		|	ЛОЖЬ КАК ПоГрафику,
		|	НЕОПРЕДЕЛЕНО КАК РаспоряжениеВГрафике,
		|	0 КАК КоличествоВГрафике
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ТабЧасть
		|		
		|ГДЕ
		|	НЕ ТабЧасть.Отменено
		|		И ТабЧасть.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
		|		И ТабЧасть.бг_ЗаказКлиентаИсточникОбеспечения <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)";
	
	РаспределениеЗапасовДвижения.ЗапланироватьРасходЗапаса(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаТабЧасть);

КонецПроцедуры

&Перед("ОтразитьРезерв")
Процедура бг_ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДанныхДокумента = 
	"ВЫБРАТЬ
	|	ТоварыДокумента.Ссылка				КАК Ссылка,
	|	ДанныеШапки.Дата					КАК Период,
	|	ТоварыДокумента.бг_ЗаказКлиентаИсточникОбеспечения КАК Заказ,
	|	НЕОПРЕДЕЛЕНО						КАК Накладная,
	|	ЛОЖЬ								КАК Исправление,
	|	НЕОПРЕДЕЛЕНО						КАК ИсправляемыйДокумент,
	|	ДанныеШапки.Партнер					КАК Получатель,
	|	ТоварыДокумента.Склад				КАК Склад,
	|	ТоварыДокумента.Номенклатура		КАК Номенклатура,
	|	ТоварыДокумента.Характеристика		КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.Обособленно
	|			ТОГДА ДанныеШапки.Назначение
	|		ИНАЧЕ &НазначениеПоУмолчанию
	|	КОНЕЦ								КАК Назначение,
	|	ТоварыДокумента.Серия				КАК Серия,
	|	ТоварыДокумента.СтатусУказанияСерий	КАК СтатусУказанияСерий,
	|	-ТоварыДокумента.Количество			КАК Количество,
	|	ЛОЖЬ								КАК СверхЗаказа,
	|	ТоварыДокумента.Отменено			КАК Отменено,
	|	ЛОЖЬ								КАК ЭтоНакладная,
	|	ИСТИНА								КАК ОтгрузкаПоЗаказу
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДанныеШапки
	|		ПО ТоварыДокумента.Ссылка = ДанныеШапки.Ссылка
	|
	|ГДЕ
	|	ТоварыДокумента.Ссылка В(&Ссылка)
	|	И &ИспользоватьРасширенныеВозможностиЗаказа
	|	И ДанныеШапки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|	И (ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|		ИЛИ ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И ДанныеШапки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован))
	|	И ТоварыДокумента.Количество <> 0
	|	И ТоварыДокумента.бг_ЗаказКлиентаИсточникОбеспечения <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)";
	
	ИспользоватьРасширенныеВозможностиЗаказа = 
		?(ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"),
			"ИСТИНА",
			"ЛОЖЬ");
	
	ТекстЗапросаДанныхДокумента = СтрЗаменить(ТекстЗапросаДанныхДокумента,
												"&НазначениеПоУмолчанию",
												"ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");
	ТекстЗапросаДанныхДокумента = СтрЗаменить(ТекстЗапросаДанныхДокумента,
												"&ИспользоватьРасширенныеВозможностиЗаказа",
												ИспользоватьРасширенныеВозможностиЗаказа);
	
	СкладыСервер.ОтразитьРезерв(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокумента);
	
КонецПроцедуры

#Область Отчеты

&После("ДобавитьКомандыОтчетов")
Процедура бг_ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры)
	
	КомандаОтчет = Отчеты.бг_СверкаЗаказаРозничногоПокупателя.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.бг_РасшифровкаСкидокЗаказаКлиента.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Обработки.бг_СогласованиеПродаж.ДобавитьКомандуОтчета(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

&Перед("ДобавитьКомандыПечати")
Процедура бг_ДобавитьКомандыПечати(КомандыПечати)
	
	// Заказ клиента
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор = "бг_ПФ_MXL_ЗаказРозничногоПокупателя";
	КомандаПечати.Представление = НСтр("ru = 'Заказ розничного покупателя'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	// Наряд-задание
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.бг_ПечатьНарядЗаданий";
	КомандаПечати.Идентификатор = "бг_НарядЗадание";
	КомандаПечати.Представление = НСтр("ru = 'Наряд-задание'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Invoice ENG
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
	КомандаПечати.Идентификатор = "бг_ПФ_MXL_Invoice";
	КомандаПечати.Представление = НСтр("ru = 'Invoice (ENG)';
								|en = 'Invoice (ENG)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("бг_АнглоязычнаяВерсия", Истина);
	
	// Invoice RUS
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
	КомандаПечати.Идентификатор = "бг_ПФ_MXL_Invoice";
	КомандаПечати.Представление = НСтр("ru = 'Invoice (RUS)';
								|en = 'Invoice (RUS)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("бг_АнглоязычнаяВерсия", Ложь);
	
	// Упаковочный лист ENG
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
	КомандаПечати.Идентификатор = "бг_ПФ_MXL_УпаковочныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Упаковочный лист (ENG)';
								|en = 'Packing list (ENG)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("бг_АнглоязычнаяВерсия", Истина);
	
	// // Упаковочный лист RUS
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
	КомандаПечати.Идентификатор = "бг_ПФ_MXL_УпаковочныйЛист";
	КомандаПечати.Представление = НСтр("ru = 'Упаковочный лист (RUS)';
								|en = 'Packing list (RUS)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ДополнительныеПараметры.Вставить("бг_АнглоязычнаяВерсия", Ложь);

КонецПроцедуры

#Область НарядЗадание

// Возвращает данные для формирования печатной формы "Наряд-задание".
//
// Параметры:
//	ПараметрыПечати - Структура - дополнительные параметры печати.
//	ЗаказыКлиента - Массив - Заказы клиента, по которым необходимо получить данные.
//
// Возвращаемое значение:
//	Структура - Структура с полями: ДанныеПоШапке, ДанныеПоТоварам и  ДанныеИтоговПоТоварам.
//
Функция бг_ДанныеДляПечатнойФормыНарядЗадание(ПараметрыПечати, ЗаказыКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Документ,
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиента.бг_НомерДокументаУПП КАК НомерДокументаУПП,
	|	ЗаказКлиента.Номер КАК НомерРаспоряжения,
	|	ЗаказКлиента.Дата КАК ДатаРаспоряжения,
	|	ЗаказКлиента.Автор КАК АвторЗаказа,
	|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Грузополучатель КАК Грузополучатель,
	|	ЗаказКлиента.Комментарий КАК КомментарийЗаказа,
	|	ТранспортнаяИнформация.Перевозчик КАК Перевозчик,
	|	ТранспортнаяИнформация.ВидПеревозки КАК ВидПеревозки,
	|	ТранспортнаяИнформация.ТранспортноеСредство КАК ТранспортноеСредство
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бг_ТранспортнаяИнформация.Объект КАК Объект,
	|			МАКСИМУМ(бг_ТранспортнаяИнформация.ТранспортноеСредство) КАК ТранспортноеСредство,
	|			МАКСИМУМ(бг_ТранспортнаяИнформация.Перевозчик) КАК Перевозчик,
	|			МАКСИМУМ(бг_ТранспортнаяИнформация.ВидПеревозки) КАК ВидПеревозки
	|		ИЗ
	|			РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|		ГДЕ
	|			бг_ТранспортнаяИнформация.Объект В(&ЗаказыКлиента)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			бг_ТранспортнаяИнформация.Объект) КАК ТранспортнаяИнформация
	|		ПО ЗаказКлиента.Ссылка = ТранспортнаяИнформация.Объект
	|ГДЕ
	|	ЗаказКлиента.Ссылка В(&ЗаказыКлиента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка КАК Документ,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ЗаказКлиентаТовары.Номенклатура.бг_КонтрагентПроизводитель КАК НоменклатураПроизводитель,
	|	ЗаказКлиентаТовары.Серия КАК Серия,
	|	ЕСТЬNULL(УпаковкиПаллеты.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета,
	|	ЕСТЬNULL(УпаковкиКоробки.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаКоробка,
	|	ЕСТЬNULL(УпаковкиПаллеты.бг_КодЕК_Номенклатуры, ЗаказКлиентаТовары.Номенклатура.Код) КАК КодЕКНоменклатуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА УпаковкиКоробки.Знаменатель <> 0
	|				ТОГДА УпаковкиКоробки.Числитель / УпаковкиКоробки.Знаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0) КАК БутылокВКоробке,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА УпаковкиПаллеты.Знаменатель <> 0
	|				ТОГДА УпаковкиПаллеты.Числитель / УпаковкиПаллеты.Знаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0) КАК БутылокВПаллете,
	|	ЕСТЬNULL(УпаковкиПаллеты.КоличествоУпаковок, 0) КАК КоробокВПаллете,
	|	ЗаказКлиентаТовары.Количество КАК КоличествоБутылок,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ВЫБОР
	|				КОГДА УпаковкиКоробки.Знаменатель <> 0
	|					ТОГДА ЗаказКлиентаТовары.Количество / УпаковкиКоробки.Числитель / УпаковкиКоробки.Знаменатель
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0) КАК ЧИСЛО(15, 2)) КАК КоличествоКоробок,
	|	ЕСТЬNULL(УпаковкиКоробки.Вес, 0) КАК ВесКоробки,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ВЫБОР
	|				КОГДА УпаковкиКоробки.Знаменатель <> 0
	|					ТОГДА УпаковкиКоробки.Вес * ЗаказКлиентаТовары.Количество / УпаковкиКоробки.Числитель / УпаковкиКоробки.Знаменатель
	|				ИНАЧЕ 0
	|			КОНЕЦ, 0) КАК ЧИСЛО(15, 2)) КАК Вес
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиПаллеты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиКоробки
	|			ПО УпаковкиПаллеты.Родитель = УпаковкиКоробки.Ссылка
	|				И (УпаковкиКоробки.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка))
	|		ПО ЗаказКлиентаТовары.бг_УпаковкаПаллета = УпаковкиПаллеты.Ссылка
	|			И (УпаковкиПаллеты.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета))
	|			И ЗаказКлиентаТовары.Номенклатура = УпаковкиПаллеты.Владелец
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В(&ЗаказыКлиента)";
	
	Запрос.УстановитьПараметр("ЗаказыКлиента", ЗаказыКлиента);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = Новый Структура;
	
	ДанныеДляПечати.Вставить("ДанныеПоШапке", ПакетРезультатовЗапроса[0].Выгрузить());
	
	ДанныеПоТоварам = ПакетРезультатовЗапроса[1].Выгрузить();
	Обработки.бг_ПечатьНарядЗаданий.ЗаполнитьЦелоеКоличествоУпаковок(ДанныеПоТоварам);
	ДанныеДляПечати.Вставить("ДанныеПоТоварам", ДанныеПоТоварам);
	
	ДанныеДляПечати.Вставить(
		"ДанныеИтоговПоТоварам",
		Обработки.бг_ПечатьНарядЗаданий.ИтогиПоТоварам(ДанныеПоТоварам));
	
	Возврат ДанныеДляПечати;
		
КонецФункции

#КонецОбласти // Конец НарядЗадание

#Область InvoiceEng

// Возвращает данные для формирования печатных форм "Invoice и Упаковочный Лист".
//
// Параметры:
//	ПараметрыПечати - Структура - дополнительные параметры печати.
//	ЗаказыКлиента - Массив - Заказы клиента, по которым необходимо получить данные.
//
// Возвращаемое значение:
//	Структура - Структура с полями: РезультатПоШапке, РезультатПоЕмкости и РезультатПоТабличнойЧасти.
//
Функция бг_ДанныеДляПечатныхФормInvoiceУпаковочныйЛист(ПараметрыПечати, МассивОбъектов) Экспорт

	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьСкидки") Тогда
		ОтображатьСкидки = ПараметрыПечати.ОтображатьСкидки;
	Иначе
		ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
		<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	КонецЕсли; 

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(битПунктыНазначения.Ссылка) КАК Ссылка,
	|	ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) КАК Организация,
	|	битПунктыНазначения.Адрес КАК Адрес,
	|	битПунктыНазначения.КПП КАК КПП
	|ПОМЕСТИТЬ ПунктыНазначения
	|ИЗ
	|	Справочник.битПунктыНазначения КАК битПунктыНазначения
	|ГДЕ
	|	ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации) В
	|			(ВЫБРАТЬ
	|				Документ.ЗаказКлиента.Ссылка.Организация
	|			ИЗ
	|				Документ.ЗаказКлиента)
	|	И НЕ битПунктыНазначения.ОбособленноеПодразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Организации),
	|	битПунктыНазначения.Адрес,
	|	битПунктыНазначения.КПП
	
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПунктыНазначения.Адрес, """") КАК ГрузоотправительАдрес,
	|	ЕСТЬNULL(ПунктыНазначения.КПП, """") КАК ГрузоотправительКПП,
	|	ЕСТЬNULL(Документы.Договор.Номер, """") КАК НомерДоговора,
	|	ЕСТЬNULL(Документы.Договор.Дата, """") КАК ДатаДоговора,
	|	ЕСТЬNULL(Документы.бг_ПунктНазначения.Адрес, """") КАК АдресОтгрузки,
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	ЕСТЬNULL(Документы.БанковскийСчет.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ЕСТЬNULL(Документы.бг_ОтветственныйЗаПодписаниеИнвойса, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ОтветственныйЗаПодписаниеИнвойса,
	|	ЕСТЬNULL(Документы.бг_ОтветственныйЗаПодписаниеИнвойса.НомерДокументаПраваПодписи, """") КАК НомерДокументаПраваПодписи,
	|	ЕСТЬNULL(Документы.бг_ОтветственныйЗаПодписаниеИнвойса.ДатаДокументаПраваПодписи, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаПраваПодписи,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	Документы.Валюта КАК Валюта,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	Документы.Грузополучатель КАК Грузополучатель,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Документы.бг_УсловияПоставки) КАК УсловияПоставки,
	|	ЕСТЬNULL(Документы.бг_ПунктНазначения.НаименованиеПолное, """") КАК НаименованиеПунктаНазначения
	|ИЗ
	|	Документ.ЗаказКлиента КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПунктыНазначения КАК ПунктыНазначения
	|		ПО Документы.Организация = ПунктыНазначения.Организация
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура.ОбъемДАЛ, 0) * 10 КАК Емкость,
	|	ЗаказКлиентаТовары.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок КАК КоличествоВКоробке
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура.ОбъемДАЛ, 0) * 10,
	|	ЗаказКлиентаТовары.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Емкость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.НоменклатураНаименованиеПолное КАК НаименованиеПолное,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоМест КАК КоличествоМест,
	|	Товары.МассаНетто КАК МассаНетто,
	|	Товары.МассаБрутто КАК МассаБрутто,
	|	Товары.КодТНВЭД КАК КодТНВЭД,
	|	Товары.Артикул КАК Артикул,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СуммаСкидки КАК СуммаСкидки,
	|	Товары.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Товары.УпаковкаПаллета КАК УпаковкаПаллета,
	|	Товары.Крепость КАК Крепость,
	|	Товары.КратностьУпаковки КАК КратностьУпаковки,
	|	Товары.КоличествоПаллет КАК КоличествоПаллет,
	|	Товары.НаименованиеПоСертификатуНаАнглийском КАК НаименованиеПоСертификатуНаАнглийском,
	|	Товары.Емкость КАК Емкость
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(Таблица.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК НоменклатураНаименованиеПолное,
	|		Таблица.Номенклатура КАК Номенклатура,
	|		СУММА(Таблица.Количество) КАК Количество,
	|		СУММА(Таблица.бг_КоличествоКоробок) КАК КоличествоМест,
	|		ЕСТЬNULL(СУММА(Таблица.бг_УпаковкаПаллета.Родитель.Родитель.Вес * Таблица.Количество), 0) КАК МассаНетто,
	|		ЕСТЬNULL(СУММА(Таблица.бг_УпаковкаПаллета.Родитель.Вес * Таблица.бг_КоличествоКоробок), 0) КАК МассаБрутто,
	|		Таблица.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|		Таблица.Номенклатура.Артикул КАК Артикул,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА &ОтображатьСкидки
	|					ТОГДА Таблица.Цена
	|				ИНАЧЕ Таблица.Сумма / Таблица.КоличествоУпаковок
	|			КОНЕЦ) КАК Цена,
	|		СУММА(Таблица.Сумма) КАК Сумма,
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА &ОтображатьСкидки
	|					ТОГДА Таблица.Цена
	|				ИНАЧЕ Таблица.Сумма / Таблица.КоличествоУпаковок
	|			КОНЕЦ) КАК СуммаСкидки,
	|		СУММА(Таблица.Сумма + Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки) КАК СуммаБезСкидки,
	|		МИНИМУМ(Таблица.НомерСтроки) КАК НомерСтроки,
	|		Таблица.Ссылка КАК Ссылка,
	|		Таблица.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|		Таблица.Номенклатура.Крепость КАК Крепость,
	|		СУММА(Таблица.бг_УпаковкаПаллета.Родитель.КоличествоУпаковок) КАК КратностьУпаковки,
	|		СУММА(Таблица.бг_КоличествоПаллет) КАК КоличествоПаллет,
	|		ВЫРАЗИТЬ(Таблица.Номенклатура.ТоварнаяКатегория.бг_НаименованиеПоСертификатуАнг КАК СТРОКА(1000)) КАК НаименованиеПоСертификатуНаАнглийском,
	|		Таблица.Номенклатура.ОбъемДАЛ * 10 КАК Емкость
	|	ИЗ
	|		Документ.ЗаказКлиента.Товары КАК Таблица
	|	ГДЕ
	|		Таблица.Ссылка В(&МассивОбъектов)
	|		И Таблица.Отменено = ЛОЖЬ
	|		И (Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ИЛИ Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					И (НЕ Таблица.Ссылка.ВернутьМногооборотнуюТару
	|						ИЛИ Таблица.Ссылка.ТребуетсяЗалогЗаТару))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Таблица.Номенклатура,
	|		ВЫРАЗИТЬ(Таблица.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|		Таблица.Номенклатура.КодТНВЭД,
	|		Таблица.Ссылка,
	|		Таблица.бг_УпаковкаПаллета,
	|		Таблица.Номенклатура.Крепость,
	|		Таблица.Номенклатура.Артикул,
	|		Таблица.Номенклатура.ОбъемДАЛ * 10,
	|		ВЫРАЗИТЬ(Таблица.Номенклатура.ТоварнаяКатегория.бг_НаименованиеПоСертификатуАнг КАК СТРОКА(1000))) КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаКоэффициентУпаковки",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
	"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
	Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование",
		"Товары.Упаковка",
		"Товары.Номенклатура"));

	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);

	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();

	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЕмкости", ПакетРезультатовЗапроса[2]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[3]);

	Возврат СтруктураДанныхДляПечати;

КонецФункции

#КонецОбласти // InvoiceEng

#КонецОбласти // Конец Печать

// Возвращает событие журнала регистрации для записи информации и ошибок передачи заказов клиентов на сборку.   
//
Функция бг_СобытиеЖурналаРегистрацииПередатьЗаказКлиентаНаСборку() 
	
	Возврат НСтр("ru = 'Обработка заказов клиентов. Передача на сборку';
	             |en = 'Обработка заказов клиентов. Передача на сборку'");

КонецФункции

// Возвращает событие журнала регистрации для записи информации и ошибок актуализации обеспечения заказов клиентов.   
//
Функция бг_СобытиеЖурналаРегистрацииАктуализироватьОбеспечение()
	
	Возврат НСтр("ru = 'Обработка заказов клиентов. Актуализация обеспечения';
	             |en = 'Обработка заказов клиентов. Актуализация обеспечения'");
	
КонецФункции

#КонецОбласти

#КонецЕсли



