#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриЧтенииНаСервереПеред(ТекущийОбъект)
	
	бг_ДобавитьРеквизитыТранспортнойИнформации();
	бг_ДобавитьЭлементыТранспортнойИнформации();
	бг_ЗаполнитьТранспортнуюИнформацию();
	
	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмерения.ДобавитьРеквизитыПаллетизацииНаФормуДокумента(ЭтотОбъект);
	бг_УпаковкиЕдиницыИзмерения.ЗаполнитьСлужебныеЕдиницыУпаковокПаллетизации(ЭтотОбъект); 
	бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);
	бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

&НаСервере
Процедура бг_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
#Область ДобавлениеРеквизитов
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_ДобавитьРеквизитыТранспортнойИнформации();
	КонецЕсли;
	
	// ОбщиеМеханизмы.Паллетизация
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_УпаковкиЕдиницыИзмерения.ДобавитьРеквизитыПаллетизацииНаФормуДокумента(ЭтотОбъект);
	КонецЕсли;
	// Конец ОбщиеМеханизмы.Паллетизация
	
	бг_ДобавитьРеквизитыДоставки();
	бг_ДобавитьЭлементыДоставки();
	бг_ДобавитьЭлементыСкидок();
	бг_ДобавитьРеквизитыКредитныхЛимитов();
	бг_ДобавитьРеквизитыРозничногоПокупателя();
#КонецОбласти // Конец ДобавлениеРеквизитов

#Область ЗаполнениеДанных
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_ЗаполнитьТранспортнуюИнформацию();
	КонецЕсли;
	
	// ОбщиеМеханизмы.Паллетизация
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_УпаковкиЕдиницыИзмерения.ЗаполнитьСлужебныеЕдиницыУпаковокПаллетизации(ЭтотОбъект);
		бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);
		бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	КонецЕсли;
	// Конец ОбщиеМеханизмы.Паллетизация
	
	бг_ЗаполнитьКредитныеЛимиты();
	бг_ЗаполнитьАдресГрузополучателя();

	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ПодразделениеСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "Подразделение");
		
		Если ЗначениеЗаполнено(ПодразделениеСклада) Тогда
			Объект.Подразделение = ПодразделениеСклада;
		КонецЕсли;
		
	КонецЕсли;

#КонецОбласти // Конец ЗаполнениеДанных

#Область ДобавлениеЭлементов
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		бг_ДобавитьЭлементыТранспортнойИнформации();
	КонецЕсли;
	
	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмерения.ДобавитьЭлементыПаллетизацииНаФормуДокумента(ЭтотОбъект, Элементы.ГруппаТоварыПодвал);
	// Конец ОбщиеМеханизмы.Паллетизация
	
	бг_ДобавитьКомандуАктуализироватьОбеспечение();
	бг_ДобавитьКомандуЗаполнитьСерииПоДатеПроизводства();
	бг_ДобавитьКомандыПоСкидкам();
	бг_ДобавитьЭлементыУпаковок();
	бг_ДобавитьЭлементГУИДПредзаказаПокупателя();
	бг_ДобавитьЭлементыКредитныхЛимитов();
	бг_ДобавитьЭлементыEDI();
	бг_ДобавитьЭлементыЗаявкиКлиента();
	бг_ДобавитьЭлементыРезервирования();
	бг_ДобавитьЭлементыРозничногоПокупателя();
	бг_ДобавитьЭлементыДанныхУПП();
	бг_ДобавитьЭлементыДанныхЧикаго();
	бг_ДобавитьЭлементыОтсрочкиПлатежа();
	бг_ДобавитьЭлементОтгрузкаИзERP();
	#КонецОбласти // Конец ДобавлениеЭлементов

#Область УправлениеОтображением
	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмерения.УстановитьУсловноеОформлениеПаллетизации(ЭтотОбъект);
	бг_УпаковкиЕдиницыИзмерения.УстановитьВидимостьДоступностьЭлементовПаллетизации(ЭтотОбъект);
	// Конец ОбщиеМеханизмы.Паллетизация
	
	бг_УстановитьВидимостьСкидок();
	бг_УстановитьВидимостьЭлементовЗаявкиКлиента();
	бг_УстановитьВидимостьЭлементовРезервирования();
	бг_УстановитьВозможностьРедактированияДокумента();
	бг_УстановитьВидимостьТранспортнойИнформации();
#КонецОбласти // Конец УправлениеОтображением
		
КонецПроцедуры

&НаСервере
Процедура бг_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	
	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);
	// Конец ОбщиеМеханизмы.Паллетизация
	
	бг_ЗаполнитьТранспортнуюИнформацию();
	бг_ЗаполнитьКредитныеЛимиты();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		// ОбщиеМеханизмы.Паллетизация
		бг_ЗаполнитьДанныеПаллетизацииТоваровИзФормыНаСервере();
		бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
		// Конец ОбщиеМеханизмы.Паллетизация
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказКлиента.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			бг_ЗаполнитьПунктНазначенияИЛицензию();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результаты редактирования объектов в сторонних формах
// Параметры:
//    ОбъектРезультат - объект - отредактированный объект (ДанныеФормыСтруктура)
//    ПараметрыОбратногоВызова - структура - переданные при вызове параметры
&НаСервере
Процедура бг_ОбработкаРезультатовРедактированияОбъектаВСтороннейФорме(ОбъектРезультат, ПараметрыОбратногоВызова) Экспорт
    
	Если ОбъектРезультат <> Неопределено Тогда
		
		ТипРеквизита = ТипЗнч(РеквизитФормыВЗначение(ПараметрыОбратногоВызова.Реквизит));
		ЗначениеРеквизита = ДанныеФормыВЗначение(ОбъектРезультат, ТипРеквизита);
		ЗначениеВРеквизитФормы(ЗначениеРеквизита, ПараметрыОбратногоВызова.Реквизит);
			
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	КонецЕсли;
        
КонецПроцедуры

&НаКлиенте
Процедура бг_ЗаполнитьДоступныеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.бг_ДоступныеСкидки.Очистить();
	Для каждого СкидкаНаценка Из ВозвращенноеЗначение Цикл
		НоваяСтрока = Объект.бг_ДоступныеСкидки.Добавить();
		НоваяСтрока.СкидкаНаценка = СкидкаНаценка;
	КонецЦикла;
	
	ТекстОповещения = НСтр("ru = 'Скидки (наценки)'; en = 'Discounts (markups)'");
	ПояснениеОповещения = НСтр("ru = 'Определены доступные скидки (наценки)'; en = 'Available discount (markups) are defined'");
	ПоказатьОповещениеПользователя(ТекстОповещения, , ПояснениеОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
&После("ПередЗаписьюНаСервере")
Процедура бг_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отбор = Новый Структура("ВариантОбеспечения",
		ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления"));
	СтрокиЗаказа = Объект.Товары.НайтиСтроки(Отбор);
	
	Если СтрокиЗаказа.Количество() Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			НСтр("ru = 'Запрещено устанавливать вариант обеспечения ""Резервировать по мере поступления""'");
		Сообщение.Поле = СтрШаблон("Объект.Товары[%1].ВариантОбеспечения", Объект.Товары.Индекс(СтрокиЗаказа[0]));
		Сообщение.Сообщить();
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"бг_ОбновитьСкидкиВЗаказеМагазина", 
		ЭтотОбъект.бг_ОбновитьСкидкиВЗаказеМагазина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура бг_КонтрагентПриИзмененииПосле(Элемент)
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
&После("ДатаПриИзмененииЗавершение")
Процедура бг_ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры)
	
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПредставлениеТранспортнойИнформацииНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"бг_ПредставлениеТранспортнойИнформацииНажатиеПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Документ предварительно необходимо записать. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
			
		бг_ОткрытьЗаписьТранспортнойИнформации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ГрузополучательПриИзменении(Элемент)
	
	бг_ГрузополучательПриИзмененииНаСервере();
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ЛицензияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.бг_ПунктНазначения.Пустая() Тогда
		Объект.бг_Лицензия = Неопределено;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Для выбора лицензии укажите пункт назначения'"),
			Объект.Ссылка,
			"Объект.бг_ПунктНазначения");
		Возврат;
	КонецЕсли;
	
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Объект.Контрагент;
	Отбор.Использование = Истина;
	
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("бг_ДатаПрекращенияДействия");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	Отбор.ПравоеЗначение = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ОбщегоНазначенияКлиент.ДатаСеанса());
	Отбор.Использование = Истина;
	
	Отбор = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	Отбор.ПравоеЗначение = бг_УчетАлкоголяВызовСервера.ЛицензииПунктаНазначения(Объект.бг_ПунктНазначения, Объект.Дата);
	Отбор.Использование = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновки);
		
	ОткрытьФорму("Справочник.ЛицензииПоставщиковАлкогольнойПродукции.Форма.бг_ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПунктНазначенияПриИзменении()
	
	бг_ЗаполнитьЛицензию();
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура бг_ТоварыПередОкончаниемРедактированияПосле(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования И Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.бг_РазницаСEDI = Элемент.ТекущиеДанные.бг_ЦенаСоСкидкой - Элемент.ТекущиеДанные.бг_ЦенаEDI;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыНоменклатураПриИзмененииПосле(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыНоменклатураПриИзмененииПосле(ЭтотОбъект, ТекущаяСтрока);
	// Конец ОбщиеМеханизмы.Паллетизация
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗначениеЗаполнено(ТекущаяСтрока.бг_УпаковкаПаллета) Тогда
		ОбновитьКолонкуДоступноСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоУпаковокПриИзмененииПосле(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыКоличествоУпаковокПриИзмененииПосле(ЭтотОбъект, ТекущаяСтрока);
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыПослеУдаленияПосле(Элемент)
	
	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыПослеУдаленияПосле(ЭтотОбъект);
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыОтмененоПриИзмененииПосле(Элемент)
	
	// ОбщиеМеханизмы.Паллетизация
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыОтмененоПриИзмененииПосле(ЭтотОбъект);
	// Конец ОбщиеМеханизмы.Паллетизация

	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

// ОбщиеМеханизмы.Паллетизация
&НаКлиенте
Процедура бг_ТоварыУпаковкаПаллетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыУпаковкаПаллетаОбработкаВыбора(
		ЭтотОбъект,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);

	ОбновитьКолонкуДоступноСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыУпаковкаПаллетаОчистка(Элемент, СтандартнаяОбработка)
	
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыУпаковкаПаллетаОчистка(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоПаллетПриИзменении(Элемент)
	
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыКоличествоПаллетПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоКоробокПриИзменении(Элемент)

	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыКоличествоКоробокПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоУпаковокПриИзменении() Экспорт
	
	// Метод является эмулятором вызова типовой процедуры изменения количества товаров,
	// чтобы можно было вызвать ее из общего модуля.
	ТоварыКоличествоУпаковокПриИзменении(Элементы.Товары);	

КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыПриОкончанииРедактированияПосле(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		// ОбщиеМеханизмы.Паллетизация
		бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыПриОкончанииРедактированияПосле(ЭтотОбъект);
		// Конец ОбщиеМеханизмы.Паллетизация
	КонецЕсли;
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.Паллетизация

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_ЗаполнитьСерииПоДатеПроизводства(Команда)
	
	Если Не бг_ЗаполнитьСерииПоДатеПроизводстваСервер() Тогда
		ТекстПредупреждения = НСтр("ru = 'В табличной части нет товаров, по которым серии можно заполнить по дате производства.';
								|en = 'The tabular section contains no goods that can be used to fill in series by production date.'");
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&Вместо("РеквизитыПечати")
Процедура бг_РеквизитыПечати(Команда)
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	СтруктураПараметров.Вставить("АдресДоставки", Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя", Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента", Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель", Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель", Объект.Грузополучатель);
	СтруктураПараметров.Вставить("Партнер", Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("БанковскийСчет", Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Дата", Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель", Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер", Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("НазначениеПлатежа", Объект.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НомерЗаказа", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Объект.Номер));
	СтруктураПараметров.Вставить("ДатаЗаказа", Формат(Объект.Дата, "ДЛФ = D"));
	СтруктураПараметров.Вставить("ПараметрыВыбораРеквизитов", ПараметрыВыбораРеквизитов);
	СтруктураПараметров.Вставить("бг_ОтветственныйЗаПодписаниеИнвойса", Объект.бг_ОтветственныйЗаПодписаниеИнвойса);
	СтруктураПараметров.Вставить("бг_УсловияПоставки", Объект.бг_УсловияПоставки);
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.РеквизитыПечати",
		СтруктураПараметров,
		ЭтаФорма,
		,
		,
		,
		Неопределено,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_РедактироватьКодыСтрокБюджета(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("бг_РедактироватьКодыСтрокБюджетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.бг_ФормаРедактированияСтрокБюджета", 
		бг_ПараметрыЗапросаСкидокНаценок(),
		,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_НастройкаРаспределенияСуммовойСкидки(Команда)
	бг_ВызовРедактированияВСтороннейФорме("Документ.ЗаказКлиента.Форма.бг_ФормаНастройкаРаспределенияСуммовойСкидки");
КонецПроцедуры

&НаКлиенте
Процедура бг_ЗаполнитьДоступныеСкидки(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("бг_ЗаполнитьДоступныеСкидкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.бг_ФормаДоступныеСкидки", 
		бг_СтруктураДоступныхСкидок(),
		,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыЗаполнитьУпаковки(Команда)
	
	бг_ЗаполнитьУпаковки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
&После("ПартнерПриИзмененииСервер")
Процедура бг_ПартнерПриИзмененииСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(
		Объект.Партнер, 
		Объект.Грузополучатель);
		
	бг_ЗаполнитьАдресГрузополучателя();
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	
КонецПроцедуры

&НаСервере
&После("КонтрагентПриИзмененииСервер")
Процедура бг_КонтрагентПриИзмененииСервер()
	
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьПунктНазначенияИЛицензию()
	
	бг_УчетАлкоголя.ЗаполнитьПунктНазначенияИЛицензиюВДокументе(Объект);
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьЛицензию()
	
	бг_УчетАлкоголя.ЗаполнитьЛицензиюВДокументе(Объект);
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыДанныхУПП()
	
	бг_НомерДокументаУПП = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма,
		"бг_НомерДокументаУПП",
		Элементы.ГруппаПараметрыПраво,
		"Объект.бг_НомерДокументаУПП",
		"ПолеФормы");
	бг_НомерДокументаУПП.ТолькоПросмотр = Истина;
	бг_НомерДокументаУПП.АвтоМаксимальнаяШирина = Ложь;
	ШиринаПоля = 24;
	бг_НомерДокументаУПП.МаксимальнаяШирина = ШиринаПоля;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыДанныхЧикаго()

	бг_ЗафиксированныйТовар = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ЗафиксированныйТовар", 
		Элементы.Товары, 
		"Объект.Товары.бг_ЗафиксированныйТовар",,
		Элементы.бг_ТоварыСуммаПримененнойСкидки);
	
	бг_ЗафиксированныйТовар.ТолькоПросмотр = Истина;
	бг_ЗафиксированныйТовар.Вид = ВидПоляФормы.ПолеФлажка;

    	бг_РучноеСогласованиеФК = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_РучноеСогласованиеФК", 
							Элементы.ГруппаДополнительно, 
							"Объект.бг_РучноеСогласованиеФК",
							, 
							,
							"ПолеФлажка");
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементОтгрузкаИзERP()
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ОтгрузкаИзERP",
		Элементы.ГруппаДополнительно,
		"Объект.бг_ОтгрузкаИзERP",,,
		"ПолеФлажка");
		
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьСписокВыбораИсточникаЗаказа()
	
	РазрешенныеИсточникиЗаказа = бг_ИсточникиЗаказаРазрешенныеДляИнтерактивногоВыбора();
	
	ЭлементФормы = Элементы.Найти("бг_ИсточникЗаказа");
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним список выбора источника заказа значениями, разрешенными для интерактивного выбора.
	ЭлементФормы.СписокВыбора.Очистить();
	Для Каждого Элемент Из РазрешенныеИсточникиЗаказа Цикл
		ЭлементФормы.СписокВыбора.Добавить(Элемент.Значение);
	КонецЦикла;
	
	// При необходимости дополним список выбора источника заказа значением установленным объекту.
	// Чтобы источника заказа корректно отображался на форме заказа.
	ТекущийИсточникЗаказа = Объект.бг_ИсточникЗаказа;
	Если ЗначениеЗаполнено(ТекущийИсточникЗаказа) Тогда
		ЭлементСписка = ЭлементФормы.СписокВыбора.НайтиПоЗначению(ТекущийИсточникЗаказа);
		Если ЭлементСписка = Неопределено Тогда
			ЭлементФормы.СписокВыбора.Добавить(ТекущийИсточникЗаказа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция бг_ИсточникиЗаказаРазрешенныеДляИнтерактивногоВыбора()
	
	// Интерактивно разрешим устанавливать только те источники, для которых не требуется заявка клиента.
	РазрешенныеИсточникиЗаказа = Новый СписокЗначений;
	РазрешенныеИсточникиЗаказа.Добавить(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Creatio);
	РазрешенныеИсточникиЗаказа.Добавить(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI);
	РазрешенныеИсточникиЗаказа.Добавить(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго);
	
	Возврат РазрешенныеИсточникиЗаказа;
	
КонецФункции

#Область ЗаполнитьСерииПоДатеПроизводства

&НаСервере
Функция бг_ЗаполнитьСерииПоДатеПроизводстваСервер()
	
	Если бг_Номенклатура.ЕстьСтрокиДляЗаполненияСерийПоFIFO(Объект.Товары) Тогда
		бг_Номенклатура.ЗаполнитьСерииПоДатеПроизводстваВТЧТовары(Объект, ПараметрыУказанияСерий);
		
		// ОбщиеМеханизмы.Паллетизация
		бг_УпаковкиЕдиницыИзмерения.РассчитатьПоказателиПаллетизацииВТоварах(ЭтотОбъект);
		бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
		// Конец ОбщиеМеханизмы.Паллетизация
		
		Модифицированность = Истина;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура бг_ДобавитьКомандуЗаполнитьСерииПоДатеПроизводства()
	
	ИмяКоманды = "бг_ЗаполнитьСерииПоДатеПроизводства";
	ЗаголовокКоманды = НСтр("ru = 'Заполнить серии по дате производства';
							|en = 'Fill in series by production date'");
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект, 
		ИмяКоманды,
		Элементы.ТоварыГруппаЗаполнить, 
		ЗаголовокКоманды,
		ИмяКоманды, 
		ИмяКоманды, 
		, 
		ВидКнопкиФормы.КнопкаКоманднойПанели);
		
КонецПроцедуры

#КонецОбласти // Конец ЗаполнитьСерииПоДатеПроизводства

#Область Упаковки

&НаКлиенте
&После("ОбеспечениеУстановитьДействиеСВопросом")
Процедура бг_ОбеспечениеУстановитьДействиеСВопросом(КодДействия)
	
	// ОбщиеМеханизмы.Паллетизация
	бг_РассчитатьКоличествоУпаковокИПаллетизациюВТоварахНаСервере();
	бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыУпаковок()
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект, 
		"бг_ТоварыЗаполнитьУпаковки",
		Элементы.ТоварыГруппаЗаполнить,
		НСтр("ru = 'Заполнить упаковки'"),
		"бг_ТоварыЗаполнитьУпаковки",
		"бг_ТоварыЗаполнитьУпаковки",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);

КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьУпаковки()
	
	Обработка = Обработки.бг_ЗаполнитьУпаковки.Создать();
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ЭтаФорма", ЭтаФорма);
	Обработка.ВыполнитьКоманду("ЗаполнитьУпаковки", Новый Массив, ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура бг_РассчитатьКоличествоУпаковокИПаллетизациюВТоварахНаСервере()

	бг_УпаковкиЕдиницыИзмерения.РассчитатьПоказателиПаллетизацииВТоварах(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура бг_ТоварыУпаковкаПаллетаОбработкаВыбораНаСервере(ВыбраннаяУпаковкаПаллета, ИдентификаторСтрокиТовары) Экспорт

	бг_УпаковкиЕдиницыИзмерения.ТоварыУпаковкаПаллетаОбработкаВыбора(
		ЭтотОбъект,
		ВыбраннаяУпаковкаПаллета,
		ИдентификаторСтрокиТовары);

КонецПроцедуры

// ОбщиеМеханизмы.Паллетизация
&НаСервере
Процедура бг_ЗаполнитьДанныеПаллетизацииТоваровИзФормыНаСервере()

	бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);

КонецПроцедуры
// Конец ОбщиеМеханизмы.Паллетизация

#КонецОбласти // Упаковки

#Область ТранспортнаяИнформация

&НаСервере
Процедура бг_ДобавитьРеквизитыТранспортнойИнформации()

	РеквизитыКДобавлению = Новый Массив;
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ПредставлениеТранспортнойИнформации",
			ОбщегоНазначения.ОписаниеТипаСтрока(500)));
			
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьРеквизитыНаФорму(ЭтаФорма, РеквизитыКДобавлению);

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыТранспортнойИнформации()

	// Группа транспортной информации
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_ТранспортнаяИнформация") Тогда
			
		ГруппаТранспортнаяИнформация = Элементы.Вставить(
			"бг_ТранспортнаяИнформация",
			Тип("ГруппаФормы"),
			Элементы.ГруппаДополнительно,
			Элементы.ГруппаПечать);
			
		ГруппаТранспортнаяИнформация.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаТранспортнаяИнформация.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		ГруппаТранспортнаяИнформация.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаТранспортнаяИнформация.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаТранспортнаяИнформация.ОтображатьЗаголовок = Ложь;
	КонецЕсли;
	
	// Представление транспортной информации
	Если Не бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ЭлементДобавлен(
			ЭтаФорма,
			"бг_ПредставлениеТранспортнойИнформации") Тогда
			
		НадписьПредставлениеТранспортнойИнформации = Элементы.Добавить(
			"бг_ПредставлениеТранспортнойИнформации",
			Тип("ПолеФормы"),
			ГруппаТранспортнаяИнформация);
			
		НадписьПредставлениеТранспортнойИнформации.ПутьКДанным = "бг_ПредставлениеТранспортнойИнформации";
		НадписьПредставлениеТранспортнойИнформации.Вид = ВидПоляФормы.ПолеНадписи;
		НадписьПредставлениеТранспортнойИнформации.Гиперссылка = Истина;
		НадписьПредставлениеТранспортнойИнформации.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		НадписьПредставлениеТранспортнойИнформации.УстановитьДействие(
			"Нажатие",
			"бг_ПредставлениеТранспортнойИнформацииНажатие");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_УстановитьВидимостьТранспортнойИнформации()
	
	Элементы.СпособДоставки.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьТранспортнуюИнформацию()

	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// Получить транспортную информацию.
		ЭтотОбъект["бг_ПредставлениеТранспортнойИнформации"] 
			= бг_ТранспортнаяИнформация.ПредставлениеТранспортнойИнформации(Объект.Ссылка);
			
		Если ПустаяСтрока(ЭтотОбъект["бг_ПредставлениеТранспортнойИнформации"]) Тогда
			
			// Если транспортной информации нет, вывести информацию об ее отсутствии.
			ЭтотОбъект["бг_ПредставлениеТранспортнойИнформации"] 
				= бг_ТранспортнаяИнформация.ПредставлениеПустойТранспортнойИнформации();
				
		КонецЕсли;
		
	Иначе
		
		// Если это новый документ - вывести информацию об отсутствии транспортной информации.
		ЭтотОбъект["бг_ПредставлениеТранспортнойИнформации"] 
			= бг_ТранспортнаяИнформация.ПредставлениеПустойТранспортнойИнформации();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура бг_ПредставлениеТранспортнойИнформацииНажатиеПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
	бг_ОткрытьЗаписьТранспортнойИнформации();

КонецПроцедуры

&НаКлиенте
Процедура бг_ОткрытьЗаписьТранспортнойИнформации()

	КлючЗаписиТранспортнойИнформации = бг_КлючЗаписиТранспортнойИнформации(Объект.Ссылка);		

	ОповещениеПоЗавершении = Новый ОписаниеОповещения(
		"бг_ПредставлениеТранспортнойИнформацииПослеЗакрытияЗаписи",
		ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура("Ключ, ТолькоПросмотрОбъекта", КлючЗаписиТранспортнойИнформации, Истина);
	
	ОткрытьФорму(
		"РегистрСведений.бг_ТранспортнаяИнформация.ФормаЗаписи",
		ПараметрыОткрытия,
		ЭтотОбъект,
		, // Уникальность
		, // Окно
		, // НавигационнаяСсылка
		ОповещениеПоЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция бг_КлючЗаписиТранспортнойИнформации(Заказ)
	
	ЗаказОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеЗаполнения = ЗаказОбъект.бг_ДанныеЗаполненияТранспортнойИнформации();
	Возврат бг_ТранспортнаяИнформация.КлючЗаписиТранспортнойИнформации(Заказ, ДанныеЗаполнения);
	
КонецФункции

&НаКлиенте
Процедура бг_ПредставлениеТранспортнойИнформацииПослеЗакрытияЗаписи(Результат, ДополнительныеПараметры) Экспорт

	бг_ЗаполнитьТранспортнуюИнформацию();

КонецПроцедуры

#КонецОбласти // Конец ТранспортнаяИнформация

#Область Грузополучатель

&НаСервере
Процедура бг_ДобавитьРеквизитыДоставки()

	ДобавляемыеРеквизиты = Новый Массив;

	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(
			"бг_АдресГрузополучателя",
			ОбщегоНазначения.ОписаниеТипаСтрока(500)
			,
			,
			"Адрес грузополучателя"));

	ИзменитьРеквизиты(ДобавляемыеРеквизиты);

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыДоставки()

	бг_Грузополучатель = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_Грузополучатель",
							Элементы.ГруппаШапкаЛево,
							"Объект.Грузополучатель");

	бг_Грузополучатель.УстановитьДействие("ПриИзменении", "бг_ГрузополучательПриИзменении");
	бг_Грузополучатель.АвтоМаксимальнаяШирина = Ложь;
	бг_Грузополучатель.МаксимальнаяШирина = 30;
	
	бг_ПунктНазначения = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ПунктНазначения",
							Элементы.ГруппаШапкаЛево,
							"Объект.бг_ПунктНазначения");
	бг_ПунктНазначения.УстановитьДействие("ПриИзменении", "бг_ПунктНазначенияПриИзменении");
	бг_ПунктНазначения.АвтоМаксимальнаяШирина = Ложь;
	бг_ПунктНазначения.МаксимальнаяШирина 	  = 30;
	
	бг_Лицензия = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_Лицензия",
							Элементы.ГруппаШапкаЛево,
							"Объект.бг_Лицензия");
	бг_Лицензия.УстановитьДействие("НачалоВыбора", "бг_ЛицензияНачалоВыбора");
	бг_Лицензия.АвтоМаксимальнаяШирина = Ложь;
	бг_Лицензия.МаксимальнаяШирина 	   = 30;
	
	бг_АдресГрузополучателя = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
								ЭтотОбъект,
								"бг_АдресГрузополучателя", 
								Элементы.ГруппаОсновное,
								"бг_АдресГрузополучателя",,
								Элементы.ГруппаЭтапыОплатыРасчеты,
								"ПолеНадписи");

	бг_АдресГрузополучателя.АвтоМаксимальнаяШирина = Ложь;
	бг_АдресГрузополучателя.МаксимальнаяШирина = 69;
	бг_АдресГрузополучателя.Гиперссылка = Истина;
	
	бг_ДатаСоздания = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ДатаСоздания", 
							Элементы.ГруппаДополнительно, 
							"Объект.бг_ДатаСоздания");
	бг_ДатаСоздания.АвтоМаксимальнаяШирина = Ложь;
	бг_ДатаСоздания.МаксимальнаяШирина = 15;
	бг_ДатаСоздания.ТолькоПросмотр = Истина;

	бг_ПричинаПереносаДатыОтгрузки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ПричинаПереносаДатыОтгрузки", 
							Элементы.ГруппаДополнительно, 
							"Объект.бг_ПричинаПереносаДатыОтгрузки",,,
							"ПолеНадписи");
	
	бг_АльтернативныйПунктНазначения = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_АльтернативныйПунктНазначения", 
							Элементы.ГруппаДополнительно, 
							"Объект.бг_АльтернативныйПунктНазначения");
							
КонецПроцедуры

&НаСервере
Процедура бг_ГрузополучательПриИзмененииНаСервере()
	
	бг_ЗаполнитьАдресГрузополучателя();
	бг_ЗаполнитьПунктНазначенияИЛицензию();
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьАдресГрузополучателя()

	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда

		ЭтотОбъект.бг_АдресГрузополучателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
												Объект.Грузополучатель, 
												Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
												Дата(1,1,1),
												Истина);

	Иначе

		ЭтотОбъект.бг_АдресГрузополучателя = "";

	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Конец Грузополучатель

#Область Скидки

&НаСервере
Процедура бг_УстановитьВидимостьСкидок()
	
	Если РольДоступна("бг_ПросмотрРучныхСкидокВДокументахПродажи")
		Или РольДоступна("ПолныеПрава") Тогда
			Элементы.ТоварыСуммаАвтоматическойСкидки.Видимость = Истина;
			Элементы.ТоварыПроцентРучнойСкидки.Видимость = Истина;
			Элементы.ТоварыСуммаРучнойСкидки.Видимость = Истина;
	Иначе
			Элементы.ТоварыСуммаАвтоматическойСкидки.Видимость = Ложь;
			Элементы.ТоварыПроцентРучнойСкидки.Видимость = Ложь;
			Элементы.ТоварыСуммаРучнойСкидки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыСкидок()
	
	бг_ТоварыПроцентПримененнойСкидки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
											ЭтотОбъект,
											"бг_ТоварыПроцентПримененнойСкидки", 
											Элементы.Товары, 
											"Объект.Товары.бг_ПроцентПримененнойСкидки", 
											, 
											Элементы.ТоварыСумма);
											
	бг_ТоварыПроцентПримененнойСкидки.ТолькоПросмотр = Истина;
	
	бг_ТоварыСуммаПримененнойСкидки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
										ЭтотОбъект,
										"бг_ТоварыСуммаПримененнойСкидки", 
										Элементы.Товары, 
										"Объект.Товары.бг_СуммаПримененнойСкидки", 
										, 
										Элементы.бг_ТоварыПроцентПримененнойСкидки);
										
	бг_ТоварыСуммаПримененнойСкидки.ТолькоПросмотр = Истина;
	
	бг_ТоварыЦенаСоСкидкой = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
								ЭтотОбъект,
								"бг_ТоварыЦенаСоСкидкой", 
								Элементы.Товары, 
								"Объект.Товары.бг_ЦенаСоСкидкой", 
								, 
								Элементы.бг_ТоварыСуммаПримененнойСкидки);
	
	бг_ТоварыЦенаСоСкидкой.ТолькоПросмотр = Истина;
	
	бг_КодыСтрокБюджета = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_КодыСтрокБюджета", 
							Элементы.ГруппаДополнительно, 
							"Объект.бг_КодыСтрокБюджета",
							, 
							,
							"ПолеНадписи");	
	
КонецПроцедуры

&НаКлиенте
Процедура бг_РедактироватьКодыСтрокБюджетаЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бг_РассчитатьСкидкиНаценкиПоКодуСтрокБюджета(ВозвращенноеЗначение);
	 	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)';
			|en = 'Discounts (markups)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны';
			|en = 'Discount (markups) are calculated'"),
		БиблиотекаКартинок.Информация32); 	
	
КонецПроцедуры

&НаСервере
Процедура бг_РассчитатьСкидкиНаценкиПоКодуСтрокБюджета(ВозвращенноеЗначение)
	
	Объект.бг_КодыСтрокБюджета = бг_РасчетСкидок.КодыСтрокБюджетаПоСкидкам(ВозвращенноеЗначение);

	УправляемыеСкидки = ВозвращенноеЗначение;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
КонецПроцедуры

 &НаСервере
Процедура бг_ДобавитьКомандыПоСкидкам()

	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект,
		"бг_РедактироватьКодыСтрокБюджета",
		Элементы.ГруппаЦеныСкидки,
		НСтр("ru = 'Редактировать коды строк бюджета (Чикаго)'"),
		"бг_РедактироватьКодыСтрокБюджета",
		"бг_РедактироватьКодыСтрокБюджета",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект,
		"бг_НастройкаРаспределенияСуммовойСкидки",
		Элементы.ГруппаЦеныСкидки,
		НСтр("ru = 'Настройка распределения суммовой скидки'"),
		"бг_НастройкаРаспределенияСуммовойСкидки",
		"бг_НастройкаРаспределенияСуммовойСкидки",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);

	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект,
		"бг_ЗаполнитьДоступныеСкидки",
		Элементы.ГруппаЦеныСкидки,
		НСтр("ru = 'Заполнить доступные скидки'"),
		"бг_ЗаполнитьДоступныеСкидки",
		"бг_ЗаполнитьДоступныеСкидки",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);

КонецПроцедуры

// Вызывает редактирование открытых в данной форму объектов в сторонней форме
// Параметры:
//    ИмяФормы - строка - путь открываемой формы (по стандарту она должна иметь реквизит 'объект' объектного типа)
//  Реквизит - строка - имя реквизита передаваемого для редактирования
//    ПараметрыФормы - структура - параметры которые будут переданы в открываемую форму
//    ПараметрыОбратногоВызова - структура - параметры, которые получит "бг_ОбработкаРезультатовРедактированияОбъектаВСтороннейФорме" в одноименный параметр
&НаКлиенте
Процедура бг_ВызовРедактированияВСтороннейФорме(ИмяФормы, Реквизит = "Объект", ПараметрыФормы = Неопределено, ПараметрыОбратногоВызова = Неопределено)
	
    Если ПараметрыОбратногоВызова = Неопределено Тогда
        ПараметрыОбратногоВызова = Новый Структура;
    КонецЕсли; 
    ПараметрыОбратногоВызова.Вставить("Реквизит", Реквизит); // Добавляем информацию о редактируемом объекте(в каком реквизите он хранится) 
    
    ОповещениеОбратногоВызова = 
        Новый ОписаниеОповещения("бг_ОбработкаРезультатовРедактированияОбъектаВСтороннейФорме", ЭтаФорма, ПараметрыОбратногоВызова);
        
    Если ПараметрыФормы = Неопределено Тогда
        ПараметрыФормы = Новый Структура;
    КонецЕсли;
    ПараметрыФормы.Вставить("Объект", Вычислить(Реквизит)); // добавляем передаваемый реквизит
    
    ОткрытьФорму( // открываем форму для редактирования (в модуль формы нужно внедрить корреспондирующий код)
        ИмяФормы,
         ПараметрыФормы,
        ЭтаФорма,,,,
        ОповещениеОбратногоВызова, 
        РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
    );
	
КонецПроцедуры

&НаСервере
Функция бг_ПараметрыЗапросаСкидокНаценок()
	
	Возврат СкидкиНаценкиСервер.бг_ПараметрыЗапросаСкидокНаценок(Объект);
   
КонецФункции

&НаСервере
Функция бг_СтруктураДоступныхСкидок()
	
	ДоступныеСкидки = Объект.бг_ДоступныеСкидки.Выгрузить();
	Объект.бг_ДоступныеСкидки.Очистить();
	
	СтруктураПараметры = СкидкиНаценкиЗаполнениеСервер.НовыйПараметрыРассчитать();
	СтруктураПараметры.ПрименятьКОбъекту				 = Ложь;
	СтруктураПараметры.ТолькоПредварительныйРасчет		 = Ложь;
	СтруктураПараметры.ВосстанавливатьУправляемыеСкидки	 = Истина;
	//СтруктураПараметры.УправляемыеСкидки				 = УправляемыеСкидки;
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);

	Объект.бг_ДоступныеСкидки.Загрузить(ДоступныеСкидки);
	
	МассивСкидок = Новый Массив; // см. РекурсивныйОбходСкидок.МассивСкидок
	бг_РекурсивныйОбходДереваСкидок(ПримененныеСкидки.ДеревоСкидок, МассивСкидок);
	
	СтруктураДоступныхСкидок = Новый Структура;
	СтруктураДоступныхСкидок.Вставить("ДоступныеСкидки", ДоступныеСкидки.ВыгрузитьКолонку("СкидкаНаценка"));
	СтруктураДоступныхСкидок.Вставить("ВсеСкидки", МассивСкидок);
	
	Возврат СтруктураДоступныхСкидок;
   
КонецФункции

&НаСервере
Процедура бг_РекурсивныйОбходДереваСкидок(ДеревоСкидок, МассивСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			бг_РекурсивныйОбходДереваСкидок(СтрокаДерева, МассивСкидок);
			
		Иначе
			
			МассивСкидок.Добавить(СтрокаДерева.Ссылка);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Конец Скидки

#Область Предзаказ

&НаСервере
Процедура бг_ДобавитьЭлементГУИДПредзаказаПокупателя()

	бг_ГУИДЗаказаСПортала = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
								ЭтотОбъект,
								"бг_ГУИДЗаказаСПортала", 
								Элементы.ГруппаДополнительно, 
								"Объект.бг_ГУИДЗаказаСПортала");
	
	бг_ГУИДЗаказаСПортала.Вид = ВидПоляФормы.ПолеНадписи;

КонецПроцедуры

#КонецОбласти //Предзаказ

#Область БлокировкаРедактированияДокумента

&НаСервере
Процедура бг_УстановитьВозможностьРедактированияДокумента()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РедактированиеЗапрещено = Ложь;
	
	Если Документы.ЗаказКлиента.бг_ЗаказПереданНаСборку(Объект.Ссылка)
		И Не Документы.ЗаказКлиента.бг_РазрешеноИзменениеЗаказовПереданныхНаСборку() Тогда
		РедактированиеЗапрещено = Истина;	
	КонецЕсли;
	
	Если Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS
		И Не Документы.ЗаказКлиента.бг_РазрешеноИзменениеЗаказовHybris() Тогда
		РедактированиеЗапрещено = Истина;	
	КонецЕсли;
	
	Элементы.ГруппаСтатусПриоритет.ТолькоПросмотр = РедактированиеЗапрещено;
	Элементы.ГруппаШапка.ТолькоПросмотр = РедактированиеЗапрещено;
	Элементы.ГруппаЭтапыОплатыРасчеты.Доступность = Не РедактированиеЗапрещено;
	Элементы.ГруппаТовары.ТолькоПросмотр = РедактированиеЗапрещено;
	Элементы.Товары.КоманднаяПанель.Доступность = Не РедактированиеЗапрещено;
	Элементы.СтраницаДоставка.ТолькоПросмотр = РедактированиеЗапрещено;
	Элементы.ГруппаДополнительно.ТолькоПросмотр = РедактированиеЗапрещено;
	Элементы.ГруппаПечать.Доступность = Не РедактированиеЗапрещено;
	
	Элементы.бг_КорректировкаОтсрочкиПлатежа.Доступность = 
		Пользователи.РолиДоступны("бг_ИзменениеОтсрочекПлатежейПокупателям");
	
	бг_УстановитьДоступностьРеквизитовДляЗаказаРозничногоПокупателя();
	
КонецПроцедуры

#КонецОбласти // Конец БлокировкаРедактированияДокумента

#Область EDI

&НаСервере
Процедура бг_ДобавитьЭлементыEDI()
	
	// Шапка
	бг_СтраницаEDI = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьСтраницуНаФорму(
		ЭтотОбъект,
		"бг_СтраницаEDI",
		НСтр("ru = 'EDI'"),
		"ГруппаСтраницы");
	
	бг_ГруппаШапкаEDI = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"бг_ГруппаШапкаEDI",
		бг_СтраницаEDI,
		ВидГруппыФормы.ОбычнаяГруппа);
	бг_ГруппаШапкаEDI.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	бг_ГруппаШапкаEDI.ТолькоПросмотр = Истина;
	
	бг_EDIGLNГрузополучателя = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_EDIGLNГрузополучателя",
		бг_ГруппаШапкаEDI,
		"Объект.бг_EDIGLNГрузополучателя");
	
	бг_EDIGLNПокупателя = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_EDIGLNПокупателя",
		бг_ГруппаШапкаEDI,
		"Объект.бг_EDIGLNПокупателя");
	
	бг_EDIIDOrder = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_EDIIDOrder",
		бг_ГруппаШапкаEDI,
		"Объект.бг_EDIIDOrder");
	
	бг_EDIДатаЗаказа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_EDIДатаЗаказа",
		бг_ГруппаШапкаEDI,
		"Объект.бг_EDIДатаЗаказа");
	
	бг_EDIНомерЗаказа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_EDIНомерЗаказа",
		бг_ГруппаШапкаEDI,
		"Объект.бг_EDIНомерЗаказа");
	
	// Табличная часть Товары
	бг_ЦенаEDI 		= бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"бг_ЦенаEDI",
						Элементы.Товары,
						"Объект.Товары.бг_ЦенаEDI");
	бг_РазницаСEDI 	= бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"бг_РазницаСEDI",
						Элементы.Товары,
						"Объект.Товары.бг_РазницаСEDI");

	Если Объект.бг_ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI Тогда
		бг_ЦенаEDI.Заголовок = "Конечная цена";
	КонецЕсли;
	Если Не Пользователи.РолиДоступны("бг_РедактированиеКонечнойЦеныВЗаказеКлиента")
		Или Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI Тогда
		бг_ЦенаEDI.ТолькоПросмотр = Истина;
	КонецЕсли;
	бг_РазницаСEDI.ТолькоПросмотр = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаявкаКлиента

&НаСервере
Процедура бг_ДобавитьЭлементыЗаявкиКлиента()
	
	бг_ИсточникЗаказа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ИсточникЗаказа", 
							Элементы.ГруппаДополнительно, 
							"Объект.бг_ИсточникЗаказа");
							
	бг_ЗаполнитьСписокВыбораИсточникаЗаказа();						
	бг_ИсточникЗаказа.РежимВыбораИзСписка = Истина;
	бг_ИсточникЗаказа.АвтоМаксимальнаяШирина = Ложь;
	бг_ИсточникЗаказа.МаксимальнаяШирина = 15;
	Если Не Пользователи.РолиДоступны("бг_РедактированиеИсточникаЗаказовКлиентов") 
		Или бг_ИспользуютсяЗаявкиКлиентов() Тогда
		бг_ИсточникЗаказа.ТолькоПросмотр = Истина;
	КонецЕсли;						
							
	бг_ЗаявкаКлиента = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ЗаявкаКлиента", 
							Элементы.ГруппаДополнительно, 
							"Объект.бг_ЗаявкаКлиента");
	бг_ЗаявкаКлиента.АвтоМаксимальнаяШирина = Ложь;
	бг_ЗаявкаКлиента.МаксимальнаяШирина = 30;
	бг_ЗаявкаКлиента.ТолькоПросмотр = Истина;
	
	бг_КодСтрокиЗаявки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"Товарыбг_КодСтрокиЗаявки",
						Элементы.Товары,
						"Объект.Товары.бг_КодСтрокиЗаявки");
	
	бг_КодПозицииПредзаказаКлиента = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"Товарыбг_КодПозицииПредзаказаКлиента",
						Элементы.Товары,
						"Объект.Товары.бг_КодПозицииПредзаказаКлиента");
						
	бг_НомерПредзаказаКлиента = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"Товарыбг_НомерПредзаказаКлиента",
						Элементы.Товары,
						"Объект.Товары.бг_НомерПредзаказаКлиента");
КонецПроцедуры	

&НаСервере
Процедура бг_УстановитьВидимостьЭлементовЗаявкиКлиента()
	
	ИспользуютсяЗаявкиКлиентов = бг_ИспользуютсяЗаявкиКлиентов();
	Элементы.бг_ЗаявкаКлиента.Видимость = ИспользуютсяЗаявкиКлиентов;
	Элементы.Товарыбг_КодСтрокиЗаявки.Видимость = ИспользуютсяЗаявкиКлиентов;
	
	ЭтоКонсолидированныйЗаказ = 
		(Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED);
	Элементы.Товарыбг_КодПозицииПредзаказаКлиента.Видимость = ЭтоКонсолидированныйЗаказ;
	Элементы.Товарыбг_НомерПредзаказаКлиента.Видимость = ЭтоКонсолидированныйЗаказ;
	
КонецПроцедуры	

&НаСервере
Функция бг_ИспользуютсяЗаявкиКлиентов()

	Возврат бг_ЗаказыКлиентов.ЗаказКлиентаФормируетсяПоЗаявкеКлиента(Объект.бг_ИсточникЗаказа);
	
КонецФункции	

#КонецОбласти

#Область Резервирование

&НаСервере
Процедура бг_ДобавитьЭлементыРезервирования()
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ДолгосрочныйРезерв",
		Элементы.ГруппаШапкаПраво,
		"Объект.бг_ДолгосрочныйРезерв",
		, // Тип поля, строка
		, // Элемент перед которым будет вставлен создаваемый элемент
		"ПолеФлажка");
	
	ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
	ЭлементФормы.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Лево;
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_КаналПродаж",
		Элементы.ГруппаШапкаПраво,
		"Объект.бг_КаналПродаж",
		, // Тип поля, строка
		, // Элемент перед которым будет вставлен создаваемый элемент
		);
	ЭлементФормы.АвтоМаксимальнаяШирина = Ложь;
	ЭлементФормы.МаксимальнаяШирина = 28;
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"Товарыбг_ЗаказКлиентаИсточникОбеспечения",
						Элементы.Товары,
						"Объект.Товары.бг_ЗаказКлиентаИсточникОбеспечения");

	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"Товарыбг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения",
						Элементы.Товары,
						"Объект.Товары.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения");
	ЭлементФормы.Ширина = 10;
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"Товарыбг_ЗаказПоставщикуИсточникОбеспечения",
						Элементы.Товары,
						"Объект.Товары.бг_ЗаказПоставщикуИсточникОбеспечения");
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
						ЭтотОбъект,
						"Товарыбг_ПриходныйОрдерОбособленногоОбеспечения",
						Элементы.Товары,
						"Объект.Товары.бг_ПриходныйОрдерОбособленногоОбеспечения");
	
КонецПроцедуры	

&НаСервере
Процедура бг_УстановитьВидимостьЭлементовРезервирования()
	
	РазрешеноОбеспечениеИзДолгосрочныхРезервов = бг_РазрешеноОбеспечениеИзДолгосрочныхРезервов();
	
	Элементы.бг_ДолгосрочныйРезерв.Видимость = Объект.бг_ДолгосрочныйРезерв;
	Элементы.бг_КаналПродаж.Видимость = Объект.бг_ДолгосрочныйРезерв;
	Элементы.Товарыбг_ЗаказКлиентаИсточникОбеспечения.Видимость = РазрешеноОбеспечениеИзДолгосрочныхРезервов;
	Элементы.Товарыбг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения.Видимость = РазрешеноОбеспечениеИзДолгосрочныхРезервов;
	Элементы.Товарыбг_ЗаказПоставщикуИсточникОбеспечения.Видимость = РазрешеноОбеспечениеИзДолгосрочныхРезервов;
	
	// Удалим из команд обеспечения вариант "Резервировать по мере поступления", так как его не используем.
	Элементы.ТоварыРезервироватьПоМереПоступления.Видимость = Ложь;
	
КонецПроцедуры	

&НаСервере
Функция бг_РазрешеноОбеспечениеИзДолгосрочныхРезервов()

	Возврат Объект.бг_ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS;
	
КонецФункции	

#КонецОбласти

#Область КредитныеЛимиты

&НаСервере
Процедура бг_ДобавитьРеквизитыКредитныхЛимитов()

	РеквизитыКДобавлению = Новый Массив;
	
	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_КредитныйЛимит",
			ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)));
			
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьРеквизитыНаФорму(ЭтаФорма, РеквизитыКДобавлению);

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыКредитныхЛимитов()
	
    бг_КредитныйЛимит = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
																							ЭтотОбъект,
																							"КредитныйЛимит", 
																							Элементы.ГруппаИтого, 
																							"бг_КредитныйЛимит");
								
	бг_КредитныйЛимит.Вид = ВидПоляФормы.ПолеНадписи;
	бг_КредитныйЛимит.Заголовок = НСтр("ru = 'Кредитный лимит'");
		
КонецПроцедуры	

&НаСервере
Процедура бг_ЗаполнитьКредитныеЛимиты()
	
	КредитныйЛимит = Документы.ЗаказКлиента.бг_КредитныйЛимит(Объект.Контрагент, 
																Объект.Договор, 
																Объект.бг_ПунктНазначения,
																Объект.Организация);

	Если КредитныйЛимит <> Неопределено Тогда
		 ЭтотОбъект.бг_КредитныйЛимит = КредитныйЛимит;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область ОтсрочкаПлатежа

&НаСервере
Процедура бг_ДобавитьЭлементыОтсрочкиПлатежа()
	
	
	ГруппаДополнительнаяИнформацияПоОплатам = Элементы.Добавить(
											"бг_ДополнительнаяИнформациПоОплатам",
											Тип("ГруппаФормы"),
											Элементы.ГруппаЭтапыОплатыРасчеты);
    ГруппаДополнительнаяИнформацияПоОплатам.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаДополнительнаяИнформацияПоОплатам.ОтображатьЗаголовок = Ложь;
	ГруппаДополнительнаяИнформацияПоОплатам.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	
	бг_КоличествоДнейОтсрочки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_КоличествоДнейОтсрочки", 
							ГруппаДополнительнаяИнформацияПоОплатам, 
							"Объект.бг_КоличествоДнейОтсрочки",,,
							"ПолеНадписи");
							
	бг_КоличествоДнейОтсрочки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
							
	бг_ДатаОплатыСУчетомОтсрочки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ДатаОплатыСУчетомОтсрочки", 
							ГруппаДополнительнаяИнформацияПоОплатам, 
							"Объект.бг_ДатаОплатыСУчетомОтсрочки",,,
							"ПолеНадписи");
							
	бг_ДатаОплатыСУчетомОтсрочки.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
	
	бг_КорректировкаОтсрочкиПлатежа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_КорректировкаОтсрочкиПлатежа", 
							ГруппаДополнительнаяИнформацияПоОплатам, 
							"Объект.бг_КорректировкаОтсрочкиПлатежа",,,
							"ПолеВвода");
							
	бг_КорректировкаОтсрочкиПлатежа = ГоризонтальноеПоложениеЭлемента.Лево;
	
КонецПроцедуры

#КонецОбласти	

#Область ЗаказРозничногоПокупателя

&НаСервере
Процедура бг_ДобавитьРеквизитыРозничногоПокупателя()

	РеквизитыКДобавлению = Новый Массив;

	РеквизитыКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ОбновитьСкидкиВЗаказеМагазина",
			Новый ОписаниеТипов("Булево")));

	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьРеквизитыНаФорму(ЭтаФорма, РеквизитыКДобавлению);

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыРозничногоПокупателя()
	
	бг_ГруппаРозничныйПокупатель = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
									ЭтотОбъект,
									"бг_ГруппаРозничныйПокупатель",
									Элементы.ГруппаДополнительныеРеквизиты);
	
	бг_ГруппаРозничныйПокупатель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	бг_ГруппаРозничныйПокупатель.Поведение = ПоведениеОбычнойГруппы.Свертываемая;
	бг_ГруппаРозничныйПокупатель.Заголовок = НСтр("ru = 'Розничный покупатель'");
	
	бг_СоздатьЗаказМагазина = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
									ЭтотОбъект, 
									"бг_СоздатьЗаказМагазина",
									Элементы.ФормаКоманднаяПанель,
									НСтр("ru = 'Создать заказ магазина'"),
									"бг_СоздатьЗаказМагазина",
									"бг_СоздатьЗаказМагазина",
									,
									ВидКнопкиФормы.КнопкаКоманднойПанели);
	
	бг_ЗаказРозничногоПокупателя = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
									ЭтотОбъект,
									"бг_ЗаказРозничногоПокупателя",
									Элементы.бг_ГруппаРозничныйПокупатель,
									"Объект.бг_ЗаказРозничногоПокупателя");
	
	бг_РозничныйПокупатель = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
								ЭтотОбъект,
								"бг_РозничныйПокупатель",
								Элементы.бг_ГруппаРозничныйПокупатель,
								"Объект.бг_РозничныйПокупатель");
	
	бг_ДоговорРозничногоПокупателя = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
										ЭтотОбъект,
										"бг_ДоговорРозничногоПокупателя",
										Элементы.бг_ГруппаРозничныйПокупатель,
										"Объект.бг_ДоговорРозничногоПокупателя");
										
	бг_ВариантОплаты = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ВариантОплаты",
							Элементы.бг_ГруппаРозничныйПокупатель,
							"Объект.бг_ВариантОплаты");
										
	бг_Магазин = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
					ЭтотОбъект,
					"бг_Магазин",
					Элементы.бг_ГруппаРозничныйПокупатель,
					"Объект.бг_Магазин");
	
КонецПроцедуры

&НаКлиенте
Процедура бг_СоздатьЗаказМагазина(Команда)
	
	бг_СоздатьЗаказМагазинаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура бг_СоздатьЗаказМагазинаНаСервере()
	
	Если Не ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
		ВызватьИсключение НСтр("ru = 'Документ должен быть записан'");
		Возврат;
	КонецЕсли;
	
	Результат = бг_ЗаказыКлиентов.СоздатьЗаказМагазина(Объект.Ссылка);
	Если Результат.ОписаниеОшибки <> "" Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Результат.ОписаниеОшибки,
			Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаказаМагазина = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат.ЗаказМагазина, "Дата, Номер");
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Создан заказ магазина номер %1 дата %2'"), 
				РеквизитыЗаказаМагазина.Номер, РеквизитыЗаказаМагазина.Дата),
			Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("РассчитатьСкидкиНаценкиКлиент")
Процедура бг_РассчитатьСкидкиНаценкиКлиент()

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
#Вставка
	Если бг_ВыводитьОтчетОСравненииСкидок() Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
		ДанныеДляФормированияОтчета = бг_ПодготовитьДанныеДляОтчетаПоСкидкам();
		ОписаниеОповещения = Новый ОписаниеОповещения("бг_ПослеВыводаОтчета", ЭтаФорма);
		ОткрытьФорму("Документ.ЗаказКлиента.Форма.бг_ФормаРасчетСкидокРозничногоПокупателя", 
			Новый Структура("ДанныеДляФормированияОтчета", ДанныеДляФормированияОтчета), 
				Этаформа, 
				, 
				, 
				, 
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
#КонецВставки

	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Скидки (наценки)';
	|en = 'Discounts (markups)'"),
	,
	НСтр("ru = 'Скидки (наценки) рассчитаны';
	|en = 'Discount (markups) are calculated'"),
	БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаСервере
Функция бг_ВыводитьОтчетОСравненииСкидок()

	Результат = Ложь;

	Если бг_ЗаказыКлиентов.ЭтоЗаказРозничногоПокупателя(Объект.Ссылка)
		И бг_ЗаказыКлиентов.НайтиЗаказМагазина(Объект.Ссылка) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервере
Функция бг_ПодготовитьДанныеДляОтчетаПоСкидкам()

	ЗаказОбъект = Объект.Ссылка.Скопировать();
	ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
	СкидкиНаценкиЗаполнениеСервер.ПрименитьРезультатРасчета(ЗаказОбъект, ПримененныеСкидки);

	ТоварыДоПересчета = Объект.Товары.Выгрузить();
	ТоварыПослеПересчета = ЗаказОбъект.Товары.Выгрузить();

	ЗаказМагазина = бг_ЗаказыКлиентов.НайтиЗаказМагазина(Объект.Ссылка);
	ТоварыЗаказаМагазина = ЗаказМагазина.Товары.Выгрузить();

	ДанныеДляПодготовкиОтчета = Новый Структура;
	ДанныеДляПодготовкиОтчета.Вставить("Ссылка", Объект.Ссылка);
	ДанныеДляПодготовкиОтчета.Вставить("ТоварыДоПересчета", ТоварыДоПересчета);
	ДанныеДляПодготовкиОтчета.Вставить("ТоварыПослеПересчета", ТоварыПослеПересчета);
	ДанныеДляПодготовкиОтчета.Вставить("ТоварыЗаказаМагазина", ТоварыЗаказаМагазина);

	ПодготовленныеДанные = бг_ЗаказыКлиентов.ПодготовитьДанныеДляОтчетаПоСкидкам(ДанныеДляПодготовкиОтчета);

	Возврат ПоместитьВоВременноеХранилище(ПодготовленныеДанные, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура бг_ПослеВыводаОтчета(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		ЭтотОбъект.бг_ОбновитьСкидкиВЗаказеМагазина = Ложь;
		Возврат;
	ИначеЕсли РезультатЗакрытия.Свойство("ОбновнитьСкидкиВЗаказе")
		И РезультатЗакрытия.ОбновнитьСкидкиВЗаказе Тогда

		СтруктураПараметры = Новый Структура;

		СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);

		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, Истина);

		ЭтотОбъект.бг_ОбновитьСкидкиВЗаказеМагазина = РезультатЗакрытия.ОбновитьСкидкиВЗаказеМагазина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_УстановитьДоступностьРеквизитовДляЗаказаРозничногоПокупателя()
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	РедактированиеРазрешено = Пользователи.РолиДоступны("бг_РедактированиеЗаказовМагазина");
	ДоступныеЭлементы = Новый Массив;
	
	Если бг_ЗаказыКлиентов.ЭтоЗаказРозничногоПокупателя(Объект.Ссылка) 
		И бг_ЗаказыКлиентов.НайтиЗаказМагазина(Объект.Ссылка) <> Неопределено Тогда
		Если РедактированиеРазрешено Тогда
			ДоступныеЭлементы.Добавить(Элементы.ФормаКоманднаяПанель);
			ДоступныеЭлементы.Добавить(Элементы.Комментарий);
			ДоступныеЭлементы.Добавить(Элементы.бг_ВариантОплаты);
			ДоступныеЭлементы.Добавить(Элементы.ТоварыРазбитьСтроку);
		КонецЕсли;
		бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ИзменитьДоступностьЭлементовФормыРекурсивно(Этаформа, ДоступныеЭлементы);
	КонецЕсли;
	
	Если бг_ЗаказыКлиентов.ЭтоЗаказМагазина(Объект.Ссылка) Тогда
		Если РедактированиеРазрешено Тогда
			ДоступныеЭлементы.Добавить(Элементы.ФормаКоманднаяПанель);
			ДоступныеЭлементы.Добавить(Элементы.ТоварыРазбитьСтроку);
		КонецЕсли;
		бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ИзменитьДоступностьЭлементовФормыРекурсивно(Этаформа, ДоступныеЭлементы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АвтоматическоеЗаполнениеОбеспеченияЗаказаКлиента

 &НаСервере
Процедура бг_ДобавитьКомандуАктуализироватьОбеспечение()
	
	КнопкаОбеспечитьСоСклада = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект,
		"бг_АктуализироватьОбеспечение",
		Элементы.ГруппаОбеспечение,
		НСтр("ru = 'Актуализировать обеспечение'"),
		"бг_АктуализироватьОбеспечение",
		"бг_АктуализироватьОбеспечение",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели);
		
	КнопкаОбеспечитьСоСклада.Доступность = бг_ВозможноЗаполнениеОбеспеченияИзФормыДокумента();	

КонецПроцедуры

// Обработчик добавленной команды формы "бг_АктуализироватьОбеспечение"
//
&НаКлиенте
Процедура бг_АктуализироватьОбеспечение(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("бг_АктуализироватьОбеспечениеЗавершение", ЭтотОбъект);
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		ОчиститьСообщения();
		Записать(ПараметрыЗаписи);
		Возврат;
	КонецЕсли;
	
	бг_АктуализироватьОбеспечениеЗавершение();
	
КонецПроцедуры

&НаСервере
Функция бг_ВозможноЗаполнениеОбеспеченияИзФормыДокумента()
	
	Если Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		Или Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS
		Или Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Запускает длительную операцию актуализации обеспечения и подключает обработчик ожидания завершения.
//
// Параметры:
//  Результат               - Булево, Неопределено - результат проведения документа.  
//  ДополнительныеПараметры - Произвольный - Значение любого типа, которое передано при вызове. 
//
&НаКлиенте
Процедура бг_АктуализироватьОбеспечениеЗавершение(Результат = Неопределено, 
												ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	ПараметрыОжидания = бг_ЗаказыКлиентовКлиент.ПараметрыОжиданияАктуализацииОбеспечения(ЭтотОбъект);
	ПараметрыОперации = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ДлительнаяОперация = бг_АктуализироватьОбеспечениеВФоне(ПараметрыОперации);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("бг_ОбработатьРезультатАктуализацииОбеспечения", ЭтотОбъект),
		ПараметрыОжидания);
	
КонецПроцедуры

// Запускает длительную операцию актуализации обеспечения на сервере.
//
&НаСервере
Функция бг_АктуализироватьОбеспечениеВФоне(Знач ПараметрыОперации) 
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.Вставить("НаименованиеФоновогоЗадания", 
									НСтр("ru = 'Актуализация обеспечения заказов клиентов'"));
	ПараметрыВыполнения.Вставить("КлючФоновогоЗадания", ПараметрыОперации.УникальныйИдентификатор);
	
	ЗаказыКлиентов = Новый Массив;
	Если бг_ВозможноЗаполнениеОбеспеченияИзФормыДокумента() Тогда
		ЗаказыКлиентов.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(
				ПараметрыВыполнения,
				"бг_ЗаказыКлиентов.АктуализироватьОбеспечениеЗаказовКлиентовВФоне",
				ЗаказыКлиентов);
	
КонецФункции

// Обработка результата длительной операции актуализации обеспечения.
//
// Параметры:
//  Результат               - Структура, Неопределено - результат выполнения длительной операции.  
//  ДополнительныеПараметры - Произвольный - Значение любого типа, которое передано при вызове. 
//
&НаКлиенте
Процедура бг_ОбработатьРезультатАктуализацииОбеспечения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	бг_ОбработатьРезультатАктуализацииОбеспеченияНаСервере(Результат);
	
	Если Результат.Статус = "Выполнено" Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Обеспечение';
				|en = 'Обеспечение'"), ,
			НСтр("ru = 'Актуализация обеспечения выполнена';
				|en = 'Актуализация обеспечения выполнена'"),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Обработка результата длительной операции актуализации обеспечения на сервере.
//
&НаСервере
Процедура бг_ОбработатьРезультатАктуализацииОбеспеченияНаСервере(Результат)
	
	Прочитать();
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого Сообщение Из Результат.Сообщения Цикл
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
&ИзменениеИКонтроль("ОбработкаВыбораПодборНаСервере")
Процедура бг_ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
#Вставка
	ЕстьУпаковкаПаллета = ТаблицаТоваров.Колонки.Найти("бг_УпаковкаПаллета") <> Неопределено;	
#КонецВставки
	
	НачалоДня = НачалоДня(ТекущаяДатаСеанса());
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара,
			"НоменклатураНабора,ХарактеристикаНабора,Номенклатура,Характеристика,Упаковка,Склад,ДатаОтгрузки,ВидЦены,
			|Цена,КоличествоУпаковок,СрокПоставки,ПроцентРучнойСкидки,ВариантОбеспечения,Обособленно,Серия");
#Вставка
		Если ЕстьУпаковкаПаллета Тогда
			ТекущаяСтрока.бг_УпаковкаПаллета = СтрокаТовара.бг_УпаковкаПаллета;	
		КонецЕсли;
#КонецВставки
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект, Истина));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "СкладОбязателен,ДатаОтгрузкиОбязательна");
		СтруктураДействий.Вставить("ЗаполнитьПодразделениеВСтрокеТЧ", Новый Структура("Подразделение", Объект.Подразделение));
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
			ДобавитьДействияОбеспеченияНаСервере(СтруктураДействий, "ВариантОбеспечения");
		КонецЕсли;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ТекущаяСтрока.ДатаОтгрузки = ОбеспечениеВДокументахСервер.ДатаОтгрузкиОбработкаВыбораПодбор(
			СтрокаТовара.ДатаОтгрузки,
			ТекущаяСтрока.ВариантОбеспечения,
			НачалоДня);
		
#Вставка
        Если ЕстьУпаковкаПаллета Тогда
			ИдентификаторСтрокиТовары = ТекущаяСтрока.ПолучитьИдентификатор();
			бг_ТоварыУпаковкаПаллетаОбработкаВыбораНаСервере(ТекущаяСтрока.бг_УпаковкаПаллета, ИдентификаторСтрокиТовары);
		КонецЕсли;	
#КонецВставки
	КонецЦикла;
	ОбеспечениеВДокументахСервер.АктуализироватьДатуОтгрузкиОднойДатой(
		Объект.НеОтгружатьЧастями,
		Объект.ДатаОтгрузки,
		Объект.Товары,
		"ДатаОтгрузки");
	ОбновитьКолонкуДоступноСервер();
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	СкладыСервер.ПриИзмененииСкладаВТабличнойЧасти(Объект.Товары, ТаблицаСкладов, СкладГруппа);
	ВсегоСкладов = ТаблицаСкладов.Количество();
	СкладыКлиентСервер.ОбновитьКартинкуГруппыСкладов(НадписьНесколькоСкладов, Элементы.КартинкаНесколькоСкладов, ВсегоСкладов);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер")
Функция бг_ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)

	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;

	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");

	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
#Вставка
	// требуется чтобы цены брались на дату отгрузки
	Если Объект.НеОтгружатьЧастями И ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
		ПараметрыЗаполнения.Вставить("Дата", Объект.ДатаОтгрузки);
	КонецЕсли;
#КонецВставки
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");

	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
	Объект.Товары,
	МассивСтрок, // Массив строк или структура отбора
	ПараметрыЗаполнения,
	СтруктураДействий);

	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	Возврат ЦеныРассчитаны;

КонецФункции

#КонецОбласти

#КонецОбласти
