#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументОснование = Параметры.ДокументОснование;
	КодыСтрокБюджета = Параметры.КодыСтрокБюджета;
	ЗаполнитьСкидкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПодвал();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоСкидокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Элементы можно добавлять только для элементов верхнего уровня
	Если Элемент.ТекущиеДанные = Неопределено
		И Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСкидокПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
		Или ТекущиеДанные.СуммаСкидкиНаценкиДо <> 0 // чтобы не удалили информацию о старых скидках
		Или ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 // чтобы всегда оставалась одна подчиненная строка
		Тогда
		Отказ = Истина;
	Иначе
		ТекущиеДанные.ПроцентСкидки = 0;
		РассчитатьСуммуСкидки(ТекущиеДанные);	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСкидокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СтрокаТаблицыРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
	Если Не ОтменаРедактирования
		И Элемент.ТекущийЭлемент.Имя = "ДеревоСкидокСуммаСкидкиНаценки"
		И СтрокаТаблицыРодитель.Количество <> 0 Тогда
		
		СкидкаНаЕдиницу = Элемент.ТекущиеДанные.СуммаСкидкиНаценки / СтрокаТаблицыРодитель.Количество;
		Если Окр(СкидкаНаЕдиницу, 2) <> СкидкаНаЕдиницу Тогда
			ТекстСообщения = НСтр("ru = 'Скидка должна быть кратна количеству'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ДеревоСкидок", , Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСкидокСуммаСкидкиНаценкиПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоСкидок.ТекущиеДанные;
	Если ТекущиеДанные.ПолучитьРодителя().Количество <> 0 Тогда
		РассчитатьСуммуСкидки(ТекущиеДанные);
	Иначе
		ТекущиеДанные.СуммаСкидки = 0;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура КодыСтрокБюджетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РедактироватьКодыСтрокБюджетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.бг_ФормаРедактированияСтрокБюджета", 
		ПараметрыЗапросаСкидокНаценок(),
		,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
	ПараметрыВыбораЦен.ОписаниеОповещения = 
	Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект);
	РеквизитыДокументаОснования = ЗначенияРеквизитовОбъекта(ДокументОснование, "ЦенаВключаетНДС, Соглашение, Партнер");
	
	ПараметрыВыбораЦен.ЦенаВключаетНДС = РеквизитыДокументаОснования.ЦенаВключаетНДС;
	ПараметрыВыбораЦен.ИспользоватьПриПродаже = Истина;
	ИспользоватьСоглашенияСКлиентами = Истина;
	ПараметрыВыбораЦен.ВладелецИндивидуальногоВидаЦен = 
		?(ИспользоватьСоглашенияСКлиентами, РеквизитыДокументаОснования.Соглашение, РеквизитыДокументаОснования.Партнер);
	
	ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСкидки(Команда)
	ПересчитатьСкидкиНаСервере();
	ОбновитьПодвал();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ОчиститьСообщения();

	Закрыть(АдресСкидокВоВременномХранилище());
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	ЭлементыДерева = ДеревоСкидок.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоСкидок.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	ЭлементыДерева = ДеревоСкидок.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоСкидок.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.ПолучитьЭлементы() Цикл
		СтрокаДерева.Пересчитывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
		
	Для Каждого СтрокаДерева Из ДеревоСкидок.ПолучитьЭлементы() Цикл
		СтрокаДерева.Пересчитывать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Дата", ДокументОснование.Дата);
	ПараметрыЗаполнения.Вставить("Организация", ДокументОснование.Организация);
	ПараметрыЗаполнения.Вставить("Валюта", ДокументОснование.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Ложь);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена");
	
	Товары = Новый ТаблицаЗначений;
	
	Товары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Товары.Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого Строка Из ДеревоСкидок.ПолучитьЭлементы() Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.НомерСтроки = Товары.Количество();
	КонецЦикла;
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		Товары,
		Неопределено, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);

	Для каждого Строка Из ДеревоСкидок.ПолучитьЭлементы() Цикл
		Если Строка.Пересчитывать Тогда
			НайденнаяСтрока = Товары.Найти(Строка.Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				Строка.Цена = НайденнаяСтрока.Цена;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЦеныРассчитаны = Истина Тогда
		ПересчитатьСкидкиНаСервере();
	КонецЕсли;
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция АдресСкидокВоВременномХранилище()
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДеревоСкидок", РеквизитФормыВЗначение("ДеревоСкидок"));
	СтруктураДанных.Вставить("КодыСтрокБюджета", КодыСтрокБюджета);
	Возврат ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура ЗаполнитьСкидкиНаСервере()

	ДанныеВременногоХранилища = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", Параметры.ДокументОснование);
	Запрос.УстановитьПараметр("КорректировкаРеализацииТовары", ДанныеВременногоХранилища.Товары);
	Запрос.УстановитьПараметр("КорректировкаРеализацииСкидкиНаценки", ДанныеВременногоХранилища.бг_СкидкиНаценки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииТовары.Количество КАК Количество,
	|	КорректировкаРеализацииТовары.Сумма КАК Сумма,
	|	КорректировкаРеализацииТовары.Цена КАК Цена
	|ПОМЕСТИТЬ _КорректировкаРеализацииТовары
	|ИЗ
	|	&КорректировкаРеализацииТовары КАК КорректировкаРеализацииТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииСкидкиНаценки.Номенклатура КАК Номенклатура,
	|	КорректировкаРеализацииСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	КорректировкаРеализацииСкидкиНаценки.Сумма КАК СуммаСкидкиНаценки,
	|	КорректировкаРеализацииСкидкиНаценки.ЦенаБазовая КАК ЦенаБазовая
	|ПОМЕСТИТЬ КорректировкаРеализацииСкидкиНаценки
	|ИЗ
	|	&КорректировкаРеализацииСкидкиНаценки КАК КорректировкаРеализацииСкидкиНаценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииСкидкиНаценки.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(КорректировкаРеализацииСкидкиНаценки.ЦенаБазовая) КАК ЦенаБазовая
	|ПОМЕСТИТЬ КорректировкаРеализацииСкидкиНаценкиИтоги
	|ИЗ
	|	КорректировкаРеализацииСкидкиНаценки КАК КорректировкаРеализацииСкидкиНаценки
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаРеализацииСкидкиНаценки.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ КорректировкаРеализацииТовары
	|ИЗ
	|	_КорректировкаРеализацииТовары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ Реализация
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслугСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(ЕСТЬNULL(РеализацияТоваровУслугСкидкиНаценки.Сумма, 0)) КАК СуммаСкидкиНаценкиДо,
	|	0 КАК СуммаСкидкиНаценки
	|ПОМЕСТИТЬ СкидкиНаценки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.СкидкиНаценки КАК РеализацияТоваровУслугСкидкиНаценки
	|		ПО РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслугСкидкиНаценки.Ссылка
	|			И РеализацияТоваровУслугТовары.КлючСвязи = РеализацияТоваровУслугСкидкиНаценки.КлючСвязи
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугСкидкиНаценки.СкидкаНаценка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализацииСкидкиНаценки.Номенклатура,
	|	КорректировкаРеализацииСкидкиНаценки.СкидкаНаценка,
	|	0,
	|	КорректировкаРеализацииСкидкиНаценки.СуммаСкидкиНаценки
	|ИЗ
	|	КорректировкаРеализацииСкидкиНаценки КАК КорректировкаРеализацииСкидкиНаценки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ЕСТЬNULL(Реализация.Цена, 0) КАК ЦенаДо,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ КорректировкаРеализацииСкидкиНаценкиИтоги.ЦенаБазовая IS NULL
	|				ТОГДА КорректировкаРеализацииСкидкиНаценкиИтоги.ЦенаБазовая
	|			ИНАЧЕ Реализация.Цена
	|		КОНЕЦ, 0) КАК Цена,
	|	ЕСТЬNULL(Реализация.Количество, 0) КАК КоличествоДо,
	|	ЕСТЬNULL(КорректировкаРеализацииТовары.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(СкидкиНаценки.СуммаСкидкиНаценкиДо, 0) КАК СуммаСкидкиНаценкиДо,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ КорректировкаРеализацииСкидкиНаценкиИтоги.ЦенаБазовая IS NULL
	|				ТОГДА СкидкиНаценки.СуммаСкидкиНаценки
	|			КОГДА Реализация.Количество <> 0
	|				ТОГДА СкидкиНаценки.СуммаСкидкиНаценкиДо * КорректировкаРеализацииТовары.Количество / Реализация.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ, 0) КАК СуммаСкидкиНаценки
	|ИЗ
	|	КорректировкаРеализацииТовары КАК КорректировкаРеализацииТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Реализация КАК Реализация
	|		ПО КорректировкаРеализацииТовары.Номенклатура = Реализация.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ СкидкиНаценки КАК СкидкиНаценки
	|		ПО КорректировкаРеализацииТовары.Номенклатура = СкидкиНаценки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаРеализацииСкидкиНаценкиИтоги КАК КорректировкаРеализацииСкидкиНаценкиИтоги
	|		ПО КорректировкаРеализацииТовары.Номенклатура = КорректировкаРеализацииСкидкиНаценкиИтоги.Номенклатура
	|ИТОГИ
	|	МАКСИМУМ(ЦенаДо),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(КоличествоДо),
	|	МАКСИМУМ(Количество),
	|	СУММА(СуммаСкидкиНаценкиДо),
	|	СУММА(СуммаСкидкиНаценки)
	|ПО
	|	Номенклатура";
	
	СтрокиДереваСкидок = ДеревоСкидок.ПолучитьЭлементы();
	СтрокиДереваСкидок.Очистить();

	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		СтрокаДерева = СтрокиДереваСкидок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, ВыборкаНоменклатура);

		// вычислим процент скидки и цену со скидкой
		ПересчитатьДанныеСтрокиДереваСкидок(СтрокаДерева);

		// вычислим цену со скидкой до
		Если СтрокаДерева.КоличествоДо <> 0 Тогда
			СтрокаДерева.ЦенаСоСкидкойДо = (СтрокаДерева.КоличествоДо * СтрокаДерева.ЦенаДо - СтрокаДерева.СуммаСкидкиНаценкиДо) 
				/ СтрокаДерева.КоличествоДо;
		КонецЕсли; 
		
		Подстроки = СтрокаДерева.ПолучитьЭлементы();
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СкидкаНаценка) Тогда
				Подстрока = Подстроки.Добавить();
				ЗаполнитьЗначенияСвойств(Подстрока, Выборка, , "Номенклатура, Цена, ЦенаДо, Количество, КоличествоДо");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСкидкиНаСервере()
	
	СуммоваяСкидкаCRM = бг_КонстантыПовтИсп.ЗначениеКонстанты("СуммоваяСкидкаCRM");

	ЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ЗаказКлиента").ПолучитьОбъект();
	ЗаказКлиента.бг_КодыСтрокБюджета = КодыСтрокБюджета;
	
	ИсходныеТовары = ЗаказКлиента.Товары.Выгрузить();
	ЗаказКлиента.Товары.Очистить();
	Для каждого СтрокаДерева Из ДеревоСкидок.ПолучитьЭлементы() Цикл
		ИсходнаяСтрока = ИсходныеТовары.Найти(СтрокаДерева.Номенклатура, "Номенклатура");
		
		НоваяСтрока = ЗаказКлиента.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
		НоваяСтрока.Цена = СтрокаДерева.Цена;
		Если СтрокаДерева.КонечнаяЦена <> 0 Тогда
			НоваяСтрока.бг_ЦенаEDI = СтрокаДерева.КонечнаяЦена;
		КонецЕсли;
		НоваяСтрока.Количество = СтрокаДерева.Количество;
		НоваяСтрока.КоличествоУпаковок = СтрокаДерева.Количество;
		НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
	КонецЦикла;

	ОбработатьТабличнуюЧастьТоварыЗаказа(ЗаказКлиента);

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
	
	РезультатРасчета = СкидкиНаценкиСервер.Рассчитать(
		ЗаказКлиента, 
		СтруктураПараметры);
	ТаблицаСкидкиНаценки = РезультатРасчета.ТаблицаСкидкиНаценки;
	
	// Откорректируем скидки в дереве
	СтрокиДерева = ДеревоСкидок.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Если Не СтрокаДерева.Пересчитывать Тогда
			Продолжить;
		КонецЕсли;

		КлючСвязи = СтрокиДерева.Индекс(СтрокаДерева) + 1;
		СтрокиСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
	
		Для каждого Строка Из СтрокиСтрокиДерева Цикл
			Если Строка.СкидкаНаценка = СуммоваяСкидкаCRM Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора = Новый Структура("КлючСвязи, СкидкаНаценка", КлючСвязи, Строка.СкидкаНаценка);
			СтрокиСкидок = ТаблицаСкидкиНаценки.НайтиСтроки(СтруктураОтбора);
			
			СуммаСкидки = 0;
			Для каждого СтрокаСкидки Из СтрокиСкидок Цикл
				СуммаСкидки = СуммаСкидки + СтрокаСкидки.Сумма;
				ТаблицаСкидкиНаценки.Удалить(СтрокаСкидки);
			КонецЦикла;
			
			СтрокаДерева.СуммаСкидкиНаценки = СтрокаДерева.СуммаСкидкиНаценки - Строка.СуммаСкидкиНаценки + СуммаСкидки;
			Строка.СуммаСкидкиНаценки = СуммаСкидки;
			
		КонецЦикла;

		// новые скидки
		СтрокиСкидок = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
		Для каждого СтрокаСкидки Из СтрокиСкидок Цикл
			Если СтрокаСкидки.СкидкаНаценка = СуммоваяСкидкаCRM Тогда
				Продолжить;
			КонецЕсли;

			Строка = СтрокиСтрокиДерева.Добавить();
			Строка.СкидкаНаценка = СтрокаСкидки.СкидкаНаценка;
			Строка.СуммаСкидкиНаценки = СтрокаСкидки.Сумма;
			СтрокаДерева.СуммаСкидкиНаценки = СтрокаДерева.СуммаСкидкиНаценки + СтрокаСкидки.Сумма;
		КонецЦикла; 
		
		ПересчитатьДанныеСтрокиДереваСкидок(СтрокаДерева);
		
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьДанныеСтрокиДереваСкидок(СтрокаДерева)

	Если СтрокаДерева.Количество * СтрокаДерева.Цена <> 0 Тогда
		СтрокаДерева.ПроцентСкидки = СтрокаДерева.СуммаСкидкиНаценки / (СтрокаДерева.Количество * СтрокаДерева.Цена) * 100;
		
		СтрокаДерева.ЦенаСоСкидкой = (СтрокаДерева.Количество * СтрокаДерева.Цена - СтрокаДерева.СуммаСкидкиНаценки)
			/ СтрокаДерева.Количество;

		СтрокаДерева.Сумма = СтрокаДерева.ЦенаСоСкидкой * СтрокаДерева.Количество;
	Иначе
		СтрокаДерева.ПроцентСкидки = 0;
	КонецЕсли;

КонецПроцедуры


&НаСервереБезКонтекста
Процедура ОбработатьТабличнуюЧастьТоварыЗаказа(ЗаказОбъект)
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЗаказОбъект, Документы.ЗаказКлиента);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаказОбъект, ПараметрыУказанияСерий);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЗаказОбъект);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
		ЗаказОбъект.Товары, 
		СтруктураДействий, 
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСкидки(СтрокаДерева, ИзмениласьЦена = Ложь)
	
	СтрокаДереваРодитель = СтрокаДерева.ПолучитьРодителя();
	ЦенаБазовая = СтрокаДереваРодитель.Цена;
	
	// перезаполнить показатели у группы
	СтрокаДереваРодитель.СуммаСкидкиНаценки = ИтогиКоллекцииФормы(СтрокаДереваРодитель.ПолучитьЭлементы()).СуммаСкидкиНаценки;
	ПересчитатьДанныеСтрокиДереваСкидок(СтрокаДереваРодитель);
	
	ОбновитьПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвал()
	
	СтруктураПолейИтогов = ИтогиКоллекцииФормы(ДеревоСкидок.ПолучитьЭлементы());

	Для каждого ЭлементСтруктуры Из СтруктураПолейИтогов Цикл
		Элементы["ДеревоСкидок" + ЭлементСтруктуры.Ключ].ТекстПодвала = ЭлементСтруктуры.Значение;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ИтогиКоллекцииФормы(Коллекция)

	СтруктураПолейИтогов = Новый Структура("СуммаСкидкиНаценкиДо, СуммаСкидкиНаценки, Сумма", 0, 0, 0);
	Для каждого СтрокаКоллекции Из Коллекция Цикл
		Для каждого ЭлементСтруктуры Из СтруктураПолейИтогов Цикл
			СтруктураПолейИтогов[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение + СтрокаКоллекции[ЭлементСтруктуры.Ключ];
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтруктураПолейИтогов;

КонецФункции

&НаСервереБезКонтекста
// Возвращает структуру, содержащую значения реквизитов, прочитанные из информационной базы по ссылке на объект.
// Используется для перехода с клиента на сервер
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

&НаКлиенте
Процедура РедактироватьКодыСтрокБюджетаЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	КодыСтрокБюджета = КодыСтрокБюджетаПоСкидкам(ВозвращенноеЗначение);
	 	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)';
			|en = 'Discounts (markups)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны';
			|en = 'Discount (markups) are calculated'"),
		БиблиотекаКартинок.Информация32); 	
	
КонецПроцедуры

&НаСервере
Функция ПараметрыЗапросаСкидокНаценок()
	
	ЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ЗаказКлиента").ПолучитьОбъект();
	Возврат СкидкиНаценкиСервер.бг_ПараметрыЗапросаСкидокНаценок(ЗаказКлиента);
   
КонецФункции

&НаСервере
Функция КодыСтрокБюджетаПоСкидкам(СкидкиНаценки)
	
	Возврат бг_РасчетСкидок.КодыСтрокБюджетаПоСкидкам(СкидкиНаценки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКодыСтрокБюджетаПоСкидкам(СкидкиНаценки)
	
	МассивСкидокНаценок = СкидкиНаценки.ВыгрузитьЗначения();
	КодыСтрокиБюджетаСкидокИНаценок = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСкидокНаценок, "бг_КодСтрокиБюджета");
		
	КодыСтрокБюджета = "";
	Если КодыСтрокиБюджетаСкидокИНаценок.Количество() > 0 Тогда

		Для Каждого СтрокаКодСтрокиБюджета Из КодыСтрокиБюджетаСкидокИНаценок Цикл
			КодСтрокиБюджета = СокрЛП(СтрокаКодСтрокиБюджета.Значение);
			Если КодСтрокиБюджета <> "" Тогда
				КодыСтрокБюджета = ?(КодыСтрокБюджета = "", "", КодыСтрокБюджета + ";") + КодСтрокиБюджета;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
