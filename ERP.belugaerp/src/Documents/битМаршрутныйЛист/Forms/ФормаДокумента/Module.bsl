#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ОбновитьДоступныеТС();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Оповестить("Запись_битМаршрутныйЛист", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьСлужебныеРеквизитыПоЗаказам();
	
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ЕстьСубподрядчик Тогда 
		Если Не ЗначениеЗаполнено(Объект.СубподрядчикПартнер) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен субподрядчик'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, , "Объект.СубподрядчикПартнер", , Отказ);
		ИначеЕсли Объект.ПеревозчикПартнер = Объект.СубподрядчикПартнер Тогда
			ТекстОшибки = НСтр("ru='Организатор перевозки и субподрядчик не могут совпадать'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "Объект.СубподрядчикПартнер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;    
	ЭтоПроведение = ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись И Объект.Проведен;
	Если ЭтоПроведение
		И Не ПараметрыЗаписи.Свойство("ИгнорироватьПроверкуТипВладения")
		И Объект.ВидДокумента = ПредопределенноеЗначение("Перечисление.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист") 
		И Объект.ТипВладенияТС = ПредопределенноеЗначение("Справочник.бг_ТипыВладенияТС.ПустаяСсылка") Тогда 
		РежимДиалога = Новый СписокЗначений;
		РежимДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Вернуться к редактированию'"));
		РежимДиалога.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru='Игнорировать'"));
		ОтветОповещение = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(ОтветОповещение, НСтр("ru='Не заполнен тип владения а/м'"), 
			РежимДиалога, , КодВозвратаДиалога.Отмена, НСтр("ru='Внимание'"));
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Пропустить Тогда
		ДополнительныеПараметры.Вставить("ИгнорироватьПроверкуТипВладения");
		Записать(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ответственный) Тогда
		ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКолонкуТекущимЗначением(Команда)
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	ИмяЭлемента = Элементы.Заказы.ТекущийЭлемент.Имя;
	Колонки = КолонкиДляЗаполнения();
	Если Не ТекущиеДанные = Неопределено 
		И Не Колонки[ИмяЭлемента] = Неопределено Тогда 
		ТекущееЗначение = ТекущиеДанные[Колонки[ИмяЭлемента]];
		Для каждого СтрокаЗаказы Из Объект.Заказы Цикл
			СтрокаЗаказы[Колонки[ИмяЭлемента]] = ТекущееЗначение;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПрибытияФакт(Команда)
	Объект.ДатаПрибытияФакт = ТекущаяДатаВремя();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуЗагрузкиУбытия(Команда)
	Объект.ЗагрузкаДатаУбытия = ТекущаяДатаВремя();
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьТранспортныеРасходы(Команда)
	Если Объект.Заказы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена таблица заказов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СтраховаяСтавка) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена страховая ставка'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РассчитатьТранспортныеРасходыЗавершение", ЭтотОбъект);
	Если Объект.РучнаяКорректировкаТранспортныхРасходов Тогда
		ТекстВопроса = НСтр("ru='Расходы внесены вручную. Пересчитать?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьТранспортныеРасходыЗавершение(ВыбранноеЗначение, ПараметрыВопроса) Экспорт
	Если ВыбранноеЗначение = КодВозвратаДиалога.Да Тогда
		РассчитатьТранспортныеРасходыНаСервере();
	КонецЕсли;
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура МаршрутДоставкиПриИзменении(Элемент)
	Объект.МаршрутУказанВручную = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СубподрядчикПартнерПриИзменении(Элемент)
	СубподрядчикПартнерПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПеревозкаПоДоговоруСубподрядаПриИзменении(Элемент)
	Если Не ЕстьСубподрядчик Тогда
		Объект.СубподрядчикПартнер = Неопределено;
		Объект.Субподрядчик = Неопределено;
		Объект.ДоговорСубподряда = Неопределено;
	КонецЕсли;
	
	ПеревозкаПоДоговоруСубподрядаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	ВодительПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВодительПриИзмененииНаСервере()
	ОбновитьДанныеТелефона(); 
	ОбновитьДоступныеТС();
	ЗаполнитьДоговорВладения();
КонецПроцедуры

&НаСервере
Процедура ЭкспедиторПриИзмененииНаСервере()
	ОбновитьДанныеТелефона();
КонецПроцедуры

&НаКлиенте
Процедура ЭкспедиторПриИзменении(Элемент)
	ЭкспедиторПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПартнерПриИзменении(Элемент)
	ПеревозчикПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЗаказПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	ТекущаяСтрока.ПунктНазначения = ПунктНазначенияЗаказа(ТекущаяСтрока.Заказ);
	
	ОпределитьРасчетныеДанныеСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДокументОтгрузкиПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОтгрузки) Тогда
		ТекущаяСтрока.Заказ = ЗаказДокументаОтгрузки(ТекущаяСтрока.ДокументОтгрузки);
	Иначе
		ТекущаяСтрока.Заказ = Неопределено;
	КонецЕсли;
	
	ОпределитьРасчетныеДанныеСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	Объект.РучнаяКорректировкаТранспортныхРасходов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НомерВоротПриИзменении(Элемент)
	Объект.ДатаНачалаЗагрузки = ТекущаяДатаВремя();
КонецПроцедуры

&НаКлиенте
Процедура КлассГрузоподъемностиПриИзменении(Элемент)
	РассчитатьПоказателиМаршрута();
КонецПроцедуры

&НаКлиенте
Процедура АвтомобильПриИзменении(Элемент)
	ЗаполнитьДоговорВладения();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказчикПриИзменении(Элемент)
	ЗаказчикПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоЗаказам(Заказ = Неопределено)
	Документы.битМаршрутныйЛист.ЗаполнитьСлужебныеРеквизитыТабличнойЧастиЗаказы(Объект);
	РассчитатьПоказателиМаршрута();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ЗаполнитьСлужебныеРеквизитыПоЗаказам();
	
	УстановитьЗначениеПеременныхФормы();
	
	УстановитьОтборПоПеревозчикуДоговоровВладенияТС();
	
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура ПеревозчикПриИзмененииСервер()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.ПеревозчикПартнер, Объект.Перевозчик, Истина);
	КонтрагентПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура СубподрядчикПартнерПриИзмененииСервер()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.СубподрядчикПартнер, Объект.Субподрядчик, Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПунктНазначенияЗаказа(Заказ)
	Возврат Справочники.битПунктыНазначения.ПунктНазначенияОбъекта(Заказ);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаказДокументаОтгрузки(ДокументОтгрузки)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслуг.ЗаказКлиента КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.ЗаказНаПеремещение
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.ЗаказПоставщику
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаТоваровХранителю.ЗаказКлиента
	|ИЗ
	|	Документ.ПередачаТоваровХранителю КАК ПередачаТоваровХранителю
	|ГДЕ
	|	ПередачаТоваровХранителю.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументОтгрузки);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПеременныхФормы()
	ЕстьСубподрядчик = ЗначениеЗаполнено(Объект.СубподрядчикПартнер);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхСтатусовРейса()
	Если Объект.ВидДокумента <> Перечисления.бг_ВидыМаршрутныхЛистов.Рейс Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУстановкиСтатуса = Документы.битМаршрутныйЛист.ДатаУстановкиСтатусаРейса(Объект.Ссылка, Объект.СтатусРейса);
	Если ДатаУстановкиСтатуса <> Неопределено Тогда
		Элементы.СтатусИсторияИзменения.Заголовок = СтрШаблон(НСтр("ru='Изменено: %1'"), ДатаУстановкиСтатуса);
	КонецЕсли;
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.СтатусРейса) Тогда
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.НаПроверке);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВозвращеныТЭК);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.НаПовторнойПроверке);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВОплате);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.РейсОплачен);
	ИначеЕсли Объект.СтатусРейса = Перечисления.бг_СтатусыРейсов.НаПроверке Тогда
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.НаПроверке);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВозвращеныТЭК);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.НаПовторнойПроверке);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВОплате);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.РейсОплачен);
	ИначеЕсли Объект.СтатусРейса = Перечисления.бг_СтатусыРейсов.ВозвращеныТЭК Тогда
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВозвращеныТЭК);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.НаПовторнойПроверке);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВОплате);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.РейсОплачен);
	ИначеЕсли Объект.СтатусРейса = Перечисления.бг_СтатусыРейсов.НаПовторнойПроверке Тогда
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.НаПовторнойПроверке);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВОплате);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.РейсОплачен);
	ИначеЕсли Объект.СтатусРейса = Перечисления.бг_СтатусыРейсов.ВОплате Тогда
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.ВОплате);
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.РейсОплачен);
	ИначеЕсли Объект.СтатусРейса = Перечисления.бг_СтатусыРейсов.РейсОплачен Тогда
		СписокВыбора.Добавить(Перечисления.бг_СтатусыРейсов.РейсОплачен);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПричинПростояПриПогрузке()
	Если Объект.ВидДокумента <> Перечисления.бг_ВидыМаршрутныхЛистов.Рейс Тогда
		Возврат;
	КонецЕсли;
	
	ПричиныПростоя = Новый Массив;
	ПричиныПростоя.Добавить(НСтр("ru='Неверное вложение'"));
	ПричиныПростоя.Добавить(НСтр("ru='Бой'"));
	ПричиныПростоя.Добавить(НСтр("ru='Брак'"));
	ПричиныПростоя.Добавить(НСтр("ru='Недогруз'"));
	ПричиныПростоя.Добавить(НСтр("ru='ЕГАИС'"));
	ПричиныПростоя.Добавить(НСтр("ru='ЭДО'"));
	ПричиныПростоя.Добавить(НСтр("ru='Загруженность на складе Грузополучателя'"));
	ПричиныПростоя.Добавить(НСтр("ru='Проблема на стороне Грузополучателя'"));
	ПричиныПростоя.Добавить(НСтр("ru='Другая причина'"));
	
	Элементы.ЗаказыПростойПояснение.СписокВыбора.Очистить();
	Элементы.ЗаказыВозвратПояснение.СписокВыбора.Очистить();
	Для Каждого ПричинаПростоя Из ПричиныПростоя Цикл
		Элементы.ЗаказыПростойПояснение.СписокВыбора.Добавить(ПричинаПростоя);
		Элементы.ЗаказыВозвратПояснение.СписокВыбора.Добавить(ПричинаПростоя);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция УправлениеФормой()
	ОбновитьЗаголовокФормы();
	ЗаполнитьСписокДоступныхСтатусовРейса();
	ЗаполнитьСписокПричинПростояПриПогрузке();
	
	ФактическиеДанные = (Объект.ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.Рейс);
	Рейс = Документы.битМаршрутныйЛист.МаршрутныйЛистРейс(Объект.Ссылка);
	
	УстановитьЗаголовкиПолей(ФактическиеДанные);
	УстановитьВидимостьДоступностьПолей(ФактическиеДанные, Рейс);
	УстановитьОграниченияДоступныйПериодРедактирования(Рейс);
КонецФункции

&НаСервере
Функция ИменаЭлементовПоВидуДокумента()
	ВидДокументаМаршрутныйЛист = Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист;
	ВидДокументаРейс = Перечисления.бг_ВидыМаршрутныхЛистов.Рейс;
	
	ИменаЭлементов = Новый Соответствие;
	ИменаЭлементов.Вставить("ЗаказыЗаказ",                                              ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("УсловныйМаршрутныйЛист",                                   ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("РазрешитьПроведениеСРазличающейсяТранспортнойИнформацией", ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("ДатаПрибытия",                                             ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("ЗаявкаОтправлена",                                         ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("ПлановыйПробегПоРейсу",                                    ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("ВидПРР",                                                   ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("СтоимостьПРР",                                             ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("ЗаказыСклад",                                              ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("ЗаказыКомментарий",                                        ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("РучнаяКорректировкаТранспортныхРасходов",					ВидДокументаМаршрутныйЛист);
	ИменаЭлементов.Вставить("ЗаказыСумма",                                              ВидДокументаМаршрутныйЛист);
	
	ИменаЭлементов.Вставить("ГруппаДатаПрибытияФакт",    ВидДокументаРейс);
	ИменаЭлементов.Вставить("ГруппаЗагрузкаДатаУбытия",  ВидДокументаРейс);
	ИменаЭлементов.Вставить("ДатаНачалаЗагрузки",        ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыГруппаДанныеПростой", ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыГруппаДанныеВозврат", ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыГруппаФакт",          ВидДокументаРейс);
	ИменаЭлементов.Вставить("ГруппаКоличествоПаллет",    ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыДокументОтгрузки",    ВидДокументаРейс);
	ИменаЭлементов.Вставить("ГруппаСтатус",              ВидДокументаРейс);
	ИменаЭлементов.Вставить("НомераПломб",               ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыОрганизация",         ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыЗаказРейс",           ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыПримечание",          ВидДокументаРейс);
	ИменаЭлементов.Вставить("ЗаказыСуммаДокумента",      ВидДокументаРейс);

	Возврат ИменаЭлементов;
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Шаблон = НСтр("ru = '%1 %2 от %3';
						|en = '%1 %2 dated %3'");
	Иначе
		Шаблон = НСтр("ru = '%1 (создание)';
						|en = '%1 (Create)'");
	КонецЕсли;
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								Шаблон,
								?(ЗначениеЗаполнено(Объект.ВидДокумента), Объект.ВидДокумента, Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист),
								Объект.Номер,
								Объект.Дата);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПолей(ФактическиеДанные)
	Элементы.ПеревозчикПартнер.Заголовок = ?(ЕстьСубподрядчик,
		НСтр("ru='Организатор'"),
		НСтр("ru='Перевозчик'"));
	Элементы.Перевозчик.Заголовок = ?(ЕстьСубподрядчик,
		НСтр("ru='Организатор контрагент'"),
		НСтр("ru='Перевозчик контрагент'"));
		
	Элементы.ГруппаЗаказы.Заголовок = ?(ФактическиеДанные,
		НСтр("ru='Документы отгрузки'"),
		НСтр("ru='Заказы'"));
		
	Элементы.Номер.Заголовок = ?(ФактическиеДанные,
		НСтр("ru='Рейс'"),
		НСтр("ru='Маршрутный лист'"));
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПолей(ФактическиеДанные, Рейс)
	РейсОтгружен = ?(ФактическиеДанные,
				Документы.битМаршрутныйЛист.РейсОтгружен(Объект),
				Документы.битМаршрутныйЛист.РейсОтгружен(Рейс));
	
	ИменаЭлементовПоВидуДокумента = ИменаЭлементовПоВидуДокумента();
	Для Каждого ИмяЭлемента Из ИменаЭлементовПоВидуДокумента Цикл
		Элементы[ИмяЭлемента.Ключ].Видимость = Объект.ВидДокумента = ИмяЭлемента.Значение;
	КонецЦикла;
	
	Элементы.ГруппаСубподрядчик.Доступность = ЕстьСубподрядчик;
	Элементы.ДатаПрибытия.ТолькоПросмотр = ФактическиеДанные;
	Элементы.ВидДокумента.ТолькоПросмотр = ФактическиеДанные И ЗначениеЗаполнено(Объект.ДокументОснование);
	Элементы.ЗаказыЗаполнитьТекущимЗначением.Видимость = ФактическиеДанные;
	
	Если Не ФактическиеДанные И РейсОтгружен Тогда
		Элементы.ГруппаОсновное.ТолькоПросмотр = Истина;
		Элементы.ГруппаЗаказы.ТолькоПросмотр = Истина;
	// Рейс на основании маршрутного листа
	ИначеЕсли ФактическиеДанные И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ТипРейса.Подсказка = НСтр("ru='Поле редактируется в документе основании'");
		Элементы.ТипРейса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И Не РейсОтгружен Тогда
		Элементы.ГруппаРасходы.ТолькоПросмотр = Истина;
		Элементы.РассчитатьТранспортныеРасходы.Доступность = Ложь;
		
		Подсказка = НСтр("ru='До убытия автомобиля расходы корректируются в маршрутном листе'");
		Элементы.ГруппаРасходы.Подсказка = Подсказка;
		Команды.РассчитатьТранспортныеРасходы.Подсказка = Подсказка;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияДоступныйПериодРедактирования(Рейс)
	Если Не Объект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ДатаЗапретаРедактированияДокумента = ОпределитьДатуЗапретаРедактированияДокумента(Объект.Ссылка);
	ПериодРедактированияДокументаИстек = ДатаЗапретаРедактированияДокумента <> Неопределено
								И ДатаЗапретаРедактированияДокумента <= ТекущаяДатаСеанса();
	Если Не ПериодРедактированияДокументаИстек
		Или Пользователи.РолиДоступны("бг_ТранспортнаяЛогистикаРасширенныеПрава") Тогда
		Возврат;
	КонецЕсли;
	
	Подсказка = НСтр("ru='Поле доступно для редактирования для прав ""Транспортная логистика расширенные права""'");
	
	Если ЗначениеЗаполнено(Рейс) Тогда
		Элементы.ТипРейса.Подсказка = Подсказка;
		Элементы.ТипРейса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ГруппаРасходы.ТолькоПросмотр = Истина;
	Элементы.РассчитатьТранспортныеРасходы.Доступность = Ложь;
	
	Элементы.ГруппаРасходы.Подсказка = Подсказка;
	Команды.РассчитатьТранспортныеРасходы.Подсказка = Подсказка;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТелефона()
	Объект.Телефон = "";
	ОтборКИ = УправлениеКонтактнойИнформацией.ОтборКонтактнойИнформации();	
	ОтборКИ.ВидыКонтактнойИнформации.Добавить(
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица"));
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда
		КонтактныеДанныеФизическогоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Объект.Водитель, ОтборКИ);
		Если КонтактныеДанныеФизическогоЛица.Количество() Тогда
			Объект.Телефон = КонтактныеДанныеФизическогоЛица[0].Представление;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Экспедитор) Тогда
		КонтактныеДанныеФизическогоЛица = УправлениеКонтактнойИнформацией.КонтактнаяИнформация(Объект.Экспедитор, ОтборКИ);
		Если КонтактныеДанныеФизическогоЛица.Количество() Тогда
			Объект.Телефон = Объект.Телефон + ?(Объект.Телефон = "", "", "/") + КонтактныеДанныеФизическогоЛица[0].Представление;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеТС()
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда
		ТранспортныеСредства = РегистрыСведений.бг_ЭкипажТС.ТранспортныеСредстваСотрудника(
			Объект.Водитель, Перечисления.бг_ЧленыЭкипажа.Водители());
	Иначе
		ТранспортныеСредства = Новый Массив;
	КонецЕсли;
				   
	Элементы.Автомобиль.СписокВыбора.ЗагрузитьЗначения(ТранспортныеСредства);
	
	Если Не ЗначениеЗаполнено(Объект.Автомобиль) И ТранспортныеСредства.Количество() = 1 тогда
		Объект.Автомобиль = ТранспортныеСредства[0];
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорВладения()
	Если Не ЗначениеЗаполнено(Объект.Автомобиль)
		Или Не ЗначениеЗаполнено(Объект.Перевозчик) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ДоговорыВладенияТС.Ссылка КАК ДоговорНаВладение,
	|	ДоговорыВладенияТС.ТипВладенияТС КАК ТипВладенияТС
	|ИЗ
	|	Справочник.бг_ДоговорыВладенияТС КАК ДоговорыВладенияТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бг_ДоговорыВладенияТС.ТранспортныеСредства КАК ДоговорТранспортныеСредства
	|		ПО (ДоговорыВладенияТС.Перевозчик = &Перевозчик)
	|			И (НЕ ДоговорыВладенияТС.ПометкаУдаления)
	|			И (ДоговорыВладенияТС.Действующий)
	|			И ДоговорыВладенияТС.Ссылка = ДоговорТранспортныеСредства.Ссылка
	|			И (ДоговорТранспортныеСредства.ТранспортноеСредство = &ТранспортноеСредство)";
	Запрос.УстановитьПараметр("Перевозчик", Объект.Перевозчик);
	Запрос.УстановитьПараметр("ТранспортноеСредство", Объект.Автомобиль);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1
		И Выборка.Следующий() Тогда
		Объект.ДоговорНаВладение = Выборка.ДоговорНаВладение;
		Объект.ТипВладенияТС = Выборка.ТипВладенияТС;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	Если Не ЗначениеЗаполнено(Объект.ПеревозчикПартнер)
		И ЗначениеЗаполнено(Объект.Перевозчик) Тогда
		Объект.ПеревозчикПартнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Перевозчик, "Партнер");
	КонецЕсли;
	
	ДоговорПоУмолчанию = Документы.битМаршрутныйЛист.ДоговорНаПеревозкуПоУмолчанию(
					Объект.Организация, Объект.Перевозчик, Объект.ПеревозчикПартнер, Объект.ДоговорНаПеревозку);
	Объект.ДоговорНаПеревозку = ДоговорПоУмолчанию;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяДатаВремя()
	Возврат ТекущаяДатаСеанса();
КонецФункции

&НаСервере
Процедура ОпределитьРасчетныеДанныеСервер()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеЗаказов = ДокументОбъект.РасширенныеДанныеЗаказов();
	ДокументОбъект.ОпределитьВидПеревозки(ДанныеЗаказов);
	ДокументОбъект.ОпределитьСклад();
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыПоЗаказам();
КонецПроцедуры

&НаСервере
Процедура РассчитатьТранспортныеРасходыНаСервере()
	Объект.РучнаяКорректировкаТранспортныхРасходов = Ложь;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Документы.битМаршрутныйЛист.РассчитатьТранспортныеРасходы(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьСлужебныеРеквизитыПоЗаказам();
	Если Объект.ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.Рейс Тогда
		Объект.РучнаяКорректировкаТранспортныхРасходов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиДляЗаполнения()
	Результат = Новый Соответствие;
	Результат.Вставить("ЗаказыПростойОтдел", "ПростойОтдел");
	Результат.Вставить("ЗаказыПростойПояснение", "ПростойПояснение");
	Результат.Вставить("ЗаказыВозвратОтдел", "ВозвратОтдел");
	Результат.Вставить("ЗаказыВозвратПояснение", "ВозвратПояснение");
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьДатуЗапретаРедактированияДокумента(Документ)
	Результат = Неопределено;
	Если ЗначениеЗаполнено(Документ) Тогда
		Результат = Документы.битМаршрутныйЛист.ДатаЗапретаРедактированияДокумента(Документ);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура РассчитатьПоказателиМаршрута()
	ИтоговыеПоказатели = "Объем, Вес, ОбъемМ3, ДалКм, Сумма";
	ТаблицаЗаказы = Объект.Заказы.Выгрузить(, ИтоговыеПоказатели);
	ТаблицаЗаказы.Свернуть(, ИтоговыеПоказатели);
	
	Если ТаблицаЗаказы.Количество() = 1 Тогда
		Объем   = ТаблицаЗаказы[0].Объем;
		Вес     = ТаблицаЗаказы[0].Вес;
		ОбъемМ3 = ТаблицаЗаказы[0].ОбъемМ3;
		ДалКм   = ТаблицаЗаказы[0].ДалКм;
		Сумма   = ТаблицаЗаказы[0].Сумма;
	Иначе
		Объем   = 0;
		Вес     = 0;
		ОбъемМ3 = 0;
		ДалКм   = 0;
		Сумма   = 0;
	КонецЕсли;
	
	СуммаЗаказов = Сумма;
	
	РасстояниеМаршрута = РасстояниеМаршрута();
	
	СуммаРасходов = СуммаРасходов();
	
	ВместимостьНормативнаяДАЛ = ?(ЗначениеЗаполнено(Объект.КлассГрузоподъемности),
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КлассГрузоподъемности, "ВместимостьНормативнаяДАЛ"),
						0);
	
	Если ВместимостьНормативнаяДАЛ <> 0 Тогда
		КоэффициентЗагрузкиТС = Объем / ВместимостьНормативнаяДАЛ * 100;
	КонецЕсли;
	
	Если РасстояниеМаршрута <> 0
		И ВместимостьНормативнаяДАЛ <> 0 Тогда
		КачествоМаршрута = ДалКм / (РасстояниеМаршрута * ВместимостьНормативнаяДАЛ) * 100;
	КонецЕсли;
	
	Если Объем <> 0 Тогда
		ЦенаДал = СуммаРасходов / Объем;
	КонецЕсли;
	
	Если Сумма <> 0 Тогда
		ПроцентЗатратКТО = СуммаРасходов / Сумма * 100;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасстояниеМаршрута()
	РасстояниеМаршрута = 0;
	Для Каждого СтрокаЗаказ Из Объект.Заказы Цикл
		РасстояниеМаршрута = ?(РасстояниеМаршрута > СтрокаЗаказ.Расстояние, РасстояниеМаршрута, СтрокаЗаказ.Расстояние);
	КонецЦикла;
	
	Возврат РасстояниеМаршрута;
КонецФункции

&НаСервере
Функция СуммаРасходов()
	ВидыТранспортныхРасходовИсключитьИзРасчета = Новый Массив;
	ВидыТранспортныхРасходовИсключитьИзРасчета.Добавить(Перечисления.бг_ВидыТранспортныхРасходов.ПростойВозмещаемыйЧасы);
	ВидыТранспортныхРасходовИсключитьИзРасчета.Добавить(Перечисления.бг_ВидыТранспортныхРасходов.ПростойНевозмещаемыйЧасы);
	
	СуммаРасходов = 0;
	Для Каждого СтрокаРасход Из Объект.Расходы Цикл
		Если ВидыТранспортныхРасходовИсключитьИзРасчета.Найти(СтрокаРасход.ВидТранспортныхРасходов) = Неопределено Тогда
			СуммаРасходов = СуммаРасходов + СтрокаРасход.Сумма;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат СуммаРасходов;
КонецФункции

&НаСервере
Процедура ПеревозкаПоДоговоруСубподрядаПриИзмененииНаСервере()
	УстановитьОтборПоПеревозчикуДоговоровВладенияТС();
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПеревозчикуДоговоровВладенияТС()
	ИмяПараметра = "Отбор.Перевозчик";
	СвязьПараметровВыбораПеревозчик = Новый СвязьПараметраВыбора(ИмяПараметра,
				?(ЕстьСубподрядчик, "Объект.Субподрядчик", "Объект.Перевозчик"));
	
	УстановитьОтборПоПеревозчикуДоговорВладенияТС(Элементы.ДоговорНаВладение,
									ИмяПараметра, СвязьПараметровВыбораПеревозчик);
	УстановитьОтборПоПеревозчикуДоговорВладенияТС(Элементы.ДоговорНаВладениеПрицеп,
									ИмяПараметра, СвязьПараметровВыбораПеревозчик);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПеревозчикуДоговорВладенияТС(Элемент, ИмяПараметра, СвязьПараметровВыбора)
	СвязиПараметрыВыбора = Новый Массив(Элемент.СвязиПараметровВыбора);
	
	ИндексЭлемента = 0;
	Для Каждого ЭлементСвязьПараметров Из СвязиПараметрыВыбора Цикл
		Если ЭлементСвязьПараметров.Имя = ИмяПараметра Тогда
			СвязиПараметрыВыбора[ИндексЭлемента] = СвязьПараметровВыбора;
		КонецЕсли;
		
		ИндексЭлемента = ИндексЭлемента + 1;
	КонецЦикла;
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметрыВыбора);
КонецПроцедуры

&НаСервере
Процедура ЗаказчикПриИзмененииНаСервере()
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ВзвестиФлагОтгрузкаИзERPВИстину", Объект.Организация) Тогда
		Объект.ОтгрузкаИзERP = Истина;
	Иначе
		Объект.ОтгрузкаИзERP = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
