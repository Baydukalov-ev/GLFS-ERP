#Область ПрограммныйИнтерфейс

// Добавляет строку в табличную часть заказы
//
// Параметры:
//  Заказ - ДокументСсылка - документ заказ
//  ПунктНазначения - СправочникСсылка.битПунктыНазначения, Неопределено - пункт назначения, 
//			если не указан будет вычислен по объекту
//  
Процедура ДобавитьЗаказ(Заказ, ПунктНазначения = Неопределено) Экспорт
	НоваяСтрока = Заказы.Добавить();                         
	НоваяСтрока.Заказ = Заказ;
	Если ЗначениеЗаполнено(ПунктНазначения) Тогда
		НоваяСтрока.ПунктНазначения = ПунктНазначения;
	Иначе 
		НоваяСтрока.ПунктНазначения = Справочники.битПунктыНазначения.ПунктНазначенияОбъекта(Заказ);
	КонецЕсли;
КонецПроцедуры

// Удаляет заказ из табличной части
//
// Параметры:
//  Заказ - ДокументСсылка - документ заказ
//  
Процедура УдалитьЗаказ(Заказ) Экспорт
	СтрокиЗаказов = Заказы.НайтиСтроки(Новый Структура("Заказ", Заказ));
	Для каждого СтрокаЗаказ Из СтрокиЗаказов Цикл
		Заказы.Удалить(СтрокаЗаказ);
	КонецЦикла;
КонецПроцедуры

// Удаляет из маршрутного листа заказы в которых отменены все строки
//
// Параметры:
//  ОтмененныеЗаказы - Массив
//
Процедура УдалитьОтмененныеЗаказы(ОтмененныеЗаказы) Экспорт
	ОтборСтроки = Новый Структура("Заказ");
	Для Каждого ОтмененныйЗаказ Из ОтмененныеЗаказы Цикл
		ОтборСтроки.Заказ = ОтмененныйЗаказ;
		
		СтрокиЗаказы = Заказы.НайтиСтроки(ОтборСтроки);
		Для Каждого СтрокаЗаказ Из СтрокиЗаказы Цикл
			Заказы.Удалить(СтрокаЗаказ);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Добавляет строку в табличную часть заказы
//
// Возвращаемое значение:
//  ТаблицаЗначений - данные заказов из табличной части заказы
//  
Функция РасширенныеДанныеЗаказов() Экспорт
	Объекты = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Объекты, Заказы.ВыгрузитьКолонку("Заказ"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Объекты, Заказы.ВыгрузитьКолонку("ДокументОтгрузки"));
	
	Возврат РегистрыСведений.бг_ТранспортнаяИнформация.ТранспортнаяИнформацияОбъектов(Объекты);
КонецФункции

// Добавляет строку в табличную часть заказы
//
// Параметры:
//  ДанныеЗаполнения - ТаблицаЗначений - см. РасширенныеДанныеЗаказов()
//  
Процедура ОпределитьВидПеревозки(Знач ДанныеЗаполнения) Экспорт
	ДанныеЗаполнения.Свернуть("ВидПеревозки");
	Результат = "";
	Для каждого СтрокаДанных Из ДанныеЗаполнения Цикл
		Результат = Результат + ?(Результат = "", "", ", ") + Строка(СтрокаДанных.ВидПеревозки);
	КонецЦикла;
	ВидПеревозки = Результат;
	
	ВидПеревозкиАвтоЗаСчетПокупателя = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидПеревозкиАвтоЗаСчетПокупателя");
	ТранспортныеРасходыВозмещаются = ДанныеЗаполнения.Количество() = 1
					И ДанныеЗаполнения[0].ВидПеревозки = ВидПеревозкиАвтоЗаСчетПокупателя;
КонецПроцедуры

// Определяет склад по заказам
Процедура ОпределитьСклад() Экспорт
	Склад = Справочники.Склады.ПустаяСсылка();
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Заказы", Заказы.ВыгрузитьКолонку("Заказ"));
	Запрос.УстановитьПараметр("ДокументыОтгрузки", Заказы.ВыгрузитьКолонку("ДокументОтгрузки"));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Данные.Склад КАК Склад,
	|	СУММА(Данные.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиента.Склад КАК Склад,
	|		1 КАК Количество
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&Заказы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Склад,
	|		1
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&Заказы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказНаПеремещение.СкладОтправитель,
	|		1
	|	ИЗ
	|		Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещение
	|	ГДЕ
	|		ЗаказНаПеремещение.Ссылка В(&Заказы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Склад,
	|		1
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка В(&ДокументыОтгрузки)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриобретениеТоваровУслуг.Склад,
	|		1
	|	ИЗ
	|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|	ГДЕ
	|		ПриобретениеТоваровУслуг.Ссылка В(&ДокументыОтгрузки)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПеремещениеТоваров.СкладОтправитель,
	|		1
	|	ИЗ
	|		Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|	ГДЕ
	|		ПеремещениеТоваров.Ссылка В(&ДокументыОтгрузки)) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	 	Склад = Выборка.Склад;
	КонецЕсли;
КонецПроцедуры                     

// Заполняет соответствующую сумму транспортных расходов
//
// Параметры:
//  ВидТраспортныхРасходов - ПеречислениеСсылка.бг_ВидыТранспортныхРасходов 
//  Сумма - Число
//  
Процедура ЗаполнитьСуммуТранспортныхРасходов(ВидТраспортныхРасходов, Сумма) Экспорт
	ОтборСтрокиРасходы = Новый Структура("ВидТранспортныхРасходов", ВидТраспортныхРасходов);
	СтрокиРасходы = Расходы.НайтиСтроки(ОтборСтрокиРасходы);
	Если СтрокиРасходы.Количество() = 1 Тогда
		СтрокиРасходы[0].Сумма = Сумма;
	КонецЕсли;
КонецПроцедуры

// Заполняет поле СуммаДокумента по данным документов отгрузки
Процедура ЗаказыОпределитьСуммыДокументов() Экспорт
	Если ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеИсточник", Заказы.Выгрузить(, "ДокументОтгрузки"));
	Запрос.Текст =  
#Область ТекстЗапросаСуммаДокумента
	"ВЫБРАТЬ
	|	Таблица.ДокументОтгрузки КАК ДокументОтгрузки
	|ПОМЕСТИТЬ втДокументы
	|ИЗ
	|	&ДанныеИсточник КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументы.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ПриобретениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	втДокументы КАК втДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ПО втДокументы.ДокументОтгрузки = ПриобретениеТоваровУслуг.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДокументы.ДокументОтгрузки,
	|	ВозвратТоваровОтКлиента.СуммаДокумента
	|ИЗ
	|	втДокументы КАК втДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ПО втДокументы.ДокументОтгрузки = ВозвратТоваровОтКлиента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДокументы.ДокументОтгрузки,
	|	РеализацияТоваровУслуг.СуммаДокумента
	|ИЗ
	|	втДокументы КАК втДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО втДокументы.ДокументОтгрузки = РеализацияТоваровУслуг.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втДокументы.ДокументОтгрузки,
	|	ВозвратТоваровПоставщику.СуммаДокумента
	|ИЗ
	|	втДокументы КАК втДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ПО втДокументы.ДокументОтгрузки = ВозвратТоваровПоставщику.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.ДокументОтгрузки,
	|	ПередачаТоваровХранителю.СуммаДокумента
	|ИЗ
	|	втДокументы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровХранителю КАК ПередачаТоваровХранителю
	|		ПО Документы.ДокументОтгрузки = ПередачаТоваровХранителю.Ссылка";
#КонецОбласти
	ДанныеДокументов = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаЗаказ Из Заказы Цикл       
		СтрокаДокумент = ДанныеДокументов.Найти(СтрокаЗаказ.ДокументОтгрузки, "ДокументОтгрузки");
		Если СтрокаДокумент = Неопределено Тогда
			СтрокаЗаказ.СуммаДокумента = 0;
		Иначе
			СтрокаЗаказ.СуммаДокумента = СтрокаДокумент.СуммаДокумента; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист Тогда
		
		ПроверяемыеРеквизиты.Добавить("Заказы");
		ПроверяемыеРеквизиты.Добавить("Заказы.Заказ");
		
		НепроверяемыеРеквизиты.Добавить("Перевозчик");
		НепроверяемыеРеквизиты.Добавить("ПеревозчикПартнер");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипВладенияТС)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипВладенияТС, "ЗаполнятьДоговорВладения") Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорНаВладение");
	КонецЕсли;
	
	Если Заказы.Количество() > 0 Тогда
		ПроверяемыеРеквизиты.Добавить("ВидПеревозки");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты, 
		НепроверяемыеРеквизиты);
	
	ВыполнитьКонтрольБлокировкиИзменения(Отказ);
	
КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.битМаршрутныйЛист") Тогда
		ЗаполнитьДокументНаОснованииМаршрутногоЛиста(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	Ответственный = Пользователи.ТекущийПользователь();
	ДатаСоздания  = ТекущаяДатаСеанса();
	СтатусРейса   = Неопределено;
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ВзвестиФлагОтгрузкаИзERPВИстину", Организация) Тогда
		ОтгрузкаИзERP = Истина;
	КонецЕсли;
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка
		Или ДополнительныеСвойства.Свойство("адаптер_ЭтоЗагрузкаДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.Рейс Тогда
		РучнаяКорректировкаТранспортныхРасходов = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = РасширенныеДанныеЗаказов();
	ОпределитьВидПеревозки(ДанныеЗаполнения);
	Если Не МаршрутУказанВручную Тогда
		ОпределитьМаршрут();
	КонецЕсли;
	
	Документы.битМаршрутныйЛист.РассчитатьТранспортныеРасходы(ЭтотОбъект, Ложь);

	Если ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист Тогда
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Заказы", "МаксимальныйКодСтрокиЗаказы");
	КонецЕсли;
	
	ЗаказыОпределитьСуммыДокументов();
	ЗаказыОпределитьСтраховыеПремии();
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		ОпределитьСклад();
	КонецЕсли;
	
	ЗафиксироватьИзмененияПередЗаписью();
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	Если ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.Рейс Тогда
		СформироватьДвиженияРаспределенияЗатрат(Отказ);
		Документы.битМаршрутныйЛист.УстановитьСтатусРейса(Ссылка, СтатусРейса);
	КонецЕсли;
	
	Документы.битМаршрутныйЛист.ЗаполнитьТранспортнуюИнформацию(ЭтотОбъект);

КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	Если Не УсловныйМаршрутныйЛист
		И ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист Тогда
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Ссылка, Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьРейсы);
	КонецЕсли;

	ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаказыОпределитьСтраховыеПремии()
	Если ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист Тогда
		Возврат;
	КонецЕсли;   
	ОтборВозмещаемые = Новый Структура("ВидТранспортныхРасходов", Перечисления.бг_ВидыТранспортныхРасходов.СтрахованиеВозмещаемое);
	ОтборНевозмещаемые = Новый Структура("ВидТранспортныхРасходов", Перечисления.бг_ВидыТранспортныхРасходов.СтрахованиеНевозмещаемое);
	СуммаПремии = Расходы.Выгрузить(ОтборВозмещаемые).Итог("Сумма") + Расходы.Выгрузить(ОтборНевозмещаемые).Итог("Сумма");
	СуммаДокументов = Заказы.Итог("СуммаДокумента");
	Для каждого СтрокаЗаказ Из Заказы Цикл
		Если СуммаДокументов = 0 Тогда
			СтрокаЗаказ.СтраховаяПремия = 0;
		Иначе
			СтрокаЗаказ.СтраховаяПремия = СуммаПремии * СтрокаЗаказ.СуммаДокумента / СуммаДокументов;
		КонецЕсли;
		СуммаДокументов = СуммаДокументов - СтрокаЗаказ.СуммаДокумента;
		СуммаПремии = СуммаПремии - СтрокаЗаказ.СтраховаяПремия;
	КонецЦИкла;
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииМаршрутногоЛиста(МаршрутныйЛист)
	ВидДокумента      = Перечисления.бг_ВидыМаршрутныхЛистов.Рейс;
	ДокументОснование = МаршрутныйЛист;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполнениеРейсаПоМаршрутномуЛисту();
	Запрос.УстановитьПараметр("Ссылка", МаршрутныйЛист);
	Запрос.УстановитьПараметр("Заказы",
			Заказы.Выгрузить(, "КодСтроки, ПростойОтдел, ПростойПояснение, ВозвратОтдел, ВозвратПояснение"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = Результат[Результат.ВГраница() - 3].Выбрать();
	РеквизитыШапки.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
	РучнаяКорректировкаТранспортныхРасходов = Истина;
	ТаблицаЗаказы = Результат[Результат.ВГраница() - 2].Выгрузить();
	Заказы.Загрузить(ТаблицаЗаказы);
	
	Если Не Документы.битМаршрутныйЛист.РейсОтгружен(ЭтотОбъект) Или Расходы.Количество() = 0 Тогда
		РасходыПустые = РегистрыСведений.бг_СоответствиеВидовТранспортныхРасходовСтатьямРасходов.ПолучитьСоответствиеСтатей();
		Расходы.Загрузить(РасходыПустые);
		ВыборкаРасходы = Результат[Результат.ВГраница() - 1].Выбрать();
		Пока ВыборкаРасходы.Следующий() Цикл
			Если Не ВыборкаРасходы.Сумма = 0 Тогда
				ЗаполнитьСуммуТранспортныхРасходов(ВыборкаРасходы.ВидТранспортныхРасходов, ВыборкаРасходы.Сумма);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаНомераПломб = Результат[Результат.ВГраница()].Выбрать();
	ЗаполнитьНомераПломб(ВыборкаНомераПломб);
КонецПроцедуры

Функция ТекстЗапросаЗаполнениеРейсаПоМаршрутномуЛисту()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Заказы.КодСтроки КАК КодСтроки,
	|	Заказы.ПростойОтдел КАК ПростойОтдел,
	|	Заказы.ПростойПояснение КАК ПростойПояснение,
	|	Заказы.ВозвратОтдел КАК ВозвратОтдел,
	|	Заказы.ВозвратПояснение КАК ВозвратПояснение
	|ПОМЕСТИТЬ ДанныеТекущийДокумент
	|ИЗ
	|	&Заказы КАК Заказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистЗаказы.Заказ КАК Заказ,
	|	МаршрутныйЛистЗаказы.ПунктНазначения КАК ПунктНазначения,
	|	МаршрутныйЛистЗаказы.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойОтдел, НЕОПРЕДЕЛЕНО) КАК ПростойОтдел,
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойПояснение, """") КАК ПростойПояснение,
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратОтдел, НЕОПРЕДЕЛЕНО) КАК ВозвратОтдел,
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратПояснение, """") КАК ВозвратПояснение,
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументОтгрузки
	|ПОМЕСТИТЬ ДокументыОтгрузки
	|ИЗ
	|	Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ПО (МаршрутныйЛистЗаказы.Ссылка = &Ссылка)
	|			И МаршрутныйЛистЗаказы.Заказ = РеализацияТоваровУслуг.ЗаказКлиента
	|			И (РеализацияТоваровУслуг.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТекущийДокумент КАК ДанныеТекущийДокумент
	|		ПО МаршрутныйЛистЗаказы.КодСтроки = ДанныеТекущийДокумент.КодСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистЗаказы.Заказ,
	|	МаршрутныйЛистЗаказы.ПунктНазначения,
	|	МаршрутныйЛистЗаказы.КодСтроки,
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойОтдел, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойПояснение, """"),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратОтдел, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратПояснение, """"),
	|	ПриобретениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслуг
	|		ПО (МаршрутныйЛистЗаказы.Ссылка = &Ссылка)
	|			И МаршрутныйЛистЗаказы.Заказ = ПриобретениеТоваровУслуг.ЗаказПоставщику
	|			И (ПриобретениеТоваровУслуг.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТекущийДокумент КАК ДанныеТекущийДокумент
	|		ПО МаршрутныйЛистЗаказы.КодСтроки = ДанныеТекущийДокумент.КодСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистЗаказы.Заказ,
	|	МаршрутныйЛистЗаказы.ПунктНазначения,
	|	МаршрутныйЛистЗаказы.КодСтроки,
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойОтдел, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойПояснение, """"),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратОтдел, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратПояснение, """"),
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|		ПО (МаршрутныйЛистЗаказы.Ссылка = &Ссылка)
	|			И МаршрутныйЛистЗаказы.Заказ = ПеремещениеТоваров.ЗаказНаПеремещение
	|			И (ПеремещениеТоваров.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТекущийДокумент КАК ДанныеТекущийДокумент
	|		ПО МаршрутныйЛистЗаказы.КодСтроки = ДанныеТекущийДокумент.КодСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МаршрутныйЛистЗаказы.Заказ,
	|	МаршрутныйЛистЗаказы.ПунктНазначения,
	|	МаршрутныйЛистЗаказы.КодСтроки,
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойОтдел, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ПростойПояснение, """"),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратОтдел, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(ДанныеТекущийДокумент.ВозвратПояснение, """"),
	|	ПередачаТоваровХранителю.Ссылка
	|ИЗ
	|	Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаТоваровХранителю.Товары КАК ПередачаТоваровХранителю
	|		ПО (МаршрутныйЛистЗаказы.Ссылка = &Ссылка)
	|			И МаршрутныйЛистЗаказы.Заказ = ПередачаТоваровХранителю.ЗаказКлиента
	|			И (ПередачаТоваровХранителю.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТекущийДокумент КАК ДанныеТекущийДокумент
	|		ПО МаршрутныйЛистЗаказы.КодСтроки = ДанныеТекущийДокумент.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛист.Дата КАК Дата,
	|	МаршрутныйЛист.Автомобиль КАК Автомобиль,
	|	МаршрутныйЛист.ВидПеревозки КАК ВидПеревозки,
	|	МаршрутныйЛист.ВидПРР КАК ВидПРР,
	|	МаршрутныйЛист.Водитель КАК Водитель,
	|	МаршрутныйЛист.ДоговорНаВладение КАК ДоговорНаВладение,
	|	МаршрутныйЛист.ДоговорНаВладениеПрицеп КАК ДоговорНаВладениеПрицеп,
	|	МаршрутныйЛист.ДоговорНаПеревозку КАК ДоговорНаПеревозку,
	|	МаршрутныйЛист.Организация КАК Организация,
	|	МаршрутныйЛист.ЗаявкаОтправлена КАК ЗаявкаОтправлена,
	|	МаршрутныйЛист.МаршрутДоставки КАК МаршрутДоставки,
	|	МаршрутныйЛист.МаршрутУказанВручную КАК МаршрутУказанВручную,
	|	МаршрутныйЛист.МыГрузимТовар КАК МыГрузимТовар,
	|	МаршрутныйЛист.НомерВорот КАК НомерВорот,
	|	МаршрутныйЛист.НомерКонтейнера КАК НомерКонтейнера,
	|	МаршрутныйЛист.Перевозчик КАК Перевозчик,
	|	МаршрутныйЛист.ПериодВыгрузки КАК ПериодВыгрузки,
	|	МаршрутныйЛист.ПлановыйПробегПоРейсу КАК ПлановыйПробегПоРейсу,
	|	МаршрутныйЛист.Прицеп КАК Прицеп,
	|	МаршрутныйЛист.Склад КАК Склад,
	|	МаршрутныйЛист.СтоимостьПРР КАК СтоимостьПРР,
	|	МаршрутныйЛист.СтраховаяСтавка КАК СтраховаяСтавка,
	|	МаршрутныйЛист.Телефон КАК Телефон,
	|	МаршрутныйЛист.ТипВладенияТС КАК ТипВладенияТС,
	|	МаршрутныйЛист.ТипКузова КАК ТипКузова,
	|	МаршрутныйЛист.ТипРейса КАК ТипРейса,
	|	МаршрутныйЛист.КлассГрузоподъемности КАК КлассГрузоподъемности,
	|	МаршрутныйЛист.Экспедитор КАК Экспедитор,
	|	МаршрутныйЛист.ПеревозчикПартнер КАК ПеревозчикПартнер,
	|	МаршрутныйЛист.СубподрядчикПартнер КАК СубподрядчикПартнер,
	|	МаршрутныйЛист.Субподрядчик КАК Субподрядчик,
	|	МаршрутныйЛист.ДоговорСубподряда КАК ДоговорСубподряда,
	|	МаршрутныйЛист.ДатаПрибытия КАК ДатаПрибытия,
	|	МаршрутныйЛист.Ответственный КАК Ответственный,
	|	МаршрутныйЛист.Проведен КАК Проведен,
	|	МаршрутныйЛист.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.битМаршрутныйЛист КАК МаршрутныйЛист
	|ГДЕ
	|	МаршрутныйЛист.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОтгрузки.Заказ КАК Заказ,
	|	ДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ДокументыОтгрузки.КодСтроки КАК КодСтроки,
	|	ДокументыОтгрузки.ПунктНазначения КАК ПунктНазначения,
	|	ДокументыОтгрузки.ПростойОтдел КАК ПростойОтдел,
	|	ДокументыОтгрузки.ПростойПояснение КАК ПростойПояснение,
	|	ДокументыОтгрузки.ВозвратОтдел КАК ВозвратОтдел,
	|	ДокументыОтгрузки.ВозвратПояснение КАК ВозвратПояснение
	|ИЗ
	|	ДокументыОтгрузки КАК ДокументыОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛистРасходы.ВидТранспортныхРасходов КАК ВидТранспортныхРасходов,
	|	МаршрутныйЛистРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	МаршрутныйЛистРасходы.Сумма КАК Сумма
	|ИЗ
	|	Документ.битМаршрутныйЛист.Расходы КАК МаршрутныйЛистРасходы
	|ГДЕ
	|	МаршрутныйЛистРасходы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТранспортнаяИнформация.НомераПломб КАК НомераПломб
	|ИЗ
	|	ДокументыОтгрузки КАК ДокументыОтгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|		ПО ДокументыОтгрузки.Заказ = ТранспортнаяИнформация.Объект";
	
	Возврат ТекстЗапроса;
КонецФункции

Процедура ЗаполнитьНомераПломб(ВыборкаНомераПломб)
	НомераПломб = "";
	
	Пока ВыборкаНомераПломб.Следующий() Цикл
		НомераПломб = НомераПломб + ?(ПустаяСтрока(НомераПломб), "", ", ") + ВыборкаНомераПломб.НомераПломб;
	КонецЦикла;
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		ДатаСоздания  = ТекущаяДатаСеанса();
		Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
		СтраховаяСтавка = Справочники.бг_СтавкиСтраховыхКомпаний.БезСтраховки();
		РасходыПустые = РегистрыСведений.бг_СоответствиеВидовТранспортныхРасходовСтатьямРасходов.ПолучитьСоответствиеСтатей();
		Расходы.Загрузить(РасходыПустые);
	КонецЕсли;
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ВзвестиФлагОтгрузкаИзERPВИстину", Организация) Тогда
		ОтгрузкаИзERP = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОпределитьМаршрут()
	ПунктыНазначения = Заказы.ВыгрузитьКолонку("ПунктНазначения");	
	МаршрутДоставки = Справочники.битПунктыНазначения.МаршрутПунктовНазначения(ПунктыНазначения);
КонецПроцедуры

Процедура ВыполнитьКонтрольБлокировкиИзменения(Отказ)
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", Заказы.Выгрузить(, "Заказ, ДокументОтгрузки"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("ТипРейса", ТипРейса);
	
	ТипыРейсовПоРегионам = Новый Массив;
	ТипыРейсовПоРегионам.Добавить(Перечисления.бг_ТипыРейсов.ПоРегионамТранзит);
	ТипыРейсовПоРегионам.Добавить(Перечисления.бг_ТипыРейсов.ПоРегионамПоследняяМиля);
	ТипыРейсовПоРегионам.Добавить(Перечисления.бг_ТипыРейсов.ПоРегионамКомбинированный);
	Запрос.УстановитьПараметр("ТипыРейсовПоРегионам", ТипыРейсовПоРегионам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказы.Заказ КАК Заказ,
	|	Заказы.ДокументОтгрузки КАК ДокументОтгрузки
	|ПОМЕСТИТЬ ЗаказыТекущийДокумент
	|ИЗ
	|	&Заказы КАК Заказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛист.Номер КАК Номер,
	|	МаршрутныйЛист.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаказы.Заказ) КАК Заказ
	|ИЗ
	|	ЗаказыТекущийДокумент КАК ЗаказыТекущийДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ПО (&ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист))
	|			И ЗаказыТекущийДокумент.Заказ = МаршрутныйЛистЗаказы.Заказ
	|			И (НЕ &ТипРейса В (&ТипыРейсовПоРегионам))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист КАК МаршрутныйЛист
	|		ПО (МаршрутныйЛистЗаказы.Ссылка = МаршрутныйЛист.Ссылка)
	|			И (МаршрутныйЛист.Проведен)
	|			И (МаршрутныйЛист.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист))
	|			И (МаршрутныйЛист.Ссылка <> &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаршрутныйЛист.Номер КАК Номер,
	|	МаршрутныйЛист.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаказы.ДокументОтгрузки) КАК ДокументОтгрузки
	|ИЗ
	|	ЗаказыТекущийДокумент КАК ЗаказыТекущийДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист.Заказы КАК МаршрутныйЛистЗаказы
	|		ПО (&ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.Рейс))
	|			И ЗаказыТекущийДокумент.ДокументОтгрузки = МаршрутныйЛистЗаказы.ДокументОтгрузки
	|			И (НЕ &ТипРейса В (&ТипыРейсовПоРегионам))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битМаршрутныйЛист КАК МаршрутныйЛист
	|		ПО (МаршрутныйЛистЗаказы.Ссылка = МаршрутныйЛист.Ссылка)
	|			И (МаршрутныйЛист.Проведен)
	|			И (МаршрутныйЛист.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.Рейс))
	|			И (МаршрутныйЛист.Ссылка <> &Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ЗаказыТекущийДокумент.Заказ) КАК Заказ,
	|	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Ссылка) КАК ДокументОтгрузки
	|ИЗ
	|	ЗаказыТекущийДокумент КАК ЗаказыТекущийДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО (&ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист))
	|			И ЗаказыТекущийДокумент.Заказ = РеализацияТоваровУслугТовары.ЗаказКлиента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (РеализацияТоваровУслугТовары.Ссылка = РеализацияТоваровУслуг.Ссылка)
	|			И (РеализацияТоваровУслуг.Проведен)";
	Результат = Запрос.ВыполнитьПакет();
	
	РасширенныеПраваЛогиста = Пользователи.РолиДоступны("бг_РасширенныеПраваЛогиста", , Ложь);
	
	// Дублирование включения заказов в маршрутные листы
	Выборка = Результат[Результат.ВГраница() - 2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(
						НСтр("ru = '%1 включен в маршрутный лист №%2 от %3'"),
						Выборка.Заказ,
						Выборка.Номер,
						Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
	// Дублирование включения накладных в рейсы
	Выборка = Результат[Результат.ВГраница() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Документ %1 включен в рейс №%2 от %3'"),
						Выборка.ДокументОтгрузки,
						Выборка.Номер,
						Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
	// Наличие РТУ для заказов маршрутного листа
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Для документа %1 уже создан документ %2. Запрещено редактировать маршрутный лист, если к заказу уже создан документ реализации'"),
						Выборка.Заказ,
						Выборка.ДокументОтгрузки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		Если Не РасширенныеПраваЛогиста Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СформироватьДвиженияРаспределенияЗатрат(Отказ)
	Движения.бг_ПредполагаемоеРаспределениеЗатрат.Записывать = Истина;
	
	БазаРаспределения = Документы.битМаршрутныйЛист.БазаРаспределенияТранспортныхРасходов(Ссылка, Истина);
	КоэффициентИтог = БазаРаспределения.Итог("Коэффициент");
	Если КоэффициентИтог = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = РегистрыСведений.бг_СтавкиНалоговКонтрагентов.СтавкаНДС(Перевозчик, Дата);
	Если Не ЗначениеЗаполнено(СтавкаНДС)
		И ЗначениеЗаполнено(ДоговорНаПеревозку) Тогда
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорНаПеревозку, "СтавкаНДС");
	КонецЕсли;
	
	Для Каждого СтрокаРасход Из Расходы Цикл
		Если СтрокаРасход.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаРаспределить = СтрокаРасход.Сумма;
		КоэффициентИтогТекущий = КоэффициентИтог;
		
		Для Каждого СтрокаБазаРаспределения Из БазаРаспределения Цикл
			Если СуммаРаспределить = 0
				Или КоэффициентИтогТекущий = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаБазаРаспределения.Коэффициент = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДвижения = Движения.бг_ПредполагаемоеРаспределениеЗатрат.Добавить();
			СтрокаДвижения.Период = Дата;
			СтрокаДвижения.ДокументОтгрузки = СтрокаБазаРаспределения.ДокументОтгрузки;
			СтрокаДвижения.СтатьяРасходов = СтрокаРасход.СтатьяРасходов;
			СтрокаДвижения.ВидТранспортныхРасходов = СтрокаРасход.ВидТранспортныхРасходов;
			СтрокаДвижения.Номенклатура = СтрокаБазаРаспределения.Номенклатура;
			СтрокаДвижения.Рейс = Ссылка;
			СтрокаДвижения.Сумма = СуммаРаспределить / КоэффициентИтогТекущий * СтрокаБазаРаспределения.Коэффициент;
			СтрокаДвижения.Количество = СтрокаБазаРаспределения.Количество;
			СтрокаДвижения.ЦФО = СтрокаБазаРаспределения.ЦФО;
			СтрокаДвижения.СуммаОтгрузки = СтрокаБазаРаспределения.СуммаСНДС;
			СтрокаДвижения.СтавкаНДС = СтавкаНДС;
			
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтрокаДвижения.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаДвижения.Сумма, СтавкаНДС, Истина);
			КонецЕсли;
			
			СуммаРаспределить = СуммаРаспределить - СтрокаДвижения.Сумма;
			КоэффициентИтогТекущий = КоэффициентИтогТекущий - СтрокаБазаРаспределения.Коэффициент;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОтразитьДополнительныеСведенияЗаказаКлиента(Отказ)
	
	Если Отказ
		Или ДополнительныеСвойства.Свойство("бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению")
		И ДополнительныеСвойства.бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидДокумента = Перечисления.бг_ВидыМаршрутныхЛистов.МаршрутныйЛист Тогда
		
		Если ДополнительныеСвойства.Свойство("УдаленныеЗаказыИзДокумента") Тогда
			
			Для Каждого ЗаказКлиента Из ДополнительныеСвойства.УдаленныеЗаказыИзДокумента Цикл
				ДобавитьОбъектДляОтложеннойОбработки(ЗаказКлиента);
			КонецЦикла;
					
		КонецЕсли;
		
		ЗаказыКлиентов = ОбщегоНазначения.ВыгрузитьКолонку(Заказы, "Заказ", Истина);
			
		Для Каждого ЗаказКлиента Из ЗаказыКлиентов Цикл
			ДобавитьОбъектДляОтложеннойОбработки(ЗаказКлиента);
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗафиксироватьИзмененияПередЗаписью()
	
	ПроверяемыеТабличныеЧасти = Новый Структура;
	ПроверяемыеТабличныеЧасти.Вставить("Заказы");

	ИзмененияДокумента = бг_ОбщегоНазначенияСервер.ИзмененияОбъекта(ЭтотОбъект,, ПроверяемыеТабличныеЧасти);
	
	СписокЗаказовКлиента = Новый Массив;
	
	Если ИзмененияДокумента.Свойство("ТабличныеЧасти") Тогда
		
		Для Каждого ТабличнаяЧасть Из ИзмененияДокумента.ТабличныеЧасти Цикл
			
			Если ТабличнаяЧасть.Ключ = "Заказы" Тогда
				
				Для Каждого СтрокаИзменения Из ТабличнаяЧасть.Значение Цикл
					
					Если СтрокаИзменения.НомерСтроки < 0 Тогда
						СписокЗаказовКлиента.Добавить(СтрокаИзменения.Заказ);
					КонецЕсли;
					
				КонецЦикла;
				
				ДополнительныеСвойства.Вставить("УдаленныеЗаказыИзДокумента", СписокЗаказовКлиента);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбъектДляОтложеннойОбработки(ЗаказКлиента)

	РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
		ЗаказКлиента,
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтразитьДополнительныеСведенияЗаказаКлиента,,
		Новый ХранилищеЗначения(
			РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.ПоказателиПоТипуДокумента(Ссылка)));
	
КонецПроцедуры

#КонецОбласти
