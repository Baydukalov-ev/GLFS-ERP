#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура создана из типовой процедуры ЗаполнитьУсловияПродажПоУмолчанию
// Добавлен параметр ЗаполнитьПараметрыНДС
//
Процедура бг_ЗаполнитьУсловияПродажПоУмолчанию(ЗаполнитьПараметрыНДС = Ложь) Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено (Партнер) ИЛИ НЕ ИспользоватьСоглашенияСКлиентами Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер, 
			Новый Структура(
			"ВыбранноеСоглашение,
			|ПустаяСсылкаДокумента", 
			Соглашение,
			Документы.ВозвратТоваровОтКлиента.ПустаяСсылка()));
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
//#Удаление			
			//Если НЕ ИспользоватьСоглашенияСКлиентами ИЛИ 
			//	(Соглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
//#КонецУдаления
//#Вставка
			СоглашениеИзменено = НЕ ИспользоватьСоглашенияСКлиентами ИЛИ 
				(Соглашение <> УсловияПродажПоУмолчанию.Соглашение И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение));
			Если СоглашениеИзменено ИЛИ ЗаполнитьПараметрыНДС Тогда				
//#КонецВставки
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
			
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ВозвратТоваровОтКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)

	Если Отказ Или ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	бг_СерииНоменклатуры.АктуализироватьНоменклатуруВСерияхТаблицы(Товары);
	бг_СерииНоменклатуры.ЗаполнитьДокументВыпускаВСерияхТаблицы(Товары, Ссылка);
	бг_СерииНоменклатуры.ЗаполнитьСертификатыНоменклатуры(Товары);
	
	бг_АктуализироватьСерии();
	бг_АктуализироватьРасширенныйСтатусТТНВходящей();
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Отказ Тогда
		бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ);
	КонецЕсли;
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	бг_АкцизПоПриобретеннымЦенностям.Очистить();
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(ЭтотОбъект, ЭтотОбъект.Товары);
КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(ЭтотОбъект, ЭтотОбъект.Товары);
	Справочники.СертификатыНоменклатуры.бг_ЗаполнитьСертификатНоменклатурыПоУмолчанию(Товары);
	ЗаполнитьДокументПоТТНВходящаяЕГАИС(ДанныеЗаполнения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АкцизыПоПриобретеннымЦенностям

Процедура бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ВозвратТоваровОтКлиентаЛокализация.бг_ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыСостоянияСписываемогоСырья = ВозвратТоваровОтКлиентаЛокализация.бг_СтатусыСостоянияСписываемогоСырья();
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаТаблицаТовары());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиАкцизовПоПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиРеализованнойПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаРасчетСписанияАкцизовПоПродукции());
	МассивТекстов.Добавить(ТекстЗапросаДанныеРаспределения());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("Ссылка",           Ссылка);
	Если ДополнительныеСвойства.Свойство("бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям")
		И ДополнительныеСвойства.бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям = Истина Тогда
		ДатаОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	Иначе
		ДатаОстатков = '00010101';
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатков",     ДатаОстатков);
	Запрос.УстановитьПараметр("Товары",           Товары.Выгрузить(, "НомерСтроки, Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("СтатусыАкциза",    СтатусыСостоянияСписываемогоСырья.СтатусыАкциза);
	Запрос.УстановитьПараметр("СостоянияСырья",   СтатусыСостоянияСписываемогоСырья.СостоянияСырья);
	Запрос.УстановитьПараметр("ТипМестаХранения", Перечисления.бг_ТипыМестХраненияПодакцизнойПродукции.Склад);
	
	ТочностьУчетаМатериалов = РегистрыНакопления.бг_АкцизПоПриобретеннымЦенностям.ТочностьУчетаПодакцизныхМатериалов();
	Запрос.УстановитьПараметр("ТочностьУчета", ТочностьУчетаМатериалов);
	
	Результат = Запрос.ВыполнитьПакет();
	бг_АкцизПоПриобретеннымЦенностям.Загрузить(Результат[Результат.ВГраница() - 1].Выгрузить());
	
	// распределение остатков подакцизного сырья на серии возвращаемой продукции
	ДанныеРаспределения = Результат[Результат.ВГраница()].Выгрузить();
	
	бг_АкцизПоПриобретеннымЦенностям.Количество();
	Для ИндексСтроки = 0 По бг_АкцизПоПриобретеннымЦенностям.Количество() - 1 Цикл
		Строка = бг_АкцизПоПриобретеннымЦенностям[ИндексСтроки];
		СтрокиРаспределения = ДанныеРаспределения.НайтиСтроки(Новый Структура("СерияРеализации", Строка.СерияПродукции));
		
		Количество = Строка.Количество;
		Строка.Количество = - Строка.Количество;
		БазаРаспределения = 0;
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			БазаРаспределения = БазаРаспределения + СтрокаРаспределения.Количество;
		КонецЦикла;
		
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			НоваяСтрока = бг_АкцизПоПриобретеннымЦенностям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.СерияПродукции = СтрокаРаспределения.Серия;
			НоваяСтрока.СостояниеСырья = Перечисления.бг_СостоянияПодакцизногоСырья.ВГотовойПродукции;
			НоваяСтрока.СтатусАкциза = Перечисления.бг_СостоянияОплатыВходящегоАкциза.АкцизПоВозвращеннойПродукции;
			НоваяСтрока.Количество = Количество * СтрокаРаспределения.Количество / БазаРаспределения;
			
			БазаРаспределения = БазаРаспределения - СтрокаРаспределения.Количество;
			Количество = Количество - НоваяСтрока.Количество;
		КонецЦикла;
	
	КонецЦикла;
КонецПроцедуры

Функция ТекстЗапросаДанныеРаспределения()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СерииНоменклатуры.бг_СерияРеализации, ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Серия
	|		ИНАЧЕ СерииНоменклатуры.бг_СерияРеализации
	|	КОНЕЦ КАК СерияРеализации,
	|	Товары.Количество КАК Количество
	|ИЗ
	|	ВнешняяТаблицаТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Товары.Серия = СерииНоменклатуры.Ссылка";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

Процедура бг_АктуализироватьРасширенныйСтатусТТНВходящей()
	
	ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Ссылка);
	
	Если ДанныеТТНВходящей <> Неопределено Тогда
		Документы.ТТНВходящаяЕГАИС.бг_ОбновитьРасширенныйСтатусЕГАИС(ДанныеТТНВходящей.Документ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоТТНВходящаяЕГАИС(ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТТНВходящаяЕГАИС.Грузоотправитель.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ГрузоотправительКонтрагент,
		|	ЕСТЬNULL(ТТНВходящаяЕГАИС.Грузоотправитель.бг_ПунктРазгрузки, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК ГрузоотправительПунктРазгрузки
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &СсылкаТТНВходящаяЕГАИС";
		Запрос.УстановитьПараметр("СсылкаТТНВходящаяЕГАИС", ДанныеЗаполнения);
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ГрузоотправительКонтрагент = Выборка.ГрузоотправительКонтрагент;
			ГрузоотправительПунктРазгрузки = Выборка.ГрузоотправительПунктРазгрузки;
			Если ЗначениеЗаполнено(ГрузоотправительКонтрагент) И ТипЗнч(ГрузоотправительКонтрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				бг_Грузоотправитель = ГрузоотправительКонтрагент;
			ИначеЕсли ЗначениеЗаполнено(ГрузоотправительПунктРазгрузки) Тогда
				бг_Грузоотправитель = ГрузоотправительПунктРазгрузки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ОбщиеМеханизмы.АктуализацияСерийДокумента
Процедура бг_АктуализироватьСерии()
	
	КлючевыеПоля = "Серия, Номенклатура";
	
	СерииДокумента = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Товары,,
		КлючевыеПоля);
		
	СерииДокумента.Свернуть(КлючевыеПоля);
	
	СерииДокумента.Колонки.Добавить(
		"ДокументВыпуска",
		Метаданные.Справочники.СерииНоменклатуры.Реквизиты.бг_ДокументВыпуска.Тип);
		
	СерииДокумента.ЗаполнитьЗначения(Ссылка, "ДокументВыпуска");
	
	СерииКАктуализации = бг_СерииКАктуализации(СерииДокумента);
	
	Для Каждого ДанныеСерииКАктуализации Из СерииКАктуализации Цикл
		бг_АктуализироватьСерию(ДанныеСерииКАктуализации);
	КонецЦикла;
	
КонецПроцедуры

Функция бг_СерииКАктуализации(СерииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	СерииДокумента.ДокументВыпуска КАК ДокументВыпуска
	|ПОМЕСТИТЬ СерииДокумента
	|ИЗ
	|	&СерииДокумента КАК СерииДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	СерииНоменклатуры.бг_ДокументВыпуска КАК ДокументВыпуска
	|ИЗ
	|	СерииДокумента КАК СерииДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО СерииДокумента.Серия = СерииНоменклатуры.Ссылка
	|ГДЕ
	|	(СерииНоменклатуры.бг_Номенклатура <> СерииДокумента.Номенклатура
	|			ИЛИ СерииНоменклатуры.бг_ДокументВыпуска <> СерииДокумента.ДокументВыпуска)";
	
	Запрос.УстановитьПараметр("СерииДокумента", СерииДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура бг_АктуализироватьСерию(ДанныеСерииКАктуализации)
	
	СерияОбъект = ДанныеСерииКАктуализации.Серия.ПолучитьОбъект();
	
	ЕстьИзменения = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСерииКАктуализации.Номенклатура) Тогда
		СерияОбъект.бг_Номенклатура = ДанныеСерииКАктуализации.Номенклатура;
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСерииКАктуализации.ДокументВыпуска) Тогда
		СерияОбъект.бг_ДокументВыпуска = ДанныеСерииКАктуализации.ДокументВыпуска;
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		СерияОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.АктуализацияСерийДокумента

#КонецОбласти

#КонецЕсли
