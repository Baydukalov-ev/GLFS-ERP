#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СоответствиеПолейДокументаВидамТранспортныхРасходов() Экспорт
	СоответствиеПолей = Новый Соответствие;
	
	РеквизитыРаспределениеЗатрат = Метаданные.Документы.битРаспределениеТранспортныхРасходов.ТабличныеЧасти.РаспределениеЗатрат.Реквизиты;
	ПоляДокументаРасчетИтоговойСуммы = ПоляДокументаРасчетИтоговойСуммы();
	
	СоответствиеСтатей = РегистрыСведений.бг_СоответствиеВидовТранспортныхРасходовСтатьямРасходов.ПолучитьСоответствиеСтатей();
	Для Каждого ЭлементСоответствие Из СоответствиеСтатей Цикл
		ИндексЗначения = Перечисления.бг_ВидыТранспортныхРасходов.Индекс(ЭлементСоответствие.ВидТранспортныхРасходов);
		ИмяЗначения    = Метаданные.Перечисления.бг_ВидыТранспортныхРасходов.ЗначенияПеречисления[ИндексЗначения].Имя;
		
		Если РеквизитыРаспределениеЗатрат.Найти(ИмяЗначения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствиеПолей.Вставить(ЭлементСоответствие.ВидТранспортныхРасходов,
					Новый Структура("ПолеДокумента, СтатьяРасходов, ВключатьВИтог",
												ИмяЗначения,
												ЭлементСоответствие.СтатьяРасходов,
												ПоляДокументаРасчетИтоговойСуммы.Найти(ИмяЗначения) <> Неопределено));
	КонецЦикла;
	
	Возврат СоответствиеПолей;
КонецФункции

Процедура РаспределитьТранспортныеРасходы(Документ, ВыводитьСообщенияПользователю = Истина) Экспорт
	Документ.РаспределениеЗатрат.Очистить();
	
	Рейсы = Документ.Рейсы.Выгрузить();
	
	БазаРаспределенияТранспортныхРасходов = Документы.битМаршрутныйЛист.БазаРаспределенияТранспортныхРасходов(Рейсы.ВыгрузитьКолонку("Рейс"));
	СоответствиеПолейВидамРасходов        = СоответствиеПолейДокументаВидамТранспортныхРасходов();
	
	Для Каждого СтрокаРейс Из Рейсы Цикл
		Отбор = Новый Структура("Рейс", СтрокаРейс.Рейс);
		БазаРаспределения = БазаРаспределенияТранспортныхРасходов.Скопировать(Отбор);
		
		Если БазаРаспределения.Количество() = 1
			И БазаРаспределения[0].Коэффициент = 0 Тогда
			БазаРаспределения[0].Коэффициент = 1;
		КонецЕсли;
		
		КоэффициентИтог = БазаРаспределения.Итог("Коэффициент");
		Для Каждого СтрокаБазаРаспределения Из БазаРаспределения Цикл
			Если СтрокаБазаРаспределения.Расстояние = 0 Тогда
				Если ВыводитьСообщенияПользователю Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Для документа отгрузки ""%1"" не удалось определить расстояние'"), СтрокаБазаРаспределения.ДокументОтгрузки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаБазаРаспределения.Вес = 0 Тогда
				Если ВыводитьСообщенияПользователю Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Для документа отгрузки ""%1"" не удалось определить вес'"), СтрокаБазаРаспределения.ДокументОтгрузки);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаБазаРаспределения.Коэффициент = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаРаспределение = Документ.РаспределениеЗатрат.Добавить();
			НоваяСтрокаРаспределение.Рейс = СтрокаБазаРаспределения.Рейс;
			НоваяСтрокаРаспределение.ДокументОтгрузки = СтрокаБазаРаспределения.ДокументОтгрузки;
			
			Для Каждого РаспределяемыйПоказатель Из СоответствиеПолейВидамРасходов Цикл
				ПолеДокумента = РаспределяемыйПоказатель.Значение.ПолеДокумента;
				НоваяСтрокаРаспределение[ПолеДокумента] = СтрокаРейс[ПолеДокумента] / КоэффициентИтог * СтрокаБазаРаспределения.Коэффициент;
				
				СтрокаРейс[ПолеДокумента] = СтрокаРейс[ПолеДокумента] - НоваяСтрокаРаспределение[ПолеДокумента];
			КонецЦикла;
			
			КоэффициентИтог = КоэффициентИтог - СтрокаБазаРаспределения.Коэффициент;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция РасходыПоРейсам(Рейсы) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутныйЛистРасходы.Ссылка КАК Ссылка,
	|	МаршрутныйЛистРасходы.ВидТранспортныхРасходов КАК ВидТранспортныхРасходов,
	|	МаршрутныйЛистРасходы.Сумма КАК Сумма
	|ИЗ
	|	Документ.битМаршрутныйЛист.Расходы КАК МаршрутныйЛистРасходы
	|ГДЕ
	|	МаршрутныйЛистРасходы.Ссылка В(&Рейсы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("Рейсы", Рейсы);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	РасходыПоРейсам = Новый Соответствие;
	СоответствиеПолейВидамРасходов = СоответствиеПолейДокументаВидамТранспортныхРасходов();
	
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		РасходыПоРейсу = Новый Структура;
		
		Пока Выборка.Следующий() Цикл
			ПолеДокумента = СоответствиеПолейВидамРасходов.Получить(Выборка.ВидТранспортныхРасходов);
			Если ПолеДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РасходыПоРейсу.Вставить(ПолеДокумента.ПолеДокумента, Выборка.Сумма);
		КонецЦикла;
		
		РасходыПоРейсам.Вставить(Выборка.Ссылка, РасходыПоРейсу);
	КонецЦикла;
	
	Возврат РасходыПоРейсам;
КонецФункции

Функция ПриобретениеУслуг(Организация, НомерВходящегоДокумента, ДатаВходящегоДокумента) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриобретениеУслугПрочихАктивов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|ГДЕ
	|	ПриобретениеУслугПрочихАктивов.НомерВходящегоДокумента = &НомерВходящегоДокумента
	|	И ПриобретениеУслугПрочихАктивов.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И НЕ ПриобретениеУслугПрочихАктивов.ПометкаУдаления
	|	И ПриобретениеУслугПрочихАктивов.Организация = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НомерВходящегоДокумента", НомерВходящегоДокумента);
	Запрос.УстановитьПараметр("ДатаВходящегоДокумента",  ДатаВходящегоДокумента);
	Результат = Запрос.Выполнить();
	Выборка  = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СчетФактура(Поступление, НомерСчетФактуры, ДатаСчетФактуры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование = &ДокументОснование
	|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДокументОснование", Поступление);
	Запрос.УстановитьПараметр("Номер", НомерСчетФактуры);
	Запрос.УстановитьПараметр("Дата", ДатаСчетФактуры);
	Результат = Запрос.Выполнить();
	Выборка  = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Процедура РассчитатьИтоговуюСуммуПоСтроке(СтрокаРаспределениеЗатрат, СоответствиеПолейВидыРасходов) Экспорт
	СтрокаРаспределениеЗатрат.Сумма = 0;
	Для Каждого СоответствиеПоле Из СоответствиеПолейВидыРасходов Цикл
		Если Не СоответствиеПоле.Значение.ВключатьВИтог Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРаспределениеЗатрат.Сумма = СтрокаРаспределениеЗатрат.Сумма +
					СтрокаРаспределениеЗатрат[СоответствиеПоле.Значение.ПолеДокумента];
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьКонтрольСуммыРаспределенныхРасходов(Документ, Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СуммаПоступления = СуммаПоступленияТранспортныхУслуг(Документ);
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.битРаспределениеТранспортныхРасходов") Тогда
		СуммаРаспределенныхРасходов = Документ.РаспределениеЗатрат.Итог("Сумма");
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда
		СуммаРаспределенныхРасходов = РаспределенныеТранспортныеРасходы(Документ.Ссылка);
	Иначе
		СуммаРаспределенныхРасходов = 0;
	КонецЕсли;
	
	Если СуммаПоступления <> 0
		И СуммаРаспределенныхРасходов <> 0
		И СуммаПоступления <> СуммаРаспределенныхРасходов Тогда
		
		ТекстСообщения = НСтр("ru = 'Сумма транспортных расходов не совпадает с суммой поступления услуг. Обратитесь в бухгалтерию'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоляДокументаРасчетИтоговойСуммы()
	ПоляДокумента = Новый Массив;
	ПоляДокумента.Добавить("ТранспортныеРасходыВозмещаемые");
	ПоляДокумента.Добавить("ТранспортныеРасходыНевозмещаемые");
	ПоляДокумента.Добавить("ПРРВозмещаемые");
	ПоляДокумента.Добавить("ПРРНевозмещаемые");
	ПоляДокумента.Добавить("ПростойПриПогрузкеВозмещаемый");
	ПоляДокумента.Добавить("ПростойПриПогрузкеНевозмещаемый");
	ПоляДокумента.Добавить("ПростойВозмещаемый");
	ПоляДокумента.Добавить("ПростойНевозмещаемый");
	ПоляДокумента.Добавить("ВозвратПродукции");
	ПоляДокумента.Добавить("ДоставкаТоваровОтПоставщиков");
	ПоляДокумента.Добавить("МежскладскоеПеремещениеНаемнымТранспортом");
	ПоляДокумента.Добавить("ДоставкаВМестаХранения");
	ПоляДокумента.Добавить("ЧекПрочиеДопРасходы");
	ПоляДокумента.Добавить("ХранениеПодключениеВозмещаемые");
	ПоляДокумента.Добавить("ХранениеПодключениеНевозмещаемые");
	
	Возврат ПоляДокумента;
КонецФункции

Функция СуммаПоступленияТранспортныхУслуг(Документ)
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ПриобретениеУслугПрочихАктивов") Тогда
		СуммаДокумента       = Документ.СуммаДокумента;
		Валюта               = Документ.Валюта;
		ПериодВзаиморасчетов = ?(ЗначениеЗаполнено(Документ.ДатаВходящегоДокумента),
										Документ.ДатаВходящегоДокумента,
										Документ.Дата);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументОбъект.битРаспределениеТранспортныхРасходов")
		И ЗначениеЗаполнено(Документ.Поступление) Тогда
		РеквизитыПоступления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ.Поступление,
								"Дата, СуммаДокумента, Проведен, Валюта, ДатаВходящегоДокумента");
		
		СуммаДокумента       = ?(РеквизитыПоступления.Проведен, РеквизитыПоступления.СуммаДокумента, 0);
		Валюта               = РеквизитыПоступления.Валюта;
		ПериодВзаиморасчетов = ?(ЗначениеЗаполнено(РеквизитыПоступления.ДатаВходящегоДокумента),
										РеквизитыПоступления.ДатаВходящегоДокумента,
										РеквизитыПоступления.Дата);
	Иначе
		СуммаДокумента       = 0;
		Валюта               = Неопределено;
		ПериодВзаиморасчетов = Неопределено;
	КонецЕсли;
	
	Если СуммаДокумента = 0 Тогда
		Возврат 0;
	ИначеЕсли Не ЗначениеЗаполнено(Валюта)
		Или Валюта = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		Возврат СуммаДокумента;
	Иначе
		Возврат Окр(СуммаДокумента * КурсПересчетаВалюты(Валюта, ПериодВзаиморасчетов), 2);
	КонецЕсли;
КонецФункции

Функция КурсПересчетаВалюты(Валюта, Период)
	ЗаписьРС = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Период,
		Новый Структура("Валюта", Валюта));
	
	Если ЗаписьРС.Кратность = 0 Тогда
		Возврат 1;
	Иначе
		Возврат Окр(ЗаписьРС.Курс / ЗаписьРС.Кратность, 5);
	КонецЕсли;
КонецФункции

Функция РаспределенныеТранспортныеРасходы(ПоступлениеТранспортныхРасходов)
	Если Не ЗначениеЗаполнено(ПоступлениеТранспортныхРасходов) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(РаспределениеЗатраты.Сумма), 0) КАК Сумма
	|ИЗ
	|	Документ.битРаспределениеТранспортныхРасходов КАК Распределение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битРаспределениеТранспортныхРасходов.РаспределениеЗатрат КАК РаспределениеЗатраты
	|		ПО (Распределение.Поступление = &Поступление)
	|			И (Распределение.Проведен)
	|			И Распределение.Ссылка = РаспределениеЗатраты.Ссылка";
	Запрос.УстановитьПараметр("Поступление", ПоступлениеТранспортныхРасходов);
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецЕсли
