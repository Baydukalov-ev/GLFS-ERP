#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Документ.битРаспределениеТранспортныхРасходов.Форма.ФормаПодбораРейсов" Тогда
		ДанныеРасходы = РасходыПоРейсам(ВыбранноеЗначение);
		
		Для Каждого ДокументРейс Из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.Рейсы.Добавить();
			НоваяСтрока.Рейс = ДокументРейс;
			
			ДанныеРасход = ДанныеРасходы.Получить(ДокументРейс);
			Если ДанныеРасход <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРасход);
			КонецЕсли;
		КонецЦикла;
		
		РассчитатьИтоговуюСуммуПоСтрокам();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РейсыПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Рейсы.ТекущаяСтрока;
	
	РассчитатьИтоговуюСуммуПоСтрокам(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеПриИзменении(Элемент)
	ЗаполнитьРеквизитыДокументыПоПоступлению();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РейсыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Не Копирование Тогда
		Отказ = Истина;
		
		ОткрытьФормуПодобраРейсов();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьРейсы(Команда)
	ОткрытьФормуПодобраРейсов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРейсамиПеревозчика(Команда)
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран перевозчик'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Поступление) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрано поступление услуг'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , , "Объект.Поступление");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРейсамиПеревозчикаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьТранспортныеРасходы(Команда)
	РаспределитьТранспортныеРасходыНаСервере();
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуПодобраРейсов()
	ПараметрыПодбор = Новый Структура("Организация, Склад, Перевозчик", Объект.Организация, Объект.Склад, Объект.Контрагент);
	
	ОткрытьФорму("Документ.битРаспределениеТранспортныхРасходов.Форма.ФормаПодбораРейсов",
					ПараметрыПодбор, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
КонецПроцедуры

&НаСервере
Процедура РаспределитьТранспортныеРасходыНаСервере()
	Документы.битРаспределениеТранспортныхРасходов.РаспределитьТранспортныеРасходы(Объект);
КонецПроцедуры

&НаКлиенте
Процедура РейсыРейсПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Рейсы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРасходы     = РасходыПоРейсам(ТекущиеДанные.Рейс);
	ДанныеРасходыРейс = ДанныеРасходы.Получить(ТекущиеДанные.Рейс);
	Если ДанныеРасходыРейс <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеРасходыРейс);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция РасходыПоРейсам(Знач Рейсы)
	Если Не ТипЗнч(Рейсы) = Тип("Массив") Тогда
		Рейсы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Рейсы);
	КонецЕсли;
	
	Расходы = Документы.битРаспределениеТранспортныхРасходов.РасходыПоРейсам(Рейсы);
	Возврат Расходы;
КонецФункции

&НаСервере
Процедура ЗаполнитьРейсамиПеревозчикаНаСервере()
	Объект.Рейсы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаршрутныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.битМаршрутныйЛист КАК МаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битРаспределениеТранспортныхРасходов.Рейсы КАК РаспределениеРасходовРейсы
	|		ПО МаршрутныйЛист.Ссылка = РаспределениеРасходовРейсы.Рейс
	|			И (РаспределениеРасходовРейсы.Ссылка.Проведен)
	|			И (РаспределениеРасходовРейсы.Ссылка <> &ТекущийДокумент)
	|ГДЕ
	|	МаршрутныйЛист.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.бг_ВидыМаршрутныхЛистов.Рейс)
	|	И МаршрутныйЛист.Проведен
	|	И МаршрутныйЛист.Перевозчик = &Перевозчик
	|	И МаршрутныйЛист.Дата <= &ДатаПоступления
	|	И РаспределениеРасходовРейсы.Рейс ЕСТЬ NULL
	|	И МаршрутныйЛист.Склад В ИЕРАРХИИ(&ГруппаСкладов)";
	Запрос.УстановитьПараметр("ТекущийДокумент", Объект.Ссылка);
	Запрос.УстановитьПараметр("Перевозчик", Объект.Контрагент);
	ДатаПоступления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОБъект.Поступление, "Дата");
	Запрос.УстановитьПараметр("ДатаПоступления", КонецМесяца(ДатаПоступления));
	Запрос.УстановитьПараметр("ГруппаСкладов", Объект.Склад);
	
	Результат = Запрос.Выполнить();
	Рейсы   = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Расходы = РасходыПоРейсам(Рейсы);
	
	Для Каждого ЭлементРейс Из Рейсы Цикл
		НоваяСтрокаРейсы = Объект.Рейсы.Добавить();
		НоваяСтрокаРейсы.Рейс = ЭлементРейс;
		
		ДанныеРасход = Расходы.Получить(ЭлементРейс);
		Если ДанныеРасход <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРейсы, ДанныеРасход);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтоговуюСуммуПоСтрокам(ТекущаяСтрока = Неопределено)
	СоответствиеПолейВидыРасходов = Документы.битРаспределениеТранспортныхРасходов.СоответствиеПолейДокументаВидамТранспортныхРасходов();
	
	Если ТекущаяСтрока <> Неопределено Тогда
		СтрокаРейсы = Объект.Рейсы.НайтиПоИдентификатору(ТекущаяСтрока);
		Документы.битРаспределениеТранспортныхРасходов.РассчитатьИтоговуюСуммуПоСтроке(СтрокаРейсы,
																				СоответствиеПолейВидыРасходов);
	Иначе
		Для Каждого СтрокаРейсы Из Объект.Рейсы Цикл
			Документы.битРаспределениеТранспортныхРасходов.РассчитатьИтоговуюСуммуПоСтроке(СтрокаРейсы,
																				СоответствиеПолейВидыРасходов);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументыПоПоступлению()
	Если Не ЗначениеЗаполнено(Объект.Поступление) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриобретениеУслугПрочихАктивов.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ПриобретениеУслугПрочихАктивов.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Номер КАК НомерСчетФактуры,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Дата КАК ДатаСчетФактуры
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО ПриобретениеУслугПрочихАктивов.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|			И (СчетФактураПолученныйДокументыОснования.Ссылка.Проведен)
	|ГДЕ
	|	ПриобретениеУслугПрочихАктивов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ОБъект.Поступление);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ПеревозчикПартнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
	
	ДоговорПоУмолчанию = Документы.битМаршрутныйЛист.ДоговорНаПеревозкуПоУмолчанию(
					Объект.Организация, Объект.Контрагент, ПеревозчикПартнер, Объект.ДоговорКонтрагента);
	Объект.ДоговорКонтрагента = ДоговорПоУмолчанию;
КонецПроцедуры

#КонецОбласти
