#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	ИнициализироватьДокумент(ДанныеЗаполнения);
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	ИнициализироватьДокумент();
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Документы.битРаспределениеТранспортныхРасходов.РаспределитьТранспортныеРасходы(ЭтотОбъект);
	РассчитатьИтоговыеСуммы();
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Документы.битРаспределениеТранспортныхРасходов.ВыполнитьКонтрольСуммыРаспределенныхРасходов(ЭтотОбъект, Отказ);
		
		ЗаполнитьДокументПоступления();
		СформироватьСчетФактуру();
	КонецЕсли;
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	Движения.бг_РаспределениеЗатрат.Записывать = Истина;
	СформироватьДвиженияРаспределенияЗатрат(Отказ);
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	ВыполнитьКонтрольДублированияВключенияРейсов(Отказ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьИтоговыеСуммы()
	СоответствиеПолейВидыРасходов = Документы.битРаспределениеТранспортныхРасходов.СоответствиеПолейДокументаВидамТранспортныхРасходов();
	
	Для Каждого СтрокаРаспределениеЗатрат Из РаспределениеЗатрат Цикл
		Документы.битРаспределениеТранспортныхРасходов.РассчитатьИтоговуюСуммуПоСтроке(СтрокаРаспределениеЗатрат,
																			СоответствиеПолейВидыРасходов);
	КонецЦикла;
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	Ответственный = Пользователи.ТекущийПользователь();
КонецПроцедуры

Процедура СформироватьДвиженияРаспределенияЗатрат(Отказ)
	РаспределяемыеЗатраты = РаспределениеЗатрат.Выгрузить();
	БазаРаспределения     = Документы.битМаршрутныйЛист.БазаРаспределенияТранспортныхРасходов(Рейсы.ВыгрузитьКолонку("Рейс"), Истина);
	СоответствиеПолейВидамРасходов = Документы.битРаспределениеТранспортныхРасходов.СоответствиеПолейДокументаВидамТранспортныхРасходов();
	
	СтавкаНДС = РегистрыСведений.бг_СтавкиНалоговКонтрагентов.СтавкаНДС(Контрагент, Дата);
	Если Не ЗначениеЗаполнено(СтавкаНДС)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "СтавкаНДС");
	КонецЕсли;
	
	МетаданныеТабличнаяЧастьРасходы = Метаданные.Документы.битРаспределениеТранспортныхРасходов.ТабличныеЧасти.РаспределениеЗатрат;
	
	ТаблицаДвижения = Движения.бг_РаспределениеЗатрат.ВыгрузитьКолонки();
	Для Каждого СтрокаРаспределениеЗатрат Из РаспределяемыеЗатраты Цикл
		Отбор = Новый Структура("Рейс, ДокументОтгрузки", СтрокаРаспределениеЗатрат.Рейс, СтрокаРаспределениеЗатрат.ДокументОтгрузки);
		БазаРаспределенияСтрокиДокумента = БазаРаспределения.Скопировать(Отбор);
		
		Если БазаРаспределенияСтрокиДокумента.Количество() = 1
			И БазаРаспределенияСтрокиДокумента[0].Коэффициент = 0 Тогда
			БазаРаспределенияСтрокиДокумента[0].Коэффициент = 1;
		КонецЕсли;
		
		КоэффициентИтог = БазаРаспределенияСтрокиДокумента.Итог("Коэффициент");
		
		Для Каждого СтрокаБазаРаспределения Из БазаРаспределенияСтрокиДокумента Цикл
			Если КоэффициентИтог = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Для Каждого РаспределяемыйПоказатель Из СоответствиеПолейВидамРасходов Цикл
				ПолеДокумента = РаспределяемыйПоказатель.Значение.ПолеДокумента;
				
				Значение = СтрокаРаспределениеЗатрат[ПолеДокумента] / КоэффициентИтог * СтрокаБазаРаспределения.Коэффициент;
				
				Если Значение <> 0 Тогда
					ОписаниеТипа = МетаданныеТабличнаяЧастьРасходы.Реквизиты[ПолеДокумента].Тип;
					Значение = ОписаниеТипа.ПривестиЗначение(Значение);
					СтрокаРаспределениеЗатрат[ПолеДокумента] = СтрокаРаспределениеЗатрат[ПолеДокумента] - Значение;
					
					СтрокаДвижения = Движения.бг_РаспределениеЗатрат.Добавить();
					СтрокаДвижения.Период = Дата;
					СтрокаДвижения.Поступление = Поступление;
					СтрокаДвижения.ДокументОтгрузки = СтрокаРаспределениеЗатрат.ДокументОтгрузки;
					СтрокаДвижения.СтатьяРасходов = РаспределяемыйПоказатель.Значение.СтатьяРасходов;
					СтрокаДвижения.ВидТранспортныхРасходов = РаспределяемыйПоказатель.Ключ;
					СтрокаДвижения.Номенклатура = СтрокаБазаРаспределения.Номенклатура;
					СтрокаДвижения.Рейс = СтрокаРаспределениеЗатрат.Рейс;
					СтрокаДвижения.Сумма = Значение;
					СтрокаДвижения.Количество = СтрокаБазаРаспределения.Количество;
					СтрокаДвижения.ЦФО = СтрокаБазаРаспределения.ЦФО;
					СтрокаДвижения.СуммаОтгрузки = СтрокаБазаРаспределения.СуммаСНДС;
					СтрокаДвижения.СтавкаНДС = СтавкаНДС;
					
					Если ЗначениеЗаполнено(СтавкаНДС) Тогда
						СтрокаДвижения.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаДвижения.Сумма, СтавкаНДС, Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			КоэффициентИтог = КоэффициентИтог - СтрокаБазаРаспределения.Коэффициент;
		КонецЦикла;
	КонецЦикла;
Конецпроцедуры

Процедура ЗаполнитьДокументПоступления()
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(НомерВходящегоДокумента)
		Или Не ЗначениеЗаполнено(ДатаВходящегоДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Поступление) Тогда
		Поступление = Документы.битРаспределениеТранспортныхРасходов.ПриобретениеУслуг(Организация,
													НомерВходящегоДокумента, ДатаВходящегоДокумента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поступление)
		И Не ТребуетсяПерезаполнитьСвязанныйДокумент(Поступление, "Организация,НомерВходящегоДокумента,ДатаВходящегоДокумента,Контрагент") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Поступление) Тогда
		ПоступлениеОбъект = Поступление.ПолучитьОбъект();
	Иначе
		ПоступлениеОбъект = Документы.ПриобретениеУслугПрочихАктивов.СоздатьДокумент();
		ПоступлениеОбъект.Заполнить(Неопределено);
		ПоступлениеОбъект.Дата = Дата;
	КонецЕсли;
	
	ПоступлениеОбъект.Организация = Организация;
	ПоступлениеОбъект.НомерВходящегоДокумента = НомерВходящегоДокумента;
	ПоступлениеОбъект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
	ПоступлениеОбъект.Контрагент = Контрагент;
	ПоступлениеОбъект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	ПоступлениеОбъект.Договор = ДоговорКонтрагента;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПоступлениеОбъект.Валюта = ВалютаРеглУчета;
	ПоступлениеОбъект.ВалютаВзаиморасчетов = ВалютаРеглУчета;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПоступлениеОбъект.ЗакупкаПодДеятельность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "НалогообложениеНДС");
		
		ПоступлениеОбъект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетов(
						Ложь,,,
						ПоступлениеОбъект.Договор);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(
						ПоступлениеОбъект.Договор,
						ПоступлениеОбъект.БанковскийСчетОрганизации,
						ПоступлениеОбъект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоступлениеОбъект.ЗакупкаПодДеятельность) Тогда
		ПоступлениеОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;
	
	РежимЗаписи = ?(ПоступлениеОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ПоступлениеОбъект.Записать(РежимЗаписи);
	
	Поступление = ПоступлениеОбъект.Ссылка;
КонецПроцедуры

Функция ТребуетсяПерезаполнитьСвязанныйДокумент(ДокументСсылка, ИменаРеквизитов)
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
	Реквизиты = СтрРазделить(ИменаРеквизитов, ",", Ложь);
	Для Каждого Реквизит Из Реквизиты Цикл
		Если ЭтотОбъект[Реквизит] <> ЗначенияРеквизитов[Реквизит] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура СформироватьСчетФактуру()
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(НомерСчетФактуры)
		Или Не ЗначениеЗаполнено(ДатаСчетФактуры)
		Или Не ЗначениеЗаполнено(Поступление)
		Или Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "НалогообложениеНДС");
	Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура = Документы.битРаспределениеТранспортныхРасходов.СчетФактура(Поступление,
													НомерСчетФактуры, ДатаСчетФактуры);
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетФактура, "Номер, ДатаСоставления, Контрагент");
		Если НомерСчетФактуры = ЗначенияРеквизитов.Номер
			И ДатаСчетФактуры = ЗначенияРеквизитов.ДатаСоставления
			И Контрагент      = ЗначенияРеквизитов.Контрагент Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	Иначе
		СчетФактураОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		СчетФактураОбъект.Заполнить(Неопределено);
		СчетФактураОбъект.Дата = Дата;
		СчетФактураОбъект.ДатаСоставления = ДатаСчетФактуры;
		СчетФактураОбъект.Организация = Организация;
		
		СтрокаДокументОснование = СчетФактураОбъект.ДокументыОснования.Добавить();
		СтрокаДокументОснование.ДокументОснование = Поступление;
	КонецЕсли;
	
	СчетФактураОбъект.Номер           = НомерСчетФактуры;
	СчетФактураОбъект.ДатаСоставления = ДатаСчетФактуры;
	СчетФактураОбъект.Контрагент      = Контрагент;
	
	СчетФактураОбъект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Реквизиты = ПартнерыИКонтрагенты.РеквизитыКонтрагента(Контрагент, ДатаСчетФактуры);
		СчетФактураОбъект.ИННКонтрагента = Реквизиты.ИНН;
		СчетФактураОбъект.КППКонтрагента = Реквизиты.КПП;
	КонецЕсли;
	
	РежимЗаписи = ?(СчетФактураОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	СчетФактураОбъект.Записать(РежимЗаписи);
КонецПроцедуры

Процедура ВыполнитьКонтрольДублированияВключенияРейсов(Отказ)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейсы", Рейсы.Выгрузить(, "НомерСтроки, Рейс"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДопРасходы", ДопРасходы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Рейсы.НомерСтроки КАК НомерСтроки,
	|	Рейсы.Рейс КАК Рейс
	|ПОМЕСТИТЬ Рейсы
	|ИЗ
	|	&Рейсы КАК Рейсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеРасходов.Номер КАК Номер,
	|	РаспределениеРасходов.Дата КАК Дата,
	|	ПРЕДСТАВЛЕНИЕ(РейсыТекущийДокумент.Рейс) КАК Рейс
	|ИЗ
	|	Рейсы КАК РейсыТекущийДокумент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битРаспределениеТранспортныхРасходов.Рейсы КАК РаспределенныеРейсы
	|		ПО (НЕ &ДопРасходы)
	|			И РейсыТекущийДокумент.Рейс = РаспределенныеРейсы.Рейс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битРаспределениеТранспортныхРасходов КАК РаспределениеРасходов
	|		ПО (РаспределенныеРейсы.Ссылка = РаспределениеРасходов.Ссылка)
	|			И (РаспределениеРасходов.Проведен)
	|			И (РаспределениеРасходов.Ссылка <> &Ссылка)
	|			И (НЕ РаспределениеРасходов.ДопРасходы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рейсы.Рейс КАК Рейс,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Рейсы.НомерСтроки) КАК Количество
	|ИЗ
	|	Рейсы КАК Рейсы
	|
	|СГРУППИРОВАТЬ ПО
	|	Рейсы.Рейс
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Рейсы.НомерСтроки) > 1";
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[Результат.ВГраница() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(
						НСтр("ru = '%1 включен в распредение транспортных расходов №%2 от %3'"),
						Выборка.Рейс,
						Выборка.Номер,
						Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЦикла;
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(
						НСтр("ru = '%1 включен в распредение транспортных расходов более одного раза'"),
						Выборка.Рейс);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#КонецЕсли


