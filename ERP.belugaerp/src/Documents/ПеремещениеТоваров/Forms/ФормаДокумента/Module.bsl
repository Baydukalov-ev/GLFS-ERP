#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	бг_ДобавитьКомандуЗаполнитьСерииПоFIFO();
	бг_ДобавитьКомандуЗаполнитьОстаткамиВКладовой();
	бг_ДобавитьКомандуОсвободитьРезервыИПровести();
	бг_ДобавитьЭлементы();

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		// ОбщиеМеханизмы.ПриходныйОрдер
		бг_Склады.ДобавитьПолеПриходныйОрдерНаТовары(ЭтотОбъект);
		бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
		// Конец ОбщиеМеханизмы.ПриходныйОрдер
		
		// ОбщиеМеханизмы.РасходныйОрдер
		бг_Склады.ДобавитьПолеРасходныйОрдерНаТовары(ЭтотОбъект);
		бг_ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары();
		// Конец ОбщиеМеханизмы.РасходныйОрдер
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_ПриЧтенииНаСервереПосле(ТекущийОбъект)
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	бг_Склады.ДобавитьПолеПриходныйОрдерНаТовары(ЭтотОбъект);
	бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
	// ОбщиеМеханизмы.РасходныйОрдер
	бг_Склады.ДобавитьПолеРасходныйОрдерНаТовары(ЭтотОбъект);
	бг_ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары();
	// Конец ОбщиеМеханизмы.РасходныйОрдер
	
КонецПроцедуры

&НаСервере
Процедура бг_ПередЗаписьюНаСервереПосле(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("бг_ОсвободитьРезервыИПровести") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("бг_ОсвобождатьРезервыПриНедостаткеСвободныхОстатков");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ПриЗаписиНаСервереПосле(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
	// ОбщиеМеханизмы.РасходныйОрдер
	бг_ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары();
	// Конец ОбщиеМеханизмы.РасходныйОрдер
	
КонецПроцедуры

&НаКлиенте
&Перед("ОбработкаНавигационнойСсылки")
Процедура бг_ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	Если НавигационнаяСсылкаФорматированнойСтроки = "бг_ОформитьПриходныйОрдерНаТовары" Тогда
		СтандартнаяОбработка = Ложь;
		бг_ОткрытьФормуНовогоПриходногоОрдераНаТовары();
	КонецЕсли;
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
	// ОбщиеМеханизмы.РасходныйОрдер
	Если НавигационнаяСсылкаФорматированнойСтроки = "бг_ОформитьРасходныйОрдерНаТовары" Тогда
		СтандартнаяОбработка = Ложь;
		бг_ОформитьРасходныйОрдер();
	КонецЕсли;
	// Конец ОбщиеМеханизмы.РасходныйОрдер
	
КонецПроцедуры

&НаКлиенте
&После("ОбработкаОповещения")
Процедура бг_ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	Если ИмяСобытия = "Запись_ПриходныйОрдерНаТовары" Тогда
		бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
	КонецЕсли;
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
	// ОбщиеМеханизмы.РасходныйОрдер
	Если ИмяСобытия = "Запись_РасходныйОрдерНаТовары" Тогда
		бг_ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары();
	КонецЕсли;
	// Конец ОбщиеМеханизмы.РасходныйОрдер
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_ТоварыЗаполнитьОстаткамиВКладовой(Команда)
	Оповещение = Новый ОписаниеОповещения("бг_ТоварыЗаполнитьОстаткамиВКладовойЗавершение", ЭтотОбъект);
	Если Объект.Товары.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru='Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, КодВозвратаДиалога.Да);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыЗаполнитьОстаткамиВКладовойЗавершение(ВыбранноеЗначение, ПараметрыВопроса) Экспорт
	Если ВыбранноеЗначение = КодВозвратаДиалога.Да Тогда
		бг_ЗаполнитьОстаткиВКладовойСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыЗаполнитьСерииПоFIFO(Команда)
	
	Если Не бг_ЗаполнитьСерииПоFIFOСервер() Тогда
		ТекстПредупреждения = НСтр("ru = 'В табличной части нет товаров, по которым серии можно заполнить по FIFO.';
								|en = 'The tabular section contains no goods that can be used to fill in series by FIFO.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ОткрытьПротоколЗагрузкиИзSolvo(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ПеремещениеТоваров", Объект.Ссылка);
	ОткрытьФорму(
		"РегистрСведений.бг_ПротоколыЗагрузкиПеремещенийПоЗаданиямSolvo.Форма.ФормаПросмотраПротокола", 
		ПараметрыОткрытия, 
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ОсвободитьРезервыИПровести()
	
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ЕстьВопросыПередЗаписью", Истина);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Объект.Ссылка.Пустая());
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("бг_ОсвободитьРезервыИПровести");
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура бг_ДействияПослеЗагрузкиТовары()
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
								НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ДвижениеПродукцииИМатериалов));
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
	ПараметрыПроверкиСерий.Склад = Новый Структура("Отправитель, Получатель", Объект.СкладОтправитель, Объект.СкладПолучатель);
	ПараметрыПроверкиСерий.ПараметрыУказанияСерий = ПараметрыУказанияСерий;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбеспечениеКлиентСервер.СтруктураДействийВставитьПриИзмененииНазначения(СтруктураДействий);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьОстаткиВКладовойСервер()
	Период = Новый Граница(Объект.Дата, ВидГраницы.Включая);
	Объект.Товары.Очистить();
	Объект.Товары.Загрузить(бг_Номенклатура.ОстаткиНаСкладеНаДату(Период, Объект.СкладОтправитель, Объект.Ссылка));
	бг_ДействияПослеЗагрузкиТовары();
КонецПроцедуры

&НаСервере
Функция бг_ЗаполнитьСерииПоFIFOСервер()
	
	Если бг_Номенклатура.ЕстьСтрокиДляЗаполненияСерийПоFIFO(Объект.Товары) Тогда
		
		бг_Номенклатура.ЗаполнитьСерииПоFIFOВТЧТовары(Объект, ПараметрыУказанияСерий);
		Модифицированность = Истина;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура бг_ДобавитьКомандуЗаполнитьСерииПоFIFO()
	ИмяКоманды       = "бг_ТоварыЗаполнитьСерииПоFIFO";
	ЗаголовокКоманды = НСтр("ru = 'Заполнить серии по FIFO';
								|en = 'Fill in series by FIFO'");
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(ЭтотОбъект, ИмяКоманды,
								Элементы.ТоварыГруппаЗаполнить, ЗаголовокКоманды,
								ИмяКоманды, ИмяКоманды, Элементы.ТоварыЗаполнитьСерииПоFEFO , ВидКнопкиФормы.КнопкаКоманднойПанели);
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьКомандуЗаполнитьОстаткамиВКладовой()
	ИмяКоманды       = "бг_ТоварыЗаполнитьОстаткамиВКладовой";
	ЗаголовокКоманды = НСтр("ru = 'Заполнить остатками в кладовой'");
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(ЭтотОбъект, ИмяКоманды,
				Элементы.ТоварыГруппаЗаполнить, ЗаголовокКоманды,
				ИмяКоманды, ИмяКоманды, Элементы.ТоварыДополнитьМногооборотнойТарой, ВидКнопкиФормы.КнопкаКоманднойПанели);
	ТекущаяКоманда = Команды[ИмяКоманды];
	ТекущаяКоманда.ИзменяетСохраняемыеДанные = Истина;
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьКомандуОсвободитьРезервыИПровести()
	
	ИмяКоманды       = "бг_ОсвободитьРезервыИПровести";
	ЗаголовокКоманды = НСтр("ru = 'Освободить резервы и провести'");
	ТекущаяКнопка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект,
		ИмяКоманды,
		Элементы.ФормаКоманднаяПанель,
		ЗаголовокКоманды,
		ИмяКоманды,
		ИмяКоманды,
		Элементы.ФормаОткрытьВидыЗапасов,
		ВидКнопкиФормы.КнопкаКоманднойПанели);
	ТекущаяКнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	ТекущаяКнопка.Доступность = Пользователи.РолиДоступны("бг_ОсвобождениеРезервовПриПроведенииПеремещений");
	
	ТекущаяКоманда = Команды[ИмяКоманды];
	ТекущаяКоманда.ИзменяетСохраняемыеДанные = Истина;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементы()

	бг_ПодотчетноеЛицо = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
								ЭтотОбъект,
								"бг_ПодотчетноеЛицо",
								Элементы.Склады,
								"Объект.бг_ПодотчетноеЛицо");
								
	бг_ПодотчетноеЛицо.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
	бг_ПодотчетноеЛицо.КнопкаВыпадающегоСписка = Ложь;
	бг_ПодотчетноеЛицо.АвтоМаксимальнаяШирина = Ложь;
	бг_ПодотчетноеЛицо.МаксимальнаяШирина = 27;
	
	бг_ДобавитьЭлементыSolvo();
	
КонецПроцедуры

 #Область ПриходныйОрдерНаТовары

// ОбщиеМеханизмы.ПриходныйОрдер
&НаСервере
Процедура бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары()

	бг_Склады.ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары(
		ЭтотОбъект,
		Метаданные.Документы.ПеремещениеТоваров);

КонецПроцедуры

&НаКлиенте
Процедура бг_ОткрытьФормуНовогоПриходногоОрдераНаТовары()
	
	Основание = Новый Структура;
	Основание.Вставить("Распоряжение",               Объект.Ссылка);
	Основание.Вставить("Отправитель",                Объект.СкладОтправитель);
	Основание.Вставить("Склад",                      Объект.СкладПолучатель);
	Основание.Вставить("ДатаВходящегоДокумента",     Объект.Дата);
	Основание.Вставить("НомерВходящегоДокумента",    Объект.Номер);
	Основание.Вставить("ХозяйственнаяОперация",      Объект.ХозяйственнаяОперация);
	
	Основание.Вставить(
		"ДатаПоступления", 
		?(ЗначениеЗаполнено(Объект.ДатаПоступления), Объект.ДатаПоступления, Объект.Дата));
	
	ОткрытьФорму(
		"Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента",
		Новый Структура("Основание", Основание));
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.ПриходныйОрдер

#КонецОбласти // Конец ПриходныйОрдерНаТовары

#Область РасходныйОрдерНаТовары

// ОбщиеМеханизмы.РасходныйОрдерНаТовары
&НаСервере
Процедура бг_ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары()

	бг_Склады.ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары(
		ЭтотОбъект,
		Метаданные.Документы.ПеремещениеТоваров);

КонецПроцедуры

&НаСервере
Процедура бг_ОформитьРасходныйОрдер()
	
	ПараметрыСозданияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
	
	ПараметрыСозданияРасходныхОрдеров.Получатель = Объект.СкладПолучатель;
	
	ПараметрыСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Объект.Ссылка);
		
	ПараметрыСозданияРасходныхОрдеров.Склад = Объект.СкладОтправитель;
	
	СкладыСервер.ПереоформитьРасходныеОрдера(ПараметрыСозданияРасходныхОрдеров);
	
	бг_ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары();
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.РасходныйОрдерНаТовары

#КонецОбласти // Конец РасходныйОрдерНаТовары

&НаСервере
Процедура бг_ДобавитьЭлементыSolvo()
	
	СтраницаДополнительноПраво = Элементы.Найти("СтраницаДополнительноПраво");
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_СозданПоЗаданиюSolvo",
		СтраницаДополнительноПраво,
		"Объект.бг_СозданПоЗаданиюSolvo",,,
		"ПолеФлажка");
	ЭлементФормы.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Лево;
	ЭлементФормы.ТолькоПросмотр = Истина;
	
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ГрузSolvo",
		СтраницаДополнительноПраво,
		"Объект.бг_ГрузSolvo",,,
		"ПолеВвода");
	ЭлементФормы.ТолькоПросмотр = Истина;
	ЭлементФормы.Видимость = Объект.бг_СозданПоЗаданиюSolvo;
	
	ЗаголовокПротоколаЗагрузкиИзSolvo = НСтр("ru = 'Протокол загрузки по заданию Solvo'"); 
	ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект,
		"бг_ОткрытьПротоколЗагрузкиИзSolvo",
		СтраницаДополнительноПраво,
		ЗаголовокПротоколаЗагрузкиИзSolvo,
		"бг_ОткрытьПротоколЗагрузкиИзSolvo",
		"бг_ОткрытьПротоколЗагрузкиИзSolvo",
		Неопределено,
		ВидКнопкиФормы.Гиперссылка);
		ЭлементФормы.Видимость = Объект.бг_СозданПоЗаданиюSolvo
			Или Пользователи.РолиДоступны("бг_ОсвобождениеРезервовПриПроведенииПеремещений");
	
КонецПроцедуры

#КонецОбласти


