#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Интерфейс для отложенной обработки этапов производства
//
// Параметры:
//   Объект - ДокументСсылка.ЭтапПроизводства2_2
//   ВариантОбработки - ПеречислениеСсылка.бг_ВариантыОтложеннойОбработкиОбъектов, Неопределено - вариант обработки
//   Отказ - Булево - отказ от обработки
//
Процедура бг_ОтложеннаяОбработкаОбъекта(Объект, ВариантОбработки, Отказ,
	ДополнительныеСведения = Неопределено) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОбработатьДокументыWMS Тогда
		бг_СформироватьОрдераПеремещениеСолво(Объект, Отказ);
	ИначеЕсли ВариантОбработки =
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьРасходныйОрдерНаТовары Тогда
		бг_СформироватьРасходныйОрдерПоПеремещениюТоваров(Объект, Отказ, ДополнительныеСведения);
	ИначеЕсли ВариантОбработки =
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьПриходныйОрдерНаТовары Тогда
		бг_СформироватьПриходныйОрдерПоПеремещениюТоваров(Объект, Отказ, ДополнительныеСведения);
	КонецЕсли;
КонецПроцедуры

Функция бг_ДанныеСвязанногоПриходногоОрдераНаТовары(ПеремещениеТоваров) Экспорт
	
	ДанныеПриходногоОрдера = Новый Структура("ПриходныйОрдерНаТовары,Статус");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПриходныйОрдерНаТовары.Ссылка КАК ПриходныйОрдерНаТовары,
	|	ПриходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Проведен
	|	И ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", ПеремещениеТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеПриходногоОрдера, Выборка);	
	КонецЕсли;
	
	Возврат ДанныеПриходногоОрдера;	
	
КонецФункции

Функция бг_ДанныеСвязанногоРасходногоОрдераНаТовары(ПеремещениеТоваров) Экспорт
	
	ДанныеРасходногоОрдера = Новый Структура("РасходныйОрдерНаТовары,Статус");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТовары.Ссылка КАК РасходныйОрдерНаТовары,
	|	РасходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыРаспоряжения
	|		ПО (РасходныйОрдерНаТовары.Ссылка = РасходныйОрдерНаТоварыРаспоряжения.Ссылка)
	|ГДЕ
	|	РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТоварыРаспоряжения.Распоряжение = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", ПеремещениеТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеРасходногоОрдера, Выборка);	
	КонецЕсли;
	
	Возврат ДанныеРасходногоОрдера;	
	
КонецФункции

// Проверяет существование в ИБ ссылок на товары и серии.
// Вызывается при загрузке документа из внешних систем, например, WMS. 
//
// Параметры:
//   Объект - ДокументОбъект.ПеремещениеТоваров - объект документа перемещение товаров
//   Отказ  - Булево - флаг наличия ошибок
//
Процедура бг_ПроверитьИдентификаторыТоваров(Объект, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И СправочникНоменклатура.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонСообщения = 
			НСтр("ru = 'Стр. %1 таблицы ""Товары"", из WMS загружен товар с некорректными идентификатором.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, 
			Выборка.НомерСтроки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , Отказ);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Серия КАК Серия
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО Товары.Серия = СправочникСерииНоменклатуры.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	И СправочникСерииНоменклатуры.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ШаблонСообщения = 
			НСтр("ru = 'Стр. %1 таблицы ""Товары"", из WMS загружена серия с некорректными идентификатором.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, 
			Выборка.НомерСтроки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , Отказ);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет наличие свободных остатков, и если свободных остатков не хватает,
// снимает резервы с заказов клиентов. 
//
// Параметры:
//   Объект - ДокументОбъект.ПеремещениеТоваров - объект документа перемещение товаров
//   Отказ  - Булево - отказ от обработки
//
Процедура бг_ОсвободитьРезервыПриНедостаткеСвободныхОстатков(Объект, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Инициализируем протокол загрузки.
	ПротоколЗагрузкиИзSolvo = Новый Массив;
	ШаблонСообщения = НСтр("ru = 'Дата проведения: %1'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонСообщения, 
		ТекущаяДатаСеанса());
	ПротоколЗагрузкиИзSolvo.Добавить(ТекстСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = бг_ТекстЗапросаСнятияРезервов();
	бг_УстановитьПараметрыЗапросаСнятияРезервов(Запрос, Объект);
	
	бг_УстановитьБлокировкиРегистраРаспределениеЗапасов(
		Запрос.Параметры.Номенклатура,
		Запрос.Параметры.Склад,
		Перечисления.РаспределениеЗапасовСостояния.ОстатокНаСкладе);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		// Свободных остатков не хватает, снимем резервы с заказов клиентов.
		бг_СнятьРезервыЗаказовКлиентов(РезультатЗапроса.Выгрузить(), Объект, ПротоколЗагрузкиИзSolvo, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		// Закроем протокол загрузки.
		ПротоколЗагрузкиИзSolvo.Добавить("------------------------------------------------------------------");
		ТекстПротокола = СтрСоединить(ПротоколЗагрузкиИзSolvo, Символы.ПС);
		РегистрыСведений.бг_ПротоколыЗагрузкиПеремещенийПоЗаданиямSolvo.ДополнитьПротоколЗагрузки(
			Объект.Ссылка,
			ТекстПротокола);
		// Добавим перемещение в очередь к созданию приходных и расходных ордеров.
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Объект.Ссылка, 
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОбработатьДокументыWMS);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_СформироватьОрдераПеремещениеСолво(Распоряжение, Отказ)
	НачатьТранзакцию();
	
	Попытка
		бг_СформироватьПриходныйОрдерПеремещениеСолво(Распоряжение);
		бг_СформироватьРасходныйОрдерПеремещениеСолво(Распоряжение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ШапкаОшибки = ОписаниеОшибки();
		
		ТелоОшибки = "";
		Для каждого СообщениеПользователю Из ПолучитьСообщенияПользователю(Истина) Цикл
			ТелоОшибки = ТелоОшибки + ?(ПустаяСтрока(ТелоОшибки), "", Символы.ПС) + СообщениеПользователю.Текст;
		КонецЦикла;
		
		ТекстОшибки = ШапкаОшибки + Символы.ПС + ТелоОшибки;
		
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
КонецПроцедуры

Процедура бг_СформироватьПриходныйОрдерПеремещениеСолво(Распоряжение)
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Дата, СкладОтправитель, СкладПолучатель");
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Отправитель", РеквизитыРаспоряжения.СкладОтправитель); 
	ДанныеЗаполнения.Вставить("Склад", РеквизитыРаспоряжения.СкладПолучатель);
	ДанныеЗаполнения.Вставить("Распоряжение", Распоряжение);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
	
	ПриходныйОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ПриходныйОрдер.Заполнить(ДанныеЗаполнения);
	ПриходныйОрдер.Дата = РеквизитыРаспоряжения.Дата;
	ПриходныйОрдер.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	Если ПриходныйОрдер.Товары.Количество() > 0 Тогда
		ПриходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
КонецПроцедуры

Процедура бг_СформироватьРасходныйОрдерПеремещениеСолво(Распоряжение)
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, "Дата, СкладОтправитель, СкладПолучатель");
	
	ПараметрыФормированиеОрдеров = Новый Структура;
	ПараметрыФормированиеОрдеров.Вставить("Склад", РеквизитыРаспоряжения.СкладОтправитель);
	ПараметрыФормированиеОрдеров.Вставить("Получатель", РеквизитыРаспоряжения.СкладПолучатель);
	ПараметрыФормированиеОрдеров.Вставить("Помещение", Неопределено);
	ПараметрыФормированиеОрдеров.Вставить("ЗаданиеНаПеревозку", Неопределено);
	ПараметрыФормированиеОрдеров.Вставить("ЗонаОтгрузки", Справочники.СкладскиеЯчейки.ПустаяСсылка());
	ПараметрыФормированиеОрдеров.Вставить("РаспоряженияНаОтгрузку", Новый Массив);
	ПараметрыФормированиеОрдеров.Вставить("ФоновоеЗадание", Ложь);
	
	ПараметрыФормированиеОрдеров.РаспоряженияНаОтгрузку.Добавить(Распоряжение);
	
	РасходныеОрдера = СкладыСервер.ПереоформитьРасходныеОрдера(ПараметрыФормированиеОрдеров);
	
	Для Каждого СтрокаРасходныйОрдер Из РасходныеОрдера.ОформленныеОрдера Цикл
		РасходныйОрдер = СтрокаРасходныйОрдер.РасходныйОрдер.ПолучитьОбъект();
		РасходныйОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		
		Для Каждого СтрокаТовар Из РасходныйОрдер.ОтгружаемыеТовары Цикл
			СтрокаТовар.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		КонецЦикла;
		
		РасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
КонецПроцедуры

Функция бг_СкладскиеОрдераПоПеремещениюТоваров(Распоряжение, ТолькоПроведенныеОрдера = Истина) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение
	|	И ПриходныйОрдерНаТовары.Проведен = &ТолькоПроведенныеОрдера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен = &ТолькоПроведенныеОрдера";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("ТолькоПроведенныеОрдера", ТолькоПроведенныеОрдера);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция бг_КомментарийСкладскихОрдеров(Распоряжение)

	Возврат СтрШаблон(НСтр("ru='Создан автоматически на основании [%1]'"), Строка(Распоряжение));

КонецФункции

#Область ОсвобождениеРезервовЗаказовКлиентов

// Возвращает текст запроса недостающих товаров для снятия резервов заказов клиентов.
//
Функция бг_ТекстЗапросаСнятияРезервов()
	
	Возврат
	"ВЫБРАТЬ
	|	СвободныеОстатки.Номенклатура КАК Номенклатура,
	|	СвободныеОстатки.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СУММА(СвободныеОстатки.Свободно) КАК Свободно
	|ПОМЕСТИТЬ СвободныеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|		ЕСТЬNULL(ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета,
	|		ИнформацияОДоступности.Свободно КАК Свободно
	|	ИЗ
	|		РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|	ГДЕ
	|		ИнформацияОДоступности.Номенклатура В(&Номенклатура)
	|		И ЕСТЬNULL(ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) В(&УпаковкиПаллеты)
	|		И ИнформацияОДоступности.Склад = &Склад
	|		И ИнформацияОДоступности.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РаспределениеЗапасовДвижения.Номенклатура,
	|		ЕСТЬNULL(РаспределениеЗапасовДвижения.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
	|		РаспределениеЗапасовДвижения.Отгрузить
	|	ИЗ
	|		РегистрНакопления.РаспределениеЗапасовДвижения КАК РаспределениеЗапасовДвижения
	|	ГДЕ
	|		РаспределениеЗапасовДвижения.Регистратор = &Регистратор
	|		И РаспределениеЗапасовДвижения.Номенклатура В(&Номенклатура)
	|		И ЕСТЬNULL(РаспределениеЗапасовДвижения.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) В(&УпаковкиПаллеты)
	|		И РаспределениеЗапасовДвижения.Склад = &Склад
	|		И РаспределениеЗапасовДвижения.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК СвободныеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	СвободныеОстатки.Номенклатура,
	|	СвободныеОстатки.УпаковкаПаллета
	|
	|ИМЕЮЩИЕ
	|	СУММА(СвободныеОстатки.Свободно) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыСгруппированные
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО Товары.Серия = СерииНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	ЕСТЬNULL(СерииНоменклатуры.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.УпаковкаПаллета КАК УпаковкаПаллета,
	|	Товары.Количество - ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК СнятьРезерв
	|ИЗ
	|	ТоварыСгруппированные КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвободныеОстатки КАК СвободныеОстатки
	|		ПО Товары.Номенклатура = СвободныеОстатки.Номенклатура
	|			И Товары.УпаковкаПаллета = СвободныеОстатки.УпаковкаПаллета
	|ГДЕ
	|	Товары.Количество - ЕСТЬNULL(СвободныеОстатки.Свободно, 0) > 0";
	
КонецФункции

// Устанавливает параметры запроса для снятия резервов заказов клиентов.
//
Процедура бг_УстановитьПараметрыЗапросаСнятияРезервов(Запрос, Объект)
	
	Номенклатура = Новый Массив;
	Серии = Новый Массив;
	Назначения = Новый Массив;
	ЕстьПустыеСерии = Ложь;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Номенклатура.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
			Номенклатура.Добавить(СтрокаТЧ.Номенклатура);
		КонецЕсли;
		Если Назначения.Найти(СтрокаТЧ.Назначение) = Неопределено Тогда
			Назначения.Добавить(СтрокаТЧ.Назначение);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
			ЕстьПустыеСерии = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.Серия)
			И Серии.Найти(СтрокаТЧ.Серия) = Неопределено Тогда
			Серии.Добавить(СтрокаТЧ.Серия);
		КонецЕсли;
	КонецЦикла;
	
	УпаковкиПаллеты = УпаковкиПаллетыСерийНоменклатуры(Серии, ЕстьПустыеСерии);
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("УпаковкиПаллеты", УпаковкиПаллеты);
	Запрос.УстановитьПараметр("Склад", Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	
КонецПроцедуры

// Возвращает массив упаковок-паллет для серий номенклатуры.
//
Функция УпаковкиПаллетыСерийНоменклатуры(Серии, ЕстьПустыеСерии)
	
	УпаковкиПаллеты = Новый Массив;
	Если ЕстьПустыеСерии Тогда
		УпаковкиПаллеты.Добавить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	КонецЕсли;
	Если Серии.Количество() > 0 Тогда
		УпаковкиПаллетыСерий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Серии, "бг_УпаковкаПаллета");
		Для Каждого УпаковкаПаллетыСерии Из УпаковкиПаллетыСерий Цикл
			Если УпаковкиПаллеты.Найти(УпаковкаПаллетыСерии.Значение) = Неопределено Тогда
				УпаковкиПаллеты.Добавить(УпаковкаПаллетыСерии.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат УпаковкиПаллеты;
	
КонецФункции

// Снимает доступные резервы заказов клиентов, в количествах необходимых для перемещения по алгоритму приоритетов.
//
Процедура бг_СнятьРезервыЗаказовКлиентов(НедостающиеТовары, Объект, ПротоколЗагрузкиИзSolvo, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = бг_ТекстЗапросаДоступныхРезервов();
	бг_УстановитьПараметрыЗапросаДоступныхРезервов(Запрос, Объект, НедостающиеТовары);
	
	бг_УстановитьБлокировкиРегистраРаспределениеЗапасов(
		Запрос.Параметры.Номенклатура,
		Запрос.Параметры.Склад,
		Перечисления.РаспределениеЗапасовСостояния.ВРезерве);
	
	ДоступныеРезервы = Запрос.Выполнить().Выгрузить();
	ДоступныеРезервы.Колонки.Добавить("СнятьРезерв", Новый ОписаниеТипов("Булево"));
	
	РазрядностьКоличества = 15;
	РазрядностьДробнойЧастиКоличества = 3;
	ТипКоличество = ОбщегоНазначения.ОписаниеТипаЧисло(
		РазрядностьКоличества,
		РазрядностьДробнойЧастиКоличества,
		ДопустимыйЗнак.Неотрицательный);
	
	ДоступныеРезервы.Колонки.Добавить("КоличествоСнятьРезерв", ТипКоличество);
	
	СтруктураПоиска = Новый Структура("Номенклатура,УпаковкаПаллета");
	ОшибкиСнятияРезервов = Новый Массив;
	Для Каждого СтрокаНедостающихТоваров Из НедостающиеТовары Цикл
		
		ОсталосьСнятьРезервов = СтрокаНедостающихТоваров.СнятьРезерв;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНедостающихТоваров);
		НайденныеСтрокиДоступныеРезервы = ДоступныеРезервы.НайтиСтроки(СтруктураПоиска);
		
		бг_РаспределитьНедостающиеТоварыНаДоступныеРезервы(НайденныеСтрокиДоступныеРезервы, ОсталосьСнятьРезервов);
		
		Если ОсталосьСнятьРезервов > 0 Тогда
			// Если что-то осталось, то это значит, что в заказах клиентов зарезервировано товаров
			// меньше, чем необходимо для перемещения. Это возможно, например, 
			// если заказы клиентов с этими товарами уже переданы на сборку,  или какая-то рассинхронизация
			// по остаткам товаров, и по данным ERP этих товаров не хватает на складе.
			ШаблонСообщения = 
				НСтр("ru = 'По номенклатуре %1 в заказах клиентов не найдены резервы доступные для снятия в количестве %2 %3.'");
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаНедостающихТоваров.Номенклатура,
				СтрокаНедостающихТоваров.УпаковкаПаллета);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				ПредставлениеНоменклатуры,
				ОсталосьСнятьРезервов,
				СтрокаНедостающихТоваров.ЕдиницаИзмерения);
			
			ОшибкиСнятияРезервов.Добавить(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиСнятияРезервов.Количество() > 0 Тогда
		Для Каждого ТекстОшибки Из ОшибкиСнятияРезервов Цикл
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, , , Отказ);
		КонецЦикла;
	Иначе
		ОсвобождаемыеРезервы = ДоступныеРезервы.Скопировать(Новый Структура("СнятьРезерв", Истина));
		бг_СнятьОсвобождаемыеРезервыЗаказовКлиентов(ОсвобождаемыеРезервы, Объект, ПротоколЗагрузкиИзSolvo, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса доступных для снятия резервов заказов клиентов.
//
Функция бг_ТекстЗапросаДоступныхРезервов()
	
	Возврат
	"ВЫБРАТЬ
	|	бг_ЗначенияДополнительныхКонстант.Разрез КАК Контрагент,
	|	МАКСИМУМ(бг_ЗначенияДополнительныхКонстант.Значение) КАК Лицензия
	|ПОМЕСТИТЬ ЛицензииНовыхПунктовРазгрузки
	|ИЗ
	|	РегистрСведений.бг_ЗначенияДополнительныхКонстант КАК бг_ЗначенияДополнительныхКонстант
	|ГДЕ
	|	бг_ЗначенияДополнительныхКонстант.Константа = &КонстантаАлкогольнаяЛицензия
	|	И НЕ ВЫРАЗИТЬ(бг_ЗначенияДополнительныхКонстант.Значение КАК Справочник.ЛицензииПоставщиковАлкогольнойПродукции).бг_ТипЛицензии ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	бг_ЗначенияДополнительныхКонстант.Разрез
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета,
	|	ИнформацияОДоступности.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв, ЛОЖЬ) КАК ДолгосрочныйРезерв,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка)) КАК КаналПродаж,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_Лицензия, ЗНАЧЕНИЕ(Справочник.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка)) КАК Лицензия,
	|	ИнформацияОДоступности.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	СУММА(ИнформацияОДоступности.Зарезервировано) КАК Зарезервировано
	|ПОМЕСТИТЬ ДоступныеРезервыСгруппированные
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.Номенклатура В(&Номенклатура)
	|	И ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета В(&УпаковкиПаллеты)
	|	И ИнформацияОДоступности.Склад = &Склад
	|	И ИнформацияОДоступности.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|	И ТИПЗНАЧЕНИЯ(ИнформацияОДоступности.ЗаказНаОтгрузку) = ТИП(Документ.ЗаказКлиента)
	|	И ИнформацияОДоступности.ЗаказНаОтгрузку <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|	И НЕ ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа 
	|		В (ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS), 
	|			ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED))
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_Магазин = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияОДоступности.Номенклатура,
	|	ЕСТЬNULL(ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)),
	|	ИнформацияОДоступности.ЗаказНаОтгрузку,
	|	ИнформацияОДоступности.ЖелаемаяДатаОтгрузки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ИнформацияОДоступности.Зарезервировано) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Лицензия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеРезервы.Номенклатура КАК Номенклатура,
	|	ДоступныеРезервы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеРезервы.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДоступныеРезервы.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	ДоступныеРезервы.ДолгосрочныйРезерв КАК ДолгосрочныйРезерв,
	|	ДоступныеРезервы.КаналПродаж КАК КаналПродаж,
	|	ВЫБОР
	|		КОГДА НЕ ЛицензииНовыхПунктовРазгрузки.Лицензия ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОткрывающийсяМагазин,
	|	ДоступныеРезервы.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ДоступныеРезервы.Зарезервировано КАК Зарезервировано
	|ПОМЕСТИТЬ ДоступныеРезервы
	|ИЗ
	|	ДоступныеРезервыСгруппированные КАК ДоступныеРезервы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛицензииНовыхПунктовРазгрузки КАК ЛицензииНовыхПунктовРазгрузки
	|		ПО ДоступныеРезервы.Контрагент = ЛицензииНовыхПунктовРазгрузки.Контрагент
	|			И ДоступныеРезервы.Лицензия = ЛицензииНовыхПунктовРазгрузки.Лицензия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КаналПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПриоритетыКаналовПродаж.Приоритет, 9999) КАК Приоритет,
	|	ДоступныеРезервы.Номенклатура КАК Номенклатура,
	|	ДоступныеРезервы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеРезервы.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ДоступныеРезервы.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	ДоступныеРезервы.ДолгосрочныйРезерв КАК ДолгосрочныйРезерв,
	|	ДоступныеРезервы.КаналПродаж КАК КаналПродаж,
	|	ДоступныеРезервы.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ДоступныеРезервы.Зарезервировано КАК Зарезервировано
	|ИЗ
	|	ДоступныеРезервы КАК ДоступныеРезервы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ПриоритетыКаналовПродажСнятияРезервов КАК ПриоритетыКаналовПродаж
	|		ПО ДоступныеРезервы.КаналПродаж = ПриоритетыКаналовПродаж.КаналПродаж
	|			И ДоступныеРезервы.ДолгосрочныйРезерв = ПриоритетыКаналовПродаж.ДолгосрочныйРезерв
	|			И ДоступныеРезервы.ОткрывающийсяМагазин = ПриоритетыКаналовПродаж.ОткрывающийсяМагазин
	|ГДЕ
	|	НЕ ПриоритетыКаналовПродаж.Приоритет ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ЖелаемаяДатаОтгрузки УБЫВ";
	
КонецФункции

// Устанавливает параметры запроса доступных для снятия резервов заказов клиентов.
//
Процедура бг_УстановитьПараметрыЗапросаДоступныхРезервов(Запрос, Объект, НедостающиеТовары)
	
	Номенклатура = Новый Массив;
	УпаковкиПаллеты = Новый Массив;
	Для Каждого СтрокаТЧ Из НедостающиеТовары Цикл
		Если Номенклатура.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
			Номенклатура.Добавить(СтрокаТЧ.Номенклатура);
		КонецЕсли;
		Если УпаковкиПаллеты.Найти(СтрокаТЧ.УпаковкаПаллета) = Неопределено Тогда
			УпаковкиПаллеты.Добавить(СтрокаТЧ.УпаковкаПаллета);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("УпаковкиПаллеты", УпаковкиПаллеты);
	Запрос.УстановитьПараметр("Склад", Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр(
		"КонстантаАлкогольнаяЛицензия",
		Справочники.бг_ДополнительныеКонстанты.НайтиСоздатьКонстанту("АлкогольнаяЛицензияДляНовогоПунктаРазгрузки"));
	
КонецПроцедуры

// Вспомогательная процедура. Распределяет количество недостающих товаров по доступным для снятия резервам.
//
Процедура бг_РаспределитьНедостающиеТоварыНаДоступныеРезервы(НайденныеСтрокиДоступныеРезервы, ОсталосьСнятьРезервов)
	
	Для Каждого СтрокаДоступныхРезервов Из НайденныеСтрокиДоступныеРезервы Цикл
		
		МожноСнятьРезерв = Мин(ОсталосьСнятьРезервов, СтрокаДоступныхРезервов.Зарезервировано);
		Если МожноСнятьРезерв > 0 Тогда
			СтрокаДоступныхРезервов.Зарезервировано = 
				СтрокаДоступныхРезервов.Зарезервировано - МожноСнятьРезерв;
			СтрокаДоступныхРезервов.СнятьРезерв = Истина;
			СтрокаДоступныхРезервов.КоличествоСнятьРезерв = 
				СтрокаДоступныхРезервов.КоличествоСнятьРезерв + МожноСнятьРезерв;
			ОсталосьСнятьРезервов = 
				ОсталосьСнятьРезервов - МожноСнятьРезерв;
		КонецЕсли;
		
		Если ОсталосьСнятьРезервов <= 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Снимает резервы заказов клиентов.
//
Процедура бг_СнятьОсвобождаемыеРезервыЗаказовКлиентов(ОсвобождаемыеРезервы, Объект, ПротоколЗагрузкиИзSolvo, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Разделим освобождаемые резервы по заказам клиентов и обработаем каждый заказ.
	ЗаказыКлиентов = ОсвобождаемыеРезервы.Скопировать(, "ЗаказНаОтгрузку"); 
	ЗаказыКлиентов.Свернуть("ЗаказНаОтгрузку");
	ОтборПоЗаказуКлиента = Новый Структура("ЗаказНаОтгрузку");
	
	ОшибкиСнятияРезервов = Новый Массив;
	Для Каждого СтрокаЗаказовКлиентов Из ЗаказыКлиентов Цикл
		
		ЗаказКлиентаОбъект = СтрокаЗаказовКлиентов.ЗаказНаОтгрузку.ПолучитьОбъект();
		ЗаказКлиентаОбъект.Заблокировать();
		
		ИзмененныеСтрокиЗаказа = Новый Массив;
		ТоварыЗаказа = ЗаказКлиентаОбъект.Товары;
		ОтборПоЗаказуКлиента.ЗаказНаОтгрузку = СтрокаЗаказовКлиентов.ЗаказНаОтгрузку;
		НайденныеСтрокиОсвобождаемыхРезервов = ОсвобождаемыеРезервы.НайтиСтроки(ОтборПоЗаказуКлиента);
		
		// Снимем доступные резервы из заказа клиента.
		СнятыРезервыЗаказаКлиента = бг_СнятьОсвобождаемыеРезервыЗаказаКлиента(
			НайденныеСтрокиОсвобождаемыхРезервов,
			ТоварыЗаказа,
			ИзмененныеСтрокиЗаказа,
			СтрокаЗаказовКлиентов.ЗаказНаОтгрузку,
			ПротоколЗагрузкиИзSolvo,
			ОшибкиСнятияРезервов);
		
		Если СнятыРезервыЗаказаКлиента Тогда
			ШаблонСообщения = 
				НСтр("ru = 'Автоматическое снятие резерва для проведения перемещения %1.'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				Объект.Ссылка);
			
			ЗаказКлиентаОбъект.ДополнительныеСвойства.Вставить(
				"ВерсионированиеОбъектовКомментарийКВерсии",
				ТекстСообщения);
			бг_ОбработатьИЗаписатьЗаказКлиента(ЗаказКлиентаОбъект, ИзмененныеСтрокиЗаказа);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиСнятияРезервов.Количество() > 0 Тогда
		Для Каждого ТекстОшибки Из ОшибкиСнятияРезервов Цикл
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, , , Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат снятия резервов заказа клиента.
//
Функция бг_СнятьОсвобождаемыеРезервыЗаказаКлиента(НайденныеСтрокиОсвобождаемыхРезервов, 
												ТоварыЗаказа,
												ИзмененныеСтрокиЗаказа,
												ЗаказНаОтгрузку,
												ПротоколЗагрузкиИзSolvo,
												ОшибкиСнятияРезервов)
	
	СнятыРезервыЗаказаКлиента = Истина;
	
	ОтборСтрокТоваровЗаказа = Новый Структура("Номенклатура,бг_УпаковкаПаллета");
	ОтборСтрокТоваровЗаказа.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.СоСклада);
	ОтборСтрокТоваровЗаказа.Вставить("Отменено", Ложь);
	ОтборСтрокТоваровЗаказа.Вставить("Обособленно", Ложь);
	
	Для Каждого СтрокаОсвобождаемыхРезервов Из НайденныеСтрокиОсвобождаемыхРезервов Цикл
		
		ОсталосьСнятьРезервов = СтрокаОсвобождаемыхРезервов.КоличествоСнятьРезерв;
		
		ОтборСтрокТоваровЗаказа.Номенклатура = СтрокаОсвобождаемыхРезервов.Номенклатура;
		ОтборСтрокТоваровЗаказа.бг_УпаковкаПаллета = СтрокаОсвобождаемыхРезервов.УпаковкаПаллета;
		НайденныеСтрокиТоваровЗаказа = ТоварыЗаказа.НайтиСтроки(ОтборСтрокТоваровЗаказа); 
		
		Для Каждого СтрокаТоварыЗаказа Из НайденныеСтрокиТоваровЗаказа Цикл
			МожноСнятьРезерв = Мин(СтрокаТоварыЗаказа.Количество, ОсталосьСнятьРезервов);
			Если МожноСнятьРезерв > 0 Тогда
				
				НомерИзмененнойСтрокиТоварыЗаказа = ТоварыЗаказа.Индекс(СтрокаТоварыЗаказа) + 1;
				
				бг_СнятьОсвобождаемыеРезервыПоСтрокеЗаказаКлиента(
					СтрокаТоварыЗаказа,
					МожноСнятьРезерв,
					ТоварыЗаказа,
					ИзмененныеСтрокиЗаказа,
					НомерИзмененнойСтрокиТоварыЗаказа);
				ОсталосьСнятьРезервов = ОсталосьСнятьРезервов - МожноСнятьРезерв;
				
				ШаблонСообщения = 
					НСтр("ru = '  %1, Стр. %2 таблицы ""Товары"", по номенклатуре %3 снят резерв в количестве %4 %5.'");
				
				ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
					СтрокаОсвобождаемыхРезервов.Номенклатура,
					СтрокаОсвобождаемыхРезервов.УпаковкаПаллета);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, 
					ЗаказНаОтгрузку,
					НомерИзмененнойСтрокиТоварыЗаказа,
					ПредставлениеНоменклатуры,
					МожноСнятьРезерв,
					СтрокаОсвобождаемыхРезервов.ЕдиницаИзмерения);
				
				ПротоколЗагрузкиИзSolvo.Добавить(ТекстСообщения);
			КонецЕсли;
			
			Если ОсталосьСнятьРезервов <= 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ОсталосьСнятьРезервов > 0 Тогда
			// Если что-то осталось, значит, по каким-то причинам не смогли снять резерв с заказа. 
			ШаблонСообщения = 
				НСтр("ru = 'Заказ %1 по номенклатуре %2 не найдены резервы доступные для снятия в количестве %3 %4.'");
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОсвобождаемыхРезервов.Номенклатура,
				СтрокаОсвобождаемыхРезервов.УпаковкаПаллета);
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				ЗаказНаОтгрузку,
				ПредставлениеНоменклатуры,
				ОсталосьСнятьРезервов,
				СтрокаОсвобождаемыхРезервов.ЕдиницаИзмерения);
			
			ОшибкиСнятияРезервов.Добавить(ТекстСообщения);
			СнятыРезервыЗаказаКлиента = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СнятыРезервыЗаказаКлиента;
	
КонецФункции

// Отменяет в строке товаров заказа клиента резерв, 
// при необходимости разбивает строку табличной части.
//
Процедура бг_СнятьОсвобождаемыеРезервыПоСтрокеЗаказаКлиента(СтрокаТоварыЗаказа, 
															МожноСнятьРезерв,
															ТоварыЗаказа,
															ИзмененныеСтрокиЗаказа,
															НомерИзмененнойСтрокиТоварыЗаказа)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПричинаОтмены = бг_КонстантыПовтИсп.ЗначениеКонстанты("ПричинаОтменыСнятиеРезерваДляПеремещенийПоЗаданиюWMS");
	
	Если СтрокаТоварыЗаказа.Количество = МожноСнятьРезерв Тогда
		// Строка заказа полностью отменяется.
		СтрокаТоварыЗаказа.Отменено = Истина;
		СтрокаТоварыЗаказа.ПричинаОтмены = ПричинаОтмены;
	Иначе
		// Строку заказа необходимо разбить.
		СтрокаТоварыЗаказа.Количество = СтрокаТоварыЗаказа.Количество - МожноСнятьРезерв;
		ИзмененныеСтрокиЗаказа.Добавить(СтрокаТоварыЗаказа);
		
		ИндексСтрокиТоварыЗаказа = ТоварыЗаказа.Индекс(СтрокаТоварыЗаказа);
		НоваяСтрокаТоварыЗаказа = ТоварыЗаказа.Вставить(ИндексСтрокиТоварыЗаказа + 1);
		ИзмененныеСтрокиЗаказа.Добавить(НоваяСтрокаТоварыЗаказа);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыЗаказа, СтрокаТоварыЗаказа, , "КодСтроки,ИдентификаторСтроки");
		
		НоваяСтрокаТоварыЗаказа.Количество = МожноСнятьРезерв;
		НоваяСтрокаТоварыЗаказа.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
		НоваяСтрокаТоварыЗаказа.Отменено = Истина;
		НоваяСтрокаТоварыЗаказа.ПричинаОтмены = ПричинаОтмены;
		
		НомерИзмененнойСтрокиТоварыЗаказа = НомерИзмененнойСтрокиТоварыЗаказа + 1;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет пересчет сумм в измененных строках заказа и проводит заказ.
//
Процедура бг_ОбработатьИЗаписатьЗаказКлиента(ЗаказКлиентаОбъект, ИзмененныеСтрокиЗаказа)
	
	СтруктураДействий = бг_СтруктураДействийПересчетаПриИзмененииКоличества(ЗаказКлиентаОбъект);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	Для Каждого СтрокаТЧ Из ИзмененныеСтрокиЗаказа Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
			СтрокаТЧ, 
			СтруктураДействий, 
			КэшированныеЗначения);
	КонецЦикла;
		
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
	СкидкиНаценкиСервер.Рассчитать(ЗаказКлиентаОбъект, СтруктураПараметры);
	ЗаказКлиентаОбъект.СкидкиРассчитаны = Истина;
	
	бг_ЗаказыКлиентов.ПересчитатьКоличествоКоробокИПаллетВТЧ(ИзмененныеСтрокиЗаказа);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЗаказКлиентаОбъект, "Товары");
	ЗаказКлиентаОбъект.СуммаДокумента = ЗаказКлиентаОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ЗаказКлиентаОбъект);
	
	ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

// Возвращает структуру действий для пересчета сумм в измененных строках заказа.
//
Функция бг_СтруктураДействийПересчетаПриИзмененииКоличества(ЗаказКлиентаОбъект)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказКлиентаОбъект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	
	Возврат СтруктураДействий;
	
КонецФункции

// Устанавливает блокировки на регистр сведений РаспределениеЗапасов перед чтением данных
// свободных остатков и резервов для освобождения резервов заказов клиентов.
//
Процедура бг_УстановитьБлокировкиРегистраРаспределениеЗапасов(СписокНоменклатуры, Склад, Состояние)
	
	ИспользоватьБлокировки = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"ИспользоватьБлокировкиРаспределенияЗапасовПриФормированииЗаказовПоЗаявкам");
	Если Не ИспользоватьБлокировки Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДанныхБлокировки = Новый ТаблицаЗначений();
	ТаблицаДанныхБлокировки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		НоваяСтрокаДанныхБлокировки = ТаблицаДанныхБлокировки.Добавить();
		НоваяСтрокаДанныхБлокировки.Номенклатура = Номенклатура;
	КонецЦикла;
	
	БлокировкаДанных = Новый БлокировкаДанных();
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РаспределениеЗапасов");
	ЭлементБлокировки.ИсточникДанных = ТаблицаДанныхБлокировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.УстановитьЗначение("Склад", Склад);
	ЭлементБлокировки.УстановитьЗначение("Состояние", Состояние);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область ПриходныйОрдерНаТовары

Процедура бг_СформироватьПриходныйОрдерПоПеремещениюТоваров(Распоряжение, Отказ, ДополнительныеСведения)
	
	АктуализироватьТолькоДату = ДополнительныеСведения = "АктуализироватьДатуВСкладскихОрдерах";
	
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Распоряжение, "Номер, Проведен, ПометкаУдаления, Дата, СкладОтправитель, СкладПолучатель, Товары");

	СозданныйПриходныйОрдер = бг_ПриходныйОрдер(Распоряжение, АктуализироватьТолькоДату);
	
	ДанныеЗаполненияПриходногоОрдера = бг_ДанныеЗаполненияПриходногоОрдера(Распоряжение, РеквизитыРаспоряжения);
	
	Если ЗначениеЗаполнено(СозданныйПриходныйОрдер) Тогда
		
		Если АктуализироватьТолькоДату Тогда
			ПриходныйОрдер = СозданныйПриходныйОрдер.ПолучитьОбъект();
			ПриходныйОрдер.Дата = РеквизитыРаспоряжения.Дата;
			ПриходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Возврат;
		КонецЕсли;
		
		ДанныеПриходногоОрдера = Новый Структура("Документ, Проведен, ПометкаУдаления",
			СозданныйПриходныйОрдер, РеквизитыРаспоряжения.Проведен, РеквизитыРаспоряжения.ПометкаУдаления);
			
		бг_Склады.АктуализироватьПриходныйОрдер(ДанныеЗаполненияПриходногоОрдера, ДанныеПриходногоОрдера);

	Иначе
		бг_Склады.АктуализироватьПриходныйОрдер(ДанныеЗаполненияПриходногоОрдера);
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ДанныеЗаполненияПриходногоОрдера(Распоряжение, РеквизитыРаспоряжения)
	
	ДанныеЗаполнения = бг_Склады.НовыйДанныеЗаполненияПриходногоОрдера();
	
	ДанныеЗаполнения.Шапка.Распоряжение = Распоряжение;
	ДанныеЗаполнения.Шапка.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
		РеквизитыРаспоряжения.Номер);
	ДанныеЗаполнения.Шапка.Распоряжение = Распоряжение;
	ДанныеЗаполнения.Шапка.Дата = РеквизитыРаспоряжения.Дата;
	ДанныеЗаполнения.Шапка.ДатаПоступления = РеквизитыРаспоряжения.Дата;
	ДанныеЗаполнения.Шапка.ДатаВходящегоДокумента = РеквизитыРаспоряжения.Дата;
	ДанныеЗаполнения.Шапка.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	ДанныеЗаполнения.Шапка.Склад = РеквизитыРаспоряжения.СкладПолучатель;
	ДанныеЗаполнения.Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ДанныеЗаполнения.Шапка.Отправитель = РеквизитыРаспоряжения.СкладОтправитель;
	ДанныеЗаполнения.Шапка.Комментарий = бг_КомментарийСкладскихОрдеров(Распоряжение);
	
	Товары = РеквизитыРаспоряжения.Товары.Выгрузить();
	
	Для каждого СтрокаТовары Из Товары Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Товары.Добавить(), СтрокаТовары);
	КонецЦикла;
	
	ДанныеЗаполнения.Товары.Свернуть("Номенклатура, Серия", "Количество");
	
	Возврат ДанныеЗаполнения;

КонецФункции

Функция бг_ПриходныйОрдер(Распоряжение, АктуализироватьТолькоДату)

	СписокСкладскихОрдеров = бг_СкладскиеОрдераПоПеремещениюТоваров(
		Распоряжение, АктуализироватьТолькоДату);
		
	Если СписокСкладскихОрдеров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаОрдер Из СписокСкладскихОрдеров Цикл
		
		Если Тип("ДокументСсылка.ПриходныйОрдерНаТовары") = ТипЗнч(СтрокаОрдер.Документ) Тогда
			Возврат СтрокаОрдер.Документ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти // ПриходныйОрдерНаТовары

#Область РасходныйОрдерНаТовары

Процедура бг_СформироватьРасходныйОрдерПоПеремещениюТоваров(Распоряжение, Отказ, ДополнительныеСведения)
	
	АктуализироватьТолькоДату = ДополнительныеСведения = "АктуализироватьДатуВСкладскихОрдерах";

	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Распоряжение, "Проведен, ПометкаУдаления, Дата, СкладОтправитель, СкладПолучатель, Товары");

	СозданныйРасходныйОрдер = бг_РасходныйОрдер(Распоряжение, АктуализироватьТолькоДату);
	
	ДанныеЗаполненияРасходногоОрдера = бг_ДанныеЗаполненияРасходногоОрдера(Распоряжение, РеквизитыРаспоряжения);
	
	Если ЗначениеЗаполнено(СозданныйРасходныйОрдер) Тогда
		
		Если АктуализироватьТолькоДату Тогда
			РасходныйОрдер = СозданныйРасходныйОрдер.ПолучитьОбъект();
			РасходныйОрдер.Дата = РеквизитыРаспоряжения.Дата;
			РасходныйОрдер.ДатаОтгрузки = РеквизитыРаспоряжения.Дата;
			РасходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
			Возврат;
		КонецЕсли;
		
		ДанныеРасходногоОрдера = Новый Структура("Документ, Проведен, ПометкаУдаления",
			СозданныйРасходныйОрдер, РеквизитыРаспоряжения.Проведен, РеквизитыРаспоряжения.ПометкаУдаления);
			
		бг_Склады.АктуализироватьРасходныйОрдер(ДанныеЗаполненияРасходногоОрдера, ДанныеРасходногоОрдера);

	Иначе
		бг_Склады.АктуализироватьРасходныйОрдер(ДанныеЗаполненияРасходногоОрдера);
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ДанныеЗаполненияРасходногоОрдера(Распоряжение, РеквизитыРаспоряжения)
	
	ДанныеЗаполнения = бг_Склады.НовыйДанныеЗаполненияРасходногоОрдера();
	
	ДанныеЗаполнения.Шапка.Распоряжение = Распоряжение;
	ДанныеЗаполнения.Шапка.Дата = РеквизитыРаспоряжения.Дата;
	ДанныеЗаполнения.Шапка.ДатаОтгрузки = РеквизитыРаспоряжения.Дата;
	ДанныеЗаполнения.Шапка.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	ДанныеЗаполнения.Шапка.Склад = РеквизитыРаспоряжения.СкладОтправитель;
	ДанныеЗаполнения.Шапка.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению;
	ДанныеЗаполнения.Шапка.Получатель = РеквизитыРаспоряжения.СкладПолучатель;
	ДанныеЗаполнения.Шапка.Комментарий = бг_КомментарийСкладскихОрдеров(Распоряжение);
	
	Товары = РеквизитыРаспоряжения.Товары.Выгрузить();
	
	Для каждого СтрокаТовары Из Товары Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Товары.Добавить(), СтрокаТовары);
	КонецЦикла;
	ДанныеЗаполнения.Товары.Свернуть("Номенклатура, Серия", "Количество");
	
	Возврат ДанныеЗаполнения;

КонецФункции

Функция бг_РасходныйОрдер(Распоряжение, АктуализироватьТолькоДату)

	СписокСкладскихОрдеров = бг_СкладскиеОрдераПоПеремещениюТоваров(
		Распоряжение, АктуализироватьТолькоДату);
		
	Если СписокСкладскихОрдеров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаОрдер Из СписокСкладскихОрдеров Цикл
		
		Если Тип("ДокументСсылка.РасходныйОрдерНаТовары") = ТипЗнч(СтрокаОрдер.Документ) Тогда
			Возврат СтрокаОрдер.Документ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти // РасходныйОрдерНаТовары

#КонецОбласти

#КонецЕсли
