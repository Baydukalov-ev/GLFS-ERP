#Область ОбработчикиСобытий

&Перед("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Анализ необходимости снятия резервов обязательно проводим перед
	// типовым обработчиком ПередЗаписью, так как в типовом обработчике
	// заполняется ТЧ ВидыЗапасов по данным ТЧ Товары, и если вызвать после,
	// то в функции ПроверитьИзменениеТоваров() уже не будет изменений товаров
	// по данным ТЧ Товары и ВидыЗапасов.
	Если бг_ОсвобождатьРезервыПриНедостаткеСвободныхОстатков(РежимЗаписи) Тогда
		ДополнительныеСвойства.Вставить("бг_ОсвобождатьРезервыПриНедостаткеСвободныхОстатков");
	КонецЕсли;
	
	бг_АктуализироватьСкладскиеОрдера(РежимЗаписи, Отказ);

КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("бг_ОсвобождатьРезервыПриНедостаткеСвободныхОстатков") Тогда
		Документы.ПеремещениеТоваров.бг_ПроверитьИдентификаторыТоваров(ЭтотОбъект, Отказ);
		Документы.ПеремещениеТоваров.бг_ОсвободитьРезервыПриНедостаткеСвободныхОстатков(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	Документы.битМаршрутныйЛист.ДобавитьДокументыДляОтложеннойОбработки(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("бг_ОформитьСкладскиеОрдера")
		Или ДополнительныеСвойства.Свойство("бг_АктуализироватьСкладскиеОрдера")
		Или ДополнительныеСвойства.Свойство("бг_АктуализироватьДатуВСкладскихОрдерах")Тогда
		бг_ОформитьАктуализироватьСкладскиеОрдера(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	
	бг_ЗагруженИзУПП = Ложь;
	бг_НомерДокументаУПП = "";
	бг_СозданПоЗаданиюSolvo = Ложь;
	бг_ГрузSolvo = "";
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция бг_ОсвобождатьРезервыПриНедостаткеСвободныхОстатков(РежимЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОсвобождатьРезервы = Ложь;
	
	Если бг_СозданПоЗаданиюSolvo
		И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
		
		Если Не Проведен
			Или бг_ПроверитьИзменениеДокумента(МенеджерВременныхТаблиц) Тогда
			ОсвобождатьРезервы = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОсвобождатьРезервы;
	
КонецФункции

Функция бг_РеквизитыСкладов(СписокСкладов = Неопределено)
	
	Если СписокСкладов = Неопределено Тогда
		СписокСкладов = Новый Массив;
		СписокСкладов.Добавить(СкладОтправитель);
		СписокСкладов.Добавить(СкладПолучатель);
	КонецЕсли;

	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		СписокСкладов,
		"бг_ПунктНазначения, бг_АвтоматичеcкиСоздаватьСкладскиеОрдераПриОформленииПеремещенийТоваров");

КонецФункции


Функция бг_ПроверитьИзменениеДокумента(МенеджерВременныхТаблиц)
	
	Возврат ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
				Или ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц);
	
КонецФункции

Процедура бг_ОформитьАктуализироватьСкладскиеОрдера(Отказ)
	
	Если Отказ Или бг_СозданПоЗаданиюSolvo Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыСкладов = бг_РеквизитыСкладов();

	Если РеквизитыСкладов.Получить(СкладОтправитель).бг_ПунктНазначения =
		РеквизитыСкладов.Получить(СкладПолучатель).бг_ПунктНазначения Тогда
		
		Если РеквизитыСкладов.Получить(СкладОтправитель).бг_АвтоматичеcкиСоздаватьСкладскиеОрдераПриОформленииПеремещенийТоваров Тогда
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(Ссылка,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьРасходныйОрдерНаТовары,,
				?(ДополнительныеСвойства.Свойство("бг_АктуализироватьДатуВСкладскихОрдерах"),
					Новый ХранилищеЗначения("АктуализироватьДатуВСкладскихОрдерах"), Неопределено));
		КонецЕсли;
			
		Если РеквизитыСкладов.Получить(СкладПолучатель).бг_АвтоматичеcкиСоздаватьСкладскиеОрдераПриОформленииПеремещенийТоваров Тогда
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(Ссылка,
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьПриходныйОрдерНаТовары,,
				?(ДополнительныеСвойства.Свойство("бг_АктуализироватьДатуВСкладскихОрдерах"),
					Новый ХранилищеЗначения("АктуализироватьДатуВСкладскихОрдерах"), Неопределено));
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_АктуализироватьСкладскиеОрдера(РежимЗаписи, Отказ)

	Если Не бг_СозданПоЗаданиюSolvo Тогда
		
		Если Не ЭтоНовый() Тогда
		
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение
				И Проведен Тогда

				ПроверяемыеТабличныеЧасти = Новый Структура;
				ПроверяемыеТабличныеЧасти.Вставить("Товары");
					
				ИзмененияДокумента = бг_ОбщегоНазначенияСервер.ИзмененияОбъекта(
					ЭтотОбъект,
					Новый Структура("Дата, СкладПолучатель, СкладОтправитель"),
					ПроверяемыеТабличныеЧасти);
		
				Если ИзмененияДокумента.Свойство("Реквизиты")
					И ИзмененияДокумента.Количество() > 0
					И Не ИзмененияДокумента.Свойство("ТабличныеЧасти") Тогда
					
					Если ИзмененияДокумента.Реквизиты.Найти("СкладОтправитель")<> Неопределено
						Или ИзмененияДокумента.Реквизиты.Найти("СкладПолучатель")<> Неопределено Тогда
						ДополнительныеСвойства.Вставить("бг_АктуализироватьСкладскиеОрдера");
					Иначе
						ДополнительныеСвойства.Вставить("бг_АктуализироватьДатуВСкладскихОрдерах");
					КонецЕсли;
				
				ИначеЕсли ИзмененияДокумента.Свойство("ТабличныеЧасти") Тогда
						
					ДополнительныеСвойства.Вставить("бг_АктуализироватьСкладскиеОрдера");
						
				КонецЕсли;
					
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение
				И Не Проведен Тогда
				ДополнительныеСвойства.Вставить("бг_АктуализироватьСкладскиеОрдера");
				Возврат;
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				бг_РаспровестиСкладскиеОрдера(Отказ);
				Возврат;
			КонецЕсли;
			
			Если ДополнительныеСвойства.Свойство("бг_АктуализироватьСкладскиеОрдера") Тогда
				бг_РаспровестиСкладскиеОрдера(Отказ);
			КонецЕсли;
			
		ИначеЕсли ЭтоНовый() И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ДополнительныеСвойства.Вставить("бг_ОформитьСкладскиеОрдера");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура бг_РаспровестиСкладскиеОрдера(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СкладыДокументаДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Ссылка, "СкладОтправитель, СкладПолучатель");
	СкладОтправительДоЗаписи = СкладыДокументаДоЗаписи.СкладОтправитель;
	СкладПолучательДоЗаписи = СкладыДокументаДоЗаписи.СкладПолучатель;
	
	СписокСкладов = Новый Массив;
	СписокСкладов.Добавить(СкладОтправительДоЗаписи);
	СписокСкладов.Добавить(СкладПолучательДоЗаписи);
	
	РеквизитыСкладов = бг_РеквизитыСкладов(СписокСкладов);
	
	Если РеквизитыСкладов.Получить(СкладОтправительДоЗаписи).бг_ПунктНазначения =
		РеквизитыСкладов.Получить(СкладПолучательДоЗаписи).бг_ПунктНазначения Тогда
		
		СписокСкладскихОрдеров = Документы.ПеремещениеТоваров.бг_СкладскиеОрдераПоПеремещениюТоваров(Ссылка);
		
		Для Каждого СтрокаОрдер Из СписокСкладскихОрдеров Цикл
			
			Если Тип("ДокументСсылка.ПриходныйОрдерНаТовары") = ТипЗнч(СтрокаОрдер.Документ)
				И Не РеквизитыСкладов.Получить(СкладПолучательДоЗаписи).бг_АвтоматичеcкиСоздаватьСкладскиеОрдераПриОформленииПеремещенийТоваров Тогда
				Продолжить;
			КонецЕсли;
			
			Если Тип("ДокументСсылка.РасходныйОрдерНаТовары") = ТипЗнч(СтрокаОрдер.Документ)
				И Не РеквизитыСкладов.Получить(СкладОтправительДоЗаписи).бг_АвтоматичеcкиСоздаватьСкладскиеОрдераПриОформленииПеремещенийТоваров Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = СтрокаОрдер.Документ.ПолучитьОбъект();
			ДокументОбъект.ПометкаУдаления = ПометкаУдаления;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);

		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
