#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриЧтенииНаСервереПеред(ТекущийОбъект)
	
	бг_ДобавитьРеквизитИспользованияДатыПроизводстваСерий();
	
	// ОбщиеМеханизмы.Паллетизация
	бг_ДобавитьРеквизитОтображенияПаллетизации();
	бг_ЗаполнитьОтображениеПаллетизации(ТекущийОбъект);
	
	бг_УпаковкиЕдиницыИзмерения.ДобавитьРеквизитыПаллетизацииНаФормуДокумента(ЭтотОбъект);
	бг_УпаковкиЕдиницыИзмерения.ЗаполнитьСлужебныеЕдиницыУпаковокПаллетизации(ЭтотОбъект);
	Если бг_УпаковкиЕдиницыИзмеренияКлиентСервер.ОтображатьПаллетизацию(ЭтотОбъект) Тогда
		бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);
		бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	КонецЕсли;
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

&НаСервере
Процедура бг_ПриЧтенииНаСервереПосле(ТекущийОбъект)
	
	бг_СоздатьЭлементыФормы();
	бг_ПриПолученииДанныхНаСервере(ТекущийОбъект);
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	бг_Склады.ДобавитьПолеПриходныйОрдерНаТовары(ЭтотОбъект);
	бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
КонецПроцедуры

&НаСервере
Процедура бг_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		бг_ДобавитьРеквизитИспользованияДатыПроизводстваСерий();
		
		// ОбщиеМеханизмы.Паллетизация
		бг_ДобавитьРеквизитОтображенияПаллетизации();
		// Конец ОбщиеМеханизмы.Паллетизация
		
	КонецЕсли;
	 
	бг_ДобавитьПолеТоварыДатаПроизводства();

КонецПроцедуры

&НаСервере
Процедура бг_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		бг_СоздатьЭлементыФормы();
		бг_ПриПолученииДанныхНаСервере(РеквизитФормыВЗначение("Объект"));
		
		// ОбщиеМеханизмы.Паллетизация
		бг_ЗаполнитьОтображениеПаллетизации(Объект);
		// Конец ОбщиеМеханизмы.Паллетизация
		
		// ОбщиеМеханизмы.ПриходныйОрдер
		бг_Склады.ДобавитьПолеПриходныйОрдерНаТовары(ЭтотОбъект);
		бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
		// Конец ОбщиеМеханизмы.ПриходныйОрдер
		
	КонецЕсли;
	
	// ОбщиеМеханизмы.Паллетизация
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		бг_УпаковкиЕдиницыИзмерения.ДобавитьРеквизитыПаллетизацииНаФормуДокумента(ЭтотОбъект);
		бг_УпаковкиЕдиницыИзмерения.ЗаполнитьСлужебныеЕдиницыУпаковокПаллетизации(ЭтотОбъект);
		
		Если бг_УпаковкиЕдиницыИзмеренияКлиентСервер.ОтображатьПаллетизацию(ЭтотОбъект) Тогда
			бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);
			бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
		
	бг_УпаковкиЕдиницыИзмерения.ДобавитьЭлементыПаллетизацииНаФормуДокумента(
		ЭтотОбъект,
		Элементы.ГруппаКартинкаИНадписьНесколькоСкладов);
		
	бг_УпаковкиЕдиницыИзмерения.УстановитьУсловноеОформлениеПаллетизации(ЭтотОбъект);
	бг_УпаковкиЕдиницыИзмерения.УстановитьВидимостьДоступностьЭлементовПаллетизации(ЭтотОбъект);
	// Конец ОбщиеМеханизмы.Паллетизация
	
	бг_ДобавитьКомандуСгенерироватьСерии();
	бг_ЗаполнитьПараметрыВыбораПунктаПогрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ОбработкаВыбораПосле(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		
		// ОбщиеМеханизмы.Паллетизация
		бг_ОбновитьОтображениеПаллетизации();
		// Конец ОбщиеМеханизмы.Паллетизация
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_ОбработкаПроверкиЗаполненияНаСервереПеред(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнена дата входящего документа'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.ДатаВходящегоДокумента", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнен номер входящего документа'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "Объект.НомерВходящегоДокумента", , Отказ);
		КонецЕсли;
		
		бг_Магистраль.ПроверитьРеквизитыДоговора(Объект.Договор, "Объект.Договор", Отказ);
		бг_Магистраль.ПроверитьРеквизитыСоглашения(Объект.Соглашение, "Объект.Соглашение", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПередЗаписьюПеред(Отказ, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бг_ПередЗаписьюМагистраль(Отказ, ПараметрыЗаписи);
	
	бг_ПередЗаписьюПроверкаВалютыДокумента(Отказ, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура бг_ПередЗаписьюНаСервереПеред(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ТТНВходящаяЕГАИС")
		И ЗначениеЗаполнено(ЭтотОбъект["ТТНВходящаяЕГАИС"]) Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ПослеЗаписиНаСервереПосле(ТекущийОбъект, ПараметрыЗаписи)
	
	// ОбщиеМеханизмы.Паллетизация
	Если бг_УпаковкиЕдиницыИзмеренияКлиентСервер.ОтображатьПаллетизацию(ЭтотОбъект) Тогда
		бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);
	КонецЕсли;
	// Конец ОбщиеМеханизмы.Паллетизация
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
КонецПроцедуры

&НаКлиенте
&Перед("ОбработкаНавигационнойСсылки")
Процедура бг_ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	Если НавигационнаяСсылкаФорматированнойСтроки = "бг_ОформитьПриходныйОрдерНаТовары" Тогда
		СтандартнаяОбработка = Ложь;
		бг_ОткрытьФормуНовогоПриходногоОрдераНаТовары();
	КонецЕсли;
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
КонецПроцедуры

&НаКлиенте
&После("ОбработкаОповещения")
Процедура бг_ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ОбщиеМеханизмы.ПриходныйОрдер
	Если ИмяСобытия = "Запись_ПриходныйОрдерНаТовары" Тогда
		бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары();
	КонецЕсли;
	// Конец ОбщиеМеханизмы.ПриходныйОрдер
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
&После("ДоговорПриИзмененииСервер")
Процедура бг_ДоговорПриИзмененииСервер()
	
	бг_УстановитьНастройкуФормированияЗаявокНаДСМагистральПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ДиапазонБанковскихГарантийПриИзменении(Элемент)
	
	бг_ДиапазонБанковскихГарантийПриИзмененииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ДокументПоступленияНаСкладПриИзменении(Элемент)
	
	бг_ДокументПоступленияНаСкладПриИзмененииНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ДекорацияСтатусМагистральОбработкаНавигационнойСсылки(Элемент,
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПартнерПриИзмененииПосле(Элемент)
	бг_ПартнерКонтрагентПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура бг_КонтрагентПриИзмененииПосле(Элемент)
	бг_ПартнерКонтрагентПриИзменении();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_бг_ЗаполнитьБанковскиеГарантии(Команда)
	
	бг_ЗаполнитьБанковскиеГарантииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_СгенерироватьСерии(Команда)
	
	Если Не бг_ВозможнаГенерацияСерий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"бг_СгенерироватьСерииПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Документ необходимо предварительно записать. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		бг_СгенерироватьСерииЗавершение();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура бг_СгенерироватьСерииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
	бг_СгенерироватьСерииЗавершение();

КонецПроцедуры

&НаКлиенте
Процедура бг_СгенерироватьСерииЗавершение() Экспорт
	
	// Создаем серии на клиенте.
	// 1. ПТУ не располагает готовыми методами для группового создания серий и заполнения нужных служебных реквизитов.
	// 2. Клиентские же методы заполнения серии "по одной" имеются.
	// 3. Объем табличных частей предполагается небольшой.
	
	ТоварыДляГенерацииСерийОбщие = бг_ТоварыДляГенерацииСерий();
	
	ФормироватьСерииДляССП = бг_ФормироватьСерииДляССП(ТоварыДляГенерацииСерийОбщие);
	ФормироватьСерииДляЕК_СУМ = бг_ФормироватьСерииДляЕК_СУМ(ТоварыДляГенерацииСерийОбщие, Объект.Склад);
	ФормироватьСерииДляПива = бг_ФормироватьСерииДляПива(ТоварыДляГенерацииСерийОбщие);
	
	Если ФормироватьСерииДляЕК_СУМ Тогда
		Объект.Серии.Очистить();
	КонецЕсли;
	
	Если ФормироватьСерииДляССП Тогда
		ТоварыДляГенерацииСерий = бг_ТоварыДляГенерацииСерийССП(ТоварыДляГенерацииСерийОбщие);
	ИначеЕсли ФормироватьСерииДляЕК_СУМ Тогда
		ТоварыДляГенерацииСерий = бг_ТоварыДляГенерацииСерийЕК_СУМ(ТоварыДляГенерацииСерийОбщие);
	ИначеЕсли ФормироватьСерииДляПива Тогда
		ТоварыДляГенерацииСерий = бг_ТоварыДляГенерацииСерийПиво(ТоварыДляГенерацииСерийОбщие);
	Иначе
		ТоварыДляГенерацииСерий = бг_ТоварыДляГенерацииСерийБезалкогольные(ТоварыДляГенерацииСерийОбщие);
	КонецЕсли;
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерий Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ДанныеТовара.ИдентификаторСтрокиТовары);
		
		ДанныеОбработкиВыбораСерии = НоменклатураКлиентСервер.ВыбраннаяСерия();
		
		Если ФормироватьСерииДляССП Тогда
			ДанныеОбработкиВыбораСерии.Значение = бг_СоздатьСериюИмпортныеССП(ДанныеТовара);
		ИначеЕсли ФормироватьСерииДляЕК_СУМ Тогда
			ДанныеОбработкиВыбораСерии.Значение = бг_СоздатьСериюЕК_СУМ(ДанныеТовара);
			СтрокаСерия = Объект.Серии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСерия, СтрокаТовары);
			СтрокаСерия.Серия = ДанныеОбработкиВыбораСерии.Значение;
		Иначе
			ДанныеОбработкиВыбораСерии.Значение = бг_НайтиСоздатьСерию(ДанныеТовара);
		КонецЕсли;
		
		ДанныеОбработкиВыбораСерии.ИдентификаторТекущейСтроки = ДанныеТовара.ИдентификаторСтрокиТовары;
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ДанныеОбработкиВыбораСерии);
		
	КонецЦикла;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	
	Если ФормироватьСерииДляЕК_СУМ Тогда
		ПодготовитьЗаполнитьУстановитьВидимостьСерий();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура бг_ТоварыПриОкончанииРедактированияПосле(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		// ОбщиеМеханизмы.Паллетизация
		бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыПриОкончанииРедактированияПосле(ЭтотОбъект);
		// Конец ОбщиеМеханизмы.Паллетизация
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение")
Процедура бг_ТоварыНоменклатураПриИзмененииВопросПользователюЗавершение(Результат, ДополнительныеПараметры)
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхожденияНоменклатуры",
								ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтраныПроисхождения());
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатуры",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь));
	НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	СтруктураДействий.Вставить("ЗаполнитьСлужебныеРеквизитыПоНазначению");
	
#Вставка
	СтруктураДействий.Вставить(
		"бг_ЗаполнитьПризнакИспользоватьДатуПроизводстваСерии",
		Новый Структура("Номенклатура", "бг_ИспользоватьДатуПроизводстваСерии"));
#КонецВставки
		
	ДоходыИРасходыКлиентСервер.ВставитьДействиеОчиститьСтатьюИАналитикуРасходов(СтруктураДействий, ЭтотОбъект);

	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", СтруктураДействий);
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(СтруктураДействий);
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		"Склад",
		Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			Или ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
			
		ТекущаяСтрока.СписатьНаРасходы = Ложь;
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
			
	ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		ТекущаяСтрока.СписатьНаРасходы = Истина;
	КонецЕсли;
	
	ДоходыИРасходыКлиентСервер.ПриИзмененииРеквизитаДоступностиСтатьиВСтроке(ЭтотОбъект, ТекущаяСтрока, "Объект.Товары");
	
	Если НЕ ТекущаяСтрока.ВедетсяУчетПоГТД Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.СтранаПроисхождения = Неопределено;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
	УстановитьПризнакЗаполненияСклада();
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыНоменклатураПриИзмененииПосле(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ОбщиеМеханизмы.Паллетизация
	бг_ОбновитьОтображениеПаллетизации();
	Если бг_УпаковкиЕдиницыИзмеренияКлиентСервер.ОтображатьПаллетизацию(ЭтотОбъект) Тогда
		бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыНоменклатураПриИзмененииПосле(ЭтотОбъект, ТекущаяСтрока);
	КонецЕсли;
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоУпаковокПриИзмененииПосле(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// ОбщиеМеханизмы.Паллетизация
	Если бг_УпаковкиЕдиницыИзмеренияКлиентСервер.ОтображатьПаллетизацию(ЭтотОбъект) Тогда
		бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыКоличествоУпаковокПриИзмененииПосле(ЭтотОбъект, ТекущаяСтрока);
	КонецЕсли;
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыПослеУдаленияПосле(Элемент)
	
	// ОбщиеМеханизмы.Паллетизация
	бг_ОбновитьОтображениеПаллетизации();
	Если бг_УпаковкиЕдиницыИзмеренияКлиентСервер.ОтображатьПаллетизацию(ЭтотОбъект) Тогда
		бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыПослеУдаленияПосле(ЭтотОбъект);
	КонецЕсли;
	// Конец ОбщиеМеханизмы.Паллетизация
	
КонецПроцедуры

// ОбщиеМеханизмы.Паллетизация
&НаКлиенте
Процедура бг_ТоварыУпаковкаПаллетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыУпаковкаПаллетаОбработкаВыбора(
		ЭтотОбъект,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыУпаковкаПаллетаОчистка(Элемент, СтандартнаяОбработка)
	
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыУпаковкаПаллетаОчистка(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоПаллетПриИзменении(Элемент)
	
	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыКоличествоПаллетПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоКоробокПриИзменении(Элемент)

	бг_УпаковкиЕдиницыИзмеренияКлиент.ТоварыКоличествоКоробокПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыКоличествоУпаковокПриИзменении() Экспорт
	
	// Метод является эмулятором вызова типовой процедуры изменения количества товаров,
	// чтобы можно было вызвать ее из общего модуля.
	ТоварыКоличествоУпаковокПриИзменении(Элементы.Товары);	

КонецПроцедуры
// Конец ОбщиеМеханизмы.Паллетизация

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьСлужебныеРеквизитыПоНоменклатуре")
Процедура бг_ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтруктураНаименованийТабличныхЧастей)
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
											Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
											
#Вставка
	ПараметрыЗаполненияРеквизитов.Вставить(
		"бг_ЗаполнитьПризнакИспользоватьДатуПроизводстваСерии",
		Новый Структура("Номенклатура", "бг_ИспользоватьДатуПроизводстваСерии"));
#КонецВставки
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(ПараметрыЗаполненияРеквизитов);
	
	ОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруДействийПриИзмененииЭлемента(ЭтотОбъект, "Номенклатура", ПараметрыЗаполненияРеквизитов);

	Если СтруктураНаименованийТабличныхЧастей.Свойство("Товары") Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполненияРеквизитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура бг_СоздатьЭлементыФормы()
	
	ИмяФлагаГотовностиФормы = "бг_ЭлементыСозданы";
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяФлагаГотовностиФормы) Тогда
		Возврат;
	КонецЕсли;
	
	// Элементы
	бг_ДобавитьПолеАвизо();  
	бг_ДобавитьПоляБанковскиеГарантииНаСервере();
	бг_ДобавитьПолеДокументПоступленияНаСкладНаСервере();
	бг_ДобавитьЭлементыДоставки();
	бг_ДобавитьПоляМагистраль();
	бг_ДобавитьПолеПартнерПеревыставлениеНаСервере();
	бг_ДобавитьПолеПриобретениеТОиР();
	бг_ДобавитьПолеТоварыСертификатНоменклатуры();
	
	ИзменитьРеквизиты(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			Новый РеквизитФормы(ИмяФлагаГотовностиФормы, Новый ОписаниеТипов("Булево"))));
	
КонецПроцедуры

&НаСервере
Процедура бг_ПриПолученииДанныхНаСервере(ТекущийОбъект)
	
	бг_УстановитьОтображениеПредупрежденияПриИзмененииБанковскихГарантий();
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		бг_УстановитьНастройкуФормированияЗаявокНаДСМагистральПоУмолчанию();
	КонецЕсли;
	
	бг_ОбновитьНадписьСтатусМагистраль();
	бг_СкрытьТиповойРеквизитСертификатНоменклатуры();
	
КонецПроцедуры

&НаСервере
&После("УстановитьУсловноеОформление")
Процедура бг_УстановитьУсловноеОформление()
	
	бг_СерииНоменклатуры.УстановитьУсловноеОформлениеДатыПроизводстваСерии(
		ЭтаФорма,
		"бг_ТоварыДатаПроизводства",
		"Объект.Товары.бг_ИспользоватьДатуПроизводстваСерии");
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеАвизо()
	
	бг_Авизо = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма,
		"бг_Авизо",
		Элементы.ГруппаДополнительныеРеквизиты,
		"Объект.бг_Авизо",
		,
		,
		"ПолеФлажка");
	бг_Авизо.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьЭлементыДоставки()
	
	бг_ПунктПогрузки = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
							ЭтотОбъект,
							"бг_ПунктПогрузки",
							Элементы.ШапкаЛево,
							"Объект.бг_ПунктПогрузки");
	бг_ПунктПогрузки.АвтоМаксимальнаяШирина = Ложь;
	бг_ПунктПогрузки.МаксимальнаяШирина     = 29;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеПриобретениеТОиР()
	
	бг_ПриобретениеТОиР = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма,
		"бг_ПриобретениеТОиР",
		Элементы.ГруппаДополнительныеРеквизиты,
		"Объект.бг_ПриобретениеТОиР",
		,
		,
		"ПолеФлажка");
	бг_ПриобретениеТОиР.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьРеквизитИспользованияДатыПроизводстваСерий()

	РеквизитКДобавлению = Новый Массив;
	
	РеквизитКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ИспользоватьДатуПроизводстваСерии",
			Новый ОписаниеТипов("Булево"),
			"Объект.Товары"));

	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьРеквизитыНаФорму(ЭтотОбъект, РеквизитКДобавлению);	

КонецПроцедуры

#Область Паллетизация

&НаСервере
Процедура бг_ДобавитьРеквизитОтображенияПаллетизации()

	РеквизитКДобавлению = Новый Массив;
	
	РеквизитКДобавлению.Добавить(
		Новый РеквизитФормы(
			"бг_ОтображатьПаллетизацию",
			Новый ОписаниеТипов("Булево")));

	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьРеквизитыНаФорму(ЭтотОбъект, РеквизитКДобавлению);

КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьОтображениеПаллетизации(ДанныеФормыКоллекция)
	
	НоменклатураИзДокумента = ДанныеФормыКоллекция.Товары.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	ПроверяемыйСписокНоменклатуры = Новый Массив;
	
	Для каждого Номенклатура Из НоменклатураИзДокумента Цикл
		Если ЗначениеЗаполнено(Номенклатура) И ПроверяемыйСписокНоменклатуры.Найти(Номенклатура) = Неопределено Тогда
			ПроверяемыйСписокНоменклатуры.Добавить(Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверяемыйСписокНоменклатуры.Количество() = 0 Тогда
		ЕстьЕКНоменклатура = Ложь;
		ЕстьАлкогольнаяПродукция = Ложь;
	Иначе
		ЕстьЕКНоменклатура = бг_Номенклатура.ЕстьЕКНоменклатура(ПроверяемыйСписокНоменклатуры);
		ЕстьАлкогольнаяПродукция = бг_Номенклатура.ЕстьАлкогольнаяПродукция(ПроверяемыйСписокНоменклатуры);
	КонецЕсли;
	
	ЭтотОбъект.бг_ОтображатьПаллетизацию = ЕстьЕКНоменклатура И Не ЕстьАлкогольнаяПродукция;
	
КонецПроцедуры

&НаСервере
Процедура бг_ОбновитьОтображениеПаллетизации()
	
	бг_ЗаполнитьОтображениеПаллетизации(Объект);
	
	Если бг_УпаковкиЕдиницыИзмеренияКлиентСервер.ОтображатьПаллетизацию(ЭтотОбъект) Тогда
		бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);
		бг_УпаковкиЕдиницыИзмеренияКлиентСервер.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	КонецЕсли;
	
	бг_УпаковкиЕдиницыИзмерения.УстановитьВидимостьДоступностьЭлементовПаллетизации(ЭтотОбъект);
	
КонецПроцедуры

// ОбщиеМеханизмы.Паллетизация
&НаСервере
Процедура бг_ЗаполнитьДанныеПаллетизацииТоваровИзФормыНаСервере()

	бг_УпаковкиЕдиницыИзмерения.ЗаполнитьДанныеПаллетизацииТоваровИзФормы(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура бг_ТоварыУпаковкаПаллетаОбработкаВыбораНаСервере(ВыбраннаяУпаковкаПаллета, ИдентификаторСтрокиТовары) Экспорт

	бг_УпаковкиЕдиницыИзмерения.ТоварыУпаковкаПаллетаОбработкаВыбора(
		ЭтотОбъект,
		ВыбраннаяУпаковкаПаллета,
		ИдентификаторСтрокиТовары);

КонецПроцедуры
// Конец ОбщиеМеханизмы.Паллетизация

#КонецОбласти // Конец Паллетизация

#Область БанковскиеГарантии

&НаСервере
Процедура бг_ДобавитьПоляБанковскиеГарантииНаСервере()
	
	// СтраницаБанковскиеГарантии
	КонтекстСтраницы = бг_ПрограммныйИнтерфейс.НовыйКонтекстЭлемента(ЭтотОбъект);
	КонтекстСтраницы.Свойства.Вставить("Вид", ВидГруппыФормы.Страницы);
	ГруппаСтраницы = Элементы.ГруппаСтраницы;
	
	КонтекстСтраницы.Свойства.Вид = ВидГруппыФормы.Страница;	
	КонтекстСтраницы.Родитель = ГруппаСтраницы;
	КонтекстСтраницы.Свойства.Вставить("Заголовок", "Банковские гарантии");
	СтраницаБанковскиеГарантии = бг_ПрограммныйИнтерфейс.НоваяГруппаФормы(КонтекстСтраницы, "СтраницаБанковскиеГарантии");		
	
	// ТаблицаБанковскиеГарантии
	КонтекстГруппТаблицы = бг_ПрограммныйИнтерфейс.НовыйКонтекстЭлемента(ЭтотОбъект, СтраницаБанковскиеГарантии);
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("ТаблицаБанковскаяГарантия", "БанковскаяГарантия");
	СтруктураКолонок.Вставить("ТаблицаКоличество", "Количество");
	СтруктураКолонок.Вставить("ТаблицаСумма", "Сумма");
	ЭлементТаблица = бг_ПрограммныйИнтерфейс.НоваяТаблицаФормы(КонтекстГруппТаблицы, "ТаблицаБанковскиеГарантии", "Объект.БанковскиеГарантии", СтруктураКолонок);	
	
	// бг_ЗаполнитьБанковскиеГарантии
	КонтекстКоманды = бг_ПрограммныйИнтерфейс.НовыйКонтекстЭлемента(ЭтотОбъект, ЭлементТаблица.КоманднаяПанель);
	бг_ПрограммныйИнтерфейс.НоваяКомандаИКнопкаКоманднойПанели(КонтекстКоманды, "бг_ЗаполнитьБанковскиеГарантии", "Заполнить");
	
	// бг_ДиапазонБанковскихГарантий
	КонтекстПоля = бг_ПрограммныйИнтерфейс.НовыйКонтекстЭлемента(ЭтотОбъект, СтраницаБанковскиеГарантии,ЭлементТаблица);	
	КонтекстПоля.Свойства.Вставить("ПутьКДанным", "Объект.бг_ДиапазонБанковскихГарантий");
	бг_ПрограммныйИнтерфейс.НовоеПолеФормы(КонтекстПоля, "бг_ДиапазонБанковскихГарантий");
	Элементы.бг_ДиапазонБанковскихГарантий.ПредупреждениеПриРедактировании = 
		НСтр(
			"ru = 'Банковские гарантии будут перезаполнены';
			|en = 'Банковские гарантии будут перезаполнены'");
	Элементы.бг_ДиапазонБанковскихГарантий.УстановитьДействие("ПриИзменении", "бг_ДиапазонБанковскихГарантийПриИзменении");
	
	// бг_РежимАвансовогоПлатежаЗаАкцизВБюджет 
	КонтекстПоля = бг_ПрограммныйИнтерфейс.НовыйКонтекстЭлемента(ЭтотОбъект, СтраницаБанковскиеГарантии);	
	КонтекстПоля.Свойства.Вставить("ПутьКДанным", "Объект.бг_РежимАвансовогоПлатежаЗаАкцизВБюджет");
	бг_ПрограммныйИнтерфейс.НовоеПолеФормы(КонтекстПоля, "бг_РежимАвансовогоПлатежаЗаАкцизВБюджет");
	
КонецПроцедуры

&НаСервере
Процедура бг_УстановитьОтображениеПредупрежденияПриИзмененииБанковскихГарантий()
	ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
		Элементы.бг_ДиапазонБанковскихГарантий, 
		ЗначениеЗаполнено(Объект.бг_ДиапазонБанковскихГарантий));
КонецПроцедуры

&НаСервере
Процедура бг_ДиапазонБанковскихГарантийПриИзмененииНаСервере()
	
	бг_ЗаполнитьБанковскиеГарантииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.бг_ДиапазонБанковскихГарантий) Тогда
		Объект.бг_РежимАвансовогоПлатежаЗаАкцизВБюджет = Перечисления.бг_РежимАвансовогоПлатежаЗаАкцизВБюджет.ВСчетБанковскойГарантии;
	Иначе
		Объект.бг_РежимАвансовогоПлатежаЗаАкцизВБюджет = Перечисления.бг_РежимАвансовогоПлатежаЗаАкцизВБюджет.НеОплачен;
	КонецЕсли;
	
	бг_УстановитьОтображениеПредупрежденияПриИзмененииБанковскихГарантий();
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьБанковскиеГарантииНаСервере()
	
	Объект.БанковскиеГарантии.Очистить();
	бг_УчетБанковскихГарантий.ЗаполнитьБанковскиеГарантии(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстаткиБанковскихГарантийПоДиапазону(ДиапазонГарантий, ЗаполняемыйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_БанковскиеГарантии.БанковскаяГарантия КАК Ссылка,
	|	бг_БанковскиеГарантии.БанковскаяГарантия.ДатаВыдачи КАК ДатаВыдачи,
	|	СУММА(бг_БанковскиеГарантии.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		бг_БанковскиеГарантии.БанковскаяГарантия КАК БанковскаяГарантия,
	|		бг_БанковскиеГарантии.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.бг_БанковскиеГарантии.Остатки КАК бг_БанковскиеГарантии
	|	ГДЕ
	|		бг_БанковскиеГарантии.БанковскаяГарантия В ИЕРАРХИИ(&ДиапазонГарантий)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		бг_БанковскиеГарантии.БанковскаяГарантия,
	|		ВЫБОР
	|			КОГДА бг_БанковскиеГарантии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -бг_БанковскиеГарантии.Количество
	|			ИНАЧЕ бг_БанковскиеГарантии.Количество
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.бг_БанковскиеГарантии КАК бг_БанковскиеГарантии
	|	ГДЕ
	|		бг_БанковскиеГарантии.Регистратор = &ЗаполняемыйДокумент
	|		И бг_БанковскиеГарантии.БанковскаяГарантия В ИЕРАРХИИ(&ДиапазонГарантий)) КАК бг_БанковскиеГарантии
	|
	|СГРУППИРОВАТЬ ПО
	|	бг_БанковскиеГарантии.БанковскаяГарантия,
	|	бг_БанковскиеГарантии.БанковскаяГарантия.ДатаВыдачи";
	Запрос.УстановитьПараметр("ДиапазонГарантий",    ДиапазонГарантий);
	Запрос.УстановитьПараметр("ЗаполняемыйДокумент", ЗаполняемыйДокумент);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти // Конец БанковскиеГарантии

#Область ПартнерПеревыставление

&НаСервере
Процедура бг_ДобавитьПолеПартнерПеревыставлениеНаСервере()

	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма, 
		"бг_ПартнерПеревыставление", 
		Элементы.ГруппаДополнительныеРеквизиты, 
		"Объект.бг_ПартнерПеревыставление");
	
КонецПроцедуры
	
#КонецОбласти // Конец ПартнерПеревыставление

#Область Серии

&НаСервере
Процедура бг_ДобавитьКомандуСгенерироватьСерии()
	
	КнопкаСгенерироватьСерии = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		ЭтотОбъект, 
		"бг_СгенерироватьСерии", 
		Элементы.ТоварыЗаполнить, 
		"Сгенерировать серии", 
		"бг_СгенерироватьСерии", 
		"бг_СгенерироватьСерии");
		
	КнопкаСгенерироватьСерии.Картинка = БиблиотекаКартинок.СерииНоменклатурыУказаны;
	КнопкаСгенерироватьСерии.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеТоварыДатаПроизводства()
	
	ЭлементДатаПроизводства = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_ТоварыДатаПроизводства",
		Элементы.Товары,
		"Объект.Товары.бг_ДатаПроизводства",,
		Элементы.ТоварыСертификат);
	
КонецПроцедуры

&НаСервере
Функция бг_ВозможнаГенерацияСерий()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена организация'"),, "Организация", "Объект");
		Возврат Ложь;
	КонецЕсли;
	
	ТоварыДляГенерацииСерий = бг_ТоварыДляГенерацииСерий();
	
	// Проверка наличия алкогольной продукции, не являющейся ССП.
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерий Цикл
	
		Если ДанныеТовара.АлкогольнаяПродукция И Не ДанныеТовара.ЭтоИмпортныеССП И Не ДанныеТовара.ЭтоПиво Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Среди товаров присутствует алкогольная продукция, которая не относится к ССП или пиву.
				| Серии для таких товаров формируются в ТТН входящей ЕГАИС.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ФормироватьСерииДляССП = бг_ФормироватьСерииДляССП(ТоварыДляГенерацииСерий);
	ФормироватьСерииДляЕК_СУМ = бг_ФормироватьСерииДляЕК_СУМ(ТоварыДляГенерацииСерий, Объект.Склад);
	
	Если ФормироватьСерииДляССП Или ФормироватьСерииДляЕК_СУМ Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Заполните дату входящего документа'"));
			Возврат Ложь;
		КонецЕсли;
	
	Иначе
		
		ТоварыДляГенерацииСерийБезалкогольные = бг_ТоварыДляГенерацииСерийБезалкогольные(ТоварыДляГенерацииСерий);
		ТоварыДляГенерацииСерийПиво = бг_ТоварыДляГенерацииСерийПиво(ТоварыДляГенерацииСерий);

		Если ТоварыДляГенерацииСерийБезалкогольные.Количество() = 0
			И ТоварыДляГенерацииСерийПиво.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет товаров для генерации серий.'"));
			Возврат Ложь;
		КонецЕсли;
		
		ТаблицаПроверкиДублей = Новый ТаблицаЗначений;
		ТаблицаПроверкиДублей.Колонки.Добавить("Номенклатура");
		ТаблицаПроверкиДублей.Колонки.Добавить("НомерГТД");
		ТаблицаПроверкиДублей.Колонки.Добавить("ДатаПроизводства");
		
		Для каждого ДанныеТовара Из ТоварыДляГенерацииСерийБезалкогольные Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПроверкиДублей.Добавить(), ДанныеТовара);
		КонецЦикла;
		
		Для каждого ДанныеТовара Из ТоварыДляГенерацииСерийПиво Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПроверкиДублей.Добавить(), ДанныеТовара);
		КонецЦикла;

		КоличествоСтрокДоСворачивания = ТаблицаПроверкиДублей.Количество();
		ТаблицаПроверкиДублей.Свернуть("Номенклатура, НомерГТД, ДатаПроизводства");
		КоличествоСтрокПослеСворачивания = ТаблицаПроверкиДублей.Количество();
		
		Если КоличествоСтрокДоСворачивания > КоличествоСтрокПослеСворачивания Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Среди товаров присутствуют дубли строк по номенклатуре, номеру ГТД и дате производства.'"));
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция бг_ФормироватьСерииДляССП(ТоварыДляГенерацииСерий)

	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерий Цикл
		Если ДанныеТовара.ЭтоИмпортныеССП Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция бг_ФормироватьСерииДляПива(ТоварыДляГенерацииСерий)
	
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерий Цикл
		Если ДанныеТовара.ЭтоПиво Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция бг_ТоварыДляГенерацииСерий()
	
	ТоварыДляГенерацииСерий = Новый Массив;

	СписокНоменклатуры = Новый Массив;
	СписокТоваров = Новый Массив;
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) И Не ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
			
			СписокТоваров.Добавить(СтрокаТовары);
			
			Если СписокНоменклатуры.Найти(СтрокаТовары.Номенклатура) = Неопределено Тогда
				СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеСпискаНоменклатурыДляГенерацииСерий = бг_ДанныеСпискаНоменклатурыДляГенерацииСерий(СписокНоменклатуры);
	
	Для каждого СтрокаТовары Из СписокТоваров Цикл
	
		ДанныеНоменклатурыДляГенерацииСерий = ДанныеСпискаНоменклатурыДляГенерацииСерий.Найти(
			СтрокаТовары.Номенклатура,
			"Номенклатура");
			
		Если ДанныеНоменклатурыДляГенерацииСерий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеТовараДляГенерацииСерий = бг_НовыйДанныеТовараДляГенерацииСерий();
		
		ДанныеТовараДляГенерацииСерий.ИдентификаторСтрокиТовары = СтрокаТовары.ПолучитьИдентификатор();
		
		ЗаполнитьЗначенияСвойств(
			ДанныеТовараДляГенерацииСерий,
			ДанныеНоменклатурыДляГенерацииСерий,
			"ВидНоменклатуры,
			|Номенклатура,
			|АлкогольнаяПродукция,
			|ЭтоПиво,
			|ИспользоватьДатуПроизводстваСерии,
			|ЭтоИмпортныеССП,
			|Это_ЕК_СУМ");
			
		ДанныеТовараДляГенерацииСерий.ДатаВходящегоДокумента = Объект.ДатаВходящегоДокумента;
		ДанныеТовараДляГенерацииСерий.ДатаПроизводства = СтрокаТовары.бг_ДатаПроизводства;
		ДанныеТовараДляГенерацииСерий.ДокументВыпуска = Объект.Ссылка;
		ДанныеТовараДляГенерацииСерий.НомерВходящегоДокумента = Объект.НомерВходящегоДокумента;
		ДанныеТовараДляГенерацииСерий.НомерГТД = СтрокаТовары.НомерГТД;
		ДанныеТовараДляГенерацииСерий.НомерСтроки = СтрокаТовары.НомерСтроки;
		ДанныеТовараДляГенерацииСерий.ОрганизацияВладелец = Объект.Организация;
		ДанныеТовараДляГенерацииСерий.УпаковкаПаллета = СтрокаТовары.бг_УпаковкаПаллета;
		
		ТоварыДляГенерацииСерий.Добавить(ДанныеТовараДляГенерацииСерий);
		
	КонецЦикла;
	
	Возврат ТоварыДляГенерацииСерий;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция бг_ТоварыДляГенерацииСерийССП(ТоварыДляГенерацииСерийОбщие)

	ТоварыДляГенерацииСерийССП = Новый Массив;
	
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерийОбщие Цикл
		Если ДанныеТовара.ЭтоИмпортныеССП Тогда
			ТоварыДляГенерацииСерийССП.Добавить(ДанныеТовара);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТоварыДляГенерацииСерийССП;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция бг_ТоварыДляГенерацииСерийБезалкогольные(ТоварыДляГенерацииСерийОбщие)

	ТоварыДляГенерацииСерийБезалкогольные = Новый Массив;
	
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерийОбщие Цикл
		
		Если Не ДанныеТовара.АлкогольнаяПродукция
			И ЗначениеЗаполнено(ДанныеТовара.ДатаПроизводства)
			И ЗначениеЗаполнено(ДанныеТовара.УпаковкаПаллета)
			И ДанныеТовара.ИспользоватьДатуПроизводстваСерии Тогда
			
			ТоварыДляГенерацииСерийБезалкогольные.Добавить(ДанныеТовара);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТоварыДляГенерацииСерийБезалкогольные;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция бг_ТоварыДляГенерацииСерийПиво(ТоварыДляГенерацииСерийОбщие)

	ТоварыДляГенерацииСерий = Новый Массив;
	
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерийОбщие Цикл
		
		Если Не ДанныеТовара.ЭтоПиво Или Не ЗначениеЗаполнено(ДанныеТовара.ДатаПроизводства) Тогда
			Продолжить;
		КонецЕсли;
		
		ТоварыДляГенерацииСерий.Добавить(ДанныеТовара);
		
	КонецЦикла;
	
	Возврат ТоварыДляГенерацииСерий;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_НовыйДанныеТовараДляГенерацииСерий()

	ДанныеТовараДляГенерацииСерий = Новый Структура;
	
	ДанныеТовараДляГенерацииСерий.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("ДатаВходящегоДокумента", Дата(1, 1, 1));
	ДанныеТовараДляГенерацииСерий.Вставить("ДатаПроизводства", Дата(1, 1, 1));
	ДанныеТовараДляГенерацииСерий.Вставить("ДокументВыпуска", Документы.ПриобретениеТоваровУслуг.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("ИспользоватьДатуПроизводстваСерии", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("ИдентификаторСтрокиТовары", 0);
	ДанныеТовараДляГенерацииСерий.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("НомерВходящегоДокумента", "");
	ДанныеТовараДляГенерацииСерий.Вставить("НомерГТД", 0);
	ДанныеТовараДляГенерацииСерий.Вставить("НомерСтроки", 0);
	ДанныеТовараДляГенерацииСерий.Вставить("ОрганизацияВладелец", Справочники.Организации.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("УпаковкаПаллета", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("Это_ЕК_СУМ", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("ЭтоИмпортныеССП", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("ЭтоПиво", Ложь);
	
	Возврат ДанныеТовараДляГенерацииСерий;

КонецФункции

&НаСервереБезКонтекста
Функция бг_ДанныеСпискаНоменклатурыДляГенерацииСерий(СписокНоменклатуры)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Номенклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Номенклатура.ВидНоменклатуры.ИспользоватьДатуПроизводстваСерии КАК ИспользоватьДатуПроизводстваСерии,
	|	Номенклатура.ВидНоменклатуры = &ВидНоменклатурыИмпортныеССП КАК ЭтоИмпортныеССП,
	|	Номенклатура.ВидНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво) КАК ЭтоПиво,
	|	ВЫБОР
	|		КОГДА Номенклатура.ВидНоменклатуры.бг_ВидКлассификатораНСИ 
	|			= ЗНАЧЕНИЕ(Перечисление.бг_ВидКлассификатораНСИ.КодЕК_СУМ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Это_ЕК_СУМ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ВидНоменклатурыИмпортныеССП", бг_КонстантыПовтИсп.ЗначениеКонстанты("ИмпортныеССП"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_СоздатьСериюИмпортныеССП(ДанныеДляСерии)
	
	СерияОбъект = Справочники.СерииНоменклатуры.ПустойОбъект(ДанныеДляСерии.ВидНоменклатуры);
	
	СерияОбъект.бг_ДатаИнвойса     = ДанныеДляСерии.ДатаВходящегоДокумента;
	СерияОбъект.бг_ДокументВыпуска = ДанныеДляСерии.ДокументВыпуска;
	СерияОбъект.бг_Номенклатура    = ДанныеДляСерии.Номенклатура;
	СерияОбъект.Номер = СтрШаблон(
		НСтр("ru = 'Ожидает получения справки 2 строка №%1'"),
		ДанныеДляСерии.НомерСтроки);
	СерияОбъект.бг_ОрганизацияВладелец = ДанныеДляСерии.ОрганизацияВладелец;
		
	СерияОбъект.Записать();
	
	Возврат СерияОбъект.Ссылка;
		
КонецФункции

&НаСервереБезКонтекста
Функция бг_НайтиСоздатьСерию(ДанныеДляСерии)
	
	СуществующаяСерия = бг_НайтиСерию(ДанныеДляСерии);
	
	Если ЗначениеЗаполнено(СуществующаяСерия) Тогда
		Возврат СуществующаяСерия;
	Иначе
		Возврат бг_СоздатьСерию(ДанныеДляСерии);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_НайтиСерию(ДанныеДляСерии)
	
	НайденнаяСерия = Неопределено; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	НЕ СерииНоменклатуры.ПометкаУдаления
	|	И СерииНоменклатуры.бг_ДокументВыпуска = &ДокументВыпуска
	|	И СерииНоменклатуры.бг_Номенклатура = &Номенклатура
	|	И СерииНоменклатуры.бг_НомерГТД = &НомерГТД
	|	И СерииНоменклатуры.ДатаПроизводства = &ДатаПроизводства";
	
	Запрос.УстановитьПараметр("ДокументВыпуска", ДанныеДляСерии.ДокументВыпуска);
	Запрос.УстановитьПараметр("Номенклатура", ДанныеДляСерии.Номенклатура);
	Запрос.УстановитьПараметр("НомерГТД", ДанныеДляСерии.НомерГТД);
	Запрос.УстановитьПараметр("ДатаПроизводства", ДанныеДляСерии.ДатаПроизводства);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденнаяСерия = Выборка.Серия;
	КонецЦикла;
	
	Возврат НайденнаяСерия;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_СоздатьСерию(ДанныеДляСерии)
	
	СерияОбъект = Справочники.СерииНоменклатуры.ПустойОбъект(ДанныеДляСерии.ВидНоменклатуры);
	
	СерияОбъект.бг_ДокументВыпуска = ДанныеДляСерии.ДокументВыпуска;
	СерияОбъект.бг_Номенклатура = ДанныеДляСерии.Номенклатура;
	СерияОбъект.бг_НомерГТД = ДанныеДляСерии.НомерГТД;
	СерияОбъект.бг_УпаковкаПаллета = ДанныеДляСерии.УпаковкаПаллета;
	СерияОбъект.ГоденДо = бг_Номенклатура.ГоденДо(ДанныеДляСерии.Номенклатура, ДанныеДляСерии.ДатаПроизводства);
	СерияОбъект.ДатаПроизводства = ДанныеДляСерии.ДатаПроизводства;
	СерияОбъект.бг_ОрганизацияВладелец = ДанныеДляСерии.ОрганизацияВладелец;
	
	бг_СерииНоменклатуры.УстановитьНовыйНомерСерии(СерияОбъект);
	
	СерияОбъект.Записать();
	
	Возврат СерияОбъект.Ссылка;
	
КонецФункции

#Область Серии_ЕК_СУМ

&НаКлиентеНаСервереБезКонтекста
Функция бг_ФормироватьСерииДляЕК_СУМ(ТоварыДляГенерацииСерий, Склад)
	
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерий Цикл
		ЭтоУправлениеОстаткамиСерий = бг_НаСкладеИспользуетсяПолитикаУправлениеОстаткамиСерий(
										ДанныеТовара.ВидНоменклатуры,
										Склад);
		Если ДанныеТовара.Это_ЕК_СУМ
			И ЭтоУправлениеОстаткамиСерий Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция бг_ТоварыДляГенерацииСерийЕК_СУМ(ТоварыДляГенерацииСерийОбщие)

	ТоварыДляГенерацииСерийЕК_СУМ = Новый Массив;
	
	Для каждого ДанныеТовара Из ТоварыДляГенерацииСерийОбщие Цикл
		Если ДанныеТовара.Это_ЕК_СУМ Тогда
			ТоварыДляГенерацииСерийЕК_СУМ.Добавить(ДанныеТовара);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТоварыДляГенерацииСерийЕК_СУМ;
	
КонецФункции

&НаСервереБезКонтекста
Функция бг_СоздатьСериюЕК_СУМ(ДанныеДляСерии)

	СерияОбъект = Справочники.СерииНоменклатуры.ПустойОбъект(ДанныеДляСерии.ВидНоменклатуры);
	
	СерияОбъект.бг_Номенклатура = ДанныеДляСерии.Номенклатура;
	СерияОбъект.бг_ДокументВыпуска = ДанныеДляСерии.ДокументВыпуска;
	СерияОбъект.ГоденДо = бг_Номенклатура.ГоденДо(ДанныеДляСерии.Номенклатура, ДанныеДляСерии.ДатаВходящегоДокумента);
	СерияОбъект.Номер = СтрШаблон(
		НСтр("ru = '%1 %2'"),
		ДанныеДляСерии.НомерВходящегоДокумента,
		Формат(ДанныеДляСерии.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"));
		
	СерияОбъект.Записать();
	
	Возврат СерияОбъект.Ссылка;

КонецФункции

&НаСервереБезКонтекста
Функция бг_НаСкладеИспользуетсяПолитикаУправлениеОстаткамиСерий(ВидНоменклатуры, Склад)
	
	Возврат Справочники.Склады.бг_НаСкладеИспользуетсяПолитикаУправлениеОстаткамиСерий(
										ВидНоменклатуры,
										Склад);

КонецФункции

#КонецОбласти

#КонецОбласти // Конец Серии

#Область ДокументПоступленияНаСклад

&НаСервере
Процедура бг_ДобавитьПолеДокументПоступленияНаСкладНаСервере()

	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма, 
		"бг_ДокументПоступленияНаСклад", 
		Элементы.ГруппаВходящийДокумент, 
		"Объект.бг_ДокументПоступленияНаСклад");
	Элементы.бг_ДокументПоступленияНаСклад.УстановитьДействие("ПриИзменении", "бг_ДокументПоступленияНаСкладПриИзменении");
	
КонецПроцедуры

&НаСервере
Процедура бг_ДокументПоступленияНаСкладПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.бг_ДокументПоступленияНаСклад = &ДокументПоступленияНаСклад
	|	И ПриобретениеТоваровУслуг.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ДокументПоступленияНаСклад", Объект.бг_ДокументПоступленияНаСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> Объект.Ссылка Тогда
			Объект.бг_ДокументПоступленияНаСклад = Документы.ПоступлениеТоваровНаСклад.ПустаяСсылка();
			Сообщить("Выбранное поступление уже указано в документе: " + Строка(Выборка.Ссылка));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти // Конец ДокументПоступленияНаСклад

#Область Магистраль

&НаСервере
Процедура бг_ДобавитьПоляМагистраль()
	
	бг_ГруппаШапкаМагистраль = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтотОбъект,
		"бг_ГруппаШапкаМагистраль",
		Элементы.ГруппаОсновное,
		ВидГруппыФормы.ОбычнаяГруппа,
		Элементы.Комментарий);
	бг_ГруппаШапкаМагистраль.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	бг_ГруппаШапкаМагистраль.Заголовок = НСтр("ru = 'Проект ""Магистраль""'");
	
	бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС =
		бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтотОбъект,
		"бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС",
		бг_ГруппаШапкаМагистраль,
		"Объект.бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС",
		,
		,
		"ПолеФлажка");
	бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС.ВидФлажка = ВидФлажка.Выключатель;
	
	бг_ДекорацияСтатусМагистраль =
		бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьДекорациюНаФорму(
		ЭтотОбъект,
		"бг_ДекорацияСтатусМагистраль",
		бг_ГруппаШапкаМагистраль,
		НСтр("ru = 'n/a'"));
	
	бг_ДекорацияСтатусМагистраль.УстановитьДействие(
		"ОбработкаНавигационнойСсылки", "бг_ДекорацияСтатусМагистральОбработкаНавигационнойСсылки");
	
	бг_Магистраль.УстановитьДоступностьРеквизитовМагистральНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура бг_УстановитьНастройкуФормированияЗаявокНаДСМагистральПоУмолчанию()
	
	Объект.бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС =
		бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС(Объект.Договор);
	
	бг_Магистраль.УстановитьДоступностьРеквизитовМагистральНаФорме(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПередЗаписьюМагистраль(Отказ, ПараметрыЗаписи)
	
	Если Модифицированность
		И ЗначениеЗаполнено(ПараметрыЗаписи)
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента)
		И Объект.бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС Тогда
		
		ДатаДокумента = Объект.Дата;
		Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ОбщегоНазначенияКлиент.ДатаСеанса();
		КонецЕсли;
		
		Если НачалоДня(Объект.ДатаВходящегоДокумента) <> НачалоДня(ДатаДокумента)
			И Не ПараметрыЗаписи.Свойство("бг_ПередЗаписьюМагистральПропуститьПроверку") Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Дата документа отличается от даты вх. документа по данным поставщика.
                                 |Отсрочка платежа будет рассчитана от даты документа.
                                 |Провести документ?'");
			
			ОписаниеОповещения = Новый ОписаниеОповещения("бг_ПередЗаписьюПередМагистральОтвет", ЭтотОбъект, ПараметрыЗаписи);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ПередЗаписьюПередМагистральОтвет(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("бг_ПередЗаписьюМагистральПропуститьПроверку");
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ОбновитьНадписьСтатусМагистраль()
	
	Если ЭтотОбъект.Элементы.Найти("бг_ДекорацияСтатусМагистраль") <> Неопределено
		И (Объект.бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС
			Или бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС(Объект.Договор)) Тогда
		
		ЭтотОбъект.Элементы.бг_ДекорацияСтатусМагистраль.Заголовок =
			бг_Магистраль.НадписьСтатусЗаявкиНаРасходованиеДС(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС(Договор)
	
	Возврат бг_Магистраль.АвтоматическиФормироватьЗаявкиНаРасходованиеДС(Договор);
	
КонецФункции

#КонецОбласти // Конец Магистраль

#Область ПриходныйОрдерНаТовары

// ОбщиеМеханизмы.ПриходныйОрдер
&НаСервере
Процедура бг_ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары()

	бг_Склады.ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары(
		ЭтотОбъект,
		Метаданные.Документы.ПриобретениеТоваровУслуг);

КонецПроцедуры

&НаКлиенте
Процедура бг_ОткрытьФормуНовогоПриходногоОрдераНаТовары()
	
	Основание = Новый Структура;
	Основание.Вставить("Распоряжение",               Объект.Ссылка);
	Основание.Вставить("Отправитель",                Объект.Партнер);
	Основание.Вставить("Склад",                      Объект.Склад);
	Основание.Вставить("ДатаВходящегоДокумента",     Объект.ДатаВходящегоДокумента);
	Основание.Вставить("НомерВходящегоДокумента",    Объект.НомерВходящегоДокумента);
	Основание.Вставить("ДатаПоступления",            Объект.ДатаПоступления);
	Основание.Вставить("ХозяйственнаяОперация",      Объект.ХозяйственнаяОперация);
	
	ОткрытьФорму(
		"Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента",
		Новый Структура("Основание", Основание));
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.ПриходныйОрдер

#КонецОбласти // Конец ПриходныйОрдерНаТовары

#Область СертификатНоменклатуры

&НаСервере
Процедура бг_СкрытьТиповойРеквизитСертификатНоменклатуры()
	
	Элементы.ТоварыСертификат.Видимость = Ложь;	
	
КонецПроцедуры 

&НаКлиенте
Процедура бг_ТоварыСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("бг_ТолькоДействующиеНаДату", Истина);
	ПараметрыФормы.Вставить("бг_Номенклатура", ТекущаяСтрока.Номенклатура);
	ПараметрыФормы.Вставить("бг_РежимВыбора", Истина);
	
	ОповещениеПоЗавершенииВыбора = Новый ОписаниеОповещения(
		"бг_ТоварыСертификатЗавершениеВыбора",
		ЭтотОбъект);
	
	ОткрытьФорму("Справочник.СертификатыНоменклатуры.Форма.ФормаСписка", ПараметрыФормы,,,,,ОповещениеПоЗавершенииВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура бг_ТоварыСертификатЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.бг_Сертификат = Результат;

КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьПолеТоварыСертификатНоменклатуры()
	
	бг_Сертификат = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		ЭтаФорма,
		"бг_Сертификат",
		Элементы.Товары,
		"Объект.Товары.бг_Сертификат",,
		Элементы.ТоварыСертификат);
	
	бг_Сертификат.УстановитьДействие("НачалоВыбора", "бг_ТоварыСертификатНачалоВыбора");
	
КонецПроцедуры

#КонецОбласти // Конец СертификатНоменклатуры

&НаКлиенте
Процедура бг_ПередЗаписьюПроверкаВалютыДокумента(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ПараметрыЗаписи)
		И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ВалютаПоДокументу = Объект.Валюта;
		ДоговорКонтрагента = Объект.Договор;
		Организация = Объект.Организация;
		Если Не ЗначениеЗаполнено(ВалютаПоДокументу)
			Или Не ЗначениеЗаполнено(ДоговорКонтрагента)
			Или Не ЗначениеЗаполнено(Организация) Тогда
			Возврат;
		КонецЕсли;
		РезультатПроверки = бг_ЕстьОшибкиПроверкиВалютыДокументаИВалютыДоговора(Отказ, ВалютаПоДокументу, 
			ДоговорКонтрагента, Организация);
		Если РезультатПроверки Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно установлена валюта документа! Выберите коррентую валюту!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция бг_ЕстьОшибкиПроверкиВалютыДокументаИВалютыДоговора(Отказ, ВалютаПоДокументу, ДоговорКонтрагента, Организация)
	РезультатПроверки = Ложь;
	СписокРеквизитов = "ВалютаВзаиморасчетов, ОплатаВВалюте";
	РеквизитыДоговораСтруктурой = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, СписокРеквизитов);
	ВалютаВзаиморасчетовДоговор = РеквизитыДоговораСтруктурой.ВалютаВзаиморасчетов;
	ОплатаВВалютеДоговор = РеквизитыДоговораСтруктурой.ОплатаВВалюте;
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);

	//	Если взаиморасчеты в условных единицах (у.е.),
    //  	-Валюта взаиморасчетов не равно руб.
	//  	-ОплатаВВалюте = нет
	//	и валюта суммы документа не равно руб., то не проводить
	//Контроль не должен выполняться для полных прав и определенной роли (добавить новую КонтрольВалютыВПоступлениях)
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовДоговор)
		И ВалютаВзаиморасчетовДоговор <> ВалютаРегламентированногоУчета
		И Не ОплатаВВалютеДоговор 
		И ВалютаПоДокументу <> ВалютаРегламентированногоУчета Тогда
		Если Не РольДоступна("бг_КонтрольВалютыВПоступлениях") И Не РольДоступна("ПолныеПрава") Тогда
			Отказ = Истина;
		КонецЕсли;
		РезультатПроверки = Истина;
	КонецЕсли;
	Возврат РезультатПроверки;
КонецФункции

&НаСервере
Процедура бг_ПартнерКонтрагентПриИзменении()
	
	ПунктыНазначения = бг_ТранспортнаяЛогистика.ПунктыНазначенияПоИННГрузополучателя(Объект.Контрагент);
	
	бг_ЗаполнитьПунктПогрузки(ПунктыНазначения);
	бг_ЗаполнитьПараметрыВыбораПунктаПогрузки(ПунктыНазначения);
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьПунктПогрузки(ПунктыНазначения)

	Если ПунктыНазначения.Найти(Объект.бг_ПунктПогрузки) = Неопределено Тогда
		Объект.бг_ПунктПогрузки = Справочники.битПунктыНазначения.ПустаяСсылка();	
	КонецЕсли;
	
	Если ПунктыНазначения.Количество() = 1 Тогда
		Объект.бг_ПунктПогрузки = ПунктыНазначения[0];	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_ЗаполнитьПараметрыВыбораПунктаПогрузки(ПунктыНазначения = Неопределено) 
	
	Если ПунктыНазначения = Неопределено Тогда
		ПунктыНазначения = бг_ТранспортнаяЛогистика.ПунктыНазначенияПоИННГрузополучателя(Объект.Контрагент);
	КонецЕсли;
	
	НовыеПараметры = Новый Массив;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", ПунктыНазначения);
	
	НовыеПараметры.Добавить(ПараметрВыбора);
	
	Элементы.бг_ПунктПогрузки.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
		
КонецПроцедуры

&НаСервере
&После("ПоступлениеПоЗаказамПриИзмененииСервер")
Процедура бг_ПоступлениеПоЗаказамПриИзмененииСервер()
	
	Если Не ИспользоватьПоступлениеПоНесколькимЗаказам 
			И ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		Объект.бг_ПунктПогрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЗаказПоставщику, "бг_ПунктПогрузки");		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
