#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура создана из типовой процедуры ЗаполнитьУсловияЗакупокПоУмолчанию
// Добавлен параметр ЗаполнитьПараметрыНДС
//
Процедура бг_ЗаполнитьУсловияЗакупокПоУмолчанию(ПересчитатьЦены = Истина, ЗаполнитьПараметрыНДС = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		КлючиУсловийЗакупок			= "УчитыватьГруппыСкладов, ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение";
		ОтборУсловийЗакупок			= Новый Структура(КлючиУсловийЗакупок, Истина, Истина, Соглашение);
		УсловияЗакупокПоУмолчанию	= ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, ОтборУсловийЗакупок);
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
//#Удаление			
			//Если Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
			//	И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
//#КонецУдаления
//#Вставка
			СоглашениеИзменено = Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение);
			Если СоглашениеИзменено ИЛИ ЗаполнитьПараметрыНДС Тогда				
//#КонецВставки
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
				
				ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЭтотОбъект);
				УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения);
				
				ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
				УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗакупкаПодДеятельность, ПараметрыЗаполнения);
				
				Если ПересчитатьЦены
					И ЗначениеЗаполнено(Соглашение) Тогда
					
					СтруктураПересчетаСуммы				= ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
					ПересчитатьСуммуСУчетомРучнойСкидки	= Новый Структура("Очищать", Ложь);
					
					ПараметрыЗаполнения = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
					ПараметрыЗаполнения.Вставить("ПоляЗаполнения",		"Цена, СтавкаНДС, ВидЦеныПоставщика");
					ПараметрыЗаполнения.Вставить("Дата",				Дата);
					ПараметрыЗаполнения.Вставить("Валюта",				Валюта);
					ПараметрыЗаполнения.Вставить("Соглашение",			Соглашение);
					ПараметрыЗаполнения.Вставить("НалогообложениеНДС", НалогообложениеНДС);
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьСумму",						"КоличествоУпаковок");
					СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",					СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуНДС",					СтруктураПересчетаСуммы);
					СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки",			"КоличествоУпаковок");
					СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",	ПересчитатьСуммуСУчетомРучнойСкидки);
					
					ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(Товары,
												Неопределено, // Массив строк
												ПараметрыЗаполнения,
												СтруктураДействий);
					
				КонецЕсли;
				
			Иначе
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			КонецЕсли;
			
			СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
			СтруктураПараметров.Организация				= Организация;
			СтруктураПараметров.БанковскийСчет			= БанковскийСчетОрганизации;
			СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
			
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
											СтруктураПараметров);
			
		Иначе
			
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
			
			ХозяйственнаяОперацияДоговора = ?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
													Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
												Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика,
												ХозяйственнаяОперация);
			ХозяйственнаяОперацияДоговора = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(ХозяйственнаяОперацияДоговора);
			
			ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
			ДопПараметры.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			
			Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, ДопПараметры);
			
			ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор,
																	БанковскийСчетОрганизации,
																	БанковскийСчетКонтрагента);
			
			ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЭтотОбъект);
			УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения);
			
			ПараметрыЗаполнения = Документы.ПриобретениеТоваровУслуг.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
			УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗакупкаПодДеятельность, ПараметрыЗаполнения);
			
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Исправление ошибки типовой: выбрасывать проверку договора надо, когда НЕ заполнено соглашение. 
&ИзменениеИКонтроль("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

#Удаление	
	Если (Не ЗначениеЗаполнено(Соглашение)
			Или Не ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов"))
#КонецУдаления
#Вставка
	Если (ЗначениеЗаполнено(Соглашение)
			И Не ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов"))
#КонецВставки	
		И Не ЗакупкиСервер.ЭтоХозяйственнаяОперацияРаздельнойЗакупки(ХозяйственнаяОперация)
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
		
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
		
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ПриобретениеТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	
	СписокЗаказов = Новый массив();
	
	ИспользоватьАгентскуюЗакупку = ПолучитьФункциональнуюОпцию("ИспользоватьОказаниеАгентскихУслугПриЗакупке");
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		СтрокаТовары = Товары[ТекИндекс]; // СтрокаТабличнойЧасти
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Товары""';
								|en = 'in line %НомерСтроки% of the ""Goods"" list'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", СтрокаТовары.НомерСтроки);
		
		Если ПоступлениеПоЗаказам И
			Не ЗначениеЗаполнено(ЗаказПоставщику) И
			Не ЗначениеЗаполнено(СтрокаТовары.ЗаказПоставщику) Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Заказ поставщику""';
								|en = '""Purchase order"" is required'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТовары.НомерСтроки, "ЗаказПоставщику"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ЗаказПоставщику) 
			И СписокЗаказов.Найти(СтрокаТовары.ЗаказПоставщику) = Неопределено Тогда
				СписокЗаказов.Добавить(СтрокаТовары.ЗаказПоставщику);
		КонецЕсли;
		
		Если ИспользоватьАгентскуюЗакупку
			И ЗначениеЗаполнено(СтрокаТовары.Назначение) Тогда
			ТипНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Назначение, "ТипНазначения");
				Если ТипНазначения = Перечисления.ТипыНазначений.ПоставкаПодПринципала Тогда
					ПроверитьПараметрыЗаписиДляЗакупкиПодПринципала(СтрокаТовары.НомерСтроки, АдресОшибки,
						СтрокаТовары.Назначение, Отказ);
				КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам")
		И СписокЗаказов.Количество() > 1
		И ЗакупкиВызовСервера.ПроверитьСовместимостьЗаказовВОдномДокументе(СписокЗаказов,"ПриобретениеТоваровУслуг") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(ВариантПриемкиТоваров);
	
	ИспользуетсяНеотфактурованнаяПоставка = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	ИспользуетсяНеотфактурованнаяПоставка = ИспользуетсяНеотфактурованнаяПоставка
											И ?(ЗначениеЗаполнено(Договор),
												ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВариантОформленияЗакупок") = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставки,
												Ложь);
	
	Если НакладнаяЯвляетсяРаспоряжением
		И ИспользуетсяНеотфактурованнаяПоставка Тогда
		
		ОперацииНеотфактурованнойПоставки = Новый Массив;
		ОперацииНеотфактурованнойПоставки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки);
		ОперацииНеотфактурованнойПоставки.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки);
		
		Если ОперацииНеотфактурованнойПоставки.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Использование варианта приемки ""по накладным"" не поддерживается для операций неотфактурованной поставки.
								|Рекомендуется использовать вариант приемки по договорам или по заказам.';
								|en = 'Cannot use ""By invoices"" receiving option for uninvoiced delivery operations.
								| It is recommended that you use ""By contracts"" or ""By orders"" receiving option instead.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, , , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Подразделение");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.КоличествоПоРНПТ");
	
	ТипыНоменклатуры = Новый Массив;
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ТипыНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ТекстОшибки = НСтр("ru = 'Не указан получатель товаров/работ/услуг в строке %1 списка Товары';
						|en = 'Recipient of goods, works, services is not specified in line %1 of the Goods list'");
	ЗапасыСервер.ПроверитьЗаполнениеПодразделенияВТабличнойЧасти(ЭтотОбъект, Товары, ТипыНоменклатуры, ТекстОшибки, Отказ);
	
	Если Не ВернутьМногооборотнуюТару Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВозвратаМногооборотнойТары");
	КонецЕсли;
	
	ХозОперацииЗакупкаВСтранахЕАЭС = ЗакупкиВызовСервера.ХозяйственныеОперацииПоОсновной(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС"));
	
	ХозОперацииЗакупкаПоИмпорту = ЗакупкиВызовСервера.ХозяйственныеОперацииПоОсновной(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			
			Если Не ЗначениеЗаполнено(Партнер) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Поле ""Поставщик"" не заполнено. При закупке через подотчетное лицо указание поставщика обязательно для режима налогообложения ""%1"".';
						|en = '""Vendor"" is required. When purchasing through an advance holder, specify the vendor for the ""%1"" tax regime.'"),
					НалогообложениеНДС);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					"Объект.Партнер",,
					Отказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Контрагент) И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Поле ""Контрагент"" не заполнено. При закупке через подотчетное лицо указание контрагента обязательно для режима налогообложения ""%1"".';
						|en = '""Counterparty"" is required. When purchasing through an advance holder, specify the counterparty for the ""%1"" tax regime.'"),
					НалогообложениеНДС);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					"Объект.Контрагент",,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ПроверитьДокументыЗакупкиАвансовогоОтчета(ЭтотОбъект, Отказ);
		
	ИначеЕсли ХозОперацииЗакупкаПоИмпорту.Найти(ХозяйственнаяОперация) <> Неопределено
		Или ХозОперацииЗакупкаВСтранахЕАЭС.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НалогообложениеНДС");
		
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,
												НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПриобретениеТоваровУслуг),
												Отказ,
												МассивНепроверяемыхРеквизитов);
	
	ЭтоПрослеживаемыйДокумент		= УчетПрослеживаемыхТоваровЛокализация.ЭтоПрослеживаемыйДокумент(Товары, Дата);
	ХозяйственныеОперацииИмпорта	= ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	
	Если (ЭтоПрослеживаемыйДокумент
			Или ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД"))
		И ХозяйственныеОперацииИмпорта.Найти(ХозяйственнаяОперация) = Неопределено Тогда
		
		ПараметрыПроверки = ЗапасыСервер.ПараметрыПроверкиЗаполненияНомеровГТД();
		ПараметрыПроверки.ХозяйственнаяОперация = ХозяйственнаяОперация;
		
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ, ПараметрыПроверки);
		
	КонецЕсли;
	
	Если ЭтоПрослеживаемыйДокумент Тогда
		УчетПрослеживаемыхТоваровЛокализация.ПроверитьКорректностьНастроекТоваровРНПТ(ЭтотОбъект, Товары, Дата);
	КонецЕсли;
	
	Если Не ЗакупкиСервер.ЭтоХозяйственнаяОперацияРаздельнойЗакупки(ХозяйственнаяОперация) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ВидЦеныПоставщика");
	КонецЕсли;
	
	ДоставкаТоваров.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПоступлениеПоЗаказам);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ПроверитьИзменениеХозяйственнойОперации(Отказ);
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
	ОбщегоНазначенияУТ.ПроверитьПравильностьУказанияХозяйственнойОперации(ЭтотОбъект, Отказ);
	
	Если ЗначениеЗаполнено("ДатаВозвратаМногооборотнойТары") И ВернутьМногооборотнуюТару И ДатаВозвратаМногооборотнойТары < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru = 'Дата возврата многооборотной тары не должна быть меньше даты документа.';
							|en = 'Reusable packagings return date can not be later than the document date.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ДатаВозвратаМногооборотнойТары",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		ПараметрыВыбораСтатейИАналитик = Документы.ПриобретениеТоваровУслуг.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
		ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	КонецЕсли;
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаПоНалогообложениюНДСЗакупки();
	ПараметрыПроверки.ИмяТабличнойЧасти = "Товары";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов = "АналитикаРасходов";
	УчетНДСУП.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(ЭтотОбъект, НалогообложениеНДС, ПараметрыПроверки, Отказ);
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыПроверки.ИмяТабличнойЧасти = "Товары";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов = "АналитикаРасходов";
	УчетНДСУП.ПроверитьЗаполнениеДокументаПоВидуДеятельностиНДС(ЭтотОбъект, ЗакупкаПодДеятельность, ПараметрыПроверки, Отказ);
	
	ПриобретениеТоваровУслугЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&Перед("ПередЗаписью")
Процедура бг_ПередЗаписьюПеред(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Отказ Или ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	бг_ПередЗаписьюМагистраль(Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписьюПосле(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.Организация, "бг_АвтозаполнениеБанковскихГарантий") = Истина Тогда
			бг_УчетБанковскихГарантий.ЗаполнитьБанковскиеГарантии(ЭтотОбъект);
		КонецЕсли;
		бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ);
		бг_РасчетСкидок.ПроверитьМинимальныеЦеныАлкогольнойПродукции(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если Отказ Или Пользователи.ЭтоПолноправныйПользователь() Или РольДоступна("бг_КонтролерЕГАИС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоНовый() И бг_ЗаблокированДляРедактированияСтатусомЕГАИС() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("По документу есть ТТН входящая в статусе Подтвержден");
	КонецЕсли;
	
	бг_УпаковкиЕдиницыИзмерения.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	
	Для каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.Серия = Неопределено;
	КонецЦикла;
	
	бг_АкцизПоПриобретеннымЦенностям.Очистить();
	
	бг_УстановитьАвтоматическиФормироватьЗаявкиНаРасходованиеДС();
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бг_ЗарегистрироватьОтложенноеФормированиеРеализации(Ссылка);
	Документы.битМаршрутныйЛист.ДобавитьДокументыДляОтложеннойОбработки(Ссылка);
	
КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ДокументОснование") 
		И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		бг_ДозаполнитьПоЗаказуПоставщику(ДанныеЗаполнения.ДокументОснование);
	КонецЕсли;
	
	бг_УстановитьАвтоматическиФормироватьЗаявкиНаРасходованиеДС();
	Справочники.СертификатыНоменклатуры.бг_ЗаполнитьСертификатНоменклатурыПоУмолчанию(Товары);
	
КонецПроцедуры

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	
	Если Отказ Или ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	бг_АктуализироватьСерии();
	бг_СерииНоменклатуры.ЗаполнитьСертификатыНоменклатуры(Товары); 
	бг_АктуализироватьРасширенныйСтатусТТНВходящей();
	
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполненияПосле(Отказ, ПроверяемыеРеквизиты)

	ТаблицаНоменклатуры = Товары.Выгрузить(, "Номенклатура");
	ТаблицаНоменклатуры.Свернуть("Номенклатура");
	СписокНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	
	Если бг_Номенклатура.ЕстьАлкогольнаяПродукция(СписокНоменклатуры) И Не ЗначениеЗаполнено(бг_ПунктПогрузки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'В документе присутствует алкогольная продукция. Необходимо заполнить поле ""Пункт погрузки"".'"),
			ЭтотОбъект,
			"бг_ПунктПогрузки",
			,
			Отказ);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция бг_ЗаблокированДляРедактированияСтатусомЕГАИС()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ КАК Документ
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ТТНВходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус В (&СтатусыПодтвержденные)
	|	И ТТНВходящаяЕГАИС.ДокументОснование = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("СтатусыПодтвержденные", Документы.ТТНВходящаяЕГАИС.бг_СтатусыПодтвержденные());
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПриобретениеТоваровУслугЛокализация.бг_ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	БанковскиеГарантииРаспределение = БанковскиеГарантии.Выгрузить();
	
	бг_АкцизПоПриобретеннымЦенностям.Очистить();
	
	Если БанковскиеГарантии.Количество() = 0 Тогда
		
		Запрос = ЗапросЗаполнениеАкцизовПоПриобретеннымЦенностям();
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрокаАкциз = бг_АкцизПоПриобретеннымЦенностям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАкциз, Выборка);
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТовар Из Товары Цикл
			Распределить = СтрокаТовар.Количество;
			Для Каждого БанковскаяГарантия Из БанковскиеГарантииРаспределение Цикл
				Если Распределить = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если БанковскаяГарантия.Количество = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ГарантированноеКоличество = Мин(Распределить, БанковскаяГарантия.Количество);
				БанковскаяГарантия.Количество = БанковскаяГарантия.Количество - ГарантированноеКоличество;
				Распределить = Распределить - ГарантированноеКоличество;
				
				НоваяСтрокаАкциз = бг_АкцизПоПриобретеннымЦенностям.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАкциз, СтрокаТовар);
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАкциз, БанковскаяГарантия);
				
				НоваяСтрокаАкциз.СерияНоменклатуры = СтрокаТовар.Серия;
				НоваяСтрокаАкциз.Количество = ГарантированноеКоличество;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ЗапросЗаполнениеАкцизовПоПриобретеннымЦенностям()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия КАК СерияНоменклатуры,
	|	СУММА(Количество) КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ 
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидАлкогольнойПродукции.ВидЛицензии В(&ВидыЛицензииСпирт)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Серия";

	ВидыЛицензииСпирт = Новый Массив;
	ВидыЛицензииСпирт.Добавить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	ВидыЛицензииСпирт.Добавить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	Запрос.УстановитьПараметр("ВидыЛицензииСпирт", ВидыЛицензииСпирт);
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "Номенклатура, Серия, Количество"));

	Возврат Запрос;
КонецФункции

Процедура бг_ПередЗаписьюМагистраль(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 И бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС Тогда
		
		ДатаОтсчета = Дата;
		Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
			ДатаОтсчета = ТекущаяДатаСеанса();
		КонецЕсли;
		
		ДатаПлатежа = бг_Магистраль.ДатаПлатежа(ДатаОтсчета, Договор, Соглашение);
		
		Если ЗначениеЗаполнено(ДатаПлатежа) Тогда
			СтрокаЭтапы = ЭтапыГрафикаОплаты.Добавить();
			СтрокаЭтапы.ВариантОплаты =
				ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг");
			СтрокаЭтапы.ДатаПлатежа = ДатаПлатежа;
			СтрокаЭтапы.ПроцентПлатежа = 100;
			СтрокаЭтапы.СуммаПлатежа = СуммаДокумента;
			СтрокаЭтапы.ПроцентЗалогаЗаТару = 100;
			СтрокаЭтапы.СуммаЗалогаЗаТару = СуммаВзаиморасчетовПоТаре;
			СтрокаЭтапы.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
			СтрокаЭтапы.СуммаВзаиморасчетовПоТаре = СуммаВзаиморасчетовПоТаре;
			СтрокаЭтапы.ОбъектРасчетов = Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_УстановитьАвтоматическиФормироватьЗаявкиНаРасходованиеДС()
	
	бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС = 
		бг_Магистраль.АвтоматическиФормироватьЗаявкиНаРасходованиеДС(Договор);
	
КонецПроцедуры

Процедура бг_АктуализироватьРасширенныйСтатусТТНВходящей()
	
	ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Ссылка);
	
	Если ДанныеТТНВходящей <> Неопределено Тогда
		Документы.ТТНВходящаяЕГАИС.бг_ОбновитьРасширенныйСтатусЕГАИС(ДанныеТТНВходящей.Документ);
	КонецЕсли;
	
КонецПроцедуры

#Область АктуализацияСерий

// ОбщиеМеханизмы.АктуализацияСерийДокумента
Процедура бг_АктуализироватьСерии()
	
	КлючевыеПоля = "Серия, Номенклатура, НомерГТД, бг_ДатаПроизводства, бг_УпаковкаПаллета";
	
	СерииДокумента = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Товары,,
		КлючевыеПоля);
		
	СерииДокумента.Свернуть(КлючевыеПоля);
	
	СерииДокумента.Колонки.Добавить(
		"ОрганизацияВладелец",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	СерииДокумента.ЗаполнитьЗначения(Организация, "ОрганизацияВладелец");
	
	СерииКАктуализации = бг_СерииКАктуализации(СерииДокумента);
	
	КонтекстАктуализацииСерий = бг_КонтекстАктуализацииСерий();
	
	Для каждого ДанныеСерииКАктуализации Из СерииКАктуализации Цикл
		бг_АктуализироватьСерию(ДанныеСерииКАктуализации, КонтекстАктуализацииСерий);
	КонецЦикла;
	
КонецПроцедуры

Функция бг_СерииКАктуализации(СерииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	СерииДокумента.НомерГТД КАК НомерГТД,
	|	СерииДокумента.бг_ДатаПроизводства КАК ДатаПроизводства,
	|	СерииДокумента.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	СерииДокумента.ОрганизацияВладелец КАК ОрганизацияВладелец
	|ПОМЕСТИТЬ СерииДокумента
	|ИЗ
	|	&СерииДокумента КАК СерииДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ВидНоменклатуры.ИспользоватьДатуПроизводстваСерии КАК ИспользоватьДатуПроизводстваСерии,
	|	СправочникНоменклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии КАК ИспользоватьСрокГодностиСерии,
	|	СправочникНоменклатура.ВестиУчетПоГТД КАК ВестиУчетПоГТД,
	|	СправочникНоменклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS КАК ВариантСинхронизацииWMS,
	|	СправочникНоменклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СерииДокумента.НомерГТД КАК НомерГТД,
	|	СерииДокумента.ДатаПроизводства КАК ДатаПроизводства,
	|	СерииДокумента.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СерииДокумента.ОрганизацияВладелец КАК ОрганизацияВладелец
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииДокумента КАК СерииДокумента
	|		ПО (СерииДокумента.Серия = СправочникСерииНоменклатуры.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СерииДокумента.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СправочникНоменклатура.АлкогольнаяПродукция
	|				ТОГДА СерииДокумента.Номенклатура <> СправочникСерииНоменклатуры.бг_Номенклатура
	|						ИЛИ СправочникСерииНоменклатуры.бг_ДокументВыпуска <> &ДокументВыпуска
	|			ИНАЧЕ СерииДокумента.Номенклатура <> СправочникСерииНоменклатуры.бг_Номенклатура
	|					ИЛИ СправочникСерииНоменклатуры.бг_ДокументВыпуска <> &ДокументВыпуска
	|					ИЛИ СправочникНоменклатура.ВидНоменклатуры.бг_ВидКлассификатораНСИ <> ЗНАЧЕНИЕ(Перечисление.бг_ВидКлассификатораНСИ.КодЕК_СУМ)
	|					ИЛИ СправочникНоменклатура.ВидНоменклатуры.ИспользоватьДатуПроизводстваСерии
	|						И СерииДокумента.ДатаПроизводства <> СправочникСерииНоменклатуры.ДатаПроизводства
	|					ИЛИ СправочникНоменклатура.ВестиУчетПоГТД
	|						И СерииДокумента.НомерГТД <> СправочникСерииНоменклатуры.бг_НомерГТД
	|					ИЛИ СправочникНоменклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры)
	|						И СерииДокумента.УпаковкаПаллета <> СправочникСерииНоменклатуры.бг_УпаковкаПаллета
	|					ИЛИ СправочникСерииНоменклатуры.бг_ОрганизацияВладелец <> СерииДокумента.ОрганизацияВладелец
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("СерииДокумента", СерииДокумента);
	Запрос.УстановитьПараметр("ДокументВыпуска", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция бг_КонтекстАктуализацииСерий()
	
	КонтекстАктуализацииСерий = Новый Структура;
	
	КонтекстАктуализацииСерий.Вставить(
		"ВидНоменклатурыФСМ",
		бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка"));
		
	Возврат КонтекстАктуализацииСерий;
	
КонецФункции

Процедура бг_АктуализироватьСерию(ДанныеСерииКАктуализации, КонтекстАктуализацииСерий)
	
	СерияОбъект = ДанныеСерииКАктуализации.Серия.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(ДанныеСерииКАктуализации.Номенклатура) Тогда
		СерияОбъект.бг_Номенклатура = ДанныеСерииКАктуализации.Номенклатура;
	КонецЕсли;
	
	СерияОбъект.бг_ДокументВыпуска = Ссылка;
	
	Если Не ДанныеСерииКАктуализации.АлкогольнаяПродукция Тогда
		
		Если ЗначениеЗаполнено(Организация) Тогда
			СерияОбъект.бг_ОрганизацияВладелец = Организация;
		КонецЕсли;
		
		Если ДанныеСерииКАктуализации.ВестиУчетПоГТД Тогда
			СерияОбъект.бг_НомерГТД = ДанныеСерииКАктуализации.НомерГТД;
		КонецЕсли;
		
		Если ДанныеСерииКАктуализации.ВариантСинхронизацииWMS
			= Перечисления.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры Тогда
			
			СерияОбъект.бг_УпаковкаПаллета = ДанныеСерииКАктуализации.УпаковкаПаллета;
		КонецЕсли;
		
		Если ДанныеСерииКАктуализации.ИспользоватьДатуПроизводстваСерии Тогда
			СерияОбъект.ДатаПроизводства = ДанныеСерииКАктуализации.ДатаПроизводства;
		КонецЕсли;
		
		Если ДанныеСерииКАктуализации.ИспользоватьСрокГодностиСерии
			И ДанныеСерииКАктуализации.ИспользоватьДатуПроизводстваСерии
			И СерияОбъект.Владелец <> КонтекстАктуализацииСерий.ВидНоменклатурыФСМ Тогда
			
			СерияОбъект.ГоденДо = бг_Номенклатура.ГоденДо(
				ДанныеСерииКАктуализации.Номенклатура,
				ДанныеСерииКАктуализации.ДатаПроизводства);
		КонецЕсли;
	КонецЕсли;
	
	СерияОбъект.Записать();
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.АктуализацияСерийДокумента

#КонецОбласти // Конец АктуализацияСерий

Процедура бг_ДозаполнитьПоЗаказуПоставщику(ЗаказПоставщику)
	
	ДанныеЗаказаПоставщику = бг_ДанныеЗаказаПоставщику(ЗаказПоставщику);
	Если ДанныеЗаказаПоставщику = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Шапка
	бг_ПриобретениеТОиР = ДанныеЗаказаПоставщику.Шапка.ЗагруженИзТОиР;
	бг_ПунктПогрузки = ДанныеЗаказаПоставщику.Шапка.ПунктПогрузки;
	
	// Товары
	Для каждого ДанныеТовараЗаказа Из ДанныеЗаказаПоставщику.Товары Цикл
	
		СтрокаТовараПТУ = Товары.Найти(ДанныеТовараЗаказа.КодСтроки, "КодСтроки");
		
		Если СтрокаТовараПТУ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТовараПТУ.бг_УпаковкаПаллета = ДанныеТовараЗаказа.УпаковкаПаллета;
		
		Если СтрокаТовараПТУ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТовараПТУ.Количество = ДанныеТовараЗаказа.Количество Тогда
			Коэффициент = 1;
		Иначе
			Коэффициент = СтрокаТовараПТУ.Количество / ДанныеТовараЗаказа.Количество;
		КонецЕсли;
		
		СтрокаТовараПТУ.бг_КоличествоКоробок = ДанныеТовараЗаказа.КоличествоКоробок * Коэффициент;
		СтрокаТовараПТУ.бг_КоличествоПаллет = ДанныеТовараЗаказа.КоличествоПаллет * Коэффициент;
		
	КонецЦикла;
	
	бг_УпаковкиЕдиницыИзмерения.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	
КонецПроцедуры

Функция бг_ДанныеЗаказаПоставщику(ЗаказПоставщику)
	
	Если Не ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.бг_ЗагруженИзТОиР КАК ЗагруженИзТОиР,
	|	ЗаказПоставщику.бг_ПунктПогрузки КАК ПунктПогрузки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.КодСтроки КАК КодСтроки,
	|	ЗаказПоставщикуТовары.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ЗаказПоставщикуТовары.Количество КАК Количество,
	|	ЗаказПоставщикуТовары.бг_КоличествоКоробок КАК КоличествоКоробок,
	|	ЗаказПоставщикуТовары.бг_КоличествоПаллет КАК КоличествоПаллет
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|	И НЕ ЗаказПоставщикуТовары.Отменено";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказПоставщику);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗаказаПоставщику = Новый Структура;
	
	ДанныеЗаказаПоставщику.Вставить("Шапка", РезультатыЗапроса[0].Выгрузить()[0]);
	ДанныеЗаказаПоставщику.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	Возврат ДанныеЗаказаПоставщику;
	
КонецФункции

Процедура бг_ЗарегистрироватьОтложенноеФормированиеРеализации(Документ) Экспорт
	
	РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
		Документ,
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СоздатьИзменитьПодчиненнуюРеализацию);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
