#Область ПрограммныйИнтерфейс

// Возвращает признак: является ли ТТН исходящая экспортной.
//
// Параметры:
//  ТТНИсходящаяЕГАИС - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ ТТНИсходящаяЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак экспорта.
//
Функция бг_ЭтоТТНИсходящаяПоЭкспорту(ТТНИсходящаяЕГАИС) Экспорт
	
	ТипыОрганизацийЕГАИСЭкспорт	= Новый Массив;
	ТипыОрганизацийЕГАИСЭкспорт.Добавить(Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза);
	ТипыОрганизацийЕГАИСЭкспорт.Добавить(Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Грузополучатель КАК Грузополучатель
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка = &ТТНИсходящаяЕГАИС
	|	И ТТНИсходящаяЕГАИС.Грузополучатель.ТипОрганизации В(&ТипыОрганизацийЕГАИСЭкспорт)";
	
	Запрос.УстановитьПараметр("ТипыОрганизацийЕГАИСЭкспорт", ТипыОрганизацийЕГАИСЭкспорт);
	Запрос.УстановитьПараметр("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Возвращает признак наличия маркируемой алкогольной продукции в ТТН исходящей (необходимы движения по маркам).
//
// Параметры:
//  ТТНИсходящаяЕГАИС - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ ТТНИсходящаяЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак наличия маркируемой алкогольной продукции.
//
Функция бг_ЕстьМаркируемаяАлкогольнаяПродукция(ТТНИсходящаяЕГАИС) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция.ВидПродукции.Маркируемый
	|	И ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка
	|	И ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция.ВидПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)";
	
	Запрос.УстановитьПараметр("Ссылка", ТТНИсходящаяЕГАИС);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает данные по отгруженным штрихкодам и упаковкам по ТТН исходящей.
//
// Параметры:
//  ТТНИсходящаяЕГАИС - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ ТТНИсходящаяЕГАИС.
//  РеализацияТоваровУслуг - ДокументСсылка.РеализацияТоваровУслуг - Ссылка на документ РеализацияТоваровУслуг.
//  ТолькоЗаполненныеМарки - Булево - Флаг, означающий, что результат по маркам не должен содержать строк,
//    в которых содержатся строки алкогольной продукции по ТТН без найденного соответствия марок.
//
// Возвращаемое значение:
//   Структура - Описание:
//    * Марки - ТаблицаЗначений.
//    * Упаковки - ТаблицаЗначений.
//
Функция бг_ДанныеОтгружаемыхШтрихкодов(ТТНИсходящаяЕГАИС, РеализацияТоваровУслуг, ТолькоЗаполненныеМарки = Истина) Экспорт

	// Предполагается, что РеализацияТоваровУслуг, являющаяся основанием ТТН исходящей,
	// создана на основании одного заказа клиента.
	ДанныеДокументовОтраженияФактаWMS = бг_ДанныеДокументовОтраженияФактаWMS(РеализацияТоваровУслуг);
	РегистраторыДвиженияМарок = ДанныеДокументовОтраженияФактаWMS.ВыгрузитьКолонку("ОтражениеФактаПоРасходномуОрдеру");
	Если РегистраторыДвиженияМарок.Количество() < 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = бг_ТекстЗапросаДанныеОтгружаемыхШтрихкодов();
	
	Запрос.УстановитьПараметр("РегистраторыДвиженияМарок", РегистраторыДвиженияМарок); 
	Запрос.УстановитьПараметр("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);
	
	// Если Истина, то это случай, когда все марки отгружены на складе одним документом, а ТТН разбиты по одной строке
	// в каждой ТТН, и при получении марок для ТТН нужно сделать фильтр из общего числа марок только по конкретной серии.
	Запрос.УстановитьПараметр("ИспользоватьОтборМарокПоСериямТТН", бг_ИспользоватьОтборМарокПоСериямТТН(ТТНИсходящаяЕГАИС));
	
	// Установить границу получения состава упаковок - на момент времени последнего регистратора,
	// изменяющего движения марок в этой отгрузке (если оформлена "Переупаковка", то ее граница меньше).
	МоментВремениРегистратораДвижений = РегистраторыДвиженияМарок[РегистраторыДвиженияМарок.ВГраница()].МоментВремени();	
	Запрос.УстановитьПараметр(
		"Граница",
		Новый Граница(
			МоментВремениРегистратораДвижений,
			ВидГраницы.Включая));
	Запрос.УстановитьПараметр(
		"Период",
		МоментВремениРегистратораДвижений.Дата);
			
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВерхнийИндексПакета = ПакетРезультатовЗапроса.ВГраница();
	
	ДанныеОтгружаемыхШтрихкодов = Новый Структура;
	ДанныеОтгружаемыхШтрихкодов.Вставить("Марки", ПакетРезультатовЗапроса[ВерхнийИндексПакета - 1].Выгрузить());
	ДанныеОтгружаемыхШтрихкодов.Вставить("Упаковки", ПакетРезультатовЗапроса[ВерхнийИндексПакета].Выгрузить());
	
	Если ТолькоЗаполненныеМарки Тогда
		ПараметрыПоискаНеНайденныхМарок = Новый Структура("НетСоответствияТовараТТНДляМарки", Истина);
		СтрокиСНенайденнымиМарками = ДанныеОтгружаемыхШтрихкодов.Марки.НайтиСтроки(ПараметрыПоискаНеНайденныхМарок);
		Для каждого СтрокаСНенайденнойМаркой Из СтрокиСНенайденнымиМарками Цикл
			ДанныеОтгружаемыхШтрихкодов.Марки.Удалить(СтрокаСНенайденнойМаркой);	
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеОтгружаемыхШтрихкодов;

КонецФункции

// Возвращает признак соответствия марок товарам ТТН исходящей ЕГАИС.
//
// Параметры:
//  ТТНИсходящаяЕГАИС - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ ТТНИсходящаяЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак соответствия марок товарам ТТН исходящей ЕГАИС.
//
Функция бг_МаркиСоответствуютАлкогольнойПродукцииТТН(Марки, ТТНИсходящаяЕГАИС, Отказ = Ложь) Экспорт

	МаркиСоответствуютАлкогольнойПродукцииТТН = Истина;
	
	ВыведенныеОшибкиПоАП = Новый Массив;
	
	Для каждого ДанныеМарки Из Марки Цикл
		
		Если ДанныеМарки.НесоответствиеКоличества
			И ВыведенныеОшибкиПоАП.Найти(ДанныеМарки.АлкогольнаяПродукция) = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Отгружаемая алкогольная продукция %1 по ТТН исходящей не соответствует данным штрихкодов'"),
					?(ЗначениеЗаполнено(ДанныеМарки.АлкогольнаяПродукция),
						ДанныеМарки.АлкогольнаяПродукция,
						НСтр("ru='<нет сопоставления с движениями марок>'"))),
				ТТНИсходящаяЕГАИС,
				, // Поле
				, // ПутьКДанным
				Отказ);
					
			МаркиСоответствуютАлкогольнойПродукцииТТН = Ложь;
			
			// Не дублировать выведенные ошибки по одной алкогольной продукции.
			ВыведенныеОшибкиПоАП.Добавить(ДанныеМарки.АлкогольнаяПродукция);
		КонецЕсли;
				
		Если ДанныеМарки.НеЗаполненыПоляТоваровДокумента
			И ВыведенныеОшибкиПоАП.Найти(ДанныеМарки.АлкогольнаяПродукция) = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДанныеМарки.АлкогольнаяПродукция) Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru='Несоответствие ключевых полей товаров ТТН и данных штрихкодов по:
					| Номенклатура: %1, серия %2:, алкогольная продукция: %3, справка2: %4'"),
					ДанныеМарки.Номенклатура,
					ДанныеМарки.Серия,
					ДанныеМарки.АлкогольнаяПродукция,
					ДанныеМарки.Справка2);
					
			Иначе
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru='Несоответствие ключевых полей товаров ТТН и данных штрихкодов по:
					| Номенклатура: %1, серия %2:'"),
					ДанныеМарки.Номенклатура,
					ДанныеМарки.Серия);
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ТТНИсходящаяЕГАИС,
				, // Поле
				, // ПутьКДанным
				Отказ);
					
			МаркиСоответствуютАлкогольнойПродукцииТТН = Ложь;		
			
			// Не дублировать выведенные ошибки по одной алкогольной продукции.
			ВыведенныеОшибкиПоАП.Добавить(ДанныеМарки.АлкогольнаяПродукция);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаркиСоответствуютАлкогольнойПродукцииТТН;
			
КонецФункции

// Возвращает признак необходимости использования механизма движений марок вместо типового механизма ШУТов. 
//
// Параметры:
//  ТТНИсходящаяЕГАИС - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ ТТНИсходящаяЕГАИС.
//
// Возвращаемое значение:
//   Булево - признак использования.
//
Функция бг_ИспользоватьМеханизмДвиженийМарок(ТТНИсходящаяЕГАИС, ДокументОснование = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ТТНИсходящаяЕГАИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДокументОснование = Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНИсходящаяЕГАИС, "ДокументОснование");
	КонецЕсли;
	
	ОснованияИспользующиеМеханизм  = Новый Массив;
	ОснованияИспользующиеМеханизм.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	ОснованияИспользующиеМеханизм.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	
	Возврат ЗначениеЗаполнено(ДокументОснование)
		И ОснованияИспользующиеМеханизм.Найти(ТипЗнч(ДокументОснование)) <> Неопределено
		И бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(ТТНИсходящаяЕГАИС)
		И Не бг_ИнтеграцияЕГАИСПовтИсп.ЭтоТТНИсходящаяПоЭкспорту(ТТНИсходящаяЕГАИС);	

КонецФункции

// Возвращает дату, на которую должны быть сформированы движения по ТТН исходящей.
//       
// Параметры:
//  ТТНИсходящаяЕГАИС - ДокументСсылка.ТТНИсходящаяЕГАИС - Ссылка на документ ТТНИсходящаяЕГАИС.
//  РеализацияТоваровУслуг - ДокументСсылка.РеализацияТоваровУслуг - Основание ТТН - РеализацияТоваровУслуг.
//  Дата - Дата - Дата из ТТНИсходящаяЕГАИС.
//  ДатаРегистрацииДвижений - Дата - ДатаРегистрацииДвижений из ТТНИсходящаяЕГАИС.
//       
// Возвращаемое значение:
//  Дата
//
Функция бг_ДатаДвиженияМарок(ТТНИсходящаяЕГАИС, РеализацияТоваровУслуг, Дата = Неопределено, ДатаРегистрацииДвижений = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		ДатыТТН = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНИсходящаяЕГАИС, "ДатаРегистрацииДвижений, Дата");
		Дата = ДатыТТН.Дата;
		ДатаРегистрацииДвижений = ДатыТТН.ДатаРегистрацииДвижений;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаРегистрацииДвижений) Тогда
		ДатаДвиженияМарок = КонецДня(ДатаРегистрацииДвижений);
	Иначе
		ДатаДвиженияМарок = КонецДня(Дата);
	КонецЕсли;
	
	// Може возникнуть ситуация, когда дата ТТН будет меньше даты документа отгрузки,
	// тогда финальный статус марки не будет последним в таблице регистра.
	ДанныеДокументовОтраженияФактаWMS = бг_ДанныеДокументовОтраженияФактаWMS(РеализацияТоваровУслуг);
	ПредыдущиеРегистраторыМарок = ДанныеДокументовОтраженияФактаWMS.ВыгрузитьКолонку("ОтражениеФактаПоРасходномуОрдеру");
	
	Если ПредыдущиеРегистраторыМарок.Количество() > 0 Тогда
		
		ПоследнийРегистратор = ПредыдущиеРегистраторыМарок[ПредыдущиеРегистраторыМарок.ВГраница()];
		
		МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПоследнийРегистратор,
			"Дата");
			
		Если МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок >= ДатаДвиженияМарок Тогда
			ДатаДвиженияМарок = МаксимальнаяДатаДвиженийПредыдущихСтатусовМарок + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаДвиженияМарок;
		
КонецФункции

// Возвращает документы отражения факта отгрузки WMS, которые являются регистраторами предыдущих
// в цепочке движений по РС "Движение марок" статусов марок.
//
// Параметры:
//  Документ - ДокументСсылка.ТТНИсходящаяЕГАИС.
//
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция бг_ДанныеДокументовОтраженияФактаWMS(Документ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	битОтражениеФактаПоРасходномуОрдеру.Ссылка КАК ОтражениеФактаПоРасходномуОрдеру,
	|	битОтражениеФактаПоРасходномуОрдеру.МоментВремени КАК МоментВремени,
	|	битОтражениеФактаПоРасходномуОрдеру.ИдентификаторДанныхСогласования КАК ИдентификаторДанныхСогласования
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары В
	|			(ВЫБРАТЬ
	|				РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
	|			ИЗ
	|				Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|			ГДЕ
	|				РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение В
	|					(ВЫБРАТЬ
	|						РеализацияТоваровУслуг.ЗаказКлиента КАК ЗаказКлиента
	|					ИЗ
	|						Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|					ГДЕ
	|						РеализацияТоваровУслуг.Ссылка = &Документ
	|						И РеализацияТоваровУслуг.Проведен)
	|				И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен)
	|	И битОтражениеФактаПоРасходномуОрдеру.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	битОтражениеФактаПоРасходномуОрдеру.Ссылка,
	|	битОтражениеФактаПоРасходномуОрдеру.МоментВремени,
	|	битОтражениеФактаПоРасходномуОрдеру.ИдентификаторДанныхСогласования
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|ГДЕ
	|	битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары В
	|			(ВЫБРАТЬ
	|				РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка
	|			ИЗ
	|				Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|			ГДЕ
	|				РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение В
	|					(ВЫБРАТЬ
	|						ПеремещениеТоваров.Ссылка КАК Ссылка
	|					ИЗ
	|						Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|					ГДЕ
	|						ПеремещениеТоваров.Ссылка = &Документ
	|						И ПеремещениеТоваров.Проведен)
	|				И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен)
	|	И битОтражениеФактаПоРасходномуОрдеру.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает массив статусов, при которых для марок по ТТН исходящей нужно формировать движения.
//
// Возвращаемое значение:
//   Массив - элементы с типом ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС.
//
Функция бг_СтатусыДляФормированияМарок() Экспорт

	СтатусыПодтвержденные = Новый Массив;
	
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом);
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Возврат СтатусыПодтвержденные;

КонецФункции

// Возвращает массив статусов, при которых ТТН исходящая считается подтвержденной в ЕГАИС.
//
// Параметры:
//
// Возвращаемое значение:
//   Массив - элементы с типом ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС.
//
Функция бг_СтатусыПодтвержденные() Экспорт

	СтатусыПодтвержденные = Новый Массив;
	
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	СтатусыПодтвержденные.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Возврат СтатусыПодтвержденные;

КонецФункции

// Возвращает массив статусов, при которых ТТН исходящая считается отмененной в ЕГАИС. 
//
// Параметры:
//
// Возвращаемое значение:
//   Массив - элементы с типом ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС.
//
Функция бг_СтатусыОтменыЕГАИС() Экспорт

	СтатусыОтменыЕГАИС = Новый Массив;
	СтатусыОтменыЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен);
	СтатусыОтменыЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом);
	
	Возврат СтатусыОтменыЕГАИС;
	
КонецФункции

// Возвращает признак, что статус ТТН исходящей является достаточно необходимым для формирования движений по маркам.
//
// Возвращаемое значение:
//	Булево
//
Функция бг_СтатусДостаточныйДляФормированияМарок(Статус) Экспорт
	
	Возврат бг_СтатусыДляФормированияМарок().Найти(Статус) <> Неопределено;
	
КонецФункции

// Возвращает признак, что статус ТТН исходящей является подтвержденным.
//
// Параметры:
//
// Возвращаемое значение:
//	Булево
//
Функция бг_СтатусЯвляетсяПодтвержденным(Статус) Экспорт

	Возврат бг_СтатусыПодтвержденные().Найти(Статус) <> Неопределено;

КонецФункции

Функция бг_СтатусыПодтвержденныеB2B() Экспорт

	СтатусыB2B = Новый Массив;
	СтатусыB2B.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден);
	СтатусыB2B.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями);
	
	Возврат СтатусыB2B;
	
КонецФункции

Функция бг_СтатусЯвляетсяПодтвержденнымB2B(Статус) Экспорт

	 ПодтвержденныеСтатусыB2B = бг_СтатусыПодтвержденныеB2B();
	 
	 Если ПодтвержденныеСтатусыB2B.Найти(Статус) <> Неопределено Тогда
		 Возврат Истина;
	 Иначе
		 Возврат Ложь;
	 КонецЕсли;		 
	 
КонецФункции

// Возвращает данные всех ТТН исходящих, связанных с документом.
//
// Параметры:
//  Документ - ДокументСсылка - связанный с ТТН документ.
//  ТолькоПроведенные - Булево
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция бг_ДанныеТТНИсходящихПоСвязанномуДокументу(Документ, ТолькоПроведенные = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапросаТТНПоСвязанномуДокументу = бг_ТекстЗапросаТТНПоСвязанномуДокументу(Документ);
	Если ТекстЗапросаТТНПоСвязанномуДокументу = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапросаДанныхТТН = бг_ТекстЗапросаДанныхТТН();
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаТТНПоСвязанномуДокументу);
	ЧастиЗапроса.Добавить(ТекстЗапросаДанныхТТН);
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, ";" + Символы.ПС);
	
	Запрос.УстановитьПараметр("СвязанныйДокумент", Документ);
	
	ДанныеТТНИсходящих = Запрос.Выполнить().Выгрузить();
	Если ТолькоПроведенные Тогда
		Возврат ДанныеТТНИсходящих.Скопировать(ДанныеТТНИсходящих.НайтиСтроки(Новый Структура("Проведен", Истина)));
	Иначе
		Возврат ДанныеТТНИсходящих;
	КонецЕсли;
	
КонецФункции

// Возвращает данные ТТН исходящей - частный случай, когда ТТН введена только одна.
//
// Параметры:
//  Документ - ДокументСсылка - связанный с ТТН документ.
//  ТолькоПроведенная - Булево
//
// Возвращаемое значение:
//   Структура
//
Функция бг_ДанныеТТНИсходящейПоСвязанномуДокументу(Документ, ТолькоПроведенная = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТТНИсходящихПоСвязанномуДокументу = бг_ДанныеТТНИсходящихПоСвязанномуДокументу(Документ, ТолькоПроведенная);
	
	Если ДанныеТТНИсходящихПоСвязанномуДокументу <> Неопределено
		И ДанныеТТНИсходящихПоСвязанномуДокументу.Количество() > 0 Тогда
		
		Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеТТНИсходящихПоСвязанномуДокументу)[0];
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает признак о смене статуса на один вниз по стандартной цепочке статусов ТТН исходящей ЕГАИС.
// Обычно это происходит всвязи с ошибкой в последовательности обработки статусов ЕГАИС.
//
Функция бг_ЭтоЗапретныйДаунгрейдСтатуса(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	ВсеСтатусы = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС;
	
	ЭтоДаунгрейдПриПодтверждении = ПредыдущийСтатус = ВсеСтатусы.ОбрабатываетсяКлиентом
		И НовыйСтатус = ВсеСтатусы.ОбрабатываетсяЕГАИС;
		
	ЭтоДаунгрейдПриОтмене = ПредыдущийСтатус = ВсеСтатусы.Отменен
		И НовыйСтатус = ВсеСтатусы.АктОтказаОбрабатываетсяЕГАИС;
		
	Возврат ЭтоДаунгрейдПриПодтверждении Или ЭтоДаунгрейдПриОтмене;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЕГАИС

&ИзменениеИКонтроль("СтатусПослеПолученияДанных")
Функция бг_СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
#Вставка
	Если Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН 
		И бг_ИнтеграцияЕГАИСПовтИсп.ЭтоТТНИсходящаяПоЭкспорту(ДокументСсылка) Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);		
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
			
		ПараметрыОбновления.Прочее.КвитанцияПолученЕГАИС = Истина;
		ПараметрыОбновления.Прочее.КвитанцияПроведенЕГАИС = Истина;
			
		Возврат ПараметрыОбновления;
	КонецЕсли;
#КонецВставки	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Истина;
	
	СтатусыАктТТНОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыАктТТНОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыАктТТНОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС;
	СтатусыАктТТНОтказ.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыАктТТНОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка;
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусыАктТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыАктТТНОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыКвитанцияАктаРасхожденийПодтверждение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПодтвержденСРасхождениями;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка;
	СтатусыКвитанцияАктаРасхожденийПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
	СтатусыКвитанцияАктаРасхожденийПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыКвитанцияАктаРасхожденийПодтверждение.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыКвитанцияАктаРасхожденийОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыКвитанцияАктаРасхожденийОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыКвитанцияАктаРасхожденийОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС;
	СтатусыКвитанцияАктаРасхожденийОтказ.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен;
	СтатусыКвитанцияАктаРасхожденийОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка;
	СтатусыКвитанцияАктаРасхожденийОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
	СтатусыКвитанцияАктаРасхожденийОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыКвитанцияАктаРасхожденийОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОтменаПроведения = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка;
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОтменаПроведенияДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолученияПодтверждения);
#Вставка
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.ОтменаПроведенияДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
#КонецВставки
	СтатусыЗапросНаОтменуПроведенияТТНПодтверждение.УведомлениеОРегистрацииДвижения = Ложь;
	
	СтатусыЗапросНаОтменуПроведенияТТНОтказ = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Принят           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Обрабатывается   = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.Ошибка           = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка;
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведенияТТНОтказ.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Подтвержден;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОтмененКлиентом;
		
		Если ДополнительныеПараметры.Свойство("ТекущееСостояние")
			И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
			ТекущееСостояние = ДополнительныеПараметры.ТекущееСостояние;
		Иначе
			ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
		КонецЕсли;
		
		Если ТекущееСостояние.Статус <> Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен Тогда
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
				ДокументСсылка,
				Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
				Статусы);
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПринят;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"УведомлениеОРегистрацииДвижения", Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			СтатусыБазовыйПроцесс, ВыполнитьРасчетТекущегоСостояния);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
			
			Если ДополнительныеПараметры.Свойство("ТекущееСостояние")
				И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
				ТекущееСостояние = ДополнительныеПараметры.ТекущееСостояние;
			Иначе
				ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
			КонецЕсли;
			
			Если ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыАктТТНОтказ;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС Тогда
				Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			Иначе
				Статусы = СтатусыБазовыйПроцесс;
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ Тогда
			
			Статусы = СтатусыАктТТНОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
			
			// Приходит квитанция по операции ТТН (см. выше)
			Статусы = СтатусыКвитанцияАктаРасхожденийПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
			
			Статусы = СтатусыКвитанцияАктаРасхожденийОтказ;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНПодтверждение;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведенияТТНОтказ;
			
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

&Вместо("ПоследовательностьОпераций")
Функция бг_ПоследовательностьОпераций(ДокументСсылка)
	
	СтатусТТН = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка);
	
	Если бг_ИнтеграцияЕГАИСПовтИсп.ЭтоТТНИсходящаяПоЭкспорту(ДокументСсылка)
		И Не СтатусТТН.Статус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Отменен Тогда
		
		Таблица = ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
		
		Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
		Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
		
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Исходящий, Перечисления.ВидыДокументовЕГАИС.ТТН, ДокументСсылка);
		ИнтеграцияЕГАИС.ДобавитьОперациюВПоследовательность(Таблица,  0,   Входящий,  Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН);
		
		Возврат Таблица;
		
	Иначе
		Возврат ПродолжитьВызов(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

&Вместо("ПриИзмененииСтатусаДокумента")
Процедура бг_ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	Если бг_ЭтоЗапретныйДаунгрейдСтатуса(ПредыдущийСтатус, НовыйСтатус) Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьВызов(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	бг_ПриИзмененииСтатусаДокументаДвижениеМарок(ДокументСсылка, НовыйСтатус);

	бг_ОтразитьДополнительныеСведенияЗаказаКлиента(ДокументСсылка);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияЕГАИС

&ИзменениеИКонтроль("ТТНИсходящаяЕГАИСXML")
Функция бг_ТТНИсходящаяЕГАИСXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ТТН;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                        КАК Номер,
		|	Шапка.Дата                         КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
		|	Шапка.Идентификатор                КАК Идентификатор,
		|	Шапка.ДокументОснование            КАК ДокументОснование,
		|	
		|	Шапка.ВидОперации                КАК ВидОперации,
		|	Шапка.Упакована                  КАК Упакована,
		|	Шапка.НомерТТН                   КАК НомерТТН,
		|	Шапка.ДатаТТН                    КАК ДатаТТН,
		|	Шапка.ДатаОтгрузки               КАК ДатаОтгрузки,
		|	Шапка.ТипДоставки                КАК ТипДоставки,
		|	Шапка.Перевозчик                 КАК Перевозчик,
		|	Шапка.ТипТранспорта              КАК ТипТранспорта,
		|	Шапка.ТоварВПутиПринадлежитГрузополучателю КАК ТоварВПутиПринадлежитГрузополучателю,
		|	Шапка.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
		|	Шапка.Прицеп                     КАК Прицеп,
		|	Шапка.Заказчик                   КАК Заказчик,
		|	Шапка.Водитель                   КАК Водитель,
		|	Шапка.ПунктПогрузки              КАК ПунктПогрузки,
		|	Шапка.ПунктРазгрузки             КАК ПунктРазгрузки,
		|	Шапка.Перенаправление            КАК Перенаправление,
		|	Шапка.Экспедитор                 КАК Экспедитор,
		|	
		|	Грузоотправители.Ссылка                                         КАК ГрузоотправительСсылка,
		|	Грузоотправители.Код                                            КАК ГрузоотправительКод,
		|	ВЫРАЗИТЬ(Грузоотправители.Наименование КАК Строка(64))          КАК ГрузоотправительНаименование,
		|	ВЫРАЗИТЬ(Грузоотправители.НаименованиеПолное КАК Строка(255))   КАК ГрузоотправительНаименованиеПолное,
		|	Грузоотправители.ИНН                                            КАК ГрузоотправительИНН,
		|	Грузоотправители.КПП                                            КАК ГрузоотправительКПП,
		|	Грузоотправители.КодСтраны                                      КАК ГрузоотправительКодСтраны,
		|	Грузоотправители.КодРегиона                                     КАК ГрузоотправительКодРегиона,
		|	Грузоотправители.ПочтовыйИндекс                                 КАК ГрузоотправительПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Грузоотправители.ПредставлениеАдреса КАК Строка(1000)) КАК ГрузоотправительПредставлениеАдреса,
		|	Грузоотправители.ТипОрганизации                                 КАК ГрузоотправительТипОрганизации,
		|	Грузоотправители.ИдентификаторОрганизацииТС                     КАК ГрузоотправительИдентификаторОрганизацииТС,
		|	
		|	Грузополучатели.Ссылка                                          КАК ГрузополучательСсылка,
		|	Грузополучатели.Код                                             КАК ГрузополучательКод,
		|	ВЫРАЗИТЬ(Грузополучатели.Наименование КАК Строка(64))           КАК ГрузополучательНаименование,
		|	ВЫРАЗИТЬ(Грузополучатели.НаименованиеПолное КАК Строка(255))    КАК ГрузополучательНаименованиеПолное,
		|	Грузополучатели.ИНН                                             КАК ГрузополучательИНН,
		|	Грузополучатели.КПП                                             КАК ГрузополучательКПП,
		|	Грузополучатели.КодСтраны                                       КАК ГрузополучательКодСтраны,
		|	Грузополучатели.КодРегиона                                      КАК ГрузополучательКодРегиона,
		|	Грузополучатели.ПочтовыйИндекс                                  КАК ГрузополучательПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Грузополучатели.ПредставлениеАдреса КАК Строка(1000))  КАК ГрузополучательПредставлениеАдреса,
		|	Грузополучатели.ТипОрганизации                                  КАК ГрузополучательТипОрганизации,
		|	Грузополучатели.ИдентификаторОрганизацииТС                      КАК ГрузополучательИдентификаторОрганизацииТС,
		|	
		|	Поставщики.Ссылка                                               КАК ПоставщикСсылка,
		|	Поставщики.Код                                                  КАК ПоставщикКод,
		|	ВЫРАЗИТЬ(Поставщики.Наименование КАК Строка(64))                КАК ПоставщикНаименование,
		|	ВЫРАЗИТЬ(Поставщики.НаименованиеПолное КАК Строка(255))         КАК ПоставщикНаименованиеПолное,
		|	Поставщики.ИНН                                                  КАК ПоставщикИНН,
		|	Поставщики.КПП                                                  КАК ПоставщикКПП,
		|	Поставщики.КодСтраны                                            КАК ПоставщикКодСтраны,
		|	Поставщики.КодРегиона                                           КАК ПоставщикКодРегиона,
		|	Поставщики.ПочтовыйИндекс                                       КАК ПоставщикПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Поставщики.ПредставлениеАдреса КАК Строка(1000))       КАК ПоставщикПредставлениеАдреса,
		|	Поставщики.ТипОрганизации                                       КАК ПоставщикТипОрганизации,
		|	Поставщики.ИдентификаторОрганизацииТС                           КАК ПоставщикИдентификаторОрганизацииТС,
		|	
		|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(200)) КАК Комментарий,
		|	ВЫРАЗИТЬ(Шапка.Основание КАК Строка(200))   КАК Основание,
		|	
		|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
		|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
		|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
		|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
		|	Шапка.Ответственный                 КАК Ответственный
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Грузополучатели
		|		ПО Грузополучатели.Ссылка = Шапка.Грузополучатель
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Поставщики
		|		ПО Поставщики.Ссылка = Шапка.Поставщик
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Грузоотправители
		|		ПО Грузоотправители.Ссылка = Шапка.Грузоотправитель
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	Товары.Номенклатура         КАК Номенклатура,
		|	Товары.Характеристика       КАК Характеристика,
		|	Товары.Серия                КАК Серия,
		|	Товары.Справка2             КАК Справка2
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка");
	
	ТекстыЗапроса.Добавить(
		ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"ВТТовары",
			"ВТКоэффициентыПересчетаВЕдиницыЕГАИС"));
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Справка2 КАК Ссылка
		|ПОМЕСТИТЬ Справки2
		|ИЗ
		|	ВТТовары КАК Товары
		|ИНДЕКСИРОВАТЬ ПО
		|	Товары.Справка2
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Диапазоны.Ссылка         КАК Справка2,
		|	Диапазоны.ТипМарки       КАК ТипМарки,
		|	Диапазоны.СерияМарки     КАК СерияМарки,
		|	Диапазоны.НачальныйНомер КАК НачальныйНомер,
		|	Диапазоны.КонечныйНомер  КАК КонечныйНомер
		|ИЗ
		|	Справочник.Справки2ЕГАИС.ДиапазоныНомеровАкцизныхМарок КАК Диапазоны
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справки2 КАК Справки2
		|		ПО Справки2.Ссылка = Диапазоны.Ссылка
		|ИТОГИ ПО
		|	Справка2,
		|	ТипМарки
		|",
		"Справки2");
	
	ТекстЗапросаАлкогольнаяПродукция = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция
		|ПОМЕСТИТЬ АлкогольнаяПродукция
		|ИЗ
		|	ВТТовары КАК Товары
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	
		|	Продукция.Код                                   КАК ПродукцияКод,
		|	ВЫРАЗИТЬ(Продукция.Наименование КАК Строка(64)) КАК ПродукцияНаименование,
		|	Продукция.Объем                                 КАК ПродукцияОбъем,
		|	Продукция.Крепость                              КАК ПродукцияКрепость,
		|	Продукция.НаименованиеПолное                    КАК ПродукцияНаименованиеПолное,
		|	ЕСТЬNULL(ВидыПродукции.Код, """")               КАК ПродукцияКодВидаПродукции,
		|	Продукция.ТипПродукции                          КАК ПродукцияТипПродукции,
		|	ЕСТЬNULL(ВидыПродукции.ВидЛицензии, ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.ПустаяСсылка)) КАК ПродукцияВидЛицензии,
		|	
		|	Производители.Ссылка                                         КАК ПроизводительСсылка,
		|	Производители.Код                                            КАК ПроизводительКод,
		|	ВЫРАЗИТЬ(Производители.Наименование КАК Строка(64))          КАК ПроизводительНаименование,
		|	ВЫРАЗИТЬ(Производители.НаименованиеПолное КАК Строка(255))   КАК ПроизводительНаименованиеПолное,
		|	Производители.ИНН                                            КАК ПроизводительИНН,
		|	Производители.КПП                                            КАК ПроизводительКПП,
		|	Производители.КодСтраны                                      КАК ПроизводительКодСтраны,
		|	Производители.КодРегиона                                     КАК ПроизводительКодРегиона,
		|	Производители.ПочтовыйИндекс                                 КАК ПроизводительПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Производители.ПредставлениеАдреса КАК Строка(1000)) КАК ПроизводительПредставлениеАдреса,
		|	Производители.ТипОрганизации                                 КАК ПроизводительТипОрганизации,
		|	Производители.ИдентификаторОрганизацииТС                     КАК ПроизводительИдентификаторОрганизацииТС,
		|	
		|	Импортеры.Ссылка                                         КАК ИмпортерСсылка,
		|	Импортеры.Код                                            КАК ИмпортерКод,
		|	ВЫРАЗИТЬ(Импортеры.Наименование КАК Строка(64))          КАК ИмпортерНаименование,
		|	ВЫРАЗИТЬ(Импортеры.НаименованиеПолное КАК Строка(255))   КАК ИмпортерНаименованиеПолное,
		|	Импортеры.ИНН                                            КАК ИмпортерИНН,
		|	Импортеры.КПП                                            КАК ИмпортерКПП,
		|	Импортеры.КодСтраны                                      КАК ИмпортерКодСтраны,
		|	Импортеры.КодРегиона                                     КАК ИмпортерКодРегиона,
		|	Импортеры.ПочтовыйИндекс                                 КАК ИмпортерПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Импортеры.ПредставлениеАдреса КАК Строка(1000)) КАК ИмпортерПредставлениеАдреса,
		|	Импортеры.ТипОрганизации                                 КАК ИмпортерТипОрганизации,
		|	Импортеры.ИдентификаторОрганизацииТС                     КАК ИмпортерИдентификаторОрганизацииТС
		|ИЗ
		|	АлкогольнаяПродукция КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Продукция
		|		ПО Продукция.Ссылка = Товары.АлкогольнаяПродукция
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыПродукции
		|		ПО Продукция.ВидПродукции = ВидыПродукции.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Производители
		|		ПО Производители.Ссылка = Продукция.Производитель
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Импортеры
		|		ПО Импортеры.Ссылка = Продукция.Импортер
		|";
	
	ТекстыЗапроса.Добавить(
		ТекстЗапросаАлкогольнаяПродукция,
		"АлкогольнаяПродукция");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.НомерСтроки                      КАК НомерСтроки,
		|	Товары.АлкогольнаяПродукция             КАК АлкогольнаяПродукция,
		|	Товары.ИдентификаторУпаковки            КАК ИдентификаторУпаковки,
		|	Товары.Количество
		|	* ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) <> 0
		|			ТОГДА Товары.Цена / ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
		|		ИНАЧЕ Товары.Цена
		|	КОНЕЦ КАК Цена,
		|	Товары.НомерПартии                      КАК НомерПартии,
		|	Товары.Справка2                         КАК Справка2,
		|	Товары.Справка2.НомерСправки1           КАК НомерСправки1,
		|	Товары.Справка2.РегистрационныйНомер    КАК НомерСправки2,
		|	
		|	ЕСТЬNULL(ЕдиницыЕГАИС.ПроверятьОбъемДАЛ, ЛОЖЬ) КАК ПроверятьОбъемДАЛ,
		|	ЕСТЬNULL(ЕдиницыЕГАИС.ОбъемДАЛ, 0)             КАК ОбъемДАЛ
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
		|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция
		|		 И ЕдиницыЕГАИС.Номенклатура = Товары.Номенклатура
		|		 И ЕдиницыЕГАИС.Характеристика = Товары.Характеристика
		|		 И ЕдиницыЕГАИС.Серия = Товары.Серия
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|",
		"Товары");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = ДокументСсылка;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Ложь;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляОрганизацияЕГАИС         = "Грузоотправитель";
#Удаление
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
#КонецУдаления
#Вставка
	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ДокументСсылка) Тогда
		ТекстыЗапроса.Добавить(
			ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(
				ПараметрыФормированияТекстаЗапроса),
				"ВложенныеШтрихкоды");
	КонецЕсли;
#КонецВставки
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	//@skip-warning
	Шапка                = РезультатыЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ВыборкаПоСправкам2   = РезультатыЗапроса["Справки2"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//@skip-warning
	АлкогольнаяПродукция = РезультатыЗапроса["АлкогольнаяПродукция"].Выгрузить();
	//@skip-warning
	Товары               = РезультатыЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.';
																			|en = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
							|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область ПодготовкаДанных
	
	ТоварыИтоги = Новый ТаблицаЗначений;
	ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
	ТоварыИтоги.Колонки.Добавить("ИдентификаторУпаковки");
	ТоварыИтоги.Колонки.Добавить("НомерПартии");
	ТоварыИтоги.Колонки.Добавить("НомерСправки1");
	ТоварыИтоги.Колонки.Добавить("НомерСправки2");
	ТоварыИтоги.Колонки.Добавить("Справка2");
	ТоварыИтоги.Колонки.Добавить("Количество");
	ТоварыИтоги.Колонки.Добавить("Цена");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		Если СтрокаТЧ.ПроверятьОбъемДАЛ
			И Не ЗначениеЗаполнено(СтрокаТЧ.ОбъемДАЛ) Тогда
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.';
																						|en = 'Для номенклатуры в строке %1 не установлен объем в декалитрах.'"), СтрокаТЧ.НомерСтроки));
		КонецЕсли;
		
		НоваяСтрока = ТоварыИтоги.Добавить();
		НоваяСтрока.АлкогольнаяПродукция  = СтрокаТЧ.АлкогольнаяПродукция;
		НоваяСтрока.ИдентификаторУпаковки = СтрокаТЧ.ИдентификаторУпаковки;
		НоваяСтрока.НомерПартии           = СтрокаТЧ.НомерПартии;
		НоваяСтрока.НомерСправки1         = СтрокаТЧ.НомерСправки1;
		НоваяСтрока.НомерСправки2         = СтрокаТЧ.НомерСправки2;
		НоваяСтрока.Справка2              = СтрокаТЧ.Справка2;
		НоваяСтрока.Количество            = СтрокаТЧ.Количество;
		НоваяСтрока.Цена                  = СтрокаТЧ.Цена;
		
	КонецЦикла;
	
	ТоварыИтоги.Свернуть(
		"АлкогольнаяПродукция,
		|ИдентификаторУпаковки,
		|НомерПартии,
		|НомерСправки1,
		|НомерСправки2,
		|Справка2,
		|Цена",
		"Количество");
	
	#КонецОбласти
	
	#Область ТТН
	
	ТипыТТН = Новый Соответствие;
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.РасходнаяНакладная, "WBInvoiceFromMe");
	ТипыТТН.Вставить(Перечисления.ВидыОперацийТТНИсходящейЕГАИС.ВозвратПоставщику, "WBReturnFromMe");
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		#Область ФорматОбмена_V1
		
		ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации],               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "UnitType",     ?(Шапка.Упакована, "Packed", "Unpacked"), СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       СокрЛП(Шапка.НомерТТН),                   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,                            СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,                       СообщениеXML);
		
		ДокументXDTO.Header.Transport = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ДокументXDTO.Header.Transport, Шапка, СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v1(ДокументXDTO.Header, "Supplier",  Шапка, "Поставщик",        СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Position.Product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v1(
				Position.Product,
				АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
				"Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			
			Position.InformA = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformA");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformA, "RegId", СтрокаТЧ.НомерСправки1, СообщениеXML);
			
			Position.InformB = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformB");
			Position.InformB.InformBItem = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB, "InformBItem");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformB.InformBItem, "BRegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Справка2", СтрокаТЧ.Справка2);
			ВыборкаПоСправкам2.Сбросить();
			Если ВыборкаПоСправкам2.НайтиСледующий(СтруктураПоиска) Тогда
				
				ВыборкаПоТипам = ВыборкаПоСправкам2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТипам.Следующий() Цикл
					
					Position.InformB.InformBItem.MarkInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem, "MarkInfo");
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformB.InformBItem.MarkInfo, "Type", ВыборкаПоТипам.ТипМарки, СообщениеXML);
					Position.InformB.InformBItem.MarkInfo.Ranges = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem.MarkInfo, "Ranges");
					
					ВыборкаПоДиапазонам = ВыборкаПоТипам.Выбрать();
					Пока ВыборкаПоДиапазонам.Следующий() Цикл
						
						Range = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformB.InformBItem.MarkInfo.Ranges, "Range");
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Rank",  ВыборкаПоДиапазонам.СерияМарки,             СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Start", СокрЛП(ВыборкаПоДиапазонам.НачальныйНомер), СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Last",  СокрЛП(ВыборкаПоДиапазонам.КонечныйНомер),  СообщениеXML);
						Position.InformB.InformBItem.MarkInfo.Ranges.Range.Добавить(Range);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		
		#Область ФорматОбмена_V2
		
		ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType_v2");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации], СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       СокрЛП(Шапка.НомерТТН),     СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,              СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,         СообщениеXML);
		
		ДокументXDTO.Header.Transport = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ДокументXDTO.Header.Transport, Шапка, СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Position.Product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(
				Position.Product,
				АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
				"Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			
			Position.InformF1 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF1");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF1, "RegId", СтрокаТЧ.НомерСправки1, СообщениеXML);
			
			Position.InformF2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF2");
			Position.InformF2.InformF2Item = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2, "InformF2Item");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2.InformF2Item, "F2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Справка2", СтрокаТЧ.Справка2);
			ВыборкаПоСправкам2.Сбросить();
			Если ВыборкаПоСправкам2.НайтиСледующий(СтруктураПоиска) Тогда
				
				ВыборкаПоТипам = ВыборкаПоСправкам2.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоТипам.Следующий() Цикл
					
					Position.InformF2.InformF2Item.MarkInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item, "MarkInfo");
					ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2.InformF2Item.MarkInfo, "Type", ВыборкаПоТипам.ТипМарки, СообщениеXML);
					Position.InformF2.InformF2Item.MarkInfo.Ranges = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item.MarkInfo, "Ranges");
					
					ВыборкаПоДиапазонам = ВыборкаПоТипам.Выбрать();
					Пока ВыборкаПоДиапазонам.Следующий() Цикл
						
						Range = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.InformF2Item.MarkInfo.Ranges, "Range");
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Rank",  ВыборкаПоДиапазонам.СерияМарки,             СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Start", СокрЛП(ВыборкаПоДиапазонам.НачальныйНомер), СообщениеXML);
						ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Range, "Last",  СокрЛП(ВыборкаПоДиапазонам.КонечныйНомер),  СообщениеXML);
						Position.InformF2.InformF2Item.MarkInfo.Ranges.Range.Добавить(Range);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3
		Или ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
		
		#Область ПодготовкаДанных
		
		АкцизныеМарки = Новый ТаблицаЗначений;
		АкцизныеМарки.Колонки.Добавить("Справка2");
		АкцизныеМарки.Колонки.Добавить("ШтрихкодУпаковки");
		АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки");
		АкцизныеМарки.Колонки.Добавить("Родитель");
		
		//@skip-warning
#Удаление
		Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
		ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
			Выборка, МенеджерВременныхТаблиц);
#КонецУдаления
#Вставка
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
		
		Если бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ДокументСсылка, ДокументОснование) Тогда
			// Выполняется подмена данных для формирования XML сообщения:
			//  типовой алгоритм опирался на справочник ШтрихкодыУпаковокТоваров;
			//  свой алгоритм опирается на регистры бг_ДвижениеМарок и бг_СоставУпаковок.
			ВложенныеШтрихкодыУпаковок = бг_ИнтеграцияЕГАИС.ДанныеШтрихкодовДляГенерацииЕГАИСXML(
				ДокументСсылка,
				СообщениеXML,
				ДокументОснование);
		Иначе
			// Типовой алгоритм:
			Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
			ВложенныеШтрихкодыУпаковок = ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
				Выборка,
				МенеджерВременныхТаблиц);
		КонецЕсли;
#КонецВставки
		
		Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Статус) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'Для акцизной марки %1 не определена справка 2.';
									|en = 'Для акцизной марки %1 не определена справка 2.'"), СтрокаТЧ.Штрихкод));
				Продолжить;
			ИначеЕсли СтрокаТЧ.Статус <> Перечисления.СтатусыАкцизныхМарок.ВНаличии Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Акцизная марка %1 со статусом %2 не может быть отгружена.';
												|en = 'Акцизная марка %1 со статусом %2 не может быть отгружена.'"),
					СтрокаТЧ.Штрихкод, 
					?(ЗначениеЗаполнено(СтрокаТЧ.Статус), СтрокаТЧ.Статус, НСтр("ru = '<статус отсутствует>';
																				|en = '<статус отсутствует>'")));
				ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML, ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = АкцизныеМарки.Добавить();
			НоваяСтрока.Справка2 = СтрокаТЧ.Справка2;
			Если СтрокаТЧ.СтрокаДерева.Родитель = Неопределено Тогда
				НоваяСтрока.ШтрихкодУпаковки = "";
			Иначе
				НоваяСтрока.ШтрихкодУпаковки = СтрокаТЧ.СтрокаДерева.Родитель.Штрихкод;
			КонецЕсли;
			НоваяСтрока.КодАкцизнойМарки = СтрокаТЧ.Штрихкод;
			НоваяСтрока.Родитель         = СтрокаТЧ.СтрокаДерева.Родитель;
			
		КонецЦикла;
		
		АкцизныеМарки.Сортировать("Справка2, ШтрихкодУпаковки");
		
		#КонецОбласти
		
		#Область ФорматОбмена_V3_V4
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
			ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType_v3");
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
			ДокументXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillType_v4");
		КонецЕсли;
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
		
		ДокументXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Type",         ТипыТТН[Шапка.ВидОперации], СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "NUMBER",       СокрЛП(Шапка.НомерТТН),     СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Date",         Шапка.ДатаТТН,              СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "ShippingDate", Шапка.ДатаОтгрузки,         СообщениеXML);
		
		ТранспортныйРаздел = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.Header, "Transport");
		ТранспортныйРазделЗаполнен = Ложь;
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
			ТранспортныйРазделЗаполнен = ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН(ТранспортныйРаздел, Шапка, СообщениеXML);
		ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
			ТранспортныйРазделЗаполнен = ИнтеграцияЕГАИС.ЗаполнитьВXDTOТранспортныйРазделТТН_v4(ТранспортныйРаздел, Шапка, СообщениеXML);
		КонецЕсли;
		Если ТранспортныйРазделЗаполнен Тогда
			ДокументXDTO.Header.Transport = ТранспортныйРаздел;
		КонецЕсли;
		
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Shipper",   Шапка, "Грузоотправитель", СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(ДокументXDTO.Header, "Consignee", Шапка, "Грузополучатель",  СообщениеXML);
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Base", Шапка.Основание,   СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.Header, "Note", Шапка.Комментарий, СообщениеXML);
		
		ДокументXDTO.Content = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "Content");
		
		Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
			
			НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
			
			Position = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
			
			Position.Product = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "Product");
			
			ИнтеграцияЕГАИС.ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(
				Position.Product,
				АлкогольнаяПродукция.Найти(СтрокаТЧ.АлкогольнаяПродукция, "АлкогольнаяПродукция"),
				"Продукция", СообщениеXML);
			
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Pack_ID",  СтрокаТЧ.ИдентификаторУпаковки, СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity", СтрокаТЧ.Количество,            СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Price"   , СтрокаТЧ.Цена,                  СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",    СтрокаТЧ.НомерПартии,           СообщениеXML);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity", НомерСтроки,                    СообщениеXML, 5);
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position, "FARegId",  СтрокаТЧ.НомерСправки1,         СообщениеXML);
			
			Position.InformF2 = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "InformF2");
			ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(Position.InformF2, "F2RegId", СтрокаТЧ.НомерСправки2, СообщениеXML);
			
			#Область АкцизныеМарки
			
			ИспользованныеУзлыДереваУпаковок = Новый Соответствие;
			
			НайденныеАкцизныеМарки  = АкцизныеМарки.НайтиСтроки(Новый Структура("Справка2", СтрокаТЧ.Справка2));
			ТекущийШтрихкодУпаковки = Неопределено;
			boxpos                  = Неопределено;
			
			Если НайденныеАкцизныеМарки.Количество() > 0 Тогда
				
				Если НайденныеАкцизныеМарки.Количество() > СтрокаТЧ.Количество Тогда
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'По алкогольной продукции %1 (номер справки 2: %2) количество акцизных марок (%3) превышает количество в ТТН (%4).';
								|en = 'По алкогольной продукции %1 (номер справки 2: %2) количество акцизных марок (%3) превышает количество в ТТН (%4).'"),
							СтрокаТЧ.АлкогольнаяПродукция,
							СтрокаТЧ.НомерСправки2,
							НайденныеАкцизныеМарки.Количество(),
							СтрокаТЧ.Количество));
				КонецЕсли;
				
				Position.InformF2.MarkInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2, "MarkInfo");
				
				ТребуетсяОписаниеИерархииУпаковок = Ложь;
				Для Каждого НайденнаяАкцизнаяМарка Из НайденныеАкцизныеМарки Цикл
					
					Если ТекущийШтрихкодУпаковки = Неопределено
						Или ТекущийШтрихкодУпаковки <> НайденнаяАкцизнаяМарка.ШтрихкодУпаковки Тогда
						
						ТекущийШтрихкодУпаковки = НайденнаяАкцизнаяМарка.ШтрихкодУпаковки;
						
						Если boxpos <> Неопределено Тогда
							Position.InformF2.MarkInfo.boxpos.Добавить(boxpos);
						КонецЕсли;
						
						boxpos = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position.InformF2.MarkInfo, "boxpos");
						boxpos.amclist = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(boxpos, "amclist");
						
						Если Не ПустаяСтрока(НайденнаяАкцизнаяМарка.ШтрихкодУпаковки) Тогда
							
							ТекущийРодитель = НайденнаяАкцизнаяМарка.Родитель;
							Если ИспользованныеУзлыДереваУпаковок.Получить(ТекущийРодитель) = Неопределено Тогда
								ИспользованныеУзлыДереваУпаковок.Вставить(ТекущийРодитель, Ложь);
							КонецЕсли;
							
							Пока ТекущийРодитель <> Неопределено Цикл
								
								Если ТекущийРодитель.Родитель <> Неопределено Тогда
									ИспользованныеУзлыДереваУпаковок.Вставить(ТекущийРодитель.Родитель, Истина);
									ТребуетсяОписаниеИерархииУпаковок = Истина;
								КонецЕсли;
								ТекущийРодитель = ТекущийРодитель.Родитель;
								
							КонецЦикла;
							
							ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(boxpos, "boxnumber", НайденнаяАкцизнаяМарка.ШтрихкодУпаковки, СообщениеXML);
							
						КонецЕсли;
						
					КонецЕсли;
					
					boxpos.amclist.amc.Добавить(НайденнаяАкцизнаяМарка.КодАкцизнойМарки);
					
				КонецЦикла;
				
				Если boxpos <> Неопределено Тогда
					Position.InformF2.MarkInfo.boxpos.Добавить(boxpos);
				КонецЕсли;
				
				Если ТребуетсяОписаниеИерархииУпаковок Тогда
					
					boxInfo = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Position, "boxInfo");
					
					ТребуетсяОписаниеИерархииУпаковок = Ложь;
					Для Каждого СтрокаДерева Из ВложенныеШтрихкодыУпаковок.ДеревоУпаковок.Строки Цикл
						
						//Бутылки без упаковки И коробки без иерархии
						Если ИспользованныеУзлыДереваУпаковок.Получить(СтрокаДерева) <> Истина Тогда
							Продолжить;
						КонецЕсли;
						
						boxtree = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(boxInfo, "boxtree");
						boxtree.boxnum.Добавить(СтрокаДерева.Штрихкод);
						
						ПостроитьBoxInfo(СтрокаДерева, ИспользованныеУзлыДереваУпаковок, boxtree);
						
						boxInfo.boxtree.Добавить(boxtree);
						
					КонецЦикла;
					
					Position.boxInfo = boxInfo;
					
				КонецЕсли;
				
			КонецЕсли;
			
			#КонецОбласти
			
			ДокументXDTO.Content.Position.Добавить(Position);
			
		КонецЦикла;
		
		#КонецОбласти
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ДокументXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

&Вместо("АктОтказаXML")
Функция бг_АктОтказаXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Шапка.Номер                        КАК Номер,
	|	Шапка.Дата                         КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование            КАК ДокументОснование,
	|	
	|	Шапка.ИдентификаторЕГАИС   КАК ИдентификаторЕГАИС,
	|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(500)) КАК Комментарий,
	|	
	|	Шапка.Грузоотправитель              КАК ОрганизацияЕГАИС,
	|	Шапка.Грузоотправитель.Код          КАК ИдентификаторФСРАР,
	|	Шапка.Грузоотправитель.ФорматОбмена КАК ФорматОбменаГрузоотправителя,
	|	Шапка.Грузополучатель.ФорматОбмена  КАК ФорматОбменаГрузополучателя,
	|	Шапка.Ответственный                 КАК Ответственный
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК Шапка,
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
//#Вставка
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Шапка.Номер", "Шапка.НомерТТН");	
//#КонецВставки
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.';
																			|en = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ФорматОбмена(Шапка);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
							|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область АктТТНОтказ
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		#Область ФорматОбмена_V1
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		#КонецОбласти
		
	ИначеЕсли ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		
		#Область ФорматОбмена_V2
		
		АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v2");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		#КонецОбласти
		
	Иначе
		
		Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
			АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v3");
		Иначе
			АктXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "WayBillActType_v4");
		КонецЕсли;
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO, "Identity", ИнтеграцияЕГАИС.НовыйИдентификаторДокумента(ДокументСсылка, "cwb"), СообщениеXML, 3);
		
		АктXDTO.Header = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Header");
		
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "IsAccept",  "Rejected",               СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ACTNUMBER", СокрЛП(Шапка.Номер),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "ActDate",   ТекущаяДатаСеанса(),      СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "WBRegId",   Шапка.ИдентификаторЕГАИС, СообщениеXML);
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(АктXDTO.Header, "Note",      Шапка.Комментарий,        СообщениеXML);
		
		Если ФорматОбмена <> Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
			
			АктXDTO.Transport = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(АктXDTO, "Transport");
			АктXDTO.Transport.ChangeOwnership = "NotChange";
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(АктXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти // Конец СообщенияЕГАИС

#Область ДанныеШтрихкодовДвиженияМарок

Процедура бг_ПриИзмененииСтатусаДокументаДвижениеМарок(ТТНИсходящаяЕГАИС, НовыйСтатус)
	
	РеализацияТоваровУслуг = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНИсходящаяЕГАИС, "ДокументОснование");
		
	Если ТипЗнч(РеализацияТоваровУслуг) <> Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не бг_ИнтеграцияЕГАИСПовтИсп.ИспользоватьМеханизмДвиженийМарок(ТТНИсходящаяЕГАИС, РеализацияТоваровУслуг) Тогда
		Возврат;
	КонецЕсли;

	Если бг_СтатусДостаточныйДляФормированияМарок(НовыйСтатус) Тогда
		
		ЕстьРасхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНИсходящаяЕГАИС, "ЕстьРасхождения");
			
		ДанныеОтгружаемыхШтрихкодов = бг_ДанныеОтгружаемыхШтрихкодов(
			ТТНИсходящаяЕГАИС,
			РеализацияТоваровУслуг,
			Ложь);
			
		Если ДанныеОтгружаемыхШтрихкодов = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru='Ошибка обновления статуса документа %1: не найдены отгружаемые штрихкоды'"),
				ТТНИсходящаяЕГАИС);	
		КонецЕсли;
			
		МаркиСоответствуютАлкогольнойПродукцииТТН = бг_МаркиСоответствуютАлкогольнойПродукцииТТН(
			ДанныеОтгружаемыхШтрихкодов.Марки,
			ТТНИсходящаяЕГАИС);	
			
		Если Не МаркиСоответствуютАлкогольнойПродукцииТТН Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru='Ошибка обновления статуса документа %1: отгружаемые штрихкоды не соответствуют алкогольной продукции'"),
				ТТНИсходящаяЕГАИС);	
			КонецЕсли;
			
		Если ЕстьРасхождения Тогда
			НеподтвержденныеМарки = Документы.ТТНИсходящаяЕГАИС.НеподтвержденныеАкцизныеМарки(ТТНИсходящаяЕГАИС);
		КонецЕсли;
		
		// Записать движения марок.
		СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(
			Метаданные.Документы.ТТНИсходящаяЕГАИС.Имя);
		СтатусОтгружаетсяОбработаноЕГАИС = СтатусыМарокПоОперации.СтатусОтгружаетсяОбработаноЕГАИС;
		СтатусМаркиВыбыла = СтатусыМарокПоОперации.СтатусВыбыла;
		СтатусМаркиОтгрузкаНеПодтверждена = СтатусыМарокПоОперации.СтатусОтгрузкаНеПодтверждена;
		
		НаборЗаписейДвижениеМарок = РегистрыСведений.бг_ДвижениеМарок.СоздатьНаборЗаписей();
		НаборЗаписейДвижениеМарок.Отбор.Регистратор.Установить(ТТНИсходящаяЕГАИС);
		
		ДатаДвиженияМарок = бг_ДатаДвиженияМарок(ТТНИсходящаяЕГАИС, РеализацияТоваровУслуг);
		
		Для каждого СтрокаМарки Из ДанныеОтгружаемыхШтрихкодов.Марки Цикл
			
			Запись = НаборЗаписейДвижениеМарок.Добавить();
			Запись.Период = ДатаДвиженияМарок;
			ЗаполнитьЗначенияСвойств(Запись, СтрокаМарки);
			
			Если НовыйСтатус = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом Тогда
				Запись.СтатусМарки = СтатусОтгружаетсяОбработаноЕГАИС;
			Иначе
				Если ЕстьРасхождения И НеподтвержденныеМарки.Получить(СтрокаМарки.ИдентификаторМарки) <> Неопределено Тогда
					Запись.СтатусМарки = СтатусМаркиОтгрузкаНеПодтверждена;
				Иначе
					Запись.СтатусМарки = СтатусМаркиВыбыла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписейДвижениеМарок.Записать();
		
	Иначе
		
		НаборЗаписейМарки = РегистрыСведений.бг_ДвижениеМарок.СоздатьНаборЗаписей();
		НаборЗаписейМарки.Отбор.Регистратор.Установить(ТТНИсходящаяЕГАИС);
		НаборЗаписейМарки.Прочитать();
		
		Если НаборЗаписейМарки.Количество() > 0 Тогда
			НаборЗаписейМарки.Очистить();
			НаборЗаписейМарки.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ИспользоватьОтборМарокПоСериямТТН(ТТНИсходящаяЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.бг_РазделятьРеализацииПоСериямНоменклатуры КАК бг_РазделятьРеализацииПоСериямНоменклатуры
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТТНИсходящаяЕГАИС.Грузополучатель.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Ссылка = &ТТНИсходящаяЕГАИС";	
	Запрос.УстановитьПараметр("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИспользоватьОтборМарокПоСериямТТН = Ложь;
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		ВыборкаДетальныеЗаписи.Следующий();
		
		ИспользоватьОтборМарокПоСериямТТН = ВыборкаДетальныеЗаписи.бг_РазделятьРеализацииПоСериямНоменклатуры;
	КонецЕсли;
		
	Возврат ИспользоватьОтборМарокПоСериямТТН;
	
КонецФункции

Функция бг_ТекстЗапросаДанныеОтгружаемыхШтрихкодов()
	
	// Предполагается, что в ТТН исходящей ТЧ Товары всегда свернута,
	// и по одной Номенклатуре + Серии + АП + Справке2 не может быть нескольких строк с разными идентификаторами - 
	// на это указывает код заполнения ТТН исходящей по РТУ, а также запрет изменения ТЧ Товары ТТН.	
	
	ИспользоватьОптимизированныеЗапросы = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"ИспользоватьОптимизированныеЗапросыДвиженияМарок");
	
	Если ИспользоватьОптимизированныеЗапросы Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки КАК НомерСтрокиТТН,
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Справка2 КАК Справка2,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Серия КАК Серия,
		|	ТТНИсходящаяЕГАИСТовары.Ссылка.Грузоотправитель КАК Грузоотправитель,
		|	СУММА(ТТНИсходящаяЕГАИСТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыТТН
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
		|ГДЕ
		|	ТТНИсходящаяЕГАИСТовары.Ссылка = &ТТНИсходящаяЕГАИС
		|
		|СГРУППИРОВАТЬ ПО
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Справка2,
		|	ТТНИсходящаяЕГАИСТовары.Ссылка.Грузоотправитель,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Серия,
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
		|	бг_ДвижениеМарок.Серия.бг_Номенклатура КАК Номенклатура,
		|	бг_ДвижениеМарок.Серия КАК Серия,
		|	бг_ДвижениеМарок.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ ДвижениеМарок
		|ИЗ
		|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
		|ГДЕ
		|	бг_ДвижениеМарок.Активность
		|	И бг_ДвижениеМарок.Регистратор В(&РегистраторыДвиженияМарок)
		|	И бг_ДвижениеМарок.СтатусМарки = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыАкцизныхМарок.ВключенаВОтгрузку)
		|	И ВЫБОР
		|			КОГДА &ИспользоватьОтборМарокПоСериямТТН
		|				ТОГДА бг_ДвижениеМарок.Серия В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							ТоварыТТН.Серия КАК Серия
		|						ИЗ
		|							ТоварыТТН КАК ТоварыТТН)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
		|	бг_ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
		|	ДвижениеМарок.Номенклатура КАК Номенклатура,
		|	ДвижениеМарок.Серия КАК Серия,
		|	ДвижениеМарок.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ Марки
		|ИЗ
		|	ДвижениеМарок КАК ДвижениеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
		|		ПО ДвижениеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
		|ГДЕ
		|	ДвижениеМарок.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ДвижениеМарок.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Серия КАК Серия,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ МаркиИтоги
		|ИЗ
		|	Марки КАК Марки
		|
		|СГРУППИРОВАТЬ ПО
		|	Марки.Серия,
		|	Марки.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Марки.ГУИДМарки КАК ГУИДМарки,
		|	Марки.ИдентификаторМарки КАК ИдентификаторМарки,
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Серия КАК Серия,
		|	Марки.КодУпаковки КАК КодУпаковки,
		|	МаркиИтоги.Количество КАК КоличествоПоТовару
		|ПОМЕСТИТЬ МаркиСИтогами
		|ИЗ
		|	Марки КАК Марки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаркиИтоги КАК МаркиИтоги
		|		ПО Марки.Номенклатура = МаркиИтоги.Номенклатура
		|			И Марки.Серия = МаркиИтоги.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки,
		|	МАКСИМУМ(бг_СоставУпаковок.Период) КАК Период
		|ПОМЕСТИТЬ СоставУпаковокМаксПериод
		|ИЗ
		|	Марки КАК Марки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|		ПО Марки.КодУпаковки = бг_СоставУпаковок.КодУпаковки
		|ГДЕ
		|	бг_СоставУпаковок.Период <= &Период
		|
		|СГРУППИРОВАТЬ ПО
		|	бг_СоставУпаковок.КодУпаковки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыТТН.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС,
		|	ТоварыТТН.НомерСтрокиТТН КАК НомерСтрокиТТН,
		|	ЕСТЬNULL(МаркиСИтогами.Номенклатура, ТоварыТТН.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(МаркиСИтогами.Серия, ТоварыТТН.Серия) КАК Серия,
		|	МаркиСИтогами.ГУИДМарки КАК ГУИДМарки,
		|	ЕСТЬNULL(МаркиСИтогами.ИдентификаторМарки, """") КАК ИдентификаторМарки,
		|	ЕСТЬNULL(МаркиСИтогами.КодУпаковки, """") КАК КодУпаковки,
		|	ЕСТЬNULL(ТоварыТТН.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ЕСТЬNULL(ТоварыТТН.Справка2, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК Справка2,
		|	ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК КоличествоМарок,
		|	ЕСТЬNULL(ТоварыТТН.Количество, 0) КАК КоличествоТТН,
		|	ЕСТЬNULL(ТоварыТТН.Количество, 0) <> ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК НесоответствиеКоличества,
		|	ТоварыТТН.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.АлкогольнаяПродукция ЕСТЬ NULL
		|		ИЛИ ТоварыТТН.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.Справка2 ЕСТЬ NULL
		|		ИЛИ ТоварыТТН.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.Номенклатура ЕСТЬ NULL
		|		ИЛИ ТоварыТТН.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.Серия ЕСТЬ NULL КАК НеЗаполненыПоляТоваровДокумента,
		|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL
		|		ИЛИ МаркиСИтогами.ИдентификаторМарки ЕСТЬ NULL
		|		ИЛИ МаркиСИтогами.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ИЛИ МаркиСИтогами.Номенклатура ЕСТЬ NULL
		|		ИЛИ МаркиСИтогами.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИЛИ МаркиСИтогами.Серия ЕСТЬ NULL КАК НеЗаполненыПоляМарок,
		|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL КАК НетСоответствияТовараТТНДляМарки
		|ИЗ
		|	ТоварыТТН КАК ТоварыТТН
		|		ПОЛНОЕ СОЕДИНЕНИЕ МаркиСИтогами КАК МаркиСИтогами
		|		ПО ТоварыТТН.Номенклатура = МаркиСИтогами.Номенклатура
		|			И ТоварыТТН.Серия = МаркиСИтогами.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки,
		|	бг_СоставУпаковок.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
		|ИЗ
		|	СоставУпаковокМаксПериод КАК СоставУпаковокМаксПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|		ПО СоставУпаковокМаксПериод.КодУпаковки = бг_СоставУпаковок.КодУпаковки
		|			И СоставУпаковокМаксПериод.Период = бг_СоставУпаковок.Период
		|ГДЕ
		|	бг_СоставУпаковок.КодВышестоящейУпаковки <> """"";	
	Иначе 
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки КАК НомерСтрокиТТН,
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Справка2 КАК Справка2,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Серия КАК Серия,
		|	ТТНИсходящаяЕГАИСТовары.Ссылка.Грузоотправитель КАК Грузоотправитель,
		|	СУММА(ТТНИсходящаяЕГАИСТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ТоварыТТН
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
		|ГДЕ
		|	ТТНИсходящаяЕГАИСТовары.Ссылка = &ТТНИсходящаяЕГАИС
		|
		|СГРУППИРОВАТЬ ПО
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Справка2,
		|	ТТНИсходящаяЕГАИСТовары.Ссылка.Грузоотправитель,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Серия,
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
		|	бг_ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
		|	ДвижениеМарок.Номенклатура КАК Номенклатура,
		|	ДвижениеМарок.Серия КАК Серия,
		|	ДвижениеМарок.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ Марки
		|ИЗ
		|	(ВЫБРАТЬ
		|		бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
		|		бг_ДвижениеМарок.Серия.бг_Номенклатура КАК Номенклатура,
		|		бг_ДвижениеМарок.Серия КАК Серия,
		|		бг_ДвижениеМарок.КодУпаковки КАК КодУпаковки
		|	ИЗ
		|		РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
		|	ГДЕ
		|		бг_ДвижениеМарок.Активность
		|		И бг_ДвижениеМарок.Регистратор В(&РегистраторыДвиженияМарок)
		|		И бг_ДвижениеМарок.СтатусМарки = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыАкцизныхМарок.ВключенаВОтгрузку)
		|		И ВЫБОР
		|				КОГДА &ИспользоватьОтборМарокПоСериямТТН
		|					ТОГДА бг_ДвижениеМарок.Серия В
		|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|								ТоварыТТН.Серия КАК Серия
		|							ИЗ
		|								ТоварыТТН КАК ТоварыТТН)
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК ДвижениеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
		|		ПО ДвижениеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
		|ГДЕ
		|	ДвижениеМарок.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И ДвижениеМарок.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Серия КАК Серия,
		|	СУММА(1) КАК Количество
		|ПОМЕСТИТЬ МаркиИтоги
		|ИЗ
		|	Марки КАК Марки
		|
		|СГРУППИРОВАТЬ ПО
		|	Марки.Серия,
		|	Марки.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Марки.ГУИДМарки КАК ГУИДМарки,
		|	Марки.ИдентификаторМарки КАК ИдентификаторМарки,
		|	Марки.Номенклатура КАК Номенклатура,
		|	Марки.Серия КАК Серия,
		|	Марки.КодУпаковки КАК КодУпаковки,
		|	МаркиИтоги.Количество КАК КоличествоПоТовару
		|ПОМЕСТИТЬ МаркиСИтогами
		|ИЗ
		|	Марки КАК Марки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаркиИтоги КАК МаркиИтоги
		|		ПО Марки.Номенклатура = МаркиИтоги.Номенклатура
		|			И Марки.Серия = МаркиИтоги.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТоварыТТН.Грузоотправитель, ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)) КАК ОрганизацияЕГАИС,
		|	ТоварыТТН.НомерСтрокиТТН КАК НомерСтрокиТТН,
		|	ЕСТЬNULL(МаркиСИтогами.Номенклатура, ТоварыТТН.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(МаркиСИтогами.Серия, ТоварыТТН.Серия) КАК Серия,
		|	МаркиСИтогами.ГУИДМарки КАК ГУИДМарки,
		|	ЕСТЬNULL(МаркиСИтогами.ИдентификаторМарки, """") КАК ИдентификаторМарки,
		|	ЕСТЬNULL(МаркиСИтогами.КодУпаковки, """") КАК КодУпаковки,
		|	ЕСТЬNULL(ТоварыТТН.АлкогольнаяПродукция, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ЕСТЬNULL(ТоварыТТН.Справка2, ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)) КАК Справка2,
		|	ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК КоличествоМарок,
		|	ЕСТЬNULL(ТоварыТТН.Количество, 0) КАК КоличествоТТН,
		|	ЕСТЬNULL(ТоварыТТН.Количество, 0) <> ЕСТЬNULL(МаркиСИтогами.КоличествоПоТовару, 0) КАК НесоответствиеКоличества,
		|	ТоварыТТН.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.АлкогольнаяПродукция ЕСТЬ NULL
		|		ИЛИ ТоварыТТН.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.Справка2 ЕСТЬ NULL
		|		ИЛИ ТоварыТТН.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.Номенклатура ЕСТЬ NULL
		|		ИЛИ ТоварыТТН.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИЛИ ТоварыТТН.Серия ЕСТЬ NULL КАК НеЗаполненыПоляТоваровДокумента,
		|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL
		|		ИЛИ МаркиСИтогами.ИдентификаторМарки ЕСТЬ NULL
		|		ИЛИ МаркиСИтогами.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		ИЛИ МаркиСИтогами.Номенклатура ЕСТЬ NULL
		|		ИЛИ МаркиСИтогами.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|		ИЛИ МаркиСИтогами.Серия ЕСТЬ NULL КАК НеЗаполненыПоляМарок,
		|	МаркиСИтогами.ГУИДМарки ЕСТЬ NULL КАК НетСоответствияТовараТТНДляМарки
		|ИЗ
		|	ТоварыТТН КАК ТоварыТТН
		|		ПОЛНОЕ СОЕДИНЕНИЕ МаркиСИтогами КАК МаркиСИтогами
		|		ПО ТоварыТТН.Номенклатура = МаркиСИтогами.Номенклатура
		|			И ТоварыТТН.Серия = МаркиСИтогами.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_СоставУпаковокСрезПоследних.КодУпаковки КАК КодУпаковки,
		|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок.СрезПоследних(
		|			&Граница,
		|			КодУпаковки В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Марки.КодУпаковки КАК КодУпаковки
		|				ИЗ
		|					Марки КАК Марки)) КАК бг_СоставУпаковокСрезПоследних
		|ГДЕ
		|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки <> """"";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти // Конец ДанныеШтрихкодовДвиженияМарок

#Область ПолучениеДанныхТТН

Функция бг_ТекстЗапросаТТНПоСвязанномуДокументу(Документ)
	
	ТекстЗапроса = Неопределено;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру") Тогда
		
		ТекстЗапроса = бг_ТекстЗапросаТТНПоОтражениюФакта();
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ТекстЗапроса = бг_ТекстЗапросаТТНПоОснованию();
		
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		
		ТекстЗапроса = бг_ТекстЗапросаТТНПоРасходномуОрдеру();
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция бг_ТекстЗапросаТТНПоОтражениюФакта()
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНИсходящаяЕГАИС.Ссылка КАК Документ
	|ПОМЕСТИТЬ НайденныеПоСвязанномуДокументуТТНИсходящиеЕГАИС
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|				ПО РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары
	|					И (битОтражениеФактаПоРасходномуОрдеру.Ссылка = &СвязанныйДокумент)
	|			ПО РеализацияТоваровУслуг.ЗаказКлиента = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|		ПО ТТНИсходящаяЕГАИС.ДокументОснование = РеализацияТоваровУслуг.Ссылка";
	
КонецФункции

Функция бг_ТекстЗапросаТТНПоОснованию()
	
	Возврат
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка КАК Документ
	|ПОМЕСТИТЬ НайденныеПоСвязанномуДокументуТТНИсходящиеЕГАИС
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.ДокументОснование = &СвязанныйДокумент";
	
КонецФункции

Функция бг_ТекстЗапросаТТНПоРасходномуОрдеру()
	
	Возврат
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка КАК Документ
	|ПОМЕСТИТЬ НайденныеПоСвязанномуДокументуТТНИсходящиеЕГАИС
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|			ПО РеализацияТоваровУслуг.ЗаказКлиента = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|				И (РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &СвязанныйДокумент)
	|		ПО ТТНИсходящаяЕГАИС.ДокументОснование = РеализацияТоваровУслуг.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНИсходящаяЕГАИС.Ссылка";
	
КонецФункции

Функция бг_ТекстЗапросаДанныхТТН()
	
	Возврат
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка КАК Документ,
	|	ТТНИсходящаяЕГАИС.Проведен КАК Проведен,
	|	ТТНИсходящаяЕГАИС.бг_НомерФиксацииЕГАИС КАК НомерФиксацииЕГАИС,
	|	СтатусыДокументовЕГАИС.Статус КАК ТекущийСтатус
	|ИЗ
	|	НайденныеПоСвязанномуДокументуТТНИсходящиеЕГАИС КАК НайденныеПоСвязанномуДокументуТТНИсходящиеЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ПО НайденныеПоСвязанномуДокументуТТНИсходящиеЕГАИС.Документ = ТТНИсходящаяЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО НайденныеПоСвязанномуДокументуТТНИсходящиеЕГАИС.Документ = СтатусыДокументовЕГАИС.Статус
	|ГДЕ
	|	НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТТНИсходящаяЕГАИС.Проведен УБЫВ,
	|	ТТНИсходящаяЕГАИС.МоментВремени УБЫВ";
	
КонецФункции

#КонецОбласти

Функция бг_СвязанныеДанныеПоТТН(ТТНИсходящаяЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвязанныеДанныеПоТТН = бг_НовыйСвязанныеДанныеПоТТН();
	
	Если Не ЗначениеЗаполнено(ТТНИсходящаяЕГАИС) Тогда
		Возврат СвязанныеДанныеПоТТН;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИС.Ссылка КАК ТТНИсходящаяЕГАИС,
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТТНИсходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Проведен
	|		КОГДА ТТНИсходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.ПеремещениеТоваров).Проведен
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументОснованиеПроведен,
	|	ВЫБОР
	|		КОГДА ТТНИсходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ПометкаУдаления
	|		КОГДА ТТНИсходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.ПеремещениеТоваров).ПометкаУдаления
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДокументОснованиеПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ТТНИсходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента
	|		КОГДА ТТНИсходящаяЕГАИС.ДокументОснование ССЫЛКА Документ.ПеремещениеТоваров
	|			ТОГДА ТТНИсходящаяЕГАИС.ДокументОснование
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РаспоряжениеОрдера,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ПОМЕСТИТЬ ДанныеТТН
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ТТНИсходящаяЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|			И (ТТНИсходящаяЕГАИС.Ссылка = &ТТНИсходящаяЕГАИС)
	|			И (СтатусыДокументовЕГАИС.Документ = &ТТНИсходящаяЕГАИС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК РасходныйОрдерНаТовары,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен КАК Проведен,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ДанныеОрдера
	|ИЗ
	|	ДанныеТТН КАК ДанныеТТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|		ПО ДанныеТТН.РаспоряжениеОрдера = РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	битОтражениеФактаПоРасходномуОрдеру.Ссылка КАК ОтражениеФактаПоРасходномуОрдеру,
	|	битОтражениеФактаПоРасходномуОрдеру.Проведен КАК Проведен,
	|	битОтражениеФактаПоРасходномуОрдеру.ПометкаУдаления КАК ПометкаУдаления,
	|	битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ПОМЕСТИТЬ ДанныеФактовОтгрузки
	|ИЗ
	|	Документ.битОтражениеФактаПоРасходномуОрдеру КАК битОтражениеФактаПоРасходномуОрдеру
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОрдера КАК ДанныеОрдера
	|		ПО битОтражениеФактаПоРасходномуОрдеру.РасходныйОрдерНаТовары = ДанныеОрдера.РасходныйОрдерНаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТТН.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС,
	|	ДанныеТТН.ДокументОснование КАК ДокументОснование,
	|	ДанныеТТН.ДокументОснованиеПроведен КАК ДокументОснованиеПроведен,
	|	ДанныеТТН.ДокументОснованиеПометкаУдаления КАК ДокументОснованиеПометкаУдаления,
	|	ДанныеТТН.Статус КАК ТекущийСтатусЕГАИС
	|ИЗ
	|	ДанныеТТН КАК ДанныеТТН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОрдера.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары,
	|	ДанныеОрдера.Проведен КАК Проведен,
	|	ДанныеОрдера.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ДанныеОрдера КАК ДанныеОрдера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеФактовОтгрузки.ОтражениеФактаПоРасходномуОрдеру КАК ОтражениеФактаПоРасходномуОрдеру,
	|	ДанныеФактовОтгрузки.Проведен КАК Проведен,
	|	ДанныеФактовОтгрузки.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеФактовОтгрузки.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ИЗ
	|	ДанныеФактовОтгрузки КАК ДанныеФактовОтгрузки";
	
	Запрос.УстановитьПараметр("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
    ВерхнийИндекс = РезультатыЗапроса.ВГраница();
	
	РезультатПоТТН = РезультатыЗапроса[ВерхнийИндекс - 2];
	РезультатПоОрдерам = РезультатыЗапроса[ВерхнийИндекс - 1];
	РезультатПоФактамОтгрузки = РезультатыЗапроса[ВерхнийИндекс];
	
	Если РезультатПоТТН.Пустой() Тогда
		Возврат СвязанныеДанныеПоТТН;
	КонецЕсли;
	
	ВыборкаПоТТН = РезультатПоТТН.Выбрать();
	ВыборкаПоТТН.Следующий();
	ЗаполнитьЗначенияСвойств(СвязанныеДанныеПоТТН, ВыборкаПоТТН);
	
	СвязанныеДанныеПоТТН.Вставить("ДанныеРасходныхОрдеров", РезультатПоОрдерам.Выгрузить());
	СвязанныеДанныеПоТТН.Вставить("ДанныеФактовОтгрузки", РезультатПоФактамОтгрузки.Выгрузить());
	
	Возврат СвязанныеДанныеПоТТН;

КонецФункции

Функция бг_НовыйСвязанныеДанныеПоТТН()

	СвязанныеДанныеПоТТН = Новый Структура;
	
	// Данные ТТН
	СвязанныеДанныеПоТТН.Вставить("ДокументОснование", Неопределено);
	СвязанныеДанныеПоТТН.Вставить("ДокументОснованиеПроведен", Ложь);
	СвязанныеДанныеПоТТН.Вставить("ДокументОснованиеПометкаУдаления", Ложь);
	СвязанныеДанныеПоТТН.Вставить(
		"ТекущийСтатусЕГАИС", 
		Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПустаяСсылка());
		
	// Данные расходных ордеров
	ДанныеРасходныхОрдеров = Новый ТаблицаЗначений;
	
	ДанныеРасходныхОрдеров.Колонки.Добавить(
		"РасходныйОрдерНаТовары",
		Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерНаТовары"));
		
	ДанныеРасходныхОрдеров.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ДанныеРасходныхОрдеров.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	
	СвязанныеДанныеПоТТН.Вставить("ДанныеРасходныхОрдеров", ДанныеРасходныхОрдеров);
	
	// Данные фактов отгрузки
	ДанныеФактовОтгрузки = Новый ТаблицаЗначений;
	
	ДанныеФактовОтгрузки.Колонки.Добавить(
		"ОтражениеФактаПоРасходномуОрдеру",
		Новый ОписаниеТипов("ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру"));
		
	ДанныеФактовОтгрузки.Колонки.Добавить("Проведен", Новый ОписаниеТипов("Булево"));
	ДанныеФактовОтгрузки.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ДанныеФактовОтгрузки.Колонки.Добавить(
		"РасходныйОрдерНаТовары",
		Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерНаТовары"));
		
	СвязанныеДанныеПоТТН.Вставить("ДанныеФактовОтгрузки", ДанныеФактовОтгрузки);
	
	Возврат СвязанныеДанныеПоТТН;
	
КонецФункции

Процедура бг_ОтразитьДополнительныеСведенияЗаказаКлиента(Документ)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
		
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
		ЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ЗаказКлиента");
			
		Если ЗначениеЗаполнено(ЗаказКлиента) Тогда
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
				ЗаказКлиента,
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтразитьДополнительныеСведенияЗаказаКлиента,,
				Новый ХранилищеЗначения(
					РегистрыСведений.бг_ДополнительныеСведенияПоЗаказамКлиентов.ПоказателиПоТипуДокумента(Документ)));
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец СлужебныеПроцедурыИФункции

#Область Отчеты

&После("ДобавитьКомандыОтчетов")
Процедура бг_ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры)

	Отчеты.бг_ДвижениеМарок.ДобавитьКомандуДвижениеМарокПоДокументу(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

&Вместо("ПриЗаполненииОграниченияДоступа")
Процедура бг_ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ВЫБОР КОГДА Грузоотправитель.Сопоставлено И Грузоотправитель.СоответствуетОрганизации Тогда ЗначениеРазрешено(Грузоотправитель.Контрагент)
	|	КОГДА Грузоотправитель.Сопоставлено И НЕ Грузоотправитель.СоответствуетОрганизации Тогда ЗначениеРазрешено(Грузоотправитель.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА КОНЕЦ  
	|	И 
	|	ВЫБОР КОГДА Грузополучатель.Сопоставлено И НЕ Грузополучатель.СоответствуетОрганизации ТОГДА ЗначениеРазрешено(Грузополучатель.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА КОНЕЦ ";

КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСЕГАИС

&ИзменениеИКонтроль("ТекстЗапросаПанельОбменСЕГАИСОформите")
Функция бг_ТекстЗапросаПанельОбменСЕГАИСОформите() Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	 0 КАК КоличествоДокументов
	|";
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаТТНИсходящаяЕГАИСОформите(ТекстЗапроса);
    #Вставка
	СтрокаПоиска = "СтатусыОформленияДокументовЕГАИС.ТорговыйОбъект = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект";
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		СтрокаПоиска,
		"");
		
	СтрокаПоиска = "И КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)";
	СтрокаЗамены = СтрШаблон(
		"%1",
		"КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацияЕГАИС)");
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		СтрокаПоиска,
		СтрокаЗамены);
	#КонецВставки
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти
