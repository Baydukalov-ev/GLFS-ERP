#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&После("ПриЗаписи")
Процедура бг_ПриЗаписи(Отказ)
	ИспользоватьОрдернуюСхему = ?(ЗначениеЗаполнено(Склад),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач"),
			Ложь);
	Если ИспользоватьОрдернуюСхему
		И Не ЗначениеЗаполнено(бг_Основание) Тогда
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			Ссылка, Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьОрдераНаОтражениеПересортицы);
	КонецЕсли;
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Отказ Тогда
		бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ);
	КонецЕсли;
КонецПроцедуры

&Перед("ОбработкаПроведения")
Процедура бг_ОбработкаПроведенияПеред(Отказ, РежимПроведения)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	бг_ОтменитьОтражениеДокументовВУчете(Отказ);
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)

	// Для перемещений между ОП очищаем движения по регистру, 
	// чтобы не формировать документ "ОрдерНаОтражениеПересортицыТоваров"
	Если ЗначениеЗаполнено(бг_Основание) Тогда
		Движения.ТоварыКОформлениюИзлишковНедостач.Очистить();
		Движения.ТоварыКОформлениюИзлишковНедостач.Записать();
	КонецЕсли;
	
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	бг_НеОтражатьВРегламентированномУчете = Ложь;
	бг_АкцизПоПриобретеннымЦенностямМатериалы.Очистить();
	бг_АкцизПоПриобретеннымЦенностямПродукция.Очистить();
КонецПроцедуры

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ЗаполнитьНаОснованииТТНВходящейЕГАИС(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьНаОснованииТТНВходящейЕГАИС(ТТНВходящая)

	ДанныеЗаполнения = Документы.ПересортицаТоваров.бг_ДанныеЗаполненияПересортицыТоваровНаОснованииТТНВходящей(
		ТТНВходящая);	
	
	ДанныеДокумента = ДанныеЗаполнения.ДанныеДокумента;
	ДанныеТабличнойЧастиТТНВходящей = ДанныеЗаполнения.ДанныеТабличнойЧастиТТНВходящей.Выгрузить();
	ДанныеТабличнойЧастиПеремещенияТоваров = ДанныеЗаполнения.ДанныеТабличнойЧастиПеремещенияТоваров.Выгрузить();
	
	ИтоговаяТаблица = Документы.ПересортицаТоваров.ИнициализироватьИтоговуюТаблицуТабличнойЧасти();
	
	ВыборкаДанныхДокумента = ДанныеДокумента.Выбрать();
	ВыборкаДанныхДокумента.Следующий();
	
	Дата = ТекущаяДатаСеанса();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаДанныхДокумента);
	
	СтруктураОтбора = Новый Структура("Номенклатура,Характеристика,Количество");
	
	Для Каждого СтрокаТаблицы Из ДанныеТабличнойЧастиТТНВходящей Цикл
		
		НоваяСтрока = ИтоговаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СтруктураОтбора.Номенклатура = СтрокаТаблицы.НоменклатураОприходование;
		СтруктураОтбора.Характеристика = СтрокаТаблицы.ХарактеристикаОприходование;
		СтруктураОтбора.Количество = СтрокаТаблицы.Количество;
		
		СтрокиПеремещения = ДанныеТабличнойЧастиПеремещенияТоваров.НайтиСтроки(СтруктураОтбора);
		
		СтрокаПеремещения = Неопределено;
		
		Если СтрокиПеремещения.Количество() <> 0 Тогда
			СтрокаПеремещения = СтрокиПеремещения[0];
		КонецЕсли;
		
		Если СтрокаПеремещения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПеремещения);
		
		ДанныеТабличнойЧастиПеремещенияТоваров.Удалить(СтрокаПеремещения);
		
	КонецЦикла;
	
	ЭтотОбъект.Товары.Загрузить(ИтоговаяТаблица);
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Дата", Дата);
	ДанныеДокумента.Вставить("Склад", Склад); 
	
	ПараметрыУказанияСерий = Документы.ПересортицаТоваров.ПараметрыУказанияСерий(
		ДанныеДокумента);
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		ЭтотОбъект, 
		ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти

#Область АкцизыПоПриобретеннымЦенностям

Процедура бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПересортицаТоваровЛокализация.бг_ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыСостоянияСписываемогоСырья = ПересортицаТоваровЛокализация.бг_СтатусыСостоянияСписываемогоСырья();
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаТаблицаМатериалы());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиАкцизовПоПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиВыпущеннойПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаРасчетСписанияАкцизовПоПродукции());
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("Ссылка",           Ссылка);
	Если ДополнительныеСвойства.Свойство("бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям")
		И ДополнительныеСвойства.бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям = Истина Тогда
		ДатаОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	Иначе
		ДатаОстатков = '00010101';
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатков",     ДатаОстатков);
	Запрос.УстановитьПараметр("Товары",           Товары.Выгрузить(, "НомерСтроки, Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("СтатусыАкциза",    СтатусыСостоянияСписываемогоСырья.СтатусыАкциза);
	Запрос.УстановитьПараметр("СостоянияСырья",   СтатусыСостоянияСписываемогоСырья.СостоянияСырья);
	Запрос.УстановитьПараметр("ТипМестаХранения", Перечисления.бг_ТипыМестХраненияПодакцизнойПродукции.Склад);
	
	ТочностьУчетаМатериалов = РегистрыНакопления.бг_АкцизПоПриобретеннымЦенностям.ТочностьУчетаПодакцизныхМатериалов();
	Запрос.УстановитьПараметр("ТочностьУчета", ТочностьУчетаМатериалов);
	
	Результат = Запрос.Выполнить();
	бг_Акциз  = Результат.Выгрузить();
	
	бг_АкцизПоПриобретеннымЦенностямМатериалы.Загрузить(бг_Акциз);
	
	бг_АкцизыЗаполнитьВыпускаемуюПродукцию(бг_Акциз, Отказ);
	бг_АкцизПоПриобретеннымЦенностямПродукция.Загрузить(бг_Акциз);
КонецПроцедуры

Процедура бг_АкцизыЗаполнитьВыпускаемуюПродукцию(Акцизы, Отказ)
	бг_Товары = Товары.Выгрузить(, "Номенклатура, Серия, НоменклатураОприходование, СерияОприходование");
	бг_Товары.Свернуть("Номенклатура, Серия, НоменклатураОприходование, СерияОприходование");
	
	Для Каждого СтрокаАкциз Из Акцизы Цикл
		Отбор = Новый Структура("Номенклатура, Серия", СтрокаАкциз.Продукция, СтрокаАкциз.СерияПродукции);
		СтрокиТовары = бг_Товары.НайтиСтроки(Отбор);
		Если СтрокиТовары.Количество() = 1 Тогда
			СтрокаАкциз.Продукция = СтрокиТовары[0].НоменклатураОприходование;
			СтрокаАкциз.СерияПродукции = СтрокиТовары[0].СерияОприходование;
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для серии списываемого товара %1 должна быть указана одна серия оприходования'"),
																									СтрокаАкциз.СерияПродукции);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , , Отказ);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

Процедура бг_ОтменитьОтражениеДокументовВУчете(Отказ)
	
	Если бг_НеРегистрироватьКОтражениюВРеглУчете Тогда
		
		РеглУчетПроведениеСервер.НеРегистрироватьКОтражениюВРеглУчете(ДополнительныеСвойства);
		
		бг_ОчиститьРегистрыРеглУчета(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ОчиститьРегистрыРеглУчета(Отказ)
	
	Если Не Отказ И бг_НеРегистрироватьКОтражениюВРеглУчете Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыСведений.ОтражениеДокументовВРеглУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
