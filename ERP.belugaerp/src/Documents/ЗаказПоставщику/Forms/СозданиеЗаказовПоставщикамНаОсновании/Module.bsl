
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура бг_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	
	бг_ДобавитьРеквизитыИЭлементыФормы();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура бг_СоздатьЗаказы(Команда)
	
	//Является потомком типовой процедуры СоздатьЗаказы
	//Изменено:
	//	- Вместо вызова ПередСозданиемЗаказовСервер, вызывается бг_ПередСозданиемЗаказовСервер.
	
	ОчиститьСообщения();

	Если Товары.Количество() = 0 Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Отсутствуют строки для формирования заказов!';
																|en = 'Lines to generate orders are missing.'"));

	ИначеЕсли КоличествоЗаказов = 0 И Товары.Количество() > 0 Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для формирования заказов необходимо указать поставщиков и отметить хотя бы одну строку!';
					|en = 'To place orders, specify the vendors and select at least one line.'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", 1, "Выбран"),
				,);
	Иначе

		бг_ПередСозданиемЗаказовСервер();

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИфункции

&НаСервере
&Вместо("ЗаполнитьТовары")
Процедура бг_ЗаполнитьТовары()
	
	//Изменено:
	//	- Учитываются дополнительные колонки: 
	//		- бг_Контрагент - Из регистра бг_ПоставщикиЕК_СУМ 
	//		- бг_Договор	- Из регистра бг_ПоставщикиЕК_СУМ	
	//		- бг_Соглашение	- Из регистра бг_ПоставщикиЕК_СУМ
	//	- Поставщик ранее определялся с помощью исторических данных (предыдущее поступление),
	//		теперь определяется из регистра бг_ПоставщикиЕК_СУМ
	//	- Изменен алгоритм заполнения колонок:
	//		- ДатаПоступления 		- по табличной части ""Товары"" 
	//		- Количество 			- по табличной части ""Товары"" 
	//		- КоличествоУпаковок 	- по табличной части ""Товары"" 

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
	|	ЗаказКлиентаТовары.Склад КАК Склад,
	|	ЗаказКлиентаТовары.Ссылка.Подразделение КАК Подразделение,
	|	ЛОЖЬ КАК СписатьНаРасходы,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ЗаказКлиентаТовары.Упаковка КАК Упаковка,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ЗаказКлиентаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиентаТовары.Ссылка.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.Подразделение КАК Подразделение,
	|	ТаблицаТовары.СписатьНаРасходы КАК СписатьНаРасходы,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	бг_ПоставщикиЕК_СУМ.Партнер КАК Поставщик,
	|	бг_ПоставщикиЕК_СУМ.Контрагент КАК бг_Контрагент,
	|	бг_ПоставщикиЕК_СУМ.Договор КАК бг_Договор,
	|	бг_ПоставщикиЕК_СУМ.Соглашение КАК бг_Соглашение,
	|	ТаблицаТовары.ДатаОтгрузки КАК ДатаПоступления
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ПоставщикиЕК_СУМ КАК бг_ПоставщикиЕК_СУМ
	|		ПО ТаблицаТовары.Номенклатура = бг_ПоставщикиЕК_СУМ.Номенклатура
	|			И (бг_ПоставщикиЕК_СУМ.Организация = ТаблицаТовары.Организация)");

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	УстановитьПривилегированныйРежим(Истина);
	Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	Если Товары.Количество() = 0 Тогда

		ТекстОшибки = НСтр("ru = 'Нет товаров, доступных для заполнения.';
		|en = 'No goods available for filling.'");
		ВызватьИсключение ТекстОшибки;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура бг_ПередСозданиемЗаказовСервер()
	
	//Является потомком типовой процедуры ПередСозданиемЗаказовСервер
	//Изменено:
	//	- Учитываются дополнительные колонки: 
	//		- бг_Контрагент	
	//		- бг_Договор	
	//		- бг_Соглашение
	//		- ДатаПоступления
	//	- Вместо вызова СоздатьЗаказыСервер, вызывается бг_СоздатьЗаказыСервер.
	
	ЕстьРеквизитШапкиСклад = ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные());
	
	Если ЕстьРеквизитШапкиСклад Тогда
	
		РеквизитыЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование,
																			"Организация, Склад");
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗаполнения.Склад,
																		"ЭтоГруппа");
		ИспользованиеСкладов = ИспользоватьСкладыВТабличнойЧасти();
		
		ДобавленныеРеквизиты = ", бг_Контрагент, бг_Договор, бг_Соглашение, ДатаПоступления";
		
		Если ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда

			Поставщики = Товары.Выгрузить(Новый Структура("Выбран", Истина), "Поставщик" + ДобавленныеРеквизиты);
			Поставщики.Свернуть("Поставщик" + ДобавленныеРеквизиты);

		ИначеЕсли Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда

			Если ЭтоГруппа Тогда

				Поставщики = Товары.Выгрузить(Новый Структура("Выбран", Истина), "Поставщик,Склад" + ДобавленныеРеквизиты);
				Поставщики.Свернуть("Поставщик" + ДобавленныеРеквизиты);

			Иначе

				Поставщики = Товары.Выгрузить(Новый Структура("Выбран", Истина), "Поставщик" + ДобавленныеРеквизиты);
				Поставщики.Свернуть("Поставщик" + ДобавленныеРеквизиты);

			КонецЕсли;
		ИначеЕсли ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И Не ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда

			Поставщики = Товары.Выгрузить(Новый Структура("Выбран", Истина), "Поставщик" + ДобавленныеРеквизиты);
			Поставщики.Свернуть("Поставщик" + ДобавленныеРеквизиты);

		ИначеЕсли Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И Не ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда

			Поставщики = Товары.Выгрузить(Новый Структура("Выбран", Истина), "Поставщик" + ДобавленныеРеквизиты);
			Поставщики.Свернуть("Поставщик" + ДобавленныеРеквизиты);

		КонецЕсли;
	
	Иначе
		
		Поставщики = Товары.Выгрузить(Новый Структура("Выбран", Истина), "Поставщик,Склад" + ДобавленныеРеквизиты);
		Поставщики.Свернуть("Поставщик, Склад" + ДобавленныеРеквизиты);
		
	КонецЕсли;
	
	КоличествоОшибок = 0;
	
	Для ТекИндекс = 0 По Товары.Количество() - 1 Цикл
		
		Если Товары[ТекИндекс].Поставщик = Справочники.Партнеры.ПустаяСсылка() И Товары[ТекИндекс].Выбран = Истина Тогда
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Поставщик"" в строке %1 списка ""Товары""';
					|en = 'Column ""Provider"" in line %1 of the ""Goods"" list is not filled in'"),
				ТекИндекс + 1);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекИндекс + 1, "Поставщик"));

			КоличествоОшибок = КоличествоОшибок + 1;

		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОшибок = 0 Тогда

		бг_СоздатьЗаказыСервер(Поставщики);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура бг_СоздатьЗаказыСервер(Поставщики)
	
	//Является потомком типовой процедуры СоздатьЗаказыСервер
	//Изменено:
	//	- Учитываются дополнительные колонки: 
	//		- бг_Контрагент	
	//		- бг_Договор	
	//		- бг_Соглашение
	//	- Изменен методи поиска колонки "Склад".
	//		- ВМЕСТО: 			Поставщики.Колонки.Количество() = 2
	//		- ТЕКСТ ЗАМЕНЫ:		Поставщики.Колонки.Найти("Склад") <> Неопределено
	//	- Добавлено заполнение комментария ожидаемой датой отгрузки
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаказы;
	
	ИспользованиеСкладов = ИспользоватьСкладыВТабличнойЧасти();
	
	ДанныеДокументаОснования = СтруктураДокументаОснованияНаСервере(ИспользованиеСкладов);

	ДатаЗаказов = ТекущаяДатаСеанса();
	Для Каждого ТекСтрока Из Поставщики Цикл

		Заказ = Документы.ЗаказПоставщику.СоздатьДокумент();
		Заказ.Дата = ДатаЗаказов;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Поставщик", 		ТекСтрока.Поставщик);
		Отбор.Вставить("Выбран",			Истина);
		Отбор.Вставить("бг_Контрагент", 	ТекСтрока.бг_Контрагент);
		Отбор.Вставить("бг_Договор", 		ТекСтрока.бг_Договор);
		Отбор.Вставить("бг_Соглашение", 	ТекСтрока.бг_Соглашение);
		Отбор.Вставить("ДатаПоступления", 	ТекСтрока.ДатаПоступления);
		
		Если Поставщики.Колонки.Найти("Склад") <> Неопределено Тогда
			Отбор.Вставить("Склад", ТекСтрока.Склад);
		КонецЕсли;
		
		СтрокиТовары = Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТовар Из СтрокиТовары Цикл

			ЗаполнитьЗначенияСвойств(Заказ.Товары.Добавить(), СтрокаТовар);

		КонецЦикла;
		
		Заказ.Партнер = ТекСтрока.Поставщик;
		Заказ.Контрагент = ТекСтрока.бг_Контрагент;
		Заказ.Договор = ТекСтрока.бг_Договор;
		Заказ.Соглашение = ТекСтрока.бг_Соглашение;
		
		Если ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			Заказ.Комментарий = НСтр("ru ='Ожидаемая дата отгрузки: '") + Формат(ТекСтрока.ДатаПоступления, "ДЛФ=DD");
		КонецЕсли;

		Заказ.Заполнить(ДанныеДокументаОснования);
		Если Поставщики.Колонки.Найти("Склад") <> Неопределено Тогда
			Заказ.Склад = ТекСтрока.Склад;
		КонецЕсли;
		
		Заказ.ЗаполнитьУсловияЗакупокПоСоглашению(Истина);
		НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреВТаблице(Заказ.Товары,ТекСтрока.Поставщик);
		Заказ.Записать(РежимЗаписиДокумента.Запись);

		СтрокаЗаказов = Заказы.Добавить();
		СтрокаЗаказов.Ссылка   = Заказ.Ссылка;
		СтрокаЗаказов.Картинка = 2;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура бг_ДобавитьРеквизитыИЭлементыФормы()
	
	Элементы.СоздатьЗаказы.Видимость = Ложь;
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(ЭтотОбъект,
		"бг_СоздатьЗаказы",
		Элементы.ГруппаКнопкаСоздатьЗаказы,
		"Создать заказы поставщикам",
		"бг_СоздатьЗаказы",
		"бг_СоздатьЗаказы",
		,
		ВидКнопкиФормы.ОбычнаяКнопка);
		
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("бг_Договор", 
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"),
		"Товары", 
		"Договор"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("бг_Соглашение", 
		Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"),
		"Товары", 
		"Соглашение"));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("бг_Контрагент", 
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"),
		"Товары", 
		"Контрагент"));
	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(ЭтотОбъект,
		"бг_Соглашение", 
		Элементы.Товары,
		"Товары.бг_Соглашение");
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(ЭтотОбъект,
		"бг_Контрагент", 
		Элементы.Товары,
		"Товары.бг_Контрагент");
	бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(ЭтотОбъект,
		"бг_Договор", 
		Элементы.Товары,
		"Товары.бг_Договор");
		
КонецПроцедуры

#КонецОбласти
