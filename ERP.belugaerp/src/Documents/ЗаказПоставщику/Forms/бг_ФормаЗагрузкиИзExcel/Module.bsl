
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Соглашение = Параметры.Соглашение;
	Партнер = Параметры.Партнер;
	
	Элементы.ДекорацияЦветПредупреждения.ЦветФона = ЦветаСтиля.ЦветФонаПредупреждения;
	
	УстановитьУсловноеОформление();
	
	ЗадаватьВопросПередЗакрытием = Истина;
	
	Если Не ЗначениеЗаполнено(ВариантПоискаНоменклатуры) Тогда
		ЭлементСпискаВариантПоиска = Элементы.ВариантПоискаНоменклатуры.СписокВыбора[0];
		ВариантПоискаНоменклатуры = ЭлементСпискаВариантПоиска.Значение;
		Элементы.ТаблицаНоменклатурыКлючПоиска.Заголовок = ЭлементСпискаВариантПоиска.Представление;
	КонецЕсли;
	
	АдресДанныхФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый Массив);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность
		И ЗадаватьВопросПередЗакрытием Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ОповещениеЗакрытия = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Перенести в табличную часть?.'");
				
		ПоказатьВопрос(
			ОповещениеЗакрытия, 
			ТекстВопроса, 
			РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект);
	
	ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов;
	ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите файл для заполнения номенклатуры в заказе поставщику'");
	ПараметрыДиалога.МножественныйВыбор = Ложь;
	ПараметрыДиалога.Фильтр = НСтр("ru='Файлы Excel (*.xls, *.xlsx)|*.xl*'");
	ПараметрыДиалога.ИндексФильтра = 0;
	
	НачатьПомещениеФайлаНаСервер(
		ОписаниеОповещенияОЗавершении, , , ,
		ПараметрыДиалога,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиНоменклатуру(Команда)
	
	ЗаполнитьНоменклатуру();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенести(Команда)
	
	ЗадаватьВопросПередЗакрытием = Ложь;
	
	АдресРезультатаПодбораНоменклатуры = ПоместитьРезультатПодбораНоменклатурыВоВременноеХранилище();
	
	Закрыть(АдресРезультатаПодбораНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЗадаватьВопросПередЗакрытием = Ложь;
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантПоискаНоменклатурыПриИзменении(Элемент)
	
	ЭлементСписка = Элементы.ВариантПоискаНоменклатуры.СписокВыбора.НайтиПоЗначению(ВариантПоискаНоменклатуры);
	Если ЭлементСписка <> Неопределено Тогда
		Элементы.ТаблицаНоменклатурыКлючПоиска.Заголовок = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Отбор = Новый Структура("КлючПоиска", ТекущиеДанные.КлючПоиска);
	ВыбранныеСтроки = ТаблицаНайденнойНоменклатуры.НайтиСтроки(Отбор);
	
	ЗначенияВыбора = Новый Массив;
	Для каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		ЗначенияВыбора.Добавить(ВыбраннаяСтрока.Номенклатура);
	КонецЦикла;
	
	ПараметрыВыбора = Новый Массив;
	Если ЗначенияВыбора.Количество() > 0 Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", ЗначенияВыбора);
		ПараметрыВыбора.Добавить(ПараметрВыбора);
	КонецЕсли;
	
	Элементы.ТаблицаНоменклатурыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатурыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.Родитель.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение)
		Или ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Отбор = Новый Структура("КлючПоиска, Номенклатура", ТекущиеДанные.КлючПоиска, ВыбранноеЗначение);
	ДанныеНоменклатуры = ТаблицаНайденнойНоменклатуры.НайтиСтроки(Отбор);
	
	Если ДанныеНоменклатуры.Количество() <> 0 Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеНоменклатуры[0]);	
	КонецЕсли;
	
	Модифицированность = Истина;
	
	КоличествоРазныхУпаковок = 0;
	ПредыдущаяУпаковка = Неопределено;
	Для каждого СтрокаТаблицы Из ДанныеНоменклатуры Цикл
		Если СтрокаТаблицы.бг_УпаковкаПаллета <> ПредыдущаяУпаковка Тогда
			КоличествоРазныхУпаковок = КоличествоРазныхУпаковок + 1;
		КонецЕсли;
		ПредыдущаяУпаковка = СтрокаТаблицы.бг_УпаковкаПаллета;
	КонецЦикла;
	
	ТекущиеДанные.ПаллетыСОдинаковымКлючом = КоличествоРазныхУпаковок > 1;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЧтениеФайла

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ОписаниеПомещенногоФайла, ДополнительныеПараметры) Экспорт
	
	Элементы.ДекорацияПутьКФайлу.Заголовок = НСтр("ru = 'Не выбран файл для загрузки'");
	
	Если ОписаниеПомещенногоФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеПомещенногоФайла.ПомещениеФайлаОтменено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не удалось записать файл во временное хранилище.'"));
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ОписаниеПомещенногоФайла.СсылкаНаФайл.Файл.ПолноеИмя;
	РасширениеФайла = ОписаниеПомещенногоФайла.СсылкаНаФайл.Расширение;
	
	Элементы.ДекорацияПутьКФайлу.Заголовок = СтрШаблон(НСтр("ru = 'Выбран файл: %1'"), ПутьКФайлу);
	
	ПрочитатьДанныеФайла(ОписаниеПомещенногоФайла.Адрес, СокрЛП(РасширениеФайла));
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеФайла(АдресФайлаВоВременномХранилище, ФорматФайла)
	
	ПутьНаСервере = ПолучитьИмяВременногоФайла(ФорматФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ДвоичныеДанные.Записать(ПутьНаСервере);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Прочитать(ПутьНаСервере, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	МассивДанныхФайла = Новый Массив;
	
	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число");
	
	ПерваяСтрокаДанныхВФайле = 2;
	НомерКолонкиКлючПоиска = 2;
	НомерКолонкиКоличество = 3;
	НомерКолонкиЦена = 4;
	
	Для СчетчикЦикла = ПерваяСтрокаДанныхВФайле По ТабличныйДокумент.ВысотаТаблицы Цикл
		
		КлючПоиска = СокрЛП(ТабличныйДокумент.Область(СчетчикЦикла, НомерКолонкиКлючПоиска).Текст);
		Количество = ТабличныйДокумент.Область(СчетчикЦикла, НомерКолонкиКоличество).Текст;
		Цена = ТабличныйДокумент.Область(СчетчикЦикла, НомерКолонкиЦена).Текст;
		
		ДанныеСтрокиФайла = Новый Структура;
		ДанныеСтрокиФайла.Вставить("НомерСтроки", СчетчикЦикла);
		ДанныеСтрокиФайла.Вставить("КлючПоиска", СтрЗаменить(КлючПоиска, Символы.НПП, ""));
		ДанныеСтрокиФайла.Вставить("Количество", ОписаниеТиповЧисло.ПривестиЗначение(Количество));
		ДанныеСтрокиФайла.Вставить("Цена", ОписаниеТиповЧисло.ПривестиЗначение(Цена));
		
		МассивДанныхФайла.Добавить(ДанныеСтрокиФайла);
		
	КонецЦикла;
	
	АдресДанныхФайлаВоВременномХранилище =
		ПоместитьВоВременноеХранилище(МассивДанныхФайла, УникальныйИдентификатор);
	
	ТаблицаНоменклатуры.Очистить();
	ТаблицаНайденнойНоменклатуры.Очистить();
	
	ТабличныйДокумент = Неопределено;
	
	Файл = Новый Файл(ПутьНаСервере);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ПутьНаСервере);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеНоменклатуры

&НаСервере
Процедура ЗаполнитьНоменклатуру()
	
	Если Не ЗначениеЗаполнено(ВариантПоискаНоменклатуры) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не выбран вариант поиска номенклатуры'"), ,
			"ВариантПоискаНоменклатуры");
		Возврат;
	КонецЕсли;
	
	МассивДанныхФайла = ПолучитьИзВременногоХранилища(СокрЛП(АдресДанныхФайлаВоВременномХранилище));
	Если Не ЗначениеЗаполнено(МассивДанныхФайла) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В выбранном файле нет данных для загрузки'"));
		Возврат;
	КонецЕсли;
	
	ТаблицаНоменклатуры.Очистить();
	ТаблицаНайденнойНоменклатуры.Очистить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаДанных = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(МассивДанныхФайла);
	Запрос.УстановитьПараметр("ДанныеФайла", ТаблицаДанных);
	
	СоздатьВременнуюТаблицуДанныеФайла(Запрос);
	
	Если ВариантПоискаНоменклатуры = "Штрихкод" Тогда
		СоздатьВременнуюТаблицуНоменклатурыПоШтрихкоду(Запрос);
	Иначе
		ИскатьСКЮМТПоКодуSAP = ВариантПоискаНоменклатуры = "КодSAP";
		СоздатьВременнуюТаблицуНоменклатурыПоСКЮМТ(Запрос, ИскатьСКЮМТПоКодуSAP);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаВыборкаНоменклатура();
	
	ВидЦеныПоставщика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ВидЦеныПоставщика");
	Запрос.УстановитьПараметр("ВидЦеныПоставщика", ВидЦеныПоставщика);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапросаПоТоварам = Запрос.Выполнить();
	
	ВыборкаПоКлючуПоиска = РезультатЗапросаПоТоварам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКлючуПоиска.Следующий() Цикл
		
		ПерваяДетальнаяЗапись = Истина;
		
		ВыборкаПоТоварам = ВыборкаПоКлючуПоиска.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаПоТоварам.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Если ПерваяДетальнаяЗапись Тогда
					
					СтрокаТаблицыНоменклатура = ТаблицаНоменклатуры.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыНоменклатура, ВыборкаДетальныеЗаписи);
					
					СтрокаТаблицыНоменклатура.ТоварыСОдинаковымКлючом =
						ВыборкаПоКлючуПоиска.КоличествоТоваровСОдинаковымКлючом > 1;
					
					СтрокаТаблицыНоменклатура.ПаллетыСОдинаковымКлючом =
						ВыборкаПоТоварам.КоличествоРазныхПаллетСОдинаковымКлючом > 1;
					
				КонецЕсли;
				
				ПерваяДетальнаяЗапись = Ложь;
				
				СтрокаТаблицыВсяНоменклатура = ТаблицаНайденнойНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыВсяНоменклатура, ВыборкаДетальныеЗаписи);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьВременнуюТаблицуДанныеФайла(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеФайла.КлючПоиска КАК КлючПоиска,
	|	ДанныеФайла.Количество КАК Количество,
	|	ДанныеФайла.Цена КАК Цена
	|ПОМЕСТИТЬ ДанныеФайла
	|ИЗ
	|	&ДанныеФайла КАК ДанныеФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДанныеФайла.КлючПоиска КАК СТРОКА(20)) КАК КлючПоиска,
	|	СУММА(ДанныеФайла.Количество) КАК Количество,
	|	ДанныеФайла.Цена КАК Цена
	|ПОМЕСТИТЬ ДанныеФайлаСвернутые
	|ИЗ
	|	ДанныеФайла КАК ДанныеФайла
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ДанныеФайла.КлючПоиска КАК СТРОКА(20)),
	|	ДанныеФайла.Цена
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеФайла";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьВременнуюТаблицуНоменклатурыПоШтрихкоду(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеФайлаСвернутые.КлючПоиска КАК КлючПоиска,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.ПометкаУдаления, ЛОЖЬ) = ИСТИНА
	|				ИЛИ ЕСТЬNULL(СпрНоменклатура.ПометкаУдаления, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(СпрНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Владелец, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ВладелецУпаковки,
	|	ДанныеФайлаСвернутые.Количество КАК Количество,
	|	ДанныеФайлаСвернутые.Цена КАК ЦенаФайл
	|ПОМЕСТИТЬ НоменклатураФайла
	|ИЗ
	|	ДанныеФайлаСвернутые КАК ДанныеФайлаСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бг_Штрихкоды_ЕК_Номенклатуры КАК ШтрихкодыНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|			ПО ШтрихкодыНоменклатуры.Владелец.Владелец = СпрНоменклатура.Ссылка
	|		ПО ДанныеФайлаСвернутые.КлючПоиска = ШтрихкодыНоменклатуры.Штрихкод
	|			И (ДанныеФайлаСвернутые.КлючПоиска <> """")
	|
	|ГДЕ
	|	ДанныеФайлаСвернутые.КлючПоиска <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеФайлаСвернутые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(УпаковкиЕдиницыИзмерения.Владелец КАК Справочник.Номенклатура) КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиЕдиницыИзмерения.Ссылка) = 1
	|		ТОГДА МАКСИМУМ(УпаковкиЕдиницыИзмерения.Ссылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Паллета
	|ПОМЕСТИТЬ УпаковкиНоменклатуры
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|	И УпаковкиЕдиницыИзмерения.Родитель В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				НоменклатураФайла.ВладелецУпаковки КАК ВладелецУпаковки
	|			ИЗ
	|				НоменклатураФайла КАК НоменклатураФайла
	|			ГДЕ
	|				НоменклатураФайла.ВладелецУпаковки <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиЕдиницыИзмерения.Владелец,
	|	УпаковкиЕдиницыИзмерения.Родитель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиЕдиницыИзмерения.Ссылка) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьВременнуюТаблицуНоменклатурыПоСКЮМТ(Запрос, ПоКодуSAP = Ложь)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеФайлаСвернутые.КлючПоиска КАК КлючПоиска,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникСКЮМТ.ПометкаУдаления, ЛОЖЬ) = ИСТИНА
	|				ИЛИ ЕСТЬNULL(СправочникНоменклатура.ПометкаУдаления, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(СправочникНоменклатура.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|	КОНЕЦ КАК Номенклатура,
	|	ЕСТЬNULL(СправочникНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	НЕОПРЕДЕЛЕНО КАК ВладелецУпаковки,
	|	ДанныеФайлаСвернутые.Количество КАК Количество,
	|	ДанныеФайлаСвернутые.Цена КАК ЦенаФайл
	|ПОМЕСТИТЬ НоменклатураФайла
	|ИЗ
	|	ДанныеФайлаСвернутые КАК ДанныеФайлаСвернутые
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бг_ЕК_СКЮ_СкюМТ КАК СправочникСКЮМТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|			ПО СправочникСКЮМТ.Ссылка = СправочникНоменклатура.ТоварнаяКатегория.бг_СкюМТ
	|		ПО ДанныеФайлаСвернутые.КлючПоиска = СправочникСКЮМТ.Код
	|			И (ДанныеФайлаСвернутые.КлючПоиска <> """")
	|
	|ГДЕ
	|	ДанныеФайлаСвернутые.КлючПоиска <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючПоиска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеФайлаСвернутые
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ    
	|	ВЫРАЗИТЬ(УпаковкиЕдиницыИзмерения.Владелец КАК Справочник.Номенклатура) КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Родитель КАК Родитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиЕдиницыИзмерения.Ссылка) = 1
	|		ТОГДА МАКСИМУМ(УпаковкиЕдиницыИзмерения.Ссылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Паллета
	|ПОМЕСТИТЬ УпаковкиНоменклатуры
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|	И УпаковкиЕдиницыИзмерения.Владелец В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				НоменклатураФайла.Номенклатура КАК Владелец
	|			ИЗ
	|				НоменклатураФайла КАК НоменклатураФайла
	|			ГДЕ
	|				НоменклатураФайла.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиЕдиницыИзмерения.Владелец,
	|	УпаковкиЕдиницыИзмерения.Родитель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиЕдиницыИзмерения.Ссылка) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ПоКодуSAP Тогда
		ПодстрокаПоиска = "ДанныеФайлаСвернутые.КлючПоиска = СправочникСКЮМТ.Код";
		ПодстрокаЗамены = "ДанныеФайлаСвернутые.КлючПоиска = СправочникСКЮМТ.КодНоменклатурыSAP";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаВыборкаНоменклатура()
	
	Возврат
	"ВЫБРАТЬ
	|	НоменклатураФайла.КлючПоиска КАК КлючПоиска,
	|	НоменклатураФайла.Номенклатура КАК Номенклатура,
	|	НоменклатураФайла.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Паллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК бг_УпаковкаПаллета,
	|	НоменклатураФайла.Количество КАК Количество,
	|	НоменклатураФайла.Количество КАК КоличествоУпаковок,
	|	ЦеныНоменклатурыПоставщиковСрезПоследних.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиковСрезПоследних.Цена, НоменклатураФайла.ЦенаФайл) КАК Цена,
	|	ВЫБОР
	|		КОГДА НоменклатураФайла.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА НоменклатураФайла.Номенклатура
	|	КОНЕЦ КАК КоличествоТоваровСОдинаковымКлючом,
	|	ВЫБОР
	|		КОГДА НоменклатураФайла.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(УпаковкиНоменклатуры.Паллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|	КОНЕЦ КАК КоличествоРазныхПаллетСОдинаковымКлючом
	|ИЗ
	|	НоменклатураФайла КАК НоменклатураФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				,
	|				ВидЦеныПоставщика = &ВидЦеныПоставщика
	|					И Партнер = &Партнер
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|					И УдалитьСоглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							НоменклатураФайла.Номенклатура
	|						ИЗ
	|							НоменклатураФайла)) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
	|		ПО НоменклатураФайла.Номенклатура = ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО НоменклатураФайла.Номенклатура = УпаковкиНоменклатуры.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	НоменклатураФайла.Номенклатура.Код УБЫВ
	|
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоТоваровСОдинаковымКлючом),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КоличествоРазныхПаллетСОдинаковымКлючом)
	|ПО
	|	КлючПоиска,
	|	Номенклатура
	|";
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыНоменклатура");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ТоварыСОдинаковымКлючом");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПредупреждения);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыбг_УпаковкаПаллета");
	
	ЭлементОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатуры.ПаллетыСОдинаковымКлючом");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Отмена(Неопределено);
	Иначе
		Перенести(Неопределено);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ПоместитьРезультатПодбораНоменклатурыВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры.Выгрузить());
	
КонецФункции

#КонецОбласти
