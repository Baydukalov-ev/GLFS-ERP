
#Область ОбработчикиСобытий

&Перед("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НоменклатураДокумента = Товары.ВыгрузитьКолонку("Номенклатура");
	
	ДокументСодержитАлкогольнуюПродукцию = бг_Номенклатура.ЕстьАлкогольнаяПродукция(НоменклатураДокумента);
		
	Если ДокументСодержитАлкогольнуюПродукцию Тогда
		ПроверяемыеРеквизиты.Добавить("бг_ПунктПогрузки");
	КонецЕсли;
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	НеобходимоСоздатьЗаказ = РегистрыСведений.бг_НастройкаСозданияЗаказов.ПолучитьНастройкиСозданияЗаказа(ДокументОснование);
	
	Если НеобходимоСоздатьЗаказ <> Неопределено И Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		бг_СоздатьОбновитьЗаказПоставщику();
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	бг_ЗаполнитьТранспортнуюИнформацию();
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		бг_ЗаполнитьОтветственныеЛица();
		бг_РасчетСкидок.ПроверитьМинимальныеЦеныАлкогольнойПродукции(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	бг_УпаковкиЕдиницыИзмерения.РассчитатьИтоговыеПоказателиПаллетизации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_СоздатьОбновитьЗаказПоставщику()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка КАК Заказ
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.ПометкаУдаления = ЛОЖЬ
	               |	И ЗаказПоставщику.бг_ОснованиеЗаказа = &ЗаказОснование";
	Запрос.УстановитьПараметр("ЗаказОснование", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДокДляЗаполнения = Выборка.Заказ.ПолучитьОбъект();
	Иначе
		ДокДляЗаполнения = Документы.ЗаказПоставщику.СоздатьДокумент();
	КонецЕсли;
	ДокДляЗаполнения.Заполнить(Ссылка);
	ДокДляЗаполнения.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура бг_ЗаполнитьОтветственныеЛица()

	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Менеджер = ТекущийПользователь;
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ЗаполнитьТранспортнуюИнформацию()
	
	Если Не ЗначениеЗаполнено(Контрагент)
		Или Не ЗначениеЗаполнено(Склад)
		Или Не ЗначениеЗаполнено(ДлительностьДоставки) Тогда
		Возврат;
	КонецЕсли;
	
	ВидПеревозки = РегистрыСведений.бг_СоответствиеВидовДоставкиОтПоставщиков.ВидДоставкиОтПоставщика(
								Контрагент, Склад, ДлительностьДоставки);
	Если Не ЗначениеЗаполнено(ВидПеревозки) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидПеревозки", ВидПеревозки);
	бг_ТранспортнаяИнформация.СоздатьНайтиЗаписьТранспортнойИнформации(Ссылка, ДанныеЗаполнения);
КонецПроцедуры

#КонецОбласти
