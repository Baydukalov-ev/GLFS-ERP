#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ);
	КонецЕсли;
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	бг_ОтразитьДвиженияПоМаркам(Отказ);	
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(ОбъектКопирования)
	бг_АкцизПоПриобретеннымЦенностям.Очистить();
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой Тогда
		бг_ПроверитьКорректностьЗаполненияДанныхФСМ(Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_ОтразитьДвиженияПоМаркам(Отказ) 
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	МаркиДокумента = Документы.ДвижениеПродукцииИМатериалов.бг_МаркиДокумента(Ссылка);
	МаркиСИдентификаторами = РегистрыСведений.бг_ИдентификаторыМарок.ОпределитьСоздатьИдентификаторыМарок(МаркиДокумента);
	бг_СформироватьДвиженияМарок(МаркиСИдентификаторами);
КонецПроцедуры

Процедура бг_СформироватьДвиженияМарок(ТаблицаМарок)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ГУИДМарки КАК ГУИДМарки
	|ПОМЕСТИТЬ втИдентификаторы
	|ИЗ
	|	&ТаблицаМарок КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	НЕОПРЕДЕЛЕНО КАК Серия,
	|	втИдентификаторы.ГУИДМарки КАК ГУИДМарки,
	|	НЕОПРЕДЕЛЕНО КАК КодУпаковки,
	|	&Статус КАК СтатусМарки
	|ИЗ
	|	втИдентификаторы КАК втИдентификаторы";
	
	СтатусыПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);

	Запрос.УстановитьПараметр("Статус", СтатусыПоОперации.ПеремещеноВБрак);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ТаблицаМарок", ТаблицаМарок);
	Результат = Запрос.Выполнить();
	ТаблицаДвижениеМарок = Результат.Выгрузить();
	
	Движения.бг_ДвижениеМарок.Записывать = Истина;
	Движения.бг_ДвижениеМарок.Загрузить(ТаблицаДвижениеМарок);
КонецПроцедуры

Процедура бг_ПроверитьКорректностьЗаполненияДанныхФСМ(Отказ)
	Если бг_ДанныеФСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеФСМ.Номенклатура КАК Номенклатура,
	|	ДанныеФСМ.Серия КАК Серия,
	|	ДанныеФСМ.Количество КАК Количество
	|ПОМЕСТИТЬ ДанныеФСМ
	|ИЗ
	|	&ДанныеФСМ КАК ДанныеФСМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеФСМ.Номенклатура КАК Номенклатура,
	|	ДанныеФСМ.Серия КАК Серия,
	|	ДанныеФСМ.Количество КАК Количество
	|ПОМЕСТИТЬ ПредварительныеДанные
	|ИЗ
	|	ДанныеФСМ КАК ДанныеФСМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	-Товары.Количество
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПредварительныеДанные.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ПредварительныеДанные.Серия) КАК Серия,
	|	СУММА(ПредварительныеДанные.Количество) КАК Количество
	|ИЗ
	|	ПредварительныеДанные КАК ПредварительныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ПредварительныеДанные.Номенклатура = СпрНоменклатура.Ссылка
	|			И (СпрНоменклатура.ВидНоменклатуры = &ВидНоменклатурыФСМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныеДанные.Номенклатура,
	|	ПредварительныеДанные.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПредварительныеДанные.Количество) <> 0";
	Запрос.УстановитьПараметр("ВидНоменклатурыФСМ", бг_КонстантыПовтИсп.ЗначениеКонстанты("ФедеральнаяСпецМарка"));
	Запрос.УстановитьПараметр("ДанныеФСМ", бг_ДанныеФСМ.Выгрузить(, "Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(, "Номенклатура, Серия, Количество"));
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru='Для серии %1 не совпадает количество товара и данные ФСМ'"), Выборка.Серия),
				,
				,
				,
				Отказ);
	КонецЦикла;
КонецПроцедуры

#Область АкцизыПоПриобретеннымЦенностям

Процедура бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям(Отказ) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДвижениеПродукцииИМатериаловЛокализация.бг_ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыСостоянияСписываемогоСырья = ДвижениеПродукцииИМатериаловЛокализация.бг_СтатусыСостоянияСписываемогоСырья(ХозяйственнаяОперация);
	
	бг_ТаблицаАкцизы = бг_АкцизПоПриобретеннымЦенностям.ВыгрузитьКолонки();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Если ДополнительныеСвойства.Свойство("бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям")
		И ДополнительныеСвойства.бг_ЗаполнитьАкцизыПоПриобретеннымЦенностям = Истина Тогда
		ДатаОстатков = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	Иначе
		ДатаОстатков = '00010101';
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаОстатков", ДатаОстатков);
	Запрос.УстановитьПараметр("Товары",       Товары.Выгрузить(, "НомерСтроки, Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	ТочностьУчетаМатериалов = РегистрыНакопления.бг_АкцизПоПриобретеннымЦенностям.ТочностьУчетаПодакцизныхМатериалов();
	Запрос.УстановитьПараметр("ТочностьУчета", ТочностьУчетаМатериалов);
	
	// Списание акциза по материалам
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаТаблицаМатериалы());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиАкцизовПоМатериалам());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаСписаниеАкцизовПоМатериалам());
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("СтатусыАкциза",  СтатусыСостоянияСписываемогоСырья.Материалы.СтатусыАкциза);
	Запрос.УстановитьПараметр("СостоянияСырья", СтатусыСостоянияСписываемогоСырья.Материалы.СостоянияСырья);
	Результат = Запрос.Выполнить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), бг_ТаблицаАкцизы);
	
	// Списание акцизов по продукции (выпущенная спиртосодержащая смесь, возвраты)
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаТаблицаМатериалы());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиАкцизовПоПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаОстаткиВыпущеннойПродукции());
	МассивТекстов.Добавить(бг_УчетБанковскихГарантий.ТекстЗапросаРасчетСписанияАкцизовПоПродукции());
	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("ТипМестаХранения", Перечисления.бг_ТипыМестХраненияПодакцизнойПродукции.Склад);
	Запрос.УстановитьПараметр("СтатусыАкциза",    СтатусыСостоянияСписываемогоСырья.Продукция.СтатусыАкциза);
	Запрос.УстановитьПараметр("СостоянияСырья",   СтатусыСостоянияСписываемогоСырья.Продукция.СостоянияСырья);
	
	Результат = Запрос.Выполнить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), бг_ТаблицаАкцизы);
	
	бг_АкцизПоПриобретеннымЦенностям.Загрузить(бг_ТаблицаАкцизы);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
