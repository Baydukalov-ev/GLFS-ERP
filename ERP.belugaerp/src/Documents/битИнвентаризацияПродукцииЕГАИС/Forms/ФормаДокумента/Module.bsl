#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаСервере
Перем КэшированныеЗначения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьТоварыПоШтрихкодамПоДаннымМарок(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена организация'"),, "Организация", "Объект");
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	ЗаполнитьТоварыПоШтрихкодамПоДаннымМарокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыПоШтрихкодамПоДаннымМарок(Команда)
	
	Если ТоварыПоШтрихкодам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"ПеренестиТоварыПоШтрихкодамПоДаннымМарокПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Табличная часть ""Товары"" не пустая и будет очищена, продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		ПеренестиТоварыПоШтрихкодамПоДаннымМарокЗавершениеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиТоварыПоШтрихкодамПоДаннымМарокПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПеренестиТоварыПоШтрихкодамПоДаннымМарокЗавершениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	Если Не ВозможнаГенерацияСерий() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"СгенерироватьСерииПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Документ необходимо предварительно записать. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СгенерироватьСерииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерииПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
	СгенерироватьСерииЗавершение();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Не заполнена организация ЕГАИС.'"),,
			"ОрганизацияЕГАИС",
			"Объект");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Или Объект.Штрихкоды.Количество() > 0 Тогда
		
		ОповещениеПоЗавершении = Новый ОписаниеОповещения(
			"ЗагрузитьИзВнешнегоФайлаПослеВопроса",
			ЭтотОбъект);
		
		ПоказатьВопрос(
			ОповещениеПоЗавершении,
			НСтр("ru='Заполненные товары и штрихкоды будут очищены. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет);
			
	Иначе
		ЗагрузитьИзВнешнегоФайлаОткрытиеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзВнешнегоФайлаОткрытиеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаОткрытиеФормы()
	
	ОповещениеПослеЗакрытия = Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	
	ОткрытьФорму(
		"Обработка.бг_ЗаполнениеМарокИзТабличногоДокумента.Форма.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОповещениеПослеЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайлаЗавершение(Штрихкоды, ДополнительныеПараметры) Экспорт
	
	Если Не (ТипЗнч(Штрихкоды) = Тип("Массив") И Штрихкоды.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДокументПоШтрихкодам(Штрихкоды);
	ЗаполнитьТоварыПоШтрихкодамПоДаннымМарокНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область Шапка

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	Объект.Товары.Очистить();
	Объект.Штрихкоды.Очистить();
	ТоварыПоШтрихкодам.Очистить();
	
	Объект.СтатьяРасходов = Неопределено;
	Объект.ПричинаСписания = Неопределено;
	Объект.СтатьяДоходов = Неопределено;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.ОрганизацияЕГАИС = Неопределено;
	Иначе
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		ПроверитьВыборСтатьиРасходов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец Шапка

#Область Товары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущаяСтрока.КодСтроки = НовыйКодСтрокиТовары(ЭтотОбъект);
		Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
			УстановитьОтборСтрокШтрихкодов(ТекущаяСтрока.КодСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		УстановитьОтборСтрокШтрихкодов(ТекущаяСтрока.КодСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		СвязанныеСтрокиШтрихкодов = СвязанныеСТоварамиСтрокиШтрихкодов(ЭтотОбъект, ТекущаяСтрока);
		
		Для каждого СтрокаШтрихкоды Из СвязанныеСтрокиШтрихкодов Цикл
			Объект.Штрихкоды.Удалить(СтрокаШтрихкоды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			
			ТекущаяСтрока.УпаковкаПаллета = бг_НоменклатураВызовСервера.ПаллетизацияНоменклатурыПоУмолчанию(
				ТекущаяСтрока.Номенклатура);
				
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
		СтруктураДействий.Вставить(
			"ЗаполнитьСтрануПроисхожденияНоменклатуры",
			ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтраныПроисхождения());
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПаллетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		бг_УпаковкиЕдиницыИзмеренияКлиентСервер.СообщитьОНеверноВыбраннойУпаковкеПаллете();
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Выберите номенклатуру'"));
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТовары(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыСоздания = НоменклатураКлиент.ПараметрыСозданияНомераГТД(ТекущаяСтрока, Элемент.ТекстРедактирования);
	
	НоменклатураКлиент.ОткрытьФормуСозданияНомераГТД(ЭтотОбъект, ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьСтрануПроисхожденияДляНомераГТД", Новый Структура("НомерГТД", ВыбранноеЗначение));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, Неопределено);
	
КонецПроцедуры

#КонецОбласти // Конец Товары

#Область Штрихкоды

&НаКлиенте
Процедура ШтрихкодыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
	
		ТекущаяСтрокаТовары = Элементы.Товары.ТекущиеДанные;
		Если ТекущаяСтрокаТовары = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Введите товар, для которого указываете штрихкод'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		Если НоваяСтрока Тогда
			ТекущаяСтрокаШтрихкоды = Элементы.Штрихкоды.ТекущиеДанные;
			ТекущаяСтрокаШтрихкоды.КлючСвязи = Элементы.Товары.ТекущиеДанные.КодСтроки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодыШтрихкодПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Штрихкоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Штрихкод = СокрЛП(ТекущиеДанные.Штрихкод);
	
	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
	
	бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
		ТекущиеДанные,
		КонтекстЗаполненияДанныхТиповУпаковок);
		
	Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков
		И ТекущиеДанные.ТипУпаковки <> ЗначенияТиповУпаковок.Бутылка Тогда
		
		ТекущиеДанные.Штрихкод = "";
		ТекущиеДанные.ТипУпаковки = Неопределено;
		ТекущиеДанные.КартинкаТипаУпаковки = Неопределено;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Введите штрихкод марки, ввод штрихкодов коробок и паллет не поддерживается для этой операции'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец Штрихкоды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	КартинкиТиповУпаковок = бг_МаркируемаяПродукция.КартинкиТиповУпаковок();
	ЗначенияТиповУпаковок = бг_МаркируемаяПродукция.ЗначенияТиповУпаковок();
	ДлиныШтрихкодовМарок = бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок();
	
	МенеджерОпераций = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС;
	ОперацииИнвентаризацииПродукцииЕГАИС = Новый Структура;
	ОперацииИнвентаризацииПродукцииЕГАИС.Вставить("СписаниеНаРасходы", МенеджерОпераций.СписаниеНаРасходы);
	ОперацииИнвентаризацииПродукцииЕГАИС.Вставить("ОприходованиеИзлишков", МенеджерОпераций.ОприходованиеИзлишков);
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДанныхНаСервере()
	
	ШтрихкодыЗаполнитьДанныеТиповУпаковок();
	ТоварыПоШтрихкодамЗаполнитьДанныеТиповУпаковок();
	ЗаполнитьСлужебныеРеквизитыТабличнойЧасти();
	НоменклатураСервер.ЗаполнитьСтрануПроисхождения(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизиты();
	ПриПолученииДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.ОрганизацияЕГАИС = Справочники.КлассификаторОрганизацийЕГАИС.ОрганизацияЕГАИСПоОрганизацииИТорговомуОбъекту(
		Объект.Организация,
		Справочники.Склады.ПустаяСсылка(),
		Истина, // СоответствуетОрганизации
		Ложь);  // ТолькоСопоставленные
		
КонецПроцедуры

&НаСервере
Процедура ШтрихкодыЗаполнитьДанныеТиповУпаковок()

	КонтекстЗаполненияДанныхТиповУпаковок = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
	
	Для каждого СтрокаШтрихкоды Из Объект.Штрихкоды Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаШтрихкоды,
			КонтекстЗаполненияДанныхТиповУпаковок);
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ТоварыПоШтрихкодамЗаполнитьДанныеТиповУпаковок()
	
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкод = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"Штрихкод",
		"ТипУпаковки",
		"КартинкаТипаУпаковки");
		
	КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель = бг_МаркируемаяПродукцияКлиентСервер.КонтекстЗаполненияДанныхТиповУпаковок(
		ЭтаФорма,
		"ШтрихкодРодитель",
		"ТипУпаковкиРодителя",
		"КартинкаТипаУпаковкиРодителя");
	
	Для каждого СтрокаТоварыПоШтрихкодам Из ТоварыПоШтрихкодам Цикл
		
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаТоварыПоШтрихкодам,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкод);
			
		бг_МаркируемаяПродукцияКлиентСервер.ЗаполнитьДанныеТипаУпаковкиВСтрокеТаблицы(
			СтрокаТоварыПоШтрихкодам,
			КонтекстЗаполненияДанныхТиповУпаковокШтрихкодРодитель);
			
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличнойЧасти()
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ОбнулитьВидимостьЭлементовЗависящихОтОперации();
	
	Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.СписаниеНаРасходы Тогда
		УстановитьВидимостьЭлементовПоСписаниюНаРасходы();
	ИначеЕсли Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		УстановитьВидимостьЭлементовПоОприходованиюИзлишков();
	Иначе
		// NOP
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтаФорма);
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(
		ЭтаФорма,
		"ТоварыСтранаПроисхождения",
		"Объект.Товары.ВедетсяУчетПоГТД");
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьВидимостьЭлементовЗависящихОтОперации()
	
	// Шапка
	Элементы.Подразделение.Видимость = Ложь;
	Элементы.СтатьяРасходов.Видимость = Ложь;
	Элементы.СтатьяДоходов.Видимость = Ложь;
	Элементы.ПричинаСписания.Видимость = Ложь;
	
	// Товары
	Элементы.ТоварыСгенерироватьСерии.Видимость = Ложь;
	Элементы.ТоварыГруппаЗаполнитьМарки.Видимость = Ложь;
	
	Элементы.ТоварыАлкогольнаяПродукция.Видимость = Ложь;
	Элементы.ТоварыУпаковкаПаллета.Видимость = Ложь;
	Элементы.ТоварыЦена.Видимость = Ложь;
	Элементы.ТоварыСумма.Видимость = Ложь;
	Элементы.ТоварыНомерГТД.Видимость = Ложь;
	Элементы.ТоварыСтранаПроисхождения.Видимость = Ложь;
	Элементы.ТоварыГруппаДанныеПоСправке1.Видимость = Ложь;
	
	Элементы.ШтрихкодыШтрихкод.ПодсказкаВвода = "";
	
	Элементы.ГруппаТоварыПоШтрихкодам.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоСписаниюНаРасходы()
	
	// Шапка
	Элементы.Подразделение.Видимость = Истина;
	Элементы.СтатьяРасходов.Видимость = Истина;
	Элементы.ПричинаСписания.Видимость = Истина;
	
	// Товары
	Элементы.ГруппаТоварыПоШтрихкодам.Видимость = Истина;
	Элементы.ТоварыГруппаЗаполнитьМарки.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОприходованиюИзлишков()
	
	// Шапка
	Элементы.Подразделение.Видимость = Истина;
	Элементы.СтатьяДоходов.Видимость = Истина;
	
	// Товары
	Элементы.ТоварыСгенерироватьСерии.Видимость = Истина;
	
	Элементы.ТоварыАлкогольнаяПродукция.Видимость = Истина;
	Элементы.ТоварыУпаковкаПаллета.Видимость = Истина;
	Элементы.ТоварыЦена.Видимость = Истина;
	Элементы.ТоварыСумма.Видимость = Истина;
	Элементы.ТоварыНомерГТД.Видимость = Истина;
	Элементы.ТоварыСтранаПроисхождения.Видимость = Истина;
	Элементы.ТоварыГруппаДанныеПоСправке1.Видимость = Истина;
	
	Элементы.ШтрихкодыШтрихкод.ПодсказкаВвода = НСтр("ru='<введите штрихкод марки>'");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоШтрихкодамПоДаннымМарокНаСервере()

	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ТоварыПоШтрихкодамПоДаннымМарок = ДокументОбъект.ТоварыПоШтрихкодам();
	
	ТоварыПоШтрихкодам.Загрузить(ТоварыПоШтрихкодамПоДаннымМарок);
	
	ТоварыПоШтрихкодамЗаполнитьДанныеТиповУпаковок();
	
	ТоварыПоШтрихкодам.Сортировать("ТипУпаковкиРодителя, ШтрихкодРодитель, Номенклатура, Серия");
	
	Если Объект.Товары.Количество() > 0 Тогда
	
		РезультатПроверки = ДокументОбъект.ТоварыПоШтрихкодамСовпадают(
			ТоварыПоШтрихкодамПоДаннымМарок,
			Истина);
		
		Если Не РезультатПроверки.ТаблицыСовпадают Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				бг_МаркируемаяПродукция.ТекстОшибкиРасхожденийТоваровПоМаркамИВДокументе(),
				Объект.Ссылка);
			
			Для каждого ТекстОшибки Из РезультатПроверки.Ошибки Цикл
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПеренестиТоварыПоШтрихкодамПоДаннымМарокЗавершениеНаСервере()
	
	КлючевыеПоляТоваров = "Номенклатура, Серия";
	ВсеПоляТоваров = "Номенклатура, Серия, Количество";
	
	// Подготовливаем ТоварыПоШтрихкодам к сравнению.
	ТоварыПоШтрихкодамСгруппированные = ТоварыПоШтрихкодам.Выгрузить(, КлючевыеПоляТоваров);
	
	ТоварыПоШтрихкодамСгруппированные.Колонки.Добавить(
		"Количество",
		Метаданные.Документы.битИнвентаризацияПродукцииЕГАИС.ТабличныеЧасти.Товары.Реквизиты.Количество.Тип);
		
	ТоварыПоШтрихкодамСгруппированные.ЗаполнитьЗначения(1, "Количество");
	ТоварыПоШтрихкодамСгруппированные.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	Объект.Товары.Загрузить(ТоварыПоШтрихкодамСгруппированные);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВыборСтатьиРасходов()
	
	ТипЗначенияСтатьиРасходов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходов, "ТипЗначения");
	
	Если ТипЗначенияСтатьиРасходов <> Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия") Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Выберите статью расходов с типом аналитики расходов ""Подразделение"".'"));
		Объект.СтатьяРасходов = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйКодСтрокиТовары(Форма)
	
	МаксимальныйКодСтроки = 0;
	
	Для каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		Если СтрокаТовары.КодСтроки > МаксимальныйКодСтроки Тогда
			МаксимальныйКодСтроки = СтрокаТовары.КодСтроки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальныйКодСтроки + 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвязанныеСТоварамиСтрокиШтрихкодов(Форма, СтрокаТовары)
	
	ПараметрыПоиска = Новый Структура("КлючСвязи", СтрокаТовары.КодСтроки);
	Возврат Форма.Объект.Штрихкоды.НайтиСтроки(ПараметрыПоиска);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТовары(СтрокаТовары)

	СтрокаТовары.Сумма = СтрокаТовары.Цена * СтрокаТовары.Количество;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокШтрихкодов(КодСтроки)
	
	Элементы.Штрихкоды.ОтборСтрок = Неопределено;
	
	Элементы.Штрихкоды.ОтборСтрок = Новый ФиксированнаяСтруктура(
		Новый Структура("КлючСвязи", КодСтроки));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументПоШтрихкодам(Штрихкоды)
	
	Объект.Штрихкоды.Очистить();
	Объект.Товары.Очистить();
	
	Для каждого Штрихкод Из Штрихкоды Цикл
		НоваяСтрокаШтрихкоды = Объект.Штрихкоды.Добавить();
		НоваяСтрокаШтрихкоды.Штрихкод = Штрихкод;
	КонецЦикла;
	
	ШтрихкодыЗаполнитьДанныеТиповУпаковок();
	ЗаполнитьТоварыПоШтрихкодамПоДаннымМарокНаСервере();
	ПеренестиТоварыПоШтрихкодамПоДаннымМарокЗавершениеНаСервере();
	
КонецПроцедуры

#Область Серии

&НаСервере
Функция ВозможнаГенерацияСерий()
	
	ВозможнаГенерацияСерий = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена организация'"),, "Организация", "Объект");
		ВозможнаГенерацияСерий = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ОрганизацияЕГАИС) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена организация ЕГАИС'"),, "ОрганизацияЕГАИС", "Объект");
		ВозможнаГенерацияСерий = Ложь;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		
		ИндексСтрокиФормат =  Формат(Строка(Объект.Товары.Индекс(СтрокаТовары)), "ЧГ=0");
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не заполнена номенклатура'"),,
				"Товары[" + ИндексСтрокиФормат + "].Номенклатура",
				"Объект");
				
			ВозможнаГенерацияСерий = Ложь;
		КонецЕсли;
		
		Если Объект.Операция = ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.АлкогольнаяПродукция) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Не заполнена алкогольная продукция'"),,
					"Товары[" + ИндексСтрокиФормат + "].АлкогольнаяПродукция",
					"Объект");
					
				ВозможнаГенерацияСерий = Ложь;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.УпаковкаПаллета) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Не заполнена упаковка (паллета)'"),,
					"Товары[" + ИндексСтрокиФормат + "].УпаковкаПаллета",
					"Объект");
					
				ВозможнаГенерацияСерий = Ложь;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТовары.ДатаРозлива) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Не заполнена дата розлива'"),,
					"Товары[" + ИндексСтрокиФормат + "].ДатаРозлива",
					"Объект");
					
				ВозможнаГенерацияСерий = Ложь;
			КонецЕсли;
			
			Если СтрокаТовары.ВедетсяУчетПоГТД И Не ЗначениеЗаполнено(СтрокаТовары.НомерГТД) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru='Не заполнен номер ГТД'"),,
					"Товары[" + ИндексСтрокиФормат + "].НомерГТД",
					"Объект");
					
				ВозможнаГенерацияСерий = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если шапка заполнена некорректно, то данные проверки товаров могут быть выполнены неверно.
	Если Не ВозможнаГенерацияСерий Тогда
		Возврат ВозможнаГенерацияСерий;
	КонецЕсли;
	
	ТоварыДляГенерацииСерий = ТоварыДляГенерацииСерий();
	
	Если ТоварыДляГенерацииСерий.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не найдены товары для генерации серий.'"));
			
		ВозможнаГенерацияСерий = Ложь;
		
		Возврат ВозможнаГенерацияСерий;
	КонецЕсли;
	
	Для каждого ДанныеТовараДляГенерацииСерий Из ТоварыДляГенерацииСерий Цикл
	
		Если Не ДанныеТовараДляГенерацииСерий.АлкогольнаяПродукция Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Номенклатура ""%1"" не является алкогольной продукцией'"),
					ДанныеТовараДляГенерацииСерий.Номенклатура));
					
			ВозможнаГенерацияСерий = Ложь;
		КонецЕсли;
		
		Если Не ДанныеТовараДляГенерацииСерий.Маркируемый Тогда
		
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Номенклатура ""%1"" не является маркируемой алкогольной продукцией'"),
					ДанныеТовараДляГенерацииСерий.Номенклатура)); 
					
			ВозможнаГенерацияСерий = Ложь;
		КонецЕсли;
		
		Если Не ДанныеТовараДляГенерацииСерий.ИспользоватьДатуПроизводстваСерии Тогда
		
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='По номенклатуре ""%1"" не ведется учет дат производства серий'"),
					ДанныеТовараДляГенерацииСерий.Номенклатура));
					
			ВозможнаГенерацияСерий = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПроверкиДублей = Новый ТаблицаЗначений;
	ТаблицаПроверкиДублей.Колонки.Добавить("Номенклатура");
	ТаблицаПроверкиДублей.Колонки.Добавить("УпаковкаПаллета");
	ТаблицаПроверкиДублей.Колонки.Добавить("ДатаПроизводства");
	ТаблицаПроверкиДублей.Колонки.Добавить("ПроизводительЕГАИС");
	
	Для каждого ДанныеТовараДляГенерацииСерий Из ТоварыДляГенерацииСерий Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПроверкиДублей.Добавить(), ДанныеТовараДляГенерацииСерий);
	КонецЦикла;
	
	КоличествоСтрокДоСворачивания = ТаблицаПроверкиДублей.Количество();
	ТаблицаПроверкиДублей.Свернуть("Номенклатура, УпаковкаПаллета, ДатаПроизводства, ПроизводительЕГАИС");
	КоличествоСтрокПослеСворачивания = ТаблицаПроверкиДублей.Количество();
	
	Если КоличествоСтрокДоСворачивания > КоличествоСтрокПослеСворачивания Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Среди товаров присутствуют дубли строк по номенклатуре, паллетизации и дате розлива.'"));
			
		ВозможнаГенерацияСерий = Ложь;
	КонецЕсли;
	
	Возврат ВозможнаГенерацияСерий;
	
КонецФункции

&НаСервере
Функция ТоварыДляГенерацииСерий()
	
	ИсходныеДанныеТоваровДляГенерацииСерий = Объект.Товары.Выгрузить(, "АлкогольнаяПродукция, Номенклатура");
	ИсходныеДанныеТоваровДляГенерацииСерий.Свернуть("АлкогольнаяПродукция, Номенклатура");
	
	ДанныеТоваровДляГенерацииСерий = ДанныеТоваровДляГенерацииСерий(ИсходныеДанныеТоваровДляГенерацииСерий);
	
	ТоварыДляГенерацииСерий = Новый Массив;
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		
		ДанныеНоменклатурыДляГенерацииСерий = ДанныеТоваровДляГенерацииСерий.Найти(
			СтрокаТовары.Номенклатура,
			"Номенклатура");
			
		ДанныеТовараДляГенерацииСерий = НовыйДанныеТовараДляГенерацииСерий();
		
		ДанныеТовараДляГенерацииСерий.ИдентификаторСтрокиТовары = СтрокаТовары.ПолучитьИдентификатор();
		
		ЗаполнитьЗначенияСвойств(ДанныеТовараДляГенерацииСерий, ДанныеНоменклатурыДляГенерацииСерий);
		
		ДанныеТовараДляГенерацииСерий.ДокументВыпуска = Объект.Ссылка;
		ДанныеТовараДляГенерацииСерий.ДатаПроизводства = СтрокаТовары.ДатаРозлива;
		ДанныеТовараДляГенерацииСерий.УпаковкаПаллета = СтрокаТовары.УпаковкаПаллета;
		ДанныеТовараДляГенерацииСерий.ОрганизацияВладелец = Объект.Организация;
		ДанныеТовараДляГенерацииСерий.ОрганизацияЕГАИСВладелец = Объект.ОрганизацияЕГАИС;
		ДанныеТовараДляГенерацииСерий.НомерГТД = СтрокаТовары.НомерГТД;
		
		ТоварыДляГенерацииСерий.Добавить(ДанныеТовараДляГенерацииСерий);
		
	КонецЦикла;
	
	Возврат ТоварыДляГенерацииСерий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеТоваровДляГенерацииСерий(ИсходныеДанныеТоваровДляГенерацииСерий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходныеДанныеТоваровДляГенерацииСерий.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ИсходныеДанныеТоваровДляГенерацииСерий.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ИсходныеДанныеТоваровДляГенерацииСерий
	|ИЗ
	|	&ИсходныеДанныеТоваровДляГенерацииСерий КАК ИсходныеДанныеТоваровДляГенерацииСерий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры.ИспользоватьДатуПроизводстваСерии, ЛОЖЬ) КАК ИспользоватьДатуПроизводстваСерии,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемый,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель КАК ПроизводительЕГАИС,
	|	СправочникНоменклатура.ВестиУчетПоГТД КАК ВестиУчетПоГТД
	|ИЗ
	|	ИсходныеДанныеТоваровДляГенерацииСерий КАК ИсходныеДанныеТоваровДляГенерацииСерий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ИсходныеДанныеТоваровДляГенерацииСерий.Номенклатура = СправочникНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ИсходныеДанныеТоваровДляГенерацииСерий.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка";
	
	Запрос.УстановитьПараметр("ИсходныеДанныеТоваровДляГенерацииСерий", ИсходныеДанныеТоваровДляГенерацииСерий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйДанныеТовараДляГенерацииСерий()
	
	ДанныеТовараДляГенерацииСерий = Новый Структура;
	
	ДанныеТовараДляГенерацииСерий.Вставить("ДокументВыпуска", Неопределено);
	ДанныеТовараДляГенерацииСерий.Вставить("ИдентификаторСтрокиТовары", 0);
	ДанныеТовараДляГенерацииСерий.Вставить("ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("ИспользоватьДатуПроизводстваСерии", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("Маркируемый", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("ДатаПроизводства", Дата(1, 1, 1));
	ДанныеТовараДляГенерацииСерий.Вставить("УпаковкаПаллета", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("ВестиУчетПоГТД", Ложь);
	ДанныеТовараДляГенерацииСерий.Вставить("НомерГТД", Справочники.НомераГТД.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить("ОрганизацияВладелец", Справочники.Организации.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить(
		"ОрганизацияЕГАИСВладелец",
		Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	ДанныеТовараДляГенерацииСерий.Вставить(
		"ПроизводительЕГАИС",
		Справочники.КлассификаторОрганизацийЕГАИС.ПустаяСсылка());
	
	Возврат ДанныеТовараДляГенерацииСерий;
	
КонецФункции

&НаСервере
Процедура СгенерироватьСерииЗавершение() Экспорт
	
	ТоварыДляГенерацииСерий = ТоварыДляГенерацииСерий();
	
	СписокНоменклатуры = Новый Массив;
	Для каждого ДанныеТовараДляГенерацииСерий Из ТоварыДляГенерацииСерий Цикл
		СписокНоменклатуры.Добавить(ДанныеТовараДляГенерацииСерий.Номенклатура);
	КонецЦикла;
	
	ДанныеСуществующихСерий = ДанныеСуществующихСерий(СписокНоменклатуры);
	ДанныеСуществующихСерий.Индексы.Добавить("Номенклатура, ДатаПроизводства, ПроизводительЕГАИС");
	
	Для каждого ДанныеТовараДляГенерацииСерий Из ТоварыДляГенерацииСерий Цикл
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ДанныеТовараДляГенерацииСерий.ИдентификаторСтрокиТовары);
		СтрокаТовары.Серия = НайтиСоздатьСерию(ДанныеТовараДляГенерацииСерий, ДанныеСуществующихСерий);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСуществующихСерий(СписокНоменклатуры)
	
	ДокументыВыпуска = Новый Массив;
	ДокументыВыпуска.Добавить(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПодчиненныеДокументы = Документы.битИнвентаризацияПродукцииЕГАИС.ПодчиненныеДокументы(Объект.Ссылка);
		
		ДанныеПрочегоОприходования = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
			ПодчиненныеДокументы,
			"ПрочееОприходованиеТоваров");
			
		Если ДанныеПрочегоОприходования <> Неопределено Тогда
			ДокументыВыпуска.Добавить(ДанныеПрочегоОприходования.Документ);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.бг_Номенклатура КАК Номенклатура,
	|	СерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства,
	|	СерииНоменклатуры.ПроизводительЕГАИС КАК ПроизводительЕГАИС
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.бг_Номенклатура В(&СписокНоменклатуры)
	|	И НЕ СерииНоменклатуры.ПометкаУдаления
	|	И СерииНоменклатуры.бг_ДокументВыпуска В(&ДокументыВыпуска)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Серия,
	|	Номенклатура,
	|	ДатаПроизводства";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ДокументыВыпуска", ДокументыВыпуска);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСоздатьСерию(ДанныеДляСерии, ДанныеСуществующихСерий)
	
	СуществующаяСерия = НайтиСерию(ДанныеДляСерии, ДанныеСуществующихСерий);
	
	Если ЗначениеЗаполнено(СуществующаяСерия) Тогда
		Возврат СуществующаяСерия;
	Иначе
		Возврат СоздатьСерию(ДанныеДляСерии);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСерию(ДанныеДляСерии, ДанныеСуществующихСерий)
	
	ПараметрыПоиска = Новый Структура("Номенклатура, ДатаПроизводства, ПроизводительЕГАИС");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеДляСерии);
	
	НайденныеСтроки = ДанныеСуществующихСерий.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() Тогда
		Возврат НайденныеСтроки[0].Серия;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьСерию(ДанныеДляСерии)
	
	СерияОбъект = Справочники.СерииНоменклатуры.ПустойОбъект(ДанныеДляСерии.ВидНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(СерияОбъект, ДанныеДляСерии);
	
	СерияОбъект.бг_Номенклатура = ДанныеДляСерии.Номенклатура;
	СерияОбъект.бг_УпаковкаПаллета = ДанныеДляСерии.УпаковкаПаллета;
	СерияОбъект.бг_ОрганизацияВладелец = ДанныеДляСерии.ОрганизацияВладелец;
	СерияОбъект.бг_ОрганизацияЕГАИСВладелец = ДанныеДляСерии.ОрганизацияЕГАИСВладелец;
	
	Если Не (ЗначениеЗаполнено(СерияОбъект.бг_ДокументВыпуска)
		И ТипЗнч(СерияОбъект.бг_ДокументВыпуска) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")) Тогда
		
		СерияОбъект.бг_ДокументВыпуска = ДанныеДляСерии.ДокументВыпуска;
	КонецЕсли;
	
	Если ДанныеДляСерии.ИспользоватьСрокГодностиСерии Тогда
		СерияОбъект.ГоденДо = бг_Номенклатура.ГоденДо(ДанныеДляСерии.Номенклатура, ДанныеДляСерии.ДатаПроизводства);
	КонецЕсли;
	
	Если ДанныеДляСерии.ВестиУчетПоГТД Тогда
		СерияОбъект.бг_НомерГТД = ДанныеДляСерии.НомерГТД;
	КонецЕсли;
	
	бг_СерииНоменклатуры.УстановитьНовыйНомерСерии(СерияОбъект);
	
	СерияОбъект.Записать();
	
	Возврат СерияОбъект.Ссылка;
	
КонецФункции

#КонецОбласти // Конец Серии

#КонецОбласти
