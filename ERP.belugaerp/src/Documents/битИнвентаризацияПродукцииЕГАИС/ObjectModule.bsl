
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает таблицу, содержащую идентификаторы марок, их ГУИДы и товары.
// 
// Возвращаемое значение:
//   ТаблицаЗначений
//   Состав полей таблицы см. в бг_МаркируемаяПродукция.НовыйДанныеМарокПоШтрихкодам()
//
Функция ТоварыПоШтрихкодам() Экспорт
	
	Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.СписаниеНаРасходы Тогда
		
		ТоварыПоШтрихкодам = ТоварыПоШтрихкодамСписаниеНаРасходы();
		
	ИначеЕсли Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		ТоварыПоШтрихкодам = ТоварыПоШтрихкодамОприходованиеИзлишков();
		
	Иначе
		
		ТоварыПоШтрихкодам = Неопределено;
		
	КонецЕсли;
		
	Возврат ТоварыПоШтрихкодам;
	
КонецФункции

Функция ТоварыПоШтрихкодамСовпадают(ТоварыПоШтрихкодам, ФиксироватьОшибки) Экспорт
	
	// Сравнивается таблица товаров, полученная из состояний марок по данным регистров, с таблицей товаров,
	// указанных пользователем.
	КлючевыеПоляТоваров = "Номенклатура, Серия";
	ВсеПоляТоваров = "Номенклатура, Серия, Количество";
	
	// Подготовливаем ТоварыПоШтрихкодам к сравнению.
	ТоварыПоШтрихкодамСгруппированные = ТоварыПоШтрихкодам.Скопировать(, КлючевыеПоляТоваров);
	
	ТоварыПоШтрихкодамСгруппированные.Колонки.Добавить(
		"Количество",
		Метаданные().ТабличныеЧасти.Товары.Реквизиты.Количество.Тип);
		
	ТоварыПоШтрихкодамСгруппированные.ЗаполнитьЗначения(1, "Количество");
	ТоварыПоШтрихкодамСгруппированные.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	// Подготовливаем товары из внешней системы к сравнению.
	ТоварыПроверяемые = Товары.Выгрузить(, ВсеПоляТоваров);
	ТоварыПроверяемые.Свернуть(КлючевыеПоляТоваров, "Количество");
	
	// Сравниваем таблицы.
	Возврат бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ТоварыПоШтрихкодамСгруппированные,
		ТоварыПроверяемые,
		Истина,
		ФиксироватьОшибки);
		
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

&После("ОбработкаЗаполнения")
Процедура бг_ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

&После("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.СписаниеНаРасходы Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СтатьяДоходов"));
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.АлкогольнаяПродукция"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.КоличествоПоСправке1"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.Цена"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.Сумма"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.УпаковкаПаллета"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.НомерТТН"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.ДатаТТН"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Товары.ДатаРозлива"));
		
	ИначеЕсли Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("СтатьяРасходов"));
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПричинаСписания"));
		
	КонецЕсли;
	
КонецПроцедуры

&После("ПередЗаписью")
Процедура бг_ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОтветственногоПоУмолчанию();
	
	ПроверитьЗаполнениеБазовыхРеквизитов(РежимЗаписи, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПроверитьЗаполнениеРеквизитовПередПроведением(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
			ПроверитьЗаполнениеШтрихкодовОприходованиеИзлишков(Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПодготовитьТоварыПоШтрихкодам(Отказ);
		ПроверитьСоответствиеТоваровПоШтрихкодам(Отказ);
		
	Иначе
		
		ОткатитьПодчиненныеДокументы(РежимЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&После("ОбработкаПроведения")
Процедура бг_ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		// ОбщиеМеханизмы.АктуализацияСерийДокумента
		АктуализироватьСерии();
		// Конец ОбщиеМеханизмы.АктуализацияСерийДокумента
		
	КонецЕсли;
	
	СформироватьДвиженияПоМаркам();
	АктуализироватьПодчиненныеДокументы(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент()

	Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОперацияПоУмолчанию();
	ЗаполнитьОтветственногоПоУмолчанию();

КонецПроцедуры

Процедура ЗаполнитьОтветственногоПоУмолчанию()

	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеБазовыхРеквизитов(РежимЗаписи, Отказ)
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Или ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнена операция.'"), Ссылка, "Операция",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеРеквизитовПередПроведением(Отказ)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не заполнена организация.'"),
			Ссылка, "Организация",,
			Отказ);
		КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОрганизацияЕГАИС) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не заполнена организация ЕГАИС.'"),
			Ссылка,
			"ОрганизацияЕГАИС",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Не заполнен склад.'"),
			Ссылка,
			"Склад",,
			Отказ);
	КонецЕсли;
		
	Для каждого СтрокаТовары Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не заполнена номенклатура'"),
				Ссылка,
				"Товары[" + Формат(Строка(Товары.Индекс(СтрокаТовары)), "ЧГ=0") + "].Номенклатура",,
				Отказ);
				
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
		
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не заполнена серия'"),
				Ссылка,
				"Товары[" + Формат(Строка(Товары.Индекс(СтрокаТовары)), "ЧГ=0") + "].Серия",,
				Отказ);
				
		КонецЕсли;
	КонецЦикла;
	
	Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.СписаниеНаРасходы Тогда
		
		Если Штрихкоды.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не заполнены штрихкоды.'"),
				Ссылка,
				"Штрихкоды",,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не заполнена статья расходов.'"),
				Ссылка,
				"СтатьяРасходов",,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не заполнено подразделение.'"),
				Ссылка,
				"Подразделение",,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПричинаСписания) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru='Не заполнена причина списания.'"),
				Ссылка,
				"ПричинаСписания",,
				Отказ);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		Для каждого СтрокаШтрихкоды Из Штрихкоды Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаШтрихкоды.Штрихкод) Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(НСтр("ru='Не заполнен штрихкод в строке %1'"), СтрокаШтрихкоды.НомерСтроки),
					Ссылка,,
					Отказ);
					
			КонецЕсли;
			
			ТипШтрихкода = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(СтрокаШтрихкоды.Штрихкод);
			
			Если ТипШтрихкода <> Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Штрихкод %1 в строке %2 не является бутылкой'"),
						СтрокаШтрихкоды.Штрихкод,
						СтрокаШтрихкоды.НомерСтроки),
					Ссылка,,
					Отказ);
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоМаркам()
	
	Движения.бг_ДвижениеМарок.Записывать = Истина;
	
	СтатусыПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);
	
	Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.СписаниеНаРасходы Тогда
		СтатусМарки = СтатусыПоОперации.СтатусСписаниеНаРасходы;
	ИначеЕсли Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		СтатусМарки = СтатусыПоОперации.СтатусОприходованиеИзлишков;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТоварыПоШтрихкодам Из ДополнительныеСвойства.ТоварыПоШтрихкодам Цикл
		Запись = Движения.бг_ДвижениеМарок.Добавить();
		Запись.Период = Дата;
		Запись.ГУИДМарки = СтрокаТоварыПоШтрихкодам.ГУИДМарки;
		Запись.Серия = СтрокаТоварыПоШтрихкодам.Серия;
		Запись.КодУпаковки = СтрокаТоварыПоШтрихкодам.ШтрихкодРодитель;
		Запись.СтатусМарки = СтатусМарки;
	КонецЦикла;
	
КонецПроцедуры

#Область ПодчиненныеДокументы

Процедура ОткатитьПодчиненныеДокументы(РежимЗаписи)
	
	НеобходимоОткатитьПодчиненныеДокументы =
		ЗначениеЗаполнено(Ссылка)
		И (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			Или ПометкаУдаления);
	
	Если Не НеобходимоОткатитьПодчиненныеДокументы Тогда
		Возврат;
	КонецЕсли;
	
	ПоследовательностьОткатаДокументов = Новый Массив;
	
	Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.СписаниеНаРасходы Тогда
		ПоследовательностьОткатаДокументов.Добавить("АктСписанияЕГАИС");
		ПоследовательностьОткатаДокументов.Добавить("РасходныйОрдерНаТовары");
		ПоследовательностьОткатаДокументов.Добавить("ВнутреннееПотреблениеТоваров");
	ИначеЕсли Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		ПоследовательностьОткатаДокументов.Добавить("АктПостановкиНаБалансЕГАИС");
		ПоследовательностьОткатаДокументов.Добавить("ПриходныйОрдерНаТовары");
		ПоследовательностьОткатаДокументов.Добавить("ПрочееОприходованиеТоваров");
	КонецЕсли;
	
	ПодчиненныеДокументы = Документы.битИнвентаризацияПродукцииЕГАИС.ПодчиненныеДокументы(Ссылка);
	
	Для каждого ИмяДокумента Из ПоследовательностьОткатаДокументов Цикл
		
		Если ПометкаУдаления Тогда
			бг_РаботаСДокументами.ПометитьНаУдалениеПодчиненныеДокументы(ПодчиненныеДокументы, ИмяДокумента);
		Иначе
			бг_РаботаСДокументами.ОтменитьПроведениеПодчиненныхДокументов(ПодчиненныеДокументы, ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализироватьПодчиненныеДокументы(Отказ)
	
	ПодчиненныеДокументы = Документы.битИнвентаризацияПродукцииЕГАИС.ПодчиненныеДокументы(Ссылка);
	
	Если Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.СписаниеНаРасходы Тогда
		
		АктуализироватьПодчиненныеДокументыСписаниеНаРасходы(ПодчиненныеДокументы, Отказ);
		
	ИначеЕсли Операция = Перечисления.бг_ОперацииИнвентаризацииПродукцииЕГАИС.ОприходованиеИзлишков Тогда
		
		АктуализироватьПодчиненныеДокументыОприходованиеИзлишков(ПодчиненныеДокументы, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьПодчиненныеДокументыСписаниеНаРасходы(ПодчиненныеДокументы, Отказ)
	
	// Получаем данные по наличию созданных подчиненных документов, на основании данного.
	ДанныеВнутреннегоПотребления = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"ВнутреннееПотреблениеТоваров");
		
	ДанныеРасходногоОрдера = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"РасходныйОрдерНаТовары");
		
	ДанныеАктаСписанияЕГАИС = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"АктСписанияЕГАИС");
		
	// Получаем эталонные данные, которыми требуется заполнить подчиненные документы.
	ДанныеЗаполненияВнутреннегоПотребления = ДанныеЗаполненияВнутреннегоПотребления(ДанныеВнутреннегоПотребления);
	НужноАктуализироватьВнутреннееПотребление = НужноАктуализироватьВнутреннееПотребление(
		ДанныеВнутреннегоПотребления,
		ДанныеЗаполненияВнутреннегоПотребления);
		
	ДанныеЗаполненияРасходногоОрдера = ДанныеЗаполненияРасходногоОрдера(ДанныеВнутреннегоПотребления);
	НужноАктуализироватьРасходныйОрдер = НужноАктуализироватьРасходныйОрдер(
		ДанныеРасходногоОрдера,
		ДанныеЗаполненияРасходногоОрдера);
		
	ДанныеЗаполненияАктаСписанияЕГАИС = ДанныеЗаполненияАктаСписанияЕГАИС(ДанныеВнутреннегоПотребления);
	НужноАктуализироватьАктСписанияЕГАИС = НужноАктуализироватьАктСписанияЕГАИС(
		ДанныеАктаСписанияЕГАИС,
		ДанныеЗаполненияАктаСписанияЕГАИС,
		Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Актуализируем подчиненные документы при необходимости.
	Если НужноАктуализироватьВнутреннееПотребление Тогда
		
		// Если требуется актуализировать расходный ордер, значит с большой долей вероятности не получится
		// изменить и внутреннее потребление, не распроведя предварительно расходный ордер.
		Если НужноАктуализироватьРасходныйОрдер Тогда
			СнятьСПроведенияРасходныйОрдер(ДанныеРасходногоОрдера);
		КонецЕсли;
		
		АктуализироватьВнутреннееПотребление(ДанныеЗаполненияВнутреннегоПотребления, ДанныеВнутреннегоПотребления);
		
		ДанныеЗаполненияРасходногоОрдера.Шапка.Распоряжение = ДанныеВнутреннегоПотребления.Документ;
		ДанныеЗаполненияАктаСписанияЕГАИС.Шапка.ДокументОснование = ДанныеВнутреннегоПотребления.Документ;
	КонецЕсли;
	
	Если НужноАктуализироватьРасходныйОрдер Тогда
		бг_Склады.АктуализироватьРасходныйОрдер(ДанныеЗаполненияРасходногоОрдера, ДанныеРасходногоОрдера);
	КонецЕсли;
	
	Если НужноАктуализироватьАктСписанияЕГАИС Тогда
		АктуализироватьАктСписанияЕГАИС(ДанныеАктаСписанияЕГАИС, ДанныеЗаполненияАктаСписанияЕГАИС);
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьПодчиненныеДокументыОприходованиеИзлишков(ПодчиненныеДокументы, Отказ)
	
	// Получаем данные по наличию созданных подчиненных документов, на основании данного.
	ДанныеПрочегоОприходования = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"ПрочееОприходованиеТоваров");
		
	ДанныеПриходногоОрдера = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"ПриходныйОрдерНаТовары");
		
	ДанныеАктаПостановкиНаБалансЕГАИС = бг_РаботаСДокументами.ДанныеПодчиненногоДокумента(
		ПодчиненныеДокументы,
		"АктПостановкиНаБалансЕГАИС");
		
	// Получаем эталонные данные, которыми требуется заполнить подчиненные документы.
	ДанныеЗаполненияПрочегоОприходования = ДанныеЗаполненияПрочегоОприходования(ДанныеПрочегоОприходования);
	НужноАктуализироватьПрочееОприходование = НужноАктуализироватьПрочееОприходование(
		ДанныеПрочегоОприходования,
		ДанныеЗаполненияПрочегоОприходования);
		
	ДанныеЗаполненияПриходногоОрдера = ДанныеЗаполненияПриходногоОрдера(ДанныеПрочегоОприходования);
	НужноАктуализироватьПриходныйОрдер = НужноАктуализироватьПриходныйОрдер(
		ДанныеПриходногоОрдера,
		ДанныеЗаполненияПриходногоОрдера);
		
	ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС = ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС(ДанныеПрочегоОприходования);
	НужноАктуализироватьАктПостановкиНаБалансЕГАИС = НужноАктуализироватьАктПостановкиНаБалансЕГАИС(
		ДанныеАктаПостановкиНаБалансЕГАИС,
		ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС,
		Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	// Актуализируем подчиненные документы при необходимости.
	Если НужноАктуализироватьПрочееОприходование Тогда
		
		// Если требуется актуализировать приходный ордер, значит с большой долей вероятности не получится
		// изменить и прочее оприходование, не распроведя предварительно приходный ордер.
		Если НужноАктуализироватьПриходныйОрдер Тогда
			СнятьСПроведенияПриходныйОрдер(ДанныеПриходногоОрдера);
		КонецЕсли;
		
		АктуализироватьПрочееОприходование(ДанныеЗаполненияПрочегоОприходования, ДанныеПрочегоОприходования);
		
		ДанныеЗаполненияПриходногоОрдера.Шапка.Распоряжение = ДанныеПрочегоОприходования.Документ;
		ДанныеЗаполненияПриходногоОрдера.Шапка.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ДанныеПрочегоОприходования.Номер);
		ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС.Шапка.ДокументОснование = ДанныеПрочегоОприходования.Документ;
	КонецЕсли;
	
	Если НужноАктуализироватьПриходныйОрдер Тогда
		бг_Склады.АктуализироватьПриходныйОрдер(ДанныеЗаполненияПриходногоОрдера, ДанныеПриходногоОрдера);
	КонецЕсли;
	
	Если НужноАктуализироватьАктПостановкиНаБалансЕГАИС Тогда
		АктуализироватьАктПостановкиНаБалансЕГАИС(
			ДанныеАктаПостановкиНаБалансЕГАИС,
			ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС);
	КонецЕсли;
	
КонецПроцедуры

Функция КомментарийПодчиненныхДокументов()

	Возврат СтрШаблон(НСтр("ru='Создан автоматически на основании [%1]'"), Строка(Ссылка));

КонецФункции

#Область ПрочееОприходованиеТоваров

Функция ДанныеЗаполненияПрочегоОприходования(ДанныеПрочегоОприходования)
	
	// Шапка
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Организация", Организация);
	ДанныеЗаполненияШапки.Вставить("Подразделение", Подразделение);
	ДанныеЗаполненияШапки.Вставить("Склад", Склад);
	
	// Товары
	МетаданныеТоваровПрочегоОприходования = Метаданные.Документы.ПрочееОприходованиеТоваров.ТабличныеЧасти.Товары;
	
	ДанныеЗаполненияТоваров = Товары.Выгрузить(, "Номенклатура, Серия, Количество, Цена, Сумма, НомерГТД");
	ДанныеЗаполненияТоваров.Свернуть("Номенклатура, Серия, Цена, НомерГТД", "Количество, Сумма");
	
	ДанныеЗаполненияТоваров.Колонки.Добавить(
		"КоличествоУпаковок",
		МетаданныеТоваровПрочегоОприходования.Реквизиты.КоличествоУпаковок.Тип);
		
	ДанныеЗаполненияТоваров.Колонки.Добавить(
		"СтатьяРасходовДоходов",
		МетаданныеТоваровПрочегоОприходования.Реквизиты.СтатьяРасходовДоходов.Тип);

	Для каждого ДанныеЗаполненияТовара Из ДанныеЗаполненияТоваров Цикл
		ДанныеЗаполненияТовара.КоличествоУпаковок = ДанныеЗаполненияТовара.Количество;
		ДанныеЗаполненияТовара.СтатьяРасходовДоходов = СтатьяДоходов;
	КонецЦикла;
	
	// Результат
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеЗаполнения.Вставить("Товары", ДанныеЗаполненияТоваров);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция НужноАктуализироватьПрочееОприходование(ДанныеПрочегоОприходования, ДанныеЗаполненияПрочегоОприходования)
	
	Если ДанныеПрочегоОприходования = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеПрочегоОприходования.ПометкаУдаления Или Не ДанныеПрочегоОприходования.Проведен Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыПрочегоОприходования = РеквизитыПрочегоОприходования(ДанныеПрочегоОприходования.Документ);
	
	// Шапка
	Для каждого ДанныеЗаполняемогоАтрибута Из ДанныеЗаполненияПрочегоОприходования.Шапка Цикл
		
		ИмяРеквизита = ДанныеЗаполняемогоАтрибута.Ключ;
		ОжидаемоеЗначение = ДанныеЗаполняемогоАтрибута.Значение;
		Если РеквизитыПрочегоОприходования.Шапка[ИмяРеквизита] <> ОжидаемоеЗначение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Товары
	ТаблицаОтличий = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ДанныеЗаполненияПрочегоОприходования.Товары,
		РеквизитыПрочегоОприходования.Товары,
		Истина);
		
	Если ТаблицаОтличий.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РеквизитыПрочегоОприходования(ПрочееОприходование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПрочееОприходованиеТоваров.Организация КАК Организация,
	|	ПрочееОприходованиеТоваров.Подразделение КАК Подразделение,
	|	ПрочееОприходованиеТоваров.Склад КАК Склад
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходованиеТоваров
	|ГДЕ
	|	ПрочееОприходованиеТоваров.Ссылка = &ПрочееОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочееОприходованиеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ПрочееОприходованиеТоваровТовары.Серия КАК Серия,
	|	ПрочееОприходованиеТоваровТовары.СтатьяРасходовДоходов КАК СтатьяРасходовДоходов,
	|	ПрочееОприходованиеТоваровТовары.Количество КАК Количество,
	|	ПрочееОприходованиеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ПрочееОприходованиеТоваровТовары.Цена КАК Цена,
	|	ПрочееОприходованиеТоваровТовары.Сумма КАК Сумма,
	|	ПрочееОприходованиеТоваровТовары.НомерГТД КАК НомерГТД
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров.Товары КАК ПрочееОприходованиеТоваровТовары
	|ГДЕ
	|	ПрочееОприходованиеТоваровТовары.Ссылка = &ПрочееОприходование";
	
	Запрос.УстановитьПараметр("ПрочееОприходование", ПрочееОприходование);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыПрочегоОприходования = Новый Структура;
	РеквизитыПрочегоОприходования.Вставить("Шапка", РезультатыЗапроса[0].Выгрузить()[0]);
	РеквизитыПрочегоОприходования.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	Возврат РеквизитыПрочегоОприходования;
	
КонецФункции

Процедура АктуализироватьПрочееОприходование(ДанныеЗаполненияПрочегоОприходования, ДанныеПрочегоОприходования)
	
	Если ДанныеПрочегоОприходования = Неопределено Тогда
		ПрочееОприходованиеОбъект = Документы.ПрочееОприходованиеТоваров.СоздатьДокумент();
		ДанныеПрочегоОприходования = бг_РаботаСДокументами.НовыйДанныеПодчиненногоДокумента("ПрочееОприходованиеТоваров");
	Иначе
		ПрочееОприходованиеОбъект = ДанныеПрочегоОприходования.Документ.ПолучитьОбъект();
		ПрочееОприходованиеОбъект.Товары.Очистить();
		ПрочееОприходованиеОбъект.Серии.Очистить();
		ПрочееОприходованиеОбъект.ВидыЗапасов.Очистить();
		ПрочееОприходованиеОбъект.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
	
	ЗаполнитьШапкуПрочегоОприходования(ПрочееОприходованиеОбъект, ДанныеЗаполненияПрочегоОприходования.Шапка);
	ЗаполнитьТоварыПрочегоОприходования(ПрочееОприходованиеОбъект, ДанныеЗаполненияПрочегоОприходования.Товары);
	
	ПрочееОприходованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьЗначенияСвойств(ДанныеПрочегоОприходования, ПрочееОприходованиеОбъект);
	ДанныеПрочегоОприходования.Документ = ПрочееОприходованиеОбъект.Ссылка;
	ДанныеПрочегоОприходования.Номер = ПрочееОприходованиеОбъект.Номер;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПрочегоОприходования(ПрочееОприходованиеОбъект, ДанныеЗаполненияШапки)
	
	ПрочееОприходованиеОбъект.Заполнить(Неопределено);
	ПрочееОприходованиеОбъект.ПометкаУдаления = Ложь;
	ПрочееОприходованиеОбъект.бг_ИнвентаризацияПродукцииЕГАИС = Ссылка;
	
	// Заполняем реквизиты шапки, которые не являются определяющими.
	// При проведении не нужно изменять документ, если эти реквизиты в нем поменялись.
	ПрочееОприходованиеОбъект.Дата = Дата;
	ПрочееОприходованиеОбъект.Комментарий = КомментарийПодчиненныхДокументов();
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ПрочееОприходованиеОбъект.Ответственный = Ответственный;
	Иначе
		// Заполняется текущий пользователь при инициализации документа.
	КонецЕсли;
	
	ПрочееОприходованиеОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ПрочееОприходованиеОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеЗаСчетДоходов;
	
	// Заполняем реквизиты шапки, которые являются определяющими.
	// При проведении нужно изменять документ, если эти реквизиты в нем поменялись.
	Для каждого ДанныеЗаполняемогоАтрибута Из ДанныеЗаполненияШапки Цикл
		ПрочееОприходованиеОбъект[ДанныеЗаполняемогоАтрибута.Ключ] = ДанныеЗаполняемогоАтрибута.Значение;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПрочегоОприходования(ПрочееОприходованиеОбъект, ДанныеЗаполненияТоваров)
	
	ПрочееОприходованиеОбъект.Товары.Загрузить(ДанныеЗаполненияТоваров);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(
		ПрочееОприходованиеОбъект,
		Документы.ПрочееОприходованиеТоваров);
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ПрочееОприходованиеОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти // ПрочееОприходованиеТоваров

#Область ВнутреннееПотреблениеТоваров

Функция ДанныеЗаполненияВнутреннегоПотребления(ДанныеВнутреннегоПотребления)
	
	// Шапка
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Организация", Организация);
	ДанныеЗаполненияШапки.Вставить("Подразделение", Подразделение);
	ДанныеЗаполненияШапки.Вставить("Склад", Склад);
	
	// Товары
	МетаданныеТоваровВнутреннегоПотребления = Метаданные.Документы.ВнутреннееПотреблениеТоваров.ТабличныеЧасти.Товары;
	
	ДанныеЗаполненияТоваров = Товары.Выгрузить(, "Номенклатура, Серия, Количество");
	ДанныеЗаполненияТоваров.Свернуть("Номенклатура, Серия", "Количество");
	
	ДанныеЗаполненияТоваров.Колонки.Добавить(
		"КоличествоУпаковок",
		МетаданныеТоваровВнутреннегоПотребления.Реквизиты.КоличествоУпаковок.Тип);
		
	ДанныеЗаполненияТоваров.Колонки.Добавить(
		"СтатьяРасходов",
		МетаданныеТоваровВнутреннегоПотребления.Реквизиты.СтатьяРасходов.Тип);

	ДанныеЗаполненияТоваров.Колонки.Добавить(
		"АналитикаРасходов",
		МетаданныеТоваровВнутреннегоПотребления.Реквизиты.АналитикаРасходов.Тип);
	
	Для каждого ДанныеЗаполненияТовара Из ДанныеЗаполненияТоваров Цикл
		ДанныеЗаполненияТовара.КоличествоУпаковок = ДанныеЗаполненияТовара.Количество;
		ДанныеЗаполненияТовара.СтатьяРасходов = СтатьяРасходов;
		ДанныеЗаполненияТовара.АналитикаРасходов = Подразделение;
	КонецЦикла;
	
	// Результат
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеЗаполнения.Вставить("Товары", ДанныеЗаполненияТоваров);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция НужноАктуализироватьВнутреннееПотребление(ДанныеВнутреннегоПотребления, ДанныеЗаполненияВнутреннегоПотребления)
	
	Если ДанныеВнутреннегоПотребления = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеВнутреннегоПотребления.ПометкаУдаления Или Не ДанныеВнутреннегоПотребления.Проведен Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыВнутреннегоПотребления = РеквизитыВнутреннегоПотребления(ДанныеВнутреннегоПотребления.Документ);
	
	// Шапка
	Для каждого ДанныеЗаполняемогоАтрибута Из ДанныеЗаполненияВнутреннегоПотребления.Шапка Цикл
		
		ИмяРеквизита = ДанныеЗаполняемогоАтрибута.Ключ;
		ОжидаемоеЗначение = ДанныеЗаполняемогоАтрибута.Значение;
		Если РеквизитыВнутреннегоПотребления.Шапка[ИмяРеквизита] <> ОжидаемоеЗначение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Товары
	ТаблицаОтличий = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ДанныеЗаполненияВнутреннегоПотребления.Товары,
		РеквизитыВнутреннегоПотребления.Товары,
		Истина);
		
	Если ТаблицаОтличий.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция РеквизитыВнутреннегоПотребления(ВнутреннееПотребление)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваров.Организация КАК Организация,
	|	ВнутреннееПотреблениеТоваров.Подразделение КАК Подразделение,
	|	ВнутреннееПотреблениеТоваров.Склад КАК Склад
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров КАК ВнутреннееПотреблениеТоваров
	|ГДЕ
	|	ВнутреннееПотреблениеТоваров.Ссылка = &ВнутреннееПотребление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВнутреннееПотреблениеТоваровТовары.Номенклатура КАК Номенклатура,
	|	ВнутреннееПотреблениеТоваровТовары.Серия КАК Серия,
	|	ВнутреннееПотреблениеТоваровТовары.Количество КАК Количество,
	|	ВнутреннееПотреблениеТоваровТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВнутреннееПотреблениеТоваровТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ВнутреннееПотреблениеТоваровТовары.АналитикаРасходов КАК АналитикаРасходов
	|ИЗ
	|	Документ.ВнутреннееПотреблениеТоваров.Товары КАК ВнутреннееПотреблениеТоваровТовары
	|ГДЕ
	|	ВнутреннееПотреблениеТоваровТовары.Ссылка = &ВнутреннееПотребление";
	
	Запрос.УстановитьПараметр("ВнутреннееПотребление", ВнутреннееПотребление);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыВнутреннегоПотребления = Новый Структура;
	РеквизитыВнутреннегоПотребления.Вставить("Шапка", РезультатыЗапроса[0].Выгрузить()[0]);
	РеквизитыВнутреннегоПотребления.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	Возврат РеквизитыВнутреннегоПотребления;
	
КонецФункции

Процедура АктуализироватьВнутреннееПотребление(ДанныеЗаполненияВнутреннегоПотребления, ДанныеВнутреннегоПотребления)
	
	Если ДанныеВнутреннегоПотребления = Неопределено Тогда
		ВнутреннееПотреблениеОбъект = Документы.ВнутреннееПотреблениеТоваров.СоздатьДокумент();
		ДанныеВнутреннегоПотребления = бг_РаботаСДокументами.НовыйДанныеПодчиненногоДокумента("ВнутреннееПотреблениеТоваров");
	Иначе
		ВнутреннееПотреблениеОбъект = ДанныеВнутреннегоПотребления.Документ.ПолучитьОбъект();
		ВнутреннееПотреблениеОбъект.Товары.Очистить();
		ВнутреннееПотреблениеОбъект.ВидыЗапасов.Очистить();
		ВнутреннееПотреблениеОбъект.Серии.Очистить();
	КонецЕсли;
	
	ЗаполнитьШапкуВнутреннегоПотребления(ВнутреннееПотреблениеОбъект, ДанныеЗаполненияВнутреннегоПотребления.Шапка);
	ЗаполнитьТоварыВнутреннегоПотребления(ВнутреннееПотреблениеОбъект, ДанныеЗаполненияВнутреннегоПотребления.Товары);
	
	ВнутреннееПотреблениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьЗначенияСвойств(ДанныеВнутреннегоПотребления, ВнутреннееПотреблениеОбъект);
	ДанныеВнутреннегоПотребления.Документ = ВнутреннееПотреблениеОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЗаполнитьШапкуВнутреннегоПотребления(ВнутреннееПотреблениеОбъект, ДанныеЗаполненияШапки)
	
	ВнутреннееПотреблениеОбъект.Заполнить(Неопределено);
	ВнутреннееПотреблениеОбъект.ПометкаУдаления = Ложь;
	ВнутреннееПотреблениеОбъект.бг_ИнвентаризацияПродукцииЕГАИС = Ссылка;
	
	// Заполняем реквизиты шапки, которые не являются определяющими.
	// При проведении не нужно изменять документ, если эти реквизиты в нем поменялись.
	ВнутреннееПотреблениеОбъект.Дата = Дата;
	ВнутреннееПотреблениеОбъект.Комментарий = КомментарийПодчиненныхДокументов();
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ВнутреннееПотреблениеОбъект.Ответственный = Ответственный;
	Иначе
		// Заполняется текущий пользователь при инициализации документа.
	КонецЕсли;
	
	ВнутреннееПотреблениеОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	// Заполняем реквизиты шапки, которые являются определяющими.
	// При проведении нужно изменять документ, если эти реквизиты в нем поменялись.
	Для каждого ДанныеЗаполняемогоАтрибута Из ДанныеЗаполненияШапки Цикл
		ВнутреннееПотреблениеОбъект[ДанныеЗаполняемогоАтрибута.Ключ] = ДанныеЗаполняемогоАтрибута.Значение;
	КонецЦикла;
	
	ПараметрыЗаполнения = Документы.ВнутреннееПотреблениеТоваров.ПараметрыЗаполненияВидаДеятельностиНДС(
		ВнутреннееПотреблениеОбъект);
		
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ВнутреннееПотреблениеОбъект.ПотреблениеДляДеятельности, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыВнутреннегоПотребления(ВнутреннееПотреблениеОбъект, ДанныеЗаполненияТоваров)
	
	ВнутреннееПотреблениеОбъект.Товары.Загрузить(ДанныеЗаполненияТоваров);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(
		ВнутреннееПотреблениеОбъект,
		Документы.ВнутреннееПотреблениеТоваров);
		
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ВнутреннееПотреблениеОбъект, ПараметрыУказанияСерий);
	
	бг_УчетАкцизов.ЗаполнитьСуммуАкциза(ВнутреннееПотреблениеОбъект, ВнутреннееПотреблениеОбъект.Товары);
	
КонецПроцедуры

#КонецОбласти // ВнутреннееПотреблениеТоваров

#Область ПриходныйОрдерНаТовары

Функция ДанныеЗаполненияПриходногоОрдера(ДанныеПрочегоОприходования)
	
	ДанныеЗаполнения = бг_Склады.НовыйДанныеЗаполненияПриходногоОрдера();
	
	Если ДанныеПрочегоОприходования <> Неопределено Тогда
		ДанныеЗаполнения.Шапка.Распоряжение = ДанныеПрочегоОприходования.Документ;
		ДанныеЗаполнения.Шапка.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
			ДанныеПрочегоОприходования.Номер);
	КонецЕсли;
	
	ДанныеЗаполнения.Шапка.Дата = ТекущаяДатаСеанса();
	ДанныеЗаполнения.Шапка.ДатаПоступления = Дата(1, 1, 1);
	ДанныеЗаполнения.Шапка.Отправитель = Подразделение;
	ДанныеЗаполнения.Шапка.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	ДанныеЗаполнения.Шапка.Склад = Склад;
	ДанныеЗаполнения.Шапка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеЗаСчетДоходов;
	ДанныеЗаполнения.Шапка.ДатаВходящегоДокумента = Дата;
	ДанныеЗаполнения.Шапка.Комментарий = КомментарийПодчиненныхДокументов();
	
	Для каждого СтрокаТовары Из Товары Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Товары.Добавить(), СтрокаТовары);
	КонецЦикла;
	ДанныеЗаполнения.Товары.Свернуть("Номенклатура, Серия", "Количество");
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция НужноАктуализироватьПриходныйОрдер(ДанныеПриходногоОрдера, ДанныеЗаполненияПриходногоОрдера)
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Склад, Дата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат бг_Склады.НужноАктуализироватьПриходныйОрдер(
		ДанныеПриходногоОрдера,
		ДанныеЗаполненияПриходногоОрдера);

КонецФункции

Процедура СнятьСПроведенияПриходныйОрдер(ДанныеПриходногоОрдера)
	
	Если ДанныеПриходногоОрдера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеПриходногоОрдера.Проведен Тогда
		ПриходныйОрдерОбъект = ДанныеПриходногоОрдера.Документ.ПолучитьОбъект();
		ПриходныйОрдерОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПриходныйОрдерНаТовары

#Область РасходныйОрдерНаТовары

Функция ДанныеЗаполненияРасходногоОрдера(ДанныеВнутреннегоПотребления)
	
	ДанныеЗаполнения = бг_Склады.НовыйДанныеЗаполненияРасходногоОрдера();
	
	Если ДанныеВнутреннегоПотребления <> Неопределено Тогда
		ДанныеЗаполнения.Шапка.Распоряжение = ДанныеВнутреннегоПотребления.Документ;
	КонецЕсли;
	
	ДанныеЗаполнения.Шапка.Дата = ТекущаяДатаСеанса();
	ДанныеЗаполнения.Шапка.ДатаОтгрузки = Дата;
	ДанныеЗаполнения.Шапка.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	ДанныеЗаполнения.Шапка.Склад = Склад;
	ДанныеЗаполнения.Шапка.СкладскаяОперация = Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды;
	ДанныеЗаполнения.Шапка.Получатель = Подразделение;
	ДанныеЗаполнения.Шапка.Комментарий = КомментарийПодчиненныхДокументов();
	
	Для каждого СтрокаТовары Из Товары Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Товары.Добавить(), СтрокаТовары);
	КонецЦикла;
	ДанныеЗаполнения.Товары.Свернуть("Номенклатура, Серия", "Количество");
	
	Возврат ДанныеЗаполнения;

КонецФункции

Функция НужноАктуализироватьРасходныйОрдер(ДанныеРасходногоОрдера, ДанныеЗаполненияРасходногоОрдера)
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Склад, Дата) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат бг_Склады.НужноАктуализироватьРасходныйОрдер(
		ДанныеРасходногоОрдера,
		ДанныеЗаполненияРасходногоОрдера);

КонецФункции

Процедура СнятьСПроведенияРасходныйОрдер(ДанныеРасходногоОрдера)
	
	Если ДанныеРасходногоОрдера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеРасходногоОрдера.Проведен Тогда
		РасходныйОрдерОбъект = ДанныеРасходногоОрдера.Документ.ПолучитьОбъект();
		РасходныйОрдерОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РасходныйОрдерНаТовары

#Область АктПостановкиНаБалансЕГАИС

Функция ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС(ДанныеПрочегоОприходования)
	
	// Шапка
	ДанныеЗаполненияШапки = Новый Структура;
	
	Если ДанныеПрочегоОприходования <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ДокументОснование", ДанныеПрочегоОприходования.Документ);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ДокументОснование", Неопределено);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	// Товары
	МетаданныеТоваров = Метаданные.Документы.АктПостановкиНаБалансЕГАИС.ТабличныеЧасти.Товары.Реквизиты;
	
	ДанныеЗаполненияТоваров = Новый ТаблицаЗначений;
	ДанныеЗаполненияТоваров.Колонки.Добавить("АлкогольнаяПродукция", МетаданныеТоваров.АлкогольнаяПродукция.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("Номенклатура", МетаданныеТоваров.Номенклатура.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("Серия", МетаданныеТоваров.Серия.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("Количество", МетаданныеТоваров.Количество.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("КоличествоУпаковок", МетаданныеТоваров.КоличествоУпаковок.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("КоличествоПоСправке1", МетаданныеТоваров.КоличествоПоСправке1.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("НомерТТН", МетаданныеТоваров.НомерТТН.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("ДатаТТН", МетаданныеТоваров.ДатаТТН.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("НомерПодтвержденияЕГАИС", МетаданныеТоваров.НомерПодтвержденияЕГАИС.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("ДатаПодтвержденияЕГАИС", МетаданныеТоваров.ДатаПодтвержденияЕГАИС.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("ДатаРозлива", МетаданныеТоваров.ДатаРозлива.Тип);
	
	Для каждого СтрокаТовары Из Товары Цикл
		
		НоваяСтрока = ДанныеЗаполненияТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
		
		НоваяСтрока.КоличествоУпаковок = СтрокаТовары.Количество;
		
	КонецЦикла;
	
	// Результат
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеЗаполнения.Вставить("Товары", ДанныеЗаполненияТоваров);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция НужноАктуализироватьАктПостановкиНаБалансЕГАИС(ДанныеАктаПостановкиНаБалансЕГАИС,
	ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС, Отказ)
	
	Если ДанныеАктаПостановкиНаБалансЕГАИС = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеАктаПостановкиНаБалансЕГАИС.ПометкаУдаления Или Не ДанныеАктаПостановкиНаБалансЕГАИС.Проведен Тогда
		Возврат Истина;
	КонецЕсли;
	
	НужноАктуализироватьАктПостановкиНаБалансЕГАИС = Ложь;
	
	РеквизитыАктаПостановкиНаБалансЕГАИС = РеквизитыАктаПостановкиНаБалансЕГАИС(ДанныеАктаПостановкиНаБалансЕГАИС.Документ);
	
	// Шапка
	Для каждого ДанныеЗаполняемогоАтрибута Из ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС.Шапка Цикл
		
		ИмяРеквизита = ДанныеЗаполняемогоАтрибута.Ключ;
		ОжидаемоеЗначение = ДанныеЗаполняемогоАтрибута.Значение;
		Если РеквизитыАктаПостановкиНаБалансЕГАИС.Шапка[ИмяРеквизита] <> ОжидаемоеЗначение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Товары
	ТаблицаОтличий = ОбщегоНазначенияУТ.СравнитьТаблицыЗначений(
		ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС.Товары,
		РеквизитыАктаПостановкиНаБалансЕГАИС.Товары,
		Истина);
		
	Если ТаблицаОтличий.Количество() > 0 Тогда
		НужноАктуализироватьАктПостановкиНаБалансЕГАИС = Истина;
	КонецЕсли;
	
	Если НужноАктуализироватьАктПостановкиНаБалансЕГАИС Тогда
		
		ТекущийСтатусАктаПостановкиНаБалансЕГАИС = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(
			ДанныеАктаПостановкиНаБалансЕГАИС.Документ).Статус;
		
		Если Документы.АктПостановкиНаБалансЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ТекущийСтатусАктаПостановкиНаБалансЕГАИС) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Документ [%1] уже проведен в ЕГАИС, его обновление в автоматическом режиме недопустимо.'"),
					Неопределено));
					
		КонецЕсли;
	КонецЕсли;
	
	Возврат НужноАктуализироватьАктПостановкиНаБалансЕГАИС;
	
КонецФункции

Функция РеквизитыАктаПостановкиНаБалансЕГАИС(АктПостановкиНаБалансЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АктПостановкиНаБалансЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИС.Ссылка = &АктПостановкиНаБалансЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИСТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	АктПостановкиНаБалансЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	АктПостановкиНаБалансЕГАИСТовары.Серия КАК Серия,
	|	СУММА(АктПостановкиНаБалансЕГАИСТовары.Количество) КАК Количество,
	|	СУММА(АктПостановкиНаБалансЕГАИСТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(АктПостановкиНаБалансЕГАИСТовары.КоличествоПоСправке1) КАК КоличествоПоСправке1,
	|	АктПостановкиНаБалансЕГАИСТовары.НомерТТН КАК НомерТТН,
	|	АктПостановкиНаБалансЕГАИСТовары.ДатаТТН КАК ДатаТТН,
	|	АктПостановкиНаБалансЕГАИСТовары.НомерПодтвержденияЕГАИС КАК НомерПодтвержденияЕГАИС,
	|	АктПостановкиНаБалансЕГАИСТовары.ДатаПодтвержденияЕГАИС КАК ДатаПодтвержденияЕГАИС,
	|	АктПостановкиНаБалансЕГАИСТовары.ДатаРозлива КАК ДатаРозлива
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК АктПостановкиНаБалансЕГАИСТовары
	|ГДЕ
	|	АктПостановкиНаБалансЕГАИСТовары.Ссылка = &АктПостановкиНаБалансЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	АктПостановкиНаБалансЕГАИСТовары.Номенклатура,
	|	АктПостановкиНаБалансЕГАИСТовары.Серия,
	|	АктПостановкиНаБалансЕГАИСТовары.НомерТТН,
	|	АктПостановкиНаБалансЕГАИСТовары.ДатаТТН,
	|	АктПостановкиНаБалансЕГАИСТовары.НомерПодтвержденияЕГАИС,
	|	АктПостановкиНаБалансЕГАИСТовары.ДатаПодтвержденияЕГАИС,
	|	АктПостановкиНаБалансЕГАИСТовары.ДатаРозлива,
	|	АктПостановкиНаБалансЕГАИСТовары.АлкогольнаяПродукция";
	
	Запрос.УстановитьПараметр("АктПостановкиНаБалансЕГАИС", АктПостановкиНаБалансЕГАИС);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыАктаПостановкиНаБалансЕГАИС = Новый Структура;
	РеквизитыАктаПостановкиНаБалансЕГАИС.Вставить("Шапка", РезультатыЗапроса[0].Выгрузить()[0]);
	РеквизитыАктаПостановкиНаБалансЕГАИС.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	Возврат РеквизитыАктаПостановкиНаБалансЕГАИС;
	
КонецФункции

Процедура АктуализироватьАктПостановкиНаБалансЕГАИС(ДанныеАктаПостановкиНаБалансЕГАИС,
	ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС)
	
	Если ДанныеАктаПостановкиНаБалансЕГАИС = Неопределено Тогда
		АктПостановкиНаБалансЕГАИСОбъект = Документы.АктПостановкиНаБалансЕГАИС.СоздатьДокумент();
		ДанныеАктаПостановкиНаБалансЕГАИС = бг_РаботаСДокументами.НовыйДанныеПодчиненногоДокумента("АктПостановкиНаБалансЕГАИС");
	Иначе
		АктПостановкиНаБалансЕГАИСОбъект = ДанныеАктаПостановкиНаБалансЕГАИС.Документ.ПолучитьОбъект();
		АктПостановкиНаБалансЕГАИСОбъект.Товары.Очистить();
		АктПостановкиНаБалансЕГАИСОбъект.АкцизныеМарки.Очистить();
	КонецЕсли;
	
	АктПостановкиНаБалансЕГАИСОбъект.ПометкаУдаления = Ложь;
	АктПостановкиНаБалансЕГАИСОбъект.Дата = Дата;
	АктПостановкиНаБалансЕГАИСОбъект.Комментарий = КомментарийПодчиненныхДокументов();
	
	АктПостановкиНаБалансЕГАИСОбъект.Заполнить(ДанныеЗаполненияАктаПостановкиНаБалансЕГАИС.Шапка.ДокументОснование);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
		АктПостановкиНаБалансЕГАИСОбъект,
		Документы.АктПостановкиНаБалансЕГАИС);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(АктПостановкиНаБалансЕГАИСОбъект, ПараметрыУказанияСерий);
	
	АктПостановкиНаБалансЕГАИСОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьЗначенияСвойств(ДанныеАктаПостановкиНаБалансЕГАИС, АктПостановкиНаБалансЕГАИСОбъект);
	ДанныеАктаПостановкиНаБалансЕГАИС.Документ = АктПостановкиНаБалансЕГАИСОбъект.Ссылка;
	
КонецПроцедуры

#КонецОбласти // АктПостановкиНаБалансЕГАИС

#Область АктСписанияЕГАИС

Функция ДанныеЗаполненияАктаСписанияЕГАИС(ДанныеВнутреннегоПотребления)
	
	// Шапка
	ДанныеЗаполненияШапки = Новый Структура;
	
	Если ДанныеВнутреннегоПотребления <> Неопределено Тогда
		ДанныеЗаполненияШапки.Вставить("ДокументОснование", ДанныеВнутреннегоПотребления.Документ);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ДокументОснование", Неопределено);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	ДанныеЗаполненияШапки.Вставить("ПричинаСписания", ПричинаСписания);
	
	// Товары
	ДанныеЗаполненияТоваров = Товары.Выгрузить(, "Номенклатура, Серия, Количество");
	ДанныеЗаполненияТоваров.Свернуть("Номенклатура, Серия", "Количество");
	
	// Результат
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеЗаполнения.Вставить("Товары", ДанныеЗаполненияТоваров);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция НужноАктуализироватьАктСписанияЕГАИС(ДанныеАктаСписанияЕГАИС, ДанныеЗаполненияАктаСписанияЕГАИС, Отказ)
	
	Если ДанныеАктаСписанияЕГАИС = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеАктаСписанияЕГАИС.ПометкаУдаления Или Не ДанныеАктаСписанияЕГАИС.Проведен Тогда
		Возврат Истина;
	КонецЕсли;
	
	НужноАктуализироватьАктСписанияЕГАИС = Ложь;
	
	РеквизитыАктаСписанияЕГАИС = РеквизитыАктаСписанияЕГАИС(ДанныеАктаСписанияЕГАИС.Документ);
	
	// Шапка
	Для каждого ДанныеЗаполняемогоАтрибута Из ДанныеЗаполненияАктаСписанияЕГАИС.Шапка Цикл
		
		ИмяРеквизита = ДанныеЗаполняемогоАтрибута.Ключ;
		ОжидаемоеЗначение = ДанныеЗаполняемогоАтрибута.Значение;
		Если РеквизитыАктаСписанияЕГАИС.Шапка[ИмяРеквизита] <> ОжидаемоеЗначение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Товары
	РезультатСравненияТаблиц = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ДанныеЗаполненияАктаСписанияЕГАИС.Товары,
		РеквизитыАктаСписанияЕГАИС.Товары,
		Истина);
		
	Если Не РезультатСравненияТаблиц.ТаблицыСовпадают Тогда
		НужноАктуализироватьАктСписанияЕГАИС = Истина;
	КонецЕсли;
	
	Если НужноАктуализироватьАктСписанияЕГАИС Тогда
		
		ТекущийСтатусАктаСписанияЕГАИС = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(
			ДанныеАктаСписанияЕГАИС.Документ).Статус;
		
		Если Документы.АктСписанияЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ТекущийСтатусАктаСписанияЕГАИС) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Документ [%1] уже проведен в ЕГАИС, его обновление в автоматическом режиме недопустимо.'"),
					Неопределено));
					
		КонецЕсли;
	КонецЕсли;
	
	Возврат НужноАктуализироватьАктСписанияЕГАИС;
	
КонецФункции

Функция РеквизитыАктаСписанияЕГАИС(АктСписанияЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктСписанияЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АктСписанияЕГАИС.ПричинаСписания КАК ПричинаСписания,
	|	АктСписанияЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
	|ГДЕ
	|	АктСписанияЕГАИС.Ссылка = &АктСписанияЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктСписанияЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	АктСписанияЕГАИСТовары.Серия КАК Серия,
	|	СУММА(АктСписанияЕГАИСТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.АктСписанияЕГАИС.Товары КАК АктСписанияЕГАИСТовары
	|ГДЕ
	|	АктСписанияЕГАИСТовары.Ссылка = &АктСписанияЕГАИС
	|
	|СГРУППИРОВАТЬ ПО
	|	АктСписанияЕГАИСТовары.Номенклатура,
	|	АктСписанияЕГАИСТовары.Серия";
	
	Запрос.УстановитьПараметр("АктСписанияЕГАИС", АктСписанияЕГАИС);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыАктаСписанияЕГАИС = Новый Структура;
	РеквизитыАктаСписанияЕГАИС.Вставить("Шапка", РезультатыЗапроса[0].Выгрузить()[0]);
	РеквизитыАктаСписанияЕГАИС.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	Возврат РеквизитыАктаСписанияЕГАИС;
	
КонецФункции

Процедура АктуализироватьАктСписанияЕГАИС(ДанныеАктаСписанияЕГАИС, ДанныеЗаполненияАктаСписанияЕГАИС)
	
	Если ДанныеАктаСписанияЕГАИС = Неопределено Тогда
		АктСписанияЕГАИСОбъект = Документы.АктСписанияЕГАИС.СоздатьДокумент();
		ДанныеАктаСписанияЕГАИС = бг_РаботаСДокументами.НовыйДанныеПодчиненногоДокумента("АктСписанияЕГАИС");
	Иначе
		АктСписанияЕГАИСОбъект = ДанныеАктаСписанияЕГАИС.Документ.ПолучитьОбъект();
		АктСписанияЕГАИСОбъект.Товары.Очистить();
		АктСписанияЕГАИСОбъект.АкцизныеМарки.Очистить();
	КонецЕсли;
	
	АктСписанияЕГАИСОбъект.ПометкаУдаления = Ложь;
	АктСписанияЕГАИСОбъект.Дата = Дата;
	АктСписанияЕГАИСОбъект.Комментарий = КомментарийПодчиненныхДокументов();
	
	АктСписанияЕГАИСОбъект.Заполнить(ДанныеЗаполненияАктаСписанияЕГАИС.Шапка.ДокументОснование);
	
	// Заполняем реквизиты шапки, которые являются определяющими.
	// При проведении нужно изменять документ, если эти реквизиты в нем поменялись.
	Для каждого ДанныеЗаполняемогоАтрибута Из ДанныеЗаполненияАктаСписанияЕГАИС.Шапка Цикл
		АктСписанияЕГАИСОбъект[ДанныеЗаполняемогоАтрибута.Ключ] = ДанныеЗаполняемогоАтрибута.Значение;
	КонецЦикла;
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(
		АктСписанияЕГАИСОбъект,
		Документы.АктСписанияЕГАИС);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(АктСписанияЕГАИСОбъект, ПараметрыУказанияСерий);
	
	АктСписанияЕГАИСОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьЗначенияСвойств(ДанныеАктаСписанияЕГАИС, АктСписанияЕГАИСОбъект);
	ДанныеАктаСписанияЕГАИС.Документ = АктСписанияЕГАИСОбъект.Ссылка;
	
КонецПроцедуры

#КонецОбласти // АктСписанияЕГАИС

#КонецОбласти // Конец ПодчиненныеДокументы

#Область Штрихкоды

Процедура ПодготовитьТоварыПоШтрихкодам(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ТоварыПоШтрихкодам", ТоварыПоШтрихкодам());
	
КонецПроцедуры

Процедура ПроверитьСоответствиеТоваровПоШтрихкодам(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ТоварыПоШтрихкодамСовпадают(ДополнительныеСвойства.ТоварыПоШтрихкодам, Истина);
	
	Если Не РезультатПроверки.ТаблицыСовпадают Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			бг_МаркируемаяПродукция.ТекстОшибкиРасхожденийТоваровПоМаркамИВДокументе(),
			Ссылка,,,
			Отказ);
			
		Для каждого ТекстОшибки Из РезультатПроверки.Ошибки Цикл
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеШтрихкодовОприходованиеИзлишков(Отказ)
	
	// Проверка итогов товаров и штрихкодов
	Если Товары.Итог("Количество") <> Штрихкоды.Количество() Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru='Количество товаров не совпадает с количеством штрихкодов.'"),
			Ссылка,,,
			Отказ);
		
	КонецЕсли;
	
	// Проверка соответствия количества штрихкодов количеству в товарах
	Для каждого СтрокаТовары Из Товары Цикл
	
		ШтрихкодыТовара = ШтрихкодыТовара(СтрокаТовары);
		
		Если СтрокаТовары.Количество <> ШтрихкодыТовара.Количество() Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru='Количество штрихкодов (%1) по товару ""%2"" не совпадает с количеством товара (%3).'"),
					ШтрихкодыТовара.Количество(),
					СтрокаТовары.Номенклатура,
					СтрокаТовары.Количество),
				Ссылка,
				"Товары[" + Формат(Строка(Товары.Индекс(СтрокаТовары)), "ЧГ=0") + "].Количество");
			
		КонецЕсли;
	КонецЦикла;
	
	// Проверка дублей штрихкодов
	СвернутыеШтрихкоды = Штрихкоды.Выгрузить();
	КоличествоСтрокДоСворачивания = Штрихкоды.Количество();
	СвернутыеШтрихкоды.Свернуть("Штрихкод");
	КоличествоСтрокПослеСворачивания = СвернутыеШтрихкоды.Количество();
	
	Если КоличествоСтрокДоСворачивания > КоличествоСтрокПослеСворачивания Тогда
		
		Для каждого СтрокаСвернутыеШтрихкоды Из СвернутыеШтрихкоды Цикл
			
			ПараметрыПоиска = Новый Структура("Штрихкод", СтрокаСвернутыеШтрихкоды.Штрихкод);
			НайденныеСтроки = Штрихкоды.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(
						НСтр("ru='Обнаружены дубли по штрихкоду ""%1""'"),
						СтрокаСвернутыеШтрихкоды.Штрихкод),
					Ссылка);
					
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ШтрихкодыТовара(СтрокаТовары)
	
	ПараметрыПоиска = Новый Структура("КлючСвязи", СтрокаТовары.КодСтроки);
	Возврат Штрихкоды.НайтиСтроки(ПараметрыПоиска);
	
КонецФункции

Функция ТоварыПоШтрихкодамСписаниеНаРасходы()
	
	ПроверяемыеШтрихкоды = Штрихкоды.Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	// Список статусов марок, анализируемых при получении доступных марок для отгрузки.
	СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные().Имя);
	СтатусыКСписанию = СтатусыМарокПоОперации.СтатусыКСписанию;
	
	ДатаПолученияШтрихкодов = бг_МаркируемаяПродукция.ДатаПолученияШтрихкодов(ЭтотОбъект);
	
	// Разузловываем штрихкоды коробок и паллет, получаем таблицу товаров по штрихкодам марок (детальные записи).
	ТоварыПоШтрихкодам = бг_МаркируемаяПродукция.ДанныеМарокПоШтрихкодам(
		ПроверяемыеШтрихкоды,
		ОрганизацияЕГАИС,
		СтатусыКСписанию,
		ДатаПолученияШтрихкодов);
		
	Возврат ТоварыПоШтрихкодам;
	
КонецФункции

Функция ТоварыПоШтрихкодамОприходованиеИзлишков()
	
	// Подготавливаем введенные пользователем штрихкоды
	ТоварыПоШтрихкодам = бг_МаркируемаяПродукция.НовыйДанныеМарокПоШтрихкодам();
	
	Для каждого СтрокаТовары Из Товары Цикл
		
		ШтрихкодыТовара = ШтрихкодыТовара(СтрокаТовары);
		
		Для каждого СтрокаШтрихкодТовара Из ШтрихкодыТовара Цикл
			
			НоваяСтрока = ТоварыПоШтрихкодам.Добавить();
			
			НоваяСтрока.Номенклатура = СтрокаТовары.Номенклатура;
			НоваяСтрока.Серия = СтрокаТовары.Серия;
			НоваяСтрока.Штрихкод = СтрокаШтрихкодТовара.Штрихкод;
			НоваяСтрока.Организация = Организация;
			
		КонецЦикла;
	КонецЦикла;
	
	// Сопоставляем введенные пользователем штрихкоды с идентификаторами марок в регистре
	ТоварыПоШтрихкодам.Индексы.Добавить("Штрихкод");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаполняемыеШтрихкоды.Штрихкод КАК ИдентификаторМарки,
	|	ЗаполняемыеШтрихкоды.Организация КАК Организация
	|ПОМЕСТИТЬ ЗаполняемыеШтрихкоды
	|ИЗ
	|	&ЗаполняемыеШтрихкоды КАК ЗаполняемыеШтрихкоды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторМарки,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаполняемыеШтрихкоды.ИдентификаторМарки КАК ИдентификаторМарки,
	|	бг_ИдентификаторыМарок.ГУИДМарки КАК ГУИДМарки
	|ИЗ
	|	ЗаполняемыеШтрихкоды КАК ЗаполняемыеШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|		ПО ЗаполняемыеШтрихкоды.ИдентификаторМарки = бг_ИдентификаторыМарок.ИдентификаторМарки
	|			И ЗаполняемыеШтрихкоды.Организация = бг_ИдентификаторыМарок.Организация";
	
	Запрос.УстановитьПараметр("ЗаполняемыеШтрихкоды", ТоварыПоШтрихкодам);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ИдентификаторыМарок = РезультатЗапроса.Выгрузить();
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ДлиныШтрихкодовМарок = бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок();
	
	Для каждого ДанныеИдентификатораМарки Из ИдентификаторыМарок Цикл
		
		НайденныеСтроки = ТоварыПоШтрихкодам.НайтиСтроки(
			Новый Структура(
				"Штрихкод",
				ДанныеИдентификатораМарки.ИдентификаторМарки));
				
		Если Не ЗначениеЗаполнено(ДанныеИдентификатораМарки.ГУИДМарки) Тогда
			
			// Создаем отсутствующие ГУИДы марок при необходимости.
			ДанныеИдентификатораМарки.ГУИДМарки = Новый УникальныйИдентификатор;
			
			КороткаяМарка = Лев(ДанныеИдентификатораМарки.ИдентификаторМарки, ДлиныШтрихкодовМарок.КороткаяМарка);
			КороткаяМаркаЧисло = ОписаниеТипаЧисло.ПривестиЗначение(КороткаяМарка);
			
			НаборЗаписей = РегистрыСведений.бг_ИдентификаторыМарок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ГУИДМарки.Значение = ДанныеИдентификатораМарки.ГУИДМарки;
			НаборЗаписей.Отбор.ГУИДМарки.Использование = Истина;
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.ГУИДМарки = ДанныеИдентификатораМарки.ГУИДМарки;
			Запись.ИдентификаторМарки = ДанныеИдентификатораМарки.ИдентификаторМарки;
			Запись.Организация = Организация;
			Запись.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
			Запись.НомерМарки = КороткаяМаркаЧисло;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		НайденныеСтроки[0].ГУИДМарки = ДанныеИдентификатораМарки.ГУИДМарки;
	КонецЦикла;
	
	Возврат ТоварыПоШтрихкодам;
	
КонецФункции

#КонецОбласти // Конец Штрихкоды

#Область АктуализацияСерий

// ОбщиеМеханизмы.АктуализацияСерийДокумента
Процедура АктуализироватьСерии()
	
	КлючевыеПоля = "Серия, АлкогольнаяПродукция, Номенклатура, ДатаПроизводства, УпаковкаПаллета, НомерГТД";
	
	СерииДокумента = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		Товары,,
		КлючевыеПоля,,
		Новый Структура("ДатаРозлива", "ДатаПроизводства"));
		
	СерииДокумента.Свернуть(КлючевыеПоля);
	
	СерииДокумента.Колонки.Добавить(
		"ОрганизацияВладелец",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	СерииДокумента.Колонки.Добавить(
		"ОрганизацияЕГАИСВладелец",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
		
	СерииДокумента.ЗаполнитьЗначения(Организация, "ОрганизацияВладелец");
	СерииДокумента.ЗаполнитьЗначения(ОрганизацияЕГАИС, "ОрганизацияЕГАИСВладелец");
	
	СерииКАктуализации = СерииКАктуализации(СерииДокумента);
	
	Для каждого ДанныеСерииКАктуализации Из СерииКАктуализации Цикл
		АктуализироватьСерию(ДанныеСерииКАктуализации);
	КонецЦикла;
	
КонецПроцедуры

Функция СерииКАктуализации(СерииДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	СерииДокумента.ДатаПроизводства КАК ДатаПроизводства,
	|	СерииДокумента.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СерииДокумента.ОрганизацияВладелец КАК ОрганизацияВладелец,
	|	СерииДокумента.ОрганизацияЕГАИСВладелец КАК ОрганизацияЕГАИСВладелец,
	|	СерииДокумента.НомерГТД КАК НомерГТД
	|ПОМЕСТИТЬ СерииДокумента
	|ИЗ
	|	&СерииДокумента КАК СерииДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия,
	|	АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СерииДокумента.Серия КАК Серия,
	|	СерииДокумента.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры.ИспользоватьДатуПроизводстваСерии, ЛОЖЬ) КАК ИспользоватьДатуПроизводстваСерии,
	|	ЕСТЬNULL(СправочникНоменклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
	|	СерииДокумента.ДатаПроизводства КАК ДатаПроизводства,
	|	СерииДокумента.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СерииДокумента.ОрганизацияВладелец КАК ОрганизацияВладелец,
	|	СерииДокумента.ОрганизацияЕГАИСВладелец КАК ОрганизацияЕГАИСВладелец,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Производитель КАК ПроизводительЕГАИС,
	|	СправочникНоменклатура.ВестиУчетПоГТД КАК ВестиУчетПоГТД,
	|	СерииДокумента.НомерГТД КАК НомерГТД
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииДокумента КАК СерииДокумента
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|			ПО (КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка = СерииДокумента.АлкогольнаяПродукция)
	|		ПО (СерииДокумента.Серия = СправочникСерииНоменклатуры.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СерииДокумента.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	(СерииДокумента.Номенклатура <> СправочникСерииНоменклатуры.бг_Номенклатура
	|			ИЛИ СправочникНоменклатура.ВидНоменклатуры.ИспользоватьДатуПроизводстваСерии
	|				И СерииДокумента.ДатаПроизводства <> СправочникСерииНоменклатуры.ДатаПроизводства
	|			ИЛИ СерииДокумента.УпаковкаПаллета <> СправочникСерииНоменклатуры.бг_УпаковкаПаллета
	|			ИЛИ СерииДокумента.ОрганизацияВладелец <> СправочникСерииНоменклатуры.бг_ОрганизацияВладелец
	|			ИЛИ СерииДокумента.ОрганизацияЕГАИСВладелец <> СправочникСерииНоменклатуры.бг_ОрганизацияЕГАИСВладелец
	|			ИЛИ СправочникНоменклатура.ВестиУчетПоГТД
	|				И СерииДокумента.НомерГТД <> СправочникСерииНоменклатуры.бг_НомерГТД
	|			ИЛИ КлассификаторАлкогольнойПродукцииЕГАИС.Производитель <> СправочникСерииНоменклатуры.ПроизводительЕГАИС)";
	
	Запрос.УстановитьПараметр("СерииДокумента", СерииДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Процедура АктуализироватьСерию(ДанныеСерииКАктуализации)
	
	СерияОбъект = ДанныеСерииКАктуализации.Серия.ПолучитьОбъект();
	
	СерияОбъект.бг_Номенклатура = ДанныеСерииКАктуализации.Номенклатура;
	СерияОбъект.бг_УпаковкаПаллета = ДанныеСерииКАктуализации.УпаковкаПаллета;
	СерияОбъект.бг_ОрганизацияВладелец = ДанныеСерииКАктуализации.ОрганизацияВладелец;
	СерияОбъект.бг_ОрганизацияЕГАИСВладелец = ДанныеСерииКАктуализации.ОрганизацияЕГАИСВладелец;
	
	Если ДанныеСерииКАктуализации.ИспользоватьДатуПроизводстваСерии Тогда
		
		ЗаполнитьЗначенияСвойств(СерияОбъект, ДанныеСерииКАктуализации);
		
		Если ДанныеСерииКАктуализации.ИспользоватьСрокГодностиСерии Тогда
			
			СерияОбъект.ГоденДо = бг_Номенклатура.ГоденДо(
				ДанныеСерииКАктуализации.Номенклатура,
				ДанныеСерииКАктуализации.ДатаПроизводства);
		КонецЕсли;
			
		Если ДанныеСерииКАктуализации.ВестиУчетПоГТД Тогда
			СерияОбъект.бг_НомерГТД = ДанныеСерииКАктуализации.НомерГТД;
		КонецЕсли;
		
	КонецЕсли;
		
	СерияОбъект.Записать();
	
КонецПроцедуры
// Конец ОбщиеМеханизмы.АктуализацияСерийДокумента

#КонецОбласти // Конец АктуализацияСерий

#КонецОбласти

#КонецЕсли
