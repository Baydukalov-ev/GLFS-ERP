#Область ПрограммныйИнтерфейс

// Формирует в переданном менеджере временных таблиц временную таблицу ВТНоменклатура, 
//  содеращую данные по номенкатуре, участвующей в обмене с SAP.
//
//  Параметры:
//   МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджере временных таблиц, 
//                             в которром будет сформирована временная таблица с данными по номенклатуре. 
//   ДополнительныеПараметры - Структура - Дополнительные параметры запроса для формирования таблицы
//     Ключи: 
//      * КодыНоменклатурыКонтрагента - Массив - Список кодов SAP номенклатуры, по которым формируются данные в ВТНоменклатура,
//                                               если не передан, то по всей номенклатуре, участвующей в обмене с SAP.
//      * МассивНоменклатуры          - Массив - Список номенклатуры, по которой формируются данные в ВТНоменклатура,
//                                               если не передан, то по всей номенклатуре, участвующей в обмене с SAP.
//
Процедура СоздатьВТНоменклатура(МенеджерВременныхТаблиц, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодыНоменклатурыКонтрагента = Неопределено;
	МассивНоменклатуры = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
	    Если ДополнительныеПараметры.Свойство("КодыНоменклатурыКонтрагента") Тогда
			КодыНоменклатурыКонтрагента = ДополнительныеПараметры.КодыНоменклатурыКонтрагента;
		КонецЕсли;
	    Если ДополнительныеПараметры.Свойство("МассивНоменклатуры") Тогда
			МассивНоменклатуры = ДополнительныеПараметры.МассивНоменклатуры;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТПартнеры
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.бг_КодSAP <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НоменклатураКонтрагентов.Номенклатура.ТоварнаяКатегория.бг_СкюМТ, НоменклатураКонтрагентов.Номенклатура) КАК СКЮ_МТ_Номенклатура,
	|	МАКСИМУМ(ВЫРАЗИТЬ(НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента КАК СТРОКА(18))) КАК КодПоставщика
	|ПОМЕСТИТЬ ВТ_СКЮ_МТ
	|ИЗ
	|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|ГДЕ
	|	НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И НЕ НоменклатураКонтрагентов.Недействителен
	|	И НоменклатураКонтрагентов.Владелец В
	|			(ВЫБРАТЬ
	|				ВТПартнеры.Партнер КАК Партнер
	|			ИЗ
	|				ВТПартнеры КАК ВТПартнеры)
	|	И &УсловиеПоКодыНоменклатурыSAP
	|	И &УсловиеПоСкюМТИНоменклатуре
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(НоменклатураКонтрагентов.Номенклатура.ТоварнаяКатегория.бг_СкюМТ, НоменклатураКонтрагентов.Номенклатура)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СКЮ_МТ_Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СпрНоменклатура.бг_УчетОстатковИРезервовВРазрезеУпаковокПаллет КАК УчетОстатковИРезервовВРазрезеУпаковокПаллет,
	|	СпрНоменклатура.ЕдиницаИзмерения.Код КАК КодЕИ,
	|	СпрНоменклатура.Код КАК КодНоменклатуры,
	|	ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(1024)) КАК НаименованиеНоменклатуры,
	|	ВТ_СКЮ_МТ.СКЮ_МТ_Номенклатура КАК СКЮ_МТ,
	|	ВТ_СКЮ_МТ.КодПоставщика КАК КодДляПоискаНоменклатуры
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СКЮ_МТ КАК ВТ_СКЮ_МТ
	|		ПО (СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ = ВТ_СКЮ_МТ.СКЮ_МТ_Номенклатура)
	|ГДЕ
	|	&УсловиеПоНоменклатуре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка,
	|	СпрНоменклатура.ВидНоменклатуры,
	|	СпрНоменклатура.бг_УчетОстатковИРезервовВРазрезеУпаковокПаллет,
	|	СпрНоменклатура.ЕдиницаИзмерения.Код,
	|	СпрНоменклатура.Код,
	|	ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(1024)),
	|	ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка),
	|	ВТ_СКЮ_МТ.КодПоставщика
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СКЮ_МТ КАК ВТ_СКЮ_МТ
	|		ПО СпрНоменклатура.Ссылка = ВТ_СКЮ_МТ.СКЮ_МТ_Номенклатура
	|ГДЕ
	|	&УсловиеПоНоменклатуре
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	УсловиеПоКодыНоменклатурыSAP = "ИСТИНА";
	Если ТипЗнч(КодыНоменклатурыКонтрагента) = Тип("Массив") Тогда  
		УсловиеПоКодыНоменклатурыSAP = 
			"ВЫРАЗИТЬ(НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента КАК СТРОКА(18)) В (&КодыНоменклатурыSAP)";
		Запрос.УстановитьПараметр("КодыНоменклатурыSAP", КодыНоменклатурыКонтрагента);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКодыНоменклатурыSAP", УсловиеПоКодыНоменклатурыSAP);

	УсловиеПоСкюМТИНоменклатуре = "ИСТИНА";
	УсловиеПоНоменклатуре = 
	"	НЕ СпрНоменклатура.ПометкаУдаления
	|	И НЕ(СпрНоменклатура.АлкогольнаяПродукция
	|				И СпрНоменклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка))";
	
	Если ТипЗнч(МассивНоменклатуры) = Тип("Массив") Тогда  
		// 1. Если явно передан массив номенклатуры, то не будем отсекать номенклатуру по другим условиям.
		// 2. В справочнике Номенклатура контрагентов при этом ищем всю номенклатуру по СКЮ МТ для того,
		//    чтобы получить Код номенклатуры SAP в случае если не вся номенклатура по СКЮ МТ занесена в
		//    справочник.
		УсловиеПоСкюМТИНоменклатуре = 
			"(НоменклатураКонтрагентов.Номенклатура.ТоварнаяКатегория.бг_СкюМТ В (&МассивСКЮ_МТ)
			|		ИЛИ НоменклатураКонтрагентов.Номенклатура В (&МассивНоменклатуры))";
			
		УсловиеПоНоменклатуре =
			"СпрНоменклатура.Ссылка В (&МассивНоменклатуры)";
		
		Запрос.УстановитьПараметр("МассивСКЮ_МТ", МассивСКЮ_МТ(МассивНоменклатуры));	
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоСкюМТИНоменклатуре", УсловиеПоСкюМТИНоменклатуре);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоНоменклатуре", УсловиеПоНоменклатуре);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры	

// Возвращает настройку узла интеграции с SAP для переданной организации и источника заказов.
//
//  Параметры:
//   Организация    - СправочникСсылка.Организации - Организация, для которой надо получить настройу. 
//   ИсточникЗаказа - ПеречислениеСсылка.бг_ИсточникиЗагрузкиЗаказовКлиентов - Источник загрузки заказов.
//
//  Возвращаемое значение:
//   НастройкаУзлаИнтеграцииSAP - СправочникСсылка.бг_НастройкиУзловИнтеграцииSAP - Настройка узла интеграции с SAP. 
//
Функция НастройкаУзлаИнтеграцииSAPПоОрганизацииИИсточнику(Организация, ИсточникЗаказа) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИсточникЗаказа", ИсточникЗаказа);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_НастройкиУзловИнтеграцииSAP.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.бг_НастройкиУзловИнтеграцииSAP КАК бг_НастройкиУзловИнтеграцииSAP
	|ГДЕ
	|	НЕ бг_НастройкиУзловИнтеграцииSAP.ПометкаУдаления
	|	И бг_НастройкиУзловИнтеграцииSAP.Организация = &Организация
	|	И бг_НастройкиУзловИнтеграцииSAP.ИсточникЗаказа = &ИсточникЗаказа";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НастройкаУзлаИнтеграцииSAP = Неопределено;	
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НастройкаУзлаИнтеграцииSAP = Выборка.Ссылка;
	КонецЕсли;	
	
	Возврат НастройкаУзлаИнтеграцииSAP;
	
КонецФункции	

// Возвращает JMS заголовки исходящего сообщения, необходимые для чтения сообщений клиентом JMS для RabbitMQ.
//
// Параметры;
//  ДанныеСообщения - Структура - Подготовленные данные нового исходящего сообщения для регистрации или отправки.
//                                см. Справочники.адаптер_ИсходящиеСообщения.ДанныеНовогоСообщения(). 
//
// Возвращемое значение:
// 	ЗаголовкиJMS - Структура - Ключи и значения заголовков JMS.	
//
Функция ЗаголовкиИсходящегоСообщенияJMS(ДанныеСообщения) Экспорт
	
	ЗаголовкиJMS = Новый Структура;	
	
	ЗаголовкиJMS.Вставить("JMSDeliveryMode", "PERSISTENT");
	ЗаголовкиJMS.Вставить("JMSMessageID", "ID:" + ДанныеСообщения.Код);
	ЗаголовкиJMS.Вставить("JMSPriority", "4");
	ЗаголовкиJMS.Вставить("JMSTimestamp", Формат(ДанныеСообщения.ДатаРегистрацииВМиллисекундах, "ЧГ="));
	
	Возврат ЗаголовкиJMS;

КонецФункции

// Возвращает контрагента - грузополучателя для переданного кода SAP. 
// Если грузополучатель по коду SAP не найден, то будет создан новый контрагент,
// при этом будет создан новый пункт назначения для этого грузополучателя.
//
// 	Параметры:
//   КодSAP                      - Строка - Код SAP, для которого надо получить контрагента - грузополучателя.
//   ГоловнойКонтрагент          - СправочникСсылка.Контрагенты - Ссылка на головного контрагента.
//   НаименованиеГрузополучателя - Строка - Наименование контрагента - грузополучателя.
//
//  Возвращаемое значение:
//   Грузополучатель - СправочникСсылка.Контрагенты - Контрагент - грузополучатель. 
//
Функция НайтиСоздатьГрузополучателяПоКодуSAP(КодSAP, 
											ГоловнойКонтрагент,
											НаименованиеГрузополучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Грузополучатель = КонтрагентПоКодуSAP(КодSAP);	
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		Возврат Грузополучатель;
	КонецЕсли;
	
	// Создадим грузополучателя.
	Возврат СоздатьГрузополучателяПоКодуSAP(
				КодSAP, 
				ГоловнойКонтрагент, 
				НаименованиеГрузополучателя); 
	
КонецФункции	

// Возвращает контрагента для переданного кода SAP.
//
//  Параметры:
//   КодSAP - Строка - Код SAP, для которого надо получить контрагента. 
//
//  Возвращаемое значение:
//   Контрагент - СправочникСсылка.Контрагенты - Контрагент, найденный по коду SAP. 
//
Функция КонтрагентПоКодуSAP(КодSAP) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контрагент = Неопределено;
	Если Не ЗначениеЗаполнено(КодSAP) Тогда
		Возврат Контрагент;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодSAP", КодSAP);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.бг_КодSAP = &КодSAP";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Контрагент = Выборка.Ссылка;
	КонецЕсли;	
	
	Возврат Контрагент;
	
КонецФункции	

// Возвращает организацию для переданного кода SAP.
//
//  Параметры:
//   КодSAP - Строка - Код SAP, для которого надо получить организацию. 
//
//  Возвращаемое значение:
//   Организация - СправочникСсылка.Организации - Организация, найденная по коду SAP. 
//
Функция ОрганизацияПоКодуSAP(КодSAP) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодSAP", КодSAP);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.бг_КодSAP = &КодSAP";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Организация = Выборка.Ссылка;
	Иначе
		Организация = Неопределено;
	КонецЕсли;	
	
	Возврат Организация;
	
КонецФункции	

// Возвращает организацию для переданного коду интернет магазина (региональный код склада).
//
//  Параметры:
//   КодСкладаИнтернетМагазина - Строка - Код интернет магазина, для которого надо получить организацию. 
//
//  Возвращаемое значение:
//   Организация - СправочникСсылка.Организации - Организация, найденная по коду. 
//
Функция ОрганизацияПоКодуСкладаИнтернетМагазина(КодСкладаИнтернетМагазина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладИнтернетМагазина", КодСкладаИнтернетМагазина);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бг_НастройкиУзловИнтеграцииSAP.Организация КАК Организация
	|ИЗ
	|	Справочник.бг_НастройкиУзловИнтеграцииSAP КАК бг_НастройкиУзловИнтеграцииSAP
	|ГДЕ
	|	НЕ бг_НастройкиУзловИнтеграцииSAP.ПометкаУдаления
	|	И бг_НастройкиУзловИнтеграцииSAP.СкладИнтернетМагазина = &СкладИнтернетМагазина";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Организация = Выборка.Организация;
	Иначе
		Организация = Неопределено;
	КонецЕсли;	
	
	Возврат Организация;
	
КонецФункции	

// Возвращает пространство имен на кириллице, которе используется для выгрузки OrderSP.
//
Функция ПространствоИменИсходноеOrderSP() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/Документ.битЗаявкаКлиентаOrderSP";
	
КонецФункции

// Возвращает пространство имен на латинице, которе используется для выгрузки OrderSP.
//
Функция ПространствоИменOrderSP() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/Dokument.bitZayavkaKlientaOrderSP";
	
КонецФункции

// Возвращает пространство имен на кириллице, которе используется для выгрузки ReserveOrderResponse.
//
Функция ПространствоИменИсходноеReserveOrderResponse() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/Документ.битЗаявкаКлиентаReserveOrderResponse";
	
КонецФункции

// Возвращает пространство имен на латинице, которе используется для выгрузки ReserveOrderResponse.
//
Функция ПространствоИменReserveOrderResponse() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/Dokument.bitZayavkaKlientaReserveOrderResponse";
	
КонецФункции

Процедура СоздатьВТСклады(МенеджерВременныхТаблиц, Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НастройкаУзлаИнтеграцииSAP",	Параметры.НастройкаУзлаИнтеграцииSAP);
	
	Если Параметры.ВиртуальныйЗаказ Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиУзлов.СкладВиртуальныхЗаказов КАК Склад,
		|	ТаблицаСклады.ВидНоменклатуры КАК ВидНоменклатуры,
		|	0 КАК Приоритет,
		|	ИСТИНА КАК ИспользоватьДляОтложенногоОбеспечения
		|ПОМЕСТИТЬ ВТСклады
		|ИЗ
		|	Справочник.бг_НастройкиУзловИнтеграцииSAP КАК НастройкиУзлов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бг_НастройкиУзловИнтеграцииSAP.Склады КАК ТаблицаСклады
		|		ПО НастройкиУзлов.Ссылка = ТаблицаСклады.Ссылка
		|ГДЕ
		|	НастройкиУзлов.Ссылка = &НастройкаУзлаИнтеграцииSAP
		|	И НастройкиУзлов.СкладВиртуальныхЗаказов <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Склад КАК Склад,
		|	Склады.ВидНоменклатуры КАК ВидНоменклатуры,
		|	Склады.Приоритет КАК Приоритет,
		|	Склады.ИспользоватьДляОтложенногоОбеспечения КАК ИспользоватьДляОтложенногоОбеспечения
		|ПОМЕСТИТЬ ВТСклады
		|ИЗ
		|	Справочник.бг_НастройкиУзловИнтеграцииSAP.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &НастройкаУзлаИнтеграцииSAP
		|	И &УсловиеСклада";
		
		ОбособленныйЗаказКлиента = Параметры.ОбособленныйЗаказКлиента;
		Если ЗначениеЗаполнено(ОбособленныйЗаказКлиента) Тогда
			СкладЗаказаКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбособленныйЗаказКлиента, "Склад");
			ТекстУсловияСклада = "Склады.Склад = &СкладЗаказаКлиента";
			Запрос.УстановитьПараметр("СкладЗаказаКлиента", СкладЗаказаКлиента);
		Иначе
			ТекстУсловияСклада = "ИСТИНА";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСклада", ТекстУсловияСклада);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Регистрирует исходящее сообщение с ответом на запрос резервирования/отмены резервирования 
// по предзаказу от интернет-магазина.  
//
// Параметры:
//  ЗаявкаКлиента     - ДокументСсылка.битЗаявкаКлиента  - Ссылка на заявку клиента, 
//                          по которой надо зарегистрировать и отправить ответ.
//  РезультатКод      - Строка - Код ответа, 
//                          см. Справочники.бг_КодыОтветовНаПредзаказыРезервов.ОписаниеКодаОтветаНаПредзаказРезервов()
//  РезультатОписание - Строка - Описание результата   
//  ОтправлятьИсходящееСообщение - Булево, если Истина, то зарегистрированное исходящее сообщение будет сразу отправлено,
//                                 вне рамок фонового задания отправки сообщений адаптера.
//                                 Здесь есть риск, что может возникнуть сбой в работе компоненты и падение 1С, в случае,
//                                 если в это время работает фоновое задание отправки сообщений, 
//                                 и оно использует тот же экземпляр компоненты. 
//                                 Так как функционал не тестировался, не используем.
//  ДополнительныеПараметры      - Структура - Дополнительные параметры, используемые в алгоритмах процедуры
//
Процедура ЗарегистрироватьИсходящееСообщениеReserveOrderResponse(ЗаявкаКлиента, 
																 РезультатКод, 
																 РезультатОписание = "", 
																 ОтправлятьИсходящееСообщение = Ложь,
																 ДополнительныеПараметры = Неопределено) Экспорт
	
	Перем адаптер_НастройкиОбменаПовтИсп, адаптер_СтроковыеФункцииКлиентСерверПовтИсп;
	Перем адаптер_ОбработчикиСобытийОбщий, адаптер_ТранспортОбмена, адаптер_ОбменДаннымиXDTO;
	адаптер_НастройкиОбменаПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбменаПовтИсп");
	адаптер_СтроковыеФункцииКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_СтроковыеФункцииКлиентСерверПовтИсп");
	адаптер_ОбработчикиСобытийОбщий = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийОбщий");
	адаптер_ТранспортОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_ТранспортОбмена");
	адаптер_ОбменДаннымиXDTO = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбменДаннымиXDTO");
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("РезультатКод", РезультатКод);
	ДополнительныеСвойства.Вставить("РезультатОписание", РезультатОписание);
	
	НомерЗаказа = "";
	Если ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
		НомерЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаКлиента, "НомерПоДаннымКлиента");
	КонецЕсли;
	
	ДанныеОбъекта = Неопределено; 
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ДанныеОбъекта") Тогда
			ДанныеОбъекта = ДополнительныеПараметры.ДанныеОбъекта;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("НомерЗаказа") Тогда
			НомерЗаказа = ДополнительныеПараметры.НомерЗаказа;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерЗаказа) Тогда
		ДополнительныеСвойства.Вставить("НомерЗаказа", НомерЗаказа);	
	КонецЕсли;
	
	НастройкиВыгрузки = адаптер_НастройкиОбменаПовтИсп.
		ПолучитьНастройкиВыгрузкиПоОбъекту("Документ.битЗаявкаКлиента");
	ИспользуемыеНастройкиВыгрузки = Новый Массив;
	Для Каждого НастройкаВыгрузки Из НастройкиВыгрузки Цикл
		Если НастройкаВыгрузки.ПространствоИменИсходное = "https://bit-erp.ru/adapter/Документ.битЗаявкаКлиентаReserveOrderResponse" Тогда
			ИспользуемыеНастройкиВыгрузки.Добавить(НастройкаВыгрузки);	
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого НастройкаВыгрузки Из ИспользуемыеНастройкиВыгрузки Цикл 
		ДанныеСообщения = Справочники.адаптер_ИсходящиеСообщения.ДанныеНовогоСообщения(
																	ЗаявкаКлиента, 
																	НастройкаВыгрузки, 
																	ДополнительныеСвойства,
																	Неопределено);
		
		// В ДополнительныеСвойства передаем текст РезультатОписание, для того чтобы использовать в переопределяемой процедуре
		// ПолучитьДанныеВыгружаемогоОбъекта(). В доп. свойство "РезультатОписание" может быть передан достаточно длинный текст,
		// Так как в РезультатОписание может быть передан длинный текст, а реквизит "Значение" ТЧ "ДополнительныеСвойстваОбъекта"
		// справочника "адаптер_ИсходящиеСообщения" имеет тип Строка(300), после записи исходящего сообщения возможна потеря данных.
		// Чтобы избежать потери данных, сформируем тело сообщения сразу, пока ДанныеСообщения еще содержат установленные
		// дополнительные свойства объекта.
		Если Не ЗначениеЗаполнено(ДанныеСообщения.ПространствоИмен)
			И ЗначениеЗаполнено(ДанныеСообщения.ПространствоИменИсходное) Тогда
			// Так как схема данных ищется по пространству имен на латинице, заполним пространство имен. 
			ДанныеСообщения.ПространствоИмен = 
				адаптер_СтроковыеФункцииКлиентСерверПовтИсп.Транслитерация(ДанныеСообщения.ПространствоИменИсходное);
		КонецЕсли;	
		
		Если ДанныеОбъекта = Неопределено Тогда
			адаптер_ОбработчикиСобытийОбщий.СформироватьТелоСообщения(ДанныеСообщения);
		Иначе	
			адаптер_ОбменДаннымиXDTO.СформироватьТелоСообщения(ДанныеСообщения, ДанныеОбъекта);
		КонецЕсли;
		Справочники.адаптер_ИсходящиеСообщения.ЗаписатьСообщение(ДанныеСообщения);
		
		Если ОтправлятьИсходящееСообщение Тогда
			// Если хотим отправить ответ в режиме on-line, сразу отправим записанное сообщение,
			// не дожидаясь старта очередного фонового задания отправки сообщений.
			адаптер_ТранспортОбмена.ОтправитьСообщения(ДанныеСообщения.СообщениеСсылка, НастройкаВыгрузки.ПараметрыПодключения);
		КонецЕсли;	
	КонецЦикла;	
		
КонецПроцедуры

// Регистрирует исходящее сообщение по переданным Данным объекта с сформированным телом сообщения. 
//
// Параметры:
//  ДанныеОбъекта          - Структура  - предварительно подготовленные данные выгружаемого объекта. 
//                                   См. адаптер_ОбработчикиСобытийОбщий.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
//  Объект                 - Ссылка, РегламентноеЗадание - Выгружаемый объект. 
//  ДополнительныеСвойства - Структура - Дополнительные свойства выгружаемого объекта.   
//
Процедура ЗарегистрироватьИсходящееСообщениеПоДаннымОбъекта(ДанныеОбъекта, Объект, ДополнительныеСвойства) Экспорт

	Перем адаптер_НастройкиОбменаПовтИсп, адаптер_СтроковыеФункцииКлиентСерверПовтИсп;
	Перем адаптер_ТранспортОбмена, адаптер_ОбменДаннымиXDTO;
	адаптер_НастройкиОбменаПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбменаПовтИсп");
	адаптер_СтроковыеФункцииКлиентСерверПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_СтроковыеФункцииКлиентСерверПовтИсп");
	адаптер_ТранспортОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_ТранспортОбмена");
	адаптер_ОбменДаннымиXDTO = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбменДаннымиXDTO");
	
	НастройкиВыгрузки = адаптер_НастройкиОбменаПовтИсп.ПолучитьНастройкиВыгрузкиПоОбъекту(ДанныеОбъекта.ПолноеИмя);
	
	Для Каждого НастройкаВыгрузки Из НастройкиВыгрузки Цикл 
		
		ДанныеСообщения = Справочники.адаптер_ИсходящиеСообщения.ДанныеНовогоСообщения(
																	Объект, 
																	НастройкаВыгрузки, 
																	ДополнительныеСвойства,
																	Неопределено);
		
		Если Не ЗначениеЗаполнено(ДанныеСообщения.ПространствоИмен)
			И ЗначениеЗаполнено(ДанныеСообщения.ПространствоИменИсходное) Тогда
			// Так как схема данных ищется по пространству имен на латинице, заполним пространство имен. 
			ДанныеСообщения.ПространствоИмен = 
				адаптер_СтроковыеФункцииКлиентСерверПовтИсп.Транслитерация(ДанныеСообщения.ПространствоИменИсходное);
		КонецЕсли;	
		
		адаптер_ОбменДаннымиXDTO.СформироватьТелоСообщения(ДанныеСообщения, ДанныеОбъекта);
		Справочники.адаптер_ИсходящиеСообщения.ЗаписатьСообщение(ДанныеСообщения);
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			// В файловом варианте отправим сообщение с изменениями остатков в режиме on-line,
			// не дожидаясь старта очередного фонового задания отправки сообщений.
			адаптер_ТранспортОбмена.ОтправитьСообщения(ДанныеСообщения.СообщениеСсылка, НастройкаВыгрузки.ПараметрыПодключения);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Если не запущено фоновое задание формирования интернетзаказов, то запускает его.
//
Процедура ПроверитьЗапуститьФоновоеЗаданиеФормированияИнтернетЗаказов() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	КлючЗадания = "бг_ОбработатьОбъектыДляОтложеннойОбработкиСформироватьИнтернетЗаказыКлиентов";
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ТекущиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если ТекущиеФоновыеЗадания.Количество() = 0 Тогда
		
		Попытка
			ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
			ПараметрыВыполнения.Вставить("НаименованиеФоновогоЗадания", 
											НСтр("ru = 'Сформировать интернет заказы клиентов'"));
			ПараметрыВыполнения.Вставить("КлючФоновогоЗадания", КлючЗадания);
			ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, 
											"РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ОбработатьОбъекты", 
											Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьИнтернетЗаказыКлиентов);
		Исключение
			// Если задание уже запущено.
		КонецПопытки
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пространство имен на кириллице, которе используется для выгрузки InternetOrdersList.
//
// Возвращаемое значение:
//  Строка - пространство имен InternetOrdersList на кириллице
//
Функция ПространствоИменИсходноеInternetOrdersList() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/Документ.ЗаказКлиентаInternetOrdersList";
	
КонецФункции

// Возвращает пространство имен на латинице, которе используется для выгрузки InternetOrdersList.
//
// Возвращаемое значение:
//  Строка - пространство имен InternetOrdersList на латинице
//
Функция ПространствоИменInternetOrdersList() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/Dokument.ZakazKlientaInternetOrdersList";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МассивСКЮ_МТ(МассивНоменклатуры)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.ТоварнаяКатегория.бг_СкюМТ КАК СкюМТ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивНоменклатуры)
	|	И НЕ Номенклатура.ТоварнаяКатегория.бг_СкюМТ ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкюМТ");
	
КонецФункции

// Создает нового контрагента - грузополучателя. 
//
Функция СоздатьГрузополучателяПоКодуSAP(КодSAP, 
										ГоловнойКонтрагент, 
										НаименованиеГрузополучателя)
	
	УстановитьПривилегированныйРежим(Истина);
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ГрузополучательОбъект = Справочники.Контрагенты.СоздатьЭлемент(); 
	
	РеквизитыГоловногоКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ГоловнойКонтрагент,
			"Наименование,ИНН,Партнер");
	
	ГрузополучательОбъект.Наименование = СтрШаблон(
		"%1: %2: %3", РеквизитыГоловногоКонтрагента.Наименование, КодSAP, НаименованиеГрузополучателя);
	ГрузополучательОбъект.НаименованиеПолное = СтрШаблон(
		"%1: %2", РеквизитыГоловногоКонтрагента.Наименование, КодSAP);
	ГрузополучательОбъект.ОбособленноеПодразделение = Истина;
	ГрузополучательОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	ГрузополучательОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
    ГрузополучательОбъект.ИНН = РеквизитыГоловногоКонтрагента.ИНН;
	ГрузополучательОбъект.Партнер = РеквизитыГоловногоКонтрагента.Партнер;
	ГрузополучательОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	ГрузополучательОбъект.бг_КодSAP = КодSAP; 
	
	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		ГрузополучательОбъект.Записать();		
		ПунктНазначения = СоздатьПунктНазначения(
				ГрузополучательОбъект.Ссылка, 
				ГрузополучательОбъект.Наименование, 
				ГрузополучательОбъект.ОбособленноеПодразделение);
				
		Лицензия = бг_КонстантыПовтИсп.ЗначениеКонстанты(
				"АлкогольнаяЛицензияДляНовогоПунктаРазгрузки", 
				ГоловнойКонтрагент);		
		Если ЗначениеЗаполнено(Лицензия) Тогда
			НаборЗаписей = РегистрыСведений.бг_ЛицензииПунктовНазначения.СоздатьНаборЗаписей();
			
			Период = НачалоДня(ТекущаяДатаСеанса());
			НаборЗаписей.Отбор.Период.Установить(Период);
			НаборЗаписей.Отбор.ПунктНазначения.Установить(ПунктНазначения);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Период = Период;
			Запись.ПунктНазначения = ПунктНазначения;
			Запись.Лицензия = Лицензия;
			
			НаборЗаписей.Записать();
		КонецЕсли;
				
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = 
			НСтр("ru = 'Не создан новый пункт грузополучатель %1. 
					   |По причине: %2';
				 |en = 'Не создан новый пункт грузополучатель %1.
				 	   |По причине: %2'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КодSAP, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(
			Документы.битЗаявкаКлиента.СобытиеЖурналаРегистрацииСозданияЗаказовКлиентов(),
			УровеньЖурналаРегистрации.Ошибка,
			ГрузополучательОбъект.Метаданные(), ,
			ТекстСообщения);

		ВызватьИсключение ТекстСообщения;	
	КонецПопытки;
	
	Возврат ГрузополучательОбъект.Ссылка;
	
КонецФункции

// Создает новый пункт назначения для грузополучателя. 
//
Функция СоздатьПунктНазначения(Грузополучатель, Наименование, ОбособленноеПодразделение)

	УстановитьПривилегированныйРежим(Истина);
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	ПунктНазначенияОбъект = Справочники.битПунктыНазначения.СоздатьЭлемент();
	
	ПунктНазначенияОбъект.Наименование = Наименование;
	ПунктНазначенияОбъект.НаименованиеПолное = 
		Справочники.битПунктыНазначения.ПолноеНаименованиеПунктаНазначенияПоДаннымКонтрагента(Грузополучатель);
	ПунктНазначенияОбъект.Клиент = Грузополучатель;
	ПунктНазначенияОбъект.КаналПродаж = бг_КонстантыПовтИсп.ЗначениеКонстанты("КаналПродажСобственнаяРозница");
	ПунктНазначенияОбъект.ОбособленноеПодразделение = ОбособленноеПодразделение;

	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		ПунктНазначенияОбъект.Записать();		
				
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = 
			НСтр("ru = 'Не создан новый пункт назначения %1. 
					   |По причине: %2';
				 |en = 'Не создан новый пункт назначения %1.
				 	   |По причине: %2'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(
			Документы.битЗаявкаКлиента.СобытиеЖурналаРегистрацииСозданияЗаказовКлиентов(),
			УровеньЖурналаРегистрации.Ошибка,
			ПунктНазначенияОбъект.Метаданные(), ,
			ТекстСообщения);

		ВызватьИсключение ТекстСообщения;	
	КонецПопытки;
	
	Возврат ПунктНазначенияОбъект.Ссылка;
	
КонецФункции	
	
#КонецОбласти
