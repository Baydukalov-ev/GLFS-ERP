
#Область ПрограммныйИнтерфейс

Функция бг_ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, УчитыватьРассчитанные = Истина) Экспорт
	Возврат ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, УчитыватьРассчитанные);
КонецФункции

Процедура бг_РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры) Экспорт
	РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры);
КонецПроцедуры

// Процедура рекурсивно рассчитывает скидки по группе совместного применения
// от текущей строки дерева вверх по дереву скидок до корневого элемента дерева
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева скидок (наценок)
//  Параметры - Структура - Структура параметров расчета.
//
Процедура бг_РассчитатьСкидкиПоГруппеСовместногоПримененияРекурсивно(СтрокаДерева, Параметры) Экспорт
	
	Родитель = СтрокаДерева.Родитель;
	Пока Родитель <> Неопределено Цикл
		РассчитатьСкидкиПоГруппеСовместногоПрименения(Родитель, Параметры);
		Родитель = Родитель.Родитель;
	КонецЦикла;
	
КонецПроцедуры

Процедура бг_ПрименитьЗначениеСкидкиКТовару(СтрокаДерева, СуммаСкидки, НачисленнаяСумма, 
	Товар, РезультатРасчета, ПараметрыРасчета) Экспорт
	
	Разрядность = 2;
	КратностьРубля = 100;
	СтоПроцентов = 100;

	// Пороги
	СуммаСоСкидками    = ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, Истина);
	ОстатокСуммыСкидки = Макс(СуммаСоСкидками - ?(СтрокаДерева.бг_НеУчитыватьПороги, 
		Товар.бг_МинимальнаяСумма, Товар.бг_ПредельнаяСумма), 0);
	Если ОстатокСуммыСкидки < СуммаСкидки Тогда
		СуммаСкидки = ОстатокСуммыСкидки;
	КонецЕсли;
	
	// Максимальный процент скидки
	СуммаСкидки = Окр(СуммаСкидки, Разрядность);
	Если СтрокаДерева.бг_ОграничениеСкидки Тогда
		СуммаСоСкидками    = ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, Истина);
		ОстатокСуммыСкидки = Макс(СуммаСоСкидками - Товар.Сумма * (СтоПроцентов - СтрокаДерева.бг_ОграничениеСкидки) / СтоПроцентов, 0);
		Если ОстатокСуммыСкидки < СуммаСкидки Тогда
			СуммаСкидки = ОстатокСуммыСкидки;
		КонецЕсли;
	КонецЕсли;
	
	// Сумма скидки д.б. кратна количеству
	Если Товар.Количество <> 0
		И СуммаСкидки / Товар.Количество <> Окр(СуммаСкидки / Товар.Количество, Разрядность) Тогда
		// В результате скидка не должны быть больше
		СуммаСкидки = Товар.Количество
			* Цел(СуммаСкидки / Товар.Количество * КратностьРубля) / КратностьРубля;
	КонецЕсли;

	// Учтем ограничения
	Если СтрокаДерева.бг_ОграничениеСуммыСкидки <> -1 Тогда
		ЗнакСкидки = ?(СуммаСкидки > 0, 1, -1); // Ограничение всегда положительное. Скидка может быть отрицательной в случае наценки.
		Если СтрокаДерева.бг_ОграничениеСуммыСкидки < СуммаСкидки * ЗнакСкидки Тогда
			СуммаСкидки = ЗнакСкидки * СтрокаДерева.бг_ОграничениеСуммыСкидки;
		КонецЕсли;
		СтрокаДерева.бг_ОграничениеСуммыСкидки = СтрокаДерева.бг_ОграничениеСуммыСкидки - СуммаСкидки * ЗнакСкидки;
	КонецЕсли;
	
	//////////////////////////
	// типовой код
	НоваяСтрока           = РезультатРасчета.Добавить();
	НоваяСтрока.КлючСвязи = Товар.КлючСвязи;
	НоваяСтрока.Действует = Истина;
	
	Если СтрокаДерева.Управляемая И НЕ СтрокаДерева.НазначенаПользователем Тогда
		НоваяСтрока.Действует = Ложь;
	КонецЕсли;
	
	// Если скидка на данную строку не действует - пропускаем.
	Если СтрокаДерева.ПараметрыУсловий.ЕстьУсловияПоСтроке
		И СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(Товар.КлючСвязи) = Неопределено Тогда
		НоваяСтрока.Действует = Ложь;
	КонецЕсли;

	НоваяСтрока.Сумма = КонвертироватьСуммуВБонусы(СтрокаДерева, СуммаСкидки, ПараметрыРасчета);

	НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, ПараметрыРасчета);
	// типовой код
	//////////////////////////
	
	НоваяСтрока.бг_СуммаНачислено = КонвертироватьСуммуВБонусы(СтрокаДерева, НачисленнаяСумма, ПараметрыРасчета);
	Если СтрокаДерева.бг_Накопительная <> бг_КонстантыПовтИсп.ЗначениеКонстанты("СуммоваяСкидкаCRM")
		И (СтрокаДерева.бг_Накопительная Или ПараметрыРасчета.Свойство("РаспределениеНакопительнойСкидки")) Тогда
		НоваяСтрока.бг_СуммаСписанияНакопительнойСкидки = НоваяСтрока.Сумма;
	КонецЕсли;
	
	НоваяСтрока.Расшифровка[0].бг_СуммаНачислено = НоваяСтрока.бг_СуммаНачислено;
	НоваяСтрока.Расшифровка[0].бг_СуммаСписанияНакопительнойСкидки = НоваяСтрока.бг_СуммаСписанияНакопительнойСкидки;
	
КонецПроцедуры

Функция бг_ПараметрыЗапросаСкидокНаценок(Объект, СтруктураПараметров = Неопределено) Экспорт

	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("бг_ИсточникЗаказа",  Объект.бг_ИсточникЗаказа);
	СтруктураПараметров.Вставить("бг_ДоступныеСкидки", Объект.бг_ДоступныеСкидки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"));
	СтруктураПараметров.Вставить("ДатаДокумента",      ПолучитьТекущуюДатуОбъекта(Объект));
	СтруктураПараметров.Вставить("Организация",        Объект.Организация);
	СтруктураПараметров.Вставить("Партнер",            Объект.Партнер);
	СтруктураПараметров.Вставить("Соглашение",         Объект.Соглашение);
	СтруктураПараметров.Вставить("Контрагент",         Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",            Объект.Договор);
	СтруктураПараметров.Вставить("Склад",              Объект.Склад);
	СтруктураПараметров.Вставить("бг_ПунктНазначения", Объект.бг_ПунктНазначения);
	СтруктураПараметров.Вставить("бг_КаналПродаж",     Объект.бг_КаналПродаж);
	СтруктураПараметров.Вставить("бг_ДоступнаяСуммоваяСкидка", Объект.бг_ДоступнаяСуммоваяСкидка);
	СтруктураПараметров.Вставить("КартаЛояльности",    Объект.КартаЛояльности);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",    Объект.ЦенаВключаетНДС);

	КодыСтрокБюджета 	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Объект.бг_КодыСтрокБюджета, ";");
	СтруктураПараметров.Вставить("КодыСтрокБюджета"	, КодыСтрокБюджета);
	
	бг_ВариантыОпределенияДаты = Перечисления.бг_ВариантыОпределенияДатыДействияСкидокНаценок;
	бг_ВариантОпределенияДаты  = бг_ВариантыОпределенияДаты.ВариантОпределенияДатыДействия(СтруктураПараметров);
	
	Если бг_ВариантОпределенияДаты = бг_ВариантыОпределенияДаты.ПоДатеВходящегоДокумента Тогда
		Если ЗначениеЗаполнено(Объект.ДатаПоДаннымКлиента) Тогда
			СтруктураПараметров.ДатаДокумента = Объект.ДатаПоДаннымКлиента;
		КонецЕсли;
	ИначеЕсли бг_ВариантОпределенияДаты = бг_ВариантыОпределенияДаты.ПоДатеОтгрузки Тогда
		Если Объект.НеОтгружатьЧастями И ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
			СтруктураПараметров.ДатаДокумента = Объект.ДатаОтгрузки;
		Иначе
			бг_ДатыОтгрузки = Объект.Товары.Выгрузить(, "ДатаОтгрузки");
			бг_ДатыОтгрузки.Свернуть("ДатаОтгрузки");
			бг_ДатыОтгрузки.Сортировать("ДатаОтгрузки ВОЗР");
			
			Если бг_ДатыОтгрузки.Количество() Тогда
				Если ЗначениеЗаполнено(бг_ДатыОтгрузки[0][0]) Тогда
					СтруктураПараметров.ДатаДокумента = бг_ДатыОтгрузки[0][0];
				ИначеЕсли бг_ДатыОтгрузки.Количество() > 1 Тогда
					СтруктураПараметров.ДатаДокумента = бг_ДатыОтгрузки[1][0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.бг_Магазин <> Справочники.Контрагенты.ПустаяСсылка()
		И Объект.бг_ЗаказРозничногоПокупателя = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
		// Это заказ розничного покупателя
		ТипЛицензии = Перечисления.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Розничная;
	Иначе
		ТипЛицензии = Неопределено;
	КонецЕсли;
	СтруктураПараметров.Вставить("ТипЛицензии", ТипЛицензии);
	СтруктураПараметров.Вставить("Регистратор", Объект.Ссылка);
	
    Возврат СтруктураПараметров;
КонецФункции

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	Массив из СправочникСсылка.СкидкиНаценки - Расшифровка скидок.
//
Функция бг_СкидкиНаценкиДляОптовойТорговли(ПараметрыЗапроса) Экспорт
	
	ИспользоватьНесколькоСкладов     = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьКартыЛояльности      = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	ИспользоватьДоговорыСКлиентами   = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ИспользоватьСегментыПартнеров    = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров");
	
	ГруппыСкладов = Новый Массив;
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка.Родитель КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Т
		|ГДЕ
		|	Т.Ссылка В (&Склад)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ
		|");
		Запрос.Параметры.Вставить("Склад", ПараметрыЗапроса.Склад);
		ГруппыСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ГруппыСкладов.Добавить(ПараметрыЗапроса.Склад);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.СкидкаНаценка КАК СкидкаНаценка
	|ПОМЕСТИТЬ ТаблицаСкидкокНаценок
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
	|) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|";
	
	Если ИспользоватьНесколькоСкладов Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник В (&ГруппыСкладов)
		|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
		|) КАК Таблица
		|ГДЕ
		|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = &Соглашение
		|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
		|) КАК Таблица
		|ГДЕ
		|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	Если ИспользоватьДоговорыСКлиентами Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = &Договор
		|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
		|) КАК Таблица
		|ГДЕ
		|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	Если ИспользоватьКартыЛояльности Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.ВидыКартЛояльности
		|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
		|) КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КартыЛояльности КАК КартыЛояльности
		|		ПО (КартыЛояльности.Владелец = Таблица.Источник)
		|			И (КартыЛояльности.Ссылка = &КартаЛояльности)
		|ГДЕ
		|	КартыЛояльности.Владелец.ДатаНачалаДействия <= &ТекущаяДата
		|	И ВЫБОР
		|			КОГДА КартыЛояльности.Владелец.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ КОНЕЦПЕРИОДА(КартыЛояльности.Владелец.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата
		|		КОНЕЦ
		|	И Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;
	
	Если ИспользоватьСегментыПартнеров Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.СкидкаНаценка
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник ССЫЛКА Справочник.СегментыПартнеров
		|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
		|) КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|		ПО (ПартнерыСегмента.Сегмент = Таблица.Источник)
		|			И (ПартнерыСегмента.Партнер = &Партнер)
		|ГДЕ
		|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = &Контрагент
	|		И ISNULL(ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).бг_КлючевойКлиент, &ПустойКлючевойКлиент) = &ПустойКлючевойКлиент
	|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
	|) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = &ПунктНазначения
	|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
	|) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = ВЫРАЗИТЬ(&ПунктНазначения КАК Справочник.битПунктыНазначения).КаналПродаж
	|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
	|) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, Источник = ВЫРАЗИТЬ(&ПунктНазначения КАК Справочник.битПунктыНазначения).Территория
	|		И СкидкаНаценка.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		И СкидкаНаценка.бг_КаналыПродаж В (&бг_КаналПродаж, ЗНАЧЕНИЕ(Справочник.битКаналыПродаж.ПустаяСсылка))
	|) КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСкидкокНаценок.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	ТаблицаСкидкокНаценок КАК ТаблицаСкидкокНаценок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО ПартнерыСегмента.Партнер = &Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.бг_Исключения КАК бг_Исключения
	|		ПО ТаблицаСкидкокНаценок.СкидкаНаценка = бг_Исключения.Ссылка
	|			И бг_Исключения.Объект В (&Соглашение, &Договор, &ПунктНазначения, &Контрагент,
	|				ПартнерыСегмента.Сегмент,
	|				ВЫРАЗИТЬ(&ПунктНазначения КАК Справочник.битПунктыНазначения).КаналПродаж, 
	|				ВЫРАЗИТЬ(&ПунктНазначения КАК Справочник.битПунктыНазначения).Территория)
	|ГДЕ 
	|	бг_Исключения.Ссылка IS NULL
	|	И НЕ ТаблицаСкидкокНаценок.СкидкаНаценка.ПометкаУдаления
	|	И ТаблицаСкидкокНаценок.СкидкаНаценка В (&бг_ДоступныеСкидки)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ТекущаяДата", ПараметрыЗапроса.ДатаДокумента);
	Запрос.Параметры.Вставить("Организация", ПараметрыЗапроса.Организация);
	Запрос.Параметры.Вставить("Контрагент", ПараметрыЗапроса.Контрагент);
	Запрос.Параметры.Вставить("Партнер", ПараметрыЗапроса.Партнер);

	Запрос.Параметры.Вставить("Соглашение", Неопределено);
	Запрос.Параметры.Вставить("Договор", Неопределено);

	Если ИспользоватьСоглашенияСКлиентами Тогда
		Запрос.Параметры.Вставить("Соглашение", ПараметрыЗапроса.Соглашение);
	КонецЕсли;
	Если ИспользоватьКартыЛояльности Тогда
		Запрос.Параметры.Вставить("КартаЛояльности", ПараметрыЗапроса.КартаЛояльности);
	КонецЕсли;
	Если ИспользоватьНесколькоСкладов Тогда
		Запрос.Параметры.Вставить("Склад",         ПараметрыЗапроса.Склад);
		Запрос.Параметры.Вставить("ГруппыСкладов", ГруппыСкладов);
	КонецЕсли;
	Если ИспользоватьДоговорыСКлиентами Тогда
		Запрос.УстановитьПараметр("Договор", ПараметрыЗапроса.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПунктНазначения", ПараметрыЗапроса.бг_ПунктНазначения);
	Запрос.УстановитьПараметр("бг_КаналПродаж", ПараметрыЗапроса.бг_КаналПродаж);
	Запрос.Параметры.Вставить("ПустойКлючевойКлиент", Справочники.бг_КлючевыеКлиенты.ПустаяСсылка());
	Если ПараметрыЗапроса.Свойство("бг_ДоступныеСкидки")
		И ЗначениеЗаполнено(ПараметрыЗапроса.бг_ДоступныеСкидки) Тогда
		Запрос.Параметры.Вставить("бг_ДоступныеСкидки", ПараметрыЗапроса.бг_ДоступныеСкидки);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТаблицаСкидкокНаценок.СкидкаНаценка В (&бг_ДоступныеСкидки)", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СкидкаНаценка");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&ИзменениеИКонтроль("ИспользованиеСкидкиНаценки")
Функция бг_ИспользованиеСкидкиНаценки(СкидкаНаценка, ДатаДействия)

	Если СкидкаНаценка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ДействуетНаСкладах", 0);
	Результат.Вставить("ВсегоНаСкладах", 0);
	Результат.Вставить("ДействуетВТиповыхСоглашениях", 0);
	Результат.Вставить("ВсегоВТиповыхСоглашениях", 0);
	Результат.Вставить("ДействуетВИндивидуальныхСоглашениях", 0);
	Результат.Вставить("ВсегоВИндивидуальныхСоглашениях", 0);
	Результат.Вставить("ДействуетВКартахЛояльности", 0);
	Результат.Вставить("ВсегоВКартахЛояльности", 0);
	Результат.Вставить("ДействуетНаВсехСкладах", Ложь);
	Результат.Вставить("ДатаНачалаБезусловногоДействия", Дата(1, 1, 1));
	Результат.Вставить("ДатаОкончанияБезусловногоДействия", Дата(1, 1, 1));
#Вставка
	Результат.Вставить("бг_ДействуетПоКонтрагентам",         0);
	Результат.Вставить("бг_ВсегоПоКонтрагентам",             0);
	Результат.Вставить("бг_ДействуетВДоговорахКонтрагентов", 0);
	Результат.Вставить("бг_ВсегоВДоговорахКонтрагентов",     0);
	Результат.Вставить("бг_ДействуетВКаналахПродаж",         0);
	Результат.Вставить("бг_ВсегоВКаналахПродаж",             0);
	Результат.Вставить("бг_ДействуетВПунктахНазначения",     0);
	Результат.Вставить("бг_ВсегоВПунктахНазначения",         0);
	Результат.Вставить("бг_ДействуетВТерриториях",           0);
	Результат.Вставить("бг_ВсегоВТерриториях",               0);
	Результат.Вставить("бг_ДействуетВСегментах",    0);
	Результат.Вставить("бг_ВсегоВСегментах",        0);
#КонецВставки

	ЗаполнитьЗначенияСвойств(Результат, ЗначениеНастроекПовтИсп.КоличествоИсточниковСкидокНаценок());

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДействиеСкидокНаценокСрезПоследних.Источник КАК Источник,
	|	ДействиеСкидокНаценокСрезПоследних.Статус
	|ПОМЕСТИТЬ Источники
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ТекущаяДата, СкидкаНаценка = &СкидкаНаценка) КАК ДействиеСкидокНаценокСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.Склады)
	|			ТОГДА ""ДействуетНаСкладах""
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.ВидыКартЛояльности)
	|			ТОГДА ""ДействуетПоВидамКартЛояльности""
	|		КОГДА &ТекстПоСоглашениям Тогда """"
	|	КОНЕЦ КАК ГдеПрименяется,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Источники.Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И Источники.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ДействуетНаПустомСкладе,
	|	СУММА(ВЫБОР
	|			КОГДА Источники.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|					И Источники.Источник <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДействуетПоИсточникам
	|ИЗ
	|	Источники КАК Источники
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.Склады)
	|			ТОГДА ""ДействуетНаСкладах""
	|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.ВидыКартЛояльности)
	|			ТОГДА ""ДействуетПоВидамКартЛояльности""
	|		КОГДА &ТекстПоСоглашениям Тогда """"
	|	КОНЕЦ");

	Если ПравоДоступа("Чтение", Метаданные.Справочники.СоглашенияСКлиентами) Тогда

		ТекстПоСоглашениям ="
		|		КОГДА ТипЗначения(Источники.Источник) = Тип(Справочник.СоглашенияСКлиентами)
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫРАЗИТЬ(Источники.Источник КАК Справочник.СоглашенияСКлиентами).Типовое
		|						ТОГДА ""ДействуетПоТиповымСоглашениямСКлиентами""
		|					ИНАЧЕ ""ДействуетПоИндивидуальнымСоглашениямСКлиентами""
		|				КОНЕЦ";

	Иначе 
		ТекстПоСоглашениям = "";
	КонецЕсли;
#Вставка
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		ТекстПоСоглашениям = ТекстПоСоглашениям + "
		|		КОГДА ТипЗначения(Источники.Источник) = ТИП(Справочник.Контрагенты)
		|			ТОГДА ""бг_ДействуетПоКонтрагентам""";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ТекстПоСоглашениям = ТекстПоСоглашениям + "
		|		КОГДА ТипЗначения(Источники.Источник) = ТИП(Справочник.ДоговорыКонтрагентов)
		|			ТОГДА ""бг_ДействуетВДоговорахКонтрагентов""";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.битКаналыПродаж) Тогда
		ТекстПоСоглашениям = ТекстПоСоглашениям + "
		|		КОГДА ТипЗначения(Источники.Источник) = ТИП(Справочник.битКаналыПродаж)
		|			ТОГДА ""бг_ДействуетВКаналахПродаж""";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.битПунктыНазначения) Тогда
		ТекстПоСоглашениям = ТекстПоСоглашениям + "
		|		КОГДА ТипЗначения(Источники.Источник) = ТИП(Справочник.битПунктыНазначения)
		|			ТОГДА ""бг_ДействуетВПунктахНазначения""";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.битТерриторииПунктовНазначения) Тогда
		ТекстПоСоглашениям = ТекстПоСоглашениям + "
		|		КОГДА ТипЗначения(Источники.Источник) = ТИП(Справочник.битТерриторииПунктовНазначения)
		|			ТОГДА ""бг_ДействуетВТерриториях""";
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Справочники.СегментыПартнеров) Тогда
		ТекстПоСоглашениям = ТекстПоСоглашениям + "
		|		КОГДА ТипЗначения(Источники.Источник) = ТИП(Справочник.СегментыПартнеров)
		|			ТОГДА ""бг_ДействуетВСегментах""";
	КонецЕсли;
#КонецВставки

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "КОГДА &ТекстПоСоглашениям Тогда """"", ТекстПоСоглашениям);

	Запрос.УстановитьПараметр("ТекущаяДата", ДатаДействия);
	Запрос.УстановитьПараметр("СкидкаНаценка", СкидкаНаценка);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.ГдеПрименяется = "ДействуетНаСкладах" Тогда

			Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
				Результат.ДействуетНаСкладах  = Выборка.ДействуетПоИсточникам;
			КонецЕсли;
			Результат.ДействуетНаВсехСкладах = Выборка.ДействуетНаПустомСкладе;

		ИначеЕсли Выборка.ГдеПрименяется = "ДействуетПоВидамКартЛояльности" 
			И ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности") Тогда

			Результат.ДействуетВКартахЛояльности = Выборка.ДействуетПоИсточникам;

		ИначеЕсли Выборка.ГдеПрименяется = "ДействуетПоТиповымСоглашениямСКлиентами" 
			И ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами") Тогда

			Результат.ДействуетВТиповыхСоглашениях = Выборка.ДействуетПоИсточникам;

		ИначеЕсли Выборка.ГдеПрименяется = "ДействуетПоИндивидуальнымСоглашениямСКлиентами" 
			И ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами") Тогда

			Результат.ДействуетВИндивидуальныхСоглашениях = Выборка.ДействуетПоИсточникам;
#Вставка
		ИначеЕсли Выборка.ГдеПрименяется = "бг_ДействуетПоКонтрагентам" Тогда

			Результат.бг_ДействуетПоКонтрагентам = Выборка.ДействуетПоИсточникам;
		ИначеЕсли Выборка.ГдеПрименяется = "бг_ДействуетВДоговорахКонтрагентов" 
			И ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда

			Результат.бг_ДействуетВДоговорахКонтрагентов = Выборка.ДействуетПоИсточникам;
			
		ИначеЕсли Выборка.ГдеПрименяется = "бг_ДействуетВКаналахпродаж" Тогда

			Результат.бг_ДействуетВКаналахпродаж = Выборка.ДействуетПоИсточникам;
			
		ИначеЕсли Выборка.ГдеПрименяется = "бг_ДействуетВПунктахНазначения" Тогда

			Результат.бг_ДействуетВПунктахНазначения = Выборка.ДействуетПоИсточникам;
			
		ИначеЕсли Выборка.ГдеПрименяется = "бг_ДействуетВТерриториях" Тогда

			Результат.бг_ДействуетВТерриториях = Выборка.ДействуетПоИсточникам;

		ИначеЕсли Выборка.ГдеПрименяется = "бг_ДействуетВСегментах" Тогда

			Результат.бг_ДействуетВСегментах = Выборка.ДействуетПоИсточникам;
#КонецВставки

		КонецЕсли;

	КонецЦикла;

	Если Результат.ДействуетНаВсехСкладах Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ДействиеСкидокНаценокСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ НачалоДействия
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
		|			&ТекущаяДата,
		|			СкидкаНаценка = &СкидкаНаценка
		|				И Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|				И Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ДействиеСкидокНаценокСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	МИНИМУМ(ДействиеСкидокНаценок.Период) КАК Период
		|ПОМЕСТИТЬ ОкончаниеДействия
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|ГДЕ
		|	ДействиеСкидокНаценок.Период > &ТекущаяДата
		|	И ДействиеСкидокНаценок.Источник = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
		|	И ДействиеСкидокНаценок.СкидкаНаценка = &СкидкаНаценка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачалоДействия.Период КАК НачалоДействия,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ОкончаниеДействия.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ОкончаниеДействия
		|ИЗ
		|	НачалоДействия КАК НачалоДействия
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОкончаниеДействия КАК ОкончаниеДействия
		|	ПО (ИСТИНА)";

		Выборка = Запрос.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Результат.ДатаОкончанияБезусловногоДействия = Выборка.ОкончаниеДействия;
			Результат.ДатаНачалаБезусловногоДействия    = Выборка.НачалоДействия;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

&ИзменениеИКонтроль("СформироватьИнформациюОКоличествеИспользуемыхСкидок")
Процедура бг_СформироватьИнформациюОКоличествеИспользуемыхСкидок(Форма, ИспользованиеСкидкиНаценки)

	ШаблонЗаголовка          = НСтр("ru = '%1 из %2';
	|en = '%1 out of %2'");
	ИнформацияСоглашения         = "";
	ИнформацияСклады             = "";
	ИнформацияВидыКартЛояльности = "";
#Вставка
	бг_ИнформацияКонтрагенты          = "";
	бг_ИнформацияДоговорыКонтрагентов = "";
	бг_ИнформацияПунктыНазначения     = "";
	бг_ИнформацияКаналыПродаж         = "";
	бг_ИнформацияТерритории           = "";
	бг_ИнформацияСегментыПартнеров    = "";
#КонецВставки

	Если Не ИспользованиеСкидкиНаценки = Неопределено Тогда

		Если ИспользованиеСкидкиНаценки.ВсегоВТиповыхСоглашениях > 0 Тогда

			ИнформацияТиповыеСоглашения = СтрШаблон(ШаблонЗаголовка, 
			ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях,
			ИспользованиеСкидкиНаценки.ВсегоВТиповыхСоглашениях);
		КонецЕсли;

		Если ИспользованиеСкидкиНаценки.ВсегоВИндивидуальныхСоглашениях > 0 Тогда

			ИнформацияИндивидуальныеСоглашения = СтрШаблон(ШаблонЗаголовка, 
			ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях,
			ИспользованиеСкидкиНаценки.ВсегоВИндивидуальныхСоглашениях);
		КонецЕсли;

		Если ИспользованиеСкидкиНаценки.ВсегоНаСкладах > 0 Тогда

			ИнформацияСклады = СтрШаблон(ШаблонЗаголовка, 
			ИспользованиеСкидкиНаценки.ДействуетНаСкладах,
			ИспользованиеСкидкиНаценки.ВсегоНаСкладах);
		КонецЕсли;

		Если ИспользованиеСкидкиНаценки.ВсегоВКартахЛояльности > 0 Тогда

			ИнформацияВидыКартЛояльности = 
			СтрШаблон(ШаблонЗаголовка, 
			ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности,
			ИспользованиеСкидкиНаценки.ВсегоВКартахЛояльности);
		КонецЕсли;
#Вставка
		Если ИспользованиеСкидкиНаценки.бг_ВсегоПоКонтрагентам > 0 Тогда
			бг_ИнформацияКонтрагенты = СтрШаблон(
			ШаблонЗаголовка,
			ИспользованиеСкидкиНаценки.бг_ДействуетПоКонтрагентам,
			ИспользованиеСкидкиНаценки.бг_ВсегоПоКонтрагентам
			);
		КонецЕсли;
		Если ИспользованиеСкидкиНаценки.бг_ВсегоВДоговорахКонтрагентов > 0 Тогда
			бг_ИнформацияДоговорыКонтрагентов = СтрШаблон(
				ШаблонЗаголовка,
				ИспользованиеСкидкиНаценки.бг_ДействуетВДоговорахКонтрагентов,
				ИспользованиеСкидкиНаценки.бг_ВсегоВДоговорахКонтрагентов
			);
		КонецЕсли;
		Если ИспользованиеСкидкиНаценки.бг_ВсегоВКаналахПродаж > 0 Тогда
			бг_ИнформацияКаналыПродаж = СтрШаблон(
				ШаблонЗаголовка,
				ИспользованиеСкидкиНаценки.бг_ДействуетВКаналахПродаж,
				ИспользованиеСкидкиНаценки.бг_ВсегоВКаналахПродаж
			);
		КонецЕсли;
		Если ИспользованиеСкидкиНаценки.бг_ВсегоВПунктахНазначения > 0 Тогда
			бг_ИнформацияПунктыНазначения = СтрШаблон(
				ШаблонЗаголовка,
				ИспользованиеСкидкиНаценки.бг_ДействуетВПунктахНазначения,
				ИспользованиеСкидкиНаценки.бг_ВсегоВПунктахНазначения
			);
		КонецЕсли;
		Если ИспользованиеСкидкиНаценки.бг_ВсегоВТерриториях > 0 Тогда
			бг_ИнформацияТерритории = СтрШаблон(
				ШаблонЗаголовка,
				ИспользованиеСкидкиНаценки.бг_ДействуетВТерриториях,
				ИспользованиеСкидкиНаценки.бг_ВсегоВТерриториях
			);
		КонецЕсли;
		Если ИспользованиеСкидкиНаценки.бг_ВсегоВСегментах > 0 Тогда
			бг_ИнформацияСегментыПартнеров = СтрШаблон(
				ШаблонЗаголовка,
				ИспользованиеСкидкиНаценки.бг_ДействуетВСегментах,
				ИспользованиеСкидкиНаценки.бг_ВсегоВСегментах
			);
		КонецЕсли;
#КонецВставки

	КонецЕсли;

	Форма.ИнформацияКоличествоСкидокИндивидуальныеСоглашения = ИнформацияИндивидуальныеСоглашения;
	Форма.ИнформацияКоличествоСкидокТиповыеСоглашения        = ИнформацияТиповыеСоглашения;
	Форма.ИнформацияКоличествоСкидокСклады                   = ИнформацияСклады;
	Форма.ИнформацияКоличествоСкидокКартыЛояльности          = ИнформацияВидыКартЛояльности;
#Вставка
	Если СтрНайти(Форма.бг_ИменаДоступныхИсточников, "ПоКонтрагентам") Тогда
		Форма.бг_ИнформацияКоличествоСкидокПоКонтрагентам         = бг_ИнформацияКонтрагенты;
	КонецЕсли;
	Если СтрНайти(Форма.бг_ИменаДоступныхИсточников, "ВДоговорахКонтрагентов") Тогда
		Форма.бг_ИнформацияКоличествоСкидокВДоговорахКонтрагентов = бг_ИнформацияДоговорыКонтрагентов;
	КонецЕсли;
	Если СтрНайти(Форма.бг_ИменаДоступныхИсточников, "ВПунктахНазначения") Тогда
		Форма.бг_ИнформацияКоличествоСкидокВПунктахНазначения     = бг_ИнформацияПунктыНазначения;
	КонецЕсли;
	Если СтрНайти(Форма.бг_ИменаДоступныхИсточников, "ВКаналахПродаж") Тогда
		Форма.бг_ИнформацияКоличествоСкидокВКаналахПродаж         = бг_ИнформацияКаналыПродаж;
	КонецЕсли;
	Если СтрНайти(Форма.бг_ИменаДоступныхИсточников, "ВТерриториях") Тогда
		Форма.бг_ИнформацияКоличествоСкидокВТерриториях           = бг_ИнформацияТерритории;
	КонецЕсли;
	Если СтрНайти(Форма.бг_ИменаДоступныхИсточников, "ВСегментах") Тогда
		Форма.бг_ИнформацияКоличествоСкидокВСегментах   = бг_ИнформацияСегментыПартнеров;
	КонецЕсли;
#КонецВставки

КонецПроцедуры

&ИзменениеИКонтроль("СформироватьИнформационнуюНадписьИспользованиеСкидокНаценок")
Процедура бг_СформироватьИнформационнуюНадписьИспользованиеСкидокНаценок(ИнформацияОДействииСкидок,
	                                                                  ИспользованиеСкидкиНаценки,
	                                                                  ДополнительнаяКоманда = Неопределено,
	                                                                  ВыводитьПояснениеОбщегоСтатуса = Истина) Экспорт
	
	Если ИспользованиеСкидкиНаценки = Неопределено Тогда
		ИнформацияОДействииСкидок = "";
		Если ДополнительнаяКоманда = "НастроитьСкидки" Тогда
			ИнформацияОДействииСкидок = Новый ФорматированнаяСтрока(НСтр("ru = 'Настроить скидки (наценки)';
																		|en = 'Set up discounts (markups)'"),, ЦветаСтиля.ГиперссылкаЦвет,,"НастроитьСкидки");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ИспользоватьНесколькоСкладов                   = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьКартыЛояльности                    = ПолучитьФункциональнуюОпцию("ИспользоватьКартыЛояльности");
	ИспользоватьУпрощенныйРежим =   Не ИспользоватьНесколькоСкладов
	                              И Не ИспользоватьТиповыеСоглашенияСКлиентами
	                              И Не ИспользоватьИндивидуальныеСоглашенияСКлиентами
	                              И Не ИспользоватьКартыЛояльности;
#Вставка
	ИспользоватьУпрощенныйРежим = Ложь;
#КонецВставки
	
	ТекстНадписи = "";
	
	Если (ИспользованиеСкидкиНаценки.ДействуетНаСкладах = 0) 
		И (ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности = 0) 
		И (ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях = 0)
		И (ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях = 0)
#Вставка
		И (ИспользованиеСкидкиНаценки.бг_ДействуетПоКонтрагентам = 0) 
		И (ИспользованиеСкидкиНаценки.бг_ДействуетВДоговорахКонтрагентов = 0) 
		И (ИспользованиеСкидкиНаценки.бг_ДействуетВКаналахПродаж = 0)
		И (ИспользованиеСкидкиНаценки.бг_ДействуетВПунктахНазначения = 0)
		И (ИспользованиеСкидкиНаценки.бг_ДействуетВТерриториях = 0)
		И (ИспользованиеСкидкиНаценки.бг_ДействуетВСегментах = 0)
#КонецВставки
		И НЕ ИспользованиеСкидкиНаценки.ДействуетНаВсехСкладах  Тогда
		
		ТекстНадписи = ТекстНадписи + " " + НСтр("ru = 'Не предоставляется';
												|en = 'Not provided'");
		
	Иначе
		
		ТекстНадписи = ТекстНадписи + " " + НСтр("ru = 'Предоставляется';
												|en = 'Applied in'");
		ТребуетсяЗапятая = Ложь;
		
		Если НЕ ИспользованиеСкидкиНаценки.ДействуетНаВсехСкладах Тогда
			
			ТекстНадписи = ТекстНадписи + " ";
			
			Если ИспользованиеСкидкиНаценки.ДействуетНаСкладах > 0 Тогда
				
				ТекстНадписи = ТекстНадписи + НСтр("ru = 'получателям складов';
													|en = 'warehouse recipients'") + " (" + ИспользованиеСкидкиНаценки.ДействуетНаСкладах + ")";
				ТребуетсяЗапятая = Истина;
				
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности > 0 Тогда
				
				ТекстНадписи = ?(ТребуетсяЗапятая,ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр("ru = 'держателям карт лояльности';
													|en = 'loyalty card holders'") + " (" + ИспользованиеСкидкиНаценки.ДействуетВКартахЛояльности + ")";
				ТребуетсяЗапятая = Истина;
				
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях > 0 Тогда
				
				ТекстНадписи = ?(ТребуетсяЗапятая,ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр("ru = 'участникам типовых соглашений';
													|en = 'standard terms'") + " (" + ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях + ")";
				ТребуетсяЗапятая = Истина;
				
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях > 0 Тогда
				
				ТекстНадписи = ?(ТребуетсяЗапятая,ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр("ru = 'участникам индивидуальных соглашений';
													|en = 'individual terms'") + " (" + ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях + ")";
				ТребуетсяЗапятая = Истина;
				
			КонецЕсли;
#Вставка
			Если ИспользованиеСкидкиНаценки.бг_ДействуетПоКонтрагентам > 0 Тогда
				ТекстНадписи = ?(ТребуетсяЗапятая, ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр(
					"ru = 'получателям по контрагентам';
					|en = 'recipients in Counterparties'"
				) + " (" + ИспользованиеСкидкиНаценки.бг_ДействуетПоКонтрагентам + ")";
				ТребуетсяЗапятая = Истина;
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.бг_ДействуетВДоговорахКонтрагентов > 0 Тогда
				ТекстНадписи = ?(ТребуетсяЗапятая, ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр(
					"ru = 'сторонам договоров с покупателями';
					|en = 'counterparties of sale contracts'"
				) + " (" + ИспользованиеСкидкиНаценки.бг_ДействуетВДоговорахКонтрагентов + ")";
				ТребуетсяЗапятая = Истина;
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.бг_ДействуетВКаналахПродаж > 0 Тогда
				ТекстНадписи = ?(ТребуетсяЗапятая, ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр(
					"ru = 'получателям в каналах продаж';
					|en = 'recipients in sales channels'"
				) + " (" + ИспользованиеСкидкиНаценки.бг_ДействуетВКаналахПродаж + ")";
				ТребуетсяЗапятая = Истина;
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.бг_ДействуетВПунктахНазначения > 0 Тогда
				ТекстНадписи = ?(ТребуетсяЗапятая, ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр(
					"ru = 'получателям в пунктах назначения';
					|en = 'recipients in destination poits'"
				) + " (" + ИспользованиеСкидкиНаценки.бг_ДействуетВПунктахНазначения + ")";
				ТребуетсяЗапятая = Истина;
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.бг_ДействуетВТерриториях > 0 Тогда
				ТекстНадписи = ?(ТребуетсяЗапятая, ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр(
					"ru = 'получателям в территориях';
					|en = 'recipients in territories'"
				) + " (" + ИспользованиеСкидкиНаценки.бг_ДействуетВТерриториях + ")";
				ТребуетсяЗапятая = Истина;
			КонецЕсли;
			
			Если ИспользованиеСкидкиНаценки.бг_ДействуетВСегментах > 0 Тогда
				ТекстНадписи = ?(ТребуетсяЗапятая, ТекстНадписи + ", ", ТекстНадписи);
				ТекстНадписи = ТекстНадписи + НСтр(
					"ru = 'получателям в сегментах партнеров';
					|en = 'recipients in partner segments'"
				) + " (" + ИспользованиеСкидкиНаценки.бг_ДействуетВСегментах + ")";
				ТребуетсяЗапятая = Истина;
			КонецЕсли;
#КонецВставки
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Предоставляется всем клиентам';
								|en = 'Provided to all customers'");
			
			ШаблонПериода = НСтр("ru = '(с %1 %2 %3)';
								|en = '(with %1 %2 %3)'");
			ТекстНадписи = ТекстНадписи + " " + СтрШаблон(
			              ШаблонПериода,
			              Формат(ИспользованиеСкидкиНаценки.ДатаНачалаБезусловногоДействия, "ДЛФ=DD"),
			              ?(ИспользованиеСкидкиНаценки.ДатаОкончанияБезусловногоДействия = Дата(1, 1, 1),НСтр("ru = 'и';
																												|en = 'and'"),НСтр("ru = 'по';
																																|en = 'to'")),
			              ?(ИспользованиеСкидкиНаценки.ДатаОкончанияБезусловногоДействия = Дата(1, 1, 1),
			                 НСтр("ru = 'бессрочно';
									|en = 'permanent'"),
			                 Формат(ИспользованиеСкидкиНаценки.ДатаОкончанияБезусловногоДействия, "ДЛФ=DD")));
			
			Если ВыводитьПояснениеОбщегоСтатуса 
				И (ИспользованиеСкидкиНаценки.ВсегоНаСкладах > 0 
				ИЛИ ИспользованиеСкидкиНаценки.ВсегоВКартахЛояльности > 0
#Вставка
				ИЛИ ИспользованиеСкидкиНаценки.бг_ДействуетПоКонтрагентам > 0
				ИЛИ ИспользованиеСкидкиНаценки.бг_ДействуетВДоговорахКонтрагентов > 0
				ИЛИ ИспользованиеСкидкиНаценки.бг_ДействуетВКаналахПродаж > 0
				ИЛИ ИспользованиеСкидкиНаценки.бг_ДействуетВПунктахНазначения > 0
				ИЛИ ИспользованиеСкидкиНаценки.бг_ДействуетВТерриториях > 0
				ИЛИ ИспользованиеСкидкиНаценки.бг_ДействуетВСегментах > 0
#КонецВставки
				ИЛИ ИспользованиеСкидкиНаценки.ДействуетВТиповыхСоглашениях > 0
				ИЛИ ИспользованиеСкидкиНаценки.ДействуетВИндивидуальныхСоглашениях > 0)  Тогда
				
				Если ДополнительнаяКоманда = "НастроитьСкидки" Тогда
					ТекстПояснения = НСтр("ru = 'В период действия общего статуса настройки, сделанные в данной форме не актуальны.';
											|en = 'The settings in this form are not relevant when the overall status is valid.'");
				Иначе
					ТекстПояснения = НСтр("ru = 'В период действия общего статуса вышеуказанные уточнения не актуальны.';
											|en = 'The clarifications mentioned above are not relevant when the overall status is valid.'");
				КонецЕсли;
				
				ТекстНадписи = ТекстНадписи + "." + Символы.ПС + ТекстПояснения;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаИнформация  = Новый ФорматированнаяСтрока(ТекстНадписи + "  ",, ЦветаСтиля.ЦветТекстаПоля);
	
	Если ДополнительнаяКоманда <> Неопределено
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДействиеСкидокНаценок) Тогда
		
		Если ДополнительнаяКоманда = "Изменить" Тогда
			СтрокаИзменить = Новый ФорматированнаяСтрока(НСтр("ru = 'Изменить';
																|en = 'Change'"),, ЦветаСтиля.ГиперссылкаЦвет,,"Изменить");
		ИначеЕсли ДополнительнаяКоманда = "НастроитьСкидки" Тогда
			СтрокаИзменить = Новый ФорматированнаяСтрока(НСтр("ru = 'Настроить скидки (наценки)';
																|en = 'Set up discounts (markups)'"),, ЦветаСтиля.ГиперссылкаЦвет,,"НастроитьСкидки");
		ИначеЕсли ДополнительнаяКоманда = "ИзменитьОбщийСтатус" Тогда
			СтрокаИзменить = Новый ФорматированнаяСтрока(НСтр("ru = 'Изменить общий статус';
																|en = 'Change overall status'"),, ЦветаСтиля.ГиперссылкаЦвет,,"ИзменитьОбщийСтатус");
		Иначе
			СтрокаИзменить = "";
		КонецЕсли;
		
		ИнформацияОДействииСкидок = Новый ФорматированнаяСтрока(СтрокаИнформация, СтрокаИзменить);
	Иначе
		ИнформацияОДействииСкидок = СтрокаИнформация;
	КонецЕсли;

КонецПроцедуры

&Перед("ПрименитьЗначениеСкидкиКТовару")
Процедура бг_ПрименитьЗначениеСкидкиКТоваруПеред(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета)
	
	Разрядность = 2;
	КратностьРубля = 100;

	ПараметрыРасчета.Вставить("бг_СуммаНачислено", СуммаСкидки);
	СуммаСкидки = Окр(СуммаСкидки, Разрядность);
	
	СуммаСоСкидками    = ОстатокСуммыПоСтроке(СтрокаДерева, Товар, ПараметрыРасчета, Истина);
	ОстатокСуммыСкидки = Макс(СуммаСоСкидками - ?(СтрокаДерева.бг_НеУчитыватьПороги, 
		Товар.бг_МинимальнаяСумма, Товар.бг_ПредельнаяСумма), 0);
	Если ОстатокСуммыСкидки < СуммаСкидки Тогда
		СуммаСкидки = ОстатокСуммыСкидки;
	КонецЕсли;
	
	Если СтрокаДерева.бг_ОграничениеСкидки Тогда
		ОстатокСуммыСкидки = Макс(СуммаСоСкидками - Товар.Сумма
			* (КратностьРубля - СтрокаДерева.бг_ОграничениеСкидки) / КратностьРубля, 0);
		Если ОстатокСуммыСкидки < СуммаСкидки Тогда
			СуммаСкидки = ОстатокСуммыСкидки;
		КонецЕсли;
	КонецЕсли;
	
	// Сумма скидки д.б. кратна количеству
	Если Товар.Количество <> 0
		И СуммаСкидки / Товар.Количество <> Окр(СуммаСкидки / Товар.Количество, Разрядность) Тогда
		СуммаСкидки = Товар.Количество * Цел(СуммаСкидки / Товар.Количество * КратностьРубля) / КратностьРубля;
	КонецЕсли;
	
	// Учтем ограничения
	Если СтрокаДерева.бг_ОграничениеСуммыСкидки <> -1 Тогда
		ЗнакСкидки = ?(СуммаСкидки > 0, 1, -1); // Ограничение всегда положительное. Скидка может быть отрицательной в случае наценки.
		Если СтрокаДерева.бг_ОграничениеСуммыСкидки < СуммаСкидки * ЗнакСкидки Тогда
			СуммаСкидки = ЗнакСкидки * СтрокаДерева.бг_ОграничениеСуммыСкидки;
		КонецЕсли;
		СтрокаДерева.бг_ОграничениеСуммыСкидки = СтрокаДерева.бг_ОграничениеСуммыСкидки - СуммаСкидки * ЗнакСкидки;
	КонецЕсли;
		
КонецПроцедуры

&После("ПрименитьЗначениеСкидкиКТовару")
Процедура бг_ПрименитьЗначениеСкидкиКТоваруПосле(СтрокаДерева, СуммаСкидки, Товар, РезультатРасчета, ПараметрыРасчета)
	
	бг_СуммаНачислено = 0;
	Если НЕ ПараметрыРасчета.Свойство("бг_СуммаНачислено", бг_СуммаНачислено) Тогда
		бг_СуммаНачислено = СуммаСкидки;
	КонецЕсли;
	
	Если РезультатРасчета.Количество() Тогда
		СтрокаРезультата = РезультатРасчета[РезультатРасчета.Количество() - 1];
		СтрокаРезультата.бг_СуммаНачислено = бг_СуммаНачислено;
		СтрокаРезультата.Расшифровка[0].бг_СуммаНачислено = бг_СуммаНачислено;
		Если СтрокаДерева.бг_Накопительная <> бг_КонстантыПовтИсп.ЗначениеКонстанты("СуммоваяСкидкаCRM")
			И (СтрокаДерева.бг_Накопительная ИЛИ ПараметрыРасчета.Свойство("РаспределениеНакопительнойСкидки")) Тогда
			СтрокаРезультата.бг_СуммаСписанияНакопительнойСкидки = СтрокаРезультата.Сумма;
			СтрокаРезультата.Расшифровка[0].бг_СуммаНачислено = СтрокаРезультата.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыРасчета.Удалить("бг_СуммаНачислено");
	
КонецПроцедуры

// Функция выполняет объединения подчиненных таблиц данных.
//
// Возвращаемое значение:
//	ТаблицаЗначений - объединенная таблица данных:
//		* КлючСвязи - Число
//		* Сумма - Число
//		* Расшифровка - ТаблицаЗначений
//		* РеквизитДопУпорядочивания - Число
//
&ИзменениеИКонтроль("ТаблицаДанныхПоСпособуСовместногоПримененияДляДокументаВЦелом")
Функция бг_ТаблицаДанныхПоСпособуСовместногоПримененияДляДокументаВЦелом(СтрокаДерева)

	РезультатРасчета = Новый ТаблицаЗначений;
	РезультатРасчета.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число"));
#Вставка
	РезультатРасчета.Колонки.Добавить("бг_СуммаНачислено",         Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("бг_СуммаСписанияНакопительнойСкидки", Новый ОписаниеТипов("Число"));
#КонецВставки
	РезультатРасчета.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	РезультатРасчета.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("СтрокаДерева");
	Таблица.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));

	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл

		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа

			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;

			Если ПодчиненнаяСтрока.Управляемая И НЕ ПодчиненнаяСтрока.НазначенаПользователем Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.СтрокаДерева              = ПодчиненнаяСтрока;
		НоваяСтрока.РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;

		Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.РезультатРасчета Цикл
			Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаТаблицы.Сумма;
			Иначе
				Если СтрокаТаблицы.Действует Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + СтрокаТаблицы.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;

	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Таблица.Сортировать("Сумма Убыв, РеквизитДопУпорядочивания");
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Таблица.Сортировать("Сумма Возр, РеквизитДопУпорядочивания");
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Таблица.Сортировать("РеквизитДопУпорядочивания");
	КонецЕсли;

	Для Каждого СтрокаТЧ Из Таблица Цикл
		ЗаполнитьТаблицуДанныхПодчиненныхСтрок(РезультатРасчета, СтрокаТЧ.СтрокаДерева);
		Прервать;
	КонецЦикла;

	Возврат РезультатРасчета;

КонецФункции

#Область ЗапросыПодготовкиДанныхДляРасчета

&ИзменениеИКонтроль("ЗапросСкидкиНаценки")
Функция бг_ЗапросСкидкиНаценки(ПараметрыРасчета, РасширенныйВариант)
	
	Запрос = Новый Запрос(
	"////#123456789#//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка                    КАК Ссылка,
	|	СкидкиНаценки.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.ВариантСовместногоПрименения                  КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.ВариантРасчетаРезультатаСовместногоПрименения КАК ВариантРасчетаРезультатаСовместногоПрименения,
	|	СкидкиНаценки.ПометкаУдаления        КАК ПометкаУдаления,
	|	СкидкиНаценки.СпособПредоставления   КАК СпособПредоставления,
	|	СкидкиНаценки.СпособПримененияСкидки КАК СпособПримененияСкидки,
	|	СкидкиНаценки.ПрименятьУмножениеВРамкахВышестоящейГруппы КАК ПрименятьУмножениеВРамкахВышестоящейГруппы,
	|	&РасширенныйВариант1,
	|	СкидкиНаценки.ТочностьОкругления        КАК ТочностьОкругления,
	|	СкидкиНаценки.ВариантОкругления         КАК ВариантОкругления,
	|	СкидкиНаценки.ПсихологическоеОкругление КАК ПсихологическоеОкругление,
	|	СкидкиНаценки.ЭтоГруппа                    КАК ЭтоГруппа,
	|	СкидкиНаценки.Управляемая                  КАК Управляемая,
	|	ВЫБОР
	|		КОГДА СкидкиНаценки.ССЫЛКА В(&УправляемыеСкидки) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК НазначенаПользователем,
	|	СкидкиНаценки.ВидЦены                           КАК ВидЦены,
	|	СкидкиНаценки.СегментПодарков                   КАК СегментПодарков,
	|	СкидкиНаценки.СегментНоменклатурыОграничения    КАК СегментНоменклатурыОграничения,
	|	СкидкиНаценки.ИспользоватьКратность             КАК ИспользоватьКратность,
	|	СкидкиНаценки.УсловиеДляСкидкиКоличеством       КАК УсловиеДляСкидкиКоличеством,
	|	СкидкиНаценки.ВариантОтбораНоменклатуры         КАК ВариантОтбораНоменклатуры,
	|	&РасширенныйВариант2,
	|	СкидкиНаценки.ВалютаПредоставления КАК ВалютаПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|		,&РасширенныйВариант3
	|	
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&СкидкиНаценки)
#Вставка
	|//бг_РасширенныйВариант4
#КонецВставки
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиНаценки.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	СкидкиНаценки.Ссылка ИЕРАРХИЯ");
	
	Запрос.Параметры.Вставить("СкидкиНаценки",     ПараметрыРасчета.СкидкиНаценки);
	Запрос.Параметры.Вставить("УправляемыеСкидки", ПараметрыРасчета.УправляемыеСкидки);
	
	Если РасширенныйВариант Тогда
		
		Запрос.Параметры.Вставить("ВалютаДокумента", ПараметрыРасчета.ВалютаДокумента);
#Вставка
		бг_РасчетСкидок.ПодставитьОстаткиНакопительныхСкидок(Запрос, ПараметрыРасчета);
		бг_РасчетСкидок.ДобавитьУсловияПоОграничениям(Запрос, ПараметрыРасчета);
#КонецВставки
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РасширенныйВариант1,", 
		"ВЫБОР
		|		КОГДА СкидкиНаценки.СпособПримененияСкидки = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок)
		|			И (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма) ИЛИ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
		|			ТОГДА СкидкиНаценки.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютПредоставления.КурсЗнаменатель, 1))
		|		ИНАЧЕ СкидкиНаценки.ЗначениеСкидкиНаценки
		|	КОНЕЦ КАК ЗначениеСкидкиНаценки,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РасширенныйВариант2,", 
		"СкидкиНаценки.ПараметрыВнешнейОбработки         КАК ПараметрыВнешнейОбработки,
		|	СкидкиНаценки.УстановленДополнительныйОтбор     КАК УстановленДополнительныйОтбор,
		|	СкидкиНаценки.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных,
		|	СкидкиНаценки.УчитыватьХарактеристики КАК УчитыватьХарактеристики,
		|	БонусныеПрограммыЛояльности.ВалютаКонвертацииБонусов      КАК ВалютаКонвертацииБонусов,
		|	БонусныеПрограммыЛояльности.КурсКонвертацииБонусовВВалюту КАК КурсКонвертацииБонусовВВалюту,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&РасширенныйВариант3", 
		"ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
		|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
		|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БонусныеПрограммыЛояльности КАК БонусныеПрограммыЛояльности
		|		ПО БонусныеПрограммыЛояльности.Ссылка = СкидкиНаценки.БонуснаяПрограммаЛояльности");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РасширенныйВариант1,", 
		"СкидкиНаценки.ЗначениеСкидкиНаценки,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РасширенныйВариант2,", "");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&РасширенныйВариант3", "");
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

&ИзменениеИКонтроль("ЗапросВременнаяТаблицаТовары")
Функция бг_ЗапросВременнаяТаблицаТовары(ПараметрыРасчета, ОсновныеТаблицы)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	Товары.Склад              КАК Склад,
	|
	|	ВЫБОР
	|		КОГДА Товары.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) ТОГДА
	|			9999999999
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ТекущаяДата, Товары.СрокГодности, ДЕНЬ) КАК Число(10))
	|	КОНЕЦ КАК КоличествоДнейДоОкончанияСрокаГодности,
	|
	|	Товары.ВидЦены            КАК ВидЦены,
#Вставка
	// при проверке условий применения скидок необходимо учитывать отмененные строки
	|	Товары.Отменено           КАК Отменено,
#КонецВставки
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена                             КАК ЦенаЗаУпаковку,
	|	Товары.КоличествоУпаковок * Товары.Цена КАК Сумма
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&ТоварыСоСрокомГодности КАК Товары
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|");

	ТоварыСоСрокомГодности = ПараметрыРасчета.Товары.Скопировать(); // ТаблицаЗначений
	ТоварыСоСрокомГодности.Колонки.Добавить("СрокГодности", Новый ОписаниеТипов("Дата"));
	Для каждого СтрокаТоваров Из ТоварыСоСрокомГодности Цикл
		Если ЗначениеЗаполнено(СтрокаТоваров.Серия) Тогда
			СтрокаТоваров.СрокГодности = СтрокаТоваров.Серия.ГоденДо;
		КонецЕсли;
	КонецЦикла;

	Запрос.Параметры.Вставить("ТоварыСоСрокомГодности", ТоварыСоСрокомГодности);
	Запрос.Параметры.Вставить("ТекущаяДата",            ПараметрыРасчета.ТекущаяДата);

	ОсновныеТаблицы.Запрос.Параметры.Вставить("ТоварыСоСрокомГодности", ТоварыСоСрокомГодности);

	Возврат Запрос;

КонецФункции

&ИзменениеИКонтроль("ЗапросСкидкиНаценкиПоЦеновымГруппам")
Функция бг_ЗапросСкидкиНаценкиПоЦеновымГруппам(ПараметрыРасчета)

	Запрос = Новый Запрос(
	"////#123456789#//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УточненияПоЦеновымГруппам.Ссылка        КАК СкидкаНаценка,
	|	УточненияПоЦеновымГруппам.ЦеноваяГруппа КАК Ключ,
#Вставка
	|	УточненияПоЦеновымГруппам.Бренд_МТ КАК Бренд_МТ,
	|	УточненияПоЦеновымГруппам.Вкус КАК Вкус,
	|	УточненияПоЦеновымГруппам.СкюМТ КАК СкюМТ,
#КонецВставки
	|	ВЫБОР
	|		КОГДА (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма) ИЛИ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
	|			ТОГДА УточненияПоЦеновымГруппам.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютДокумента.КурсЗнаменатель, 1) / (ЕСТЬNULL(КурсыВалютДокумента.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютПредоставления.КурсЗнаменатель, 1))
	|		ИНАЧЕ УточненияПоЦеновымГруппам.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|		
#Удаление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК УточненияПоЦеновымГруппам
#КонецУдаления
#Вставка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.бг_ЦеновыеГруппы КАК УточненияПоЦеновымГруппам
#КонецВставки
	|		ПО СкидкиНаценки.Ссылка = УточненияПоЦеновымГруппам.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&СкидкиНаценки)
	|УПОРЯДОЧИТЬ ПО
	|	УточненияПоЦеновымГруппам.Ссылка
#Вставка
	// Упорядочим, чтобы для смешанной схемы правильно срабатывали приоритеты
	|	,УточненияПоЦеновымГруппам.СкюМТ УБЫВ,
	|	УточненияПоЦеновымГруппам.Вкус УБЫВ,
	|	УточненияПоЦеновымГруппам.Бренд_МТ УБЫВ
#КонецВставки
	|");

	Запрос.Параметры.Вставить("СкидкиНаценки", ПараметрыРасчета.СкидкиНаценки);
	Запрос.Параметры.Вставить("ВалютаДокумента", ПараметрыРасчета.ВалютаДокумента);

	Возврат Запрос;

КонецФункции

#КонецОбласти

#Область Прочее

Процедура бг_ДобавитьКолонкуНачисленнойСуммы(Таблица)
	Если Таблица.Колонки.Найти("бг_СуммаНачислено") = Неопределено Тогда
		Таблица.Колонки.Добавить("бг_СуммаНачислено", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если Таблица.Колонки.Найти("бг_СуммаСписанияНакопительнойСкидки") = Неопределено Тогда
		Таблица.Колонки.Добавить("бг_СуммаСписанияНакопительнойСкидки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
КонецПроцедуры

&Вместо("ПустаяТаблицаСкидокСРасшифровкой")
Функция бг_ПустаяТаблицаСкидокСРасшифровкой(ПараметрыРасчета)
	Результат = ПродолжитьВызов(ПараметрыРасчета);
	бг_ДобавитьКолонкуНачисленнойСуммы(Результат);
	Возврат Результат;
КонецФункции

&Вместо("ПустаяТаблицаРасшифровка")
Функция бг_ПустаяТаблицаРасшифровка(ПараметрыРасчета)
	Результат = ПродолжитьВызов(ПараметрыРасчета);
	бг_ДобавитьКолонкуНачисленнойСуммы(Результат);
	Возврат Результат;
КонецФункции

&Вместо("ПустаяТаблицаСкидкиНаценки")
Функция бг_ПустаяТаблицаСкидкиНаценки(ПараметрыРасчета)
	Результат = ПродолжитьВызов(ПараметрыРасчета);
	бг_ДобавитьКолонкуНачисленнойСуммы(Результат);
	Возврат Результат;
КонецФункции

&ИзменениеИКонтроль("ПустаяТаблицаУточненияЗначенияСкидкиНаценки")
Функция бг_ПустаяТаблицаУточненияЗначенияСкидкиНаценки()

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ключ");
#Вставка
	ТЗ.Колонки.Добавить("Бренд_МТ", Новый ОписаниеТипов("СправочникСсылка.бг_ЕК_Бренды_БрендыМТ"));
	ТЗ.Колонки.Добавить("Вкус",     Новый ОписаниеТипов("СправочникСсылка.бг_ЕК_СКЮ_Вкусы"));
	ТЗ.Колонки.Добавить("СкюМТ",    Новый ОписаниеТипов("СправочникСсылка.бг_ЕК_СКЮ_СкюМТ"));
#КонецВставки
	ТЗ.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));

	Возврат ТЗ;

КонецФункции

#КонецОбласти

#Область ПроцедурыРасчетаСкидокНаценокПоДокументам

&ИзменениеИКонтроль("РассчитатьПоЗаказуКлиента")
Функция бг_РассчитатьПоЗаказуКлиента(Объект, ВходныеПараметры)

	УстановитьПривилегированныйРежим(Истина);

	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");

	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");

	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	&ПоляНабора,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	Товары.Склад              КАК Склад,
	|	Товары.ВидЦены            КАК ВидЦены,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
#Вставка
	|	ВЫБОР Товары.ДатаОтгрузки
	|		КОГДА ДАТАВРЕМЯ(1, 1, 1) ТОГДА &ДатаДокумента
	|		ИНАЧЕ Товары.ДатаОтгрузки
	|	КОНЕЦ ДатаОтгрузки,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.бг_РаспределятьСуммовуюСкидку,
	|	Товары.бг_ТребуемаяЦена,
	|	Товары.Отменено,
#КонецВставки
	|	Товары.Цена                             КАК Цена,
	|	Товары.Цена * Товары.КоличествоУпаковок КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
#Вставка
	|//ТекстЗапросаВременныхТаблицОграничений////////////////////////////////////////
#КонецВставки
	|ВЫБРАТЬ
#Вставка
	|	ISNULL(ВЫРАЗИТЬ(Таблица.СтавкаНДС КАК Справочник.СтавкиНДС).Ставка, 0) КАК СтавкаНДС,
	|	Таблица.бг_РаспределятьСуммовуюСкидку,
	|	Таблица.бг_ТребуемаяЦена,
	|	Таблица.Отменено,
#КонецВставки
	|	Таблица.КлючСвязи,
	|	&ПоляТаблицы,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|,&ИмяВременнойТаблицы
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		,&Соединение
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА &ВозвратТары ТОГДА
	|			Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|; ВЫБРАТЬ &ЗапросНаборы
	|";

	ТаблицаТовары = Объект.Товары.Выгрузить();

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("ВозвратТары", Объект.ВернутьМногооборотнуюТару);
#Вставка

	бг_РасчетСкидок.ПодставитьОграниченияЦенСкидокНаценок(ТекстЗапроса);
	
	ПараметрыЗапроса = бг_ПараметрыЗапросаСкидокНаценок(Объект, ПараметрыЗапроса);
	СкидкиНаценки = бг_СкидкиНаценкиДляОптовойТорговли(ПараметрыЗапроса);
	
	бг_ОчиститьСкидкиНаценкиДляОптовойТорговлиПоКодамСтрокБюджета(Объект, СкидкиНаценки);
#КонецВставки
	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);

#Удаление
	СкидкиНаценки = СкидкиНаценкиДляОптовойТорговли(
	Объект.Дата,
	Объект.Склад,
	Объект.Соглашение,
	Объект.КартаЛояльности);
#КонецУдаления

	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Объект.Соглашение;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;

	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;

	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);

	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Объект.ГрафикОплаты;

	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;

	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.БазоваяВалюта              = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
#Вставка
	// параметры, специфичные для вида документа и требующие типовых имён
	бг_ПараметрыЗапросаСкидокНаценок(Объект, ПараметрыРасчета);
	
	// вспомогательные вычисляемые параметры
	бг_РасчетСкидок.ДополнитьПараметрыРасчетаСкидокНаценок(ПараметрыРасчета);
#КонецВставки

	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);

	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;

	Если ВходныеПараметры.ПрименятьКОбъекту Тогда

		ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидкиНаценки);

	КонецЕсли;

	Возврат ПримененныеСкидкиНаценки;

КонецФункции

&После("ПрименитьРезультатРасчетаКЗаказуКлиента")
Процедура бг_ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидкиНаценки)
	бг_РасчетСкидок.ЗаполнитьИнформационныеПоляСкидок(Объект);
КонецПроцедуры

&ИзменениеИКонтроль("РассчитатьПоРеализацииТоваровУслуг")
Функция бг_РассчитатьПоРеализацииТоваровУслуг(Объект, ВходныеПараметры)

	Если ВходныеПараметры.Свойство("ЗаполнитьРеализациюПоЗаказу") 
		И ВходныеПараметры.ЗаполнитьРеализациюПоЗаказу Тогда

		Возврат РассчитатьПоРеализацииТоваровУслугПоЗаказу(Объект);

	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары", ВходныеПараметры.РеализацияСверхЗаказа);

	ИспользоватьНаборы = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");

	// Обработка табличной части "Товары".
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КодСтроки          КАК КодСтроки,
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	&ПоляНабора,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Серия              КАК Серия,
	|	Товары.Склад              КАК Склад,
	|	Товары.ВидЦены            КАК ВидЦены,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
#Вставка
	|	&ДатаДокумента ДатаОтгрузки,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
#КонецВставки
	|	Товары.Цена                             КАК Цена,
	|	Товары.КоличествоУпаковок * Товары.Цена КАК Сумма
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
#Вставка
	|//ТекстЗапросаВременныхТаблицОграничений////////////////////////////////////////
#КонецВставки
	|ВЫБРАТЬ
#Вставка
	|	ISNULL(ВЫРАЗИТЬ(Таблица.СтавкаНДС КАК Справочник.СтавкиНДС).Ставка, 0) КАК СтавкаНДС,
	|	0 КАК бг_ТребуемаяЦена,
	|	Ложь КАК Отменено,
#КонецВставки
	|	Таблица.КлючСвязи,
	|	&ПоляТаблицы,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Упаковка,
	|	Таблица.Серия,
	|	Таблица.Склад,
	|	Таблица.ВидЦены,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Таблица.Количество,
	|	Таблица.КоличествоУпаковок,
	|	Таблица.Цена,
	|	Таблица.Сумма
	|,&ИмяВременнойТаблицы
	|ИЗ
	|	ВТТовары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО СправочникНоменклатура.Ссылка = Таблица.Номенклатура
	|		,&Соединение
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА &ВозвратТары ТОГДА
	|			Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ
	|	И ВЫБОР 
	|		КОГДА &РеализацияСверхЗаказа ТОГДА 
	|			Таблица.КодСтроки = 0 
	|		ИНАЧЕ 
	|			ИСТИНА
	|	КОНЕЦ
	|; ВЫБРАТЬ &ЗапросНаборы
	|";

	ТаблицаТовары = Объект.Товары.Выгрузить();

	ПараметрыЗапроса = ПараметрыРасчета();
	ПараметрыЗапроса.Вставить("Товары", ТаблицаТовары);
	ПараметрыЗапроса.Вставить("РеализацияСверхЗаказа", ВходныеПараметры.РеализацияСверхЗаказа);
	ПараметрыЗапроса.Вставить("ВозвратТары", Объект.ВернутьМногооборотнуюТару);
#Вставка
	ПараметрыЗапроса.Вставить("ДатаДокумента", ПолучитьТекущуюДатуОбъекта(Объект));
	ПараметрыЗапроса.Вставить("Организация",        Объект.Организация);
	ПараметрыЗапроса.Вставить("Партнер",            Объект.Партнер);
	ПараметрыЗапроса.Вставить("Соглашение",         Объект.Соглашение);
	ПараметрыЗапроса.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыЗапроса.Вставить("Договор",            Объект.Договор);
	ПараметрыЗапроса.Вставить("Склад",              Объект.Склад);
	ПараметрыЗапроса.Вставить("бг_ПунктНазначения", Объект.бг_ПунктНазначения);
	ПараметрыЗапроса.Вставить("бг_КаналПродаж",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.бг_ПунктНазначения, "КаналПродаж"));
	ПараметрыЗапроса.Вставить("КартаЛояльности",    Объект.КартаЛояльности);
	ПараметрыЗапроса.Вставить("ЦенаВключаетНДС",    Объект.ЦенаВключаетНДС);
	ПараметрыЗапроса.Вставить("ТипЛицензии",        Неопределено);
	ПараметрыЗапроса.Вставить("Регистратор", Объект.Ссылка);
	
	бг_РасчетСкидок.ПодставитьОграниченияЦенСкидокНаценок(ТекстЗапроса);
	
	СкидкиНаценки = бг_СкидкиНаценкиДляОптовойТорговли(ПараметрыЗапроса);
#КонецВставки

	ДанныеПоТоварамИНаборам = ДанныеПоТоварамИНаборам(ТекстЗапроса, ПараметрыЗапроса, ИспользоватьНаборы);

#Удаление
	СкидкиНаценки = СкидкиНаценкиДляОптовойТорговли(
	Объект.Дата,
	Объект.Склад,
	Объект.Соглашение,
	Объект.КартаЛояльности);
#КонецУдаления

	ПараметрыРасчета = ПараметрыРасчета();
	ПараметрыРасчета.СкидкиНаценки = СкидкиНаценки;
	ПараметрыРасчета.Партнер       = Объект.Партнер;
	ПараметрыРасчета.Соглашение    = Объект.Соглашение;
	ПараметрыРасчета.Регистратор   = Объект.Ссылка;

	// Для скидки "За форму оплаты".
	ПараметрыРасчета.ФормаОплаты = Объект.ФормаОплаты;

	// Для скидки "За время продажи".
	ПараметрыРасчета.ДеньНедели   = Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1);
	ПараметрыРасчета.ТекущееВремя = ПолучитьТекущееВремяОбъекта(Объект);
	ПараметрыРасчета.ТекущаяДата  = ПолучитьТекущуюДатуОбъекта(Объект);

	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.ГрафикОплаты = Неопределено;

	// Карты лояльности
	ПараметрыРасчета.КартаЛояльности = Объект.КартаЛояльности;

	ПараметрыРасчета.Товары                     = ДанныеПоТоварамИНаборам.Товары;
	ПараметрыРасчета.ВалютаДокумента            = Объект.Валюта;
	ПараметрыРасчета.ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ПараметрыРасчета.БазоваяВалюта              = ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию();
	ПараметрыРасчета.Пользователь               = Объект.Менеджер;
	ПараметрыРасчета.Объект                     = Объект;
#Вставка
	// параметры, специфичные для документа и требующие типовых имён
	ПараметрыРасчета.Вставить("Организация", Объект.Организация);
	ПараметрыРасчета.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыРасчета.Вставить("Склад",       Объект.Склад);
	ПараметрыРасчета.Вставить("Договор",     Объект.Договор);
	ПараметрыРасчета.Вставить("бг_ПунктНазначения", Объект.бг_ПунктНазначения);
	ПараметрыРасчета.Вставить("бг_ДоступнаяСуммоваяСкидка", 0);
	ПараметрыРасчета.Вставить("ЦенаВключаетНДС",    Объект.ЦенаВключаетНДС);

	// вспомогательные вычисляемые параметры
	бг_РасчетСкидок.ДополнитьПараметрыРасчетаСкидокНаценок(ПараметрыРасчета);
#КонецВставки

	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);

	Если ИспользоватьНаборы И НЕ ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		РаспределитьСкидкиНабораПоКомплектующим(ПримененныеСкидкиНаценки, ДанныеПоТоварамИНаборам.СоответствиеКлючей, ТаблицаТовары);
	КонецЕсли;

	Если ВходныеПараметры.ПрименятьКОбъекту Тогда

		ПрименитьРезультатРасчетаКРеализацииТоваровУслуг(Объект, ПримененныеСкидкиНаценки, ВходныеПараметры.РеализацияСверхЗаказа);

	КонецЕсли;

	Возврат ПримененныеСкидкиНаценки;

КонецФункции

#КонецОбласти

#Область ФункцииРасчетаСкидокНаценокПоДеревуСкидокНаценок

&ИзменениеИКонтроль("ОбъединитьРезультатыРасчетаПодчиненныхСтрок")
Функция бг_ОбъединитьРезультатыРасчетаПодчиненныхСтрок(СтрокаДерева)

	РезультатРасчета = Новый ТаблицаЗначений;
	РезультатРасчета.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число"));
	РезультатРасчета.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	РезультатРасчета.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
#Вставка
	// Если скидка пришла в результате распределения с другой номенклатуры, то она не должна ничего вытеснять	
	// В этом случае бг_СуммаНачислено = 0
	РезультатРасчета.Колонки.Добавить("бг_СуммаНачислено",         Новый ОписаниеТипов("Число"));
#КонецВставки

	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл

		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа

			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;

			Если ПодчиненнаяСтрока.Управляемая И НЕ ПодчиненнаяСтрока.НазначенаПользователем Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		ЗаполнитьТаблицуДанныхПодчиненныхСтрок(РезультатРасчета, ПодчиненнаяСтрока);

	КонецЦикла;

	Возврат РезультатРасчета;

КонецФункции

&ИзменениеИКонтроль("РассчитатьДеревоСкидок")
Функция бг_РассчитатьДеревоСкидок(ДеревоСкидок, ПараметрыРасчета)

	РассчитатьСкидкиРекурсивно(ДеревоСкидок, ПараметрыРасчета);

	// На верхнем уровне только одна корневая группа.
	ЕстьРезультат = ДеревоСкидок.Строки.Количество() > 0;

	Если ЕстьРезультат Тогда
		РезультатРасчета = ДеревоСкидок.Строки[0].РезультатРасчета;
	КонецЕсли;

	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ТЗ.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("ЭтоСообщение",  Новый ОписаниеТипов("Булево"));
#Вставка
	ТЗ.Колонки.Добавить("бг_СуммаНачислено", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("бг_СуммаСписанияНакопительнойСкидки", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("бг_БлокируетСуммовыеСкидки", Новый ОписаниеТипов("Булево"));
#КонецВставки

	Если ЕстьРезультат Тогда
		Для Каждого СтрокаТаблицы Из РезультатРасчета Цикл
			Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл
#Вставка
				// не будем записывать пустые скидки в тч СкидкиНаценки документа
				Если СтрокаСкидкиНаценки.Сумма = 0
					И СтрокаСкидкиНаценки.бг_СуммаНачислено = 0
					И СтрокаСкидкиНаценки.бг_СуммаСписанияНакопительнойСкидки = 0
					Тогда
					Продолжить;
				КонецЕсли;
#КонецВставки
				НоваяСтрока               = ТЗ.Добавить();
				НоваяСтрока.КлючСвязи     = СтрокаТаблицы.КлючСвязи;
				НоваяСтрока.СкидкаНаценка = СтрокаСкидкиНаценки.СкидкаНаценка;
				НоваяСтрока.Сумма         = СтрокаСкидкиНаценки.Сумма;
#Вставка
				// дополнительная информация о скидках
				НоваяСтрока.бг_СуммаНачислено = СтрокаСкидкиНаценки.бг_СуммаНачислено;
				НоваяСтрока.бг_СуммаСписанияНакопительнойСкидки = СтрокаСкидкиНаценки.бг_СуммаСписанияНакопительнойСкидки;
				// Хранить признак в расшифровке решено не делать, т.к. это потребует изменения большлго количества типовых методов
				НоваяСтрока.бг_БлокируетСуммовыеСкидки = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаСкидкиНаценки.СкидкаНаценка, "бг_БлокируетСуммовыеСкидки");
#КонецВставки
				НоваяСтрока.ЭтоСообщение  = СтрокаСкидкиНаценки.ЭтоСообщение;
			КонецЦикла;
		КонецЦикла;
#Удаление
		ТЗ.Свернуть("КлючСвязи, СкидкаНаценка, ЭтоСообщение", "Сумма");
#КонецУдаления
#Вставка
		ТЗ.Свернуть("КлючСвязи, СкидкаНаценка, ЭтоСообщение, бг_БлокируетСуммовыеСкидки", 
			"Сумма, бг_СуммаНачислено, бг_СуммаСписанияНакопительнойСкидки");
#КонецВставки
	КонецЕсли;

	ТЗ.Колонки.Добавить("НапомнитьПозже", Новый ОписаниеТипов("Булево"));
	ТЗ.Колонки.Добавить("СпособПримененияСкидки", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПримененияСкидокНаценок"));

	Если ЕстьРезультат Тогда
		Для Каждого СтрокаТЧ Из ТЗ Цикл
			СтрокаСкидкаНаценка = ДеревоСкидок.Строки.Найти(СтрокаТЧ.СкидкаНаценка, "Ссылка", Истина);
			СтрокаТЧ.СпособПримененияСкидки = СтрокаСкидкаНаценка.СпособПримененияСкидки;
		КонецЦикла;
#Вставка
		бг_РасчетСкидок.РаспределитьОстаткиНакопительныхСкидок(ДеревоСкидок, ТЗ, ПараметрыРасчета);
		бг_РасчетСкидок.УдалитьЛишниеДанныеВДеревеСкидок(ДеревоСкидок.Строки);
#КонецВставки
	КонецЕсли;

	СохранитьДанныеОВыбранныхУправляемыхСкидках(ТЗ, ПараметрыРасчета);

	ВозвращаемыеДанные = Новый Структура;
	ВозвращаемыеДанные.Вставить("ДеревоСкидок",         ДеревоСкидок);
	ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
	ВозвращаемыеДанные.Вставить("ПараметрыРасчета",     ПараметрыРасчета);

	Возврат ВозвращаемыеДанные;

КонецФункции

&Вместо("РассчитатьСкидку")
Процедура бг_РассчитатьСкидку(СтрокаДерева, ПараметрыРасчета)
	// в рс бг_МаксимальныеПроцентыСкидок установлен максимальный размер скидки равный нулю
	// чтобы это условие распространялось не только на скидки, но и на наценки
	Если ПараметрыРасчета.Товары.Итог("бг_ПредельнаяСумма") = ПараметрыРасчета.Товары.Итог("Сумма") Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаДерева.бг_Действующая Тогда
		ПродолжитьВызов(СтрокаДерева, ПараметрыРасчета);
	Иначе
		СтрокаДерева.Рассчитано       = Ложь;
		СтрокаДерева.РезультатРасчета = ПустаяТаблицаСкидокСРасшифровкой(ПараметрыРасчета);
	КонецЕсли;
КонецПроцедуры

&ИзменениеИКонтроль("ЗначениеСкидкиНаценки")
Функция бг_ЗначениеСкидкиНаценки(СтрокаДерева, СтрокаТЧ, ПараметрыРасчета)

	ЗначениеСкидкиНаценки = СтрокаДерева.ЗначениеСкидкиНаценки;

	Если ПараметрыРасчета.ИспользоватьЦеновыеГруппы Тогда
		УточненияЗначенияСкидкиНаценки = ПараметрыРасчета.УточненияЗначенияСкидкиНаценки.Получить(СтрокаДерева.Ссылка);
#Вставка
		бг_КлючСтрокиТЧ = СкидкиНаценкиПовтИсп.бг_ИмяПоляЦеновойГруппы(СтрокаДерева.бг_ИсточникЦеновойГруппы);
		Если ПустаяСтрока(бг_КлючСтрокиТЧ) Тогда
			Возврат ЗначениеСкидкиНаценки;
		Иначе
			бг_КлючСтрокиТЧ = СтрокаТЧ[бг_КлючСтрокиТЧ];
		КонецЕсли;
#КонецВставки
		Если УточненияЗначенияСкидкиНаценки <> Неопределено Тогда
#Вставка
			Если СтрокаДерева.бг_ИсточникЦеновойГруппы = Перечисления.бг_ИсточникиЦеновойГруппы.Смешанный Тогда
				МассивПоиска = Новый Массив;
				МассивПоиска.Добавить(Новый Структура("СкюМТ", СтрокаТЧ.бг_SKU_MT));
				МассивПоиска.Добавить(Новый Структура("Ключ, Бренд_МТ, Вкус, СкюМТ", 
					бг_КлючСтрокиТЧ, СтрокаТЧ.бг_BrandMT, СтрокаТЧ.бг_Вкус, Справочники.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка()));
				МассивПоиска.Добавить(Новый Структура("Ключ, Бренд_МТ, Вкус, СкюМТ", 
					бг_КлючСтрокиТЧ, СтрокаТЧ.бг_BrandMT, Справочники.бг_ЕК_СКЮ_Вкусы.ПустаяСсылка(), 
					Справочники.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка()));
				МассивПоиска.Добавить(Новый Структура("Ключ, Бренд_МТ, Вкус, СкюМТ", 
					бг_КлючСтрокиТЧ, Справочники.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка(), Справочники.бг_ЕК_СКЮ_Вкусы.ПустаяСсылка(), 
					Справочники.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка()));
				МассивПоиска.Добавить(Новый Структура("Ключ, Бренд_МТ, Вкус, СкюМТ",
					бг_КлючСтрокиТЧ, СтрокаТЧ.бг_BrandMT, Справочники.бг_ЕК_СКЮ_Вкусы.ПустаяСсылка(), 
					Справочники.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка()));
			Иначе
				МассивПоиска.Добавить(Новый Структура("Ключ", бг_КлючСтрокиТЧ));
			КонецЕсли;
			
			Для каждого ЭлементПоиска Из МассивПоиска Цикл
				
				НайденныеСтроки = УточненияЗначенияСкидкиНаценки.НайтиСтроки(ЭлементПоиска);
				Если НайденныеСтроки.Количество() <> 0 Тогда
					Возврат НайденныеСтроки[0].Значение;
				КонецЕсли;
				
			КонецЦикла;
#КонецВставки
			Для Каждого Уточнение Из УточненияЗначенияСкидкиНаценки Цикл
				Если Уточнение.Ключ = СтрокаТЧ.ЦеноваяГруппа Тогда
					ЗначениеСкидкиНаценки = Уточнение.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеСкидкиНаценки;

КонецФункции

#КонецОбласти

#Область ЗапросыПроверкиУсловийПредоставленияСкидок

// Процедура - бг_Очистить скидки наценки для оптовой торговли по кодам строк бюджета
// Из таблицы действующих скидок, удаляются, не прошедшие по условию - код строк бюджета 
// Вызывается из форм документов.
//
// Параметры:
//  Объект - ДокументОбъект, ДанныеФормыСтруктура - Объект, из которого вызывается рассчет скидок. 
//  СкидкиНаценки - Массив - Массив из Справочник.СкидкиНаценки 
//
Процедура бг_ОчиститьСкидкиНаценкиДляОптовойТорговлиПоКодамСтрокБюджета(Объект, СкидкиНаценки)	
	
	КодыСтрокБюджета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Объект.бг_КодыСтрокБюджета, ";");
    ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СкидкиНаценки);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокКодовСтрокБюджета"	, КодыСтрокБюджета);
	Запрос.УстановитьПараметр("СкидкиНаценки"			, СкидкиНаценки);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&СкидкиНаценки)
	|	И НЕ ВЫРАЗИТЬ(СкидкиНаценки.бг_КодСтрокиБюджета КАК СТРОКА(12)) В (&СписокКодовСтрокБюджета)
	|	И СкидкиНаценки.бг_ТребуетсяПодтверждениеМТ"; 
	
	СкидкиНаценкиКУдалению = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаСкидка Из СкидкиНаценкиКУдалению Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СкидкиНаценки, СтрокаСкидка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаУсловийСкидокНаценок

#КонецОбласти

#Область бг_ИсточникиСкидокНаценок

Функция бг_НовоеОписаниеДинамическогоСписка(ИмяГруппы, ИмяОсновнойТаблицы)
	НовоеОписание = Новый Структура;
	НовоеОписание.Вставить("ИмяГруппы",          ИмяГруппы);
	НовоеОписание.Вставить("Заголовок",          "");
	НовоеОписание.Вставить("ЗаголовокСтраницы",  "");
	НовоеОписание.Вставить("Картинка",           Новый Картинка);
	НовоеОписание.Вставить("ИмяОсновнойТаблицы", ИмяОсновнойТаблицы);
	НовоеОписание.Вставить("ПоляЗапроса",        Новый Структура);
	НовоеОписание.Вставить("УсловиеЗапроса",     "ИСТИНА");
	
	Возврат НовоеОписание;
КонецФункции

Функция бг_НовоеОписаниеПоляЗапросаДинамическогоСписка(Путь, Заголовок)
	Возврат Новый Структура("Путь,Заголовок", Путь, Заголовок);
КонецФункции

Функция бг_ОписанияДополнительныхДинамическихСписков()
	
	ОписанияДинамическихСписков = Новый Структура;
	
	// Динамический список ПоКонтрагентам
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.Контрагенты) Тогда
		ОписаниеСписка = бг_НовоеОписаниеДинамическогоСписка("бг_ГруппаКонтрагенты", "Справочник.Контрагенты");
		ОписаниеСписка.Заголовок          = НСтр("ru = 'Использование по контрагентам'; en = 'Use with сounterparties'");
		ОписаниеСписка.ЗаголовокСтраницы  = НСтр("ru = 'По контрагентам'; en = 'With сounterparties'");
		ОписаниеСписка.Картинка           = БиблиотекаКартинок.ДоставкаКолонкаДоставлено;
		
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"Контрагент",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Ссылка", НСтр("ru = 'Контрагент'; en = 'Сounterparty'"))
		);
		
		ОписанияДинамическихСписков.Вставить("ПоКонтрагентам", ОписаниеСписка);
	КонецЕсли;
	
	// Динамический список ВДоговорахКонтрагентов
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ОписаниеСписка = бг_НовоеОписаниеДинамическогоСписка("бг_ГруппаДоговорыКонтрагентов", "Справочник.ДоговорыКонтрагентов");
		ОписаниеСписка.Заголовок          = НСтр("ru = 'Использование в договорах контрагентов'; en = 'Use in contracts'");
		ОписаниеСписка.ЗаголовокСтраницы  = НСтр("ru = 'В договорах контрагентов'; en = 'In contracts'");
		ОписаниеСписка.Картинка           = БиблиотекаКартинок.ЭлектронноЦифроваяПодпись;
		ОписаниеСписка.УсловиеЗапроса     = "Т.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)";
		
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"Договор",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Ссылка", НСтр("ru = 'Договор'; en = 'Contract'"))
		);
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"СтатусДоговора",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Статус", НСтр("ru = 'Статус договора'; en = 'Contract status'"))
		);
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"Организация",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Организация", НСтр("ru = 'Организация'; en = 'Company'"))
		);
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"Контрагент",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Контрагент", НСтр("ru = 'Контрагент'; en = 'Counterparty'"))
		);
		
		ОписанияДинамическихСписков.Вставить("ВДоговорахКонтрагентов", ОписаниеСписка);
	КонецЕсли;
	
	// Динамический список ВПунктахНазначения
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.битПунктыНазначения) Тогда
		ОписаниеСписка = бг_НовоеОписаниеДинамическогоСписка("бг_ГруппаПунктыНазначения", "Справочник.битПунктыНазначения");
		ОписаниеСписка.Заголовок          = НСтр("ru = 'Использование в пунктах назначения'; en = 'Use in destinations'");
		ОписаниеСписка.ЗаголовокСтраницы  = НСтр("ru = 'В пунктах назначения'; en = 'In destinations'");
		ОписаниеСписка.Картинка           = БиблиотекаКартинок.ДоставкаКолонкаДоставлено;
		
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"ПунктНазначения",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Ссылка", НСтр("ru = 'Пункт назначения'; en = 'Destination point'"))
		);
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"Клиент",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Клиент", НСтр("ru = 'Клиент'; en = 'Client'"))
		);
		
		ОписанияДинамическихСписков.Вставить("ВПунктахНазначения", ОписаниеСписка);
	КонецЕсли;
	
	// Динамический список ВКаналахПродаж
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.битКаналыПродаж) Тогда
		ОписаниеСписка = бг_НовоеОписаниеДинамическогоСписка("бг_ГруппаКаналыПродаж", "Справочник.битКаналыПродаж");
		ОписаниеСписка.Заголовок          = НСтр("ru = 'Использование в каналах продаж'; en = 'Use in sales channels'");
		ОписаниеСписка.ЗаголовокСтраницы  = НСтр("ru = 'В каналах продаж'; en = 'In sales channels'");
		ОписаниеСписка.Картинка           = БиблиотекаКартинок.ДоставкаКолонкаДоставлено;
		
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"КаналПродаж",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Ссылка", НСтр("ru = 'Канал продаж'; en = 'Sales channel'"))
		);
		
		ОписанияДинамическихСписков.Вставить("ВКаналахПродаж", ОписаниеСписка);
	КонецЕсли;
	
	// Динамический список ВТерриториях
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.битТерриторииПунктовНазначения) Тогда
		ОписаниеСписка = бг_НовоеОписаниеДинамическогоСписка("бг_ГруппаТерритории", "Справочник.битТерриторииПунктовНазначения");
		ОписаниеСписка.Заголовок          = НСтр("ru = 'Использование в территориях'; en = 'Use in territories'");
		ОписаниеСписка.ЗаголовокСтраницы  = НСтр("ru = 'В территориях'; en = 'In territories'");
		ОписаниеСписка.Картинка           = БиблиотекаКартинок.ДоставкаКолонкаДоставлено;
		
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"Территория",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Ссылка", НСтр("ru = 'Территория'; en = 'Territorie'"))
		);
		
		ОписанияДинамическихСписков.Вставить("ВТерриториях", ОписаниеСписка);
	КонецЕсли;

	// Динамический список ВСегментах
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.СегментыПартнеров) Тогда
		ОписаниеСписка = бг_НовоеОписаниеДинамическогоСписка("бг_ГруппаСегментыПартнеров", "Справочник.СегментыПартнеров");
		ОписаниеСписка.Заголовок          = НСтр("ru = 'Использование в сегментах партнеров'; en = 'Usage in partner segments'");
		ОписаниеСписка.ЗаголовокСтраницы  = НСтр("ru = 'В сегментах'; en = 'In partner segments'");
		ОписаниеСписка.Картинка           = БиблиотекаКартинок.ДоставкаКолонкаДоставлено;
		
		ОписаниеСписка.ПоляЗапроса.Вставить(
			"СегментПартнера",
			бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Т.Ссылка", НСтр("ru = 'Сегмент партнера'; en = 'Partner segment'"))
		);
		
		ОписанияДинамическихСписков.Вставить("ВСегментах", ОписаниеСписка);
	КонецЕсли;

	// Динамический список ВсеПолучатели
	ОписаниеСписка = бг_НовоеОписаниеДинамическогоСписка("бг_ГруппаВсеПолучатели", "РегистрСведений.ДействиеСкидокНаценок");
	ОписаниеСписка.Заголовок          = НСтр("ru = 'Все получатели'; en = 'All recipients'");
	ОписаниеСписка.ЗаголовокСтраницы  = НСтр("ru = 'Все получатели'; en = 'All recipients'");
	ОписаниеСписка.Картинка           = БиблиотекаКартинок.ДоставкаКолонкаДоставлено;
	
	ОписаниеСписка.ПоляЗапроса.Вставить(
	"Источник",
	бг_НовоеОписаниеПоляЗапросаДинамическогоСписка("Источник", НСтр("ru = 'Получатель'; en = 'Recipient'"))
	);
	
	ОписанияДинамическихСписков.Вставить("ВсеПолучатели", ОписаниеСписка);

	Возврат ОписанияДинамическихСписков;
	
КонецФункции

Процедура бг_ДобавитьРеквизитыИспользования(ДобавляемыеРеквизиты, ИмяБлока, Заголовок)
	
	РеквизитФормы = Новый РеквизитФормы(
		"бг_Использование" + ИмяБлока,
		Новый ОписаниеТипов("ДинамическийСписок"),
		"",
		Заголовок
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	РеквизитФормы = Новый РеквизитФормы(
		"бг_Использование" + ИмяБлока + "ВариантОтображенияСкидокНаценок",
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"",
		НСтр("ru = 'Отображать'; en = 'Show'")
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	РеквизитФормы = Новый РеквизитФормы(
		"бг_ИнформацияКоличествоСкидок" + ИмяБлока,
		ОбщегоНазначения.ОписаниеТипаСтрока(0),
		"",
		НСтр(
			"ru = 'Информация о количестве скидок (наценок) %1';
			|en = 'Information about the number of discounts (margins) %1'"
		)
	);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
КонецПроцедуры

Процедура бг_ДобавитьЭлементыУправленияДинамическимСписком(Форма, ИмяБлока, ОписаниеСписка)
	
	Команды  = Форма.Команды;
	Элементы = Форма.Элементы;
	
	// Создание команд
	Команда = Команды.Добавить(СтрШаблон("бг_%1_ИсторияДействия", ИмяБлока));
	Команда.Действие  = "бг_ИсторияДействия";
	Команда.Заголовок = НСтр("ru = 'История...'; en = 'History...'");
	Команда.Подсказка = НСтр("ru = 'Открыть историю изменения статуса...'; en = 'Open status change history...'");
	Команда.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтроки.НеИспользует;
	
	Команда = Команды.Добавить(СтрШаблон("бг_Использование%1_УстановитьСтатусДействует", ИмяБлока));
	Команда.Действие  = "бг_УстановитьСтатусДействует";
	Команда.Заголовок = НСтр("ru = 'Действует'; en = 'Valid'");
	Команда.Подсказка = НСтр("ru = 'Установить статус ""Действует""'; en = 'Set status ""Valid""'");
	Команда.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтроки.НеИспользует;
	
	Команда = Команды.Добавить(СтрШаблон("бг_Использование%1_УстановитьСтатусНеДействует", ИмяБлока));
	Команда.Действие  = "бг_УстановитьСтатусНеДействует";
	Команда.Заголовок = НСтр("ru = 'Не действует'; en = 'Not valid'");
	Команда.Подсказка = НСтр("ru = 'Установить статус ""Не действует""'; en = 'Set status ""Not valid""'");
	Команда.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтроки.НеИспользует;
	
	// Создание страницы
	Страница = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		Форма,
		ОписаниеСписка.ИмяГруппы,
		Элементы.ГруппаСтраницы,
		ВидГруппыФормы.Страница
	);
	Страница.Заголовок            = ОписаниеСписка.ЗаголовокСтраницы;
	Страница.Картинка             = ОписаниеСписка.Картинка;
	Страница.ПутьКДаннымЗаголовка = "бг_ИнформацияКоличествоСкидок" + ИмяБлока;
	
	// Создание элементов шапки на странице
	Группа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		Форма,
		СтрШаблон("бг_Использование%1Шапка", ИмяБлока),
		Страница,
		ВидГруппыФормы.ОбычнаяГруппа
	);
	Группа.Заголовок   = ОписаниеСписка.Заголовок;
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.ОтображатьЗаголовок = Ложь;
	
	ЭлементУправления = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		Форма,
		"бг_Использование" + ИмяБлока + "ВариантОтображенияСкидокНаценок",
		Группа,
		"бг_Использование" + ИмяБлока + "ВариантОтображенияСкидокНаценок",
		"ПолеФормы",
		,
		"ПолеПереключателя"
	);
	ЭлементУправления.КоличествоКолонок = 2;
	Для каждого ЭлементСписка из Элементы.ИспользованиеВИндивидуальныхСоглашенияхСКлиентамиВариантОтображенияСкидок.СписокВыбора Цикл
		ЭлементУправления.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	ЭлементУправления.УстановитьДействие("ПриИзменении", "бг_ИспользованиеВариантОтображенияСкидокНаценокПриИзменении");
	
	Панель = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		Форма,
		"бг_Использование" + ИмяБлока + "Панель",
		Группа,
		ВидГруппыФормы.КоманднаяПанель
	);
	Панель.Заголовок = ОписаниеСписка.Заголовок + НСтр("ru = ' (командная панель)'; en = ' (command bar)'");
	
	бг_ДобавитьКнопкиУправленияСтатусом(Форма, ИмяБлока, ОписаниеСписка.ЗаголовокСтраницы, Панель);
	
	// Создание списка
	ДинамическийСписок = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьТаблицуНаФорму(
		Форма,
		"бг_Использование" + ИмяБлока,
		Страница,
		"бг_Использование" + ИмяБлока
	);
	ДинамическийСписок.УстановитьДействие("Выбор", "бг_ИспользованиеВыбор");
	ДинамическийСписок.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Низ;
	ДинамическийСписок.ИзменятьСоставСтрок      = Ложь;
	ДинамическийСписок.ИзменятьПорядокСтрок     = Ложь;
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = ОписаниеСписка.ИмяОсновнойТаблицы;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	
	Если ИмяБлока = "ВсеПолучатели" Тогда
		СвойстваСписка.ТекстЗапроса             = бг_ТекстЗапросаДинамическогоСпискаВсеПолучатели();
	Иначе
		СвойстваСписка.ТекстЗапроса             = бг_ТекстЗапросаДинамическогоСписка(
		ОписаниеСписка.ИмяОсновнойТаблицы,
		ОписаниеСписка.ПоляЗапроса,
		ОписаниеСписка.УсловиеЗапроса);
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(ДинамическийСписок, СвойстваСписка);
	
	бг_ДобавитьКнопкиУправленияСтатусом(Форма, ИмяБлока,, ДинамическийСписок.КонтекстноеМеню);
	
	ОсновнаяГруппа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		Форма,
		СтрШаблон("бг_Использование%1ОсновнаяГруппа", ИмяБлока),
		ДинамическийСписок,
		ВидГруппыФормы.ГруппаКолонок
	);
	ОсновнаяГруппа.Заголовок   = НСтр("ru = 'Получатель'; en = 'Recipient'");
	ОсновнаяГруппа.Подсказка   = НСтр("ru = 'Информация о получателе скидки (наценки)'; en = 'Recipient''s information'");
	ОсновнаяГруппа.Группировка = ГруппировкаКолонок.Вертикальная;
	
	ГруппаИнформация = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		Форма,
		СтрШаблон("бг_Использование%1ГруппаИнформация", ИмяБлока),
		ОсновнаяГруппа,
		ВидГруппыФормы.ГруппаКолонок
	);
	ГруппаИнформация.Заголовок   = НСтр("ru = 'Дополнительно'; en = 'Additional information'");
	ГруппаИнформация.Подсказка   = НСтр("ru = 'Дополнительная информация о получателе скидки (наценки)'; en = 'Additional recipient''s information'");
	ГруппаИнформация.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	Для каждого Поле из ОписаниеСписка.ПоляЗапроса Цикл
		Колонка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
			Форма,
			СтрШаблон("бг_Использование%1%2", ИмяБлока, Поле.Ключ),
			?(Поле.Значение.Путь = "Т.Ссылка", ОсновнаяГруппа, ГруппаИнформация),
			СтрШаблон("бг_Использование%1.%2", ИмяБлока, Поле.Ключ),
			,
			?(Поле.Значение.Путь = "Т.Ссылка", ГруппаИнформация, Неопределено),
			"ПолеНадписи"
		);
		
		Колонка.Заголовок = Поле.Значение.Заголовок;
	КонецЦикла;
	
	ОсновнаяГруппа = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		Форма,
		СтрШаблон("бг_Использование%1ГруппаСтатус", ИмяБлока),
		ДинамическийСписок,
		ВидГруппыФормы.ГруппаКолонок
	);
	ОсновнаяГруппа.Заголовок   = НСтр("ru = 'Статус'; en = 'Status'");
	ОсновнаяГруппа.Группировка = ГруппировкаКолонок.Вертикальная;
	ОсновнаяГруппа.Ширина      = 20;
	ОсновнаяГруппа.ОтображатьВШапке    = Ложь;
	ОсновнаяГруппа.ОтображатьЗаголовок = Ложь;
	
	ГруппаИнформация = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		Форма,
		СтрШаблон("бг_Использование%1ГруппаСрокДействия", ИмяБлока),
		ОсновнаяГруппа,
		ВидГруппыФормы.ГруппаКолонок
	);
	ГруппаИнформация.Заголовок           = НСтр("ru = 'Интервал применения'; en = 'Application interval'");
	ГруппаИнформация.Группировка         = ГруппировкаКолонок.Горизонтальная;
	ГруппаИнформация.ОтображатьВШапке    = Истина;
	ГруппаИнформация.ОтображатьЗаголовок = Истина;
	
	Если ИмяБлока <> "ВсеПолучатели" Тогда
		СвойстваСписка.ТекстЗапроса             = бг_ТекстЗапросаДинамическогоСпискаВсеПолучатели();
		Колонка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
			Форма,
			СтрШаблон("бг_Использование%1%2", ИмяБлока, "Статус"),
			ОсновнаяГруппа,
			СтрШаблон("бг_Использование%1.%2", ИмяБлока, "Статус"),
			,
			ГруппаИнформация,
			"ПолеНадписи"
		);
		Колонка.Заголовок                = НСтр("ru = 'Статус скидки'; en = 'Discount status'");
		Колонка.Ширина                   = 20;
		Колонка.РастягиватьПоГоризонтали = Ложь;
	КонецЕсли;
	
	Колонка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		Форма,
		СтрШаблон("бг_Использование%1%2", ИмяБлока, "ДатаНачала"),
		ГруппаИнформация,
		СтрШаблон("бг_Использование%1.%2", ИмяБлока, "ДатаНачала"),
		,,
		"ПолеНадписи"
	);
	Колонка.Заголовок                = НСтр("ru = 'Действует с'; en = 'Valid from'");
	Колонка.Ширина                   = 12;
	Колонка.РастягиватьПоГоризонтали = Ложь;
	Колонка.ОтображатьВШапке         = Ложь;
	
	Колонка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьПолеНаФорму(
		Форма,
		СтрШаблон("бг_Использование%1%2", ИмяБлока, "ДатаОкончания"),
		ГруппаИнформация,
		СтрШаблон("бг_Использование%1.%2", ИмяБлока, "ДатаОкончания"),
		,,
		"ПолеНадписи"
	);
	Колонка.Заголовок                = НСтр("ru = 'Действует по'; en = 'Valid until'");
	Колонка.Ширина                   = 12;
	Колонка.РастягиватьПоГоризонтали = Ложь;
	Колонка.ОтображатьВШапке         = Ложь;
	Колонка.Формат                   = "ДЛФ=D";
	
КонецПроцедуры

Процедура бг_ДобавитьКнопкиУправленияСтатусом(ЭтаФорма, ИмяБлока, ЗаголовокБлока = "", Панель)
	
	Элементы = ЭтаФорма.Элементы;
	
	Если НЕ ПустаяСтрока(ЗаголовокБлока) Тогда
		Группа = бг_ГруппаКомандУправленияСтатусом(
			ЭтаФорма,
			СтрШаблон("бг_ГруппаИспользование%1УправлениеСтатусом", ИмяБлока),
			ЗаголовокБлока,
			Панель
		);
		Суффикс = "";
	Иначе
		Группа  = Панель;
		Суффикс = "КонтекстноеМеню";
	КонецЕсли;
	
	Подменю = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
		ЭтаФорма,
		СтрШаблон("бг_Использование%1%2УстановитьСтатус", ИмяБлока, Суффикс),
		Группа,
		ВидГруппыФормы.Подменю
	);
	Подменю.Заголовок = НСтр("ru = 'Установить статус'; en = 'Set status'");
	
	ЭлементУправления = Элементы.Вставить(
		СтрШаблон("бг_Использование%1%2УстановитьСтатусДействует", ИмяБлока, Суффикс),
		Тип("КнопкаФормы"),
		Подменю
	);
	ЭлементУправления.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлементУправления.ИмяКоманды = СтрШаблон("бг_Использование%1_УстановитьСтатусДействует", ИмяБлока);
	
	ЭлементУправления = Элементы.Вставить(
		СтрШаблон("бг_Использование%1%2УстановитьСтатусНеДействует", ИмяБлока, Суффикс),
		Тип("КнопкаФормы"),
		Подменю
	);
	ЭлементУправления.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлементУправления.ИмяКоманды = СтрШаблон("бг_Использование%1_УстановитьСтатусНеДействует", ИмяБлока);
	
	ЭлементУправления = Элементы.Вставить(
		СтрШаблон("бг_ИсторияДействия%1%2", ИмяБлока, Суффикс),
		Тип("КнопкаФормы"),
		Группа
	);
	ЭлементУправления.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлементУправления.ИмяКоманды = СтрШаблон("бг_%1_ИсторияДействия", ИмяБлока);

КонецПроцедуры

Функция бг_ТекстЗапросаДинамическогоСписка(ИмяОсновнойТаблицы, ПоляЗапроса, УсловиеОтбора)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Т.Период) КАК Период,
	|	Т.Источник КАК Источник
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекущаяДата,
	|			СкидкаНаценка = &СкидкаНаценка
	|				И &УсловиеСсылкаИсточника) КАК Срез
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок КАК Т
	|		ПО Срез.Источник = Т.Источник
	|			И (Т.СкидкаНаценка = &СкидкаНаценка)
	|			И (Т.Период > Срез.Период)
	|			И (Т.Статус <> Срез.Статус)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПоляЗапроса,
	|	ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)) КАК Статус,
	|	ВЫБОР
	|		КОГДА ДействиеСкидокНаценокСрезПоследних.Статус ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использование,
	|	ЕСТЬNULL(ДействиеСкидокНаценокСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ДействиеСкидокНаценокСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЕСТЬNULL(ДОБАВИТЬКДАТЕ(ДействиеСкидокНаценокСрезПервых.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ЕСТЬNULL(ДОБАВИТЬКДАТЕ(Таблица.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1))
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	&ИмяОсновнойТаблицы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|				&ТекущаяДата,
	|				СкидкаНаценка = &СкидкаНаценка
	|					И &УсловиеСсылкаИсточника) КАК ДействиеСкидокНаценокСрезПоследних
	|		ПО (ДействиеСкидокНаценокСрезПоследних.Источник = Т.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Таблица КАК Таблица
	|		ПО (Таблица.Источник = Т.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПервых(
	|				&ТекущаяДата,
	|				СкидкаНаценка = &СкидкаНаценка
	|					И &УсловиеСсылкаИсточника) КАК ДействиеСкидокНаценокСрезПервых
	|		ПО (ДействиеСкидокНаценокСрезПервых.Источник = Т.Ссылка)
	|ГДЕ
	|	&УсловиеОтбора";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяОсновнойТаблицы", ИмяОсновнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСсылкаИсточника", "Источник ССЫЛКА " + ИмяОсновнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	
	ТекстыПолей = Новый Массив;
	
	Для каждого Поле из ПоляЗапроса Цикл
		ТекстыПолей.Добавить(СтрШаблон("%2 КАК %1", Поле.Ключ, Поле.Значение.Путь));
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПоляЗапроса",
		СтрСоединить(ТекстыПолей, ",
		|	")
	);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция бг_ТекстЗапросаДинамическогоСпискаВсеПолучатели()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДействиеСкидокНаценок.Период,
	|	ДействиеСкидокНаценок.СкидкаНаценка,
	|	ДействиеСкидокНаценок.Источник КАК Источник,
	|	ДействиеСкидокНаценокСрезПоследних.Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА ДействиеСкидокНаценокСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использование,
	|	ДействиеСкидокНаценок.Период КАК ДатаНачала,
	|	ЕСТЬNULL(МИНИМУМ(ДействиеСкидокНаценокПрекращение.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценокПрекращение
	|		ПО ДействиеСкидокНаценок.Источник = ДействиеСкидокНаценокПрекращение.Источник
	|			И (ДействиеСкидокНаценокПрекращение.СкидкаНаценка = &СкидкаНаценка)
	|			И (ДействиеСкидокНаценокПрекращение.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует))
	|			И ДействиеСкидокНаценок.Период < ДействиеСкидокНаценокПрекращение.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|				&ТекущаяДата,
	|				СкидкаНаценка = &СкидкаНаценка) КАК ДействиеСкидокНаценокСрезПоследних
	|		ПО ДействиеСкидокНаценок.Источник = ДействиеСкидокНаценокСрезПоследних.Источник
	|			И ДействиеСкидокНаценок.Период = ДействиеСкидокНаценокСрезПоследних.Период
	|			И (ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует))
	|ГДЕ
	|	ДействиеСкидокНаценок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|	И ДействиеСкидокНаценок.СкидкаНаценка = &СкидкаНаценка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДействиеСкидокНаценок.Период,
	|	ДействиеСкидокНаценок.СкидкаНаценка,
	|	ДействиеСкидокНаценок.Источник,
	|	ДействиеСкидокНаценокСрезПоследних.Статус,
	|	ВЫБОР
	|		КОГДА ДействиеСкидокНаценокСрезПоследних.Период ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область бг_Вытеснение

Процедура бг_ДобавитьКомандуВытесненияСкидокНаценок(Форма, Меню)
	
	Кнопка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		Форма,
		"бг_ВытеснитьСкидки",
		Меню,
		НСтр("ru = 'Вытеснить скидки (наценки)'; en = 'Displace discounts (markups)'"),
		"бг_ВытеснитьСкидки",
		"бг_ВытеснитьСкидки",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели
	);
	Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Команда = Форма.Команды["бг_ВытеснитьСкидки"];
	Команда.Подсказка = НСтр(
		"ru = 'Вытеснить скидки (наценки), пересекающиеся по периодам действия
		|Будет создана группа вытеснения, и выбранные скидки (наценки) 
		|из числа имеющих пересекающиеся периоды действия, будут помещены в эту группу';
		|en = 'Displace discounts (markups) with overlapping activity periods'"
	);
	
КонецПроцедуры

Процедура бг_ДобавитьКомандуВытесненияПериодовДействия(Форма, Меню)
	
	Кнопка = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьКнопкуНаФорму(
		Форма,
		"бг_ВытеснитьПериодыДействия",
		Меню,
		НСтр("ru = 'Вытеснить периоды действия'; en = 'Displace validity periods'"),
		"бг_ВытеснитьПериодыДействия",
		"бг_ВытеснитьПериодыДействия",
		,
		ВидКнопкиФормы.КнопкаКоманднойПанели
	);
	Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Команда = Форма.Команды["бг_ВытеснитьПериодыДействия"];
	Команда.Подсказка = НСтр(
		"ru = 'Вытеснить пересекающиеся по периодам действия скидки (наценки)';
		|en = 'Displace overlapping dicounts (markups) validity periods'"
	);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область бг_ИсточникиСкидокНаценок

Функция бг_ГруппаКомандУправленияСтатусом(Форма, Имя, ЗаголовокБлока = "", Панель, СледующийЭлемент = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти(Имя) = Неопределено Тогда
		ЭлементФормы = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьГруппуНаФорму(
			Форма,
			Имя,
			Панель,
			ВидГруппыФормы.ГруппаКнопок,
			СледующийЭлемент
		);
		ЭлементФормы.Отображение = ОтображениеГруппыКнопок.Компактное;
		Если ПустаяСтрока(ЗаголовокБлока) Тогда
			ЭлементФормы.Заголовок = НСтр(
				"ru = 'Команды управления действием скидки (наценки)';
				|en = 'Discount (markup) activity management commands'"
			);
		Иначе
			ЭлементФормы.Заголовок = СтрШаблон(
				НСтр(
					"ru = 'Команды управления действием %1 скидки (наценки)';
					|en = 'Discount (markup) activity %1 management commands'"
				),
				НРег(ЗаголовокБлока)
			);
		КонецЕсли;
	Иначе
		ЭлементФормы = Элементы[Имя];
	КонецЕсли;
	
	Возврат ЭлементФормы;
	
КонецФункции

Процедура бг_ДобавитьДинамическиеСпискиДополнительныхИсточников(Форма) Экспорт
	
	ОписанияСписков = бг_ОписанияДополнительныхДинамическихСписков();
	
	НовыеРеквизиты = Новый Массив;
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("бг_ИменаДоступныхИсточников", ОбщегоНазначения.ОписаниеТипаСтрока(0)));
	
	ИменаДоступныхИсточников = Новый Массив;
	
	Для каждого ОписаниеСписка из ОписанияСписков Цикл
		ИменаДоступныхИсточников.Добавить(ОписаниеСписка.Ключ);
		бг_ДобавитьРеквизитыИспользования(НовыеРеквизиты, ОписаниеСписка.Ключ, ОписаниеСписка.Значение.Заголовок);
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	Форма.бг_ИменаДоступныхИсточников = СтрСоединить(ИменаДоступныхИсточников, ",");
	
	Для каждого ОписаниеСписка из ОписанияСписков Цикл
		бг_ДобавитьЭлементыУправленияДинамическимСписком(Форма, ОписаниеСписка.Ключ, ОписаниеСписка.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура бг_ДополнитьУсловноеОформлениеСписковДополнительныхИсточников(Форма) Экспорт
	
	СуффиксыДинамическихСписков = СтрРазделить(Форма.бг_ИменаДоступныхИсточников, ",");
	
	Для каждого ИмяБлока из СуффиксыДинамическихСписков Цикл
		
		УсловноеОформлениеСписка = Форма["бг_Использование" + ИмяБлока].КомпоновщикНастроек.Настройки.УсловноеОформление;
		УсловноеОформлениеСписка.Элементы.Очистить();
		
		Элемент = УсловноеОформлениеСписка.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДатаОкончания");

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = '00010101';

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = '00010101';

		Элемент.Оформление.УстановитьЗначениеПараметра(
			"Текст",
			НСтр("ru = '<бессрочно>'; en = '<permanent>'")
		);
		
		Элемент = УсловноеОформлениеСписка.Элементы.Добавить();

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыДействияСкидок.НеДействует;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область бг_Вытеснение

Процедура бг_ДобавитьКомандыВытеснения(Форма, Меню) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		бг_ДобавитьКомандуВытесненияПериодовДействия(Форма, Меню);
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумМинимумВытеснение")
Процедура бг_РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумМинимумВытеснение(СтрокаДерева, Параметры)

	ТЗ = ПустаяТаблицаСкидокСРасшифровкой(Параметры);

	Если СтрокаДерева.ВариантРасчетаРезультатаСовместногоПрименения = Перечисления.ВариантыРасчетаРезультатаСовместногоПрименения.ПоСтроке Тогда

		РезультатРасчета = ОбъединитьРезультатыРасчетаПодчиненныхСтрок(СтрокаДерева);
		Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
			РезультатРасчета.Сортировать("КлючСвязи, Сумма Убыв, РеквизитДопУпорядочивания");
		ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
			РезультатРасчета.Сортировать("КлючСвязи, Сумма Возр, РеквизитДопУпорядочивания");
		ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
			РезультатРасчета.Сортировать("КлючСвязи, РеквизитДопУпорядочивания");
		КонецЕсли;

		КлючСвязи = Неопределено;
#Вставка
		// Если скидка пришла в результате распределения с другой номенклатуры, то она не должна ничего вытеснять
		// кроме иных скидок по распределению
		БылаРаспределяемаяСкидка = Ложь;
#КонецВставки
		Для Каждого СтрокаТаблицы Из РезультатРасчета Цикл
			
#Вставка
			// Пустые скидки не добавляем
			Если СтрокаТаблицы.Сумма = 0 
				И СтрокаТаблицы.бг_СуммаНачислено = 0 Тогда
				Продолжить;
			КонецЕсли;

			// Если скидка пришла в результате распределения с другой номенклатуры, то она не должна ничего вытеснять
			// кроме иных скидок по распределению
			Если СтрокаТаблицы.бг_СуммаНачислено = 0 Тогда
				БылаРаспределяемаяСкидка = Истина;
			КонецЕсли;
#КонецВставки

			Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
#Вставка
				// Если скидка пришла в результате распределения с другой номенклатуры, то она не должна ничего вытеснять
				// кроме иных скидок по распределению
				БылаРаспределяемаяСкидка = Ложь;
#КонецВставки

				НоваяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.Действует = Истина;

				КлючСвязи = СтрокаТаблицы.КлючСвязи;

#Вставка
				// Расшифровка скидки.
				// В типовом решении для данного варианта вытеснения расшифровка скидки используется общая
				// для скидки и для группировки, т.к. в группировки в этом случае входит лишь одна скидка
				// У нас же в таких группах может быть несколько скидок из-за скидок с обеспечением цены и суммовых скидок
				// Поэтому для группы создаем отдельную расшифровку
				НоваяСтрока.Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
				Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
					ЗаполнитьЗначенияСвойств(НоваяСтрока.Расшифровка.Добавить(), СтрокаРасшифровки);
				КонецЦикла;
			Иначе
				// Если скидка пришла в результате распределения с другой номенклатуры, то она не должна ничего вытеснять
				// кроме иных скидок по распределению
				Если СтрокаТаблицы.бг_СуммаНачислено <> 0
					И БылаРаспределяемаяСкидка = Истина Тогда
					
					НоваяСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Действует = Истина;

					// Расшифровка скидки.
					// В типовом решении для данного варианта вытеснения расшифровка скидки используется общая
					// для скидки и для группировки, т.к. в группировки в этом случае входит лишь одна скидка
					// У нас же в таких группах может быть несколько скидок из-за скидок с обеспечением цены и суммовых скидок
					// Поэтому для группы создаем отдельную расшифровку
					НоваяСтрока.Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
					Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
						ЗаполнитьЗначенияСвойств(НоваяСтрока.Расшифровка.Добавить(), СтрокаРасшифровки);
					КонецЦикла;
					
					БылаРаспределяемаяСкидка = Ложь;
				КонецЕсли;
#КонецВставки
			КонецЕсли;

		КонецЦикла;

	Иначе

		РезультатРасчета = ТаблицаДанныхПоСпособуСовместногоПримененияДляДокументаВЦелом(СтрокаДерева);
		Для Каждого СтрокаТаблицы Из РезультатРасчета Цикл

			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;

		КонецЦикла;

	КонецЕсли;

	СтрокаДерева.РезультатРасчета = ТЗ;

КонецПроцедуры

&ИзменениеИКонтроль("РассчитатьСкидкиПоГруппеСовместногоПримененияСложениеУмножение")
Процедура бг_РассчитатьСкидкиПоГруппеСовместногоПримененияСложениеУмножение(СтрокаДерева, ПараметрыРасчета)

	РезультатРасчета = ОбъединитьРезультатыРасчетаПодчиненныхСтрок(СтрокаДерева);
	РезультатРасчета.Сортировать("КлючСвязи");

	ТЗ = ПустаяТаблицаСкидокСРасшифровкой(ПараметрыРасчета);

	КлючСвязи = Неопределено;
	Для Каждого СтрокаТаблицы Из РезультатРасчета Цикл

		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда

			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.Сумма = СтрокаТаблицы.Сумма;
#Вставка
			НоваяСтрокаТЗ.бг_СуммаНачислено = СтрокаТаблицы.бг_СуммаНачислено;
#КонецВставки
			НоваяСтрокаТЗ.Действует = Истина;

			// Расшифровка скидки.
			НоваяСтрокаТЗ.Расшифровка = ПараметрыРасчета.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;

			КлючСвязи = СтрокаТаблицы.КлючСвязи;

		Иначе

			НоваяСтрокаТЗ.Сумма = НоваяСтрокаТЗ.Сумма + СтрокаТаблицы.Сумма;
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	СтрокаДерева.РезультатРасчета = ТЗ;

КонецПроцедуры

&ИзменениеИКонтроль("ПроверитьУсловия")
Функция бг_ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия, Условия)

	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияВыполнены",    Истина);
	СтрокаДерева.ПараметрыУсловий.Вставить("КодыСтрок",           Новый Массив);
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияПоСтроке",     Новый Структура);
	СтрокаДерева.ПараметрыУсловий.Вставить("ЕстьУсловияПоСтроке", Ложь);
	СтрокаДерева.ПараметрыУсловий.Вставить("ТаблицаУсловий",      Новый ТаблицаЗначений);

	// Служебная таблица для временного хранения результатов проверки условий предоставления.
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("УсловиеПредоставления", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок,СправочникСсылка.СкидкиНаценки"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ОбластьОграничения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбластейОграниченияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("Выполнено");
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ЗначениеПоказателя");
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("КратностьВыполнения",   Новый ОписаниеТипов("Число"));

	// Таблица применяется для проверки выполнения условий по строке.
	// Если у скидки существуют условия по строке то для этих условий в таблице будет создана колонка.
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("ТаблицаПроверкиУсловий", Новый ТаблицаЗначений);
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить("КлючСвязи");
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Индексы.Добавить("КлючСвязи");

	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("СоответствиеУсловийКолонкамТаблицыПроверкиУсловий", Новый Соответствие);

	// Служебные параметры
	ИспользуетсяТаблицаПроверкиУсловий      = Ложь;
	ЭтоПервоеУсловиеТаблицыПроверкиУсловий  = Истина;
	КоличествоКолонокТаблицыПроверкиУсловий = 0;

	Для Каждого Условие Из Условия.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.Ссылка)) Цикл

		СтрокаТаблицаУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Добавить();
		СтрокаТаблицаУсловий.УсловиеПредоставления = Условие.УсловиеПредоставления;
		Если ТипЗнч(Условие.УсловиеПредоставления) = Тип("СправочникСсылка.УсловияПредоставленияСкидокНаценок") Тогда
			СтрокаТаблицаУсловий.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
			#Вставка
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Условие.УсловиеПредоставления, "УсловиеПредоставления.ИмяОбъекта") 
				= "бг_УсловиеПредоставленияСкидкиНаценкиЗаАссортимент"
				И СтрокаДерева.бг_БезусловноеПрименениеПослеПервогоСрабатывания = Ложь Тогда
				СтрокаДерева.ПараметрыУсловий.ЕстьУсловияПоСтроке = Истина;
				СтрокаТаблицаУсловий.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке;
			КонецЕсли;
			#КонецВставки
		Иначе
			СтрокаДерева.ПараметрыУсловий.ЕстьУсловияПоСтроке = Истина;
			СтрокаТаблицаУсловий.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке;
		КонецЕсли;

		НайденныеСтроки = ВыполненныеУсловия.НайтиСтроки(Новый Структура("Ссылка", Условие.УсловиеПредоставления));

		#Вставка
		Если СтрокаДерева.бг_БезусловноеПрименениеПослеПервогоСрабатывания = Истина
			И СтрокаДерева.бг_РанееИспользованнаяСумма > 0 Тогда
			СтрокаТаблицаУсловий.Выполнено = Истина;
			СтрокаТаблицаУсловий.КратностьВыполнения = 1;
			Продолжить;
		КонецЕсли;
		#КонецВставки
		
		Если НайденныеСтроки.Количество() = 0 Тогда

			// Условие не выполнено.
			СтрокаТаблицаУсловий.Выполнено = Ложь;

			СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;

			СтрокаТаблицаУсловий.КратностьВыполнения = 0;

		ИначеЕсли НайденныеСтроки.Количество() = 1
			И НайденныеСтроки[0].КлючСвязи = -1 Тогда

			НайденнаяСтрока = НайденныеСтроки[0];
			Если НайденнаяСтрока.КратностьВыполнения = 0 Тогда

				СтрокаТаблицаУсловий.Выполнено = Ложь;
				// Условие не выполнено.
				СтрокаТаблицаУсловий.ЗначениеПоказателя = НайденнаяСтрока.ЗначениеПоказателя;

				СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;

			Иначе

				СтрокаТаблицаУсловий.Выполнено = Истина;
				// Условие выполнено. Условие не зависит от конкретных строк.
				СтрокаТаблицаУсловий.ЗначениеПоказателя = НайденнаяСтрока.ЗначениеПоказателя;
				СтрокаТаблицаУсловий.КратностьВыполнения = НайденнаяСтрока.КратностьВыполнения;

			КонецЕсли;

		Иначе

			КоличествоКолонокТаблицыПроверкиУсловий = КоличествоКолонокТаблицыПроверкиУсловий + 1;
			ЗаголовокКолонки = "Условие" + КоличествоКолонокТаблицыПроверкиУсловий;

			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Вставить(Условие.УсловиеПредоставления, ЗаголовокКолонки);
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить(ЗаголовокКолонки, Новый ОписаниеТипов("Булево"));

			Счетчик = 0;
			СуммарнаяКратностьВыполнения = 0;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

				Если НайденнаяСтрока.КратностьВыполнения <> 0 Тогда
					Счетчик = Счетчик + 1;
				КонецЕсли;

				ИспользуетсяТаблицаПроверкиУсловий = Истина;

				НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(НайденнаяСтрока.КлючСвязи, "КлючСвязи");
				Если НайденныеСтрокиТаблицыПроверкиУсловий <> Неопределено Тогда
					НайденныеСтрокиТаблицыПроверкиУсловий[ЗаголовокКолонки] = Истина;
				Иначе
					Если ЭтоПервоеУсловиеТаблицыПроверкиУсловий Тогда
						НоваяСтрока1 = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Добавить();
						НоваяСтрока1.КлючСвязи = НайденнаяСтрока.КлючСвязи;
						НоваяСтрока1[ЗаголовокКолонки] = Истина;
					КонецЕсли;
				КонецЕсли;

				Если НайденнаяСтрока.КратностьВыполнения > 0 Тогда
					СуммарнаяКратностьВыполнения = СуммарнаяКратностьВыполнения + НайденнаяСтрока.КратностьВыполнения;
				КонецЕсли;

			КонецЦикла;

			СтрокаТаблицаУсловий.Выполнено = (Счетчик > 0);
			// Условие выполнено если найдено несколько строк, прошедших проверку условий.

			Если Не СтрокаТаблицаУсловий.Выполнено Тогда
				СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;
			КонецЕсли;

			СтрокаТаблицаУсловий.КратностьВыполнения = СуммарнаяКратностьВыполнения;

		КонецЕсли;

		Если ИспользуетсяТаблицаПроверкиУсловий Тогда
			ЭтоПервоеУсловиеТаблицыПроверкиУсловий = Ложь;
		КонецЕсли;

	КонецЦикла;

	// Заполним коды строк...
	Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда

		Если СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Количество() > 0 Тогда

			Отбор = Новый Структура;
			Для Каждого КлючИЗначение Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий Цикл
				Отбор.Вставить(КлючИЗначение.Значение, Истина);
			КонецЦикла;

			НайденныеСтроки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаДерева.ПараметрыУсловий.КодыСтрок.Добавить(СтрокаТЗ.КлючСвязи);
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецФункции

&ИзменениеИКонтроль("ПриЗаписиНаСервереИсточниковДействияСкидокНаценок")
Процедура бг_ПриЗаписиНаСервереИсточниковДействияСкидокНаценок(ТекущийОбъект, ЗначениеКопирования)

	Если Не ЗначениеКопирования.Пустая() Тогда

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДействиеСкидокНаценокСрезПоследних.Период КАК Период,
		|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка,
		|	ДействиеСкидокНаценокСрезПоследних.Статус КАК Статус,
		|	ДействиеСкидокНаценокСрезПоследних.СегментПартнеров КАК СегментПартнеров
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&ДатаСреза, Источник = &Источник) КАК
		|		ДействиеСкидокНаценокСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДействиеСкидокНаценок.Период,
		|	ДействиеСкидокНаценок.СкидкаНаценка,
		|	ДействиеСкидокНаценок.Статус,
		|	ДействиеСкидокНаценок.СегментПартнеров
		|ИЗ
		|	РегистрСведений.ДействиеСкидокНаценок КАК ДействиеСкидокНаценок
		|ГДЕ
#Вставка
// Исправление ошибки 1С
		|	Источник = &Источник И
#КонецВставки
		|	ДействиеСкидокНаценок.Период > &ДатаСреза";

		Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("Источник", ЗначениеКопирования);

		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() > 0 Тогда
			Ответственный = Пользователи.ТекущийПользователь();;
		КонецЕсли;

		Пока Выборка.Следующий() Цикл

			МенеджерЗаписи = РегистрыСведений.ДействиеСкидокНаценок.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Источник = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Ответственный = Ответственный;
			МенеджерЗаписи.Записать(Истина);

		КонецЦикла;

		ЗначениеКопирования = Справочники.СделкиСКлиентами.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ОбъединитьРезультаты")
Функция бг_ОбъединитьРезультаты(ПакетЗапросов, Таблица)

	ТЗ = ПустаяТаблицаРезультатПроверкиУсловия();

	ТипСкидкиНаценки = Тип("СправочникСсылка.СкидкиНаценки");

	Для Каждого КлючИЗначение Из ПакетЗапросов.СоответствиеЗапросаИНомераТаблицыРезультата Цикл

		ЕстьКолонкаЗначениеПоказателя = Неопределено;

		РезультатЗапроса = ПакетЗапросов.РезультатЗапроса[КлючИЗначение.Значение-1]; // РезультатЗапроса
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл

			Если ЕстьКолонкаЗначениеПоказателя = Неопределено Тогда
				ЕстьКолонкаЗначениеПоказателя = ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Выборка, "ЗначениеПоказателя");
			КонецЕсли;

			НоваяСтрока = ТЗ.Добавить();
			НоваяСтрока.Ссылка = КлючИЗначение.Ключ;
#Удаление
			Если ТипЗнч(КлючИЗначение.Ключ) = ТипСкидкиНаценки Тогда
#КонецУдаления
#Вставка
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Выборка, "КлючСвязи") Тогда
#КонецВставки
				НоваяСтрока.КлючСвязи = Выборка.КлючСвязи;
			Иначе
				НоваяСтрока.КлючСвязи = -1;
			КонецЕсли;
			НоваяСтрока.КратностьВыполнения = Выборка.КратностьВыполнения;

			Если ЕстьКолонкаЗначениеПоказателя Тогда
				НоваяСтрока.ЗначениеПоказателя = Выборка.ЗначениеПоказателя;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Для Каждого СтрокаТЧ Из Таблица Цикл
		ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), СтрокаТЧ);
	КонецЦикла;

	Возврат ТЗ;

КонецФункции

#КонецОбласти

#КонецОбласти
