#Область ПрограммныИнтерфейс

// Регистрирует исходящие сообщения с данными о свободных остатках товаров.
//
// Для передачи данных по свободным остаткам в Hybris предназначены два регламентных задания:
//  1. битВыгрузкаСвободныхОстатковВSAP - выгружает данные о свободных остатках (полные стоки) 
//     по данным типового РС РаспределениеЗапасов. Запускается достаточно редко (предполагается 1 раз в час). 
//  2. битВыгрузкаИзмененийСвободныхОстатковДляИМ - выгружает данные об изменениях свободных остатков (дельты)
//     по данным добавленного РС бг_ИзмененияСвободныхОстатковДляИМ. Запускается достаточно часто,
//     имитирует событийную on-line выгрузку (предполагается каждые 5-10 секунд).
//
// Задача состоит в том, что Hybris должен получать данные об остатках последовательными циклами: полные стоки,
//  и далее изменения стоков, отсчитанные от переданных полных сток. То есть между передачей полных стоков должны
//  передаваться данные об изменениях остатков, произошедшие только между этими передачами полных стоков. В идеале,
//  если от переданных полных стоков вычесть данные об изменениях стоков, переданных между этими полными стоками
//  и предыдущими переданными полными стоками, то должны и получить предыдущие переданные полные стоки.  
//
// Чтобы обеспечить вышеописанные требования, для выгрузки свободных остатков реализован следующий алгоритм:
//  1. Перед выгрузкой полных стоков выгружаются все накопленные изменения свободных остатков. При этом запись 
//     новых изменений свободных остатков блокируется.
//  2. Тело сообщения по полным стокам формируется непосредственно при регистрации исходящего сообщения 
//     по актуальным данным.
//  3. Для обеспечения согласованности данных все действия выполняются в одной транзакции.
//
Процедура ЗарегистрироватьИсходящиеСообщенияВыгрузкиОстатковВSAP() Экспорт

	Перем адаптер_ПодпискиНаСобытияВызовСервера, адаптер_НастройкиОбменаПовтИсп, адаптер_РаботаСДаннымиИБ;
	адаптер_ПодпискиНаСобытияВызовСервера = ОбщегоНазначения.ОбщийМодуль("адаптер_ПодпискиНаСобытияВызовСервера");
	адаптер_НастройкиОбменаПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбменаПовтИсп");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ПараметрыПодключения = адаптер_НастройкиОбменаПовтИсп.НастройкиПодключенияДляВыгрузки();
	Если ПараметрыПодключения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НастройкиВыгрузки = адаптер_НастройкиОбменаПовтИсп.ПолучитьНастройкиВыгрузкиПоОбъекту(
		Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP.ПолноеИмя());
		
	Если НастройкиВыгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP);
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	
	Если Задания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеВыгрузкаСвободныхОстатков = Задания[0];
	
	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();	
	КонецЕсли;	
	
	Попытка
		
		// Перед выгрузкой полных стоков выгрузим все накопленные изменения свободных остатков. 
		// Устанавливает исключительную управляемую блокировку для записи изменений свободных остатков.
		// Чтобы в процессе выгрузки полных стоков не было добавлено новых изменений свободных остатков. 
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.бг_ИзмененияСвободныхОстатковДляИМ");
		Блокировка.Заблокировать();
		
		// Остановим запущенные фоновые задания выгрузки изменений свободных остатков.						
		ЗаданиеВыгрузкаИзмененийМетаданные = Метаданные.РегламентныеЗадания.битВыгрузкаИзмененийСвободныхОстатковДляИМ;
		ИдентификаторЗаданияВыгрузкаИзменений = 
			РегламентныеЗадания.НайтиПредопределенное(ЗаданиеВыгрузкаИзмененийМетаданные).УникальныйИдентификатор;
		ЗаданиеВыгрузкаИзменений = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗаданияВыгрузкаИзменений);
		Если ЗаданиеВыгрузкаИзменений <> Неопределено Тогда
		
			Отбор = Новый Структура;
			Отбор.Вставить("РегламентноеЗадание", ЗаданиеВыгрузкаИзменений);
			Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
			ТекущиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			Для Каждого АктивноеЗадание Из ТекущиеФоновыеЗадания Цикл
				Попытка
					РегламентныеЗаданияСлужебный.ОтменитьФоновоеЗадание(АктивноеЗадание.УникальныйИдентификатор);
				Исключение
					// Возможно задание как раз в этот момент закончилось и ошибки нет.
					ЗаписьЖурналаРегистрации(
						ИмяСобытияЖРВыгрузкаСвободныхОстатков(),
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.ОбщиеМодули.бг_битВыгрузкаСвободныхОстатковВSAPИнтеграция,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			КонецЦикла;	
		КонецЕсли;
		
		// Выгрузим все накопленные изменения свободных остатков. 
		бг_битВыгрузкаИзмененийСвободныхОстатковДляИМИнтеграция.ЗарегистрироватьИсходящиеСообщенияДляИМ();
		
		// Выгрузим полные стоки. 
		ЗарегистрироватьИсходящиеСообщенияДляИМ(ЗаданиеВыгрузкаСвободныхОстатков);
		
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();	
		КонецЕсли;	
		
	Исключение
		
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();	
		КонецЕсли;	
		
		ШаблонСообщения = 
			НСтр("ru = 'Не удалось выгрузить данные о свободных остатках в SAP.
				       |По причине: %1
					   |';
				 |en = 'Не удалось выгрузить данные о свободных остатках в SAP.
				       |По причине: %1
					   |'",	
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖРВыгрузкаСвободныхОстатков(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ОбщиеМодули.бг_битВыгрузкаСвободныхОстатковВSAPИнтеграция,
			,
			ТекстСообщения);
		
		ВызватьИсключение ТекстСообщения;	
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	ДобавитьРеквизитыВыгрузкиОстатковВSAP(РеквизитыИСвойства);	
		
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстЗапросаТаблицаКлючей = "";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыгружаемыйОбъект.СкладИнтернетМагазина КАК ИМ,
	|	ВыгружаемыйОбъект.Организация КАК Организация_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.Организация.бг_Тикер КАК Организация_ЗначениеРеквизитаТикер,
	|	ВыгружаемыйОбъект.Ссылка КАК НастройкаУзлаИнтеграцииSAP
	|ИЗ
	|	Справочник.бг_НастройкиУзловИнтеграцииSAP КАК ВыгружаемыйОбъект
	|ГДЕ
	|	&УсловиеЗапроса
	|	И ВыгружаемыйОбъект.Ссылка = &Ссылка
	|	И НЕ ВыгружаемыйОбъект.ПометкаУдаления
	|	И ВыгружаемыйОбъект.СкладИнтернетМагазина <> """"";

	ПараметрыЗапроса.Вставить("Ссылка", Справочники.бг_НастройкиУзловИнтеграцииSAP.ПолучитьСсылку(Новый УникальныйИдентификатор(НастройкаВыгрузки.ДополнительныеСвойстваОбъекта.ИдентификаторНастройкиУзлаИнтеграцииSAP)));
		
	ТекстЗапросаТаблицаКлючей = "";
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");

	ДанныеОбъекта = адаптер_ОбработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Для каждого РеквизитыОбъекта из ДанныеОбъекта.Реквизиты Цикл
		
		Остатки = СвободныеОстаткиТоваров(РеквизитыОбъекта.НастройкаУзлаИнтеграцииSAP);
		Если Остатки.Количество() > 0 Тогда
			РеквизитыОбъекта.Вставить("Остатки", Остатки);
		КонецЕсли;
		
		РеквизитыОбъекта.Удалить("НастройкаУзлаИнтеграцииSAP");
		
	КонецЦикла;
		
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	КлючМаршрутизации = "xml.битВыгрузкаСвободныхОстатковВSAP";
	PortalDistr = ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr");
	B2B = ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B");
	
	Если ДанныеСообщения.Свойство("ДополнительныеСвойстваОбъекта") 
		И ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("ИсточникЗаказа") Тогда
		ИсточникЗаказаСтрокой = ДанныеСообщения.ДополнительныеСвойстваОбъекта.ИсточникЗаказа;
		ИсточникЗаказа = ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов." + ИсточникЗаказаСтрокой);
		Если ИсточникЗаказа = B2B Тогда
			КлючМаршрутизации = КлючМаршрутизации + ".B2B";
		ИначеЕсли ИсточникЗаказа = PortalDistr Тогда
			КлючМаршрутизации = КлючМаршрутизации + ".BPM";
		Иначе
			КлючМаршрутизации = КлючМаршрутизации + ".1CERP";	
		КонецЕсли;
	КонецЕсли;	
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Функция ЗаголовкиИсходящегоСообщения(ДанныеСообщения, Объект, НастройкаВыгрузки) Экспорт
	
	Возврат бг_ИнтеграцияSAP.ЗаголовкиИсходящегоСообщенияJMS(ДанныеСообщения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРеквизитыВыгрузкиОстатковВSAP(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"Организация", 
		Новый ОписаниеТипов("СправочникСсылка.Организации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Организации, 
		"бг_Тикер",
		"Тикер",
		ОбщегоНазначения.ОписаниеТипаСтрока(3));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ИМ",
		ОбщегоНазначения.ОписаниеТипаСтрока(5));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"Остатки.КодПоставщика",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Остатки.КодСкюМТ", 
		ОбщегоНазначения.ОписаниеТипаСтрока(15));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Остатки.Количество",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Остатки.СкладскиеОстатки",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Остатки.ИнтернетЗаказыРезерв",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Остатки.КодЕИ", 
		ОбщегоНазначения.ОписаниеТипаСтрока(4));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Остатки.КодНоменклатуры",
		ОбщегоНазначения.ОписаниеТипаСтрока(11));	
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Остатки.НаименованиеНоменклатуры",
		ОбщегоНазначения.ОписаниеТипаСтрока(1024));	
		
КонецПроцедуры

Функция СвободныеОстаткиТоваров(НастройкаУзлаИнтеграцииSAP)
	
	Остатки = Новый Массив;
	Если Не ЗначениеЗаполнено(НастройкаУзлаИнтеграцииSAP) Тогда
		Возврат Остатки;
	КонецЕсли;
	
	РеквизитыНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаУзлаИнтеграцииSAP,
		"Организация,ИсточникЗаказа");
	ИсточникЗаказа = РеквизитыНастройки.ИсточникЗаказа;
	Организация = РеквизитыНастройки.Организация;
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	бг_ИнтеграцияSAP.СоздатьВТНоменклатура(МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("НастройкаУзлаИнтеграцииSAP", НастройкаУзлаИнтеграцииSAP);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИсточникЗаказа", ИсточникЗаказа);
	
	СегментЗапрещеннойНоменклатуры = Неопределено;
	КаналПродаж = Неопределено; 
	ИспользоватьДолгосрочныеРезервы = Ложь;
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
		СегментЗапрещеннойНоменклатуры = бг_КонстантыПовтИсп.ЗначениеКонстанты("СегментНоменклатурыНеПродаватьВинлаб");
		КаналПродаж = бг_КонстантыПовтИсп.ЗначениеКонстанты("КаналПродажСобственнаяРозница");
		ИспользоватьДолгосрочныеРезервы = Истина;
	КонецЕсли;
	Запрос.УстановитьПараметр("СегментЗапрещеннойНоменклатуры", СегментЗапрещеннойНоменклатуры);
	Запрос.УстановитьПараметр(
		"ИспользоватьСегментЗапрещеннойНоменклатуры", 
		ЗначениеЗаполнено(СегментЗапрещеннойНоменклатуры));
	Запрос.УстановитьПараметр("КаналПродаж", КаналПродаж);
	Запрос.УстановитьПараметр("ИспользоватьДолгосрочныеРезервы", ИспользоватьДолгосрочныеРезервы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриоритетыКаналовПродаж.КаналПродаж КАК КаналПродаж
	|ПОМЕСТИТЬ ПриоритетыКаналовПродаж
	|ИЗ
	|	РегистрСведений.бг_ПриоритетыКаналовПродажДолгосрочныхРезервов КАК ПриоритетыКаналовПродаж
	|ГДЕ
	|	&ИспользоватьДолгосрочныеРезервы
	|	И ПриоритетыКаналовПродаж.Организация = &Организация
	|	И ПриоритетыКаналовПродаж.ИсточникЗаказа = &ИсточникЗаказа
	|	И ПриоритетыКаналовПродаж.КаналПродажОтгрузки = &КаналПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.Склад КАК Склад,
	|	Склады.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ СкладыОтгрузки
	|ИЗ
	|	Справочник.бг_НастройкиУзловИнтеграцииSAP.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &НастройкаУзлаИнтеграцииSAP
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТИсключаемаяНоменклатура
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|   &ИспользоватьСегментЗапрещеннойНоменклатуры
	|	И НоменклатураСегмента.Сегмент = &СегментЗапрещеннойНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСРезервами.Номенклатура КАК Номенклатура,
	|	СУММА(ОстаткиСРезервами.ВНаличии) КАК ВНаличии,
	|	СУММА(ОстаткиСРезервами.Свободно) КАК Свободно,
	|	СУММА(ОстаткиСРезервами.ИнтернетЗаказыРезерв) КАК ИнтернетЗаказыРезерв
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	(ВЫБРАТЬ
	// Свободные остатки на складах.
	|		ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|		ИнформацияОДоступности.Запас КАК ВНаличии,
	|		ИнформацияОДоступности.Свободно КАК Свободно,
	|		0 КАК ИнтернетЗаказыРезерв
	|	ИЗ
	|		РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК СкладыОтгрузки
	|			ПО ИнформацияОДоступности.Склад = СкладыОтгрузки.Склад
	|				И ИнформацияОДоступности.Номенклатура.ВидНоменклатуры = СкладыОтгрузки.ВидНоменклатуры
	|	ГДЕ
	|		ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|		И ИнформацияОДоступности.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ВТНоменклатура КАК ВТНоменклатура)
	|		И ИнформацияОДоступности.Склад В
	|				(ВЫБРАТЬ
	|					СкладыОтгрузки.Склад
	|				ИЗ
	|					СкладыОтгрузки КАК СкладыОтгрузки)
	|		И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|				(ВЫБРАТЬ
	|					ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|					ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|				ИЗ
	|					ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ИнформацияОДоступности.Номенклатура,
	|		0,
	|		0,
	|		ИнформацияОДоступности.Зарезервировано
	|	ИЗ
	|		РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК СкладыОтгрузки
	|			ПО ИнформацияОДоступности.Склад = СкладыОтгрузки.Склад
	|				И ИнформацияОДоступности.Номенклатура.ВидНоменклатуры = СкладыОтгрузки.ВидНоменклатуры
	|	ГДЕ
	|		ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|		И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS)
	|		И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|		И ИнформацияОДоступности.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ВТНоменклатура КАК ВТНоменклатура)
	|		И ИнформацияОДоступности.Склад В
	|				(ВЫБРАТЬ
	|					СкладыОтгрузки.Склад
	|				ИЗ
	|					СкладыОтгрузки КАК СкладыОтгрузки)
	|		И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|				(ВЫБРАТЬ
	|					ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|					ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|				ИЗ
	|					ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Собственные долгосрочные резервы, зарезервированные в остатках на складах.
	// Актуально только для Винлаб, так как для Винлаб мы знаем покупателей и можем выделить именно их
	// долгосрочные резервы. По остальным настройкам мы не знаем, кому конкретно будет продажа.
	|	ВЫБРАТЬ
	|		ИнформацияОДоступности.Номенклатура,
	|		0,
	|		ИнформацияОДоступности.Зарезервировано,
	|		0
	|	ИЗ
	|		РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК СкладыОтгрузки
	|			ПО ИнформацияОДоступности.Склад = СкладыОтгрузки.Склад
	|				И ИнформацияОДоступности.Номенклатура.ВидНоменклатуры = СкладыОтгрузки.ВидНоменклатуры
	|	ГДЕ
	|   	&ИспользоватьДолгосрочныеРезервы
	|		И ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|		И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв = ИСТИНА
	|		И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|		И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер В
	|				(ВЫБРАТЬ
	|					ВТПартнеры.Партнер
	|				ИЗ
	|					ВТПартнеры КАК ВТПартнеры)
	|		И ИнформацияОДоступности.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ВТНоменклатура КАК ВТНоменклатура)
	|		И ИнформацияОДоступности.Склад В
	|				(ВЫБРАТЬ
	|					СкладыОтгрузки.Склад
	|				ИЗ
	|					СкладыОтгрузки КАК СкладыОтгрузки)
	|		И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|				(ВЫБРАТЬ
	|					ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|					ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|				ИЗ
	|					ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	// Чужие долгосрочные резервы, зарезервированные в остатках на складах, 
	// в соответствии с настройкой в РС "Приоритеты каналов продаж долгосрочных резервов".
	// Актуально только для Винлаб, так как для Винлаб мы знаем канал продаж.
	// По остальным настройкам мы не знаем канал продаж однозначно.
	|	ВЫБРАТЬ
	|		ИнформацияОДоступности.Номенклатура,
	|		0,
	|		ИнформацияОДоступности.Зарезервировано,
	|		0
	|	ИЗ
	|		РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СкладыОтгрузки КАК СкладыОтгрузки
	|			ПО ИнформацияОДоступности.Склад = СкладыОтгрузки.Склад
	|				И ИнформацияОДоступности.Номенклатура.ВидНоменклатуры = СкладыОтгрузки.ВидНоменклатуры
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПриоритетыКаналовПродаж КАК ПриоритетыКаналовПродаж
	|			ПО (ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_КаналПродаж = ПриоритетыКаналовПродаж.КаналПродаж)
	|	ГДЕ
	|		&ИспользоватьДолгосрочныеРезервы
	|		И ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|		И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв = ИСТИНА
	|		И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|		И НЕ ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер В
	|				(ВЫБРАТЬ
	|					ВТПартнеры.Партнер
	|				ИЗ
	|					ВТПартнеры КАК ВТПартнеры)
	|		И ИнформацияОДоступности.Номенклатура В
	|				(ВЫБРАТЬ
	|					ВТНоменклатура.Номенклатура КАК Номенклатура
	|				ИЗ
	|					ВТНоменклатура КАК ВТНоменклатура)
	|		И ИнформацияОДоступности.Склад В
	|				(ВЫБРАТЬ
	|					СкладыОтгрузки.Склад
	|				ИЗ
	|					СкладыОтгрузки КАК СкладыОтгрузки)
	|		И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|				(ВЫБРАТЬ
	|					ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|					ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|				ИЗ
	|					ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|		И НЕ ПриоритетыКаналовПродаж.КаналПродаж ЕСТЬ NULL) КАК ОстаткиСРезервами
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиСРезервами.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.КодЕИ КАК КодЕИ,
	|	ВТНоменклатура.КодНоменклатуры КАК КодНоменклатуры,
	|	ВТНоменклатура.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ВТНоменклатура.СКЮ_МТ.Код КАК КодСкюМТ,
	|	ВТНоменклатура.КодДляПоискаНоменклатуры КАК КодПоставщика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Остатки.Свободно, 0) > 0
	|			ТОГДА ВТ_Остатки.Свободно
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Остатки.ВНаличии, 0) > 0
	|			ТОГДА ВТ_Остатки.ВНаличии
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СкладскиеОстатки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_Остатки.ИнтернетЗаказыРезерв, 0) > 0
	|			ТОГДА ВТ_Остатки.ИнтернетЗаказыРезерв
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИнтернетЗаказыРезерв
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ВТНоменклатура.Номенклатура = ВТ_Остатки.Номенклатура
	|ГДЕ
	|	НЕ ВТНоменклатура.СКЮ_МТ.Код ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТНоменклатура.КодДляПоискаНоменклатуры,
	|	ВТНоменклатура.СКЮ_МТ.Код";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		СтруктураСтроки = Новый Структура(
			"КодСкюМТ,
			|КодПоставщика,
			|КодЕИ,
			|Количество,
			|СкладскиеОстатки,
			|ИнтернетЗаказыРезерв,
			|КодНоменклатуры,
			|НаименованиеНоменклатуры");
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		
		Остатки.Добавить(СтруктураСтроки);
	КонецЦикла;

	Возврат Остатки;
	
КонецФункции

Функция ИмяСобытияЖРВыгрузкаСвободныхОстатков()
	
	ИмяСобытияЖР = НСтр("ru = 'Выгрузка свободных остатков';
					    |en = 'Выгрузка свободных остатков'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Возврат ИмяСобытияЖР;
	
КонецФункции	

// Регистрирует исходящие сообщения с информацией о свободных остатках товаров для интернет-магазинов.
//
Процедура ЗарегистрироватьИсходящиеСообщенияДляИМ(ЗаданиеВыгрузкаСвободныхОстатков)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", "ИспользоватьВыгрузкуСвободныхОстатковВSAP");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияДополнительныхКонстант.Разрез КАК Разрез
	|ПОМЕСТИТЬ СписокУзловИнтеграции	
	|ИЗ
	|	РегистрСведений.бг_ЗначенияДополнительныхКонстант КАК ЗначенияДополнительныхКонстант
	|ГДЕ
	|	ВЫРАЗИТЬ(ЗначенияДополнительныхКонстант.Константа КАК Справочник.бг_ДополнительныеКонстанты).Идентификатор = &Идентификатор
	|	И ЗначенияДополнительныхКонстант.Значение = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО 
	|	ЗначенияДополнительныхКонстант.Разрез	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыгружаемыйОбъект.Ссылка КАК Ссылка,
	|	ВыгружаемыйОбъект.Наименование КАК Наименование,
	|	ВыгружаемыйОбъект.ИсточникЗаказа КАК ИсточникЗаказа,
	|	ВыгружаемыйОбъект.СкладИнтернетМагазина КАК СкладИнтернетМагазина,
	|	ВыгружаемыйОбъект.Организация КАК Организация,
	|	ВыгружаемыйОбъект.Организация.бг_Тикер КАК Тикер
	|ИЗ
	|	Справочник.бг_НастройкиУзловИнтеграцииSAP КАК ВыгружаемыйОбъект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокУзловИнтеграции КАК СписокУзловИнтеграции
	|		ПО ВыгружаемыйОбъект.Ссылка = СписокУзловИнтеграции.Разрез 
	|ГДЕ
	|	НЕ ВыгружаемыйОбъект.ПометкаУдаления
	|	И ВыгружаемыйОбъект.СкладИнтернетМагазина <> """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Остатки = СвободныеОстаткиТоваров(Выборка.Ссылка);	
		Если Остатки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеОбъекта = Новый Структура;
		ДанныеОбъекта.Вставить("ПолноеИмя", 
			Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP.ПолноеИмя());
		ДанныеОбъекта.Вставить("Реквизиты", Новый Массив);
		
		РеквизитыОбъекта = Новый Структура;
		РеквизитыОбъекта.Вставить("ИМ", Выборка.СкладИнтернетМагазина);
		
		Если ЗначениеЗаполнено(Выборка.Организация) Тогда
			РеквизитыОбъекта.Вставить("Организация", Новый Структура);
			РеквизитыОбъекта.Организация.Вставить("Идентификатор", Строка(Выборка.Организация.УникальныйИдентификатор()));
			РеквизитыОбъекта.Организация.Вставить("Тикер", Выборка.Тикер);
		КонецЕсли;
		
		РеквизитыОбъекта.Вставить("Остатки", Остатки);
		
		ДанныеОбъекта.Реквизиты.Добавить(РеквизитыОбъекта); 	
		
		Идентификатор = Выборка.Ссылка.УникальныйИдентификатор();
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ИдентификаторНастройкиУзлаИнтеграцииSAP", Идентификатор);
		ДополнительныеСвойства.Вставить("НаименованиеНастройкиУзлаИнтеграцииSAP",  Выборка.Наименование);
		ИсточникЗаказаСтрокой = 
			адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(Выборка.ИсточникЗаказа);
		ДополнительныеСвойства.Вставить("ИсточникЗаказа", ИсточникЗаказаСтрокой);
		
		бг_ИнтеграцияSAP.ЗарегистрироватьИсходящееСообщениеПоДаннымОбъекта(
				ДанныеОбъекта, 
				ЗаданиеВыгрузкаСвободныхОстатков,
				ДополнительныеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры	

#КонецОбласти
