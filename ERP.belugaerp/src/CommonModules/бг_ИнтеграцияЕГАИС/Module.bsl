#Область ПрограммныйИнтерфейс

Функция ЗагрузитьУведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве(
	ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЭтоОтчетОПроизводстве = Ложь;
	Identity = ДанныеДокумента.Объект.Header.Identity;
	
	РезультатПоиска = Документы.битОтчетОбИмпортеПродукцииЕГАИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Identity)).ПолучитьОбъект();
	
	Если РезультатПоиска = Неопределено Тогда
		
		РезультатПоиска = Документы.битОтчетОПроизводствеЕГАИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Identity)).ПолучитьОбъект();
		ЭтоОтчетОПроизводстве = Истина;
		Если РезультатПоиска = Неопределено Тогда
			
			ВызватьИсключение СтрШаблон(
			НСтр(
			"ru = 'При загрузке уведомления о регистрации ЕГАИС:
			|Не найден документ ЕГАИС с идентификатором %1.';
			|en = 'При загрузке уведомления о регистрации ЕГАИС:
			|Не найден документ ЕГАИС с идентификатором %1.'"),
			Identity);
		КонецЕсли;
	КонецЕсли;
	
	Если СтатусКОтменеПроведения(РезультатПоиска.Ссылка) Тогда 
		ВызватьИсключение СтрШаблон(
		НСтр(
		"ru = 'При загрузке уведомления о регистрации ЕГАИС:
		|Документ %1 в процессе отмены проведения';
		|en = 'При загрузке уведомления о регистрации ЕГАИС:
		|Документ %1 в процессе отмены проведения'"),
		РезультатПоиска.Ссылка);
	КонецЕсли;

	ДокументОбъект = РезультатПоиска;

	ИсходящееСообщение = Неопределено;
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получено уведомление о регистрации ЕГАИС';
	                                                |en = 'Получено уведомление о регистрации ЕГАИС'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ИнтеграцияЕГАИС.ДобавитьЗаписьВПротоколОбмена(ДанныеДокумента.ТекстXML, Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		Если ЭтоОтчетОПроизводстве Тогда
			ЗагрузитьУведомлениеОРегистрацииОтчетаОПроизводствеЕГАИС(ДанныеДокумента.Объект, РезультатПоиска, НовыйСтатус, ОбъектИзменен);
		Иначе
			ЗагрузитьУведомлениеОРегистрацииОтчетаОбИмпортеПродукцииЕГАИС(ДанныеДокумента.Объект, РезультатПоиска, НовыйСтатус, ОбъектИзменен);
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОбъект.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
			
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗагрузитьНакладнаяНаВыдачуФСМ(
	ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт

	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	ДокументСсылка = Документы.битНакладнаяНаВыдачуФСМ.ПолучитьСсылку();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             ДокументСсылка);
	Реквизиты.Вставить("СообщениеОснование",   Неопределено);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получена накладная на выдачу ФСМ';
													|en = 'Получена накладная на выдачу ФСМ)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	РезультатДобавленияЗаписи = ИнтеграцияЕГАИС.ДобавитьЗаписьВПротоколОбмена(ДанныеДокумента.ТекстXML, Реквизиты, Истина);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = СоздатьНакладнаяНаВыдачуФСМ(ДокументСсылка);
		
		ЗаполнитьНакладнаяНаВыдачуФСМ(ДокументОбъект, ДанныеДокумента.Объект, ДокументСсылка);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
		ОбъектИзменен = Истина;

	Иначе
		
		ДокументСсылка = РезультатДобавленияЗаписи.Документ;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();

		Если Не ДокументОбъект.Проведен Тогда 
			
			ЗаполнитьНакладнаяНаВыдачуФСМ(ДокументОбъект, ДанныеДокумента.Объект, ДокументСсылка);
		
			ДокументОбъект.ПометкаУдаления = Ложь;
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		
			ОбъектИзменен = Истина;
			
		КонецЕсли	
		
	КонецЕсли;
		
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = Неопределено;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументСсылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает указанные документы из регистра входящих документов УТМ.
//
// Параметры:
//  КлючиЗаписей - Массив из РегистрСведенийКлючЗаписи
//
Процедура ОбработатьУказанныеВходящиеДокументыУТМ(КлючиЗаписей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументыКЗагрузке = ДокументыКЗагрузкеПоКлючам(КлючиЗаписей);
	ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы(ДокументыКЗагрузке);
	
КонецПроцедуры	

Функция ЗагрузитьКвитанциюОтчетОбИспользованииФСМ(
	ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДанныеОснованияКвитанции = ИнтеграцияЕГАИС.НайтиОбъектПоИдентификаторуЗапроса(ДанныеДокумента.ИдентификаторЗапроса);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	Если ДанныеОснованияКвитанции.ИсходящееСообщение = Неопределено Тогда
		ИсходящееСообщение = ИнтеграцияЕГАИС.ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	Иначе
		ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	КонецЕсли;
	
	СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             ДанныеОснованияКвитанции.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             ДанныеДокумента.Объект.OperationResult.OperationComment);
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("ОперацияКвитанции",    ДанныеОснованияКвитанции.Операция);
	
	РезультатДобавленияЗаписи = ИнтеграцияЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
		
	Если ДанныеОснованияКвитанции.Ссылка <> Неопределено Тогда
		ЭтоДокумент = Метаданные.Документы.Содержит(ДанныеОснованияКвитанции.Ссылка.Метаданные());
	Иначе
		ЭтоДокумент = Ложь;
	КонецЕсли;
		
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ?(ЭтоДокумент, ДанныеОснованияКвитанции.Ссылка, Неопределено);
	ВозвращаемоеЗначение.ДокументОснование = ДанныеОснованияКвитанции.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПроверитьЗаполнениеАлкогольнойПродукции(Объект, Отказ) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(, "НомерСтроки, Номенклатура, АлкогольнаяПродукция"));
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.битОтчетОПроизводствеЕГАИС") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.АлкогольнаяПродукция КАК Справочник.КлассификаторАлкогольнойПродукцииЕГАИС) КАК АлкогольнаяПродукция
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Номенклатура.Крепость <> Товары.АлкогольнаяПродукция.Крепость КАК НеСоответствуетКрепость,
		|	Товары.Номенклатура.ВидАлкогольнойПродукции <> Товары.АлкогольнаяПродукция.ВидПродукции КАК НеСоответсвуетВидПродукции,
		|	НЕ &ОрганизацияЕГАИС В (Товары.АлкогольнаяПродукция.Производитель, НЕОПРЕДЕЛЕНО) КАК НеСоответствуетПроизводитель,
		|	ВЫБОР
		|		КОГДА Товары.АлкогольнаяПродукция.Объем = 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ Товары.АлкогольнаяПродукция.Объем <> Товары.Номенклатура.ОбъемЧислитель / ВЫБОР
		|				КОГДА Товары.Номенклатура.ОбъемЗнаменатель = 0
		|					ТОГДА 1
		|				ИНАЧЕ Товары.Номенклатура.ОбъемЗнаменатель
		|			КОНЕЦ
		|	КОНЕЦ КАК НеСоответствуетОбъем
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	(Товары.Номенклатура.Крепость <> Товары.АлкогольнаяПродукция.Крепость
		|			ИЛИ Товары.Номенклатура.ВидАлкогольнойПродукции <> Товары.АлкогольнаяПродукция.ВидПродукции
		|			ИЛИ НЕ &ОрганизацияЕГАИС В (Товары.АлкогольнаяПродукция.Производитель, НЕОПРЕДЕЛЕНО)
		|			ИЛИ ВЫБОР
		|				КОГДА Товары.АлкогольнаяПродукция.Объем = 0
		|					ТОГДА ЛОЖЬ
		|				ИНАЧЕ Товары.АлкогольнаяПродукция.Объем <> Товары.Номенклатура.ОбъемЧислитель / ВЫБОР
		|						КОГДА Товары.Номенклатура.ОбъемЗнаменатель = 0
		|							ТОГДА 1
		|						ИНАЧЕ Товары.Номенклатура.ОбъемЗнаменатель
		|					КОНЕЦ
		|			КОНЕЦ)";
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Товары.АлкогольнаяПродукция КАК Справочник.КлассификаторАлкогольнойПродукцииЕГАИС) КАК АлкогольнаяПродукция
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Ложь КАК НеСоответствуетКрепость,
		|	Товары.Номенклатура.ВидАлкогольнойПродукции <> Товары.АлкогольнаяПродукция.ВидПродукции КАК НеСоответсвуетВидПродукции,
		|	Ложь КАК НеСоответствуетПроизводитель,
		|	Ложь КАК НеСоответствуетОбъем
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ВидАлкогольнойПродукции <> Товары.АлкогольнаяПродукция.ВидПродукции";
	КонецЕсли;
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		ТекстОшибки = НСтр("ru = 'Обнаружены расхождения в показателях номенклатуры и алкогольной продукции. Не совпадает: %1'");
		
		ПоляВыявленыОшибки = Новый Массив;
		
		Если Выборка.НеСоответствуетКрепость Тогда
			ПоляВыявленыОшибки.Добавить(НСтр("ru = 'крепость'"));
		КонецЕсли;
		
		Если Выборка.НеСоответсвуетВидПродукции Тогда
			ПоляВыявленыОшибки.Добавить(НСтр("ru = 'вид продукции'"));
		КонецЕсли;
		
		Если Выборка.НеСоответствуетПроизводитель Тогда
			ПоляВыявленыОшибки.Добавить(НСтр("ru = 'производитель'"));
		КонецЕсли;
		
		Если Выборка.НеСоответствуетОбъем Тогда
			ПоляВыявленыОшибки.Добавить(НСтр("ru = 'объем'"));
		КонецЕсли;
		
		ТекстОшибкиПроверкаЗаполненияАлкогольнойПродукции = СтрШаблон(ТекстОшибки, СтрСоединить(ПоляВыявленыОшибки, ","));
		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибкиПроверкаЗаполненияАлкогольнойПродукции,
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "АлкогольнаяПродукция"),
			,
			Отказ);
	КонецЦикла;
КонецПроцедуры

// Процедура - отправляет в УТМ запрос справок 1, корорые не были еще загружены из УТМ
//
// Параметры:
//  Документ - ДокументСсылка.ТТНВходящаяЕГАИС, ДокументСсылка.битОтчетОПроизводствеЕГАИС - ссылка на документ ЕГАИС 
//
Процедура ОтправитьЗапросыСправок1ВУТМ(Документ) Экспорт
	
	ДанныеСправок1Документа = Неопределено;
	ТипЗначенияДокумента = ТипЗнч(Документ);
	
	Если ТипЗначенияДокумента = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		ДанныеСправок1Документа = ДанныеСправок1АктаПостановкиНаБалансЕГАИС(Документ);
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.битОтчетОбИмпортеПродукцииЕГАИС") Тогда
		ДанныеСправок1Документа = ДанныеСправок1ОтчетаОбИмпортеПродукцииЕГАИС(Документ);
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.битОтчетОПроизводствеЕГАИС") Тогда
		ДанныеСправок1Документа = ДанныеСправок1ОтчетаОПроизводствеЕГАИС(Документ);
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеСправок1Документа = ДанныеСправок1ТТНВходящейЕГАИС(Документ);
	КонецЕсли;
	
	Если ДанныеСправок1Документа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСправки1 Из ДанныеСправок1Документа.Справки1ДляЗапросаВУТМ Цикл
		ОтправитьЗапросСправки1ВУТМ(ДанныеСправки1);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Записывает в справку 2 загруженные из УТМ справки 1
//
// Параметры:
//  Документ - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ ЕГАИС 
//
Процедура ОбработатьЗагруженныеИзУТМСправки1(Документ) Экспорт
	
	ДанныеСправок1Документа = Неопределено;
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ДанныеСправок1Документа = ДанныеСправок1ТТНВходящейЕГАИС(Документ);
	КонецЕсли;
	
	Если ДанныеСправок1Документа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСправки1 Из ДанныеСправок1Документа.Справки1ДляЗаполненияВСправке2 Цикл
		ЗаполнитьЗагруженнуюИзУТМСправку1ВСправке2(ДанныеСправки1);	
	КонецЦикла;
		
КонецПроцедуры

Функция ОрганизацияЕГАИС(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент" , Организация);
	Запрос.УстановитьПараметр("СоответствуетОрганизации", Истина);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	НЕ КлассификаторОрганизацийЕГАИС.ПометкаУдаления
	|	И КлассификаторОрганизацийЕГАИС.Контрагент = &Контрагент
	|	И КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации = &СоответствуетОрганизации";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;

КонецФункции	

// Формирует коллекции: «ДеревоУпаковок» и «МаркированныеТовары».
// Метод заменяет собой типовой метод ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ().
// Данные формируются с той же структурой, но из других источников (регистры бг_ДвиженияМарок и бг_СоставУпаковок).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНИсходящаяЕГАИС, ДокументСсылка.ВходящаяЕГАИС - Ссылка на ТТН.
//  ДокументОснование - ДокументСсылка - Документ-основание ТТН.
//  ДанныеСообщенияXML - Структура - см. ИнтеграцияЕГАИС.СтруктураСообщенияXML().
//
// Возвращаемое значение:
//  Структура - Описание:
// * МаркированныеТовары - ТаблицаЗначений - Таблица, содержащая товары, подлежащие маркировке.
// * ДеревоУпаковок - ДеревоЗначений - Дерево упаковок, построенное в соответствие с хранением
//   в справочнике ШтрихкодыУпаковок.
//
Функция ДанныеШтрихкодовДляГенерацииЕГАИСXML(ДокументСсылка, ДанныеСообщенияXML, ДокументОснование = Неопределено) Экспорт
	
	ДеревоУпаковок = ШтрихкодированиеЕГАИС.ИнициализироватьДеревоУпаковок();
	МаркированныеТовары = ШтрихкодированиеЕГАИС.бг_ИнициализироватьТаблицуМаркированныеТовары();
	
	Результат = Новый Структура;
	Результат.Вставить("ДеревоУпаковок", ДеревоУпаковок);
	Результат.Вставить("МаркированныеТовары", МаркированныеТовары);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		
		ДанныеШтрихкодов = Документы.АктПостановкиНаБалансЕГАИС.бг_ДанныеПриходуемыхШтрихкодов(
			ДокументСсылка,
			Ложь);
			
		ДанныеШтрихкодов.Вставить("СтатусАкцизнойМарки", Перечисления.СтатусыАкцизныхМарок.ПустаяСсылка());
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		
		ДанныеШтрихкодов = Документы.АктСписанияЕГАИС.бг_ДанныеСписываемыхШтрихкодов(
			ДокументСсылка,
			Ложь);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ДанныеШтрихкодов = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовФакт(
			ДокументСсылка,
			Ложь);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		ДанныеШтрихкодов = Документы.ТТНИсходящаяЕГАИС.бг_ДанныеОтгружаемыхШтрихкодов(
			ДокументСсылка,
			ДокументОснование,
			Ложь);
			
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестный тип документа ЕГАИС.'");
	КонецЕсли;
	
	Если ДанныеШтрихкодов = Неопределено Тогда
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			ДанныеСообщенияXML,
			НСтр("ru = 'Не удалось получить данные о марках по документу.'"));
			
		Возврат Результат;
	КонецЕсли;
	
	Если Не ДанныеШтрихкодовСоотвествуютАП(ДанныеШтрихкодов.Марки, ДанныеСообщенияXML) Тогда
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			ДанныеСообщенияXML,
			НСтр("ru = 'Данные штрихкодов по документу ЕГАИС не соответствуют алкогольной продукции.'"));
			
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьДанныеШтрихкодовДляГенерацииЕГАИСXML(ДеревоУпаковок, МаркированныеТовары, ДанныеШтрихкодов);
	
	Возврат Результат;
	
КонецФункции

Функция ОтражатьСкладскиеДвиженияПоОснованию(ДокументОснование) Экспорт
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Склад, Дата");
		Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(ЗначенияРеквизитов.Склад, ЗначенияРеквизитов.Дата) Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда	
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Склад, Дата");
		Если Не СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(ЗначенияРеквизитов.Склад, ЗначенияРеквизитов.Дата) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если бг_ИнтеграцияЕГАИСПовтИсп.ЕстьАлкогольнаяПродукция(ДокументОснование) Тогда
		
		ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(ДокументОснование);
		
		Если ДанныеТТНВходящей = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ДанныеТТНВходящей.ТекущийСтатус);
		
	Иначе
		
		Возврат Документы.ПриходныйОрдерНаТовары.бг_ЕстьПриходныйОрдерНаТоварыСФинальнымСтатусомПоДокументу(ДокументОснование);
		
	КонецЕсли;
	
КонецФункции

// Процедура - Зарегистрировать документ для отложенного запроса справок1
//
// Параметры:
//  Документ - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ ЕГАИС
//
Процедура ЗарегистрироватьДокументДляОтложенногоЗапросаСправок1(Документ) Экспорт
	
	РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
		Документ,
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОтправитьЗапросыСправки1ЕГАИС);
	
КонецПроцедуры

// Процедура - Зарегистрировать документ для отложенного изменения даты связанных учетных документов
//
// Параметры:
//  Документ - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ ЕГАИС
//
Процедура ЗарегистрироватьДокументДляОтложенногоИзмененияДатыСвязанныхУчетныхДокументов(Документ) Экспорт
	
	РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
		Документ,
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ИзменитьДатуСвязанныхУчетныхДокументов);
	
КонецПроцедуры	

// Процедура - Изменить дату связанных учетных документов ТТН входящей ЕГАИС
//
// Параметры:
//  Документ - ДокументСсылка.ТТНВходящаяЕГАИС - ссылка на документ ЕГАИС
//
Процедура ИзменитьДатуСвязанныхУчетныхДокументовТТНВходящейЕГАИС(ТТНВходящаяЕГАИС) Экспорт
			
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеТТНВходящей = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТТНВходящаяЕГАИС, "ДатаРегистрацииДвижений, ДокументОснование, ДокументОснование.Дата");
	ДатаПодтвержденияТТН = ДанныеТТНВходящей.ДатаРегистрацииДвижений;
	ДокументОснование = ДанныеТТНВходящей.ДокументОснование;
	ДатаДокументаОснования = ДанныеТТНВходящей.ДокументОснованиеДата;	
	
	Если Не ЗначениеЗаполнено(ДатаПодтвержденияТТН) Тогда
		ДатаПодтвержденияТТН = ДатаПодтвержденияРасхожденийТТНВходящейИзТикетаЕГАИС(ТТНВходящаяЕГАИС);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаПодтвержденияТТН) Тогда
		ВызватьИсключение НСтр("ru='Не заполнена дата регистрации движений.'");
	КонецЕсли;
	
	СчетаФактуры = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(ДокументОснование);	
	ВыборкаКорректировочныеДокументы = КорректировочныеДокументыПоОснованию(ДокументОснование);	
	
	НачатьТранзакцию();	
	
	Попытка
		Если ДанныеТТНВходящей.ДатаРегистрацииДвижений <> ДатаПодтвержденияТТН Тогда
			ИзменитьДатуВДокументе(ТТНВходящаяЕГАИС, ДатаПодтвержденияТТН, "ДатаРегистрацииДвижений");
		КонецЕсли;
		
		Если ДатаДокументаОснования <> ДатаПодтвержденияТТН Тогда
			ИзменитьДатуВДокументе(ДокументОснование, ДатаПодтвержденияТТН);
		КонецЕсли;
		
		Для Каждого СтрокаСчетаФактуры Из СчетаФактуры Цикл 
			Если СтрокаСчетаФактуры.Дата <> ДатаПодтвержденияТТН Тогда
				ИзменитьДатуВДокументе(СтрокаСчетаФактуры.Ссылка, ДатаПодтвержденияТТН);
			КонецЕсли;	
		КонецЦикла;
		
		// изменение даты в корректировочных документах
		Если ВыборкаКорректировочныеДокументы <> Неопределено Тогда
			ИзменитьДатуКорректировочныхДокументов(ВыборкаКорректировочныеДокументы, ДатаПодтвержденияТТН);	
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();	
	Исключение	
		ОтменитьТранзакцию();
		
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;	
	
КонецПроцедуры

Функция КорректировочныеДокументыПоОснованию(Основание)
	
	Если ТипЗнч(Основание) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Возврат Неопределено;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КорректировкаПриобретения.Ссылка КАК КорректировкаПриобретения,
	|	КорректировкаПриобретения.Дата КАК ДатаДокументаКорректировки
	|ПОМЕСТИТЬ КорректировкиПриобретения
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|ГДЕ
	|	КорректировкаПриобретения.Проведен
	|	И (ВЫРАЗИТЬ(КорректировкаПриобретения.ДокументОснование КАК Документ.ПриобретениеТоваровУслуг)) = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.Ссылка КАК СчетФактура,
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Дата КАК ДатаСчетФактуры,
	|	ВЫРАЗИТЬ(СчетФактураПолученныйДокументыОснования.ДокументОснование КАК Документ.КорректировкаПриобретения) КАК КорректировкаПриобретения
	|ПОМЕСТИТЬ СчетФактурыКорректировокПриобретения
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.Проведен
	|	И ВЫРАЗИТЬ(СчетФактураПолученныйДокументыОснования.ДокументОснование КАК Документ.КорректировкаПриобретения) В
	|			(ВЫБРАТЬ
	|				ВТ.КорректировкаПриобретения
	|			ИЗ
	|				КорректировкиПриобретения КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкиПриобретения.КорректировкаПриобретения КАК КорректировкаПриобретения,
	|	КорректировкиПриобретения.ДатаДокументаКорректировки КАК ДатаКорректировкиПриобретения,
	|	СчетФактурыКорректировокПриобретения.СчетФактура КАК СчетФактура,
	|	СчетФактурыКорректировокПриобретения.ДатаСчетФактуры КАК ДатаСчетФактуры
	|ИЗ
	|	КорректировкиПриобретения КАК КорректировкиПриобретения
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетФактурыКорректировокПриобретения КАК СчетФактурыКорректировокПриобретения
	|		ПО КорректировкиПриобретения.КорректировкаПриобретения = СчетФактурыКорректировокПриобретения.КорректировкаПриобретения
	|ИТОГИ
	|	МАКСИМУМ(ДатаКорректировкиПриобретения)
	|ПО
	|	КорректировкаПриобретения";
	
	Запрос.УстановитьПараметр("ДокументОснование", Основание);	
	
	Возврат	Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции	

Процедура ИзменитьДатуКорректировочныхДокументов(КорректировочныеДокументы, ДатаОснования)

	Пока КорректировочныеДокументы.Следующий() Цикл

		КорректировкаПриобретения = КорректировочныеДокументы.КорректировкаПриобретения;
		ДатаКорректировкиПриобретения = КорректировочныеДокументы.ДатаКорректировкиПриобретения;

		// устанавливаем дату на минуту позже от документа основания
		ДатаКУстановке = ДатаОснования + 60;

		Если ДатаКорректировкиПриобретения <> ДатаКУстановке Тогда
			ИзменитьДатуВДокументе(КорректировкаПриобретения, ДатаКУстановке);	
		КонецЕсли;

		ВыборкаСчетФактурыКорректировки = КорректировочныеДокументы.Выбрать(); 

		Пока ВыборкаСчетФактурыКорректировки.Следующий() Цикл

			СчетФактура = ВыборкаСчетФактурыКорректировки.СчетФактура;

			Если Не ЗначениеЗаполнено(СчетФактура) Тогда
				Продолжить;	
			КонецЕсли;	

			ДатаСчетФактуры = ВыборкаСчетФактурыКорректировки.ДатаСчетФактуры;

			Если ДатаСчетФактуры <> ДатаКУстановке Тогда
				ИзменитьДатуВДокументе(СчетФактура, ДатаКУстановке);
			КонецЕсли;	

		КонецЦикла;	

	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные справки 2, включая данные связанных справочников.
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеСправки2(Справка2) Экспорт

	ДанныеСправки2 = Новый Структура("Справка1, Крепость");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справки2ЕГАИС.Справка1 КАК Справка1,
	|	ЕСТЬNULL(Справки2ЕГАИС.Справка1.бг_Крепость, 0) КАК Крепость
	|ИЗ
	|	Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|ГДЕ
	|	Справки2ЕГАИС.Ссылка = &Справка2";
	
	Запрос.УстановитьПараметр("Справка2", Справка2);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСправки2, Выборка);
	КонецЕсли;
	
	Возврат ДанныеСправки2;

КонецФункции

#Область УведомлениеОНачалеОборотаНаТерриторииРФАП

// Заполняет список типов организаций производителей.
//
// Параметры:
//  СписокВыбора - СписокЗначений - формируемый список значений.
//
Процедура ЗаполнитьСписокВыбораТипаОрганизацииПроизводителя(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	ТекстЕГАИС = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
		"организация, осуществляющая производство алкогольной продукции,
		| подлежащей маркировке федеральными специальными марками.");
	СписокВыбора.Добавить(ТекстЕГАИС);
	
	ТекстЕГАИС = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
		"организация, осуществляющая производство пива и пивных напитков, сидра, пуаре, медовухи
		| и имеющая основное технологическое оборудование для производства указанной продукции
		| с производственной мощностью не более 300 тысяч декалитров в год.");
	СписокВыбора.Добавить(ТекстЕГАИС);
	
	ТекстЕГАИС = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
		"организация, осуществляющая производство пива и пивных напитков, сидра, пуаре, медовухи
		| и имеющая основное технологическое оборудование для производства указанной продукции
		| с производственной мощностью более 300 тысяч декалитров в год.");
	СписокВыбора.Добавить(ТекстЕГАИС);
	
	ТекстЕГАИС = "организация, осуществляющая ввоз алкогольной продукции в Российскую Федерацию.";
	СписокВыбора.Добавить(ТекстЕГАИС);
	
КонецПроцедуры

// Заполняет список типов пива.
//
// Параметры:
//  СписокВыбора - СписокЗначений - формируемый список значений.
//
Процедура ЗаполнитьСписокВыбораТипаПива(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("светлое");
	СписокВыбора.Добавить("темное");
	
КонецПроцедуры

// Заполняет список способов обработки пива.
//
// Параметры:
//  СписокВыбора - СписокЗначений - формируемый список значений.
//
Процедура ЗаполнитьСписокВыбораСпособовОбработкиПива(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("непастеризованное");
	СписокВыбора.Добавить("пастеризованное");
	СписокВыбора.Добавить("фильтрованное");
	СписокВыбора.Добавить("нефильтрованное осветленное");
	СписокВыбора.Добавить("нефильтрованное неосветленное");
	
КонецПроцедуры

// Заполняет список рынков поставки.
//
// Параметры:
//  СписокВыбора - СписокЗначений - формируемый список значений.
//
Процедура ЗаполнитьСписокВыбораРынкаПоставки(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить(
		"для поставки на территории Российской Федерации");
	
	СписокВыбора.Добавить(
		"для поставки продукции за пределы территории Российской Федерации – на экспорт");
	
	СписокВыбора.Добавить(
		"для поставки на территории Российской Федерации и за пределы территории Российской Федерации – на экспорт");
	
КонецПроцедуры

// Заполняет список видов тары.
//
// Параметры:
//  СписокВыбора - СписокЗначений - формируемый список значений.
//
Процедура ЗаполнитьСписокВыбораВидаТары(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("бутылка");	
	СписокВыбора.Добавить("графин");
	СписокВыбора.Добавить("банка");
	СписокВыбора.Добавить("фляжка");
	СписокВыбора.Добавить("фляга");
	СписокВыбора.Добавить("бочка");
	СписокВыбора.Добавить("кег");
	СписокВыбора.Добавить("тетра-пак");
	СписокВыбора.Добавить("бегинбок");
	СписокВыбора.Добавить("танк");
	СписокВыбора.Добавить("автоцистерна");
	СписокВыбора.Добавить("стакан");
	
КонецПроцедуры

// Заполняет список описаний тары.
//
// Параметры:
//  СписокВыбора - СписокЗначений - формируемый список значений.
//
Процедура ЗаполнитьСписокВыбораОписанийТары(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	СписокВыбора.Добавить("стеклянная");	
	СписокВыбора.Добавить("металлическая");
	СписокВыбора.Добавить("пластиковая");
	СписокВыбора.Добавить("иное");
	
КонецПроцедуры

// Заполняет список назначений тары.
//
// Параметры:
//  СписокВыбора - СписокЗначений - формируемый список значений.
//
Процедура ЗаполнитьСписокВыбораНазначенийТары(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	ТекстЕГАИС = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
		"для алкогольной продукции, производимой на территории Российской Федерации
		| и разливаемой в потребительскую тару");
	СписокВыбора.Добавить(ТекстЕГАИС);
	
	ТекстЕГАИС = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
		"для алкогольной продукции, производимой на территории Российской Федерации
		| и разливаемой в транспортную тару");
	СписокВыбора.Добавить(ТекстЕГАИС);
	
	ТекстЕГАИС = "для импортной продукции в потребительской таре";
	СписокВыбора.Добавить(ТекстЕГАИС);
	
	ТекстЕГАИС = "для импортной продукции в транспортной таре";
	СписокВыбора.Добавить(ТекстЕГАИС);
	
	ТекстЕГАИС = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
		"не подлежит маркировке (производство и потребление пива осуществляется в месте
		| оказания услуг общественного питания)");
	СписокВыбора.Добавить(ТекстЕГАИС);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработатьВходящиеДокументыУТМ

// Возвращает указанные в ключах документы из регистра входящих документов УТМ.
//
// Параметры:
//  КлючиЗаписей - Массив из РегистрСведенийКлючЗаписи
//
// Возвращаемое значение:
//  Соответствие - Сообщения XML к загрузке по организациям:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Значение - Массив из Структура - Сообщения XML к загрузке, см. функцию ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента().
//
Функция ДокументыКЗагрузкеПоКлючам(КлючиЗаписей)
	
	ДокументыКЗагрузке = Новый Соответствие;

	ДокументыПоКлючамЗаписей = РегистрыСведений.бг_ВходящиеДокументыУТМ.ПоКлючамЗаписей(КлючиЗаписей);
	
	ПолеИдентификаторФСРАР = "ИдентификаторФСРАР";
	ИдентификаторыФСРАР = ДокументыПоКлючамЗаписей.Скопировать(, ПолеИдентификаторФСРАР);
	ИдентификаторыФСРАР.Свернуть(ПолеИдентификаторФСРАР);
	ИдентификаторыФСРАР = ИдентификаторыФСРАР.ВыгрузитьКолонку(ПолеИдентификаторФСРАР);
	
	ИдентификаторыФСРАРОрганизацийЕГАИС = ОрганизацииЕГАИСПоИдентификаторамФСРАР(ИдентификаторыФСРАР);

	ДокументыПоКлючамЗаписей.Индексы.Добавить(ПолеИдентификаторФСРАР);	
	ОтборПоИдентификаторФСРАР = Новый Структура(ПолеИдентификаторФСРАР);
	
	Для Каждого ИдентификаторФСРАР Из ИдентификаторыФСРАР Цикл
		
		ОрганизацияЕГАИСИдентификаторФСРАР = ИдентификаторыФСРАРОрганизацийЕГАИС.Найти(ИдентификаторФСРАР, ПолеИдентификаторФСРАР);
		Если Не ЗначениеЗаполнено(ОрганизацияЕГАИСИдентификаторФСРАР) Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.бг_ВходящиеДокументыУТМ.ОбработатьДублирующиесяЗаписи(
			ОрганизацияЕГАИСИдентификаторФСРАР.ИдентификаторФСРАР,
			ОрганизацияЕГАИСИдентификаторФСРАР.ОрганизацияЕГАИС);
		
		ДокументыКЗагрузкеПоОрганизацииЕГАИС = Новый Массив;
		
		ОтборПоИдентификаторФСРАР[ПолеИдентификаторФСРАР] = ИдентификаторФСРАР;
		Для Каждого Документ Из ДокументыПоКлючамЗаписей.НайтиСтроки(ОтборПоИдентификаторФСРАР) Цикл 
			ДокументыКЗагрузкеПоОрганизацииЕГАИС.Добавить(
				ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента(
					ОрганизацияЕГАИСИдентификаторФСРАР.ОрганизацияЕГАИС, 
					Документ.Идентификатор,
					Документ.АдресДокумента,
					Документ.ТекстОбъектаXDTO.Получить()));
		КонецЦикла;
		
		Если ДокументыКЗагрузкеПоОрганизацииЕГАИС.Количество() > 0 Тогда
			ДокументыКЗагрузке.Вставить(
				ОрганизацияЕГАИСИдентификаторФСРАР.ОрганизацияЕГАИС, 
				ДокументыКЗагрузкеПоОрганизацииЕГАИС); 
		КонецЕсли
		
	КонецЦикла;
	
	Возврат ДокументыКЗагрузке;
		
КонецФункции

Функция СтатусКОтменеПроведения(ДокументОтчет)
	ТекущееСостояние = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументОтчет);
	СтатусыОтменыПроведения = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ВПроцессеОтменыПроведения();
	Возврат Не СтатусыОтменыПроведения.Найти(ТекущееСостояние.Статус) = Неопределено;
КонецФункции

Функция ОрганизацииЕГАИСПоИдентификаторамФСРАР(ИдентификаторыФСРАР)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыФСРАР", ИдентификаторыФСРАР);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассификаторОрганизацийЕГАИС.Код КАК ИдентификаторФСРАР,
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.Код В(&ИдентификаторыФСРАР)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОбработатьВходящиеДокументы

Функция СоздатьНакладнаяНаВыдачуФСМ(Ссылка)
	
	ДокументОбъект = Документы.битНакладнаяНаВыдачуФСМ.СоздатьДокумент();
	ДокументОбъект.УстановитьСсылкуНового(Ссылка);
	ДокументОбъект.Дата = ТекущаяДатаСеанса();
	
	Возврат ДокументОбъект;
	
КонецФункции

Процедура ЗаполнитьНакладнаяНаВыдачуФСМ(ДокументОбъект, Объект, ДокументСсылка)

	// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
	// Документ будет получен в следующий итерации загрузки данных.
	ДокументОбъект.Заблокировать();
	
	ДокументОбъект.НомерВходящегоДокумента = Объект.Header.NUMBER;
	ДокументОбъект.ДатаВходящегоДокумента  = Объект.Header.Date;
	
	ДокументОбъект.Отправитель      = ИнтеграцияЕГАИС.ЗагрузитьОрганизацию(Объект.Header.Sender);
	ДокументОбъект.ОрганизацияЕГАИС = ИнтеграцияЕГАИС.ЗагрузитьОрганизацию(Объект.Header.Consignee);
	ДокументОбъект.Организация      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ОрганизацияЕГАИС, "Контрагент");
	
	ДокументОбъект.ЗаявлениеОВыдачеФСМ = 
		Документы.битЗаявлениеОВыдачеФСМ.НайтиПоРеквизиту("ИдентификаторЕГАИС", Объект.Header.RequestFSM);

	ДокументОбъект.НаименованиеПроизводителяМарок = Объект.Header.ManufacturerShortName;	
	ДокументОбъект.ДатаФактическойОтгрузки        = Объект.Header.ActualShipmentDate;
	
	ДокументОбъект.Товары.Очистить();
	Для Каждого Позиция Из Объект.Content.Position Цикл
		
		Товар = ДокументОбъект.Товары.Добавить();
		
		Товар.бг_СерияМарки              = Позиция.Rank;
		Товар.бг_НомерРулона             = Позиция.RollNumber;
		Товар.бг_НомерДиапазонаВРулоне   = Позиция.RangeNumberInRoll;
		Товар.бг_НачальныйНомерДиапазона = Позиция.Start;
		Товар.бг_КонечныйНомерДиапазона  = Позиция.Last;
		Товар.КоличествоМарок         	 = Позиция.QuantityRange;
		
		Товар.ТипМарки = Справочники.бг_КлассификаторТиповМарок.НайтиПоКоду(Позиция.MarkType);
		
	КонецЦикла;	
	
	ДокументОбъект.ЗаполнитьНоменклатуруТоваровПоЗаявлениюНаВыдачуФСМ(ДокументСсылка);
	
КонецПроцедуры
	
Процедура ЗагрузитьУведомлениеОРегистрацииОтчетаОбИмпортеПродукцииЕГАИС(Объект, ДокументОбъект, НовыйСтатус = Неопределено, ОбъектИзменен = Неопределено)
	
	Перем адаптер_ПодпискиНаСобытияВызовСервера; // Используем модуль из расширения БИТMDT
	адаптер_ПодпискиНаСобытияВызовСервера = ОбщегоНазначения.ОбщийМодуль("адаптер_ПодпискиНаСобытияВызовСервера");
	
	// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
	// Документ будет получен в следующий итерации загрузки данных.
	ДокументОбъект.Заблокировать();
	
	Для Каждого СтрокаКвитанцииXDTO Из Объект.Content.Position Цикл
		
		ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаКвитанцииXDTO.Identity) - 1;
		
		НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformF1RegId;
		
		ДанныеСправки1 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
		ДанныеСправки1.РегистрационныйНомер = НомерНовойСправки1;
		ДанныеСправки1.Наименование         = НомерНовойСправки1;
		
		СтрокаТЧ = ДокументОбъект.Товары[ИндексСтроки];
		
		ДанныеСправки1.АлкогольнаяПродукция    = СтрокаТЧ.АлкогольнаяПродукция;
		ДанныеСправки1.НомерТТН                = ДокументОбъект.Номер;
		ДанныеСправки1.ДатаТТН                 = ДокументОбъект.Дата;
		ДанныеСправки1.ДатаРозлива             = ДокументОбъект.ДатаГТД;
		ДанныеСправки1.Количество              = СтрокаТЧ.Количество;
		
		НоваяСправка1 = ИнтеграцияЕГАИС.СоздатьСправку(ДанныеСправки1, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1);
		СтрокаТЧ.Справка1 = НоваяСправка1;
		
		РегистрационныйНомер = СтрокаКвитанцииXDTO.InformF2RegId;
		
		ПоштучнаяПродукция = Ложь;
		
		ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();

		ДанныеСправки2.РегистрационныйНомер = РегистрационныйНомер;
		ДанныеСправки2.Наименование         = РегистрационныйНомер;
		ДанныеСправки2.НомерСправки1        = НомерНовойСправки1;
		ДанныеСправки2.Справка1             = НоваяСправка1;
		ДанныеСправки2.ДокументОснование    = ДокументОбъект.Ссылка;
		ДанныеСправки2.бг_ДокументОснование = ДокументОбъект.Ссылка;
		ДанныеСправки2.Поштучная            = ПоштучнаяПродукция;
		
		ДанныеСправки2.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
		ДанныеСправки2.Количество           = СтрокаТЧ.Количество;
		
		НоваяСправка2 = ИнтеграцияЕГАИС.СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
		
		СтрокаТЧ.Справка2 = НоваяСправка2;
		
		СерияОбъект = СтрокаТЧ.Серия.ПолучитьОбъект();
		СерияОбъект.бг_ДатаСлива = ДокументОбъект.Дата;
		СерияОбъект.Справка2ЕГАИС = НоваяСправка2;
		СерияОбъект.ПроизводительЕГАИС = СтрокаТЧ.АлкогольнаяПродукция.Производитель;
		СерияОбъект.Номер = Прав(ДокументОбъект.НомерГТД, 4);
		СерияОбъект.Наименование = СерияОбъект.Номер;  
		СерияОбъект.бг_ФактическаяКрепость = СтрокаТЧ.Крепость;
		
		СерияОбъект.Записать();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ДокументОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
		ДокументОбъект.Ссылка, Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве);
	
	УстановитьПривилегированныйРежим(Истина);
	ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбъектИзменен = Истина;
	
	адаптер_ПодпискиНаСобытияВызовСервера.ЗарегистрироватьИсходящееСообщение(ДокументОбъект.Ссылка, Неопределено);

КонецПроцедуры

Процедура ЗагрузитьУведомлениеОРегистрацииОтчетаОПроизводствеЕГАИС(Объект, ДокументОбъект, НовыйСтатус = Неопределено, ОбъектИзменен = Неопределено)
	
	Перем адаптер_ПодпискиНаСобытияВызовСервера; // Используем модуль из расширения БИТMDT
	адаптер_ПодпискиНаСобытияВызовСервера = ОбщегоНазначения.ОбщийМодуль("адаптер_ПодпискиНаСобытияВызовСервера");
	
	// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
	// Документ будет получен в следующий итерации загрузки данных.
	ДокументОбъект.Заблокировать();
	
	Для Каждого СтрокаКвитанцииXDTO Из Объект.Content.Position Цикл
		
		ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаКвитанцииXDTO.Identity) - 1;
		
		НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformF1RegId;
		
		ДанныеСправки1 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
		ДанныеСправки1.РегистрационныйНомер = НомерНовойСправки1;
		ДанныеСправки1.Наименование         = НомерНовойСправки1;
		
		СтрокаТЧ = ДокументОбъект.Товары[ИндексСтроки];
		
		ДанныеСправки1.АлкогольнаяПродукция    = СтрокаТЧ.АлкогольнаяПродукция;
		ДанныеСправки1.НомерТТН                = ДокументОбъект.Номер;
		ДанныеСправки1.ДатаТТН                 = ДокументОбъект.Дата;
		ДанныеСправки1.ДатаРозлива             = ДокументОбъект.ДатаПроизводства;
		ДанныеСправки1.Количество              = СтрокаТЧ.Количество;
		ДанныеСправки1.Грузоотправитель        = ДокументОбъект.ОрганизацияЕГАИС;
		ДанныеСправки1.Грузополучатель         = ДокументОбъект.ОрганизацияЕГАИС;
		
		НоваяСправка1 = ИнтеграцияЕГАИС.СоздатьСправку(ДанныеСправки1, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1);
		СтрокаТЧ.Справка1 = НоваяСправка1;
		
		РегистрационныйНомер = СтрокаКвитанцииXDTO.InformF2RegId;
		
		ПоштучнаяПродукция = Ложь;
		
		ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();

		ДанныеСправки2.РегистрационныйНомер = РегистрационныйНомер;
		ДанныеСправки2.Наименование         = РегистрационныйНомер;
		ДанныеСправки2.НомерСправки1        = НомерНовойСправки1;
		ДанныеСправки2.Справка1             = НоваяСправка1;
		ДанныеСправки2.ДокументОснование    = ДокументОбъект.Ссылка;
		ДанныеСправки2.бг_ДокументОснование = ДокументОбъект.Ссылка;
		ДанныеСправки2.Поштучная            = ПоштучнаяПродукция;
		
		ДанныеСправки2.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
		ДанныеСправки2.Количество           = СтрокаТЧ.Количество;
		
		НоваяСправка2 = ИнтеграцияЕГАИС.СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
		
		СтрокаТЧ.Справка2 = НоваяСправка2;
		
		СерияОбъект = СтрокаТЧ.Серия.ПолучитьОбъект();
		СерияОбъект.ДатаПроизводства = ДокументОбъект.ДатаПроизводства;
		СерияОбъект.Справка2ЕГАИС = НоваяСправка2;
		СерияОбъект.ПроизводительЕГАИС = ДокументОбъект.ОрганизацияЕГАИС;
		СерияОбъект.бг_ФактическаяКрепость = СтрокаТЧ.Крепость;
		
		СерияОбъект.Записать();
		
	КонецЦикла;
	
	ДокументОбъект.Записать();
	
	ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
	ДокументОбъект.Ссылка, Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве);

	ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
	ОбъектИзменен = Истина;	
	
	адаптер_ПодпискиНаСобытияВызовСервера.ЗарегистрироватьИсходящееСообщение(ДокументОбъект.Ссылка, Неопределено);

КонецПроцедуры

Функция РежимЗаписи(ДокументОбъект)
	
	Возврат ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
КонецФункции

// Возвращает структура данных для удаления запросов из УТМ.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//  АдресЗапроса - Строка - Адрес запроса.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//   * АдресЗапроса - Строка - Адрес запроса.
//
Функция СлужебныеДанные(ОрганизацияЕГАИС, Операция, АдресЗапроса)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	ВозвращаемоеЗначение.Вставить("Операция",         Операция);
	ВозвращаемоеЗначение.Вставить("АдресЗапроса",     АдресЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполняет форматированную строку (связи с документами ЕГАИС) для формы документа Приобретение товаров услуг
//
// Параметры:
//   Объект - ДанныеФормыКоллекция - редактируемый в форме документ приобретения
//
// Возвращаемое значение:
//   ФорматированнаяСтрока, Строка - Описание доступных действий ЕГАИС
Функция ТекстДокументаЕГАИСВПриобретенииТоваров(Знач Объект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ НЕ Объект.Проведен Тогда
		Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'Оформить отчет после проведения документа';
						|en = 'Оформить отчет после проведения документа"),,
		ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);

	КонецЕсли;
	
	Строки = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	битОтчетОбИмпортеПродукцииЕГАИС.Ссылка КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ИЗ
	|	Документ.битОтчетОбИмпортеПродукцииЕГАИС КАК битОтчетОбИмпортеПродукцииЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = битОтчетОбИмпортеПродукцииЕГАИС.Ссылка
	|ГДЕ
	|	битОтчетОбИмпортеПродукцииЕГАИС.ДокументОснование = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьОтчетОбИмпорте = Ложь;
	Если Выборка.Следующий() Тогда
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru = 'Отчет об импорте продукции ЕГАИС: %1';
						 |en = 'Отчет об импорте продукции ЕГАИС: %1'"),
					Выборка.Статус),,
				ЦветаСтиля.ГиперссылкаЦвет,,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
		ЕстьОтчетОбИмпорте = Истина;
	Иначе
		Шаблон = НСтр("ru = 'Оформить отчет об импорте';
					  |en = 'Оформить отчет об импорте'");
	КонецЕсли;
	
	Если НЕ ЕстьОтчетОбИмпорте И (ПравоДоступа("Изменение", Метаданные.Документы.битОтчетОбИмпортеПродукцииЕГАИС) ИЛИ Пользователи.ЭтоПолноправныйПользователь()) Тогда
		
			Строки.Добавить("  ");
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					Шаблон,,
					ЦветаСтиля.ГиперссылкаЦвет,,
					"ОформитьОтчетОбИмпорте"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Строки);
	
КонецФункции

Функция ТекстДокументаЕГАИСВЭтапеПроизводства(Знач Объект) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.битОтчетОПроизводствеЕГАИС, Пользователи.ТекущийПользователь()) Тогда
		Возврат Новый ФорматированнаяСтрока(" ")
	КонецЕсли;

	Если НЕ Объект.Проведен ИЛИ Объект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Возврат Новый ФорматированнаяСтрока(НСтр("ru = 'Оформить отчет после проведения документа';
						|en = 'Оформить отчет после проведения документа"),,
		ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);

	КонецЕсли;
	
	Строки = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	битОтчетОПроизводствеЕГАИС.Ссылка КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ИЗ
	|	Документ.битОтчетОПроизводствеЕГАИС КАК битОтчетОПроизводствеЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = битОтчетОПроизводствеЕГАИС.Ссылка
	|ГДЕ
	|	битОтчетОПроизводствеЕГАИС.ДокументОснование = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьОтчетОПроизводстве = Ложь;
	Если Выборка.Следующий() Тогда
		Строки.Добавить(
			Новый ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru = 'Отчет о производстве ЕГАИС: %1';
						 |en = 'Отчет о производстве ЕГАИС: %1'"),
					Выборка.Статус),,
				ЦветаСтиля.ГиперссылкаЦвет,,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
		ЕстьОтчетОПроизводстве = Истина;
	Иначе
		Шаблон = НСтр("ru = 'Оформить отчет о производстве';
					  |en = 'Оформить отчет о производстве'");
	КонецЕсли;
	
	Если НЕ ЕстьОтчетОПроизводстве И (ПравоДоступа("Изменение", Метаданные.Документы.битОтчетОПроизводствеЕГАИС) 
		ИЛИ Пользователи.ЭтоПолноправныйПользователь()) Тогда
		
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
					Шаблон,,
					ЦветаСтиля.ГиперссылкаЦвет,,
					"ОформитьОтчетОПроизводстве"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Строки);
	
КонецФункции

Процедура ИзменитьДатуВДокументе(Документ, НоваяДата, ИмяРеквизитаДаты = "Дата")
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	ДокументОбъект[ИмяРеквизитаДаты] = НоваяДата;	
	
	РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	ДокументОбъект.Записать(РежимЗаписи);
	
КонецПроцедуры	

Функция ДатаПодтвержденияРасхожденийТТНВходящейИзТикетаЕГАИС(ТТНВходящая)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЕГАИСПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &ТТНВходящая
		|	И ЕГАИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.ДатаСоздания";
	Запрос.УстановитьПараметр("ТТНВходящая", ТТНВходящая);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДатаПодтвержденияРасхождений = Дата(1, 1, 1);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		ВыборкаДетальныеЗаписи.Следующий();
		
		ДатаПодтвержденияРасхождений = ВыборкаДетальныеЗаписи.ДатаСоздания;	
	КонецЕсли;
	
	Возврат ДатаПодтвержденияРасхождений;
	
КонецФункции

#КонецОбласти

#Область ИсходящиеЗапросыУТМ

Функция ДанныеСправок1ТТНВходящейЕГАИС(ТТНВходящаяЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИСТовары.Справка2.НомерСправки1 КАК НомерСправки1,
		|	ТТНВходящаяЕГАИС.Грузополучатель КАК ОрганизацияЕГАИС,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1) КАК Операция,
		|	ТТНВходящаяЕГАИСТовары.Справка2.Справка1 КАК Справка1ВСправке2,
		|	ЕСТЬNULL(Справки1ЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка)) КАК Справка1,
		|	ТТНВходящаяЕГАИСТовары.Справка2 КАК Справка2
		|ПОМЕСТИТЬ втОбщиеДанныеСправок1
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|		ПО ТТНВходящаяЕГАИСТовары.Ссылка = ТТНВходящаяЕГАИС.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки1ЕГАИС КАК Справки1ЕГАИС
		|		ПО ТТНВходящаяЕГАИСТовары.Справка2.НомерСправки1 = Справки1ЕГАИС.РегистрационныйНомер
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ТТНВходящаяЕГАИС
		|	И ТТНВходящаяЕГАИСТовары.Справка2.Справка1 = ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втОбщиеДанныеСправок1.НомерСправки1 КАК НомерСправки1,
		|	втОбщиеДанныеСправок1.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	втОбщиеДанныеСправок1.Операция КАК Операция
		|ИЗ
		|	втОбщиеДанныеСправок1 КАК втОбщиеДанныеСправок1
		|ГДЕ
		|	втОбщиеДанныеСправок1.Справка1 = ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втОбщиеДанныеСправок1.Справка1 КАК Справка1,
		|	втОбщиеДанныеСправок1.Справка2 КАК Справка2
		|ИЗ
		|	втОбщиеДанныеСправок1 КАК втОбщиеДанныеСправок1
		|ГДЕ
		|	НЕ втОбщиеДанныеСправок1.Справка1 = ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка)";	
	Запрос.УстановитьПараметр("ТТНВходящаяЕГАИС", ТТНВходящаяЕГАИС);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
		
	Справки1ДляЗапросаВУТМ = Новый Массив;
	Если Не ПакетРезультатовЗапроса[1].Пустой() Тогда
		Выборка = ПакетРезультатовЗапроса[1].Выбрать();	
		Пока Выборка.Следующий() Цикл
			ДанныеЗапроса = Новый Структура("ОрганизацияЕГАИС, Операция, НомерСправки1");
			ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Выборка);
			
			Справки1ДляЗапросаВУТМ.Добавить(ДанныеЗапроса);
		КонецЦикла;
	КонецЕсли;
	
	Справки1ДляЗаполненияВСправке2 = Новый Массив;
	Если Не ПакетРезультатовЗапроса[2].Пустой() Тогда
		Выборка = ПакетРезультатовЗапроса[2].Выбрать();	
		Пока Выборка.Следующий() Цикл
			ДанныеЗапроса = Новый Структура("Справка1, Справка2");
			ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Выборка);
			
			Справки1ДляЗаполненияВСправке2.Добавить(ДанныеЗапроса);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеСправок1Документа = Новый Структура(
		"Справки1ДляЗапросаВУТМ, Справки1ДляЗаполненияВСправке2",
		Справки1ДляЗапросаВУТМ, Справки1ДляЗаполненияВСправке2);
	
	Возврат ДанныеСправок1Документа;
		
КонецФункции

Функция ДанныеСправок1ОтчетаОПроизводствеЕГАИС(ОтчетОПроизводствеЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИСТовары.Справка2.НомерСправки1 КАК НомерСправки1,
		|	ТТНВходящаяЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1) КАК Операция
		|ПОМЕСТИТЬ втОбщиеДанныеСправок1
		|ИЗ
		|	Документ.битОтчетОПроизводствеЕГАИС.Товары КАК ТТНВходящаяЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битОтчетОПроизводствеЕГАИС КАК ТТНВходящаяЕГАИС
		|		ПО ТТНВходящаяЕГАИСТовары.Ссылка = ТТНВходящаяЕГАИС.Ссылка
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &ОтчетОПроизводствеЕГАИС
		|	И НЕ ТТНВходящаяЕГАИСТовары.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втОбщиеДанныеСправок1.НомерСправки1 КАК НомерСправки1,
		|	втОбщиеДанныеСправок1.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	втОбщиеДанныеСправок1.Операция КАК Операция
		|ИЗ
		|	втОбщиеДанныеСправок1 КАК втОбщиеДанныеСправок1";	
	Запрос.УстановитьПараметр("ОтчетОПроизводствеЕГАИС", ОтчетОПроизводствеЕГАИС);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
		
	Справки1ДляЗапросаВУТМ = Новый Массив;
	Если Не ПакетРезультатовЗапроса[1].Пустой() Тогда
		Выборка = ПакетРезультатовЗапроса[1].Выбрать();	
		Пока Выборка.Следующий() Цикл
			ДанныеЗапроса = Новый Структура("ОрганизацияЕГАИС, Операция, НомерСправки1");
			ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Выборка);
			
			Справки1ДляЗапросаВУТМ.Добавить(ДанныеЗапроса);
		КонецЦикла;
	КонецЕсли;
	
	// в отчете производства ЕГАИС только запрашиваем справки,
	// справки1 в справке 2 не перезаполняем
	Справки1ДляЗаполненияВСправке2 = Новый Массив;
	
	ДанныеСправок1Документа = Новый Структура(
		"Справки1ДляЗапросаВУТМ, Справки1ДляЗаполненияВСправке2",
		Справки1ДляЗапросаВУТМ, Справки1ДляЗаполненияВСправке2);
	
	Возврат ДанныеСправок1Документа;
		
КонецФункции

Функция ДанныеСправок1ОтчетаОбИмпортеПродукцииЕГАИС(ОтчетОбИмпортеПродукцииЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОбИмпортеПродукцииЕГАИСТовары.Справка2.НомерСправки1 КАК НомерСправки1,
		|	ОтчетОбИмпортеПродукцииЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1) КАК Операция
		|ПОМЕСТИТЬ втОбщиеДанныеСправок1
		|ИЗ
		|	Документ.битОтчетОбИмпортеПродукцииЕГАИС.Товары КАК ОтчетОбИмпортеПродукцииЕГАИСТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битОтчетОбИмпортеПродукцииЕГАИС КАК ОтчетОбИмпортеПродукцииЕГАИС
		|		ПО ОтчетОбИмпортеПродукцииЕГАИСТовары.Ссылка = ОтчетОбИмпортеПродукцииЕГАИС.Ссылка
		|ГДЕ
		|	ОтчетОбИмпортеПродукцииЕГАИС.Ссылка = &ОтчетОбИмпортеПродукцииЕГАИС
		|	И НЕ ОтчетОбИмпортеПродукцииЕГАИСТовары.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втОбщиеДанныеСправок1.НомерСправки1 КАК НомерСправки1,
		|	втОбщиеДанныеСправок1.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
		|	втОбщиеДанныеСправок1.Операция КАК Операция
		|ИЗ
		|	втОбщиеДанныеСправок1 КАК втОбщиеДанныеСправок1";	
	Запрос.УстановитьПараметр("ОтчетОбИмпортеПродукцииЕГАИС", ОтчетОбИмпортеПродукцииЕГАИС);
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
		
	Справки1ДляЗапросаВУТМ = Новый Массив;
	Если Не ПакетРезультатовЗапроса[1].Пустой() Тогда
		Выборка = ПакетРезультатовЗапроса[1].Выбрать();	
		Пока Выборка.Следующий() Цикл
			ДанныеЗапроса = Новый Структура("ОрганизацияЕГАИС, Операция, НомерСправки1");
			ЗаполнитьЗначенияСвойств(ДанныеЗапроса, Выборка);
			
			Справки1ДляЗапросаВУТМ.Добавить(ДанныеЗапроса);
		КонецЦикла;
	КонецЕсли;
	
	// в отчете производства ЕГАИС только запрашиваем справки,
	// справки1 в справке 2 не перезаполняем
	Справки1ДляЗаполненияВСправке2 = Новый Массив;
	
	ДанныеСправок1Документа = Новый Структура(
		"Справки1ДляЗапросаВУТМ, Справки1ДляЗаполненияВСправке2",
		Справки1ДляЗапросаВУТМ, Справки1ДляЗаполненияВСправке2);
	
	Возврат ДанныеСправок1Документа;
		
КонецФункции

Функция ДанныеСправок1АктаПостановкиНаБалансЕГАИС(АктПостановкиНаБалансЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктПостановкиНаБалансЕГАИС.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АктПостановкиНаБалансЕГАИСТовары.Справка2.НомерСправки1 КАК НомерСправки1,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросСправки1) КАК Операция
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС.Товары КАК АктПостановкиНаБалансЕГАИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
	|		ПО АктПостановкиНаБалансЕГАИСТовары.Ссылка = АктПостановкиНаБалансЕГАИС.Ссылка
	|			И (АктПостановкиНаБалансЕГАИС.Ссылка = &АктПостановкиНаБалансЕГАИС
	|				И АктПостановкиНаБалансЕГАИСТовары.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("АктПостановкиНаБалансЕГАИС", АктПостановкиНаБалансЕГАИС);
	РезультатЗапроса = Запрос.Выполнить();
	
	Справки1ДляЗапросаВУТМ = Новый Массив;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеЗапросаСправки1 = Новый Структура("ОрганизацияЕГАИС, Операция, НомерСправки1");
			ЗаполнитьЗначенияСвойств(ДанныеЗапросаСправки1, Выборка);
			Справки1ДляЗапросаВУТМ.Добавить(ДанныеЗапросаСправки1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура(
		"Справки1ДляЗапросаВУТМ, Справки1ДляЗаполненияВСправке2",
		Справки1ДляЗапросаВУТМ,
		Новый Массив);
		
КонецФункции

Процедура ОтправитьЗапросСправки1ВУТМ(ДанныеЗапроса)
	
	ИнтеграцияЕГАИСВызовСервера.ПодготовитьЗапросДанныхСправкиКПередаче(
		ДанныеЗапроса.ОрганизацияЕГАИС,
		ДанныеЗапроса.Операция,
		СокрЛП(ДанныеЗапроса.НомерСправки1));
		
КонецПроцедуры

Процедура ЗаполнитьЗагруженнуюИзУТМСправку1ВСправке2(ДанныеСправки1)
	
	Если ЗначениеЗаполнено(ДанныеСправки1.Справка2) Тогда
		Справка2Объект = ДанныеСправки1.Справка2.ПолучитьОбъект();
		Справка2Объект.Справка1 = ДанныеСправки1.Справка1;
		Справка2Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДереваШтрихкодовТТНXML

Функция ДанныеШтрихкодовСоотвествуютАП(Марки, ДанныеСообщенияXML)
	
	ДанныеШтрихкодовСоотвествуютАП = Истина;
	
	Для каждого ДанныеОшибочнойМарки Из Марки Цикл
		
		Если ДанныеОшибочнойМарки.НесоответствиеКоличества Тогда
			
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				ДанныеСообщенияXML,
				СтрШаблон(
					НСтр("ru='Отгружаемая алкогольная продукция %1 по документу не соответствует данным штрихкодов'"),
					ДанныеОшибочнойМарки.АлкогольнаяПродукция));
					
			ДанныеШтрихкодовСоотвествуютАП = Ложь;
			
		КонецЕсли;
		
		Если ДанныеОшибочнойМарки.НеЗаполненыПоляТоваровДокумента Тогда
			
			ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				ДанныеСообщенияXML,
				СтрШаблон(
					НСтр("ru='Несоответствие ключевых полей товаров и данных штрихкодов по:
					| Номенклатура: %1, серия %2:, алкогольная продукция: %3, справка2: %4'"),
					ДанныеОшибочнойМарки.Номенклатура,
					ДанныеОшибочнойМарки.Серия,
					ДанныеОшибочнойМарки.АлкогольнаяПродукция,
					ДанныеОшибочнойМарки.Справка2));
					
			ДанныеШтрихкодовСоотвествуютАП = Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеШтрихкодовСоотвествуютАП;
	
КонецФункции

Процедура ЗаполнитьДанныеШтрихкодовДляГенерацииЕГАИСXML(ДеревоУпаковок, МаркированныеТовары, ДанныеШтрихкодов)

	// Для упрощения реализации дерево будет строится только для трех уровней (паллета, коробка, бутылка).
	// Нет информации, что когда-то этот подход будет изменен.
	// Дерево имеет не фиксированную структуру, когда на первом уровне всегда паллеты, на втором коробки, на третьем бутылки.
	// Коробка без паллеты будет на первом уровне, бутылка без коробки тоже будет на первом уровне.
	// Также предполагается, что не может быть случая, при котором разные марки могут ссылаться на одну упаковку, но иметь
	// разную алкогольную продукцию, справку2, номенклатуру и серию.
	
	Если ДанныеШтрихкодов.Свойство("СтатусАкцизнойМарки") Тогда
		СтатусАкцизнойМарки = ДанныеШтрихкодов.СтатусАкцизнойМарки;
	Иначе
		СтатусАкцизнойМарки = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
	КонецЕсли;
	
	Марки = ДанныеШтрихкодов.Марки;
	ЗаполнятьИдентификаторСтроки = Марки.Колонки.Найти("ИдентификаторСтроки") <> Неопределено;
	
	Упаковки = ДанныеШтрихкодов.Упаковки;
	Упаковки.Индексы.Добавить("КодУпаковки");
	
	КэшСтрокДереваУпаковок = Новый Соответствие;
	
	Для каждого ДанныеМарки Из Марки Цикл
		
		НоваяСтрока = МаркированныеТовары.Добавить();
		
		ЗаполнитьЗначенияСвойств(
			НоваяСтрока,
			ДанныеМарки,
			"ОрганизацияЕГАИС, Номенклатура, Серия, Справка2, АлкогольнаяПродукция");
			
		Если ЗаполнятьИдентификаторСтроки Тогда
			НоваяСтрока.ИдентификаторСтроки = ДанныеМарки.ИдентификаторСтроки;
		КонецЕсли;
		
		НоваяСтрока.Статус = СтатусАкцизнойМарки;
		НоваяСтрока.Штрихкод = ДанныеМарки.ИдентификаторМарки;
		
		Если ЗначениеЗаполнено(ДанныеМарки.КодУпаковки) Тогда
			
			// У марки указана коробка, необходимо создать/найти в дереве строку по коробке.
			НоваяСтрока.УпаковкаВерхнегоУровня = НайтиСоздатьСтрокуДереваУпаковки(
				ДанныеМарки,
				Упаковки,
				ДеревоУпаковок,
				КэшСтрокДереваУпаковок);
			
			НоваяСтрока.СтрокаДерева = СоздатьСтрокуДереваМарки(
				ДанныеМарки,
				НоваяСтрока.УпаковкаВерхнегоУровня);
			
		Иначе
			
			НоваяСтрока.СтрокаДерева = СоздатьСтрокуДереваМарки(
				ДанныеМарки,
				ДеревоУпаковок);
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьКоличествоВДереве(ДеревоУпаковок);

КонецПроцедуры

Функция НайтиСоздатьСтрокуДереваУпаковки(ДанныеМарки, ДанныеУпаковок, КореньДереваУпаковок, КэшСтрокДереваУпаковок)

	СтрокаДереваУпаковка = КэшСтрокДереваУпаковок.Получить(ДанныеМарки.КодУпаковки);
	Если СтрокаДереваУпаковка <> Неопределено Тогда
		Возврат СтрокаДереваУпаковка;	
	КонецЕсли;
	
	// Найти данные паллеты и при необходимости создать строку дерева.
	ПараметрыПоиска = Новый Структура("КодУпаковки", ДанныеМарки.КодУпаковки);
	НайденныеСтрокиКодВышестоящейУпаковки = ДанныеУпаковок.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтрокиКодВышестоящейУпаковки.Количество() = 0 Тогда
		СтрокаДереваВышестоящаяУпаковка = Неопределено;
	Иначе
		
		Для каждого СтрокаВышестоящаяУпаковка Из НайденныеСтрокиКодВышестоящейУпаковки Цикл
			
			Если ПустаяСтрока(СтрокаВышестоящаяУпаковка.КодВышестоящейУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			// У коробки в качестве родителя есть паллета. Необходимо найти/создать строку дерева по паллете.
			СтрокаДереваВышестоящаяУпаковка = НайтиСоздатьСтрокуДереваВышестоящейУпаковки(
				ДанныеМарки,
				СтрокаВышестоящаяУпаковка.КодВышестоящейУпаковки,
				КореньДереваУпаковок,
				КэшСтрокДереваУпаковок);
			
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Создать строку дерева по коробке (в редких случаях здесь может быть сразу паллета),
	// подчинить строке дерева паллеты или в корень опционально.
	Если СтрокаДереваВышестоящаяУпаковка = Неопределено Тогда
		СтрокаДереваУпаковка = КореньДереваУпаковок.Строки.Добавить();
	Иначе
		СтрокаДереваУпаковка = СтрокаДереваВышестоящаяУпаковка.Строки.Добавить();
	КонецЕсли;
	
	КэшСтрокДереваУпаковок.Вставить(ДанныеМарки.КодУпаковки, СтрокаДереваУпаковка);
	
	ЗаполнитьЗначенияСвойств(
		СтрокаДереваУпаковка,
		ДанныеМарки,
		"ОрганизацияЕГАИС, Номенклатура, Серия, Справка2, АлкогольнаяПродукция");
		
	СтрокаДереваУпаковка.ВсеСправки2Указаны = Истина;
	СтрокаДереваУпаковка.Статус = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
	СтрокаДереваУпаковка.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	
	РезультатРазбораШтрихкода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(ДанныеМарки.КодУпаковки);
		
	Если РезультатРазбораШтрихкода <> Неопределено Тогда
		СтрокаДереваУпаковка.ТипШтрихкода = ДанныеМарки.КодУпаковки;
	КонецЕсли;
	
	СтрокаДереваУпаковка.Штрихкод = ДанныеМарки.КодУпаковки;
	
	Возврат СтрокаДереваУпаковка;

КонецФункции

Функция НайтиСоздатьСтрокуДереваВышестоящейУпаковки(ДанныеМарки, КодВышестоящейУпаковки, КореньДереваУпаковок, КэшСтрокДереваУпаковок)

	СтрокаДереваВышестоящаяУпаковка = КэшСтрокДереваУпаковок.Получить(КодВышестоящейУпаковки);
	Если СтрокаДереваВышестоящаяУпаковка <> Неопределено Тогда
		Возврат СтрокаДереваВышестоящаяУпаковка;
	Иначе
		СтрокаДереваВышестоящаяУпаковка = КореньДереваУпаковок.Строки.Добавить();
		КэшСтрокДереваУпаковок.Вставить(КодВышестоящейУпаковки, СтрокаДереваВышестоящаяУпаковка);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		СтрокаДереваВышестоящаяУпаковка,
		ДанныеМарки,
		"ОрганизацияЕГАИС, Номенклатура, Серия, Справка2, АлкогольнаяПродукция");
		
	СтрокаДереваВышестоящаяУпаковка.ВсеСправки2Указаны = Истина;
	СтрокаДереваВышестоящаяУпаковка.Статус = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
	СтрокаДереваВышестоящаяУпаковка.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	
	РезультатРазбораШтрихкода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(КодВышестоящейУпаковки);
		
	Если РезультатРазбораШтрихкода <> Неопределено Тогда
		СтрокаДереваВышестоящаяУпаковка.ТипШтрихкода = РезультатРазбораШтрихкода.ТипШтрихкода;
	КонецЕсли;
	
	СтрокаДереваВышестоящаяУпаковка.Штрихкод = КодВышестоящейУпаковки;	

	Возврат СтрокаДереваВышестоящаяУпаковка;
	
КонецФункции

Функция СоздатьСтрокуДереваМарки(ДанныеМарки, Родитель)

	СтрокаДереваМарка = Родитель.Строки.Добавить();
	
	ЗаполнитьЗначенияСвойств(
		СтрокаДереваМарка,
		ДанныеМарки,
		"ОрганизацияЕГАИС, Номенклатура, Серия, Справка2, АлкогольнаяПродукция");
		
	СтрокаДереваМарка.ВсеСправки2Указаны = Истина;
	СтрокаДереваМарка.Статус = Перечисления.СтатусыАкцизныхМарок.ВНаличии;
	СтрокаДереваМарка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	РезультатРазбораШтрихкода = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
		ДанныеМарки.ИдентификаторМарки);
		
	Если РезультатРазбораШтрихкода <> Неопределено Тогда
		СтрокаДереваМарка.ТипШтрихкода = РезультатРазбораШтрихкода.ТипШтрихкода;
	КонецЕсли;
	
	СтрокаДереваМарка.Штрихкод = ДанныеМарки.ИдентификаторМарки;
	
	Возврат СтрокаДереваМарка;

КонецФункции

Функция ЗаполнитьКоличествоВДереве(ДеревоУпаковок)

	Для каждого СтрокаПервогоУровня Из ДеревоУпаковок.Строки Цикл
	
		Если СтрокаПервогоУровня.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Продолжить;
		КонецЕсли;
		            
		Для каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.Строки Цикл
		
			Если СтрокаВторогоУровня.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				СтрокаПервогоУровня.КоличествоАкцизныхМарок = СтрокаПервогоУровня.КоличествоАкцизныхМарок + 1;
			КонецЕсли;
			
			Для каждого СтрокаТретьегоУровня Из СтрокаВторогоУровня.Строки Цикл
			
				Если СтрокаТретьегоУровня.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
					СтрокаПервогоУровня.КоличествоАкцизныхМарок = СтрокаПервогоУровня.КоличествоАкцизныхМарок + 1;
					СтрокаВторогоУровня.КоличествоАкцизныхМарок = СтрокаВторогоУровня.КоличествоАкцизныхМарок + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецФункции

#КонецОбласти // Конец ФормированиеДереваШтрихкодовТТНXML

#КонецОбласти
