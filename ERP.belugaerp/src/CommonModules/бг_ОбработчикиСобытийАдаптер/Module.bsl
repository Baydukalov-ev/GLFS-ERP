
#Область ПереопределяемыеМетоды

Процедура Подписаться(Подписки) Экспорт
	
	// Получение сообщений
	Подписки.НеРегистрироватьВходящееСообщение = Истина;
	
	// загрузка объектов
	Подписки.ЗаполнитьЗагружаемыеОбъекты = Истина;
	Подписки.ЗаполнитьЗагружаемыйОбъект = Истина;
	Подписки.ЗаписатьЗагружаемыйОбъект = Истина;
	Подписки.НайтиСсылкуПоЗагружаемымДанным = Истина;
	Подписки.ПолучитьПолноеИмяОбъектаМетаданныхЗагружаемогоОбъекта = Истина;
	Подписки.СоздатьНаборЗаписейРегистра = Истина;
	Подписки.ПослеОбработкиСообщения = Истина;

	// блокировка изменения объектов
	Подписки.ЗаполнитьБлокируемыеОбъекты = Истина;
	Подписки.ЗаполнитьМассивПроверяемыхРеквизитовБлокировки = Истина;
	
	// выгрузка объектов
	Подписки.ЗаголовкиИсходящегоСообщения = Истина;
	Подписки.ЗаполнитьВыгружаемыеОбъекты = Истина;
	Подписки.ЗаполнитьСоставВыгружаемыхОбъектов = Истина;
	Подписки.ЗаполнитьТекстыЗапросовУсловиями = Истина;
	Подписки.ПолучитьДанныеВыгружаемогоОбъекта = Истина;
	Подписки.ВыполненыУсловияВыгрузкиОбъекта = Истина;
	Подписки.РежимПроведенияДокумента = Истина;
	Подписки.ПолучитьКлючМаршрутизацииИсходящегоСообщения = Истина;
	Подписки.ОстанавливатьОтправкуСообщенийПриОшибках = Истина;
	Подписки.ПередРегистрациейИсходящегоСообщения = Истина;
	
	// регламентные задания
	Подписки.ВыполнитьРегламентноеЗадание = Истина;
	Подписки.ДополнитьСтруктуруКлючейРегламентныхЗаданий = Истина;
	Подписки.ОбщееЗаданиеФайловойБазы = Истина;
	Подписки.ЗаполнитьПараметрыЗаданияПоУмолчанию = Истина;
КонецПроцедуры

// Переопределяет соответствующую типовую функцию адаптера. 
//
// Параметры:
//  ДанныеСообщения - Структура - данные получаемого входящего сообщения.
//
// Возвращаемое значение:
//  Булево - признак необходимости регистрации входящего сообщения в очереди.
//
Функция НеРегистрироватьВходящееСообщение(ДанныеСообщения) Экспорт
	
	Если Не ДанныеСообщения.Заголовки.Свойство("ИдентификаторСообщения")
		И ДанныеСообщения.Заголовки.Свойство("JMSMessageID") Тогда
		// Это заявка клиента от SAP. SAP не может формировать сообщения с человеческими заголовками,
		// поэтому будем заполнять входящее сообщение из того, что есть.
		ДанныеСообщения.Вставить("Код", СтрЗаменить(ДанныеСообщения.Заголовки.JMSMessageID, "ID:", ""));
		ДанныеСообщения.Вставить("Type", "Документ.битЗаявкаКлиента.SAP");
		ДанныеСообщения.Вставить("AppId", "SAP");
		
		Результат = Ложь;
	Иначе
		
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт

	Если ТипЗнч(ЗагружаемыйОбъект) = Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;	
	
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СкидкиНаценки);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтражениеФактаПоПриходномуОрдеру);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтражениеФактаПоРасходномуОрдеру);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битПереупаковка);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битУстановкаСуммовыхСкидок);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказПоставщику);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	
	// Регистры сведений
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ВходящиеДокументыУТМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ТранспортнаяИнформация);
	
	МетаданныеЗагружаемогоОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗагружаемыйОбъект));
	
	Если МассивОбрабатываемыхМетаданных.Найти(МетаданныеЗагружаемогоОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеЗагружаемогоОбъекта.Имя, Ложь);
		Модуль.ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("СтандартнаяЗаписьНеТребуется")
		И ЗагружаемыйОбъект.ДополнительныеСвойства.СтандартнаяЗаписьНеТребуется Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБлокируемыеОбъекты(БлокируемыеОбъекты, СтандартнаяОбработка) Экспорт
	
	Если Пользователи.РолиДоступны("бг_ОтключениеБлокировкиЗагружаемыхОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	// Справочники
	БлокируемыеОбъекты.Добавить(Метаданные.Справочники.бг_ВидыВзаиморасчетов);
	БлокируемыеОбъекты.Добавить(Метаданные.Справочники.Номенклатура);
	БлокируемыеОбъекты.Добавить(Метаданные.Справочники.Организации);
	БлокируемыеОбъекты.Добавить(Метаданные.Справочники.Склады);
	БлокируемыеОбъекты.Добавить(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств);
	БлокируемыеОбъекты.Добавить(Метаданные.Справочники.СтруктураПредприятия);
	
	// Планы видов характеристик
	БлокируемыеОбъекты.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиДоходов);
	БлокируемыеОбъекты.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
	
КонецПроцедуры

// Заполняет объекты в настройках выгрузки объектов для переданных параметров подключения
//
// Параметры:
//	ПараметрыПодключения	- Неопределено - необходимо заполнить настройки для всех активных (!) подключений
//							- Массив ссылок на элементы справочника настроек подключения, для которых требуется
//								заполнить настройки выгрузки объектов
//	НастройкиВыгрузки		- ТаблицаЗначений - таблица настроек выгрузки объектов, каждая строка описывает
//								выгрузку объекта в заданном формате для заданной ссылки на параметры подключения
//								см. также адаптер_НастройкиОбмена.ПолучитьНастройкиВыгрузки()
//								и адаптер_НастройкиОбмена.ИнициализироватьТаблицуНастроекВыгрузки()
//
Процедура ЗаполнитьВыгружаемыеОбъекты(ПараметрыПодключения, НастройкиВыгрузки, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант(
		"ИспользоватьВыгрузкуСкидокВУПП,
		| ИспользоватьИнтеграциюСертификатовНоменклатуры,
		| ОсновнаяНастройкаПодключения");
	
	ОсновнаяНастройкаПодключения = НастройкаПодключенияИзЗначенийКонстант(
		ЗначенияКонстант,
		"ОсновнаяНастройкаПодключения");
		
	// Если задана константа подключения DWH, то связанные с ней объекты будут обработаны
	//  в модуле бг_DWHИнтеграция (формат JSON).
	// Если не заданы константы настроек подключения, то все объекты будут выгружены по всем переданным в параметре
	//  настройкам подключения (у которых НеОтправлятьИсходящиеСообщения = Ложь), что соответствует поведению по умолчанию.
	Если ЗначениеЗаполнено(ПараметрыПодключения)
		И ЗначениеЗаполнено(ОсновнаяНастройкаПодключения)
		И ПараметрыПодключения.Найти(ОсновнаяНастройкаПодключения) = Неопределено Тогда
		
		Возврат;
	КонецЕсли;
	
	// Справочники
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.БанковскиеСчетаКонтрагентов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.БанковскиеСчетаОрганизаций, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_БанковскиеГарантии, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ВидыВина, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_Группы_СУМ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ДоговорыВладенияТС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_Бренды_БрендыМТ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_Бренды_БрендыТМ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_Бренды_КатегорииБренда, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_Бренды_ПроектыПЭО, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_Номенклатура_СрокГодности, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_БрендыКУ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_Вкусы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_КатегорияВладельца, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_КатегорияМотивации, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_КлассОцифровки, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_Классы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_НоменклатурныеГруппы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_Объемы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_СкюМТ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СКЮ_Фирмы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЕК_СУМ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_РегионыПроисхождения, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_СтатусыТоварныхКатегорий, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ТипыВина, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_ЦветаВина, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.бг_Штрихкоды_ЕК_Номенклатуры, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.битКаналыПродаж, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.битПунктыНазначения, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.битТоварныеКатегорииПрисоединенныеФайлы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ВидыАлкогольнойПродукции, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ВидыНоменклатуры, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ВидыЦен, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ГруппыПользователей, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ДенежныеДокументы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ДоговорыАренды, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ДоговорыКонтрагентов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ДоговорыКредитовИДепозитов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.КлассификаторОрганизацийЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Контрагенты, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Марки, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Номенклатура, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.НомераГТД, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ОбъектыСтроительства, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ОбъектыЭксплуатации, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Организации, ОсновнаяНастройкаПодключения, , "https://bit-erp.ru/adapter/Справочник.ОрганизацииERP");
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Партнеры, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Пользователи, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Проекты, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Производители, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ПрочиеРасходы, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.РесурсныеСпецификации, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.СегментыНоменклатуры, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.СерииНоменклатуры, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.Склады, ОсновнаяНастройкаПодключения, , "https://bit-erp.ru/adapter/Справочник.СкладыERP");
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.СтруктураПредприятия, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ТоварныеКатегории, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ТранспортныеСредства, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.УпаковкиЕдиницыИзмерения, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.ФизическиеЛица, ОсновнаяНастройкаПодключения, , "https://bit-erp.ru/adapter/Справочник.ФизическиеЛицаERP");
	
	Если ЗначенияКонстант.ИспользоватьВыгрузкуСкидокВУПП Тогда
		адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.СкидкиНаценки, ОсновнаяНастройкаПодключения);
		адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.СоглашенияСКлиентами, ОсновнаяНастройкаПодключения);
	КонецЕсли;
	
	Если ЗначенияКонстант.ИспользоватьИнтеграциюСертификатовНоменклатуры Тогда
		адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Справочники.СертификатыНоменклатуры, ОсновнаяНастройкаПодключения);
	КонецЕсли;	
	
	// Документы
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.АвансовыйОтчет, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.АктПостановкиНаБалансЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.АктСписанияЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.бг_РегистрацияБанковскихГарантий, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битЗаявкаКлиента, ОсновнаяНастройкаПодключения, , бг_ИнтеграцияSAP.ПространствоИменИсходноеOrderSP());
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битЗаявкаКлиента, ОсновнаяНастройкаПодключения, , бг_ИнтеграцияSAP.ПространствоИменИсходноеReserveOrderResponse());
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битЗаявлениеОВыдачеФСМ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битМаршрутныйЛист, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битНакладнаяНаВыдачуФСМ, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битОтчетОбИмпортеПродукцииЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битОтчетОПроизводствеЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битПоступлениеДенежныхСредствОтРозничногоПокупателя, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битРаспределениеТранспортныхРасходов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.битСертификацияНоменклатуры, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ВзаимозачетЗадолженности, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ВнутреннееПотреблениеТоваров, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ВозвратТоваровОтКлиента, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ВыбытиеДенежныхДокументов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ДвижениеПродукцииИМатериалов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ЗаказКлиента, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ЗаказКлиента, ОсновнаяНастройкаПодключения, , бг_ИнтеграцияSAP.ПространствоИменИсходноеInternetOrdersList());
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ЗаказНаПроизводство2_2, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ЗаказПоставщику, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ИсполнительныйЛист, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.КорректировкаПриобретения, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.КорректировкаРеализации, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.МодернизацияОС2_4, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ОтчетПереработчика, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПередачаСырьяПереработчику, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПередачаТоваровХранителю, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПеремещениеТоваров, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПересортицаТоваров,
				ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПоступлениеДенежныхДокументов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПоступлениеТоваровНаСклад, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПринятиеКУчетуОС2_4, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПриобретениеТоваровУслуг, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПриобретениеУслугПрочихАктивов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПриходныйОрдерНаТовары, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПроизводствоБезЗаказа, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ПрочееОприходованиеТоваров, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.РасходныйОрдерНаТовары, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.РеализацияТоваровУслуг, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.РеализацияУслугПрочихАктивов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.СборкаТоваров, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.СписаниеБезналичныхДенежныхСредств, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.КорректировкаЗадолженности, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.СписаниеНедостачТоваров, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.СчетФактураВыданный, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.СчетФактураПолученный, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ТаможеннаяДекларацияИмпорт, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ТранспортнаяНакладнаяЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ТТНВходящаяЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ТТНИсходящаяЕГАИС, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.Документы.ЭтапПроизводства2_2, ОсновнаяНастройкаПодключения);
	
	// Регистры сведений
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_ДвижениеМарок, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_ДвижениеМарок, ОсновнаяНастройкаПодключения, , бг_ДвижениеМарокИнтеграция.ПространствоИменИсходноеСрезПоследних());
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_СоставУпаковок, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_СоставУпаковок, ОсновнаяНастройкаПодключения, , бг_СоставУпаковокИнтеграция.ПространствоИменИсходноеСрезПоследних());
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_ТранспортнаяИнформация, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_МенеджерыПунктовНазначения, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_МинимальныеЦеныАлкогольнойПродукции, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_СогласованиеЗаказовКлиентов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.бг_ФиксацияПечатиДокументов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.ДокументыФизическихЛиц, ОсновнаяНастройкаПодключения);	
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.ЦеныНоменклатуры25, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры, ОсновнаяНастройкаПодключения);

	//Регламентные Задания
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки,
		Метаданные.РегламентныеЗадания.битВыгрузкаДебиторскойЗадолженностиКонтрагентов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки,
		Метаданные.РегламентныеЗадания.битВыгрузкаДолгосрочныхРезервовКонтрагентов, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки,
		Метаданные.РегламентныеЗадания.битВыгрузкаОплатПоЗаказамB2B, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP, ОсновнаяНастройкаПодключения);
	адаптер_НастройкиОбмена.ДобавитьНастройку(НастройкиВыгрузки, Метаданные.РегламентныеЗадания.битВыгрузкаИзмененийСвободныхОстатковДляИМ, ОсновнаяНастройкаПодключения);
	
КонецПроцедуры

Процедура ЗаполнитьЗагружаемыеОбъекты(ЗагружаемыеОбъекты, ПараметрыПодключения, СтандартнаяОбработка) Экспорт

	#Область ПодготовкаНастроекПодключения
	// Настройки подключения, на которые нужно распределить бинды, определяем по значениям констант.
	// Если константа не задана - будет использована основная настройка подключения.
	// Если не задана константа основной настройки подключения - все бинды упадут на ту настройку подключения,
	// которая передана в переданном параметре - это будет поведение по умолчанию, когда константы не заданы.
	// Поэтому важно, чтобы как минимум основная настройка подключения была
	// задана в константах, иначе бинды будут дублироваться по настройкам подключения (поведение адаптера по умолчанию).
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант(
		"ОсновнаяНастройкаПодключения,
		| НастройкаПодключенияПродажиЛогистика,
		| НастройкаПодключенияWMS,
		| НастройкаПодключенияУТМ,
		| НастройкаПодключенияОтветыОбОшибках,
		| ИспользоватьЗагрузкуНоменклатуры_ТРИМ,
		| ИспользоватьЗагрузкуЗаказаПоставщику_ТРИМ,
		| ИспользоватьЗагрузкуСкладскихДокументов_ТРИМ,
		| ИспользоватьЗагрузкуЗаявокКлиентовИзSAP");
	
	ОсновнаяНастройкаПодключения = НастройкаПодключенияИзЗначенийКонстант(
		ЗначенияКонстант,
		"ОсновнаяНастройкаПодключения");
		
	НастройкаПодключенияПродажиЛогистика = НастройкаПодключенияИзЗначенийКонстант(
		ЗначенияКонстант,
		"НастройкаПодключенияПродажиЛогистика",
		"ОсновнаяНастройкаПодключения");
		
	НастройкаПодключенияWMS = НастройкаПодключенияИзЗначенийКонстант(
		ЗначенияКонстант,
		"НастройкаПодключенияWMS",
		"ОсновнаяНастройкаПодключения");
		
	НастройкаПодключенияУТМ = НастройкаПодключенияИзЗначенийКонстант(
		ЗначенияКонстант,
		"НастройкаПодключенияУТМ",
		"ОсновнаяНастройкаПодключения");
		
	// Если в константах явно не указана настройка подключения по приему ошибок, то такие сообщения принимать
	// вообще не нужно, т.к. для них требуется указание флага НеОбрабатыватьВходящиеСообщения в настройке подключения.
	НастройкаПодключенияОтветыОбОшибках = НастройкаПодключенияИзЗначенийКонстант(
		ЗначенияКонстант,
		"НастройкаПодключенияОтветыОбОшибках");
#КонецОбласти // Конец ПодготовкаНастроекПодключения

#Область Бинды_ОсновнаяНастройкаПодключения
	Если ПараметрыПодключения = ОсновнаяНастройкаПодключения
		Или Не ЗначениеЗаполнено(ОсновнаяНастройкаПодключения) Тогда
	
		// Справочники
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.адаптер_Запросы");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.адаптер_СхемыДанных");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.алкКлассификаторОрганизацийЕГАИС");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.БанковскиеСчета.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.БанковскиеСчета.TK_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.бг_ВыгрузкаСкидок");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ВидыВзаиморасчетов");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ВидыСкидок");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ДоговорыКонтрагентов.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ДоговорыКонтрагентов.TK_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ЕК_POSM");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ЕК_POSM_Штрихкоды");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ЕК_СтатьиДиР");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ЕК_ЦФО");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ЕК_ЦФО_ТЦФО");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.КаналыПродаж");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.Контрагенты");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.КонтрагентыCRM");
		
		Если ЗначенияКонстант.ИспользоватьЗагрузкуНоменклатуры_ТРИМ Тогда
			ЗагружаемыеОбъекты.Добавить("xml.Справочник.Номенклатура.TRIM");
		КонецЕсли;
		
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.НоменклатураУПП");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.Организации.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.Организации.TK_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.Регионы");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ТипыЦенНоменклатуры.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ТипыЦенНоменклатуры.TK_LVZ");
		
		Если ЗначенияКонстант.ИспользоватьЗагрузкуНоменклатуры_ТРИМ Тогда
			ЗагружаемыеОбъекты.Добавить("xml.Справочник.УпаковкиЕдиницыИзмерения");
		КонецЕсли;
		
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ФизическиеЛица");
		ЗагружаемыеОбъекты.Добавить("xml.Справочник.ХранилищеФайлов");
		
		// Документы
		ЗагружаемыеОбъекты.Добавить("xml.Документ.алкАктКТоварноТранспортнойНакладнойЕГАИС.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.алкАктКТоварноТранспортнойНакладнойЕГАИС.TK_LVZ");
		
		Если ЗначенияКонстант.ИспользоватьЗагрузкуСкладскихДокументов_ТРИМ Тогда
			ЗагружаемыеОбъекты.Добавить("xml.Документ.ВнутреннееПотреблениеТоваров.TRIM");
		КонецЕсли;
		
		ЗагружаемыеОбъекты.Добавить("xml.Документ.ЗаявкаНаОплатуСЭД");
		
		Если ЗначенияКонстант.ИспользоватьЗагрузкуЗаказаПоставщику_ТРИМ Тогда
			ЗагружаемыеОбъекты.Добавить("xml.Документ.ЗаказПоставщику.TRIM");
		КонецЕсли;
		
		ЗагружаемыеОбъекты.Добавить("xml.Документ.ИсполнительныйЛист");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.ПеремещениеТоваров.TDSM_LVZ");
		
		Если ЗначенияКонстант.ИспользоватьЗагрузкуСкладскихДокументов_ТРИМ Тогда
			ЗагружаемыеОбъекты.Добавить("xml.Документ.ПеремещениеТоваров.TRIM");
		КонецЕсли;
		
		ЗагружаемыеОбъекты.Добавить("xml.Документ.ПланБюджетаТМА");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.ПлатежноеПоручениеИсходящееSKP");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.синФакторинг");
		
		// Регистры сведений
		ЗагружаемыеОбъекты.Добавить("xml.РегистрСведений.Штрихкоды");
	КонецЕсли;
#КонецОбласти // Конец Бинды_ОсновнаяНастройкаПодключения

#Область Бинды_НастройкаПодключенияПродажиЛогистика
	Если ПараметрыПодключения = НастройкаПодключенияПродажиЛогистика
		Или Не ЗначениеЗаполнено(ОсновнаяНастройкаПодключения) Тогда
		
		// Документы
		Если ЗначенияКонстант.ИспользоватьЗагрузкуЗаявокКлиентовИзSAP Тогда
			ЗагружаемыеОбъекты.Добавить("xml.Документ.битЗаявкаКлиента");
		КонецЕсли;
		
		ЗагружаемыеОбъекты.Добавить("xml.Документ.ЗаказПокупателя.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.КорректировкаПоступления.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.КорректировкаРеализации.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.РеализацияТоваровУслуг.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.РеализацияТоваровУслуг.TK_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.синМаршрутныйЛист");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.синРейс");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.СчетФактураВыданный.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.СчетФактураВыданный.TK_LVZ");
		
		// Регистры сведений
		ЗагружаемыеОбъекты.Добавить("xml.РегистрСведений.алкТранспортнаяИнформация");
		ЗагружаемыеОбъекты.Добавить("xml.РегистрСведений.синСогласованиеЗаказовПокупателей.TDSM_LVZ");
		ЗагружаемыеОбъекты.Добавить("xml.РегистрСведений.синСогласованиеЗаказовПокупателей.TK_LVZ");
		
	КонецЕсли;
#КонецОбласти // Конец Бинды_НастройкаПодключенияПродажиЛогистика

#Область Бинды_НастройкаПодключенияWMS
	Если ПараметрыПодключения = НастройкаПодключенияWMS
		Или Не ЗначениеЗаполнено(ОсновнаяНастройкаПодключения) Тогда
		
		ЗагружаемыеОбъекты.Добавить("xml.Документ.битОтражениеФактаПоПриходномуОрдеру");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.битОтражениеФактаПоРасходномуОрдеру");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.битПереупаковка");
		ЗагружаемыеОбъекты.Добавить("xml.Документ.ПеремещениеТоваров.SOLVO");
		
	КонецЕсли;
#КонецОбласти // Конец Бинды_НастройкаПодключенияWMS

#Область Бинды_НастройкаПодключенияУТМ
	Если ПараметрыПодключения = НастройкаПодключенияУТМ
		Или Не ЗначениеЗаполнено(ОсновнаяНастройкаПодключения) Тогда
		
		ЗагружаемыеОбъекты.Добавить("xml.РегистрСведений.алкВходящиеДокументыУТМ");
		ЗагружаемыеОбъекты.Добавить("xml.РегистрСведений.алкЗапросыИОтветыУТМ");
		
	КонецЕсли;
#КонецОбласти // Конец Бинды_НастройкаПодключенияУТМ

#Область Бинды_НастройкаПодключенияОтветыОбОшибках
	Если ПараметрыПодключения = НастройкаПодключенияОтветыОбОшибках Тогда
		ЗагружаемыеОбъекты.Добавить("xml.feedback");
	КонецЕсли;
#КонецОбласти // Конец Бинды_НастройкаПодключенияОтветыОбОшибках

КонецПроцедуры

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт
	
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.БанковскиеСчетаОрганизаций);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ВидыВзаиморасчетов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.битТоварныеКатегорииПрисоединенныеФайлы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ВидыЦен);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.КлассификаторОрганизацийЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Организации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СкидкиНаценки);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СтруктураПредприятия);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битМаршрутныйЛист);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтражениеФактаПоПриходномуОрдеру);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтражениеФактаПоРасходномуОрдеру);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битПереупаковка);  
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битУстановкаСуммовыхСкидок);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битФакторинг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказПоставщику);  
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ИсполнительныйЛист);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаПриобретения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаРеализации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПередачаТоваровХранителю);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПеремещениеТоваров);    
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СчетФактураВыданный);
	
	// Планы видов характеристик
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиДоходов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
	
	// Регистры сведений
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ВходящиеДокументыУТМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ТранспортнаяИнформация);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_СогласованиеЗаказовКлиентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	МетаданныеЗагружаемогоОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ЗагружаемыйОбъект));
	
	Если МассивОбрабатываемыхМетаданных.Найти(МетаданныеЗагружаемогоОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеЗагружаемогоОбъекта.Имя, Ложь);
		Модуль.ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка);
	КонецЕсли;
	
	МассивОбрабатываемыхИменМетаданных = Новый Массив;
	
	// Документы
	МассивОбрабатываемыхИменМетаданных.Добавить("Документ.алкАктКТоварноТранспортнойНакладнойЕГАИС");
	
	Если ТипЗнч(СтруктураОбъекта) = Тип("Структура") 
		И СтруктураОбъекта.Свойство("ПолноеИмя") 
        И МассивОбрабатываемыхИменМетаданных.Найти(СтруктураОбъекта.ПолноеИмя) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(СтруктураОбъекта.ПолноеИмя, Истина);
		Модуль.ЗаполнитьЗагружаемыйОбъект(
				ЗагружаемыйОбъект, 
				СтруктураОбъекта, 
				СписокСвойств, 
				ИсключаяСвойства,
				СтандартнаяОбработка);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьМассивПроверяемыхРеквизитовБлокировки(МетаданныеОбъекта, МассивПроверяемыхРеквизитов, СтандартнаяОбработка) Экспорт
	
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ВидыВзаиморасчетов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ВидыЦен);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.КлассификаторОрганизацийЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Организации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Партнеры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Склады);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СтатьиДвиженияДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СтруктураПредприятия);
	
	// Планы видов характеристик
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиДоходов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик.СтатьиРасходов);
	
	// Регистры сведений
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ВходящиеДокументыУТМ);
	
	Если МассивОбрабатываемыхМетаданных.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеОбъекта.Имя, Ложь);
		Модуль.ЗаполнитьМассивПроверяемыхРеквизитовБлокировки(МетаданныеОбъекта, МассивПроверяемыхРеквизитов, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Если ФорматСообщения <> ПредопределенноеЗначение("Перечисление.адаптер_ФорматыСообщений.адаптерXML") Тогда
		Возврат;
	КонецЕсли;
	
	#Область ОбработкаВОтдельныхМодуляхИнтеграции
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.БанковскиеСчетаОрганизаций);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ВидыВина);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_Группы_СУМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_Бренды_БрендыМТ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_Бренды_БрендыТМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_Бренды_КатегорииБренда);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_Бренды_ПроектыПЭО);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_Номенклатура_СрокГодности);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_БрендыКУ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_Вкусы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_КатегорияВладельца);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_КатегорияМотивации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_КлассОцифровки);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_Классы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_НоменклатурныеГруппы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_Объемы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_СкюМТ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СКЮ_Фирмы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЕК_СУМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_РегионыПроисхождения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_СтатусыТоварныхКатегорий);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ТипыВина);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_ЦветаВина);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_Штрихкоды_ЕК_Номенклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.битКаналыПродаж);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.битПунктыНазначения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.битТерриторииПунктовНазначения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.битТоварныеКатегорииПрисоединенныеФайлы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ВидыАлкогольнойПродукции);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ВидыНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ВидыЦен);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ГруппыПользователей);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ДенежныеДокументы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ДоговорыАренды);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ДоговорыКредитовИДепозитов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.КлассификаторОрганизацийЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Марки);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.НомераГТД);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ОбъектыСтроительства);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ОбъектыЭксплуатации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Организации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Партнеры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Пользователи);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Проекты);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Производители);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ПрочиеРасходы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.РесурсныеСпецификации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СегментыНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СерииНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СертификатыНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СкидкиНаценки);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Склады);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СтруктураПредприятия);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СоглашенияСКлиентами);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ТоварныеКатегории);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.АвансовыйОтчет);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.АктСписанияЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявлениеОВыдачеФСМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битМаршрутныйЛист);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битНакладнаяНаВыдачуФСМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтражениеФактаПоПриходномуОрдеру);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтражениеФактаПоРасходномуОрдеру);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтчетОбИмпортеПродукцииЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтчетОПроизводствеЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битСертификацияНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битПоступлениеДенежныхСредствОтРозничногоПокупателя);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВзаимозачетЗадолженности);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВыбытиеДенежныхДокументов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ДвижениеПродукцииИМатериалов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказПоставщику);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказНаПроизводство2_2);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ИсполнительныйЛист);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаПриобретения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаРеализации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.МодернизацияОС2_4);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ОтчетПереработчика);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПередачаСырьяПереработчику);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПередачаТоваровХранителю);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПересортицаТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПоступлениеДенежныхДокументов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПоступлениеТоваровНаСклад);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриходныйОрдерНаТовары);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПроизводствоБезЗаказа);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РасходныйОрдерНаТовары);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияУслугПрочихАктивов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СборкаТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаЗадолженности);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СписаниеНедостачТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТранспортнаяНакладнаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЭтапПроизводства2_2);
	
	// Регистры сведений
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ДвижениеМарок);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_МенеджерыПунктовНазначения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_МинимальныеЦеныАлкогольнойПродукции);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_СогласованиеЗаказовКлиентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_СоставУпаковок);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ТранспортнаяИнформация);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.ЦеныНоменклатуры25);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ФиксацияПечатиДокументов);
	
	//Регламентные Задания
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДебиторскойЗадолженностиКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДолгосрочныхРезервовКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаОплатПоЗаказамB2B);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаИзмененийСвободныхОстатковДляИМ);
	
	Если МассивОбрабатываемыхМетаданных.Найти(РеквизитыИСвойства.МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(РеквизитыИСвойства.МетаданныеОбъекта.Имя, Ложь);
		Модуль.ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка);
	КонецЕсли;
	#КонецОбласти // ОбработкаВОтдельныхМодуляхИнтеграции
	
	#Область ДобавлениеКлючевыхПолейКВыгрузке
	// Справочники
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ВидыВзаиморасчетов, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ЕК_Бренды_БрендыМТ, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ЕК_Бренды_БрендыТМ, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ЕК_СКЮ_БрендыКУ, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ЕК_СКЮ_Вкусы, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ЕК_СКЮ_Классы, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ЕК_СКЮ_СкюМТ, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_КлассификаторВидовМарок, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_КлассификаторТиповМарок, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_КлассыГрузоподъемностиТС, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_КлючевыеКлиенты, "ИдентификаторCRM");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_МоделиТС, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_СтавкиСтраховыхКомпаний, "Ставка");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_СтавкиСтраховыхКомпаний, 
		"Договор", "Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ТипыВладенияТС, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_ТипыКузова, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.бг_УсловияПоставки, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.БизнесРегионы, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Валюты, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.ВидыАлкогольнойПродукции, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.КлассификаторБанков, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.КлассификаторОрганизацийЕГАИС, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.КлассификаторАлкогольнойПродукцииЕГАИС, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Контрагенты, "ИНН");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Контрагенты, "КПП");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Контрагенты, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Номенклатура, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.НомераГТД, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.ОтветственныеЛицаОрганизаций, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Пользователи, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Проекты, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Приоритеты, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Справки1ЕГАИС, "РегистрационныйНомер");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.Справки2ЕГАИС, "РегистрационныйНомер");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.СтавкиНДС, "Ставка");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.СтавкиНДС, "Предопределенный");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.СтатьиДвиженияДенежныхСредств, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.СтраныМира, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.СтраныМира, "КодАльфа2");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.СтруктураПредприятия, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.ТранспортныеСредства, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.ФизическиеЛица, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.ФизическиеЛица, "бг_КодБК");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.КлассификаторТНВЭД, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.КлассификаторОКПД2, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.ВидыНоменклатуры, "Наименование");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.УпаковкиЕдиницыИзмерения, "бг_ИдентификаторЕКНоменклатуры");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.УпаковкиЕдиницыИзмерения, "Код");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Родитель", "Родитель", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)", "ЭтоБазоваяЕдиницаИзмерения", Новый ОписаниеТипов("Булево"));
	
	// Документы
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПоступлениеТоваровНаСклад,,
		"ХозяйственнаяОперацияСтрока",
		ОбщегоНазначения.ОписаниеТипаСтрока(80));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Документы.РеализацияУслугПрочихАктивов, 
		"ХозяйственнаяОперация",,
		Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации")); 
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.СчетФактураПолученный,,
		"бг_ДокументПоступленияНаСклад",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
	
	// Планы видов характеристик
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.ПланыВидовХарактеристик.СтатьиРасходов, "Код");
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.ПланыВидовХарактеристик.СтатьиДоходов, "Код");
	
	// Планы счетов
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.ПланыСчетов.Хозрасчетный, "Код");
	#КонецОбласти // ДобавлениеКлючевыхПолейКВыгрузке
	
КонецПроцедуры

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеСообщения.ФорматСообщения <> Перечисления.адаптер_ФорматыСообщений.АдаптерXML Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеСообщения.МетаданныеОбъекта = Метаданные.Справочники.адаптер_СхемыДанных Тогда
		// Схемы данных объектов, возвращаемых функцией ОбъектыДляГенерацииСхемБезВыгрузки()
		// Объекты, которые не планируется выгружать, но схемы данных для них должны генерироваться в приемнике.
		Возврат Истина;
	КонецЕсли;
	
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ОбъектыСтроительства);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СкидкиНаценки);
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.бг_РегистрацияБанковскихГарантий);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаРеализации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПередачаТоваровХранителю);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РасходныйОрдерНаТовары);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаЗадолженности);
	
	Если МассивОбрабатываемыхМетаданных.Найти(ДанныеСообщения.МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(ДанныеСообщения.МетаданныеОбъекта.Имя, Ложь);
		Результат = Модуль.ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	Если НастройкаВыгрузки.ФорматСообщения <> ПредопределенноеЗначение("Перечисление.адаптер_ФорматыСообщений.адаптерXML") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ГруппыПользователей);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Организации);	
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Пользователи);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.РесурсныеСпецификации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СерииНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СертификатыНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Склады);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.АвансовыйОтчет);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявлениеОВыдачеФСМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битМаршрутныйЛист);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битНакладнаяНаВыдачуФСМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтчетОПроизводствеЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битСертификацияНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ДвижениеПродукцииИМатериалов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказНаПроизводство2_2);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаРеализации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПередачаТоваровХранителю);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПересортицаТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПоступлениеТоваровНаСклад);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриходныйОрдерНаТовары);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РасходныйОрдерНаТовары);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СборкаТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СписаниеНедостачТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТранспортнаяНакладнаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЭтапПроизводства2_2);
	
	// Регистры сведений
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_МинимальныеЦеныАлкогольнойПродукции);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ТранспортнаяИнформация);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.ЦеныНоменклатуры25);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	//Регламентные Задания
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДебиторскойЗадолженностиКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДолгосрочныхРезервовКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаОплатПоЗаказамB2B);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаИзмененийСвободныхОстатковДляИМ);
	
	Если МассивОбрабатываемыхМетаданных.Найти(НастройкаВыгрузки.МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(НастройкаВыгрузки.МетаданныеОбъекта.Имя, Ложь);
		Модуль.ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта) Экспорт
	
	МассивОбрабатываемыхПолныхИмен = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.бг_КлассыГрузоподъемностиТС");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.Валюты");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.КлассификаторБанков");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.Контрагенты");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.Номенклатура");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.Склады");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.СтатьиДвиженияДенежныхСредств");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.УпаковкиЕдиницыИзмерения");
	МассивОбрабатываемыхПолныхИмен.Добавить("Справочник.ФизическиеЛица");
	
	// Документы
	МассивОбрабатываемыхПолныхИмен.Добавить("Документ.битЗаявкаКлиента");
	МассивОбрабатываемыхПолныхИмен.Добавить("Документ.ЗаказКлиента");
	
	// Перечисления
	МассивОбрабатываемыхПолныхИмен.Добавить("Перечисление.бг_РезультатыСогласования");

	Если МассивОбрабатываемыхПолныхИмен.Найти(СтруктураОбъекта.ПолноеИмя) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(СтруктураОбъекта.ПолноеИмя, Истина);
		Возврат Модуль.НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПолноеИмяОбъектаМетаданныхЗагружаемогоОбъекта(ДанныеОбъекта) Экспорт
	
	СоответствиеИмен = Новый Соответствие;
	
	// Справочники
	СоответствиеИмен.Вставить("Справочник.алкВидыПеревозки", "Справочник.бг_ВидыПеревозки");
	СоответствиеИмен.Вставить("Справочник.алкКлассификаторОрганизацийЕГАИС", "Справочник.КлассификаторОрганизацийЕГАИС");
    СоответствиеИмен.Вставить("Справочник.алкЛицензии", "Справочник.ЛицензииПоставщиковАлкогольнойПродукции");
	СоответствиеИмен.Вставить("Справочник.алкПунктыРазгрузки", "Справочник.битПунктыНазначения");
	СоответствиеИмен.Вставить("Справочник.Банки", "Справочник.КлассификаторБанков");
	
	Если ДанныеОбъекта.ПолноеИмя = "Справочник.БанковскиеСчета" Тогда
		
		Если ДанныеОбъекта.Реквизиты[0].Владелец.ПолноеИмя = "Справочник.Контрагенты" Тогда
			СоответствиеИмен.Вставить("Справочник.БанковскиеСчета", "Справочник.БанковскиеСчетаКонтрагентов");
		ИначеЕсли ДанныеОбъекта.Реквизиты[0].Владелец.ПолноеИмя = "Справочник.Организации" Тогда
			СоответствиеИмен.Вставить("Справочник.БанковскиеСчета", "Справочник.БанковскиеСчетаОрганизаций");
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеИмен.Вставить("Справочник.бг_ВыгрузкаСкидок", "Документ.битУстановкаСуммовыхСкидок");
	СоответствиеИмен.Вставить("Справочник.БрендыМТ", "Справочник.бг_ЕК_Бренды_БрендыМТ");
	СоответствиеИмен.Вставить("Справочник.БрендыТМ", "Справочник.бг_ЕК_Бренды_БрендыТМ");
	СоответствиеИмен.Вставить("Справочник.Виды", "Справочник.бг_ВидыВина");
	СоответствиеИмен.Вставить("Справочник.ВидыВзаиморасчетов", "Справочник.бг_ВидыВзаиморасчетов");
	СоответствиеИмен.Вставить("Справочник.ВидыСкидок", "Справочник.бг_ТипыСкидокНаценокCRM");
	СоответствиеИмен.Вставить("Справочник.ВкусыМТ", "Справочник.бг_ЕК_СКЮ_Вкусы");
	СоответствиеИмен.Вставить("Справочник.Группы_СУМ", "Справочник.бг_Группы_СУМ");
	СоответствиеИмен.Вставить("Справочник.ЕдиницыИзмерения", "Справочник.УпаковкиЕдиницыИзмерения");
	СоответствиеИмен.Вставить("Справочник.ЕК_POSM", "Справочник.Номенклатура");
	СоответствиеИмен.Вставить("Справочник.ЕК_POSM_Штрихкоды", "РегистрСведений.ШтрихкодыНоменклатуры");
	СоответствиеИмен.Вставить("Справочник.ЕК_Бренды", "Справочник.Марки");
	СоответствиеИмен.Вставить("Справочник.ЕК_Бренды_БрендыМТ", "Справочник.бг_ЕК_Бренды_БрендыМТ");
	СоответствиеИмен.Вставить("Справочник.ЕК_Бренды_БрендыТМ", "Справочник.бг_ЕК_Бренды_БрендыТМ");
	СоответствиеИмен.Вставить("Справочник.ЕК_Бренды_КатегорииБренда", "Справочник.бг_ЕК_Бренды_КатегорииБренда");
	СоответствиеИмен.Вставить("Справочник.ЕК_Бренды_Проекты", "Справочник.Проекты");
	СоответствиеИмен.Вставить("Справочник.ЕК_Бренды_ПроектыПЭО", "Справочник.бг_ЕК_Бренды_ПроектыПЭО");
	СоответствиеИмен.Вставить("Справочник.ЕК_Бренды_Производители", "Справочник.Производители");
	СоответствиеИмен.Вставить("Справочник.ЕК_Номенклатура", "Справочник.Номенклатура");
	СоответствиеИмен.Вставить("Справочник.ЕК_Номенклатура_СрокГодности", "Справочник.бг_ЕК_Номенклатура_СрокГодности");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ", "Справочник.ТоварныеКатегории");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_БрендыКУ", "Справочник.бг_ЕК_СКЮ_БрендыКУ");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_Вкусы", "Справочник.бг_ЕК_СКЮ_Вкусы");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_КатегорияВладельца", "Справочник.бг_ЕК_СКЮ_КатегорияВладельца");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_КатегорияМотивации", "Справочник.бг_ЕК_СКЮ_КатегорияМотивации");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_КлассОцифровки", "Справочник.бг_ЕК_СКЮ_КлассОцифровки");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_Классы", "Справочник.бг_ЕК_СКЮ_Классы");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_НоменклатурныеГруппы", "Справочник.бг_ЕК_СКЮ_НоменклатурныеГруппы");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_Объемы", "Справочник.бг_ЕК_СКЮ_Объемы");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_СкюМТ", "Справочник.бг_ЕК_СКЮ_СкюМТ");
	СоответствиеИмен.Вставить("Справочник.ЕК_СКЮ_Фирмы", "Справочник.бг_ЕК_СКЮ_Фирмы");
	ВставитьСоответствиеИмени_ЕК_СтатьиДиР(ДанныеОбъекта, СоответствиеИмен);
	СоответствиеИмен.Вставить("Справочник.ЕК_СУМ", "Справочник.бг_ЕК_СУМ");
	СоответствиеИмен.Вставить("Справочник.ЕК_ЦФО", "Справочник.СтруктураПредприятия");
	СоответствиеИмен.Вставить("Справочник.ЕК_ЦФО_ТЦФО", "Справочник.СтруктураПредприятия");
	СоответствиеИмен.Вставить("Справочник.КаналыПродаж", "Справочник.битКаналыПродаж");
	СоответствиеИмен.Вставить("Справочник.КлассификаторЕдиницИзмерения", "Справочник.УпаковкиЕдиницыИзмерения"); 
	СоответствиеИмен.Вставить("Справочник.НазначенияИзображений", "Справочник.бг_НазначенияИзображений");
	СоответствиеИмен.Вставить("Справочник.НоменклатураКлассификаторМТ", "Справочник.бг_ЕК_СКЮ_СкюМТ");
	СоответствиеИмен.Вставить("Справочник.Подразделения", "Справочник.СтруктураПредприятия");
	СоответствиеИмен.Вставить("Справочник.ПрочиеДоходыИРасходы", "ПланВидовХарактеристик.СтатьиДоходов");
	СоответствиеИмен.Вставить("Справочник.Регионы", "Справочник.битТерриторииПунктовНазначения");
	СоответствиеИмен.Вставить("Справочник.РегионыПроисхождения", "Справочник.бг_РегионыПроисхождения");
	СоответствиеИмен.Вставить("Справочник.синСтавкиСтраховыхКомпаний", "Справочник.бг_СтавкиСтраховыхКомпаний");
	СоответствиеИмен.Вставить("Справочник.синТипКузоваДляРейса", "Справочник.бг_ТипыКузова");
	СоответствиеИмен.Вставить("Справочник.синТоннажАМДляРейса", "Справочник.бг_КлассыГрузоподъемностиТС");
	СоответствиеИмен.Вставить("Справочник.Статусы", "Справочник.бг_СтатусыТоварныхКатегорий");
	СоответствиеИмен.Вставить("Справочник.ТипыВина", "Справочник.бг_ТипыВина");
	СоответствиеИмен.Вставить("Справочник.ТипыЦенНоменклатуры", "Справочник.ВидыЦен");
	СоответствиеИмен.Вставить("Справочник.ХранилищеФайлов", "Справочник.битТоварныеКатегорииПрисоединенныеФайлы");
	СоответствиеИмен.Вставить("Справочник.уатТС", "Справочник.ТранспортныеСредства");
	СоответствиеИмен.Вставить("Справочник.Цвета", "Справочник.бг_ЦветаВина");
	
	// Документы
	СоответствиеИмен.Вставить("Документ.ЗаказПокупателя", "Документ.ЗаказКлиента");
	СоответствиеИмен.Вставить("Документ.ЗаявкаНаОплатуСЭД", "Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	СоответствиеИмен.Вставить("Документ.КорректировкаПоступления", "Документ.КорректировкаПриобретения");
	СоответствиеИмен.Вставить("Документ.ПланБюджетаТМА", "Справочник.СкидкиНаценки");
	СоответствиеИмен.Вставить("Документ.ПлатежноеПоручениеИсходящее", "Документ.СписаниеБезналичныхДенежныхСредств");
	СоответствиеИмен.Вставить("Документ.ПоступлениеТоваровУслуг", "Документ.ПриобретениеТоваровУслуг");
	
	ПолноеИмяОбъектаМетаданныхДокументРеализацияТоваровУслуг(ДанныеОбъекта, СоответствиеИмен);
	
	СоответствиеИмен.Вставить("Документ.РезервированиеСкидки", "Документ.ЗаказКлиента");
	СоответствиеИмен.Вставить("Документ.синМаршрутныйЛист", "Документ.битМаршрутныйЛист");
	СоответствиеИмен.Вставить("Документ.синРейс", "Документ.битМаршрутныйЛист");
	СоответствиеИмен.Вставить("Документ.синФакторинг", "Документ.битФакторинг");
	
	// Регистры сведений
	СоответствиеИмен.Вставить("РегистрСведений.алкВходящиеДокументыУТМ", "РегистрСведений.бг_ВходящиеДокументыУТМ");
	СоответствиеИмен.Вставить("РегистрСведений.алкЗапросыИОтветыУТМ", "РегистрСведений.бг_ВходящиеДокументыУТМ");//Дыков
	СоответствиеИмен.Вставить("РегистрСведений.алкТранспортнаяИнформация", "РегистрСведений.бг_ТранспортнаяИнформация");
	СоответствиеИмен.Вставить("РегистрСведений.синСогласованиеЗаказовПокупателей", "РегистрСведений.бг_СогласованиеЗаказовКлиентов");
	СоответствиеИмен.Вставить("РегистрСведений.Штрихкоды", "РегистрСведений.ШтрихкодыНоменклатуры");
	
	// Перечисления
	СоответствиеИмен.Вставить("Перечисление.МетодГруппировкиВКПК", "Перечисление.бг_МетодГруппировкиВКПК");
	СоответствиеИмен.Вставить("Перечисление.синВидыПРР", "Перечисление.бг_ВидыПРР");
	СоответствиеИмен.Вставить("Перечисление.синРезультатыСогласования", "Перечисление.бг_РезультатыСогласования");
	СоответствиеИмен.Вставить("Перечисление.синТипРейса", "Перечисление.бг_ТипыРейсов");
	
	Возврат СоответствиеИмен.Получить(ДанныеОбъекта.ПолноеИмя);
	
КонецФункции

Функция СоздатьНаборЗаписейРегистра(Отбор, ПолноеИмя) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	МассивОбрабатываемыхПолныхИмен = Новый Массив;
	
	// Регистры сведений
	МассивОбрабатываемыхПолныхИмен.Добавить("РегистрСведений.бг_ВходящиеДокументыУТМ");
	МассивОбрабатываемыхПолныхИмен.Добавить("РегистрСведений.бг_ТранспортнаяИнформация");
	МассивОбрабатываемыхПолныхИмен.Добавить("РегистрСведений.бг_СогласованиеЗаказовКлиентов");
	МассивОбрабатываемыхПолныхИмен.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
	
	Если МассивОбрабатываемыхПолныхИмен.Найти(ПолноеИмя) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(ПолноеИмя, Истина);
		НаборЗаписей = Модуль.СоздатьНаборЗаписейРегистра(Отбор, ПолноеИмя);
	Иначе
		НаборЗаписей = адаптер_ОбработчикиСобытийСтандартный.СоздатьНаборЗаписейРегистра(Отбор, ПолноеИмя);
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_РаботаСМетаданнымиПовтИсп;
	адаптер_РаботаСМетаданнымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСМетаданнымиПовтИсп");
	
	Если ДанныеСообщения.ФорматСообщения <> ПредопределенноеЗначение("Перечисление.адаптер_ФорматыСообщений.адаптерXML") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Найти("адаптер_ЗаписиРегистров")); // объект БИТ.MDT
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_БанковскиеГарантии);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.бг_Штрихкоды_ЕК_Номенклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.битПунктыНазначения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.битТоварныеКатегорииПрисоединенныеФайлы);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ГруппыПользователей);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ОбъектыЭксплуатации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Пользователи);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СерииНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СкидкиНаценки);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Склады);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.СоглашенияСКлиентами);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ФизическиеЛица);
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.АвансовыйОтчет);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.АктСписанияЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявлениеОВыдачеФСМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битМаршрутныйЛист);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битНакладнаяНаВыдачуФСМ);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтчетОбИмпортеПродукцииЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битОтчетОПроизводствеЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ДвижениеПродукцииИМатериалов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказПоставщику);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств); 
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаПриобретения);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаРеализации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПередачаТоваровХранителю);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПоступлениеБезналичныхДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПоступлениеТоваровНаСклад);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеУслугПрочихАктивов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриходныйОрдерНаТовары);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПроизводствоБезЗаказа);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РасходныйОрдерНаТовары);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаЗадолженности);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СборкаТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СписаниеНедостачТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СчетФактураПолученный);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТранспортнаяНакладнаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	//Регламентные Задания
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДебиторскойЗадолженностиКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДолгосрочныхРезервовКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаОплатПоЗаказамB2B);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP);

	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	Если МетаданныеОбъекта = Неопределено
		И ДанныеСообщения.Свойство("МетаданныеОбъекта") Тогда
		// Сюда попадут, например, регламентные задания, так как для них Объект не заполнен.
		МетаданныеОбъекта = ДанныеСообщения.МетаданныеОбъекта;
	КонецЕсли;
	
	Если адаптер_РаботаСМетаданнымиПовтИсп.РегистрПодчиненРегистратору(
		ДанныеСообщения.МетаданныеОбъекта.ПолноеИмя()) Тогда
		// При выгрузке набора записей подчиненного регистра объектом будет регистратор
		МетаданныеОбъекта = ДанныеСообщения.МетаданныеОбъекта;
	КонецЕсли;
	
	Если МассивОбрабатываемыхМетаданных.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеОбъекта.Имя, Ложь);
		Возврат Модуль.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РежимПроведенияДокумента(ДанныеОбъекта) Экспорт
	
	Возврат Перечисления.адаптер_РежимПроведенияДокумента.ПриЗагрузкеОстанавливатьОшибкиПроведения;
	
КонецФункции

Функция ЗаголовкиИсходящегоСообщения(ДанныеСообщения, Объект, НастройкаВыгрузки) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ, адаптер_ОбработчикиСобытийОбщий, адаптер_ОбработчикиСобытийСтандартный,
		адаптер_РаботаСМетаданнымиПовтИсп;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	адаптер_ОбработчикиСобытийОбщий = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийОбщий");
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСМетаданнымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСМетаданнымиПовтИсп"); 
	
	Если НастройкаВыгрузки.ФорматСообщения <> ПредопределенноеЗначение("Перечисление.адаптер_ФорматыСообщений.адаптерXML") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Заголовки = адаптер_ОбработчикиСобытийСтандартный.ЗаголовкиИсходящегоСообщения(
		ДанныеСообщения,
		Объект,
		НастройкаВыгрузки);
	
	Заголовки.Вставить(
		"СобытиеСообщения",
		адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(
			ПредопределенноеЗначение("Перечисление.адаптер_СобытияСообщений.Выгружено")));
	
	Заголовки.Вставить("ДатаСобытия", ТекущаяДатаСеанса());
	Заголовки.Вставить("ИдентификаторСообщения", ДанныеСообщения.Код);
	Заголовки.Вставить("ИмяБазыИсточника", адаптер_ОбработчикиСобытийОбщий.ПолучитьИмяТекущейБазы());
	Заголовки.Вставить("ПолноеИмяБазыИсточника", адаптер_ОбработчикиСобытийОбщий.ПолучитьПолноеИмяТекущейБазы());
	
	Если ДанныеСообщения.Свойство("RoutingKey") Тогда
	    Заголовки.Вставить("КлючМаршрутизации", ДанныеСообщения.RoutingKey);
	Иначе
		// Для Справочник.адаптер_ИсходящиеСообщения
		Заголовки.Вставить(
			"КлючМаршрутизации",
			адаптер_ОбработчикиСобытийОбщий.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения));
	КонецЕсли; 
	
	#Область ОбработкаВОтдельныхМодуляхИнтеграции
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	
	//Регламентные Задания
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP);

	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	Если МетаданныеОбъекта = Неопределено
		И ДанныеСообщения.Свойство("МетаданныеОбъекта") Тогда
		// Сюда попадут, например, регламентные задания, так как для них Объект не заполнен.
		МетаданныеОбъекта = ДанныеСообщения.МетаданныеОбъекта;
	КонецЕсли;
	
	Если адаптер_РаботаСМетаданнымиПовтИсп.РегистрПодчиненРегистратору(
		ДанныеСообщения.МетаданныеОбъекта.ПолноеИмя()) Тогда
		// При выгрузке набора записей подчиненного регистра объектом будет регистратор
		МетаданныеОбъекта = ДанныеСообщения.МетаданныеОбъекта;
	КонецЕсли;
	
	// Получим дополнительные заголовки для подписанных объектов. 
	Если МассивОбрабатываемыхМетаданных.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеОбъекта.Имя, Ложь);
		ЗаголовкиОбъекта = Модуль.ЗаголовкиИсходящегоСообщения(ДанныеСообщения, Объект, НастройкаВыгрузки);
	Иначе
		ЗаголовкиОбъекта = Неопределено;
	КонецЕсли;
	
	// Добавим дополнительные заголовки к общим заголовкам.
	Если ТипЗнч(ЗаголовкиОбъекта) = Тип("Структура") Тогда
		Для каждого ЗаголовокОбъекта Из ЗаголовкиОбъекта Цикл
			Заголовки.Вставить(ЗаголовокОбъекта.Ключ, ЗаголовокОбъекта.Значение);		
		КонецЦикла;		
	КонецЕсли;
	#КонецОбласти
	
	Возврат Заголовки;
	
КонецФункции

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_РаботаСМетаданнымиПовтИсп;
	адаптер_РаботаСМетаданнымиПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСМетаданнымиПовтИсп");	
	
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Справочники
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.БанковскиеСчетаКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.БанковскиеСчетаОрганизаций);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ВидыНоменклатуры);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Контрагенты);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.ЛицензииПоставщиковАлкогольнойПродукции);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.Номенклатура);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битМаршрутныйЛист);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битРаспределениеТранспортныхРасходов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказПоставщику);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.КорректировкаРеализации);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПеремещениеТоваров);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияТоваровУслуг); 
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.РеализацияУслугПрочихАктивов);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.СчетФактураВыданный);
	
	//Регламентные Задания
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДебиторскойЗадолженностиКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаДолгосрочныхРезервовКонтрагентов);
	МассивОбрабатываемыхМетаданных.Добавить(
		Метаданные.РегламентныеЗадания.битВыгрузкаОплатПоЗаказамB2B);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаСвободныхОстатковВSAP);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегламентныеЗадания.битВыгрузкаИзмененийСвободныхОстатковДляИМ);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ДанныеСообщения.Объект));
	
	Если МетаданныеОбъекта = Неопределено
		И ДанныеСообщения.Свойство("МетаданныеОбъекта") Тогда
		// Сюда попадут, например, регламентные задания, так как для них Объект не заполнен.
		МетаданныеОбъекта = ДанныеСообщения.МетаданныеОбъекта;
	КонецЕсли;
	
	Если адаптер_РаботаСМетаданнымиПовтИсп.РегистрПодчиненРегистратору(
		ДанныеСообщения.МетаданныеОбъекта.ПолноеИмя()) Тогда
		// При выгрузке набора записей подчиненного регистра объектом будет регистратор
		МетаданныеОбъекта = ДанныеСообщения.МетаданныеОбъекта;
	КонецЕсли;	
	
	Если МассивОбрабатываемыхМетаданных.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеОбъекта.Имя, Ложь);
		Возврат Модуль.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Дополняет структуру - перечень регламентных заданий адаптера. 
//
// Параметры:
//  Структура - Ключ - ключ регламентного задания, Значение - наименование регламентного задания адаптера.
// 
Процедура ДополнитьСтруктуруКлючейРегламентныхЗаданий(СтруктураКлючей) Экспорт
	бг_РегламентныеЗадания.ДополнитьСтруктуруКлючейРегламентныхЗаданий(СтруктураКлючей);
КонецПроцедуры

// Точка входа для выполнения дополнительных регламентных заданий.
//
// Параметры:
//  КлючЗадания - Строка - Ключ регламентного задания.
// 
Процедура ВыполнитьРегламентноеЗадание(КлючЗадания) Экспорт
	бг_РегламентныеЗадания.ВыполнитьРегламентноеЗадание(КлючЗадания);
КонецПроцедуры

// В файловом варианте запускаются регламентные задания обмена по порядку.
//
Процедура ОбщееЗаданиеФайловойБазы() Экспорт
	бг_РегламентныеЗадания.ОбщееЗаданиеФайловойБазы();
КонецПроцедуры

// Заполняет параметры дополнительных регламентного задания по умолчанию.
//
// Параметры:
//  КлючЗадания      - Строка - ключ регламентного задания.
//  ПараметрыЗадания - Структура, которая будет заполнена, содержит имена (ключи) и значения параметров регламентного задания. 
//                     Состав ключей см. СтруктураПараметровЗаданияПоУмолчанию(). 
//
Процедура ЗаполнитьПараметрыЗаданияПоУмолчанию(ПараметрыЗадания, КлючЗадания) Экспорт
	бг_РегламентныеЗадания.ЗаполнитьПараметрыЗаданияПоУмолчанию(ПараметрыЗадания, КлючЗадания);
КонецПроцедуры

Функция ОстанавливатьОтправкуСообщенийПриОшибках() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Процедура ПередРегистрациейИсходящегоСообщения(Источник, НастройкиВыгрузки) Экспорт

	#Область ОбработкаВОтдельныхМодуляхИнтеграции
	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.Документы.ЗаказКлиента);
	
	// Регистры сведений
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_ТранспортнаяИнформация);
	МассивОбрабатываемыхМетаданных.Добавить(Метаданные.РегистрыСведений.бг_СогласованиеЗаказовКлиентов);
	
	МетаданныеОбъекта = Неопределено;
	Если ТипЗнч(НастройкиВыгрузки) = Тип("Массив") 
		И НастройкиВыгрузки.Количество() > 0 Тогда
		МетаданныеОбъекта = НастройкиВыгрузки[0].МетаданныеОбъекта;
	КонецЕсли;	
		
	Если МетаданныеОбъекта <> Неопределено 
		И МассивОбрабатываемыхМетаданных.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеОбъекта.Имя, Ложь);
		Модуль.ПередРегистрациейИсходящегоСообщения(Источник, НастройкиВыгрузки);
	КонецЕсли;
	#КонецОбласти // ОбработкаВОтдельныхМодуляхИнтеграции
	
КонецПроцедуры	

Процедура ПослеОбработкиСообщения(ДанныеСообщения, ФорматСообщения, СтандартнаяОбработка) Экспорт

	МассивОбрабатываемыхМетаданных = Новый Массив;
	
	// Документы
	МассивОбрабатываемыхМетаданных.Добавить("Документ.битЗаявкаКлиента");
	
	Type = "";
	Если ТипЗнч(ДанныеСообщения) = Тип("Структура")
		И ДанныеСообщения.Свойство("Type") Тогда
		Type = ДанныеСообщения.Type;
	КонецЕсли;
	
	Если МассивОбрабатываемыхМетаданных.Найти(Type) <> Неопределено Тогда
		Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(Type, Истина);
		Модуль.ПослеОбработкиСообщения(ДанныеСообщения, ФорматСообщения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобственныеСобытияАдаптераБелуга

Процедура ВыгрузитьСвязанныеОбъектыПриЗаписиОбъекта(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
	
	МетаданныеОбрабатываемыеВСобственныхМодулях = Новый Массив;
	
	// Справочники
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Справочники.бг_СопроводительныеДокументы);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Справочники.бг_Штрихкоды_ЕК_Номенклатуры);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Справочники.битТоварныеКатегорииПрисоединенныеФайлы);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Справочники.Контрагенты);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Справочники.Номенклатура);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Справочники.Партнеры);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Справочники.УпаковкиЕдиницыИзмерения);
	
	// Документы
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4); 
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Документы.ПриходныйОрдерНаТовары); 
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Документы.РасходныйОрдерНаТовары);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.Документы.РеализацияТоваровУслуг);
	
	Если МетаданныеОбрабатываемыеВСобственныхМодулях.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		МодульИнтеграцииОбъекта = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеОбъекта.Имя, Ложь);
		МодульИнтеграцииОбъекта.ВыгрузитьСвязанныеОбъекты(Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьСвязанныеОбъектыПриЗаписиРегистра(Источник, Отказ, Замещение) Экспорт

	Если Источник.ОбменДанными.Загрузка Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Источник));
	
	МетаданныеОбрабатываемыеВСобственныхМодулях = Новый Массив;
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.РегистрыСведений.НоменклатураСегмента);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.РегистрыСведений.СтатусыДокументовЕГАИС);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	МетаданныеОбрабатываемыеВСобственныхМодулях.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный);
	
	Если МетаданныеОбрабатываемыеВСобственныхМодулях.Найти(МетаданныеОбъекта) <> Неопределено Тогда
		МодульИнтеграцииОбъекта = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(МетаданныеОбъекта.Имя, Ложь);
		МодульИнтеграцииОбъекта.ВыгрузитьСвязанныеОбъекты(Источник);
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектыДляГенерацииСхемБезВыгрузки() Экспорт

	// Метаданные объектов, которые не планируется выгружать, но схемы данных для них должны генерироваться в приемнике.
	//  Также для таких объектов схемы всегда будут создаваться с версией 1.
	ОбъектыГенерацияСхемБезВыгрузки = Новый Массив;
	
	ОбъектыГенерацияСхемБезВыгрузки.Добавить(Метаданные.Документы.битЗаявкаКлиента);
	ОбъектыГенерацияСхемБезВыгрузки.Добавить(Метаданные.Документы.битОтражениеФактаПоПриходномуОрдеру);
	ОбъектыГенерацияСхемБезВыгрузки.Добавить(Метаданные.Документы.битОтражениеФактаПоРасходномуОрдеру);
	ОбъектыГенерацияСхемБезВыгрузки.Добавить(Метаданные.Документы.битПереупаковка);
	
	Возврат ОбъектыГенерацияСхемБезВыгрузки;

КонецФункции

Процедура ПослеЗаписиДанныхОбъектаВИБ(ЗагружаемыйОбъект, РезультатОбработки) Экспорт
	
	ТипыОбрабатываемыеВСобственныхМодулях = Новый Массив;
	
	ТипыОбрабатываемыеВСобственныхМодулях.Добавить(Тип("ДокументОбъект.битЗаявкаКлиента"));
	ТипыОбрабатываемыеВСобственныхМодулях.Добавить(Тип("ДокументОбъект.битОтражениеФактаПоПриходномуОрдеру"));
	ТипыОбрабатываемыеВСобственныхМодулях.Добавить(Тип("ДокументОбъект.битОтражениеФактаПоРасходномуОрдеру"));
	ТипыОбрабатываемыеВСобственныхМодулях.Добавить(Тип("ДокументОбъект.битПереупаковка"));
	ТипыОбрабатываемыеВСобственныхМодулях.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	
	Если ТипыОбрабатываемыеВСобственныхМодулях.Найти(ТипЗнч(ЗагружаемыйОбъект)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Модуль = бг_ОбщегоНазначенияСервер.ОбщийМодульИнтеграции(ЗагружаемыйОбъект.Метаданные().Имя, Ложь);
	Модуль.ПослеЗаписиДанныхОбъектаВИБ(ЗагружаемыйОбъект, РезультатОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВставитьСоответствиеИмени_ЕК_СтатьиДиР(ДанныеОбъекта, СоответствиеИмен)
	
	Если ДанныеОбъекта.ПолноеИмя <> "Справочник.ЕК_СтатьиДиР" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОбъекта.Свойство("Реквизиты") Тогда
		ВидДвижения = ДанныеОбъекта.Реквизиты[0].ВидДвижения;
	Иначе
		ВидДвижения = ДанныеОбъекта.ВидДвижения;
	КонецЕсли;
	
	Если ВидДвижения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючПолногоИмени = "Справочник.ЕК_СтатьиДиР";
	
	Если ВидДвижения.ЗначениеПеречисления = "Доход" Тогда
		СоответствиеИмен.Вставить(КлючПолногоИмени, "ПланВидовХарактеристик.СтатьиДоходов");
	ИначеЕсли ВидДвижения.ЗначениеПеречисления = "Расход" Тогда
		СоответствиеИмен.Вставить(КлючПолногоИмени, "ПланВидовХарактеристик.СтатьиРасходов");
	ИначеЕсли ВидДвижения.ЗначениеПеречисления = "ДоходИДДС" Тогда
		СоответствиеИмен.Вставить(КлючПолногоИмени, "ПланВидовХарактеристик.СтатьиДоходов");
	ИначеЕсли ВидДвижения.ЗначениеПеречисления = "РасходИДДС" Тогда
		СоответствиеИмен.Вставить(КлючПолногоИмени, "ПланВидовХарактеристик.СтатьиРасходов");
	ИначеЕсли ВидДвижения.ЗначениеПеречисления = "ДДС" Тогда
		СоответствиеИмен.Вставить(КлючПолногоИмени, "Справочник.СтатьиДвиженияДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкаПодключенияИзЗначенийКонстант(ЗначенияКонстант, ИмяКонстантыНастройкиПодключения,
	ИмяКонстантыНастройкиПодключенияПоУмолчанию = Неопределено)
	
	НастройкаПодключения = ЗначенияКонстант[ИмяКонстантыНастройкиПодключения];
	
	Если Не ЗначениеЗаполнено(НастройкаПодключения)
		И ИмяКонстантыНастройкиПодключенияПоУмолчанию <> Неопределено Тогда
		
		НастройкаПодключения = ЗначенияКонстант[ИмяКонстантыНастройкиПодключенияПоУмолчанию];
	КонецЕсли;
	
	Возврат НастройкаПодключения;
	
КонецФункции

Процедура ПолноеИмяОбъектаМетаданныхДокументРеализацияТоваровУслуг(ДанныеОбъекта, СоответствиеИмен)
	
	Если ДанныеОбъекта.ПолноеИмя = "Документ.РеализацияТоваровУслуг" 
		И ДанныеОбъекта.Свойство("Реквизиты") И ДанныеОбъекта.Реквизиты.Количество() > 0
		И ТипЗнч(ДанныеОбъекта.Реквизиты[0]) = Тип("Структура")
		И ДанныеОбъекта.Реквизиты[0].Свойство("ЭтоДокументERPПередачаТоваровХранителю")
		И ЗначениеЗаполнено(ДанныеОбъекта.Реквизиты[0].ЭтоДокументERPПередачаТоваровХранителю)
		И ДанныеОбъекта.Реквизиты[0].ЭтоДокументERPПередачаТоваровХранителю Тогда
			СоответствиеИмен.Вставить("Документ.РеализацияТоваровУслуг", "Документ.ПередачаТоваровХранителю");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
