#Область ПрограммныйИнтерфейс

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
&После("ИнициализироватьДанныеКонтроляИзменений")
Процедура бг_ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	Если НуженКонтрольЗаказовИсточниковОбеспечения(Документ) Тогда
		
		ТекстЗапросаДвижения = бг_ТекстЗапросаДвиженияЗаказовИсточниковОбеспечения();
		ТекстыЗапроса.Добавить(
			ТекстЗапросаДвижения,
			"ДвиженияСгруппированныеЗаказовИсточниковОбеспечения");
		
		ТекстЗапросаКонтроль = бг_ТекстЗапросаКонтрольЗаказовИсточниковОбеспечения();
		ТекстыЗапроса.Добавить(ТекстЗапросаКонтроль, "РезультатыКонтроляЗаказовИсточниковОбеспечения");
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
&После("СообщитьОРезультатахКонтроляИзменений")
Процедура бг_СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если НуженКонтрольЗаказовИсточниковОбеспечения(Документ) Тогда
		
		ТаблицаРезультатовКонтроля = РезультатыКонтроля.РезультатыКонтроляЗаказовИсточниковОбеспечения;
		бг_СообщитьОбОшибкахПроведения(Документ, Отказ, ТаблицаРезультатовКонтроля);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Шаблоны движений документов.

&Перед("РасходЗапаса")
Процедура бг_РасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть, ТекстыШаблоновВременныхТаблиц = Неопределено) Экспорт

	бг_ПодготовитьТекстЗапросаТабЧасть(ТекстЗапросаТабЧасть);
	
КонецПроцедуры

&Перед("ЗапланироватьРасходЗапаса")
Процедура бг_ЗапланироватьРасходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть) Экспорт
	
	бг_ПодготовитьТекстЗапросаТабЧасть(ТекстЗапросаТабЧасть);
	
КонецПроцедуры

&Перед("ПриходЗапаса")
Процедура бг_ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть, ТекстыШаблоновВременныхТаблиц = Неопределено) Экспорт
	
	бг_ПодготовитьТекстЗапросаТабЧасть(ТекстЗапросаТабЧасть);
	
КонецПроцедуры

&Перед("ЗапланироватьПриходЗапаса")
Процедура бг_ЗапланироватьПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть) Экспорт
	
	бг_ПодготовитьТекстЗапросаТабЧасть(ТекстЗапросаТабЧасть);
	
КонецПроцедуры

&Перед("ОтменитьЗапланированныйПриходЗапаса")
Процедура бг_ОтменитьЗапланированныйПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть) Экспорт
	
	бг_ПодготовитьТекстЗапросаТабЧасть(ТекстЗапросаТабЧасть);
	
КонецПроцедуры

&Вместо("ТекстЗапросаРаспоряжениеНаОбеспечениеИОтгрузку")
Функция бг_ТекстЗапросаРаспоряжениеНаОбеспечениеИОтгрузку(ТекстЗапросаТабЧасть, ИгнорироватьГотовностьКОбеспечению) Экспорт
	
	бг_ПодготовитьТекстЗапросаТабЧасть(ТекстЗапросаТабЧасть);
	
	ТекстЗапросаОперации = ПродолжитьВызов(ТекстЗапросаТабЧасть, ИгнорироватьГотовностьКОбеспечению);	

	Возврат ТекстЗапросаОперации;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура бг_ПодготовитьТекстЗапросаТабЧасть(ТекстЗапросаТабЧасть)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаТабЧасть);
	КоличествоПакетов = СхемаЗапроса.ПакетЗапросов.Количество();
	Для ИндексПакета = 0 По КоличествоПакетов - 1 Цикл
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[ИндексПакета];	
		Для каждого ОператорВыбора Из ЗапросВыбора.Операторы Цикл
			
			ИсточникТабЧасть = ОператорВыбора.Источники.НайтиПоПсевдониму("ТабЧасть");
			Если ИсточникТабЧасть = Неопределено Тогда
				ИсточникТабЧасть = ОператорВыбора.Источники.НайтиПоПсевдониму("ТабличнаяЧасть");	
			КонецЕсли;
			
			Если ИсточникТабЧасть = Неопределено Тогда
				Если ОператорВыбора.Источники.Количество() > 0 Тогда
					ИмяТаблицы = ОператорВыбора.Источники[0].Источник.ИмяТаблицы;
					ПсевдонимТаблицы = ОператорВыбора.Источники[0].Источник.Псевдоним;
				Иначе
					ИмяТаблицы = "";
					ПсевдонимТаблицы = "";
				КонецЕсли;
				
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Для табличной части ""%1"" Задан неизвестный псевдоним ""%2"".
					      |Невозможно сформировать движения по распределению запасов. Обратитесь к администратору.'"), 
						ИмяТаблицы, ПсевдонимТаблицы);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;

			Если СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ОтчетПереработчика.Продукция") = 0 
				Или СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ОтчетПереработчика.ВозвратныеОтходы") = 0 
				Или СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ЗаказПереработчику.Продукция") = 0 
				Или СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ЗаказПереработчику.ВозвратныеОтходы") = 0 Тогда
				// В ERP не реализован учет у переработчика в разрезе серий номенклатуры.
				// Принимаем ограниечение, что алкогольная продукция не производится силами переработчиков. 
				Продолжить;
			КонецЕсли;	
			
			Если СтрНайти(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ЗаказНаПроизводство.") > 0 Тогда
				// Производство 2.0 мы не используем.
				Продолжить;
			КонецЕсли;	
			Если СтрНайти(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ЧекККМ") > 0 Тогда
				// Чек ККМ мы не используем.
				Продолжить;
			КонецЕсли;	
			
			ИсточникТоварныеМеста = ОператорВыбора.Источники.НайтиПоПсевдониму("ТоварныеМеста");
			Если ИсточникТоварныеМеста <> Неопределено Тогда 
				// Товарные места не используем.
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ИсточникТабЧасть.Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
				Если ИсточникТабЧасть.Источник.ИмяТаблицы = "ЦелыеКомплекты"
					И ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("Серия") = Неопределено Тогда
				    ИсточникТабЧасть.Источник.ДоступныеПоля.Добавить(
						"Серия",
						Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
				ИначеЕсли ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("Серия") = Неопределено 
					И ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("бг_УпаковкаПаллета") = Неопределено Тогда 
				    ИсточникТабЧасть.Источник.ДоступныеПоля.Добавить(
						"бг_УпаковкаПаллета",
						Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
				КонецЕсли;
			КонецЕсли;
			
			ЭтоЗаказНаПроизводство = СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ЗаказНаПроизводство2_2.Продукция") = 0;
            ЭтоВозвратТоваровОтКлиента = СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.ВозвратТоваровОтКлиента.Товары") = 0;
			ЭтоОприходование = СтрНайти(ТекстЗапросаТабЧасть, ИсточникТабЧасть.Источник.Псевдоним + ".НоменклатураОприходование") > 0;
			ЭтоСписаниеЗатратНаВыпуск = СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.СписаниеЗатратНаВыпуск") = 0;
			ЭтоПриобретениеТоваровУслуг = 
				СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, 
							"Документ.ПриобретениеТоваровУслуг.Товары") = 0;
			ЭтоСборкаТоваров = 
				СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.СборкаТоваров.Товары") = 0
				Или СтрСравнить(ИсточникТабЧасть.Источник.ИмяТаблицы, "Документ.СборкаТоваров") = 0;
			
			ОператорВыбора.Источники.Добавить("РегистрСведений.бг_ХарактеристикиУпаковокПаллет", "ХарактеристикиУпаковокПаллет");
			ИсточникХарактеристикиУпаковокПаллет = ОператорВыбора.Источники.НайтиПоПсевдониму("ХарактеристикиУпаковокПаллет");
			
			Если ЭтоОприходование Тогда
				Если ЭтоВозвратТоваровОтКлиента Тогда
					ИсточникТабЧасть.Соединения.Добавить(
						ИсточникХарактеристикиУпаковокПаллет,
						"ВЫБОР КОГДА ТабЧасть.Порча ТОГДА ТабЧасть.НоменклатураОприходование ИНАЧЕ ТабЧасть.Номенклатура КОНЕЦ = ХарактеристикиУпаковокПаллет.Номенклатура");
				Иначе	
					ИсточникТабЧасть.Соединения.Добавить(
						ИсточникХарактеристикиУпаковокПаллет,
						ИсточникТабЧасть.Источник.Псевдоним + ".НоменклатураОприходование = ХарактеристикиУпаковокПаллет.Номенклатура");
                КонецЕсли;
			Иначе	
				
				Если ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("Номенклатура") = Неопределено Тогда
					ТекстСообщения = СтрШаблон(НСтр(
						"ru = 'В табличной части ""%1"" нет реквизита ""Номенклатура"".
						      |Невозможно сформировать движения по распределению запасов. Обратитесь к администратору.'"), 
							ИсточникТабЧасть.Источник.ИмяТаблицы);
							
					// Надо мониторить ЖР по событию.
					// После окончания мониторинга заменить на вызов исключения.
					ЗаписьЖурналаРегистрации(бг_СобытиеЖурналаРегистрации(),
					                         УровеньЖурналаРегистрации.Ошибка,
					                         Метаданные.РегистрыСведений.РаспределениеЗапасов,
					                         ,
					                         ТекстСообщения);
					Продолжить;		
				КонецЕсли;	
					
				ИсточникТабЧасть.Соединения.Добавить(
					ИсточникХарактеристикиУпаковокПаллет, 
					ИсточникТабЧасть.Источник.Псевдоним + ".Номенклатура = ХарактеристикиУпаковокПаллет.Номенклатура");
			КонецЕсли;
			
			Если ЭтоЗаказНаПроизводство 
				Или ЭтоСписаниеЗатратНаВыпуск Тогда
				ИсточникТабЧасть.Соединения.Добавить(
					ИсточникХарактеристикиУпаковокПаллет,
					ИсточникТабЧасть.Источник.Псевдоним + 
						".Спецификация.бг_ОсновноеИзделиеУпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета");	
			ИначеЕсли НЕ ЭтоПриобретениеТоваровУслуг 
				И Не ЭтоСборкаТоваров 
				И ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("бг_УпаковкаПаллета") <> Неопределено Тогда
				// В ТЧ Товары документов Приобретение товаров и услуг и Сборка (разборка) товаров есть реквизит
				// бг_УпаковкаПаллета, но он не всегда заполняется (используется для генерации новых серий),
				// поэтому паллету будем брать из серии номенклатуры.
				ИсточникТабЧасть.Соединения.Добавить(
					ИсточникХарактеристикиУпаковокПаллет,
					ИсточникТабЧасть.Источник.Псевдоним +
						".бг_УпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета");	
			ИначеЕсли ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("бг_ЕдиницаИзмеренияПаллеты") <> Неопределено Тогда
				ИсточникТабЧасть.Соединения.Добавить(
					ИсточникХарактеристикиУпаковокПаллет,
					ИсточникТабЧасть.Источник.Псевдоним +
						".бг_ЕдиницаИзмеренияПаллеты = ХарактеристикиУпаковокПаллет.УпаковкаПаллета");	
			ИначеЕсли НЕ ЭтоОприходование И ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("Серия") <> Неопределено Тогда	
				Если ТипЗнч(ИсточникТабЧасть.Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
					ИсточникТабЧасть.Соединения.Добавить(
						ИсточникХарактеристикиУпаковокПаллет,
						"ВЫРАЗИТЬ(" + ИсточникТабЧасть.Источник.Псевдоним +
							".Серия КАК Справочник.СерииНоменклатуры).бг_УпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета");
				Иначе	
					ИсточникТабЧасть.Соединения.Добавить(
						ИсточникХарактеристикиУпаковокПаллет,
						ИсточникТабЧасть.Источник.Псевдоним +
							".Серия.бг_УпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета");
				КонецЕсли;		
			ИначеЕсли ЭтоОприходование И ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("СерияОприходование") <> Неопределено Тогда	
				ИсточникТабЧасть.Соединения.Добавить(
					ИсточникХарактеристикиУпаковокПаллет,
					ИсточникТабЧасть.Источник.Псевдоним +
						".СерияОприходование.бг_УпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета");
			ИначеЕсли ЭтоОприходование И ИсточникТабЧасть.Источник.ДоступныеПоля.Найти("Серия") <> Неопределено Тогда	
				ИсточникТабЧасть.Соединения.Добавить(ИсточникХарактеристикиУпаковокПаллет,
					ИсточникТабЧасть.Источник.Псевдоним +
						".Серия.бг_УпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета");
			Иначе
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'В табличной части ""%1"" нет реквизитов ""Паллета"" или ""Серия"".
					      |Невозможно сформировать движения по распределению запасов. Обратитесь к администратору.'"), 
						ИсточникТабЧасть.Источник.ИмяТаблицы);
						
				// Надо мониторить ЖР по событию.
				// После окончания мониторинга заменить на вызов исключения.
				ЗаписьЖурналаРегистрации(бг_СобытиеЖурналаРегистрации(),
				                         УровеньЖурналаРегистрации.Ошибка,
				                         Метаданные.РегистрыСведений.РаспределениеЗапасов,
				                         ,
				                         ТекстСообщения);
				Продолжить;		
			КонецЕсли;
					
			ВыбираемыеПоля = ОператорВыбора.ВыбираемыеПоля;
			КоличествоПолей = ВыбираемыеПоля.Количество();
			Для ИндексПоля = 0 По КоличествоПолей - 1 Цикл
				ТекстПоля = Строка(ВыбираемыеПоля[ИндексПоля]);
				Если СтрСравнить(ТекстПоля, ИсточникТабЧасть.Источник.Псевдоним + ".Характеристика") = 0 
					Или (ЭтоВозвратТоваровОтКлиента И СтрНайти(ТекстПоля, "ТабЧасть.ХарактеристикаОприходование") > 0)
					Или СтрСравнить(ТекстПоля, ИсточникТабЧасть.Источник.Псевдоним + ".ХарактеристикаОприходование") = 0 Тогда	
					ВыражениеПоляХарактеристика = Новый ВыражениеСхемыЗапроса(
						"ЕСТЬNULL(ХарактеристикиУпаковокПаллет.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))"); 
					ВыбираемыеПоля.Установить(ИндексПоля, ВыражениеПоляХарактеристика);	
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ТекстЗапросаТабЧасть = СхемаЗапроса.ПолучитьТекстЗапроса();

КонецПроцедуры	

Функция бг_СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Распределение запасов по паллетам';
				|en = 'Inventory allocation to palletes'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция бг_ТекстЗапросаКонтрольЗаказовИсточниковОбеспечения()

	Возврат
		"ВЫБРАТЬ
		|	ИзмененияДвижений.Номенклатура КАК Номенклатура,
		|	ИзмененияДвижений.Характеристика КАК Характеристика,
		|	ИзмененияДвижений.Склад КАК Склад,
		|	ИзмененияДвижений.Назначение КАК Назначение,
		|	ИзмененияДвижений.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ИзмененияДвижений.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ИзмененияДвижений.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ИзмененияДвижений.Резервировать КАК Резервировать,
		|	ЕСТЬNULL(РаспределениеЗапасов.Зарезервировано, 0) КАК РезервироватьОборот
		|ИЗ
		|	ДвиженияСгруппированныеЗаказовИсточниковОбеспечения КАК ИзмененияДвижений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
		|		ПО (РаспределениеЗапасов.Номенклатура = ИзмененияДвижений.Номенклатура)
		|			И (РаспределениеЗапасов.Характеристика = ИзмененияДвижений.Характеристика)
		|			И (РаспределениеЗапасов.Склад = ИзмененияДвижений.Склад)
		|			И (РаспределениеЗапасов.Назначение = ИзмененияДвижений.Назначение)
		|			И (РаспределениеЗапасов.ЗаказНаОтгрузку = ИзмененияДвижений.ЗаказНаОтгрузку)
		|			И (РаспределениеЗапасов.ЖелаемаяДатаОтгрузки = ИзмененияДвижений.ЖелаемаяДатаОтгрузки)
		|			И (РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве))
		|ГДЕ
		|	ИзмененияДвижений.Резервировать <> 0
		|	И ЕСТЬNULL(РаспределениеЗапасов.Зарезервировано, 0) < 0";
	
КонецФункции

Функция НуженКонтрольЗаказовИсточниковОбеспечения(Документ)
	
	Если Документ.ДополнительныеСвойства.Свойство("бг_ПропуститьКонтрольЗаказовИсточниковОбеспечения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента")
		И ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРаспределениеЗапасовДвиженияИзменение");
	
КонецФункции

Функция бг_ТекстЗапросаДвиженияЗаказовИсточниковОбеспечения()
	
	Возврат
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ИзмененияДвижений.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ИзмененияДвижений.Характеристика КАК Характеристика,
		|	ИзмененияДвижений.Склад КАК Склад,
		|	ИзмененияДвижений.Назначение КАК Назначение,
		|	ИзмененияДвижений.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
		|	ИзмененияДвижений.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	СУММА(ИзмененияДвижений.Резервировать) КАК Резервировать
		|ПОМЕСТИТЬ ДвиженияСгруппированныеЗаказовИсточниковОбеспечения
		|ИЗ
		|	ДвиженияРаспределениеЗапасовДвиженияИзменение КАК ИзмененияДвижений
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененияДвижений.Номенклатура,
		|	ИзмененияДвижений.Характеристика,
		|	ИзмененияДвижений.Склад,
		|	ИзмененияДвижений.Назначение,
		|	ИзмененияДвижений.ЗаказНаОтгрузку,
		|	ИзмененияДвижений.ЖелаемаяДатаОтгрузки
		|
		|ИМЕЮЩИЕ
		|	СУММА(ИзмененияДвижений.Резервировать) <> 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	ЗаказНаОтгрузку,
		|	ЖелаемаяДатаОтгрузки";
	
КонецФункции

Процедура бг_СообщитьОбОшибкахПроведения(Объект, Отказ, РезультатыКонтроля)
	
	ОшибкиКонтроля = РезультатыКонтроля;
	
	Для Каждого ОшибкаКонтроля Из ОшибкиКонтроля Цикл
		
		ЗаказНаОтгрузку = ОшибкаКонтроля.ЗаказНаОтгрузку;
		Если Не ЗначениеЗаполнено(ЗаказНаОтгрузку) Тогда
			Продолжить;
		КонецЕсли;	
		
		Номенклатура = ОшибкаКонтроля.Номенклатура;
		Характеристика = ОшибкаКонтроля.Характеристика;
		ЕстьХарактеристика = ЗначениеЗаполнено(Характеристика);
		Склад = ОшибкаКонтроля.Склад;		
		Назначение = ОшибкаКонтроля.Назначение;	
		ДатаОтгрузки = Формат(ОшибкаКонтроля.ЖелаемаяДатаОтгрузки, "ДФ=dd.MM.yyyy");
		Количество = - ОшибкаКонтроля.РезервироватьОборот;
		ЕдиницаИзмерения = ОшибкаКонтроля.ЕдиницаИзмерения;
		
		ТекстНазначениеХарактеристика = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
			НСтр("ru = 'Для отгрузки/резервирования товара ""%1"",""%2"" на складе ""%3""
				| по назначению ""%4"" недостаточно резерва по обеспечивающему заказу %5
				| на дату отгрузки %6 в количестве %7 %8.'"));
		ТекстНазначение = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
			НСтр("ru = 'Для отгрузки/резервирования обособленного товара ""%1"" на складе ""%2""
				| по назначению ""%3"" недостаточно резерва по обеспечивающему заказу %4
				| на дату отгрузки %5 в количестве %6 %7.'"));
		ТекстБезНазначенияХарактеристика = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
			НСтр("ru = 'Для отгрузки/резервирования необособленного товара ""%1"",""%2"" на складе ""%3""
				| недостаточно резерва по обеспечивающему заказу %4
				| на дату отгрузки %5 в количестве %6 %7.'"));
		ТекстБезНазначения = бг_ОбщегоНазначенияСервер.СтрокаБезСимволовПереноса(
			НСтр("ru = 'Для отгрузки/резервирования необособленного товара ""%1"" на складе ""%2""
				| недостаточно резерва по обеспечивающему заказу %3
				| на дату отгрузки %4 в количестве %5 %6.'"));
		
		Если ЗначениеЗаполнено(Назначение) Тогда
			
			Если ЕстьХарактеристика Тогда
				ТекстСообщения = СтрШаблон(ТекстНазначениеХарактеристика,
					Номенклатура,
					Характеристика,
					Склад,
					Назначение,
					ЗаказНаОтгрузку,
					ДатаОтгрузки,
					Количество,
					ЕдиницаИзмерения);
			Иначе
				ТекстСообщения = СтрШаблон(ТекстНазначение,
					Номенклатура,
					Склад,
					Назначение,
					ЗаказНаОтгрузку,
					ДатаОтгрузки,
					Количество,
					ЕдиницаИзмерения);
			КонецЕсли;
			
		Иначе
			
			Если ЕстьХарактеристика Тогда
				ТекстСообщения = СтрШаблон(ТекстБезНазначенияХарактеристика,
					Номенклатура,
					Характеристика,
					Склад,
					ЗаказНаОтгрузку,
					ДатаОтгрузки,
					Количество,
					ЕдиницаИзмерения);
			Иначе
				ТекстСообщения = СтрШаблон(ТекстБезНазначения,
					Номенклатура,
					Склад,
					ЗаказНаОтгрузку,
					ДатаОтгрузки,
					Количество,
					ЕдиницаИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Неопределено, Неопределено, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти