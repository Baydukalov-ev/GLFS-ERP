#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ОставитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		ВыгружаемыеРеквизиты());
		
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт

	ТекстЗапроса = бг_ОбщегоНазначенияСервер.ТекстЗапросаБезОбращенияЧерезТочкуКNull(ТекстЗапроса);
	ТекстЗапросаТаблицаКлючей = бг_ОбщегоНазначенияСервер.ТекстЗапросаБезОбращенияЧерезТочкуКNull(ТекстЗапросаТаблицаКлючей);
	
КонецПроцедуры
	
Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ; // Используем модуль из расширения БИТMDT.
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ПараметрыВыполненияЗапросов = адаптер_РаботаСДаннымиИБ.ПолучитьПараметрыВыполненияЗапросов(Объект, ДанныеСообщения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанных();
	Запрос.УстановитьПараметр("Ссылка", Объект);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаШапка = РезультатыЗапросов[2];
	РезультатЗапросаСклады = РезультатыЗапросов[3];
	
	Реквизиты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		РезультатЗапросаШапка,
		ПараметрыВыполненияЗапросов.ТаблицаКлючей,
		ДанныеСообщения);
		
	// Склады.	
	ДанныеСкладов = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		РезультатЗапросаСклады,
		ПараметрыВыполненияЗапросов.ТаблицаКлючей,
		ДанныеСообщения);
		
	Для каждого ДанныеСклада Из ДанныеСкладов Цикл
		ДанныеСклада.Склад = Строка(ДанныеСклада.Склад.УникальныйИдентификатор());
	КонецЦикла;	
		
	Реквизиты[0].Вставить("Склады", ДанныеСкладов);
	
	// Данные пользователя ИБ.	
	Реквизиты[0].Вставить("АутентификацияОС", Неопределено);
	Реквизиты[0].Вставить("ПользовательОС", Неопределено);
	Реквизиты[0].Вставить("ИмяПользователя", Неопределено);
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Объект.ИдентификаторПользователяИБ);
		
		Если ПользовательИБ <> Неопределено Тогда
			Реквизиты[0].АутентификацияОС = ПользовательИБ.АутентификацияОС;
			Реквизиты[0].ПользовательОС = ПользовательИБ.ПользовательОС;
			Реквизиты[0].ИмяПользователя = ПользовательИБ.Имя;
		КонецЕсли;
	КонецЕсли;
		
	ДанныеВыгружаемогоОбъекта = Новый Структура;
	ДанныеВыгружаемогоОбъекта.Вставить("ПолноеИмя", ПараметрыВыполненияЗапросов.ПолноеИмя);
	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Реквизиты);
	
	Возврат ДанныеВыгружаемогоОбъекта;

КонецФункции

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	ВыгружаемыеРеквизиты.Добавить("Предопределенный");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("Наименование");
	ВыгружаемыеРеквизиты.Добавить("бг_ИдентификаторПользователяMS");

	ВыгружаемыеРеквизиты = СтрСоединить(ВыгружаемыеРеквизиты, ",");
	
	Возврат ВыгружаемыеРеквизиты;

КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"АутентификацияОС",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, 
		, // ИмяРеквизита
		"ПользовательОС",
		Новый ОписаниеТипов("Строка"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ИмяПользователя",
		Новый ОписаниеТипов("Строка"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ГруппаПользователя",
		Новый ОписаниеТипов("СправочникСсылка.ГруппыПользователей"));
		
	// Склад намеренно создается строковый, потому что реализовать выгрузку ссылочного типа в составе несуществующей
	//  в объекте ТЧ значительно сложнее.
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Склады.Склад",
		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));

КонецПроцедуры

Функция ТекстЗапросаВыгружаемыхДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыПользователейСостав.Пользователь КАК Пользователь,
	|	ГруппыПользователейСостав.Ссылка КАК ГруппаПользователя
	|ПОМЕСТИТЬ ВТ_ГруппыПользователей
	|ИЗ
	|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|ГДЕ
	|	ГруппыПользователейСостав.Пользователь = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа,
	|	ГруппыДоступаПользователи.Ссылка.Профиль КАК Профиль
	|ПОМЕСТИТЬ ВТ_ГруппыДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь В
	|			(ВЫБРАТЬ
	|				ВТ_ГруппыПользователей.ГруппаПользователя КАК ГруппаПользователя
	|			ИЗ
	|				ВТ_ГруппыПользователей КАК ВТ_ГруппыПользователей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Идентификатор,
	|	Пользователи.Предопределенный КАК Предопределенный,
	|	Пользователи.ПометкаУдаления КАК ПометкаУдаления,
	|	Пользователи.Наименование КАК Наименование,
	|	ЕСТЬNULL(ВТ_ГруппыПользователей.ГруппаПользователя, ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)) КАК ГруппаПользователя_ЗначениеРеквизитаИдентификатор,
	|	Пользователи.бг_ИдентификаторПользователяMS КАК бг_ИдентификаторПользователяMS
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГруппыПользователей КАК ВТ_ГруппыПользователей
	|		ПО (ВТ_ГруппыПользователей.Пользователь = Пользователи.Ссылка)
	|ГДЕ
	|	Пользователи.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрофилиГруппДоступаЗначенияДоступа.ЗначениеДоступа КАК Склад
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ЗначенияДоступа КАК ПрофилиГруппДоступаЗначенияДоступа
	|ГДЕ
	|	ПрофилиГруппДоступаЗначенияДоступа.ВидДоступа = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И ПрофилиГруппДоступаЗначенияДоступа.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ГруппыДоступа.Профиль КАК Профиль
	|			ИЗ
	|				ВТ_ГруппыДоступа КАК ВТ_ГруппыДоступа)
	|	И ПрофилиГруппДоступаЗначенияДоступа.ЗначениеДоступа ССЫЛКА Справочник.Склады
	|	И ПрофилиГруппДоступаЗначенияДоступа.ЗначениеДоступа <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НайтиПользователяПоАутентификацииОС(ПользовательОС) Экспорт
	
	ВсеПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для каждого ПользовательИБ Из ВсеПользователи Цикл
		Если ВРег(ПользовательИБ.ПользовательОС) = ВРег(ПользовательОС) Тогда
			Возврат Пользователи.НайтиПоИмени(ПользовательИБ.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;  
	
КонецФункции

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
