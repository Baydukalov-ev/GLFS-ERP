
#Область ПрограммныйИнтерфейс

#Область ОбработчикиWebСервиса

#Область ОбновлениеДанных

// Создает конрагента
// Параметры:
//  XDTO-объект по схеме "_CreatePartner"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_CreatePartner"
Функция СоздатьКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СохранитьВходящийПакет(
		ДанныеXDTO, 
		Нстр("ru = 'CreatePartner'"), 
		НСтр("ru = 'Клиент'"));
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_CreatePartner";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	Результат.IDCRM = ДанныеXDTO.IDCRM;
	
	ИНН = ДанныеXDTO.INN;
	КПП = ДанныеXDTO.KPP;
	
	ЭтоЧастноеЛицо = КлиентЧастноеЛицо(ИНН);
	
	Если Не ЭтоЧастноеЛицо 
		И КонтрагентЕстьВБазе(ИНН, КПП) Тогда
		
		ТекстОшибки = СтрШаблон(
						НСтр("ru = 'В базе существует контрагент с аналогичными значениями ИНН: %1 и КПП %2'"), 
						ИНН, 
						КПП);
						
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreatePartner""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 4;
			
		Возврат Результат;
		
	КонецЕсли;
		
	ГруппаПартнера = ЗначениеПоИдентификатору(
						ДанныеXDTO.GroupID,
						"Справочник.битГруппыПартнеров");
						
	Если Не ЗначениеЗаполнено(ГруппаПартнера) Тогда
		
		ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось получить группу партнера по идентификатору %1'",
						ДанныеXDTO.GroupID));
						
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreatePartner""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 4;
			
		Возврат Результат;
		
	КонецЕсли;
		
	НачатьТранзакцию();
		
	Попытка
		
		Партнер = СоздатьПартнера(ДанныеXDTO, ЭтоЧастноеЛицо, ГруппаПартнера);
		Контрагент = СоздатьКонтрагента(ДанныеXDTO, ЭтоЧастноеЛицо, Партнер);
		БанковскиеСчетаXDTO = СоздатьБанковскиеСчета(ДанныеXDTO, Контрагент);
		ЛицензииXDTO = СоздатьЛицензии(ДанныеXDTO, Контрагент);
		ПунктыНазначенияXDTO = СоздатьПунктыНазначения(ДанныеXDTO, Контрагент);
		
		Соглашения = Новый Соответствие;
		
		ДоговорыXDTO = СоздатьДоговоры(ДанныеXDTO, Контрагент, Партнер, Соглашения);
		КоммерческиеУсловияXDTO = СоздатьКоммерческиеУсловия(ДанныеXDTO, Соглашения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка записи клиента c идентификатором %1, по причине %2'"),
						ДанныеXDTO.IDCRM,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio CreatePartner'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
			
		Возврат Результат;
			
	КонецПопытки;
	
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.ErrorStatus = 0;
	Результат.PartnerID = ЗначениеСУчетомВременногоИдентификатора(Контрагент);
	Результат.TableBankAccount = БанковскиеСчетаXDTO;
	Результат.TableContract = ДоговорыXDTO;
	Результат.TableLicense = ЛицензииXDTO;
	Результат.TableUnloadingPoint = ПунктыНазначенияXDTO;
	Результат.TableCommercialTerms = КоммерческиеУсловияXDTO;
	
	Возврат Результат;
	
КонецФункции

// Создает / обновляет контрагента
// Параметры:
//  XDTO-объект по схеме "_UpdatePartnerIn1C"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_UpdatePartnerIn1C"
Функция ОбновитьКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_UpdatePartnerIn1C";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	
	Контрагент = ЗначениеПоИдентификатору(
					ДанныеXDTO.PartnerID, 
					"Справочник.Контрагенты");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден клиент по ID %1'"), 
						ДанныеXDTO.PartnerID);
						
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""UpdatePartnerIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
			
		Возврат Результат;
		
	КонецЕсли;
	
	ГруппаПартнера = ЗначениеПоИдентификатору(
						ДанныеXDTO.GroupID,
						"Справочник.битГруппыПартнеров");
	
	Если Не ЗначениеЗаполнено(ГруппаПартнера) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найдена группа партнера по ID %1'"), 
						ДанныеXDTO.GroupID);
						
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""UpdatePartnerIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
			
		Возврат Результат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
		ПартнерОбъект = Партнер.ПолучитьОбъект();
		
		ПартнерОбъект.Наименование = ДанныеXDTO.Name;
		ПартнерОбъект.НаименованиеПолное = ДанныеXDTO.FullName;
		ПартнерОбъект.ОсновнойМенеджер = ЗначениеПоИдентификатору(
											ДанныеXDTO.ResponsibleID, 
											"Справочник.Пользователи");
		
		Если ЗначениеЗаполнено(ПартнерОбъект.ОсновнойМенеджер) Тогда
			ПартнерОбъект.ГруппаДоступа = ГруппаДоступаПартнера(ПартнерОбъект.ОсновнойМенеджер);
		КонецЕсли;
		
		ПартнерОбъект.бг_ГруппаПартнера = ГруппаПартнера;
		
		ПартнерОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
		
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		
		КонтрагентОбъект.Наименование = ДанныеXDTO.Name;
		КонтрагентОбъект.НаименованиеПолное = ДанныеXDTO.FullName;
		КонтрагентОбъект.КПП = ДанныеXDTO.KPP;
		
		КонтрагентОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
		
		ЗаписатьКонтактныеДанныеКонтрагента(ДанныеXDTO, КонтрагентОбъект);
		
		ПартнерОбъект.Записать();
		
		КонтрагентОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.Error = Истина;
		Результат.TextError = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецПопытки;
	
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.ErrorStatus = 0;
	
	Возврат Результат;
	
КонецФункции

// Создает / обновляет адрес контрагента
// Параметры:
//  XDTO-объект по схеме "_UpdateAddressIn1C"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_UpdateAddressIn1C"
функция ОбновитьАдресКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_UpdateAddressIn1C";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	
	Контрагент = ЗначениеПоИдентификатору(
					ДанныеXDTO.PartnerID,
					"Справочник.Контрагенты");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден контрагент по ID %1'"), 
						ДанныеXDTO.PartnerID);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""UpdateAddressIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ВидКИ = ЗначениеПоИдентификатору(
				ДанныеXDTO.TypeID,
				"Справочник.ВидыКонтактнойИнформации");
	
	Если Не ЗначениеЗаполнено(ВидКИ) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден вид контактной информации по ID %1'"), 
						ДанныеXDTO.TypeID);
			
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""UpdateAddressIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		
		ЗаписатьАдресКонтрагента(
			ДанныеXDTO, 
			КонтрагентОбъект, 
			ВидКИ);
			
		КонтрагентОбъект.Записать();
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""UpdateAddressIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстОшибки);
		
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецПопытки;
	
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.ErrorStatus = 0;
	
	Возврат Результат;
	
КонецФункции

// Создает / обновляет банковский счет контрагента
// Параметры:
//  XDTO-объект по схеме "_CreateUpdateBankAccountIn1C"
// Тип возвращаемого значения
//  Структура
//  XDTO-объект по схеме "_CreateUpdateBankAccountIn1C"
функция СоздатьОбновитьБанковскийСчетКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_CreateUpdateBankAccountIn1C";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	Результат.IDCRM = ДанныеXDTO.IDCRM;
	
	Контрагент = ЗначениеПоИдентификатору(
					ДанныеXDTO.PartnerID,
					"Справочник.Констрагенты");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден контрагент по ID %1'"), 
						ДанныеXDTO.PartnerID);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateBankAccountIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
		
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	БанковскийСчет = ЗначениеПоИдентификатору(
						ДанныеXDTO.BankAccountID,
						"Справочник.БанковскиеСчетаКонтрагентов");
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		
		Попытка
			
			БанковскийСчет = СоздатьБанковскийСчет(ДанныеXDTO, Контрагент);
			
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				БанковскийСчет, 
				ДанныеXDTO.IDCRM);
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateBankAccountIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				ТекстОшибки);
			
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "Владелец") <> Контрагент Тогда
			
		ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Невозможно изменить владельца банковского счета с ID %1'"),
						ДанныеXDTO.IDCRM);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateBankAccountIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
			
	Иначе
		
		Банк = ЗначениеПоИдентификатору(
				ДанныеXDTO.BankID,
				"Справочник.КлассификаторБанков");
		
		Если Не ЗначениеЗаполнено(Банк) Тогда
			
			ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось найти банк с ID %1'"),
						ДанныеXDTO.BankID);
		
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateBankAccountIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
				
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецЕсли;
		
		Попытка
			
			БанковскийСчетОбъект = БанковскийСчет.ПолучитьОбъект();
		
			БанковскийСчетОбъект.НомерСчета = СокрЛП(СтрЗаменить(ДанныеXDTO.Number, ".", ""));
			БанковскийСчетОбъект.ВалютаДенежныхСредств = ВалютаПоНомеруСчета(БанковскийСчетОбъект.НомерСчета);
			БанковскийСчетОбъект.Наименование = НаименованиеБанковскогоСчета(
													БанковскийСчетОбъект.НомерСчета, 
													БанковскийСчетОбъект.Банк, 
													БанковскийСчетОбъект.ВалютаДенежныхСредств);
			
			БанковскийСчетОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
			
			БанковскийСчетОбъект.Записать();
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateBankAccountIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
				
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Результат.BankAccountId = ЗначениеСУчетомВременногоИдентификатора(БанковскийСчетОбъект.Ссылка);
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.ErrorStatus = 0;
	
	Возврат Результат;
	
КонецФункции

// Создает / обновляет договор контрагента
// Параметры:
//  XDTO-объект по схеме "_CreateUpdateContractIn1C"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_CreateUpdateContractIn1C"
функция СоздатьОбновитьДоговорКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_CreateUpdateContractIn1C";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	Результат.IDCRM = ДанныеXDTO.IDCRM;
	
	Контрагент = ЗначениеПоИдентификатору(
					ДанныеXDTO.PartnerID,
					"Справочник.Контрагенты");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден клиент по ID %1'"), 
						ДанныеXDTO.PartnerID);
						
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateContractIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Договор = ЗначениеПоИдентификатору(
				ДанныеXDTO.ContractID,
				"Справочник.ДоговорыКонтрагентов");
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		
		Попытка
			
			Договор = СоздатьДоговор(
						ДанныеXDTO, 
						Контрагент,
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"));
						
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				Договор, 
				ДанныеXDTO.IDCRM);
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateContractIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
			
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
	ИначеЕсли Договор.Контрагент <> Контрагент Тогда
			
			ТекстОшибки = НСтр("ru = 'Невозможно изменить владельца договора'");
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateContractIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
				
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
	Иначе
		
		Попытка 
			
			ДоговорОбъект = Договор.ПолучитьОбъект();
		
			ДоговорОбъект.Организация = ЗначениеПоИдентификатору(
											ДанныеXDTO.OrganizationID,
											"Справочник.Организации");
										
			ДоговорОбъект.Наименование = ДанныеXDTO.Name;
			ДоговорОбъект.Номер = ДанныеXDTO.Number;
			ДоговорОбъект.Дата = ДанныеXDTO.Date;
			ДоговорОбъект.ДатаНачалаДействия = ДанныеXDTO.Date;
			ДоговорОбъект.ДатаОкончанияДействия = ДанныеXDTO.ExpirationDate;
			ДоговорОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			ДоговорОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
			
			ДоговорОбъект.Записать();
			Договор = ДоговорОбъект.Ссылка;
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateContractIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
				
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "бг_Соглашение");
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		Попытка
		
			СоглашениеОбъект = Соглашение.ПолучитьОбъект();
			
			СоглашениеОбъект.Дата = ДанныеXDTO.Date;
			СоглашениеОбъект.ДатаНачалаДействия = ДанныеXDTO.Date;
			СоглашениеОбъект.ДатаОкончанияДействия = ДанныеXDTO.ExpirationDate;
			
			СоглашениеОбъект.ВидЦен = ЗначениеПоИдентификатору(
									ДанныеXDTO.PriceTypeID,
									"Справочник.ВидыЦен");
									
			СоглашениеОбъект.ЦенаВключаетНДС = ?(ЗначениеЗаполнено(СоглашениеОбъект.ВидЦен), 
													ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
														СоглашениеОбъект.ВидЦен, 
														"ЦенаВключаетНДС"),
													Ложь);
			
			СоглашениеОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
			
			СоглашениеОбъект.Записать();
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateContractIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
			
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Результат.ContractID = ЗначениеСУчетомВременногоИдентификатора(Договор);
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.ErrorStatus = 0;
	
	Возврат Результат;
	
КонецФункции

// Создает / обновляет лицензию Контрагента
// Параметры:
//  XDTO-объект по схеме "_CreateUpdateContractIn1C"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_CreateUpdateContractIn1C"
функция СоздатьОбновитьЛицензиюКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_CreateUpdateLicenseIn1C";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	Результат.IDCRM = ДанныеXDTO.IDCRM;
	
	Контрагент = ЗначениеПоИдентификатору(ДанныеXDTO.PartnerID, "Справочник.Контрагенты");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден клиент c идентификатором %1'"), 
						ДанныеXDTO.PartnerID);
						
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateLicenseIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Лицензия = ЗначениеПоИдентификатору(
				ДанныеXDTO.LicenseID,
				"Справочник.ЛицензииПоставщиковАлкогольнойПродукции");
	
	Если Не ЗначениеЗаполнено(Лицензия) Тогда
		
		Попытка
			
			Лицензия = СоздатьЛицензию(
						ДанныеXDTO, 
						Контрагент);
			
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				Лицензия, 
				ДанныеXDTO.IDCRM);
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateLicenseIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
			
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
	Иначе
		
		Если Лицензия.Владелец <> Контрагент Тогда
			
			ТекстОшибки = НСтр("ru = 'Невозможно изменить владельца лицензии'");
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateLicenseIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
				
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецЕсли;
		
		Попытка
			
			ЛицензияОбъект = Лицензия.ПолучитьОбъект();
			
			ЛицензияОбъект.Владелец = Контрагент;
			ЛицензияОбъект.Наименование = ДанныеXDTO.Name;
			ЛицензияОбъект.бг_ДатаВыдачи = ДанныеXDTO.DateIssue;
			ЛицензияОбъект.ДатаНачала = ДанныеXDTO.ValidFrom;
			ЛицензияОбъект.бг_ДатаПрекращенияДействия = ДанныеXDTO.ExpirationDate;
			ЛицензияОбъект.ДатаОкончания = ДанныеXDTO.ValidTo;
			
			ЛицензияОбъект.бг_ТипЛицензии = ЗначениеПоИдентификатору(ДанныеXDTO.TypeID);
			
			ЛицензияОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
			
			ЛицензияОбъект.Записать();
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateLicenseIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
				
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
		Лицензия = ЛицензияОбъект.Ссылка;
		
	КонецЕсли;
	
	Результат.LicenseID = ЗначениеСУчетомВременногоИдентификатора(Лицензия);
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.ErrorStatus = 0;
	
	Возврат Результат;
	
КонецФункции

// Создает / обновляет пункт назначения
// Параметры:
//  XDTO-объект по схеме "_CreateUpdateUnloadingPointIn1C"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_CreateUpdateUnloadingPointIn1C"
функция СоздатьОбновитьПунктыНазначенияКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_CreateUpdateUnloadingPointIn1C";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	Результат.IDCRM = ДанныеXDTO.IDCRM;
	
	Контрагент = ЗначениеПоИдентификатору(
					ДанныеXDTO.PartnerID,
					"Справочник.Контрагенты");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден клиент c идентификатором %1'"), 
						ДанныеXDTO.PartnerID);
						
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateUnloadingPointIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПунктНазначения = ЗначениеПоИдентификатору(
						ДанныеXDTO.UnloadingPointID,
						"Справочник.битПунктыНазначения");
						
	Если Не ЗначениеЗаполнено(ПунктНазначения) Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ПунктНазначения = СоздатьПунктНазначения(
								ДанныеXDTO, 
								Контрагент);
			
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				ПунктНазначения, 
				ДанныеXDTO.IDCRM);
				
			ЗафиксироватьТранзакцию();
			
			Результат.UnloadingPointID = ЗначениеСУчетомВременногоИдентификатора(ПунктНазначения);
			Результат.Error = Ложь;
			Результат.TextError = "";
			Результат.ErrorStatus = 0;
			
			Возврат Результат;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateUnloadingPointIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
			
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
			Результат.ErrorStatus = 1;
			
			Возврат Результат;
			
		КонецПопытки;
		
	КонецЕсли;
		
	Если ПунктНазначения.Клиент <> Контрагент Тогда
		
		ТекстОшибки = НСтр("ru = 'Невозможно изменить владельца пункта назначения'");
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateUnloadingPointIn1C""'"), 
		УровеньЖурналаРегистрации.Ошибка,
		, 
		, 
		ТекстОшибки);
		
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		ПунктНазначенияОбъект = ПунктНазначения.ПолучитьОбъект();
		
		ЗаполнитьДанныеШапкиПунктаНазначения(ДанныеXDTO, ПунктНазначенияОбъект, Контрагент);
		ЗаполнитьДанныеАдресаПунктаНазначения(ДанныеXDTO, ПунктНазначенияОбъект);
		
		ПунктНазначенияОбъект.Записать();
		
		ПунктНазначения = ПунктНазначенияОбъект.Ссылка;
		
		Если ЗначениеЗаполнено(ДанныеXDTO.MainLicenseID) Тогда
			
			Лицензия = ЗначениеПоИдентификатору(
				ДанныеXDTO.MainLicenseID,
				"Справочник.ЛицензииПоставщиковАлкогольнойПродукции");
			
			Если ЗначениеЗаполнено(Лицензия) Тогда
				ПроверитьУстановитьДействиеЛицензииВПунктеНазначения(ПунктНазначения, Лицензия);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьМенеджераВПунктеНазначения(ПунктНазначения, Контрагент);
		
		ЗафиксироватьТранзакцию();
		
		Результат.UnloadingPointID = ЗначениеСУчетомВременногоИдентификатора(ПунктНазначения);
		Результат.Error = Ложь;
		Результат.TextError = "";
		Результат.ErrorStatus = 0;
		
		Возврат Результат;
	
	Исключение
	
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
		НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateLicenseIn1C""'"), 
		УровеньЖурналаРегистрации.Ошибка,
		, 
		, 
		ТекстОшибки);
		
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецПопытки;
	
КонецФункции

// Создает / обновляет скидки контрагента
// Параметры:
//  XDTO-объект по схеме "_CreateUpdateCommercialTermsIn1C"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_CreateUpdateCommercialTermsIn1C"
функция СоздатьОбновитьСкидкиКлиента(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_CreateUpdateCommercialTermsIn1C";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	
	КоммерческиеУсловия = Неопределено;
	
	Контрагент = ЗначениеПоИдентификатору(
					ДанныеXDTO.PartnerID,
					"Справочник.Контрагенты");
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		ТекстОшибки = СтрШаблон(
						Нстр("ru='Не найден контрагент по ID %1'"), 
						ДанныеXDTO.PartnerID);
		
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Организация = ЗначениеПоИдентификатору(
					ДанныеXDTO.OrganizationID, 
					"Справочник.Организации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.Контрагент = &Контрагент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстОшибки = НСтр("ru = 'Не удалось найти действующее соглашение для обновления скидок'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateLicenseIn1C""'"), 
			УровеньЖурналаРегистрации.Ошибка,
			, 
			, 
			ТекстОшибки);
		
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Соглашение = Выборка.Ссылка;
	
	НачатьТранзакцию();
	
	Попытка
		
		СоглашениеОбъект = Соглашение.ПолучитьОбъект();
		СоглашениеОбъект.ДополнительныеСвойства.Вставить("адаптер_ВыгружатьБезусловно", Истина);
		
		Скидки = СоздатьУстановитьСкидкиПоСоглашению( 
			ДанныеXDTO.TableGroup.Group,
			Соглашение,
			ДанныеXDTO.ValidFrom, 
			ДанныеXDTO.ValidTo);
			
		СоглашениеОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""CreateUpdateLicenseIn1C""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
		
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		
		Возврат Результат;
		
	КонецПопытки;
	
	КоммерческиеУсловияXDTO = ФабрикаXDTO.Создать(
								ФабрикаXDTO.Тип(
								ПространствоИмен, 
								"TCreateUpdateCommercialTermsIn1CTableCommercialTerms"));
	
	Для Каждого Скидка Из Скидки.Group Цикл
		
		КоммерческоеУсловиеXDTO = ФабрикаXDTO.Создать(
									ФабрикаXDTO.Тип(
									ПространствоИмен, 
									"TCreateUpdateCommercialTermsIn1CCommercialTerms"));
								
		КоммерческоеУсловиеXDTO.IDCRM = ДанныеXDTO.IDCRM;
		КоммерческоеУсловиеXDTO.GroupID = Скидка.GroupID;
		КоммерческоеУсловиеXDTO.DocumentID = "";
		КоммерческиеУсловияXDTO.CommercialTerms.Добавить(КоммерческоеУсловиеXDTO);
		
	КонецЦикла;
	
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.ErrorStatus = 0;
	Результат.TableCommercialTerms = КоммерческиеУсловияXDTO;
	
	Возврат Результат;
	
КонецФункции

// Создает заказ клиента
// Параметры: 
//  ДанныеXDTO - XDTO-объект, созданый по схеме "_CreateOrder"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdateExchangeResults"
Функция СоздатьЗаказ(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СохранитьВходящийПакет(
		ДанныеXDTO, 
		Нстр("ru = 'CreateOrder'"), 
		НСтр("ru = 'Заказ'"));
	
	Организация = ЗначениеПоИдентификатору(ДанныеXDTO.OrganizationID, "Справочник.Организации");
	ИспользоватьЗагрузкуЗаказовВERP = бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьЗагрузкуЗаказовИзCreatioВERP", Организация);
	ИспользоватьЗагрузкуЗаказовВУПП = бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьЗагрузкуЗаказовИзCreatioВУПП", Организация);
	
	Если ИспользоватьЗагрузкуЗаказовВERP Тогда
		
		НачатьТранзакцию();
		
		Попытка
		
			бг_creatio_СоответствиеОбъектов = РегистрыСведений.бг_creatio_СоответствиеОбъектов;
			
			ЗаказСсылка = бг_creatio_СоответствиеОбъектов.ОбъектПоИдентификаторуCreatio(ДанныеXDTO.IDCRM);
			Если ЗаказСсылка = Неопределено Тогда
				ЗаказОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
			Иначе
				ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			ЗаполнитьДанныеШапкиЗаказа(ЗаказОбъект, ДанныеXDTO);
			ЗаполнитьТабличнуюЧастьТоварыЗаказа(ЗаказОбъект, ДанныеXDTO);
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(ЗаказОбъект.Ссылка, ДанныеXDTO.IDCRM);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
		
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка записи заказа клиента c идентификатором %1 (по данным Creatio), по причине %2'"),
							ДанныеXDTO.IDCRM,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio CreateOrder'"), 
				УровеньЖурналаРегистрации.Ошибка, 
				, 
				, 
				ТекстОшибки);
				
			Если Не ИспользоватьЗагрузкуЗаказовВУПП Тогда
				Возврат ДанныеЗаказаXDTO(ЗаказОбъект, ДанныеXDTO, ТекстОшибки);
			КонецЕсли;
			
		КонецПопытки;
		
		ЗаказСсылка = ЗаказОбъект.Ссылка;
		
		ДанныеЗаполненияЗаказа = бг_ЗаказыКлиентов.ПараметрыЗаполненияЗаказаКлиента(ЗаказСсылка);
		
		РезультатОбработки = бг_ЗаказыКлиентов.ОбработатьЗаказКлиента(
								ДанныеЗаполненияЗаказа, 
								ДанныеЗаполненияЗаказа.Товары);
		
		Если Не ИспользоватьЗагрузкуЗаказовВУПП Тогда
			Возврат ДанныеЗаказаXDTO(ЗаказОбъект, ДанныеXDTO, РезультатОбработки.ТекстОшибки);
		Иначе
			Возврат СоздатьЗаказ_УПП(ДанныеXDTO);
		КонецЕсли;
		
	Иначе
		Возврат СоздатьЗаказ_УПП(ДанныеXDTO);
	КонецЕсли;
	
КонецФункции

#КонецОбласти // ОбновлениеДанных

#Область ОбновлениеДанныхВCreatio

// Обновляет данные клиентов в Creatio
// Параметры:
//  XDTO-объект, созданый по схеме "_UpdatePartnersInCRM"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdatePartnersInCRM"
Функция ОбновитьКлиентовВCreatio(ДанныеXDTO) Экспорт
	
	Возврат ДанныеДляВыгрузкиПоТипу(ДанныеXDTO.Number, "_UpdatePartnersInCRM");
	
КонецФункции

// Обновляет адреса клиентов в Creatio
// Параметры:
//  XDТO-объект, созданый по схеме "_UpdatePartnersAddressesInCRM"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdatePartnersAddressesInCRM"
Функция ОбновитьАдресаКлиентовВCreatio(ДанныеXDTO) Экспорт
	
	Возврат ДанныеДляВыгрузкиПоТипу(ДанныеXDTO.Number, "_UpdatePartnersAddressesInCRM");
	
КонецФункции

// Обновляет банковские счета клиентов в Creatio
// Параметры:
//  XDТO-объект, созданый по схеме "_UpdateBankAccountsInCRM"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdateBankAccountsInCRM"
Функция ОбновитьБанковскиеСчетаВCreatio(ДанныеXDTO) Экспорт
	
	Возврат ДанныеДляВыгрузкиПоТипу(ДанныеXDTO.Number, "_UpdateBankAccountsInCRM");
	
КонецФункции

// Обновляет договоры клиентов в Creatio
// Параметры:
//  XDТO-объект, созданый по схеме "_UpdateContractsInCRM"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdateContractsInCRM"
функция ОбновитьКонтрактыВCreatio(ДанныеXDTO) Экспорт
	
	Возврат ДанныеДляВыгрузкиПоТипу(ДанныеXDTO.Number, "_UpdateContractsInCRM");
	
КонецФункции

// Отправляет данные лицензий клиентов в Creatio
// Параметры:
//  XDТO-объект, созданый по схеме "_UpdateLicensesInCRM"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdateLicensesInCRM"
функция ОбновитьЛицензииВCreatio(ДанныеXDTO) Экспорт
	
	Возврат ДанныеДляВыгрузкиПоТипу(ДанныеXDTO.Number, "_UpdateLicensesInCRM");
	
КонецФункции

// Отправляет пакет данных пунктов назначения в Creatio
// Параметры:
//  XDТO-объект, созданый по схеме "_UpdateUnloadingPointInCRM"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdateUnloadingPointInCRM"
функция ОбновитьПунктыРазгрузкиВCreatio(ДанныеXDTO) Экспорт
	
	Возврат ДанныеДляВыгрузкиПоТипу(ДанныеXDTO.Number, "_UpdateUnloadingPointInCRM");
	
КонецФункции

// Обновляет статус обмена с Ceratio
// Параметры:
//  XDTO объект, созданый по схеме "_UpdateExchangeResults"
// Тип возвращаемого значения
//  XDTO-объект, созданый по схеме "_UpdateExchangeResults"
Функция ОбновитьСтатусОбмена(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_UpdateExchangeResults";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	
	Для Каждого Строка Из ДанныеXDTO.TableDataItem.DataItem Цикл
		
		ТекущиеДанные = ЗначениеПоИдентификатору(Строка.Object1СID);
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат ОбновитьСтатусОбмена_УПП(ДанныеXDTO);
		КонецЕсли;
		
		Попытка
			
			РегистрыСведений.бг_creatio_ВыгруженныеПакеты.ЗарегистрироватьВыгрузкуПакета(
				ДанныеXDTO.DataPackID,
				Строка.SerialNumber, 
				ТекущаяДата(), 
				Ложь, 
				Истина);
				
		Исключение
				
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Вызов метода web-сервиса Creatio ""UpdateExchangeResults""'"), 
				УровеньЖурналаРегистрации.Ошибка,
				, 
				, 
				ТекстОшибки);
				
			Результат.Error = Истина;
			Результат.TextError = ТекстОшибки;
				
			Возврат Результат;
			
		Конецпопытки;
		
	КонецЦикла;
		
	Результат.Error = Ложь;
	Результат.TextError = "";
	
	Возврат Результат;
	
КонецФункции

// Создает / обновляет заказ в Creatio
//	Параметры: XDTO-объект, созданый по схеме "CreateOrder"
//
Функция СоздатьОбновитьЗаказыВCreatio(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьВыгрузкуЗаказовИзERPВCreatio") Тогда
		Возврат ""; // Заглушка на время разработки
	Иначе
		Возврат СоздатьОбновитьЗаказыВCreatio_УПП(ДанныеXDTO);
	КонецЕсли;
	
КонецФункции

// Получает цены товара по заказу из Creatio
// Параметры:
//  XDТO-объект, созданый по схеме "_GetOrderPrices"
// Тип возвращаемого значения
//  XDТO-объект, созданый по схеме "_GetOrderPrices"
Функция ЦеныТоваровПоЗаказу(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьИнтеграциюЦенСCreatio") Тогда
		Возврат ЦеныТоваровПоЗаказу_УПП(ДанныеXDTO);
	КонецЕсли;
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_GetOrderPrices";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	Результат.IDCRM = ДанныеXDTO.IDCRM;
	
	ЗаказОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	Ошибки = Новый Структура("ТекстОшибки, СтатусОшибки", "", 0);
	
	ЗаполнитьДанныеШапкиЗаказа(ЗаказОбъект, ДанныеXDTO);
	
	ЗаполнитьТабличнуюЧастьТоварыЗаказа(
		ЗаказОбъект, 
		ДанныеXDTO);
	
	ОбработатьТабличнуюЧастьТоварыЗаказа(ЗаказОбъект);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТоварыЗаказа", ЗаказОбъект.Товары.Выгрузить());
	
	ПодготовитьВременнуюТаблицуКатегорийНМК(Запрос);
	Запрос.Текст = ТекстЗапросаИтоговойТаблицыЦенПоЗаказу();
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось обработать таблицу товаров заказа'");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Вызов метода web-сервиса Creatio GetOrderPrices'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			, 
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		Возврат Результат;
	КонецЕсли;
	
	TableProduct = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TGetOrderPricesTableProduct"));
	
	Результат.Error = Ложь;
	Результат.TextError = "";
	Результат.TotalByOrder = ЗаказОбъект.Товары.Итог("Сумма");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Product = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, "TGetOrderPricesProduct"));
		Product.ProductID = СтрЗаменить(Выборка.Код, " ", "");
		Product.TypeSKU = Выборка.ЭтоСКЮ;
		Product.Total = Выборка.Сумма;
		Product.TotalWithDiscount = Выборка.СуммаСоСкидкой;
		Product.Discount = Выборка.ПроцентРучнойСкидки + Выборка.ПроцентАвтоматическойСкидки;
		TableProduct.Product.Добавить(Product);
	КонецЦикла;
	
	Результат.TableProduct = TableProduct;
		
	Возврат Результат;
	
КонецФункции

// Получает остатки товаров по заказу из Creatio
// Параметры:
//  XDТO-объект, созданый по схеме "_GetOrderSKUBalance"
// Тип возвращаемого значения
//  XDТO-объект, созданый по схеме "_GetOrderSKUBalance"
Функция ОстаткиТоваровПоЗаказу(ДанныеXDTO) Экспорт
	
	Возврат ОстаткиТоваровПоЗаказу_УПП(ДанныеXDTO);
	
КонецФункции

// Возвращает таблицу номенклатуры с актуальными ценами на дату запроса
// Параметры:
//  XDTO-объект по схеме "_GetAllPrices"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_GetAllPrices"
Функция ЦеныТоваров(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьИнтеграциюЦенСCreatio") Тогда
		Возврат ЦеныТоваров_УПП(ДанныеXDTO);
	КонецЕсли;
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	ТипGetAllPrices = ФабрикаXDTO.Тип(ПространствоИмен, "_GetAllPrices");
	
	Результат = ФабрикаXDTO.Создать(ТипGetAllPrices);
	
	ДатаСреза = ?(ЗначениеЗаполнено(ДанныеXDTO.RelevanceDate), ДанныеXDTO.RelevanceDate, ТекущаяДатаСеанса());
	
	ТаблицаТоваров = ТаблицаТоваровПоДаннымXDTO(ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ДатаСреза));
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.УстановитьПараметр("ВидАлкогольнойПродукцииПрочие", 
		бг_КонстантыПовтИсп.ОписаниеКонстанты("ВидАлкогольнойПродукцииПрочие"));
	
	ПодготовитьВременнуюТаблицуВидовЦен(Запрос);
	ПодготовитьВременнуюТаблицуМРЦ(Запрос);
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		ПодготовитьВременнуюТаблицуКатегорийНМК(Запрос);
		ПодготовитьВременнуюТаблицуКатегорийСКЮ(Запрос);
		ПодготовитьВременнуюТаблицуТоваровДляРасчетаЦенСОтборомПоНастройке(Запрос);
	Иначе
		ПодготовитьВременнуюТаблицуТоваровДляРасчетаЦенСОтборомПоТаблице(Запрос);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаЦен();
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = Нстр("ru='Не удалось получить актуальные цены номенклатуры'");
		
		ЗаписьЖурналаРегистрации(
			"Выгрузка цен номенклатуры в Creatio",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ТекстОшибки);
			
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		
		Возврат Результат;
	КонецЕсли;
	
	ТипTGetAllPricesTablePriceType = ФабрикаXDTO.Тип(ПространствоИмен, "TGetAllPricesTablePriceType");
	ТипTGetAllPricesPriceType = ФабрикаXDTO.Тип(ПространствоИмен, "TGetAllPricesPriceType");
	ТипTGetAllPricesTableProduct = ФабрикаXDTO.Тип(ПространствоИмен, "TGetAllPricesTableProduct");
	ТипTGetAllPricesProduct = ФабрикаXDTO.Тип(ПространствоИмен, "TGetAllPricesProduct");
	
	TablePriceType = ФабрикаXDTO.Создать(ТипTGetAllPricesTablePriceType);
	
	ВыборкаВидовЦен = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидовЦен.Следующий() Цикл
		
		PriceType = ФабрикаXDTO.Создать(ТипTGetAllPricesPriceType);
		
		PriceType.PriceTypeID = ЗначениеСУчетомВременногоИдентификатора(ВыборкаВидовЦен.ВидЦены);
		PriceType.Name = ВыборкаВидовЦен.ВидЦеныНаименование;
		PriceType.CurrencyID = ЗначениеСУчетомВременногоИдентификатора(ВыборкаВидовЦен.Валюта);
		
		TableProduct = ФабрикаXDTO.Создать(ТипTGetAllPricesTableProduct);
		
		ВыборкаНоменклатуры = ВыборкаВидовЦен.Выбрать();
		
		Пока ВыборкаНоменклатуры.Следующий() Цикл
			
			Product = ФабрикаXDTO.Создать(ТипTGetAllPricesProduct);
			
			Product.ProductID = ВыборкаНоменклатуры.Код;
			Product.TypeSKU = ВыборкаНоменклатуры.ЭтоСКЮ;
			Product.Price = ВыборкаНоменклатуры.Цена;
			Product.MinimumPriceRAR = ВыборкаНоменклатуры.ЦенаМРЦ;
			
			TableProduct.Product.Добавить(Product);
			
		КонецЦикла;
		
		PriceType.TableProduct = TableProduct;
		
		TablePriceType.PriceType.Добавить(PriceType);
		
	КонецЦикла;
	
	Результат.TablePriceType = TablePriceType;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу номенклатуры с актуальными остатками на дату запроса
// Параметры:
//  XDTO-объект по схеме "_GetTotalSKUBalance"
// Тип возвращаемого значения
//  XDTO-объект по схеме "_GetTotalSKUBalance"
Функция ОстаткиТоваров(ДанныеXDTO) Экспорт
	
	Возврат ОстаткиТоваров_УПП(ДанныеXDTO);
	
КонецФункции

// Функция получает дебиторскую задолженность 
// Входной параметр - XDO-объект, созданый по схеме
Функция ДебиторскаяЗадолженность(ДанныеXDTO) Экспорт
	
	Возврат ДебиторскаяЗадолженность_УПП(ДанныеXDTO);
	
КонецФункции

#КонецОбласти // ОбновлениеДанныхВCreatio

#Область УПП

// Обновляет данные дебиторской задолженности клиента
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetDebt"
//
Функция СоздатьЗаказ_УПП(ДанныеXDTO)Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.CreateOrder(ДанныеXDTO);
	
КонецФункции

// Обновляет данные дебиторской задолженности клиента
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetDebt"
//
Функция СоздатьОбновитьЗаказыВCreatio_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.CreateUpdateOrderInCRM(ДанныеXDTO);
	
КонецФункции

// Обновляет данные дебиторской задолженности клиента
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetDebt"
//
Функция ДебиторскаяЗадолженность_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.GetDebt(ДанныеXDTO);
	
КонецФункции

// Обновляет данные по остаткам товаров
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetTotalSKUBalance"
//
Функция ОстаткиТоваров_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.GetTotalSKUBalance(ДанныеXDTO);
	
КонецФункции

// Обновляет данные по ценам товаров
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetAllPrices"
//
Функция ЦеныТоваров_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.GetAllPrices(ДанныеXDTO);
	
КонецФункции

// Обновляет данные дебиторской задолженности клиента
// в Creatio по давнным УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetDebt"
//
Функция ОбновитьСтатусОбмена_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.UpdateExchangeResults(ДанныеXDTO);
	
КонецФункции

// Обновляет данные по остаткам товаров
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetTotalSKUBalance"
//
Функция ЦеныТоваровПоЗаказу_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.GetOrderPrices(ДанныеXDTO);
	
КонецФункции

// Обновляет данные по ценам товаров
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_GetAllPrices"
//
Функция ОстаткиТоваровПоЗаказу_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.GetOrderSKUBalance(ДанныеXDTO);
	
КонецФункции

// Обновляет данные по группам контрагентов
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_CreateUpdateClientGroupInCRM"
//
Функция СоздатьОбновитьГруппыКлиентовВCreatio_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.CreateUpdateClientGroupInCRM(ДанныеXDTO);
	
КонецФункции

// Обновляет данные классификатора ОКОПФ
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_CreateUpdateOKOPFInCRM"
//
Функция СоздатьОбновитьОКОПФВCreatio_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.CreateUpdateOKOPFInCRM(ДанныеXDTO);
	
КонецФункции

// Обновляет данные по складам
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_CreateUpdateStorageInCRM"
//
Функция СоздатьОбновитьСкладыВCreatio_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.CreateUpdateStorageInCRM(ДанныеXDTO);
	
КонецФункции

// Обновляет данные справочника Банки
// в Creatio по данным 1С УПП
// Параметры:
//  XDTO объект, созданый по схеме "_UpdateBanksInCRM"
//
Функция ОбновитьБанкиВCreatio_УПП(ДанныеXDTO) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	всПрокси = ПодключитьWSDL();
	Возврат всПрокси.UpdateBanksInCRM(ДанныеXDTO);
	
КонецФункции

#КонецОбласти // УПП

#КонецОбласти // ОбработчикиWebСервиса

#Область РегистрацияДанныхДляОбмена

// Регистрирует объект 1С для обмена с Creatio
//Регистрируемы типы объектов:
//  Справочник.Контрагенты,
//  Справочник.БанковскиеСчета,
//  Справочник.ДоговорыКонтрагентов,
//  Справочник.ЛицензииПоставщиковАлкогольнойПродукции,
//  Справочник.битПунктыНазначения,
//  ДокументОбъект.ЗаказКлиента
//
// Параметры:
//  Источник - СправочникОбъект, ДокументОбъект
//  Отказ - Булево
//
Процедура РегистрацияОбъектаДляОбменаСCreatioПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЗагрузкаИзCreatio = Источник.ДополнительныеСвойства.Свойство("ЗагрузкаИзCreatio") 
							И Источник.ДополнительныеСвойства.ЗагрузкаИзCreatio;
							
	Если ЭтоЗагрузкаИзCreatio Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполненыУсловияРегистрацииПоКонстантам(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = СсылкаНаОбъектИсточник(Источник);
	
	РегистрацияИзменений = РегистрыСведений.бг_creatio_РегистрацияИзменений;
	Если РегистрацияИзменений.ОбъектЗарегистрирован(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбъектЗагруженИзCreatio(СсылкаНаОбъект) Тогда
		РегистрироватьИзменения = Истина;
	Иначе
		РегистрироватьИзменения = ТребуетсяРегистрацияОбъекта(СсылкаНаОбъект);
	КонецЕсли;
	
	Если РегистрироватьИзменения Тогда
		РегистрацияИзменений.ЗарегистрироватьИзменениеОбъекта(СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // РегистрацияДанныхДляОбмена

#Область Прочее

// Выполняет запись в журнал регистрации с имененем метода
//
// Параметры:
//  ИмяМетода - Строка
//
Процедура ЗарегистрироватьВызовМетода(ИмяМетода) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Вызов метода web-сервиса Creatio'"), 
		УровеньЖурналаРегистрации.Информация, 
		, 
		, 
		ИмяМетода);
	
КонецПроцедуры

#КонецОбласти // Прочее

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область Клиенты

Функция СоздатьПартнера(ДанныеXDTO, ЭтоЧастноеЛицо, ГруппаПартнера)
	
	ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	
	ПартнерОбъект.Наименование = ДанныеXDTO.Name;
	ПартнерОбъект.НаименованиеПолное = ДанныеXDTO.FullName;
	ПартнерОбъект.ДатаРегистрации = ТекущаяДата();
	ПартнерОбъект.Клиент = Истина;
	
	ПартнерОбъект.БизнесРегион = ЗначениеПоИдентификатору(
									ДанныеXDTO.RegionID, 
									"Справочник.БизнесРегионы");
									
	ПартнерОбъект.ОсновнойМенеджер = ЗначениеПоИдентификатору(
										ДанныеXDTO.ResponsibleID,
										"Справочник.Пользователи");
	
	Если ЭтоЧастноеЛицо Тогда
		ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе
		ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПартнерОбъект.ОсновнойМенеджер) Тогда
		ПартнерОбъект.ГруппаДоступа = ГруппаДоступаПартнера(ПартнерОбъект.ОсновнойМенеджер);
	КонецЕсли;
	
	ПартнерОбъект.бг_ГруппаПартнера = ГруппаПартнера;
	
	ПартнерОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	ПартнерОбъект.Записать();
	
	Возврат ПартнерОбъект.Ссылка;
	
КонецФункции

Функция СоздатьКонтрагента(ДанныеXDTO, ЭтоЧастноеЛицо, Партнер)
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	
	КонтрагентОбъект.Наименование = ДанныеXDTO.Name;
	КонтрагентОбъект.НаименованиеПолное = ДанныеXDTO.FullName;
	КонтрагентОбъект.КодПоОКПО = ДанныеXDTO.OKPO;
	КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонтрагентОбъект.Партнер = Партнер;
	
	Если ЭтоЧастноеЛицо Тогда
		
		КонтрагентОбъект.ИНН = "";
		КонтрагентОбъект.КПП = "";
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонтрагентОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонтрагентОбъект.бг_РозничныйПокупатель = Истина;
		
	Иначе
		
		КонтрагентОбъект.ИНН = ДанныеXDTO.INN;
		КонтрагентОбъект.КПП = ДанныеXDTO.KPP;
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонтрагентОбъект.ЮрФизЛицо = ?(СтрДлина(ДанныеXDTO.INN) = 12, 
										Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель, 
										Перечисления.ЮрФизЛицо.ЮрЛицо);
										
	КонецЕсли;
	
	ЗаписатьКонтактныеДанныеКонтрагента(ДанныеXDTO, КонтрагентОбъект);
	
	КонтрагентОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	КонтрагентОбъект.Записать();
	
	РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(КонтрагентОбъект.Ссылка, ДанныеXDTO.IDCRM);
	
	Возврат КонтрагентОбъект.Ссылка;
	
КонецФункции

Процедура ЗаписатьКонтактныеДанныеКонтрагента(ДанныеXDTO, КонтрагентОбъект)
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант("ВидКИПочтаДляСверкиВРублях, ВидКИПочтаДляСверкиВДалах");
	
	ВидКИПочтаДляОтправкиСверокВРублях = ЗначенияКонстант.ВидКИПочтаДляСверкиВРублях;
	ВидКИПочтаДляОтправкиСверокВДаллах = ЗначенияКонстант.ВидКИПочтаДляСверкиВДалах;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.EMailReviseInRubles) Тогда
		
		ПочтаXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					ДанныеXDTO.EMailReviseInRubles, 
					ДанныеXDTO.EMailReviseInRubles, 
					Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		ПочтаJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ПочтаXML);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			КонтрагентОбъект, 
			ПочтаJSON, 
			ВидКИПочтаДляОтправкиСверокВРублях, 
			Дата(1,1,1), 
			Истина);
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.EMailReviseInDalls) Тогда
		
		ПочтаXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
					ДанныеXDTO.EMailReviseInDalls, 
					ДанныеXDTO.EMailReviseInDalls, 
					Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		
		ПочтаJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ПочтаXML);
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			КонтрагентОбъект, 
			ПочтаJSON, 
			ВидКИПочтаДляОтправкиСверокВДаллах, 
			Дата(1,1,1), 
			Истина);
			
	КонецЕсли;
	
	Если ДанныеXDTO.Свойства().Получить("TableAddress") <> Неопределено Тогда
		
		ТаблицаXDTO = ДанныеXDTO.TableAddress.Address; 
		
		Если ТаблицаXDTO.Количество() > 0 Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл
				
				ВидКИ = ЗначениеПоИдентификатору(
							СтрокаТаблицы.TypeID,
							"Справочник.ВидыКонтактнойИнформации");
							
				Если Не ЗначениеЗаполнено(ВидКИ) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписатьАдресКонтрагента(
					СтрокаТаблицы, 
					КонтрагентОбъект, 
					ВидКИ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьАдресКонтрагента(ДанныеXDTO, КонтрагентОбъект, ВидКИ)
	
	ЗначенияПолей = ЗначенияПолейАдресаПоДаннымXDTO(ДанныеXDTO);
	
	ДанныеЗаполнения = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	СтрокаЗаполнения = ДанныеЗаполнения.Добавить();
	
	СтрокаЗаполнения.Вид = ВидКИ;
	СтрокаЗаполнения.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	СтрокаЗаполнения.ЗначенияПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(
										УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ЗначенияПолей, ВидКИ), 
										Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	СтрокаЗаполнения.Представление = ЗначенияПолей.Представление;
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(КонтрагентОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Функция КонтрагентЕстьВБазе(ИНН, КПП)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И &УсловиеПоискаПоКПП";
	
	Если ЗначениеЗаполнено(КПП) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоискаПоКПП", "Контрагенты.КПП = &КПП");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоискаПоКПП", "ИСТИНА");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция КлиентЧастноеЛицо(ИНН)
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаИНН = бг_КонстантыПовтИсп.ЗначениеКонстанты("СписокИННОрганизацийДляИдентификацииЧастныхКлиентов");
	
	Возврат Не СтрНайти(СтрокаИНН, ИНН) = 0;
	
КонецФункции

Функция ГруппаДоступаПартнера(ОсновнойМенеджер)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ОсновнойМенеджер);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Ссылка КАК Ссылка,
	|	ГруппыДоступаПользователи.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ГруппыПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Пользователь = &Пользователь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа КАК ЗначениеДоступа
	|ИЗ
	|	ГруппыПользователя КАК ГруппыПользователя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО (ГруппыПользователя.Ссылка = ГруппыДоступаЗначенияДоступа.Ссылка)
	|ГДЕ
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа ССЫЛКА Справочник.ГруппыДоступаПартнеров";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеДоступа;
	Иначе
		Возврат Справочники.ГруппыДоступаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти // Клиенты

#Область Договоры

функция СоздатьДоговоры(ДанныеXDTO, Контрагент, Партнер, Соглашения)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	ДоговорыXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TCreatePartnerTableContract"));
	
	ТаблицаXDTO = ДанныеXDTO.TableContract.Contract;
	
	Если ТаблицаXDTO.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл
			
			ДоговорXDTO = ФабрикаXDTO.Создать(
							ФабрикаXDTO.Тип(
								ПространствоИмен, 
								"TCreatePartnerContract"));
			
			Договор = СоздатьДоговор(
						СтрокаТаблицы, 
						Контрагент, 
						Партнер);
			
			ДоговорXDTO.IDCRM = СтрокаТаблицы.IDCRM;
			ДоговорXDTO.ContractID = ЗначениеСУчетомВременногоИдентификатора(Договор);
			ДоговорыXDTO.Contract.Добавить(ДоговорXDTO);
			
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Договор, 
								"Организация, бг_Соглашение");
			
			Соглашения.Вставить(РеквизитыДоговора.Организация, РеквизитыДоговора.бг_Соглашение);
			
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				Договор,
				СтрокаТаблицы.IDCRM);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДоговорыXDTO;
	
КонецФункции

Функция СоздатьДоговор(ДанныеXDTO, Контрагент, Партнер)
	
	ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	ДоговорОбъект.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
	ДоговорОбъект.Наименование = ДанныеXDTO.Name;
	ДоговорОбъект.Номер = ДанныеXDTO.Number;
	ДоговорОбъект.Дата = ДанныеXDTO.Date;
	ДоговорОбъект.ДатаНачалаДействия = ДанныеXDTO.Date;
	ДоговорОбъект.ДатаОкончанияДействия = ДанныеXDTO.ExpirationDate;
	ДоговорОбъект.Контрагент = Контрагент;
	ДоговорОбъект.Партнер = Партнер;
	ДоговорОбъект.Организация = ЗначениеПоИдентификатору(ДанныеXDTO.OrganizationID);
	ДоговорОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ДоговорОбъект.ТипДоговора = ЗначениеПоИдентификатору(ДанныеXDTO.TypeID);
	ДоговорОбъект.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении;
	ДоговорОбъект.НалогообложениеНДСОпределяетсяВДокументе = Истина;
	ДоговорОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	ДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаУправленческогоУчета.Получить();
	ДоговорОбъект.ОплатаВВалюте = Ложь;
	ДоговорОбъект.Комментарий = НСтр("ru='Создано автоматически при обмене с Creatio'");
	ДоговорОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	
	Соглашение = СоздатьСоглашение(ДоговорОбъект, ДанныеXDTO.PriceTypeID);
	ДоговорОбъект.бг_Соглашение = Соглашение;
	
	ДоговорОбъект.Записать();
	
	Возврат ДоговорОбъект.Ссылка;
	
КонецФункции

Функция СоздатьСоглашение(ДоговорОбъект, ИДВидаЦены)
	
	СоглашениеОбъект = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
	
	СоглашениеОбъект.Наименование = ДоговорОбъект.Наименование;
	СоглашениеОбъект.Дата = ДоговорОбъект.Дата; 
	СоглашениеОбъект.ДатаНачалаДействия = ДоговорОбъект.ДатаНачалаДействия;
	СоглашениеОбъект.ДатаОкончанияДействия = ДоговорОбъект.ДатаОкончанияДействия;
	СоглашениеОбъект.Номер = ДоговорОбъект.Номер;
	СоглашениеОбъект.ПорядокРасчетов = ДоговорОбъект.ПорядокРасчетов;
	СоглашениеОбъект.ВидЦен = ЗначениеПоИдентификатору(ИДВидаЦены);
	СоглашениеОбъект.Контрагент = ДоговорОбъект.Контрагент;
	СоглашениеОбъект.Партнер = ДоговорОбъект.Партнер;
	СоглашениеОбъект.Организация = ДоговорОбъект.Организация;
	СоглашениеОбъект.Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорОбъект.Партнер, "ОсновнойМенеджер");
	СоглашениеОбъект.Валюта = ДоговорОбъект.ВалютаВзаиморасчетов;
	СоглашениеОбъект.ВалютаВзаиморасчетов = ДоговорОбъект.ВалютаВзаиморасчетов;
	СоглашениеОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	СоглашениеОбъект.Типовое = Ложь;
	СоглашениеОбъект.Согласован = Истина;
	СоглашениеОбъект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
	СоглашениеОбъект.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке;
	СоглашениеОбъект.ВидСоглашенияДляОграниченияЧтения = Перечисления.ВидыСоглашенийСКлиентамиДляОграниченияЧтения.Индивидуальные;
	СоглашениеОбъект.ВидСоглашенияДляОграниченияИзменения = Перечисления.ВидыСоглашенийСКлиентамиДляОграниченияИзменения.Индивидуальные;
	СоглашениеОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	СоглашениеОбъект.ИспользуютсяДоговорыКонтрагентов = Истина;
	СоглашениеОбъект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	
	СоглашениеОбъект.ЦенаВключаетНДС = ?(ЗначениеЗаполнено(СоглашениеОбъект.ВидЦен), 
											ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
												СоглашениеОбъект.ВидЦен, 
												"ЦенаВключаетНДС"),
											Ложь);
										
	СоглашениеОбъект.Комментарий = НСтр("ru='Создано автоматически при обмене с Creatio'");
	
	СоглашениеОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	СоглашениеОбъект.ДополнительныеСвойства.Вставить("адаптер_ВыгружатьБезусловно", Истина);
	СоглашениеОбъект.Записать();
	
	Возврат СоглашениеОбъект.Ссылка;
	
КонецФункции

#КонецОбласти // Договоры

#Область Скидки

Функция СоздатьКоммерческиеУсловия(ДанныеXDTO, Соглашения)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	КоммерческиеУсловияXDTO = ФабрикаXDTO.Создать(
								ФабрикаXDTO.Тип(
								ПространствоИмен, 
								"TCreatePartnerTableCommercialTerms"));
								
	ТаблицаXDTO = ДанныеXDTO.TableCommercialTerms.CommercialTerms;
	
	Если ТаблицаXDTO.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл
			
			КоммерческоеУсловиеXDTO = ФабрикаXDTO.Создать(
										ФабрикаXDTO.Тип(
										ПространствоИмен, 
										"TCreatePartnerCommercialTerms"));
			
			Организация = ЗначениеПоИдентификатору(
							СтрокаТаблицы.OrganizationID,
							"Справочник.Организации");
			
			КоммерческоеУсловиеXDTO.IDCRM = СтрокаТаблицы.IDCRM;
			
			Соглашение = Соглашения.Получить(Организация);
			
			Если ЗначениеЗаполнено(Соглашение) Тогда
				
				СкидкиXDTO = СоздатьУстановитьСкидкиПоСоглашению(
								СтрокаТаблицы.TableGroup.Group,
								Соглашение, 
								СтрокаТаблицы.ValidFrom, 
								СтрокаТаблицы.ValidTo);
							
				Если СкидкиXDTO.Group.Количество() > 0 Тогда
					КоммерческоеУсловиеXDTO.TableGroup = СкидкиXDTO;
					КоммерческиеУсловияXDTO.CommercialTerms.Добавить(КоммерческоеУсловиеXDTO);
				КонецЕсли;
				
				СоглашениеОбъект = Соглашение.ПолучитьОбъект();
				СоглашениеОбъект.ДополнительныеСвойства.Вставить("адаптер_ВыгружатьБезусловно", Истина);
				СоглашениеОбъект.Записать();
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоммерческиеУсловияXDTO;
	
КонецФункции

Функция СоздатьУстановитьСкидкиПоСоглашению(ТаблицаXDTO, Соглашение, ДатаНачалаДействия, ДатаОкончанияДействия)
	
	ПространствоИмен = "http://BPMonline/sin/response"; 
	
	СкидкиXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TCreatePartnerTableGroup"));
	
	ТаблицаСкидокЧКН = ПодготовитьТаблицуСкидокКлиентовЧКН();
	
	СкидкиДляУстановки = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл
		
		СкидкаXDTO = ФабрикаXDTO.Создать(
						ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TCreatePartnerGroup"));
						
		Если СтрокаТаблицы.Discount = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Скидка = Неопределено;
		
		СтрокаСкидки = ТаблицаСкидокЧКН.Найти(СтрокаТаблицы.GroupID, "ОбъектCreatio");
		Если СтрокаСкидки <> Неопределено Тогда
			ШаблонСкидки = СтрокаСкидки.Скидка;
		Иначе
			Продолжить;
		КонеЦесли;
		
		Скидка = НайтиСкидкуПоШаблону(ШаблонСкидки, СтрокаТаблицы.Discount);
		
		Если Скидка = Неопределено Тогда
			
			СкидкаОбъект = Справочники.СкидкиНаценки.СоздатьЭлемент();
			
			ЗаполнитьЗначенияСвойств(
				СкидкаОбъект, 
				ШаблонСкидки,
				, 
				"Владелец, ВариантСовместногоПрименения, 
				|ВариантРасчетаРезультатаСовместногоПрименения");
				
			СкидкаОбъект.ЗначениеСкидкиНаценки = СтрокаТаблицы.Discount;
			СкидкаОбъект.Наименование = СтрЗаменить(СкидкаОбъект.Наименование, " (Исходник)", "") + " " + СкидкаОбъект.ЗначениеСкидкиНаценки + "%";
			СкидкаОбъект.бг_ШаблонСкидкиЧКН = ШаблонСкидки;
			СкидкаОбъект.бг_ТипСкидкиНаценкиCRM = бг_КонстантыПовтИсп.ЗначениеКонстанты("ТипСкидкиCreatio");
			СкидкаОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
			
			СкидкаОбъект.Записать(); 
			
			Скидка = СкидкаОбъект.Ссылка;
			
		КонецЕсли;
		
		СкидкаXDTO.GroupID = СтрокаТаблицы.GroupID;
		СкидкаXDTO.DocumentID = ЗначениеСУчетомВременногоИдентификатора(Соглашение);
		СкидкиXDTO.Group.Добавить(СкидкаXDTO);
		
		СкидкиДляУстановки.Добавить(Скидка);
		
	КонецЦикла;
	
	ДействующиеСкидки = ОбработатьДействующиеСкидки(
							Соглашение, 
							СкидкиДляУстановки, 
							ДатаНачалаДействия, 
							ДатаОкончанияДействия);
		
	УстановитьДействиеСкидок(
		Соглашение, 
		СкидкиДляУстановки, 
		ДатаНачалаДействия, 
		ДатаОкончанияДействия,
		ДействующиеСкидки);
		
	Возврат СкидкиXDTO;
	
КонецФункции

Функция ОбработатьДействующиеСкидки(Соглашение, Скидки, ДатаНачалаДействия, ДатаОкончанияДействия)
	
	ДействующиеСкидки = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("ГруппаСкидокЧКН", бг_КонстантыПовтИсп.ЗначениеКонстанты("ГруппаСкидокЧКН"));
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК Скидка,
	|	ДействиеСкидокНаценокСрезПоследних.Период КАК ДатаНачалаДействия
	|ПОМЕСТИТЬ втНачалоДействия
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(&Период, Источник = &Соглашение) КАК ДействиеСкидокНаценокСрезПоследних
	|ГДЕ
	|	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
	|	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка В ИЕРАРХИИ(&ГруппаСкидокЧКН)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Скидка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействиеСкидокНаценокСрезПоследних.Период КАК ДатаОкончанияДействия,
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК Скидка
	|ПОМЕСТИТЬ втОкончаниеДействия
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(, Источник = &Соглашение) КАК ДействиеСкидокНаценокСрезПоследних
	|ГДЕ
	|	ДействиеСкидокНаценокСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
	|	И ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка В ИЕРАРХИИ(&ГруппаСкидокЧКН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачалоДействия.Скидка КАК Скидка,
	|	втНачалоДействия.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ЕСТЬNULL(втОкончаниеДействия.ДатаОкончанияДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияДействия
	|ИЗ
	|	втНачалоДействия КАК втНачалоДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОкончаниеДействия КАК втОкончаниеДействия
	|		ПО втНачалоДействия.Скидка = втОкончаниеДействия.Скидка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ДействующиеСкидки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДействующаяСкидка = Скидки.Найти(Выборка.Скидка);
		
		Если ДействующаяСкидка = Неопределено Тогда // Действующей скидки нет во входящих данных
			
			УстановитьОтменуДействияСкидки(
				Соглашение, 
				Выборка.Скидка, 
				НачалоДня(ТекущаяДатаСеанса()));
				
			Продолжить;
			
		КонецЕсли;
			
		Если НачалоДня(Выборка.ДатаНачалаДействия) <> НачалоДня(ДатаНачалаДействия)
			Или НачалоДня(Выборка.ДатаОкончанияДействия) <> НачалоДня(ДатаОкончанияДействия) Тогда // Изменился период действия скидки
			ОтменитьСкидку(Соглашение, Выборка.Скидка);
		КонецЕсли;
		
		УстановитьДействиеСкидки(
			Соглашение, 
			Выборка.Скидка, 
			НачалоДня(ДатаНачалаДействия));
			
		УстановитьОтменуДействияСкидки(
			Соглашение, 
			Выборка.Скидка, 
			КонецДня(ДатаОкончанияДействия) + 1);
		
		ДействующиеСкидки.Добавить(Выборка.Скидка);
		
	КонецЦикла;
	
	Возврат ДействующиеСкидки;
	
КонецФункции

Процедура УстановитьДействиеСкидок(Соглашение, Скидки, ДатаНачалаДействия, ДатаОкончанияДействия, ДействующиеСкидки)
	
	Для Каждого Скидка из Скидки Цикл
		
		Если ДействующиеСкидки.Найти(Скидка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьДействиеСкидки(
			Соглашение, 
			Скидка, 
			ДатаНачалаДействия);
			
		УстановитьОтменуДействияСкидки(
			Соглашение, 
			Скидка, 
			КонецДня(ДатаОкончанияДействия) + 1);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДействиеСкидки(Источник, Скидка, ДатаНачалаДействия)
	
	МенеджерЗаписи = РегистрыСведений.ДействиеСкидокНаценок.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Источник = Источник;
	МенеджерЗаписи.Период = ДатаНачалаДействия;
	МенеджерЗаписи.СкидкаНаценка = Скидка;
	МенеджерЗаписи.Статус = Перечисления.СтатусыДействияСкидок.Действует;
	МенеджерЗаписи.Комментарий = НСтр("ru='Создано автоматически при обмене с Creatio'");
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура УстановитьОтменуДействияСкидки(Источник, Скидка, ДатаОкончанияДействия)
	
	// Удаляем все старные записи по скидке
	НаборЗаписей = РегистрыСведений.ДействиеСкидокНаценок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Источник);
	НаборЗаписей.Отбор.СкидкаНаценка.Установить(Скидка);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Статус = Перечисления.СтатусыДействияСкидок.НеДействует Тогда
				НаборЗаписей.Удалить(Запись);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	НаборЗаписей.Записать();
	
	// Делаем новую запись
	МенеджерЗаписи = РегистрыСведений.ДействиеСкидокНаценок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Источник = Источник;
	МенеджерЗаписи.Период = ДатаОкончанияДействия;
	МенеджерЗаписи.СкидкаНаценка = Скидка;
	МенеджерЗаписи.Статус = Перечисления.СтатусыДействияСкидок.НеДействует;
	МенеджерЗаписи.Комментарий = НСтр("ru='Создано автоматически при обмене с Creatio'");
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ОтменитьСкидку(Источник, Скидка)
	
	НаборЗаписей = РегистрыСведений.ДействиеСкидокНаценок.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Источник.Установить(Источник);
	НаборЗаписей.Отбор.СкидкаНаценка.Установить(Скидка);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПодготовитьТаблицуСкидокКлиентовЧКН()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", бг_КонстантыПовтИсп.ЗначениеКонстанты("ГруппаСкидокЧКН"));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК Скидка,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки КАК ПроцентСкидки,
	|	бг_creatio_СоответствиеОбъектов.ОбъектCreatio КАК ОбъектCreatio
	|ИЗ
	|	РегистрСведений.бг_creatio_СоответствиеОбъектов КАК бг_creatio_СоответствиеОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК СкидкиНаценки
	|		ПО (бг_creatio_СоответствиеОбъектов.ОбъектERP = СкидкиНаценки.Ссылка)
	|ГДЕ
	|	СкидкиНаценки.ПометкаУдаления = ЛОЖЬ
	|	И СкидкиНаценки.Родитель = &Родитель";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НайтиСкидкуПоШаблону(ШаболонСкидки, ПроцентСкидки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаболонСкидки", ШаболонСкидки);
	Запрос.УстановитьПараметр("ПроцентСкидки", ПроцентСкидки);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкидкиНаценки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.бг_ШаблонСкидкиЧКН = &ШаболонСкидки
	|	И СкидкиНаценки.ЗначениеСкидкиНаценки = &ПроцентСкидки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонеЦесли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти // Скидки

#Область БанковскиеСчета

Функция СоздатьБанковскиеСчета(ДанныеXDTO, Контрагент)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	БанковскиеСчетаXDTO = ФабрикаXDTO.Создать(
							ФабрикаXDTO.Тип(
							ПространствоИмен, 
							"TCreatePartnerTableBankAccount"));
	
	ТаблицаXDTO = ДанныеXDTO.TableBankAccount.BankAccount;
		
	Если ТаблицаXDTO.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл
			
			БанксковскийСчетXDTO = ФабрикаXDTO.Создать(
									ФабрикаXDTO.Тип(
										ПространствоИмен, 
										"TCreatePartnerBankAccount"));
			
			БанковскийСчет = СоздатьБанковскийСчет(СтрокаТаблицы, Контрагент);
			
			БанксковскийСчетXDTO.IDCRM = СтрокаТаблицы.IDCRM;
			БанксковскийСчетXDTO.BankAccountID = ЗначениеСУчетомВременногоИдентификатора(БанковскийСчет);
			
			БанковскиеСчетаXDTO.BankAccount.Добавить(БанксковскийСчетXDTO);
			
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				БанковскийСчет, 
				СтрокаТаблицы.IDCRM);
				
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат БанковскиеСчетаXDTO;
	
КонецФункции

Функция СоздатьБанковскийСчет(ДанныеXDTO, Контрагент)
	
	БанковскийСчетОбъект = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
	БанковскийСчетОбъект.Владелец = Контрагент;
	
	БанковскийСчетОбъект.Банк = ЗначениеПоИдентификатору(
									ДанныеXDTO.BankID,
									"Справочник.КлассификаторБанков");
									
	БанковскийСчетОбъект.НомерСчета = СокрЛП(СтрЗаменить(ДанныеXDTO.Number, ".", ""));
	БанковскийСчетОбъект.ВалютаДенежныхСредств = ВалютаПоНомеруСчета(БанковскийСчетОбъект.НомерСчета);
	
	БанковскийСчетОбъект.Наименование = НаименованиеБанковскогоСчета(
											БанковскийСчетОбъект.НомерСчета, 
											БанковскийСчетОбъект.Банк, 
											БанковскийСчетОбъект.ВалютаДенежныхСредств);
	
	БанковскийСчетОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	
	БанковскийСчетОбъект.Записать();
	
	Возврат БанковскийСчетОбъект.Ссылка;
	
КонецФункции

Функция ВалютаПоНомеруСчета(НомерСчета)
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	
	Валюта = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	
	Если Валюта.Пустая() Тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

Функция НаименованиеБанковскогоСчета(НомерСчета, Банк, Валюта)
	
	СтрокаНаименования = Прав(СокрЛП(НомерСчета), 4) + 
								?(ЗначениеЗаполнено(Банк), " в " + Строка(Банк), "") + 
								" (" + Строка(Валюта) + ")";
		
	СтрокаНаименования = Лев(СтрокаНаименования, 150);
	
	Возврат СтрокаНаименования;
	
КонецФункции

#КонецОбласти // БанковскиеСчета

#Область Лицензии

функция СоздатьЛицензии(ДанныеXDTO, Контрагент)
	
	ПространствоИмен = "http://BPMonline/sin/response"; 
	
	ЛицензииXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TCreatePartnerTableLicense"));
	
	ТаблицаXDTO = ДанныеXDTO.TableLicense.License;
	
	Если ТаблицаXDTO.Количество() > 0 Тогда
		
		РеквизитыЛицензии = Новый Массив;
		РеквизитыЛицензии.Добавить("Наименование");
		РеквизитыЛицензии.Добавить("бг_ДатаВыдачи");
		РеквизитыЛицензии.Добавить("ДатаНачала");
		РеквизитыЛицензии.Добавить("ДатаОкончания");
		РеквизитыЛицензии.Добавить("бг_ДатаПрекращенияДействия");
		РеквизитыЛицензии.Добавить("бг_ТипЛицензии");
		
		ФиксированныеРеквизиты = Новый ФиксированныйМассив(РеквизитыЛицензии);
		
		Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл
			
			Лицензия = СоздатьЛицензию(СтрокаТаблицы, Контрагент);
			
			ДанныеЛицензии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Лицензия, ФиксированныеРеквизиты);
			
			ЛицензияXDTO = ФабрикаXDTO.Создать(
							ФабрикаXDTO.Тип(
								ПространствоИмен, 
								"TCreatePartnerLicense"));
								
			ЛицензияXDTO.IDCRM = СтрокаТаблицы.IDCRM;
			ЛицензияXDTO.LicenseID = ЗначениеСУчетомВременногоИдентификатора(Лицензия);
			ЛицензияXDTO.Name = ДанныеЛицензии.Наименование;
			ЛицензияXDTO.DateIssue = ДанныеЛицензии.бг_ДатаВыдачи;
			ЛицензияXDTO.ValidFrom = ДанныеЛицензии.ДатаНачала;
			ЛицензияXDTO.ValidTo = ДанныеЛицензии.ДатаОкончания;
			ЛицензияXDTO.ExpirationDate = ДанныеЛицензии.бг_ДатаПрекращенияДействия;
			ЛицензияXDTO.TypeID = ЗначениеСУчетомВременногоИдентификатора(ДанныеЛицензии.бг_ТипЛицензии);
			ЛицензияXDTO.RegionID = "";
			ЛицензияXDTO.UntilByID = "";
			
			ЛицензииXDTO.License.Добавить(ЛицензияXDTO);
			
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				Лицензия,
				СтрокаТаблицы.IDCRM);
				
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЛицензииXDTO;
	
КонецФункции

Функция СоздатьЛицензию(ДанныеXDTO, Контрагент)
	
	ЛицензияОбъект = Справочники.ЛицензииПоставщиковАлкогольнойПродукции.СоздатьЭлемент();
	
	ЛицензияОбъект.Владелец = Контрагент;
	ЛицензияОбъект.Наименование = ДанныеXDTO.Name;
	ЛицензияОбъект.бг_ДатаВыдачи = ДанныеXDTO.DateIssue;
	ЛицензияОбъект.ДатаНачала = ДанныеXDTO.ValidFrom;
	ЛицензияОбъект.бг_ДатаПрекращенияДействия = ДанныеXDTO.ExpirationDate;
	ЛицензияОбъект.ДатаОкончания = ДанныеXDTO.ValidTo;
	ЛицензияОбъект.бг_НомерРАР = ДанныеXDTO.NumberRAR;
	ЛицензияОбъект.КемВыдана = ДанныеXDTO.IssuingAuthority;
	
	ЛицензияОбъект.бг_ТипЛицензии = ЗначениеПоИдентификатору(ДанныеXDTO.TypeID);
	
	ЛицензияОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	ЛицензияОбъект.Записать();
	
	Возврат ЛицензияОбъект.Ссылка;
	
КонецФункции

Процедура ПроверитьУстановитьДействиеЛицензииВПунктеНазначения(ПунктНазначения, Лицензия)
	
	ЛицензияОбъект = Лицензия.ПолучитьОбъект();
	
	Контрагент = ЛицензияОбъект.Владелец;
	
	тчПунктыНазначения = ЛицензияОбъект.бг_ПунктыНазначения;
	
	НайденныеСтроки = тчПунктыНазначения.НайтиСтроки(Новый Структура("ПунктНазначения", ПунктНазначения));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаТЧ = ЛицензияОбъект.бг_ПунктыНазначения.Добавить();
		СтрокаТЧ.ПунктНазначения = ПунктНазначения;
		СтрокаТЧ.ВладелецПунктаНазначения = Контрагент;
	КонецЕсли;
	
	ЛицензияОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти // Лицензии

#Область ПунктыНазначения

функция СоздатьПунктыНазначения(ДанныеXDTO, Контрагент)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	ПунктыРазгрузкиXDTO = ФабрикаXDTO.Создать(
							ФабрикаXDTO.Тип(
								ПространствоИмен, 
								"TCreatePartnerTableUnloadingPoint"));
	
	ТаблицаXDTO = ДанныеXDTO.TableUnloadingPoint.UnloadingPoint;
	
	Если ТаблицаXDTO.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаXDTO Цикл
			
			ПунктНазначения = СоздатьПунктНазначения(
								СтрокаТаблицы, 
								Контрагент);
			
			РегистрыСведений.бг_creatio_СоответствиеОбъектов.УстановитьСоответствие(
				ПунктНазначения,
				СтрокаТаблицы.IDCRM);
			
			ПунктРазгрузкиXDTO = ФабрикаXDTO.Создать(
									ПространствоИмен, 
									"TCreatePartnerUnloadingPoint");
			
			ПунктРазгрузкиXDTO.IDCRM = СтрокаТаблицы.IDCRM;
			ПунктРазгрузкиXDTO.UnloadingPointID = ЗначениеСУчетомВременногоИдентификатора(ПунктНазначения);
			ПунктыРазгрузкиXDTO.UnloadingPoint.Добавить(ПунктРазгрузкиXDTO);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПунктыРазгрузкиXDTO;
	
КонецФункции

Функция СоздатьПунктНазначения(ДанныеXDTO, Контрагент)
	
	Если ЗначениеЗаполнено(ДанныеXDTO.KPP)
		И ДанныеXDTO.KPP <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП") Тогда
		Контрагент = НайтиСоздатьКонтрагентаОбособленноеПодразделение(ДанныеXDTO, Контрагент);
	КонецЕсли;
	
	ПунктНазначенияОбъект = Справочники.битПунктыНазначения.СоздатьЭлемент();
	
	ЗаполнитьДанныеШапкиПунктаНазначения(ДанныеXDTO, ПунктНазначенияОбъект, Контрагент);
	ЗаполнитьДанныеАдресаПунктаНазначения(ДанныеXDTO, ПунктНазначенияОбъект);
	
	ПунктНазначенияОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	ПунктНазначенияОбъект.Записать();
	
	ПунктНазначения = ПунктНазначенияОбъект.Ссылка;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.MainLicenseID) Тогда
		
		Лицензия = РегистрыСведений.бг_creatio_СоответствиеОбъектов.ОбъектПоИдентификаторуCreatio(ДанныеXDTO.MainLicenseID); // Для новых объектов
		
		Если Не ЗначениеЗаполнено(Лицензия) Тогда
			Лицензия = ЗначениеПоИдентификатору(ДанныеXDTO.MainLicenseID);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Лицензия) Тогда
			ПроверитьУстановитьДействиеЛицензииВПунктеНазначения(ПунктНазначения, Лицензия);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьМенеджераВПунктеНазначения(ПунктНазначения, Контрагент);
	
	Возврат ПунктНазначения;
	
КонецФункции

Процедура ЗаполнитьДанныеАдресаПунктаНазначения(ДанныеXDTO, ПунктНазначенияОбъект)
	
	ЗначенияПолей = ЗначенияПолейАдресаПоДаннымXDTO(ДанныеXDTO);
	
	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
				ЗначенияПолей, 
				ЗначенияПолей.Представление, 
				Перечисления.ТипыКонтактнойИнформации.Адрес);
				
	АдресJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(АдресXML);
	
	ПунктНазначенияОбъект.Адрес = ЗначенияПолей.Представление;
	ПунктНазначенияОбъект.АдресЗначение = АдресJSON;
	ПунктНазначенияОбъект.АдресЗначенияПолей = АдресXML;
	
КонецПроцедуры

Функция ЗаполнитьДанныеШапкиПунктаНазначения(ДанныеXDTO, ПунктНазначенияОбъект, Контрагент)
	
	ПунктНазначенияОбъект.Наименование = ДанныеXDTO.Name;
	ПунктНазначенияОбъект.НаименованиеПолное = Справочники.битПунктыНазначения.ПолноеНаименованиеПунктаНазначенияПоДаннымКонтрагента(Контрагент);
	ПунктНазначенияОбъект.КПП = ДанныеXDTO.KPP;
	ПунктНазначенияОбъект.КодЕГАИС = ДанныеXDTO.EGAIS;
	ПунктНазначенияОбъект.Клиент = Контрагент;
	ПунктНазначенияОбъект.КаналПродаж = бг_КонстантыПовтИсп.ЗначениеКонстанты("КаналПродажДляКлиентовCreatio");
	ПунктНазначенияОбъект.ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОбособленноеПодразделение");
	
КонецФункции

Функция НайтиСоздатьКонтрагентаОбособленноеПодразделение (ДанныеXDTO, ГоловнойКонтрагент)
	
	РеквизитыГоловногоКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										ГоловнойКонтрагент, 
										"ИНН, ЮридическоеФизическоеЛицо, СтранаРегистрации, ЮрФизЛицо, Партнер, Наименование");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КПП = &КПП
	|	И Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент";
	
	Запрос.УстановитьПараметр("КПП", ДанныеXDTO.KPP);
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(КонтрагентОбъект, РеквизитыГоловногоКонтрагента);
	
	КонтрагентОбъект.КПП = ДанныеXDTO.KPP;
	КонтрагентОбъект.ОбособленноеПодразделение = Истина;
	КонтрагентОбъект.ГоловнойКонтрагент = ГоловнойКонтрагент;
	КонтрагентОбъект.Наименование = КонтрагентОбъект.Наименование + ":" + ДанныеXDTO.KPP;
	КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование + ", " + ДанныеXDTO.Represent;
	
	КонтрагентОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаДанныхCreatio");
	КонтрагентОбъект.Записать();
	
	Возврат КонтрагентОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьМенеджераВПунктеНазначения(ПунктНазначения, Контрагент)
	
	Менеджер = ОсновнойМенеджерКонтрагента(Контрагент);
	Если Менеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФизЛицоМенеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Менеджер, "ФизическоеЛицо");
	Если ЗначениеЗаполнено(ФизЛицоМенеджер) Тогда
		Справочники.битПунктыНазначения.НайтиСоздатьЗаписьМенеджераПунктаНазначения(ПунктНазначения, ФизЛицоМенеджер);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ПунктыНазначения

#Область Заказы

Процедура ЗаполнитьДанныеШапкиЗаказа(ЗаказОбъект, ДанныеXDTO)
	
	ЗаказОбъект.Дата = ТекущаяДатаСеанса();
	
	Если ЗначениеЗаполнено(ДанныеXDTO.RetailPartnerID) Тогда
		ЗаказОбъект.Контрагент = ЗначениеПоИдентификатору(ДанныеXDTO.RetailPartnerID, "Справочник.Контрагенты");
		ЗаказОбъект.бг_Магазин = ЗначениеПоИдентификатору(ДанныеXDTO.PartnerID, "Справочник.Контрагенты");
	Иначе
		ЗаказОбъект.Контрагент = ЗначениеПоИдентификатору(ДанныеXDTO.PartnerID, "Справочник.Контрагенты");
	КонецЕсли;
	
	ЗаказОбъект.Организация = ЗначениеПоИдентификатору(ДанныеXDTO.OrganizationID, "Справочник.Организации");
	ЗаказОбъект.Склад = ЗначениеПоИдентификатору(ДанныеXDTO.StorageID, "Справочник.Склады");
	ЗаказОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ЗаказОбъект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаказОбъект.Менеджер = ЗначениеПоИдентификатору(ДанныеXDTO.ResponsibleID, "Справочник.Пользователи");
	ЗаказОбъект.Комментарий = ДанныеXDTO.Comment;
	ЗаказОбъект.Договор = ЗначениеПоИдентификатору(ДанныеXDTO.ContractID, "Справочник.ДоговорыКонтрагентов");
	ЗаказОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ЗаказОбъект.Приоритет);
	ЗаказОбъект.СуммаДокумента = ДанныеXDTO.Total;
	ЗаказОбъект.Грузополучатель = ЗаказОбъект.Контрагент;
	ЗаказОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ЗаказОбъект.ДатаОтгрузки = ДанныеXDTO.ShippingDate;
	ЗаказОбъект.НеОтгружатьЧастями = Истина;
	ЗаказОбъект.ВремяДоставкиС = ДанныеXDTO.DeliveryTimeFrom;
	ЗаказОбъект.ВремяДоставкиПо = ДанныеXDTO.DeliveryTimeTo;
	ЗаказОбъект.бг_ПунктНазначения = ЗначениеПоИдентификатору(ДанныеXDTO.UnloadingPointID, "Справочник.битПунктыНазначения");
	ЗаказОбъект.бг_ВариантОплаты = ВариантОплаты(ДанныеXDTO.PaymentOption);
	ЗаказОбъект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Creatio;
	
	Если ЗначениеЗаполнено(ЗаказОбъект.Контрагент) Тогда
		ЗаказОбъект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОбъект.Контрагент, "Партнер");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказОбъект.Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказОбъект.Договор, "бг_Соглашение, ГруппаФинансовогоУчета");
		ЗаказОбъект.Соглашение = РеквизитыДоговора.бг_Соглашение;
		ЗаказОбъект.ГруппаФинансовогоУчета = РеквизитыДоговора.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказОбъект.бг_ПунктНазначения) Тогда
		ЗаказОбъект.бг_Лицензия = РегистрыСведений.бг_ЛицензииПунктовНазначения.ТекущаяЛицензияПунктаНазначения(ЗаказОбъект.бг_ПунктНазначения);
	КонецЕсли;
	
	ЗаказОбъект.УстановитьСтатус("КОбеспечению", Неопределено);
	
	ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЗаказОбъект);
	
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(
		ЗаказОбъект.НалогообложениеНДС, 
		ПараметрыЗаполнения);
		
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(
		ЗаказОбъект.Договор, 
		ЗаказОбъект.БанковскийСчет, 
		ЗаказОбъект.БанковскийСчетКонтрагента);
		
	Если ЗначениеЗаполнено(ЗаказОбъект.Соглашение) Тогда
		ЗаказОбъект.ЗаполнитьУсловияПродажПоСоглашению(Истина);
	Иначе
		ЗаказОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
	ЗаказОбъект.ДополнительныеСвойства.Вставить("ЗагрузкаИзCreatio", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьТоварыЗаказа(ЗаказОбъект, ДанныеXDTO)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваровПоДаннымXDTO(ДанныеXDTO));
	Запрос.УстановитьПараметр("Склад", ЗаказОбъект.Склад);
	Запрос.УстановитьПараметр("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.СоСклада);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ЗаказОбъект.ДатаОтгрузки);
	
	Запрос.УстановитьПараметр("НаценкаПоЗаказу", 
		?(ДанныеXDTO.Свойства().Получить("Markup") <> Неопределено, ДанныеXDTO.Markup, 0));
	
	Запрос.УстановитьПараметр("ЕдиницаИзмеренияПаллета", 
		бг_КонстантыПовтИсп.ЗначениеКонстанты("ЕдиницаПоКлассификаторуДляПаллеты"));
	
	ЗаказОбъект.Товары.Очистить();
	
	Запрос.Текст = ТекстЗапросаТабличнойЧастиТоварыЗаказа();
	ДанныеЗаполнения = Запрос.Выполнить().Выбрать();
	Пока ДанныеЗаполнения.Следующий() Цикл
		СтрокаТЧТовары = ЗаказОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, ДанныеЗаполнения, , "Цена, Сумма");
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТабличнойЧастиТоварыЗаказа()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Код КАК Код,
	|	ТаблицаТоваров.ЭтоСКЮ КАК ЭтоСКЮ,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.Наценка КАК Наценка,
	|	ТаблицаТоваров.РучнаяСкидка КАК РучнаяСкидка,
	|	ТаблицаТоваров.СуммаСоСкидкой КАК СуммаСоСкидкой
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Код КАК СТРОКА(18)) КАК КодСКЮ
	|ПОМЕСТИТЬ КодыСКЮ
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ЭтоСКЮ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСКЮ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Код КАК СТРОКА(8)) КАК КодЕК
	|ПОМЕСТИТЬ КодыЕК
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	НЕ ТаблицаТоваров.ЭтоСКЮ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодЕК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Товары.Ссылка) КАК Номенклатура,
	|	ТоварныеКатегории.бг_КодНСИ КАК КодСКЮ
	|ПОМЕСТИТЬ НоменклатураСКЮ
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|		ПО Товары.ТоварнаяКатегория = ТоварныеКатегории.Ссылка
	|ГДЕ
	|	ТоварныеКатегории.бг_КодНСИ В
	|			(ВЫБРАТЬ
	|				КодыСКЮ.КодСКЮ
	|			ИЗ
	|				КодыСКЮ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныеКатегории.бг_КодНСИ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСКЮ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Номенклатура.Ссылка) КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры КАК КодЕК
	|ПОМЕСТИТЬ НоменклатураЕК
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Номенклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры В
	|			(ВЫБРАТЬ
	|				КодыЕК.КодЕК
	|			ИЗ
	|				КодыЕК)
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодЕК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЕСТЬNULL(НоменклатураЕК.Номенклатура, НоменклатураСКЮ.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.Пустаяссылка)) КАК Номенклатура,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.СуммаСоСкидкой КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Наценка > 0
	|			ТОГДА -ТаблицаТоваров.Наценка
	|		ИНАЧЕ ТаблицаТоваров.РучнаяСкидка
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ТаблицаТоваров.РучнаяСкидка КАК РучнаяСкидка,
	|	&ВариантОбеспечения КАК ВариантОбеспечения,
	|	&ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЛОЖЬ КАК Отменено,
	|	&Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаТоваровИтоговая
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураСКЮ КАК НоменклатураСКЮ
	|		ПО ТаблицаТоваров.Код = НоменклатураСКЮ.КодСКЮ
	|			И (ТаблицаТоваров.ЭтоСКЮ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураЕК КАК НоменклатураЕК
	|		ПО ТаблицаТоваров.Код = НоменклатураЕК.КодЕК
	|			И (НЕ ТаблицаТоваров.ЭтоСКЮ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровИтоговая.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваровИтоговая.Количество КАК Количество,
	|	ТаблицаТоваровИтоговая.Количество КАК КоличествоУпаковок,
	|	ТаблицаТоваровИтоговая.Цена КАК Цена,
	|	ТаблицаТоваровИтоговая.Сумма КАК Сумма,
	|	ТаблицаТоваровИтоговая.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТаблицаТоваровИтоговая.РучнаяСкидка КАК РучнаяСкидка,
	|	ТаблицаТоваровИтоговая.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТаблицаТоваровИтоговая.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТаблицаТоваровИтоговая.Отменено КАК Отменено,
	|	ТаблицаТоваровИтоговая.Склад КАК Склад,
	|	МАКСИМУМ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК бг_УпаковкаПаллета
	|ИЗ
	|	ТаблицаТоваровИтоговая КАК ТаблицаТоваровИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО ТаблицаТоваровИтоговая.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|			И (УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмеренияПаллета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваровИтоговая.Номенклатура,
	|	ТаблицаТоваровИтоговая.Количество,
	|	ТаблицаТоваровИтоговая.Цена,
	|	ТаблицаТоваровИтоговая.Сумма,
	|	ТаблицаТоваровИтоговая.СуммаРучнойСкидки,
	|	ТаблицаТоваровИтоговая.РучнаяСкидка,
	|	ТаблицаТоваровИтоговая.ВариантОбеспечения,
	|	ТаблицаТоваровИтоговая.ДатаОтгрузки,
	|	ТаблицаТоваровИтоговая.Отменено,
	|	ТаблицаТоваровИтоговая.Склад,
	|	ТаблицаТоваровИтоговая.Количество";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВариантОплаты(ВариантОплатыЧислом)
	
	Если ВариантОплатыЧислом = 0 Тогда
		ВариантОплаты = Перечисления.бг_ВариантыОплаты.Карта;
	ИначеЕсли ВариантОплатыЧислом = 1 Тогда
		ВариантОплаты = Перечисления.бг_ВариантыОплаты.Наличные;
	ИначеЕсли ВариантОплатыЧислом = 2 Тогда
		ВариантОплаты = Перечисления.бг_ВариантыОплаты.Счет;
	Иначе
		ВариантОплаты = Неопределено;
	КонецЕсли;
	
	Возврат ВариантОплаты;
	
КонецФункции

Функция ДоговорКонтрагента(Контрагент, Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = Перечисление.ХозяйственныеОперации.РеализацияКлиенту
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ДанныеЗаказаXDTO(ЗаказОбъект, ДанныеXDTO, ТекстОшибки = "")
	
	ПространствоИмен = "http://BPMonline/sin/response";
	ТипЗапроса = "_CreateOrder";
	
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	Результат.IDCRM = ДанныеXDTO.IDCRM;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Результат.Error = Истина;
		Результат.TextError = ТекстОшибки;
		Результат.ErrorStatus = 1;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Error = Ложь;
	Результат.TextError = ТекстОшибки;
	Результат.ErrorStatus = 0;
	Результат.OrderID = ЗначениеСУчетомВременногоИдентификатора(ЗаказОбъект.Ссылка);
	Результат.Number = ЗаказОбъект.Номер;
	Результат.Held = ЗаказОбъект.Проведен;
	Результат.StatusFinancialControlID = "";
	Результат.StatusCreditControlID = "";
	Результат.StatusPackage = 0;
	Результат.Closed = Ложь;
	Результат.Completion = 0;
	Результат.SalesAmount = 0;
	Результат.SalesPayments = 0;
	Результат.NDSAmount = 0;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьТабличнуюЧастьТоварыЗаказа(ЗаказОбъект)
	
	Если ЗначениеЗаполнено(ЗаказОбъект.Соглашение) Тогда
		ЗаказОбъект.ЗаполнитьУсловияПродажПоСоглашению(Истина);
	Иначе
		ЗаказОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЗаказОбъект, Документы.ЗаказКлиента);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаказОбъект, ПараметрыУказанияСерий);
	
	ПараметрыДокумента = Документы.ЗаказКлиента.ПараметрыДокументаДляДействийОбеспечения(ЗаказОбъект);
	СтруктураДействий = Новый Структура;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЗаказОбъект);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЗаказОбъект, Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
		ЗаказОбъект.Товары, 
		СтруктураДействий, 
		КэшированныеЗначения);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
	
	СкидкиНаценкиСервер.Рассчитать(
		ЗаказОбъект, 
		СтруктураПараметры);
	
	ЗаказОбъект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры

#КонецОбласти // Заказы

#Область ЦеныОстатки

Функция ТекстЗапросаИтоговойТаблицыЦенПоЗаказу()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыЗаказа.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказа.Количество КАК Количество,
	|	ТоварыЗаказа.Сумма КАК Сумма,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказа.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказа.Цена КАК Цена,
	|	ТоварыЗаказа.Отменено КАК Отменено
	|ПОМЕСТИТЬ ТоварыЗаказа
	|ИЗ
	|	&ТоварыЗаказа КАК ТоварыЗаказа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Номенклатура КАК Номенклатура,
	|	СУММА(ТоварыЗаказа.Количество) КАК Количество,
	|	СУММА(ТоварыЗаказа.Сумма) КАК Сумма,
	|	МАКСИМУМ(ТоварыЗаказа.ПроцентРучнойСкидки) КАК ПроцентРучнойСкидки,
	|	МАКСИМУМ(ТоварыЗаказа.ПроцентАвтоматическойСкидки) КАК ПроцентАвтоматическойСкидки,
	|	МАКСИМУМ(ТоварыЗаказа.Цена) КАК Цена
	|ПОМЕСТИТЬ ТоварыЗаказаСгруппированная
	|ИЗ
	|	ТоварыЗаказа КАК ТоварыЗаказа
	|ГДЕ
	|	НЕ ТоварыЗаказа.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаказа.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Номенклатура,
	|	ТоварныеКатегории.Ссылка КАК ТоварнаяКатегория,
	|	ТоварныеКатегории.бг_КодНСИ КАК КодНСИ,
	|	МАКСИМУМ(УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры) КАК КодЕК
	|ПОМЕСТИТЬ УпаковкиТоварныеКатегории
	|ИЗ
	|	Справочник.Номенклатура КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|		ПО Товары.ТоварнаяКатегория = ТоварныеКатегории.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Товары.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				ТоварыЗаказа.Номенклатура
	|			ИЗ
	|				ТоварыЗаказа)
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Ссылка,
	|	ТоварныеКатегории.Ссылка,
	|	ТоварныеКатегории.бг_КодНСИ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказаСгруппированная.Номенклатура КАК Номенклатура,
	|	УпаковкиТоварныеКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	УпаковкиТоварныеКатегории.КодНСИ КАК КодНСИ,
	|	ТоварыЗаказаСгруппированная.Количество КАК Количество,
	|	ТоварыЗаказаСгруппированная.Сумма КАК Сумма,
	|	ТоварыЗаказаСгруппированная.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказаСгруппированная.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказаСгруппированная.Цена КАК Цена,
	|	УпаковкиТоварныеКатегории.КодЕК КАК КодЕК
	|ПОМЕСТИТЬ ТоварыЗаказаТоварныеКатегории
	|ИЗ
	|	ТоварыЗаказаСгруппированная КАК ТоварыЗаказаСгруппированная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УпаковкиТоварныеКатегории КАК УпаковкиТоварныеКатегории
	|		ПО ТоварыЗаказаСгруппированная.Номенклатура = УпаковкиТоварныеКатегории.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТоварнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказаТоварныеКатегории.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказаТоварныеКатегории.Количество КАК Количество,
	|	ТоварыЗаказаТоварныеКатегории.Сумма КАК СуммаСоСкидкой,
	|	ТоварыЗаказаТоварныеКатегории.Количество * ТоварыЗаказаТоварныеКатегории.Цена КАК Сумма,
	|	ТоварыЗаказаТоварныеКатегории.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказаТоварныеКатегории.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ВЫБОР
	|		КОГДА ТоварныеКатегорииНМК.ТоварнаяКатегория ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСКЮ,
	|	ВЫБОР
	|		КОГДА ТоварныеКатегорииНМК.ТоварнаяКатегория ЕСТЬ NULL
	|			ТОГДА ТоварыЗаказаТоварныеКатегории.КодНСИ
	|		ИНАЧЕ ТоварыЗаказаТоварныеКатегории.КодЕК
	|	КОНЕЦ КАК Код
	|ПОМЕСТИТЬ ТоварыЗаказаИтог
	|ИЗ
	|	ТоварыЗаказаТоварныеКатегории КАК ТоварыЗаказаТоварныеКатегории
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварныеКатегорииНМК КАК ТоварныеКатегорииНМК
	|		ПО ТоварыЗаказаТоварныеКатегории.ТоварнаяКатегория = ТоварныеКатегорииНМК.ТоварнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказаИтог.Код КАК Код,
	|	ТоварыЗаказаИтог.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказаИтог.Количество КАК Количество,
	|	ТоварыЗаказаИтог.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказаИтог.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказаИтог.ЭтоСКЮ КАК ЭтоСКЮ,
	|	ТоварыЗаказаИтог.Сумма КАК Сумма,
	|	ТоварыЗаказаИтог.СуммаСоСкидкой КАК СуммаСоСкидкой
	|ИЗ
	|	ТоварыЗаказаИтог КАК ТоварыЗаказаИтог
	|ГДЕ
	|	НЕ ТоварыЗаказаИтог.ЭтоСКЮ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыЗаказаИтог.Код,
	|	МАКСИМУМ(ТоварыЗаказаИтог.Номенклатура),
	|	СУММА(ТоварыЗаказаИтог.Количество),
	|	МАКСИМУМ(ТоварыЗаказаИтог.ПроцентРучнойСкидки),
	|	МАКСИМУМ(ТоварыЗаказаИтог.ПроцентАвтоматическойСкидки),
	|	МАКСИМУМ(ТоварыЗаказаИтог.ЭтоСКЮ),
	|	ТоварыЗаказаИтог.Сумма,
	|	ТоварыЗаказаИтог.СуммаСоСкидкой
	|ИЗ
	|	ТоварыЗаказаИтог КАК ТоварыЗаказаИтог
	|ГДЕ
	|	ТоварыЗаказаИтог.ЭтоСКЮ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаказаИтог.Код,
	|	ТоварыЗаказаИтог.Сумма,
	|	ТоварыЗаказаИтог.СуммаСоСкидкой";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЦен()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры25СрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена,
	|	ЦеныНоменклатуры25СрезПоследних.Валюта КАК Валюта
	|ПОМЕСТИТЬ ТаблицаЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			,
	|			ВидЦены В
	|					(ВЫБРАТЬ
	|						ТаблицаВидыЦен.ВидЦены
	|					ИЗ
	|						ТаблицаВидыЦен КАК ТаблицаВидыЦен)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатура.Номенклатура
	|					ИЗ
	|						ТаблицаНоменклатура КАК ТаблицаНоменклатура)) КАК ЦеныНоменклатуры25СрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатура.Код КАК Код,
	|	ТаблицаНоменклатура.ЭтоСКЮ КАК ЭтоСКЮ,
	|	ЕСТЬNULL(ДанныеМРЦ.ВидАлкогольнойПродукции, &ВидАлкогольнойПродукцииПрочие) КАК ВидАлкогольнойПродукции,
	|	ТаблицаНоменклатура.Крепость КАК Крепость,
	|	ЕСТЬNULL(ТаблицаНоменклатура.ЕмкостьТары, 0.5) КАК ЕмкостьТары
	|ПОМЕСТИТЬ ТаблицаНоменклатураИтог
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеМРЦ КАК ДанныеМРЦ
	|		ПО ТаблицаНоменклатура.ВидАлкогольнойПродукции = ДанныеМРЦ.ВидАлкогольнойПродукции
	|			И ТаблицаНоменклатура.ЕмкостьТары = ДанныеМРЦ.ЕмкостьТары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатураИтог.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатураИтог.Код КАК Код,
	|	ТаблицаНоменклатураИтог.ЭтоСКЮ КАК ЭтоСКЮ,
	|	ТаблицаЦены.ВидЦены КАК ВидЦены,
	|	ТаблицаЦены.Цена КАК Цена,
	|	ТаблицаЦены.Валюта КАК Валюта,
	|	ЕСТЬNULL(ДанныеМРЦ.Цена, 0) КАК ЦенаМРЦ
	|ПОМЕСТИТЬ ТаблицаЦеныИтог
	|ИЗ
	|	ТаблицаНоменклатураИтог КАК ТаблицаНоменклатураИтог
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦены КАК ТаблицаЦены
	|		ПО ТаблицаНоменклатураИтог.Номенклатура = ТаблицаЦены.Номенклатура
	|			И (НЕ ТаблицаНоменклатураИтог.ЭтоСКЮ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеМРЦ КАК ДанныеМРЦ
	|		ПО ТаблицаНоменклатураИтог.ВидАлкогольнойПродукции = ДанныеМРЦ.ВидАлкогольнойПродукции
	|			И ТаблицаНоменклатураИтог.Крепость = ДанныеМРЦ.Крепость
	|			И ТаблицаНоменклатураИтог.ЕмкостьТары = ДанныеМРЦ.ЕмкостьТары
	|			И (НЕ ТаблицаНоменклатураИтог.ЭтоСКЮ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаНоменклатураИтог.Номенклатура),
	|	МАКСИМУМ(ТаблицаНоменклатураИтог.Код),
	|	ТаблицаНоменклатураИтог.ЭтоСКЮ,
	|	ТаблицаЦены.ВидЦены,
	|	МАКСИМУМ(ТаблицаЦены.Цена),
	|	МАКСИМУМ(ТаблицаЦены.Валюта),
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеМРЦ.Цена, 0))
	|ИЗ
	|	ТаблицаНоменклатураИтог КАК ТаблицаНоменклатураИтог
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЦены КАК ТаблицаЦены
	|		ПО ТаблицаНоменклатураИтог.Номенклатура = ТаблицаЦены.Номенклатура
	|			И (ТаблицаНоменклатураИтог.ЭтоСКЮ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеМРЦ КАК ДанныеМРЦ
	|		ПО ТаблицаНоменклатураИтог.ВидАлкогольнойПродукции = ДанныеМРЦ.ВидАлкогольнойПродукции
	|			И ТаблицаНоменклатураИтог.Крепость = ДанныеМРЦ.Крепость
	|			И ТаблицаНоменклатураИтог.ЕмкостьТары = ДанныеМРЦ.ЕмкостьТары
	|			И (ТаблицаНоменклатураИтог.ЭтоСКЮ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатураИтог.ЭтоСКЮ,
	|	ТаблицаЦены.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЦеныИтог.Номенклатура КАК Номенклатура,
	|	ТаблицаЦеныИтог.Код КАК Код,
	|	ТаблицаЦеныИтог.ЭтоСКЮ КАК ЭтоСКЮ,
	|	ТаблицаЦеныИтог.ВидЦены КАК ВидЦены,
	|	ЕСТЬNULL(ТаблицаЦеныИтог.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(ТаблицаЦеныИтог.ЦенаМРЦ, 0) КАК ЦенаМРЦ,
	|	ТаблицаЦеныИтог.Валюта КАК Валюта,
	|	ТаблицаЦеныИтог.ВидЦены.Наименование КАК ВидЦеныНаименование
	|ИЗ
	|	ТаблицаЦеныИтог КАК ТаблицаЦеныИтог
	|ИТОГИ
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ВидЦеныНаименование)
	|ПО
	|	ВидЦены";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПодготовитьВременнуюТаблицуТоваровДляРасчетаЦенСОтборомПоТаблице(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Код КАК Код,
	|	ТаблицаТоваров.ЭтоСКЮ КАК ЭтоСКЮ
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код,
	|	ЭтоСКЮ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Код КАК СТРОКА(8)) КАК КодЕК
	|ПОМЕСТИТЬ КодыЕК
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	НЕ ТаблицаТоваров.ЭтоСКЮ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодЕК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Код КАК СТРОКА(18)) КАК КодСКЮ
	|ПОМЕСТИТЬ КодыСКЮ
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ЭтоСКЮ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСКЮ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	МАКСИМУМ(УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры) КАК КодЕК,
	|	Номенклатура.Крепость КАК Крепость,
	|	Номенклатура.ОбъемДАЛ * 10 КАК ОбъемДАЛ,
	|	Номенклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория
	|ПОМЕСТИТЬ ТаблицаНоменклатураЕК
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Номенклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры В
	|			(ВЫБРАТЬ
	|				КодыЕК.КодЕК
	|			ИЗ
	|				КодыЕК)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Крепость,
	|	Номенклатура.ВидАлкогольнойПродукции,
	|	Номенклатура.ОбъемДАЛ * 10,
	|	Номенклатура.Ссылка,
	|	Номенклатура.ТоварнаяКатегория
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодЕК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Номенклатура.Ссылка) КАК Номенклатура,
	|	ТоварныеКатегории.бг_КодНСИ КАК КодСКЮ,
	|	Номенклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	Номенклатура.Крепость КАК Крепость,
	|	Номенклатура.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ТоварныеКатегории.Ссылка КАК ТоварнаяКатегория
	|ПОМЕСТИТЬ ТаблицаНоменклатураСКЮ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|		ПО Номенклатура.ТоварнаяКатегория = ТоварныеКатегории.Ссылка
	|ГДЕ
	|	ТоварныеКатегории.бг_КодНСИ В
	|			(ВЫБРАТЬ
	|				КодыСКЮ.КодСКЮ
	|			ИЗ
	|				КодыСКЮ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныеКатегории.бг_КодНСИ,
	|	Номенклатура.ВидАлкогольнойПродукции,
	|	Номенклатура.Крепость,
	|	Номенклатура.ОбъемДАЛ,
	|	ТоварныеКатегории.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСКЮ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Код КАК Код,
	|	ТаблицаТоваров.ЭтоСКЮ КАК ЭтоСКЮ,
	|	ТаблицаНоменклатураЕК.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаНоменклатураЕК.Крепость КАК ЧИСЛО(3, 0))) = ТаблицаНоменклатураЕК.Крепость
	|			ТОГДА ТаблицаНоменклатураЕК.Крепость - 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаНоменклатураЕК.Крепость КАК ЧИСЛО(3, 0))
	|	КОНЕЦ КАК Крепость,
	|	ТаблицаНоменклатураЕК.ОбъемДАЛ * 10 КАК ЕмкостьТары,
	|	ТаблицаНоменклатураЕК.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ТаблицаНоменклатураЕК.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатураЕК КАК ТаблицаНоменклатураЕК
	|		ПО (ТаблицаНоменклатураЕК.КодЕК = (ВЫРАЗИТЬ(ТаблицаТоваров.Код КАК СТРОКА(11))))
	|			И (НЕ ТаблицаТоваров.ЭтоСКЮ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Код,
	|	ТаблицаТоваров.ЭтоСКЮ,
	|	ТаблицаНоменклатураСКЮ.ВидАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ТаблицаНоменклатураСКЮ.Крепость КАК ЧИСЛО(3, 0))) = ТаблицаНоменклатураСКЮ.Крепость
	|			ТОГДА ТаблицаНоменклатураСКЮ.Крепость - 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаНоменклатураСКЮ.Крепость КАК ЧИСЛО(3, 0))
	|	КОНЕЦ,
	|	ТаблицаНоменклатураСКЮ.ОбъемДАЛ * 10,
	|	ТаблицаНоменклатураСКЮ.ТоварнаяКатегория,
	|	ТаблицаНоменклатураСКЮ.Номенклатура
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатураСКЮ КАК ТаблицаНоменклатураСКЮ
	|		ПО (ТаблицаНоменклатураСКЮ.КодСКЮ = (ВЫРАЗИТЬ(ТаблицаТоваров.Код КАК СТРОКА(18))))
	|			И (ТаблицаТоваров.ЭтоСКЮ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуТоваровДляРасчетаЦенСОтборомПоНастройке(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры КАК КодЕК,
	|	СправочникНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ЛОЖЬ КАК ЭтоСКЮ,
	|	СправочникНоменклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СправочникНоменклатура.Крепость КАК ЧИСЛО(3, 0))) = СправочникНоменклатура.Крепость
	|			ТОГДА СправочникНоменклатура.Крепость - 1
	|		ИНАЧЕ ВЫРАЗИТЬ(СправочникНоменклатура.Крепость КАК ЧИСЛО(3, 0))
	|	КОНЕЦ КАК Крепость,
	|	СправочникНоменклатура.ОбъемДАЛ * 10 КАК ЕмкостьТары
	|ПОМЕСТИТЬ НоменклатураЕК
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО СправочникНоменклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
	|ГДЕ
	|	СправочникНоменклатура.ТоварнаяКатегория В
	|			(ВЫБРАТЬ
	|				ТоварныеКатегорииНМК.ТоварнаяКатегория
	|			ИЗ
	|				ТоварныеКатегорииНМК КАК ТоварныеКатегорииНМК)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ТоварнаяКатегория.бг_КодНСИ КАК КодСКЮ,
	|	Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ИСТИНА КАК ЭтоСКЮ,
	|	Номенклатура.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(Номенклатура.Крепость КАК ЧИСЛО(3, 0))) = Номенклатура.Крепость
	|			ТОГДА Номенклатура.Крепость - 1
	|		ИНАЧЕ ВЫРАЗИТЬ(Номенклатура.Крепость КАК ЧИСЛО(3, 0))
	|	КОНЕЦ КАК Крепость,
	|	Номенклатура.ОбъемДАЛ * 10 КАК ЕмкостьТары
	|ПОМЕСТИТЬ НоменклатураСКЮ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ТоварнаяКатегория В
	|			(ВЫБРАТЬ
	|				ТоварныеКатегорииСКЮ.ТоварнаяКатегория
	|			ИЗ
	|				ТоварныеКатегорииСКЮ КАК ТоварныеКатегорииСКЮ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураЕК.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	НоменклатураЕК.Номенклатура КАК Номенклатура,
	|	НоменклатураЕК.КодЕК КАК Код,
	|	НоменклатураЕК.ЭтоСКЮ КАК ЭтоСКЮ,
	|	НоменклатураЕК.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	НоменклатураЕК.Крепость КАК Крепость,
	|	НоменклатураЕК.ЕмкостьТары КАК ЕмкостьТары
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения,
	|	НоменклатураЕК КАК НоменклатураЕК
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО НоменклатураЕК.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТоварнаяКатегория.Ссылка В
	|			(ВЫБРАТЬ
	|				ТоварныеКатегорииНМК.ТоварнаяКатегория
	|			ИЗ
	|				ТоварныеКатегорииНМК КАК ТоварныеКатегорииНМК)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НоменклатураСКЮ.ТоварнаяКатегория,
	|	НоменклатураСКЮ.Номенклатура,
	|	НоменклатураСКЮ.КодСКЮ,
	|	НоменклатураСКЮ.ЭтоСКЮ,
	|	НоменклатураСКЮ.ВидАлкогольнойПродукции,
	|	НоменклатураСКЮ.Крепость,
	|	НоменклатураСКЮ.ЕмкостьТары
	|ИЗ
	|	НоменклатураСКЮ КАК НоменклатураСКЮ
	|ГДЕ
	|	НоменклатураСКЮ.ТоварнаяКатегория В
	|			(ВЫБРАТЬ
	|				ТоварныеКатегорииСКЮ.ТоварнаяКатегория
	|			ИЗ
	|				ТоварныеКатегорииСКЮ КАК ТоварныеКатегорииСКЮ)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуМРЦ(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_МинимальныеЦеныАлкогольнойПродукцииСрезПоследних.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	бг_МинимальныеЦеныАлкогольнойПродукцииСрезПоследних.Крепость КАК Крепость,
	|	бг_МинимальныеЦеныАлкогольнойПродукцииСрезПоследних.ТипЛицензии КАК ТипЛицензии,
	|	бг_МинимальныеЦеныАлкогольнойПродукцииСрезПоследних.Цена КАК Цена,
	|	бг_МинимальныеЦеныАлкогольнойПродукцииСрезПоследних.ЕмкостьТары КАК ЕмкостьТары
	|ПОМЕСТИТЬ ДанныеМРЦ
	|ИЗ
	|	РегистрСведений.бг_МинимальныеЦеныАлкогольнойПродукции.СрезПоследних(&ДатаСреза, ТипЛицензии = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Оптовая)) КАК бг_МинимальныеЦеныАлкогольнойПродукцииСрезПоследних";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти // ЦеныОстатки

#Область ПакетныйОбмен

#Область Клиенты

Функция ПодготовитьНепринятыеДанныеКлиентов(КоличествоЗаписей)
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант("ВидКИПочтаДляСверкиВРублях, ВидКИПочтаДляСверкиВДалах");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТипКИПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидКИПочтаКонтрагентаРуб", ЗначенияКонстант.ВидКИПочтаДляСверкиВРублях);
	Запрос.УстановитьПараметр("ВидКИПочтаКонтрагентаДал", ЗначенияКонстант.ВидКИПочтаДляСверкиВДалах);
	
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(КоличествоЗаписей = 0, "", " ПЕРВЫЕ " + Строка(КоличествоЗаписей + 1)) + "
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втНепринятыеПакеты
	|ИЗ
	|	РегистрСведений.бг_creatio_ВыгруженныеПакеты.СрезПоследних(, ) КАК бг_creatio_ВыгруженныеПакетыСрезПоследних
	|ГДЕ
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.Принят = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(
	|			,
	|			Данные ССЫЛКА Справочник.Контрагенты
	|				И ИдентификаторПакета В
	|					(ВЫБРАТЬ
	|						втНепринятыеПакеты.ИдентификаторПакета КАК ИдентификаторПакета
	|					ИЗ
	|						втНепринятыеПакеты КАК втНепринятыеПакеты)) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	Контрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДанныеПартнеров.Партнер КАК Партнер,
	|	ДанныеПартнеров.Клиент КАК Клиент,
	|	ДанныеПартнеров.БизнесРегион КАК БизнесРегион,
	|	ДанныеПартнеров.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	ДанныеПартнеров.Группа КАК Группа
	|ПОМЕСТИТЬ втКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДанныеПартнеров.Ссылка КАК Партнер,
	|			ДанныеПартнеров.Клиент КАК Клиент,
	|			ДанныеПартнеров.БизнесРегион КАК БизнесРегион,
	|			ДанныеПартнеров.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|			ДанныеПартнеров.бг_ГруппаПартнера КАК Группа
	|		ИЗ
	|			Справочник.Партнеры КАК ДанныеПартнеров) КАК ДанныеПартнеров
	|		ПО Контрагенты.Партнер = ДанныеПартнеров.Партнер
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				втДанные.Данные КАК Ссылка
	|			ИЗ
	|				втДанные КАК втДанные)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	втКонтрагенты.Ссылка КАК Данные,
	|	втКонтрагенты.Ссылка КАК Клиент,
	|	втКонтрагенты.Наименование КАК Наименование,
	|	втКонтрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	втКонтрагенты.БизнесРегион КАК БизнесРегион,
	|	втКонтрагенты.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	втКонтрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
	|	втКонтрагенты.ИНН КАК ИНН,
	|	втКонтрагенты.КПП КАК КПП,
	|	втКонтрагенты.КодПоОКПО КАК КодПоОКПО,
	|	втКонтрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	втКонтрагенты.Группа КАК Группа,
	|	ЛОЖЬ КАК СмешаннаяОтгрузка,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса,
	|	ЕСТЬNULL(ПочтаКонтрагента.ПочтаРуб, """") КАК ПочтаКонтрагентаРуб,
	|	ЕСТЬNULL(ПочтаКонтрагента.ПочтаДал, """") КАК ПочтаКонтрагентаДал
	|ИЗ
	|	втКонтрагенты КАК втКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПочтаРуб.Ссылка КАК Контрагент,
	|			ПочтаРуб.Представление КАК ПочтаРуб,
	|			ПочтаДал.Представление КАК ПочтаДал
	|		ИЗ
	|			Справочник.Контрагенты.КонтактнаяИнформация КАК ПочтаРуб
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ПочтаДал
	|				ПО ПочтаРуб.Ссылка = ПочтаДал.Ссылка
	|		ГДЕ
	|			ПочтаДал.Тип = &ТипКИПочта
	|			И ПочтаДал.Вид = &ВидКИПочтаКонтрагентаДал
	|			И ПочтаДал.Ссылка В
	|					(ВЫБРАТЬ
	|						втДанные.Данные КАК Ссылка
	|					ИЗ
	|						втДанные КАК втДанные)
	|			И ПочтаРуб.Тип = &ТипКИПочта
	|			И ПочтаРуб.Вид = &ВидКИПочтаКонтрагентаРуб
	|			И ПочтаРуб.Ссылка В
	|					(ВЫБРАТЬ
	|						втДанные.Данные КАК Ссылка
	|					ИЗ
	|						втДанные КАК втДанные)) КАК ПочтаКонтрагента
	|		ПО втКонтрагенты.Ссылка = ПочтаКонтрагента.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО (втДанные.Данные = втКонтрагенты.Ссылка)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПодготовитьЗарегистрированныеДанныеКлиентов()
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант("ВидКИПочтаДляСверкиВРублях, ВидКИПочтаДляСверкиВДалах");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТипКИПочта", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("ВидКИПочтаКонтрагентаРуб", ЗначенияКонстант.ВидКИПочтаДляСверкиВРублях);
	Запрос.УстановитьПараметр("ВидКИПочтаКонтрагентаДал", ЗначенияКонстант.ВидКИПочтаДляСверкиВДалах);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(, Данные ССЫЛКА Справочник.Контрагенты) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|ГДЕ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	Контрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДанныеПартнеров.Партнер КАК Партнер,
	|	ДанныеПартнеров.Клиент КАК Клиент,
	|	ДанныеПартнеров.БизнесРегион КАК БизнесРегион,
	|	ДанныеПартнеров.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	ДанныеПартнеров.Группа КАК Группа
	|ПОМЕСТИТЬ втКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДанныеПартнеров.Ссылка КАК Партнер,
	|			ДанныеПартнеров.Клиент КАК Клиент,
	|			ДанныеПартнеров.БизнесРегион КАК БизнесРегион,
	|			ДанныеПартнеров.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|			ДанныеПартнеров.бг_ГруппаПартнера КАК Группа
	|		ИЗ
	|			Справочник.Партнеры КАК ДанныеПартнеров) КАК ДанныеПартнеров
	|		ПО Контрагенты.Партнер = ДанныеПартнеров.Партнер
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				втДанные.Данные КАК Ссылка
	|			ИЗ
	|				втДанные КАК втДанные)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	втКонтрагенты.Ссылка КАК Данные,
	|	втКонтрагенты.Ссылка КАК Клиент,
	|	втКонтрагенты.Наименование КАК Наименование,
	|	втКонтрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	втКонтрагенты.БизнесРегион КАК БизнесРегион,
	|	втКонтрагенты.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	втКонтрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
	|	втКонтрагенты.ИНН КАК ИНН,
	|	втКонтрагенты.КПП КАК КПП,
	|	втКонтрагенты.КодПоОКПО КАК КодПоОКПО,
	|	втКонтрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	втКонтрагенты.Группа КАК Группа,
	|	ЛОЖЬ КАК СмешаннаяОтгрузка,
	|	ЕСТЬNULL(ПочтаКонтрагента.ПочтаРуб, """") КАК ПочтаКонтрагентаРуб,
	|	ЕСТЬNULL(ПочтаКонтрагента.ПочтаДал, """") КАК ПочтаКонтрагентаДал,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ
	|	втКонтрагенты КАК втКонтрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПочтаРуб.Ссылка КАК Контрагент,
	|			ПочтаРуб.Представление КАК ПочтаРуб,
	|			ПочтаДал.Представление КАК ПочтаДал
	|		ИЗ
	|			Справочник.Контрагенты.КонтактнаяИнформация КАК ПочтаРуб
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК ПочтаДал
	|				ПО ПочтаРуб.Ссылка = ПочтаДал.Ссылка
	|		ГДЕ
	|			ПочтаДал.Тип = &ТипКИПочта
	|			И ПочтаДал.Вид = &ВидКИПочтаКонтрагентаДал
	|			И ПочтаДал.Ссылка В
	|					(ВЫБРАТЬ
	|						втДанные.Данные КАК Ссылка
	|					ИЗ
	|						втДанные КАК втДанные)
	|			И ПочтаРуб.Тип = &ТипКИПочта
	|			И ПочтаРуб.Вид = &ВидКИПочтаКонтрагентаРуб
	|			И ПочтаРуб.Ссылка В
	|					(ВЫБРАТЬ
	|						втДанные.Данные КАК Ссылка
	|					ИЗ
	|						втДанные КАК втДанные)) КАК ПочтаКонтрагента
	|		ПО втКонтрагенты.Ссылка = ПочтаКонтрагента.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО (втДанные.Данные = втКонтрагенты.Ссылка)";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеКлиентаXDTO(ДанныеПакета, Счетчик)
	
	ПространствоИмен = "http://BPMonline/sin/response"; 
	
	ДанныеXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TUpdatePartnersInCRMDataItem"));
	
	ДанныеXDTO.SerialNumber = Счетчик;
	ДанныеXDTO.PartnerID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Данные);
	ДанныеXDTO.Name = ДанныеПакета.Наименование;
	ДанныеXDTO.FullName = ДанныеПакета.НаименованиеПолное;
	ДанныеXDTO.PartnerTypeID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.ЮрФизЛицо);
	ДанныеXDTO.GroupID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Группа);
	ДанныеXDTO.RegionID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.БизнесРегион);
	ДанныеXDTO.ResponsibleID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.ОсновнойМенеджер);
	ДанныеXDTO.OKOPFID = "";
	ДанныеXDTO.OKPO = ДанныеПакета.КодПоОКПО;
	ДанныеXDTO.INN = ДанныеПакета.ИНН;
	ДанныеXDTO.KPP = ДанныеПакета.КПП;
	ДанныеXDTO.MixedShipment = XMLСтрока(ДанныеПакета.СмешаннаяОтгрузка);
	ДанныеXDTO.EMailReviseInRubles = ДанныеПакета.ПочтаКонтрагентаРуб;
	ДанныеXDTO.EMailReviseInDalls  = ДанныеПакета.ПочтаКонтрагентаДал;
	
	Возврат ДанныеXDTO;
	
КонецФункции

#КонецОбласти // Клиенты

#Область Адреса

Функция ПодготовитьНепринятыеДанныеАдресов(КоличествоЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыАдресов", ДоступныеВидыКонтактнойИнформации());
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(КоличествоЗаписей = 0, "", " ПЕРВЫЕ " + Строка(КоличествоЗаписей + 1)) + "
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втНепринятыеПакеты
	|ИЗ
	|	РегистрСведений.бг_creatio_ВыгруженныеПакеты.СрезПоследних(, ) КАК бг_creatio_ВыгруженныеПакетыСрезПоследних
	|ГДЕ
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.Принят = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Клиент КАК Клиент,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ВидАдреса КАК ВидАдреса,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(
	|			,
	|			ВидАдреса В (&ВидыАдресов)
	|				И ИдентификаторПакета В
	|					(ВЫБРАТЬ
	|						втНепринятыеПакеты.ИдентификаторПакета КАК ИдентификаторПакета
	|					ИЗ
	|						втНепринятыеПакеты КАК втНепринятыеПакеты)) КАК бг_creatio_РегистрацияИзмененийСрезПоследних";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПодготовитьЗарегистрированныеДанныеАдресов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыАдресов", ДоступныеВидыКонтактнойИнформации());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Клиент КАК Клиент,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ВидАдреса КАК ВидАдреса
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(, ВидАдреса В (&ВидыАдресов)) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|ГДЕ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета = """"";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеАдресаXDTO(ДанныеПакета, Счетчик)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	ДанныеXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TUpdatePartnersAddressesInCRMDataItem"));
	
	ДанныеАдреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
					ДанныеПакета.Клиент, 
					ДанныеПакета.ВидАдреса, 
					ТекущаяДата(),
					Ложь);
		
	Если ДанныеАдреса.Количество() > 0 Тогда
		
		СтрокаАдресаJSON = ДанныеАдреса[0].Значение;
	
		СтруктураАдреса = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(
							СтрокаАдресаJSON, 
							Перечисления.ТипыКонтактнойИнформации.Адрес);
		
		ДанныеXDTO.SerialNumber = Счетчик;
		ДанныеXDTO.PartnerID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Клиент);
		ДанныеXDTO.TypeID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.ВидАдреса);
		ДанныеXDTO.Index = СтруктураАдреса.ZIPcode;
		ДанныеXDTO.Region = СтруктураАдреса.area;
		ДанныеXDTO.Area = СтруктураАдреса.areaType + " " + СтруктураАдреса.area;
		ДанныеXDTO.City = СтруктураАдреса.area;
		ДанныеXDTO.Locality = СтруктураАдреса.locality;
		ДанныеXDTO.Street = СтруктураАдреса.streetType + " " + СтруктураАдреса.street;
		ДанныеXDTO.Represent = СтруктураАдреса.value;
		ДанныеXDTO.HouseNumber = СтруктураАдреса.houseNumber;
		
		Если ЗначениеЗаполнено(СтруктураАдреса.houseType)Тогда
			ДанныеXDTO.HouseTypeID = ЗначениеСУчетомВременногоИдентификатора(СтруктураАдреса.houseType);
		КонецЕсли;
		
		Если ТипЗнч(СтруктураАдреса.buildings) = Тип("Массив") 
			И СтруктураАдреса.buildings.Количество() > 0 Тогда
			
			ДанныеXDTO.BuildingNumber = СтруктураАдреса.buildings[0].number;
			ДанныеXDTO.BuildingTypeID = ЗначениеСУчетомВременногоИдентификатора(СтруктураАдреса.buildings[0].type);
			
		КонецЕсли;
		
		Если ТипЗнч(СтруктураАдреса.apartments) = Тип("Массив")
			И СтруктураАдреса.apartments.Количество() > 0 Тогда
			
			ДанныеXDTO.ApartmentNumber = СтруктураАдреса.apartments[0].number;
			ДанныеXDTO.ApartmentTypeID = ЗначениеСУчетомВременногоИдентификатора(СтруктураАдреса.apartments[0].type);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеXDTO;
	
КонецФункции

#КонецОбласти // Адреса

#Область БанковскиеСчета

Функция ПодготовитьНепринятыеДанныеБанковскихСчетов(КоличествоЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(КоличествоЗаписей = 0, "", " ПЕРВЫЕ " + Строка(КоличествоЗаписей + 1)) + "
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втНепринятыеПакеты
	|ИЗ
	|	РегистрСведений.бг_creatio_ВыгруженныеПакеты.СрезПоследних(, ) КАК бг_creatio_ВыгруженныеПакетыСрезПоследних
	|ГДЕ
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.Принят = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(
	|			,
	|			Данные ССЫЛКА Справочник.БанковскиеСчетаКонтрагентов
	|				И ИдентификаторПакета В
	|					(ВЫБРАТЬ
	|						втНепринятыеПакеты.ИдентификаторПакета КАК ИдентификаторПакета
	|					ИЗ
	|						втНепринятыеПакеты КАК втНепринятыеПакеты)) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Данные,
	|	БанковскиеСчетаКонтрагентов.Банк КАК Банк,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Клиент,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ 
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО БанковскиеСчетаКонтрагентов.Ссылка = втДанные.Данные";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПодготовитьЗарегистрированныеДанныеБанковскихСчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(, Данные ССЫЛКА Справочник.БанковскиеСчетаКонтрагентов) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|ГДЕ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	БанковскиеСчетаКонтрагентов.Ссылка КАК Данные,
	|	БанковскиеСчетаКонтрагентов.Банк КАК Банк,
	|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
	|	БанковскиеСчетаКонтрагентов.Владелец КАК Клиент,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ 
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО БанковскиеСчетаКонтрагентов.Ссылка = втДанные.Данные";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеБанковскогоСчетаXDTO(ДанныеПакета, Счетчик)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	ДанныеXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TUpdateBankAccountsInCRMDataItem"));
	
	ДанныеXDTO.SerialNumber = Счетчик;
	ДанныеXDTO.PartnerID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Клиент);
	ДанныеXDTO.BankAccountID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Данные);
	ДанныеXDTO.BankID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Банк);
	ДанныеXDTO.Number = ДанныеПакета.НомерСчета;
	ДанныеXDTO.IsMain = Ложь;
	
	Возврат ДанныеXDTO;
	
КонецФункции

#КонецОбласти // БанковскиеСчета

#Область Договоры

Функция ПодготовитьНепринятыеДанныеДоговоров(КоличествоЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(КоличествоЗаписей = 0, "", " ПЕРВЫЕ " + Строка(КоличествоЗаписей + 1)) + "
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втНепринятыеПакеты
	|ИЗ
	|	РегистрСведений.бг_creatio_ВыгруженныеПакеты.СрезПоследних(, ) КАК бг_creatio_ВыгруженныеПакетыСрезПоследних
	|ГДЕ
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.Принят = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(
	|			,
	|			ИдентификаторПакета В
	|					(ВЫБРАТЬ
	|						втНепринятыеПакеты.ИдентификаторПакета КАК ИдентификаторПакета
	|					ИЗ
	|						втНепринятыеПакеты КАК втНепринятыеПакеты)
	|				И Данные ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	ДоговорыКонтрагентов.Ссылка КАК Данные,
	|	ДоговорыКонтрагентов.Наименование КАК Наименование,
	|	ДоговорыКонтрагентов.Номер КАК Номер,
	|	ДоговорыКонтрагентов.Дата КАК Дата,
	|	ДоговорыКонтрагентов.Контрагент КАК Клиент,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ДоговорыКонтрагентов.ДатаОкончанияДействия КАК ДатаНачалаДействия,
	|	ВЫБОР 
	|		КОГДА 
	|			ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) 
	|		ТОГДА 
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК РасчетПоДокументам,
	|	ДоговорыКонтрагентов.бг_Соглашение.ВидЦен КАК ВидЦен,
	|	ДоговорыКонтрагентов.Контрагент.бг_ЦФО КАК ЦФО,
	|	ДоговорыКонтрагентов.ТипДоговора КАК ТипДоговора,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО ДоговорыКонтрагентов.Ссылка = втДанные.Данные";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПодготовитьЗарегистрированныеДанныеДоговров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(, 
	|		Данные ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|ГДЕ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	ДоговорыКонтрагентов.Ссылка КАК Данные,
	|	ДоговорыКонтрагентов.Наименование КАК Наименование,
	|	ДоговорыКонтрагентов.Номер КАК Номер,
	|	ДоговорыКонтрагентов.Дата КАК Дата,
	|	ДоговорыКонтрагентов.Контрагент КАК Клиент,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	ДоговорыКонтрагентов.ДатаОкончанияДействия КАК ДатаНачалаДействия,
	|	ВЫБОР 
	|		КОГДА 
	|			ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) 
	|		ТОГДА 
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК РасчетПоДокументам,
	|	ДоговорыКонтрагентов.бг_Соглашение.ВидЦен КАК ВидЦен,
	|	ДоговорыКонтрагентов.Контрагент.бг_ЦФО КАК ЦФО,
	|	ДоговорыКонтрагентов.ТипДоговора КАК ТипДоговора,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО ДоговорыКонтрагентов.Ссылка = втДанные.Данные";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеДоговораXDTO(ДанныеПакета, Счетчик)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	ДанныеXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
					ПространствоИмен, 
					"TUpdateContractsInCRMDataItem"));
	
	ДанныеXDTO.SerialNumber = Счетчик;
	ДанныеXDTO.PartnerID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Клиент);
	ДанныеXDTO.ContractID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Данные);
	ДанныеXDTO.OrganizationID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Организация);
	ДанныеXDTO.Name = ДанныеПакета.Наименование;
	ДанныеXDTO.Number = ДанныеПакета.Номер;
	ДанныеXDTO.Date = ДанныеПакета.Дата;
	ДанныеXDTO.ExpirationDate = ДанныеПакета.ДатаОкончанияДействия;
	ДанныеXDTO.PriceTypeID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.ВидЦен);
	ДанныеXDTO.KeepOnDocuments = ДанныеПакета.РасчетПоДокументам;
	ДанныеXDTO.ProfitCFOID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.ЦФО);
	ДанныеXDTO.TypeID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.ТипДоговора);
	
	Возврат ДанныеXDTO;
	
КонецФункции

#КонецОбласти // Договоры

#Область ПунктыРазгрузки

Функция ПодготовитьНепринятыеДанныеПунктовРазгрузки(КоличествоЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(КоличествоЗаписей = 0, "", " ПЕРВЫЕ " + Строка(КоличествоЗаписей + 1)) + "
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втНепринятыеПакеты
	|ИЗ
	|	РегистрСведений.бг_creatio_ВыгруженныеПакеты.СрезПоследних(, ) КАК бг_creatio_ВыгруженныеПакетыСрезПоследних
	|ГДЕ
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.Принят = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(
	|			,
	|			ИдентификаторПакета В
	|					(ВЫБРАТЬ
	|						втНепринятыеПакеты.ИдентификаторПакета КАК ИдентификаторПакета
	|					ИЗ
	|						втНепринятыеПакеты КАК втНепринятыеПакеты)
	|				И Данные ССЫЛКА Справочник.битПунктыНазначения) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	битПунктыНазначения.Ссылка КАК Данные,
	|	битПунктыНазначения.Клиент КАК Клиент,
	|	битПунктыНазначения.Наименование КАК Наименование,
	|	битПунктыНазначения.ДополнительнаяИнформация КАК Комментарий,
	|	битПунктыНазначения.КПП КАК КПП,
	|	битПунктыНазначения.КодЕГАИС КАК КодЕГАИС,
	|	битПунктыНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЕСТЬNULL(ДанныеЛицензии.Лицензия, ЗНАЧЕНИЕ(Справочник.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка)) КАК Лицензия,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ 
	|	Справочник.битПунктыНазначения КАК битПунктыНазначения 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|			ПО битПунктыНазначения.Ссылка = втДанные.Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бг_ЛицензииПунктовНазначенияСрезПоследних.ПунктНазначения КАК ПунктНазначения,
	|			бг_ЛицензииПунктовНазначенияСрезПоследних.Лицензия КАК Лицензия
	|		ИЗ
	|			РегистрСведений.бг_ЛицензииПунктовНазначения.СрезПоследних КАК бг_ЛицензииПунктовНазначенияСрезПоследних) КАК ДанныеЛицензии
	|		ПО битПунктыНазначения.Ссылка = ДанныеЛицензии.ПунктНазначения";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПодготовитьЗарегистрированныеДанныеПунктовРазгрузки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(, Данные ССЫЛКА Справочник.битПунктыНазначения) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЛицензииПунктовНазначения.СрезПоследних КАК бг_ЛицензииПунктовНазначенияСрезПоследних
	|		ПО бг_creatio_РегистрацияИзмененийСрезПоследних.Данные = бг_ЛицензииПунктовНазначенияСрезПоследних.ПунктНазначения
	|ГДЕ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	битПунктыНазначения.Ссылка КАК Данные,
	|	битПунктыНазначения.Клиент КАК Клиент,
	|	битПунктыНазначения.Наименование КАК Наименование,
	|	битПунктыНазначения.ДополнительнаяИнформация КАК Комментарий,
	|	битПунктыНазначения.КПП КАК КПП,
	|	битПунктыНазначения.КодЕГАИС КАК КодЕГАИС,
	|	битПунктыНазначения.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЕСТЬNULL(ДанныеЛицензии.Лицензия, ЗНАЧЕНИЕ(Справочник.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка)) КАК Лицензия,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ 
	|	Справочник.битПунктыНазначения КАК битПунктыНазначения 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|			ПО битПунктыНазначения.Ссылка = втДанные.Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			бг_ЛицензииПунктовНазначенияСрезПоследних.ПунктНазначения КАК ПунктНазначения,
	|			бг_ЛицензииПунктовНазначенияСрезПоследних.Лицензия КАК Лицензия
	|		ИЗ
	|			РегистрСведений.бг_ЛицензииПунктовНазначения.СрезПоследних КАК бг_ЛицензииПунктовНазначенияСрезПоследних) КАК ДанныеЛицензии
	|		ПО битПунктыНазначения.Ссылка = ДанныеЛицензии.ПунктНазначения";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеПунктовРазгрузкиXDTO(ДанныеПакета, Счетчик)
	
	ПространствоИмен = "http://BPMonline/sin/response"; 
	
	ДанныеXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TUpdateUnloadingPointInCRMDataItem"));
		
	СтруктураАдреса = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
							ДанныеПакета.Данные, 
							"АдресЗначение"), 
						Перечисления.ТипыКонтактнойИнформации.Адрес);
			
	ДанныеXDTO.SerialNumber = Счетчик;
	ДанныеXDTO.PartnerID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Клиент);
	ДанныеXDTO.UnloadingPointID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Данные);
	ДанныеXDTO.Name = ДанныеПакета.Наименование;
	ДанныеXDTO.SeparateDivision = ДанныеПакета.ОбособленноеПодразделение;
	ДанныеXDTO.KPP = ДанныеПакета.КПП;
	ДанныеXDTO.EGAIS = ДанныеПакета.КодЕГАИС;
	ДанныеXDTO.MainLicenseID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Лицензия);
	ДанныеXDTO.Region = ""; // нет данных для отправки
	ДанныеXDTO.Area = СтруктураАдреса.area;;
	ДанныеXDTO.City = СтруктураАдреса.city;
	ДанныеXDTO.Locality = СтруктураАдреса.locality;
	ДанныеXDTO.Street = СтруктураАдреса.street;
	ДанныеXDTO.Index = СтруктураАдреса.ZIPcode;
	ДанныеXDTO.Represent = СтруктураАдреса.value;
	ДанныеXDTO.Comment = ДанныеПакета.Комментарий;
	
	ДанныеXDTO.HouseNumber = СтруктураАдреса.houseNumber;
	ДанныеXDTO.HouseTypeID = ЗначениеСУчетомВременногоИдентификатора(СтруктураАдреса.houseType);
		
	Если ТипЗнч(СтруктураАдреса.buildings) = Тип("Массив") 
		И СтруктураАдреса.buildings.Количество() > 0 Тогда
		
		ДанныеXDTO.BuildingNumber = СтруктураАдреса.buildings[0].number;
		ДанныеXDTO.BuildingTypeID = ЗначениеСУчетомВременногоИдентификатора(СтруктураАдреса.buildings[0].type);
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураАдреса.apartments) = Тип("Массив")
		И СтруктураАдреса.apartments.Количество() > 0 Тогда
		
		ДанныеXDTO.ApartmentNumber = СтруктураАдреса.apartments[0].number;
		ДанныеXDTO.ApartmentTypeID = ЗначениеСУчетомВременногоИдентификатора(СтруктураАдреса.apartments[0].type);
		
	КонецЕсли;
	
	Возврат ДанныеXDTO;
	
КонецФункции

#КонецОбласти // ПунктыРазгрузки

#Область Лицензии

Функция ПодготовитьНепринятыеДанныеЛицензий(КоличествоЗаписей)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ" + ?(КоличествоЗаписей = 0, "", " ПЕРВЫЕ " + Строка(КоличествоЗаписей + 1)) + "
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втНепринятыеПакеты
	|ИЗ
	|	РегистрСведений.бг_creatio_ВыгруженныеПакеты.СрезПоследних(, ) КАК бг_creatio_ВыгруженныеПакетыСрезПоследних
	|ГДЕ
	|	бг_creatio_ВыгруженныеПакетыСрезПоследних.Принят = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(
	|			,
	|			ИдентификаторПакета В
	|					(ВЫБРАТЬ
	|						втНепринятыеПакеты.ИдентификаторПакета КАК ИдентификаторПакета
	|					ИЗ
	|						втНепринятыеПакеты КАК втНепринятыеПакеты)
	|				И Данные ССЫЛКА Справочник.ЛицензииПоставщиковАлкогольнойПродукции) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Ссылка КАК Данные,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец КАК Клиент,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Наименование КАК Наименование,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_НомерРАР КАК НомерРАР,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_ДатаВыдачи КАК ДатаВыдачи,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_ДатаПрекращенияДействия КАК ДатаПрекращенияДействия,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК ДатаНачала,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК ДатаОкончания,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_ТипЛицензии КАК ТипЛицензии,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК КемВыдана,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|			ПО ЛицензииПоставщиковАлкогольнойПродукции.Ссылка = втДанные.Данные";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ПодготовитьЗарегистрированныеДанныеЛицензий()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.Данные КАК Данные,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета КАК ИдентификаторПакета,
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.НомерЗаписиВПакете КАК НомерЗаписиВПакете
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	РегистрСведений.бг_creatio_РегистрацияИзменений.СрезПоследних(, 
	|		Данные ССЫЛКА Справочник.ЛицензииПоставщиковАлкогольнойПродукции) КАК бг_creatio_РегистрацияИзмененийСрезПоследних
	|ГДЕ
	|	бг_creatio_РегистрацияИзмененийСрезПоследних.ИдентификаторПакета = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.ИдентификаторПакета КАК ИдентификаторПакета,
	|	втДанные.НомерЗаписиВПакете КАК НомерЗаписиВПакете,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Ссылка КАК Данные,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Владелец КАК Клиент,
	|	ЛицензииПоставщиковАлкогольнойПродукции.Наименование КАК Наименование,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_НомерРАР КАК НомерРАР,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_ДатаВыдачи КАК ДатаВыдачи,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_ДатаПрекращенияДействия КАК ДатаПрекращенияДействия,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала КАК ДатаНачала,
	|	ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания КАК ДатаОкончания,
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_ТипЛицензии КАК ТипЛицензии,
	|	ЛицензииПоставщиковАлкогольнойПродукции.КемВыдана КАК КемВыдана,
	|	ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяССылка) КАК ВидАдреса
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|			ПО ЛицензииПоставщиковАлкогольнойПродукции.Ссылка = втДанные.Данные";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ДанныеЛицензииXDTO(ДанныеПакета, Счетчик)
	
	ПространствоИмен = "http://BPMonline/sin/response";
	
	ДанныеXDTO = ФабрикаXDTO.Создать(
					ФабрикаXDTO.Тип(
						ПространствоИмен, 
						"TUpdateLicensesInCRMDataItem"));
	
	ДанныеXDTO.SerialNumber = Счетчик;
	ДанныеXDTO.PartnerID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Клиент);
	ДанныеXDTO.LicenseID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.Данные);
	ДанныеXDTO.Name = ДанныеПакета.Наименование;
	ДанныеXDTO.NumberRAR = ДанныеПакета.НомерРАР;
	ДанныеXDTO.DateIssue = ДанныеПакета.ДатаВыдачи;
	ДанныеXDTO.ValidFrom = ДанныеПакета.ДатаНачала;
	ДанныеXDTO.ValidTo = ДанныеПакета.ДатаОкончания;
	ДанныеXDTO.ExpirationDate = ДанныеПакета.ДатаПрекращенияДействия;
	ДанныеXDTO.TypeID = ЗначениеСУчетомВременногоИдентификатора(ДанныеПакета.ТипЛицензии);
	ДанныеXDTO.IssuingAuthority = ДанныеПакета.КемВыдана;
	ДанныеXDTO.RegionID = ""; // нет данных для обмена
	ДанныеXDTO.UntilByID = ""; // вставить идентфикатор
	
	Возврат ДанныеXDTO;
	
КонецФункции

#КонецОбласти // Лицензии

#Область Прочее

Функция ДанныеДляВыгрузкиПоТипу(КоличествоЗаписей, ТипЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПространствоИмен = "http://BPMonline/sin/response";
	Результат = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИмен, ТипЗапроса));
	
	ВыгрузитьВсе = КоличествоЗаписей = 0;
	ТаблицаДанных = Неопределено;
	ИдентификаторПакета = "";
	ЭтоПоследнийПакет = Истина;
	
	ДанныеДляВыгрузки = ДанныеПоТипуЗапроса(КоличествоЗаписей, ТипЗапроса, Ложь);
	
	Если ДанныеДляВыгрузки <> Неопределено 
		И ДанныеДляВыгрузки.Количество() > 0 Тогда
		
		ТаблицаДанных = ФабрикаXDTO.Создать(
							ФабрикаXDTO.Тип(
								ПространствоИмен, 
								ИмяТипаТаблицыДанных(ТипЗапроса)));
		
		Счетчик = 1;
		
		Пока ДанныеДляВыгрузки.Следующий() Цикл
			
			Если ИдентификаторПакета = "" Тогда
				ИдентификаторПакета = ДанныеДляВыгрузки.ИдентификаторПакета;
			ИначеЕсли ИдентификаторПакета <> ДанныеДляВыгрузки.ИдентификаторПакета Тогда
				Счетчик = ДанныеДляВыгрузки.Количество();
				Прервать;
			КонецЕсли;
			
			Если ВыгрузитьВсе Или КоличествоЗаписей >= Счетчик Тогда
				ДанныеОбъекта = ДанныеОбъектаВыгрузки(ДанныеДляВыгрузки, Счетчик, ТипЗапроса);
				Если ДанныеОбъекта <> Неопределено Тогда
					ТаблицаДанных.DataItem.Добавить(ДанныеОбъекта);
				КонецЕсли;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Если КоличествоЗаписей > 0 Тогда
			ЭтоПоследнийПакет = КоличествоЗаписей >= Счетчик;
		КонецЕсли;
		
	Иначе
		
		ДанныеДляВыгрузки = ДанныеПоТипуЗапроса(КоличествоЗаписей, ТипЗапроса, Истина);
		
		Если ДанныеДляВыгрузки.Количество() > 0 Тогда
			
			ТаблицаДанных = ФабрикаXDTO.Создать(
								ФабрикаXDTO.Тип(
									ПространствоИмен, 
									ИмяТипаТаблицыДанных(ТипЗапроса)));
			
			Счетчик = 0;
			
			ИдентификаторПакета = Строка(Новый УникальныйИдентификатор);
			
			Пока ДанныеДляВыгрузки.Следующий() Цикл
				
				Счетчик = Счетчик + 1;
				
				Попытка
					
					РегистрыСведений.бг_creatio_РегистрацияИзменений.ЗарегистрироватьВыгрузкуОбъекта(
						ДанныеДляВыгрузки.Данные,
						ДанныеДляВыгрузки.Клиент, 
						ДанныеДляВыгрузки.ВидАдреса, 
						ИдентификаторПакета, 
						Счетчик);
						
					РегистрыСведений.бг_creatio_ВыгруженныеПакеты.ЗарегистрироватьВыгрузкуПакета(
						ИдентификаторПакета, 
						Счетчик, 
						ТекущаяДата(), 
						Истина, 
						Ложь);
						
				Исключение
					
					ЗаписьЖурналаРегистрации(
						СтрШаблон(НСтр("ru='Вызов метода web-сервиса Creatio %1'"), ТипЗапроса),
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					Продолжить;
					
				КонецПопытки;
				
				Если ВыгрузитьВсе Или КоличествоЗаписей >= Счетчик Тогда
					ДанныеОбъекта = ДанныеОбъектаВыгрузки(ДанныеДляВыгрузки, Счетчик, ТипЗапроса);
					Если ДанныеОбъекта <> Неопределено Тогда
						ТаблицаДанных.DataItem.Добавить(ДанныеОбъекта);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
				
			Если КоличествоЗаписей > 0 Тогда
				ЭтоПоследнийПакет = КоличествоЗаписей >= Счетчик;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.DataPackID = ИдентификаторПакета;
	Результат.IsLastDataPack = ЭтоПоследнийПакет;
	
	Если ТаблицаДанных <> Неопределено Тогда
		Результат.TableDataItem = ТаблицаДанных;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоТипуЗапроса(КоличествоЗаписей, ТипЗапроса, ТолькоИзмененные = Ложь)
	
	Если ТолькоИзмененные Тогда
		
		Если ТипЗапроса = "_UpdatePartnersInCRM" Тогда 
			Возврат ПодготовитьЗарегистрированныеДанныеКлиентов();
		ИначеЕсли ТипЗапроса = "_UpdatePartnersAddressesInCRM" Тогда
			Возврат ПодготовитьЗарегистрированныеДанныеАдресов();
		ИначеЕсли ТипЗапроса = "_UpdateBankAccountsInCRM" Тогда
			Возврат ПодготовитьЗарегистрированныеДанныеБанковскихСчетов();
		ИначеЕсли ТипЗапроса = "_UpdateContractsInCRM" Тогда
			Возврат ПодготовитьЗарегистрированныеДанныеДоговров();
		ИначеЕсли ТипЗапроса = "_UpdateLicensesInCRM" Тогда
			Возврат ПодготовитьЗарегистрированныеДанныеЛицензий();
		ИначеЕсли ТипЗапроса = "_UpdateUnloadingPointInCRM" Тогда
			Возврат ПодготовитьЗарегистрированныеДанныеПунктовРазгрузки();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗапроса = "_UpdatePartnersInCRM" Тогда 
			Возврат ПодготовитьНепринятыеДанныеКлиентов(КоличествоЗаписей);
		ИначеЕсли ТипЗапроса = "_UpdatePartnersAddressesInCRM" Тогда
			Возврат ПодготовитьНепринятыеДанныеАдресов(КоличествоЗаписей);
		ИначеЕсли ТипЗапроса = "_UpdateBankAccountsInCRM" Тогда
			Возврат ПодготовитьНепринятыеДанныеБанковскихСчетов(КоличествоЗаписей);
		ИначеЕсли ТипЗапроса = "_UpdateContractsInCRM" Тогда
			Возврат ПодготовитьНепринятыеДанныеДоговоров(КоличествоЗаписей);
		ИначеЕсли ТипЗапроса = "_UpdateLicensesInCRM" Тогда
			Возврат ПодготовитьНепринятыеДанныеЛицензий(КоличествоЗаписей);
		ИначеЕсли ТипЗапроса = "_UpdateUnloadingPointInCRM" Тогда
			Возврат ПодготовитьНепринятыеДанныеПунктовРазгрузки(КоличествоЗаписей);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеОбъектаВыгрузки(ДанныеДляВыгрузки, Счетчик, ТипЗапроса)
	
	Если ТипЗапроса = "_UpdatePartnersInCRM" Тогда 
		Возврат ДанныеКлиентаXDTO(ДанныеДляВыгрузки, Счетчик);
	ИначеЕсли ТипЗапроса = "_UpdatePartnersAddressesInCRM" Тогда
		Возврат ДанныеАдресаXDTO(ДанныеДляВыгрузки, Счетчик);
	ИначеЕсли ТипЗапроса = "_UpdateBankAccountsInCRM" Тогда
		Возврат ДанныеБанковскогоСчетаXDTO(ДанныеДляВыгрузки, Счетчик);
	ИначеЕсли ТипЗапроса = "_UpdateContractsInCRM" Тогда
		Возврат ДанныеДоговораXDTO(ДанныеДляВыгрузки, Счетчик);
	ИначеЕсли ТипЗапроса = "_UpdateLicensesInCRM" Тогда
		Возврат ДанныеЛицензииXDTO(ДанныеДляВыгрузки, Счетчик);
	ИначеЕсли ТипЗапроса = "_UpdateUnloadingPointInCRM" Тогда
		Возврат ДанныеПунктовРазгрузкиXDTO(ДанныеДляВыгрузки, Счетчик);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти // Прочее

#КонецОбласти // ПакетныйОбмен

#Область Прочее

Функция ЗначениеПоИдентификатору(знач Идентификатор, ИмяОбъектаМетаданных = "")
	
	ОбъектERP = Неопределено;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат ОбъектERP;
	КонецЕсли;
	
	ОбъектERP = ЗначениеПоИдентификаторуУПП(Идентификатор);
	Если ЗначениеЗаполнено(ОбъектERP) Тогда
		Возврат ОбъектERP;
	КонецЕсли;
	
	Попытка
		ОбъектERP = ЗначениеИзСтрокиВнутр(Идентификатор);
	Исключение
		ОбъектERP = Неопределено;
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(ОбъектERP)
		И ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		
		Если СтрДлина(Идентификатор) > 36 Тогда
			Идентификатор = ПолучитьИдентификаторИзСтроки(Идентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Идентификатор)
			И СтрДлина(Идентификатор) = 36 Тогда
			
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъектаМетаданных);
			Если МенеджерОбъекта <> Неопределено Тогда
				
				СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(
									Новый УникальныйИдентификатор(
										Идентификатор));
									
				Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
					ОбъектERP = СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектERP;
	
КонецФункции

Функция ЗначениеПоИдентификаторуУПП(ИдентификаторУПП)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектУПП", ИдентификаторУПП);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеОбъектовУПП.ОбъектERP КАК ОбъектERP
	|ИЗ
	|	РегистрСведений.бг_СоответствиеОбъектовУПП КАК СоответствиеОбъектовУПП
	|ГДЕ
	|	СоответствиеОбъектовУПП.ОбъектУПП = &ОбъектУПП";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ОбъектERP;
	
КонецФункции

Функция ЗначениеСУчетомВременногоИдентификатора(Объект)
	
	Идентификатор = ИдентификаторУПП(Объект);
	
	Если Не ЗначениеЗаполнено(Идентификатор)
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		Идентификатор = СформироватьИдентификаторУПП(Объект);
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ИдентификаторУПП(Объект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектERP", Объект);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеОбъектовУПП.ОбъектУПП КАК ОбъектУПП
	|ИЗ
	|	РегистрСведений.бг_СоответствиеОбъектовУПП КАК СоответствиеОбъектовУПП
	|ГДЕ
	|	СоответствиеОбъектовУПП.ОбъектERP = &ОбъектERP";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ОбъектУПП;
	
КонецФункции

Функция ПолучитьИдентификаторИзСтроки(знач СтрокаИдентификатор)
	
	СтрокаИдентификатор = СтрЗаменить(СтрЗаменить(СтрокаИдентификатор, "}", ""), "{", "");
	СтрокаИдентификатор = СтрРазделить(СтрокаИдентификатор, ",")[2];
	СтрокаИдентификатор = СтрРазделить(СтрокаИдентификатор, ":")[1];
	
	Результат = Прав(СтрокаИдентификатор, 8) + "-" + 
					Сред(СтрокаИдентификатор, 21, 4) + "-" + 
					Сред(СтрокаИдентификатор, 17, 4) + "-" + 
					Лев(СтрокаИдентификатор, 4) + "-" + 
					Сред(СтрокаИдентификатор, 5, 12);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяТипаТаблицыДанных(ТипЗапроса)
	
	СоответствиеТипов = Новый Соответствие;
	
	СоответствиеТипов.Вставить("_UpdatePartnersInCRM", "TUpdatePartnersInCRMTableDataItem");
	СоответствиеТипов.Вставить("_UpdatePartnersAddressesInCRM", "TUpdatePartnersAddressesInCRMTableDataItem");
	СоответствиеТипов.Вставить("_UpdateBankAccountsInCRM", "TUpdateBankAccountsInCRMTableDataItem");
	СоответствиеТипов.Вставить("_UpdateContractsInCRM", "TUpdateContractsInCRMTableDataItem");
	СоответствиеТипов.Вставить("_UpdateLicensesInCRM", "TUpdateLicensesInCRMTableDataItem");
	СоответствиеТипов.Вставить("_UpdateUnloadingPointInCRM", "TUpdateUnloadingPointInCRMTableDataItem");
	
	Возврат СоответствиеТипов.Получить(ТипЗапроса);
	
КонецФункции

Функция ДоступныеВидыКонтактнойИнформации()
	
	ВидыКонтактнойИнформации = Новый Массив;
	
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Возврат ВидыКонтактнойИнформации;
	
КонецФункции

Функция ТребуетсяРегистрацияОбъекта(СсылкаНаОбъект)
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		
		ЗаполнитьДанныеЗапроса(
			Запрос, 
			Справочники.бг_creatio_НастройкиОбмена.ДанныеДляПостроенияЗапроса(
				Перечисления.бг_creatio_ТипыОбъектовОбмена.Заказы));
		
		Запрос.Текст = Запрос.Текст + Символы.ПС + "И ЗаказКлиента.Ссылка = &Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		Возврат Не РезультатЗапроса.Пустой();
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ПодготовитьВременнуюТаблицуКатегорийНМК(Запрос)
	
	ЗаполнитьДанныеЗапроса(
		Запрос, 
		Справочники.бг_creatio_НастройкиОбмена.ДанныеДляПостроенияЗапроса(
			Перечисления.бг_creatio_ТипыОбъектовОбмена.ТоварыНМК));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЗ", "ПОМЕСТИТЬ ТоварныеКатегорииНМК" + Символы.ПС + "ИЗ");
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуКатегорийСКЮ(Запрос)
	
	ЗаполнитьДанныеЗапроса(
		Запрос, 
		Справочники.бг_creatio_НастройкиОбмена.ДанныеДляПостроенияЗапроса(
			Перечисления.бг_creatio_ТипыОбъектовОбмена.ТоварыСКЮ));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЗ", "ПОМЕСТИТЬ ТоварныеКатегорииСКЮ" + Символы.ПС + "ИЗ");
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуВидовЦен(Запрос)
	
	ЗаполнитьДанныеЗапроса(
		Запрос, 
		Справочники.бг_creatio_НастройкиОбмена.ДанныеДляПостроенияЗапроса(
			Перечисления.бг_creatio_ТипыОбъектовОбмена.ВидыЦен));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЗ", "ПОМЕСТИТЬ ТаблицаВидыЦен" + Символы.ПС + "ИЗ");
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуСкладов(Запрос)
	
	ЗаполнитьДанныеЗапроса(
		Запрос, 
		Справочники.бг_creatio_НастройкиОбмена.ДанныеДляПостроенияЗапроса(
			Перечисления.бг_creatio_ТипыОбъектовОбмена.Склады));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИЗ", "ПОМЕСТИТЬ ТаблицаСклады" + Символы.ПС + "ИЗ");
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЗапроса(Запрос, ДанныеДляПостроенияЗапроса)
	
	Запрос.Текст = ДанныеДляПостроенияЗапроса.ТекстЗапроса;
	
	Если ДанныеДляПостроенияЗапроса.Параметры <> Неопределено 
		И ДанныеДляПостроенияЗапроса.Параметры.Количество() > 0 Тогда
		
		Для Каждого Параметр Из ДанныеДляПостроенияЗапроса.Параметры Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИдентификаторУПП(Ссылка)
	
	ИдентификаторСтрокой = "";
	
	НастройкаОбмена = Справочники.бг_creatio_НастройкиОбмена.ДействующаяНастройкаОбмена();
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИдентификаторСтрокой;
	КонецЕсли;
	
	ИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
	СтрокаТаблицы = НастройкаОбмена.ИдентификаторыТиповДанныхУПП.Найти(ИмяОбъектаМетаданных);
	
	Если СтрокаТаблицы <> Неопределено Тогда
		
		ТипМетаданныхДляУПП = СтрокаТаблицы.СтроковоеПредставлениеТипаУПП;
		
		ИдентификаторСтрокой = ЗначениеВСтрокуВнутр(Ссылка);
		ИдентификаторСтрокой = Прав(ИдентификаторСтрокой, 33);
		ИдентификаторСтрокой = "{""#""," + ТипМетаданныхДляУПП + ":" + ИдентификаторСтрокой;
		
		РегистрыСведений.бг_СоответствиеОбъектовУПП.УстановитьСоответствие(Ссылка, ИдентификаторСтрокой);
		
	КонецЕсли;
		
	Возврат ИдентификаторСтрокой;
	
КонецФункции

Функция ПодключитьWSDL()
	
	НастройкаОбмена = Справочники.бг_creatio_НастройкиОбмена.ДействующаяНастройкаОбмена();
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("АдресВебСервиса");
	Реквизиты.Добавить("Логин");
	Реквизиты.Добавить("Пароль");
	Реквизиты.Добавить("URIПространстваИмен");
	Реквизиты.Добавить("ИмяСервиса");
	Реквизиты.Добавить("ИмяТочки");
	
	ФиксированныеРеквизиты = Новый ФиксированныйМассив(Реквизиты);
	
	ДанныеНастройки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						НастройкаОбмена, 
						ФиксированныеРеквизиты);
						
	Определение = Новый WSОпределения(
					ДанныеНастройки.АдресВебСервиса, 
					ДанныеНастройки.Логин, 
					ДанныеНастройки.Пароль, 
					, 
					, 
					Новый ЗащищенноеСоединениеOpenSSL);
					
	всПрокси = Новый WSПрокси(
				Определение, 
				ДанныеНастройки.URIПространстваИмен, 
				ДанныеНастройки.ИмяСервиса, 
				ДанныеНастройки.ИмяТочки);
				
	всПрокси.Пользователь = ДанныеНастройки.Логин;
	всПрокси.Пароль = ДанныеНастройки.Пароль;
	
	Возврат всПрокси;
	
КонецФункции

Функция ЭтоСсылка(Объект)
	
	Возврат ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект));
	
КонецФункции

Функция ТаблицаТоваровПоДаннымXDTO(ДанныеXDTO)
	
	СтруктураСвойств = Новый Структура;
	СтруктураСвойств.Вставить("Код", "ProductID");
	СтруктураСвойств.Вставить("ЭтоСКЮ", "TypeSKU");
	СтруктураСвойств.Вставить("Количество", "Quntity");
	СтруктураСвойств.Вставить("Цена", "Price");
	СтруктураСвойств.Вставить("Наценка", "Markup");
	СтруктураСвойств.Вставить("РучнаяСкидка", "ManualDiscount");
	СтруктураСвойств.Вставить("СуммаСоСкидкой", "TotalWithDiscount");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(18)));
	ТаблицаТоваров.Колонки.Добавить("ЭтоСКЮ", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаТоваров.Колонки.Добавить("Наценка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	ТаблицаТоваров.Колонки.Добавить("РучнаяСкидка", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5, 2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаСоСкидкой", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для Каждого СтрокаДанных Из ДанныеXDTO.TableProduct.Product Цикл
		
		СтрокаТаблицы = ТаблицаТоваров.Добавить();
		
		Для Каждого Элемент Из СтруктураСвойств Цикл
			Если СтрокаДанных.Свойства().Получить(Элемент.Значение) <> Неопределено Тогда
				СтрокаТаблицы[Элемент.Ключ] = СтрокаДанных[Элемент.Значение];
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ЗначенияПолейАдресаПоДаннымXDTO(ДанныеXDTO)
	
	ЗначенияПолей = Новый Структура;
	
	ЗначенияПолей.Вставить("Представление", ДанныеXDTO.Represent);
	ЗначенияПолей.Вставить("Страна", "РОССИЯ");
	ЗначенияПолей.Вставить("КодСтраны", "643");
	ЗначенияПолей.Вставить("Индекс", ДанныеXDTO.Index);
	ЗначенияПолей.Вставить("Регион", ДанныеXDTO.Region);
	ЗначенияПолей.Вставить("КодРегиона", "");
	ЗначенияПолей.Вставить("РегионСокращение", "");
	ЗначенияПолей.Вставить("Район", ДанныеXDTO.Area);
	ЗначенияПолей.Вставить("РайонСокращение", "");
	ЗначенияПолей.Вставить("Город", ДанныеXDTO.City);
	ЗначенияПолей.Вставить("ГородСокращение", "");
	ЗначенияПолей.Вставить("НаселенныйПункт", ДанныеXDTO.Locality);
	ЗначенияПолей.Вставить("НаселенныйПунктСокращение", "");
	ЗначенияПолей.Вставить("Улица", ДанныеXDTO.Street);
	ЗначенияПолей.Вставить("УлицаСокращение", "");
	
	Если ЗначениеЗаполнено(ДанныеXDTO.HouseTypeID) Тогда
		ЗначенияПолей.Вставить("ТипДома", Строка(ЗначениеПоИдентификатору(ДанныеXDTO.HouseTypeID)));
		ЗначенияПолей.Вставить("Дом", ДанныеXDTO.HouseNumber);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.BuildingTypeID) Тогда
		ЗначенияПолей.Вставить("ТипКорпуса", Строка(ЗначениеПоИдентификатору(ДанныеXDTO.BuildingTypeID)));
		ЗначенияПолей.Вставить("Корпус", ДанныеXDTO.BuildingNumber);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеXDTO.ApartmentTypeID) Тогда
		ЗначенияПолей.Вставить("ТипКвартиры", Строка(ЗначениеПоИдентификатору(ДанныеXDTO.ApartmentTypeID)));
		ЗначенияПолей.Вставить("Квартира", ДанныеXDTO.ApartmentNumber);
	КонецЕсли;
	
	ЗначенияПолей.Вставить("Комментарий", НСтр("ru='Загружен из Creatio'"));
	
	Возврат ЗначенияПолей;
	
КонецФункции

Функция ОсновнойМенеджерКонтрагента(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ОсновнойМенеджер;
	
КонецФункции

Функция ОбъектЗагруженИзCreatio(СсылкаНаОбъект)
	
	Возврат РегистрыСведений.бг_creatio_СоответствиеОбъектов.ОбъектЗагруженИзCreatio(СсылкаНаОбъект);
	
КонецФункции

Процедура СохранитьВходящийПакет(ОбъектXDTO, МетодВебСервиса, ВидОбъекта)
	
	Попытка
		ПараметрыОбъекта = РегистрыСведений.бг_creatio_ПолученныеПакеты.СтруктураПараметровОбъекта();
		ПараметрыОбъекта.ВидОбъекта = ВидОбъекта;
		ПараметрыОбъекта.МетодВебСервиса = МетодВебСервиса;
		ИдентификаторПакета = РегистрыСведений.бг_creatio_ПолученныеПакеты.СохранитьПакет(ОбъектXDTO, ПараметрыОбъекта);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось сохранить входящий пакет вызова метода %1 по причине %2'"),
			МетодВебСервиса,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Вызов метода web-сервиса Creatio'"),
			УровеньЖурналаРегистрации.Ошибка,
			, 
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ВосстановитьВходящийПакет(ИдентификаторПакета)
	
	ОбъектXDTO = РегистрыСведений.бг_creatio_ПолученныеПакеты.ВосстановитьПакет(ИдентификаторПакета);
	Возврат ОбъектXDTO
	
КонецФункции

Функция ВыполненыУсловияРегистрацииПоКонстантам(Объект)
	
	ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(Объект.Метаданные());
	Если Объект.ЭтоНовый() И ЭтоСправочник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоЗаказКлиента = ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказКлиента");
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант(
						"ИспользоватьИнтеграциюНСИСCreatio, 
						|ИспользоватьВыгрузкуЗаказовИзERPВCreatio");
	
	Если Не ЗначенияКонстант.ИспользоватьИнтеграциюНСИСCreatio И ЭтоСправочник
		Или Не ЗначенияКонстант.ИспользоватьВыгрузкуЗаказовИзERPВCreatio И ЭтоЗаказКлиента Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СсылкаНаОбъектИсточник(Объект)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.Партнеры") Тогда
		Возврат ПартнерыИКонтрагентыВызовСервера.КонтрагентПартнера(Объект.Ссылка);
	Иначе
		Возврат Объект.Ссылка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти // СлужебныеПроцедурыИФункции
