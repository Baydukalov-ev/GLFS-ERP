#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты = ВыгружаемыеРеквизиты();
	
	ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты);
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		Реквизиты);	

	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	
	ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства);
	
КонецПроцедуры

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта,
	СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;    
	
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	СтандартнаяОбработка = Ложь;
	
	Организация = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.Организация);
	Если Не ЗначениеЗаполнено(Организация) Или Не ОбщегоНазначения.СсылкаСуществует(Организация) Тогда
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Возврат;
	КонецЕсли;
	СтруктураОбъекта.Вставить("Организация", Организация);
	
	ДобавитьКонстантыВСтруктуруОбъекта(СтруктураОбъекта);
	
	Если НачалоДня(СтруктураОбъекта.Дата) <= СтруктураОбъекта.ДатаЗапретаИзмененияРТиУ Тогда
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Возврат;
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.ЭтоНовый() Тогда
		
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Возврат;

	Иначе
		
		Если СокрЛП(ЗагружаемыйОбъект.бг_НомерДокументаУПП) = СокрЛП(СтруктураОбъекта.Номер) Тогда
			
			ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагружаемыйОбъект.бг_НомерДокументаУПП = СтруктураОбъекта.Номер;
	
КонецПроцедуры

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеСообщения.МетаданныеОбъекта <> Метаданные.Документы.ПередачаТоваровХранителю 
		Или Не ЗначениеЗаполнено(ДанныеСообщения.Объект) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ДанныеСообщения.МетаданныеОбъекта = Метаданные.Документы.ПередачаТоваровХранителю Тогда
		
		Результат = Истина;
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДанныеСообщения.Объект, 
				"Организация,Дата");
		
		ДатаНачалаВыгрузкиДокументовПоКомиссии = бг_КонстантыПовтИсп.ЗначениеКонстанты(
			"ДатаНачалаВыгрузкиДокументовПоКомиссии", РеквизитыОбъекта.Организация);
		
		Если Не ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументовПоКомиссии)
			Или РеквизитыОбъекта.Дата < ДатаНачалаВыгрузкиДокументовПоКомиссии Тогда
			ТекстОшибки = НСтр("ru = 'Значение константы ""Дата начала выгрузки документов по комиссии"" не " 
				+ " заполнено или дата документа меньше этого значения.'"); 
			ДанныеСообщения.ТекстОшибки = ТекстОшибки;
			Результат = Ложь;
		Иначе
			ДанныеСообщения.ТекстОшибки = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;

	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт

	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	ТекстПоиска = "NULL КАК Представление";
	ТекстЗамены = "ВыгружаемыйОбъект.Представление КАК Представление";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстПоиска = "ВыгружаемыйОбъект.Товары.Номенклатура.КодЕК_Номенклатуры КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";
	ТекстЗамены = "ЕСТЬNULL(ВыгружаемыйОбъект.Товары.Серия.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры, """") КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстПоиска = "
		|ИЗ
		|	Документ.ПередачаТоваровХранителю КАК ВыгружаемыйОбъект";
	ТекстЗамены = "
		|	, ВыгружаемыйОбъект.Склад.бг_Организация.Префикс КАК ПрефиксОрганизацииСклада
		|ИЗ
		|	Документ.ПередачаТоваровХранителю КАК ВыгружаемыйОбъект";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстЗапросаТаблицаКлючей = 
		бг_ОбщегоНазначенияСервер.ТекстЗапросаБезОбращенияЧерезТочкуКNull(ТекстЗапросаТаблицаКлючей);
	
	РеквизитыАдресов = Новый Структура();
	
	РеквизитыАдресов.Вставить("Организация", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("Контрагент", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("Грузополучатель", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("Грузоотправитель", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ПунктПогрузки", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ПунктРазгрузки", "ЮридическийАдрес,ФактическийАдрес");
	ЗаменитьNullНаПустуюСтрокуВРеквизитахАдресов(ТекстЗапроса, РеквизитыАдресов);	

	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
		И ЗначениеЗаполнено(Объект) Тогда
		ПунктРазгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЗаказКлиента.бг_ПунктНазначения");
		Если Не ЗначениеЗаполнено(ПунктРазгрузки) Тогда
			Грузополучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Грузополучатель"); 
			ПунктРазгрузки = бг_ТранспортнаяЛогистика.ПунктНазначенияГрузополучателя(Грузополучатель);
			Если ЗначениеЗаполнено(ПунктРазгрузки) Тогда
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"ВыгружаемыйОбъект.ЗаказКлиента.бг_ПунктНазначения",
					"ВЫРАЗИТЬ(&ПунктРазгрузки КАК Справочник.битПунктыНазначения)");	
				СтандартнаяОбработка = Ложь;
				адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса,
				                                                                       ТекстЗапросаТаблицаКлючей,
				                                                                       ПараметрыЗапроса,
																					   НастройкаВыгрузки,
																					   Объект);
				ПараметрыЗапроса.Вставить("ПунктРазгрузки", ПунктРазгрузки);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;		

КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_ОбработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Если ДанныеОбъекта.Реквизиты.Количество() = 0 Тогда
		Возврат ДанныеОбъекта;
	КонецЕсли;	
	
	РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
	
	ЗаполнитьРеквизитыТТНИсходящейЕГАИС(РеквизитыОбъекта, Объект);
	
	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Дата, Валюта");	
	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ЗначенияРеквизитовОбъекта.Дата,
		Новый Структура("Валюта", ЗначенияРеквизитовОбъекта.Валюта));
		
	Если Запись.Кратность = 0 Тогда
		КурсВалюты = 1;	
	Иначе	
	    КурсВалюты = Окр(Запись.Курс / Запись.Кратность, 5);
	КонецЕсли;
	
	РеквизитыОбъекта.Вставить("КурсВалюты", КурсВалюты);
	
	ПунктНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Склад.бг_ПунктНазначения");
	Если ЗначениеЗаполнено(ПунктНазначения) Тогда
		Менеджеры = МенеджерыПунктовНазначения(ЗначенияРеквизитовОбъекта.Дата, ПунктНазначения);
	
		Если Менеджеры <> Неопределено Тогда
			Для Каждого Элемент Из Менеджеры Цикл
				РеквизитыОбъекта.Вставить(Элемент.Ключ, Элемент.Значение);	
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыОбъекта.Свойство("Товары") Тогда
		Для Каждого СтрокаТЧ Из РеквизитыОбъекта.Товары Цикл
			Если СтрокаТЧ.Свойство("КодСтроки") Тогда
				СтрокаТЧ.Удалить("КодСтроки");		
			КонецЕсли;
			Если СтрокаТЧ.Свойство("ЗаказКлиента") Тогда
				СтрокаТЧ.Удалить("ЗаказКлиента");		
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ВыгружаемыеРеквизиты()
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("АдресДоставки");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетОрганизации");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетГрузоотправителя");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетГрузополучателя");
	ВыгружаемыеРеквизиты.Добавить("Валюта");
	ВыгружаемыеРеквизиты.Добавить("Грузоотправитель");
	ВыгружаемыеРеквизиты.Добавить("Грузополучатель");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьВыдана");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьДата");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьЛицо");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьНомер");
	ВыгружаемыеРеквизиты.Добавить("ЗаказКлиента");
	ВыгружаемыеРеквизиты.Добавить("Организация");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("СуммаДокумента");
	ВыгружаемыеРеквизиты.Добавить("Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Склад");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("ХозяйственнаяОперация");
	ВыгружаемыеРеквизиты.Добавить("Отпустил");
	ВыгружаемыеРеквизиты.Добавить("ОтпустилДолжность");
	ВыгружаемыеРеквизиты.Добавить("Договор");
	ВыгружаемыеРеквизиты.Добавить("Основание");
	ВыгружаемыеРеквизиты.Добавить("Автор");
	ВыгружаемыеРеквизиты.Добавить("Руководитель");
	ВыгружаемыеРеквизиты.Добавить("ГлавныйБухгалтер");
	ВыгружаемыеРеквизиты.Добавить("ОснованиеДата");
	ВыгружаемыеРеквизиты.Добавить("ОснованиеНомер");
	
	// Реквизиты ТЧ "Товары"
	ВыгружаемыеРеквизиты.Добавить("Товары.ЗаказКлиента");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодСтроки");	
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	ВыгружаемыеРеквизиты.Добавить("Товары.КоличествоУпаковок");
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.Серия");
	ВыгружаемыеРеквизиты.Добавить("Товары.Склад");
	ВыгружаемыеРеквизиты.Добавить("Товары.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Товары.Упаковка");
	ВыгружаемыеРеквизиты.Добавить("Товары.Цена");
	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Представление",
		ОбщегоНазначения.ОписаниеТипаСтрока(100)));
	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ТТНИсходящаяЕГАИС",
		Новый ОписаниеТипов("ДокументСсылка.ТТНИсходящаяЕГАИС")));
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ПунктПогрузки",
		Новый ОписаниеТипов("СправочникСсылка.битПунктыНазначения"),
		"Склад.бг_ПунктНазначения"));

	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ПунктРазгрузки",
		Новый ОписаниеТипов("СправочникСсылка.битПунктыНазначения"),
		"ЗаказКлиента.бг_ПунктНазначения"));

КонецПроцедуры	

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		,
		"ЮридическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		,
		"ЮридическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		,
		"ФактическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		,
		"ФактическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"КурсВалюты",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 5));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_Менеджер",
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

	ДобавитьРеквизитыАдресаКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры

Процедура ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ДлинаСтроки1000 = 1000;
	ОписаниеТипаСтрока1000 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки1000);

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ФизическоеЛицо",
		,
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"Должность",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ПравоПодписиПоДоверенности",
		,
		Новый ОписаниеТипов("Булево"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ОснованиеПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДатаНачала",
		,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДатаОкончания",
		,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДокументПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"НомерДокументаПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДатаДокументаПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДолжностьСсылка",
		,
		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Должности,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ФизическиеЛица,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(100));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ТоварнаяКатегория",
		,
		Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
						
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"КодЕК_Номенклатуры");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ТипНоменклатуры",
		,
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	#Область Реквизиты_упаковки_ЕдиницыИзмерения
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(50));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"НаименованиеПолное",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(100));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Числитель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Знаменатель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
	#КонецОбласти	

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"КодТТSY",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(9));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Адрес", ,
		ОписаниеТипаСтрока1000);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(25));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей,
		"Код",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(25));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"бг_КодЕК_Номенклатуры",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(8));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		"бг_КодКлиентаSY",
		"КодSY");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"бг_Тикер");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОбъектыРасчетов,
		"Объект",,
		Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип);

КонецПроцедуры

Функция РеквизитыАдреса()
	
	РеквизитыАдреса = Новый Структура;
	
	// Общие реквизиты
	РеквизитыАдреса.Вставить("ТипАдреса", "");
	РеквизитыАдреса.Вставить("Представление", "");
	РеквизитыАдреса.Вставить("Страна", "");
	РеквизитыАдреса.Вставить("Комментарий", "");
	
	// Национальные реквизиты
	РеквизитыАдреса.Вставить("Индекс", "");
	РеквизитыАдреса.Вставить("OKTMO", "");
	РеквизитыАдреса.Вставить("Улица", "");
	
	// Населенный пункт
	РеквизитыАдреса.Вставить("Регион", "");
	РеквизитыАдреса.Вставить("Район", "");
	РеквизитыАдреса.Вставить("Город", "");
	РеквизитыАдреса.Вставить("НаселенныйПункт", "");
	РеквизитыАдреса.Вставить("МуниципальныйРайон", "");
	РеквизитыАдреса.Вставить("Поселение", "");
	РеквизитыАдреса.Вставить("ВнутригородскойРайон", "");
	РеквизитыАдреса.Вставить("Территория", "");
	
	// Дом, корпус, квартира
	РеквизитыАдреса.Вставить("ТипДома", "");
	РеквизитыАдреса.Вставить("Дом", "");
	РеквизитыАдреса.Вставить("ТипСтроения", "");
	РеквизитыАдреса.Вставить("Строение", "");
	РеквизитыАдреса.Вставить("ТипПомещения", "");
	РеквизитыАдреса.Вставить("Помещение", "");

	Возврат РеквизитыАдреса;
	
КонецФункции	

Процедура ДобавитьРеквизитыАдресаКВыгрузке(РеквизитыИСвойства)	
		
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ДлинаСтроки1000 = 1000;
	ОписаниеТипаСтрока1000 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки1000);

	РеквизитыАдреса = РеквизитыАдреса();	
	Для Каждого Реквизит Из РеквизитыАдреса Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Если СтрСравнить(ИмяРеквизита, "Страна") = 0 Тогда 
			ТипРеквизита = ОбщегоНазначения.ОписаниеТипаСтрока(100);	
		ИначеЕсли СтрСравнить(ИмяРеквизита, "Индекс") = 0 Тогда
			ТипРеквизита = ОбщегоНазначения.ОписаниеТипаСтрока(6);	
		ИначеЕсли СтрСравнить(ИмяРеквизита, "OKTMO") = 0 Тогда
			ТипРеквизита = ОбщегоНазначения.ОписаниеТипаСтрока(11);	
		Иначе	
			ТипРеквизита = ОписаниеТипаСтрока1000;
		КонецЕсли;
		
		адаптер_НастройкиОбмена.ДобавитьРеквизит(
			РеквизитыИСвойства,
			Метаданные.Справочники.ВидыКонтактнойИнформации,
			,
			ИмяРеквизита,
			ТипРеквизита);
	КонецЦикла;
	
КонецПроцедуры		

Процедура ЗаменитьNullНаПустуюСтрокуВРеквизитахАдресов(ТекстЗапроса, РеквизитыАдресов)
	
	РеквизитыАдреса = РеквизитыАдреса();
	
	Для Каждого РеквизитАдресов Из РеквизитыАдресов Цикл	
		ИмяРеквизитаВладельца = РеквизитАдресов.Ключ; // Например, "Организация"
		СписокАдресов = СтрРазделить(РеквизитАдресов.Значение, ","); // Например, "ЮридическийАдрес,ФактическийАдрес"
		Для Каждого ИмяРеквизитаАдреса Из СписокАдресов Цикл
			Для Каждого Реквизит Из РеквизитыАдреса Цикл
				ИмяРеквизитаПоляАдреса = Реквизит.Ключ; // Например, "Город"
				ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, 
					ИмяРеквизитаАдреса, ИмяРеквизитаПоляАдреса);
			КонецЦикла;
			ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, 
				ИмяРеквизитаАдреса, "Идентификатор");
			ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, 
				ИмяРеквизитаАдреса, "ТаблицаКлючей");
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры	

Процедура ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, ИмяРеквизитаАдреса, ИмяРеквизитаПоляАдреса)
	
	ПсевдонимЗапроса = 
		"NULL КАК " + ИмяРеквизитаВладельца + "_ЗначениеРеквизита" + ИмяРеквизитаАдреса + "_ЗначениеРеквизита"
		+ ИмяРеквизитаПоляАдреса; 
	// Например, "NULL КАК Организация_ЗначениеРеквизитаЮридическийАдрес_ЗначениеРеквизитаГород"
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимЗапроса + ",", "");

КонецПроцедуры	

Процедура ЗаполнитьРеквизитыТТНИсходящейЕГАИС(РеквизитыОбъекта, Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
		И ЗначениеЗаполнено(Объект) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект);
		Запрос.УстановитьПараметр("СтатусыОтменыЕГАИС", Документы.ТТНИсходящаяЕГАИС.бг_СтатусыОтменыЕГАИС());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокТТН.Ссылка КАК ТТНИсходящаяЕГАИС,
		|	СписокТТН.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС
		|ПОМЕСТИТЬ СписокТТН
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК СписокТТН
		|ГДЕ
		|	СписокТТН.ДокументОснование = &Ссылка
		|	И СписокТТН.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТТНИсходящаяЕГАИС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписокТТН.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС,
		|	СписокТТН.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС
		|ИЗ
		|	СписокТТН КАК СписокТТН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
		|		ПО СписокТТН.ТТНИсходящаяЕГАИС = Статусы.Документ
		|ГДЕ
		|	НЕ ЕСТЬNULL(Статусы.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ПустаяСсылка)) В (&СтатусыОтменыЕГАИС)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТТНИсходящаяЕГАИС = Новый Структура();
			ТТНИсходящаяЕГАИС.Вставить(
				"Идентификатор",
				Строка(Выборка.ТТНИсходящаяЕГАИС.УникальныйИдентификатор()));
			ТТНИсходящаяЕГАИС.Вставить("ИдентификаторЕГАИС", Выборка.ИдентификаторЕГАИС);
			
			РеквизитыОбъекта.Вставить("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция МенеджерыПунктовНазначения(ДатаДокумента, ПунктНазначения)

	Результат = Неопределено;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя.Код КАК МаршрутТорговогоПредставителяКод,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя.Наименование КАК МаршрутТорговогоПредставителяНаименование,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя КАК бг_МаршрутТорговогоПредставителя,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.бг_КодБК КАК Менеджербг_КодБК,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.Код КАК МенеджерКод,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.Наименование КАК МенеджерНаименование,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер КАК бг_Менеджер,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.ПризнакЭТК КАК бг_ЭТК
		|ИЗ
		|	РегистрСведений.бг_МенеджерыПунктовНазначения.СрезПоследних(&ДатаДокумента, ПунктНазначения = &ПунктНазначения) КАК бг_МенеджерыПунктовНазначенияСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ПунктНазначения", ПунктНазначения);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Новый Структура;
		
		Результат.Вставить("бг_ЭТК", Выборка.бг_ЭТК);
		
		Если ЗначениеЗаполнено(Выборка.бг_Менеджер) Тогда
			
			Менеджер = Новый Структура;
			Менеджер.Вставить("Идентификатор", Строка(Выборка.бг_Менеджер.УникальныйИдентификатор()));
			Менеджер.Вставить("бг_КодБК", Выборка.Менеджербг_КодБК);
			Менеджер.Вставить("Код", Выборка.МенеджерКод);
			Менеджер.Вставить("Наименование", Выборка.МенеджерНаименование);
			
			Результат.Вставить("бг_Менеджер", Менеджер);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.бг_МаршрутТорговогоПредставителя) Тогда
			
			МаршрутТорговогоПредставителя = Новый Структура;
			МаршрутТорговогоПредставителя.Вставить("Идентификатор",
				Строка(Выборка.бг_МаршрутТорговогоПредставителя.УникальныйИдентификатор()));
			МаршрутТорговогоПредставителя.Вставить("Код",
				Выборка.МаршрутТорговогоПредставителяКод);
			МаршрутТорговогоПредставителя.Вставить("Наименование",
				Выборка.МаршрутТорговогоПредставителяНаименование);
			
			Результат.Вставить("бг_МаршрутТорговогоПредставителя", МаршрутТорговогоПредставителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКонстантыВСтруктуруОбъекта(СтруктураОбъекта)
	
	ДатаЗапретаИзмененияРТиУ = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"ДатаЗапретаИзмененияРТиУ", СтруктураОбъекта.Организация);
	СтруктураОбъекта.Вставить("ДатаЗапретаИзмененияРТиУ", ДатаЗапретаИзмененияРТиУ);
	
КонецПроцедуры

#КонецОбласти