#Область ПрограммныИнтерфейс

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта,
	СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный; 
	Перем адаптер_РаботаСДаннымиИБ;    
	
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");

	СтандартнаяОбработка = Ложь;
	
	ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
	
	Организация = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.Организация);
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты(
			"ЗагружатьКорректировкуРеализацииВВводОстатковПоТоварам", Организация) Тогда
		
		СоздатьВводОстатковТоваров(СтруктураОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты = ВыгружаемыеРеквизиты();
   	ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты);

	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		Реквизиты);	

	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства);
	
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска = "ВыгружаемыйОбъект.Товары.Номенклатура.КодЕК_Номенклатуры КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";
	ТекстЗамены = "ЕСТЬNULL(ВыгружаемыйОбъект.Товары.Серия.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры, """") КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстПоиска = "ВыгружаемыйОбъект.Расхождения.Номенклатура.КодЕК_Номенклатуры КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";
	ТекстЗамены = "ЕСТЬNULL(ВыгружаемыйОбъект.Расхождения.Серия.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры, """") КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
КонецПроцедуры

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеСообщения.МетаданныеОбъекта = Метаданные.Документы.КорректировкаРеализации
		И ЗначениеЗаполнено(ДанныеСообщения.Объект) Тогда
		
		Результат = Истина;
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						ДанныеСообщения.Объект,
						"Организация");
		
		Если Не бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьИнтеграциюКорректировкиРеализации", Организация) Тогда
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Корректировки реализации по организации %1 не выгружаются.
				|(Константа ""Используется интеграция корректировки реализации"")'"), Организация);
			ДанныеСообщения.ТекстОшибки = ТекстОшибки;
			
			Возврат Ложь;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Если ДанныеОбъекта.Реквизиты.Количество() = 0 Тогда
		Возврат ДанныеОбъекта;
	КонецЕсли;	
	
	РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
	
	СписокРеквизитов = Новый Массив;
	СписокРеквизитов.Добавить("Дата");
	СписокРеквизитов.Добавить("Валюта");
	СписокРеквизитов.Добавить("ДокументОснование.бг_ПунктНазначения");
	СписокРеквизитов.Добавить("ДокументОснование.бг_ЗаказРозничногоПокупателя");
	СписокРеквизитов.Добавить("ДокументОснование.бг_ЗаказРозничногоПокупателя.бг_ПунктНазначения");
	
	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, СписокРеквизитов);
	
	ЗаполнитьКурсВалютыВыгружаемогоОбъекта(
		РеквизитыОбъекта,
		ЗначенияРеквизитовОбъекта.Дата,
		ЗначенияРеквизитовОбъекта.Валюта);

	ЗаполнитьМенеджеровВыгружаемогоОбъекта(РеквизитыОбъекта, ДанныеСообщения, ЗначенияРеквизитовОбъекта);		
		
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	Если ИсточникОбъект <> Неопределено Тогда
		ПрефиксОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникОбъект.Организация, "Префикс");
		Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда
			КлючМаршрутизации = СтрШаблон("%1.%2", КлючМаршрутизации, ПрефиксОрганизации);
		КонецЕсли;	
	ИначеЕсли ДанныеСообщения.Свойство("Объект") И ОбщегоНазначения.СсылкаСуществует(ДанныеСообщения.Объект) Тогда
		ПрефиксОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "Организация.Префикс");
		Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда
			КлючМаршрутизации = СтрШаблон("%1.%2", КлючМаршрутизации, ПрефиксОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючМаршрутизации;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("ДокументОснование");
	ВыгружаемыеРеквизиты.Добавить("Склад");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("Организация");
    	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("ВидКорректировки");
	ВыгружаемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
	ВыгружаемыеРеквизиты.Добавить("НомерВходящегоДокумента");
	ВыгружаемыеРеквизиты.Добавить("Автор");
	
	// Реквизиты ТЧ "Товары"
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.Упаковка");
	ВыгружаемыеРеквизиты.Добавить("Товары.КоличествоУпаковок");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	ВыгружаемыеРеквизиты.Добавить("Товары.Цена");
	ВыгружаемыеРеквизиты.Добавить("Товары.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Товары.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаСНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Склад");
	ВыгружаемыеРеквизиты.Добавить("Товары.ЗаказКлиента");
	ВыгружаемыеРеквизиты.Добавить("Товары.Серия");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодТНВЭД");
	ВыгружаемыеРеквизиты.Добавить("Товары.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодСтроки");
	
	// Реквизиты ТЧ "Расхождения"
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Упаковка");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.КоличествоУпаковок");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Количество");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.бг_СуммаАкциза");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.СуммаСНДС");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Склад");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.ЗаказКлиента");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Серия");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.КодТНВЭД");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.КодСтроки");
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
			
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ЗаказКлиентаОтгрузкаИзERP",
		Новый ОписаниеТипов("Булево"),
		"ДокументОснование.ЗаказКлиента.бг_ОтгрузкаИзERP"));

КонецПроцедуры	

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"КурсВалюты",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 5));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_Менеджер",
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_МаршрутТорговогоПредставителя",
		Новый ОписаниеТипов("СправочникСсылка.бг_МаршрутыТорговыхПредставителей"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_ЭТК",
		Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры	

Процедура ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
			
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ТоварнаяКатегория",
		,
		Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"КодЕК_Номенклатуры");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"бг_КодЕК_Номенклатуры",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(8));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.РеализацияТоваровУслуг,
		"ЗаказКлиента",
		,
		Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
			
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		"бг_КодКлиентаSY",
		"КодSY");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"бг_Тикер");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ФизическиеЛица,
		"Наименование");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей,
		"Наименование");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей,
		"Код");
		
КонецПроцедуры

Процедура ЗаполнитьКурсВалютыВыгружаемогоОбъекта(РеквизитыОбъекта, Дата, Валюта)

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,
		Новый Структура("Валюта", Валюта));
		
	Если Запись.Кратность = 0 Тогда
		КурсВалюты = 1;	
	Иначе	
	    КурсВалюты = Окр(Запись.Курс / Запись.Кратность, 5);
	КонецЕсли;
	
	РеквизитыОбъекта.Вставить("КурсВалюты", КурсВалюты);

КонецПроцедуры

Процедура ЗаполнитьМенеджеровВыгружаемогоОбъекта(РеквизитыОбъекта, ДанныеСообщения, ЗначенияРеквизитовОбъекта)
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовОбъекта.ДокументОснованиебг_ЗаказРозничногоПокупателя) Тогда
		ПунктНазначения = ЗначенияРеквизитовОбъекта.ДокументОснованиебг_ЗаказРозничногоПокупателябг_ПунктНазначения;
	Иначе
		ПунктНазначения = ЗначенияРеквизитовОбъекта.ДокументОснованиебг_ПунктНазначения;
	КонецЕсли;
	
	Менеджеры = МенеджерыПунктовНазначения(
		ДанныеСообщения,
		ЗначенияРеквизитовОбъекта.Дата,
		ПунктНазначения);
	
	Если Менеджеры <> Неопределено Тогда
		Для каждого Элемент Из Менеджеры Цикл
			РеквизитыОбъекта.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Функция МенеджерыПунктовНазначения(ДанныеСообщения, ДатаДокумента, ПунктНазначения)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя.Код КАК бг_МаршрутТорговогоПредставителя_ЗначениеРеквизитаКод,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя.Наименование КАК бг_МаршрутТорговогоПредставителя_ЗначениеРеквизитаНаименование,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя КАК бг_МаршрутТорговогоПредставителя_ЗначениеРеквизитаИдентификатор,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.бг_КодБК КАК бг_Менеджер_ЗначениеРеквизитабг_КодБК,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.Код КАК бг_Менеджер_ЗначениеРеквизитаКод,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.Наименование КАК бг_Менеджер_ЗначениеРеквизитаНаименование,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер КАК бг_Менеджер_ЗначениеРеквизитаИдентификатор,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.ПризнакЭТК КАК бг_ЭТК
		|ИЗ
		|	РегистрСведений.бг_МенеджерыПунктовНазначения.СрезПоследних(&ДатаДокумента, ПунктНазначения = &ПунктНазначения) КАК бг_МенеджерыПунктовНазначенияСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ПунктНазначения", ПунктНазначения);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизиты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		РезультатЗапроса,
		Неопределено,
		ДанныеСообщения);
		
	Если Реквизиты.Количество() Тогда
		Возврат Реквизиты[0];
	КонецЕсли;	
			
	Возврат Неопределено;
	
КонецФункции 

Процедура СоздатьВводОстатковТоваров(СтруктураОбъекта)
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	Перем адаптер_РаботаСДаннымиИБ;
	
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ВводОстатковТоваров = Неопределено;
	
	ИдентификаторУПП = СтруктураОбъекта.Идентификатор;
	
	Если ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		ВводОстатковТоваров = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку("Документ.ВводОстатковТоваров", ИдентификаторУПП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВводОстатковТоваров) И ОбщегоНазначения.СсылкаСуществует(ВводОстатковТоваров) Тогда
		ДокументОбъект = ВводОстатковТоваров.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ВводОстатковТоваров.СоздатьДокумент();
	КонецЕсли;
	
	Если Не СтруктураОбъекта.Свойство("бг_ДвиженияПоТоварамОрганизации")
		Или СтруктураОбъекта.бг_ДвиженияПоТоварамОрганизации = Неопределено Тогда
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			Возврат;
		Иначе
			ДокументОбъект.Проведен = Ложь;
			ДокументОбъект.ПометкаУдаления = СтруктураОбъекта.ПометкаУдаления;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	ТаблицаТовары = ТаблицаТоваров(СтруктураОбъекта);

	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
		ДокументОбъект,
		СтруктураОбъекта);
	
	ДокументОбъект.Автор = Пользователи.ТекущийПользователь();
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
	ДокументОбъект.ОтражатьВОперативномУчете = Истина;
	
	ДокументОбъект.Товары.Очистить();
		
	Для Каждого СтрокаТовар Из СтруктураОбъекта.бг_ДвиженияПоТоварамОрганизации Цикл
		
		НоваяСтрокаТовар = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовар, СтрокаТовар);
		НоваяСтрокаТовар.КоличествоУпаковок = СтрокаТовар.Количество;
		
	КонецЦикла;
	
	Если ДокументОбъект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДС(ДокументОбъект);
	ОбработатьТабличнуюЧасть(ДокументОбъект);
	
	Комментарий = НСтр("ru = '#Создано на основании ""Корректировка реализации"" №%1 от %2 из УПП#'");
	
	ДокументОбъект.Комментарий =
			СтрШаблон(Комментарий, СтруктураОбъекта.Номер, Формат(СтруктураОбъекта.Дата, "ДФ=dd.MM.yyyy"));
			
	Если ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		СсылкаНовогоОбъекта = Документы.ВводОстатковТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУПП));
		ДокументОбъект.УстановитьСсылкуНового(СсылкаНовогоОбъекта);
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);

	Если СтруктураОбъекта.Проведен Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Создание ""Ввода остатков товаров"" на основании документа ""Корректировка реализации из УПП'"),
				УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаТоваров(СтруктураОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ТаблицаТовары = ПустаяТаблицаДляЗагрузки();
	
	СписокТоваров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		СтруктураОбъекта, "бг_ДвиженияПоТоварамОрганизации", Новый Массив);
	
	Для Каждого СтрокаТовар Из СписокТоваров Цикл
		
		НоваяСтрокаТовары = ТаблицаТовары.Добавить();
		
		НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовар.Количество;

		Номенклатура = Неопределено;
		Серия = Неопределено;
		
		СерияНоменклатуры = Неопределено;
		СтрокаТовар.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			// Определить номенклатуру по серии
			Серия = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку(
				"Справочник.СерииНоменклатуры", СтрокаТовар.СерияНоменклатуры.Идентификатор);
			
			Если ОбщегоНазначения.СсылкаСуществует(Серия) Тогда
				Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "бг_Номенклатура");
			Иначе
				Серия = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		КодЕК = Неопределено;
		Если СтрокаТовар.Свойство("ЕКНоменклатура")
			И ЗначениеЗаполнено(СтрокаТовар.ЕКНоменклатура) Тогда
			СтрокаТовар.ЕКНоменклатура.Свойство("Код", КодЕК);
			СтрокаТовар.Номенклатура.Вставить("КодЕК_Номенклатуры", КодЕК);
		Иначе
			Если СтрокаТовар.Свойство("ЕКПОСМ")
				И ЗначениеЗаполнено(СтрокаТовар.ЕКПОСМ) Тогда
				СтрокаТовар.ЕКПОСМ.Свойство("Код", КодЕК);
				СтрокаТовар.Номенклатура.Вставить("КодЕК_ПОСМ", КодЕК);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			// Найти номенклатуру по идентификатору или коду ЕК
			Номенклатура = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтрокаТовар.Номенклатура);
		КонецЕсли;
		
		РеквизитыПаллеты = РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК);
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			// Установить номенклатуру по владельцу упаковки
			Номенклатура = РеквизитыПаллеты.Владелец;
		КонецЕсли;
		
		НоваяСтрокаТовары.Номенклатура = Номенклатура;
		НоваяСтрокаТовары.Серия = Серия;
		
	КонецЦикла;
	
	СписокНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
	РеквизитыНоменклатуры = РеквизитыНоменклатуры(СписокНоменклатуры);
	
	Для Каждого ЗначенияРеквизитов Из РеквизитыНоменклатуры Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", ЗначенияРеквизитов.Номенклатура);
		НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТаблицыТовары Из НайденныеСтроки Цикл
			
			СтрокаТаблицыТовары.УчетПоСериям = ЗначенияРеквизитов.ИспользоватьСерии;
			Если Не СтрокаТаблицыТовары.УчетПоСериям Тогда
				СтрокаТаблицыТовары.Серия = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаТовары;
	
КонецФункции

Функция РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК)
	
	Результат = Новый Структура;
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("Владелец", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	Если Не ЗначениеЗаполнено(КодЕК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &КодЕК
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипЕдиницыИзмеренияПаллета
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодЕК", КодЕК);
	Запрос.УстановитьПараметр("ТипЕдиницыИзмеренияПаллета",
		ПредопределенноеЗначение("Перечисление.бг_ТипыЕдиницИзмерения.Паллета"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыНоменклатуры(СписокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	Номенклатура.ВидНоменклатуры.бг_УстановитьДействиеОтгрузитьВЗаказеПриЗагрузкеРТиУ КАК УстановитьДействиеОтгрузитьВЗаказеПриЗагрузкеРТиУ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяТаблицаДляЗагрузки()
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаТовары.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("УчетПоСериям", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаТовары;
	
КонецФункции

Процедура ОбработатьТабличнуюЧасть(ДокументОбъект)
	
	ПараметрыЗаполненияСтавкиНДС = 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокументОбъект);
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	
	ПараметрыУказанияСерий =
			Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
						ДокументОбъект,
						Документы.ВводОстатковТоваров));
						
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			ДокументОбъект,
			ПараметрыУказанияСерий);

	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
				ДокументОбъект.Товары,
				СтруктураДействий,
				КэшированныеЗначения);

КонецПроцедуры

Процедура ЗаполнитьНалогообложениеНДС(ДокументОбъект)
	
	ПараметрыЗаполнения = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(
		ДокументОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ДокументОбъект.НалогообложениеНДС, ПараметрыЗаполнения);

КонецПроцедуры

#КонецОбласти 
