#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт		
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	Если (РеквизитыИСвойства.Свойство("ПространствоИменИсходное")
			И РеквизитыИСвойства.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеReserveOrderResponse())
		Или (РеквизитыИСвойства.Свойство("ПространствоИмен")
			И РеквизитыИСвойства.ПространствоИмен = бг_ИнтеграцияSAP.ПространствоИменReserveOrderResponse()) Тогда
			
		// Для выгрузки ReserveOrderResponse (подтверждение резервированияч по предзаказу) реализована отдельная схема.
		ЗаполнитьСоставВыгружаемыхОбъектовReserveOrderResponse(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка);
		
	ИначеЕсли (РеквизитыИСвойства.Свойство("ПространствоИменИсходное")
			И РеквизитыИСвойства.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеOrderSP())
		Или (РеквизитыИСвойства.Свойство("ПространствоИмен")
			И РеквизитыИСвойства.ПространствоИмен = бг_ИнтеграцияSAP.ПространствоИменOrderSP()) Тогда
			
		// Для выгрузки OrderSP (подтверждение отгрузки по заказу для SAP) реализована отдельная схема.
		ЗаполнитьСоставВыгружаемыхОбъектовOrderSP(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка);
		
	Иначе
		
		// Выгрузка по основной схеме данных.
		Реквизиты = ВыгружаемыеРеквизиты();
		
		адаптер_НастройкиОбмена.УстановитьРеквизиты(
			РеквизитыИСвойства, 
			РеквизитыИСвойства.МетаданныеОбъекта, 
			Реквизиты);
			
		ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт

	Если (ДанныеСообщения.Свойство("ПространствоИменИсходное")
			И ДанныеСообщения.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеReserveOrderResponse())
		Или (ДанныеСообщения.Свойство("ПространствоИмен")
			И ДанныеСообщения.ПространствоИмен = бг_ИнтеграцияSAP.ПространствоИменReserveOrderResponse()) Тогда
			
		// Для выгрузки ReserveOrderResponse (подтверждение резервированияч по предзаказу) реализована отдельная схема.
		Возврат ПолучитьДанныеВыгружаемогоОбъектаReserveOrderResponse(Объект, ДанныеСообщения);
		
	ИначеЕсли (ДанныеСообщения.Свойство("ПространствоИменИсходное")
			И ДанныеСообщения.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеOrderSP())
		Или (ДанныеСообщения.Свойство("ПространствоИмен")
			И ДанныеСообщения.ПространствоИмен = бг_ИнтеграцияSAP.ПространствоИменOrderSP()) Тогда
			
		// Для выгрузки OrderSP (подтверждение отгрузки по заказу для SAP) реализована отдельная схема.
		Возврат ПолучитьДанныеВыгружаемогоОбъектаOrderSP(Объект, ДанныеСообщения);
		
	Иначе	
		
		// Выгрузка по основной схеме данных.
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Процедура ПередРегистрациейИсходящегоСообщения(Источник, НастройкиВыгрузки) Экспорт

	// При интерактивной записи заявки клиента не надо регистрировать к выгрузке заявку по настройкам:
	//  ReserveOrderResponse - подтверждение резервированияч по предзаказу, регистрируются при обработке очереди заданий.
	//  OrderSP - подтверждение отгрузки по заказу для SAP реализована, регистрируются при обработке очереди заданий. 
	Если ТипЗнч(НастройкиВыгрузки) = Тип("Массив") Тогда
		
		КоличествоНастроек = НастройкиВыгрузки.Количество();
		Для СчетчикНастроек = 1 По КоличествоНастроек Цикл 
			ИндексНастройки = КоличествоНастроек - СчетчикНастроек; 
			НастройкаВыгрузки = НастройкиВыгрузки[ИндексНастройки];
			Если НастройкаВыгрузки.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеReserveOrderResponse()
				Или НастройкаВыгрузки.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеOrderSP() Тогда
				НастройкиВыгрузки.Удалить(ИндексНастройки);	
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Если (ДанныеСообщения.Свойство("ПространствоИменИсходное")
			И ДанныеСообщения.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеReserveOrderResponse())
		Или (ДанныеСообщения.Свойство("ПространствоИмен")
			И ДанныеСообщения.ПространствоИмен = бг_ИнтеграцияSAP.ПространствоИменReserveOrderResponse()) Тогда
			
		// Для выгрузки ReserveOrderResponse (подтверждение резервированияч по предзаказу) реализована отдельная схема.
		КлючМаршрутизации = "xml.Документ.битЗаявкаКлиента.Результат";
		
	ИначеЕсли (ДанныеСообщения.Свойство("ПространствоИменИсходное")
			И ДанныеСообщения.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеOrderSP())
		Или (ДанныеСообщения.Свойство("ПространствоИмен")
			И ДанныеСообщения.ПространствоИмен = бг_ИнтеграцияSAP.ПространствоИменOrderSP()) Тогда
			
		// Для выгрузки OrderSP (подтверждение отгрузки по заказу для SAP) реализована отдельная схема.
		КлючМаршрутизации = "xml.OrderSP";
		
	Иначе	
		
		// Выгрузка по основной схеме данных.
		КлючМаршрутизации = Неопределено;
		
	КонецЕсли;
	
	Если КлючМаршрутизации <> Неопределено 
		И ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("ИсточникЗаказа") Тогда
		КлючМаршрутизации = КлючМаршрутизации + "." + ДанныеСообщения.ДополнительныеСвойстваОбъекта.ИсточникЗаказа;
	КонецЕсли;	
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Функция ЗаголовкиИсходящегоСообщения(ДанныеСообщения, Объект, НастройкаВыгрузки) Экспорт
	
	ЗаголовкиСообщения = Неопределено;
	
	Если ДанныеСообщения.Свойство("RoutingKey")
		И СтрНайти(ДанныеСообщения.RoutingKey, ".SAP") > 0 Тогда
		ЗаголовкиСообщения = бг_ИнтеграцияSAP.ЗаголовкиИсходящегоСообщенияJMS(ДанныеСообщения);
	КонецЕсли;
	
	// Добавим в заголовки сообщения RMQ номер заказа. 
	// Использует Hybris для обработки на сайте ответов от ERP на интернет-заказы.
	Если ДанныеСообщения.Свойство("ДополнительныеСвойстваОбъекта") 
		И ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("НомерЗаказа") Тогда
		НомерЗаказа = ДанныеСообщения.ДополнительныеСвойстваОбъекта.НомерЗаказа;
		Если ЗначениеЗаполнено(НомерЗаказа) Тогда
			Если ЗаголовкиСообщения = Неопределено Тогда
				ЗаголовкиСообщения = Новый Структура;	
	        КонецЕсли;
			ЗаголовкиСообщения.Вставить("НомерЗаказа", НомерЗаказа);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ЗаголовкиСообщения;

КонецФункции

Процедура ПослеОбработкиСообщения(ДанныеСообщения, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Если ДанныеСообщения.СобытиеСообщения <> ПредопределенноеЗначение("Перечисление.адаптер_СобытияСообщений.Ошибка") Тогда
		Возврат;
	КонецЕсли;
	
	// При ошибке обработки сообщения с заявкой клиента надо сформировать ответное сообщение
	// с кодом ответа "400".
	НомерЗаказа = "";
	Если ДанныеСообщения.Свойство("Заголовки")
		И ДанныеСообщения.Заголовки.Свойство("НомерЗаказа") Тогда
		НомерЗаказа = ДанныеСообщения.Заголовки.НомерЗаказа; 
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(НомерЗаказа) Тогда
		// В заголовках сообщения не было заголовка НомерЗаказа, 
		// возможно это сообщение не от Hybris.
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("ПолноеИмя", "Документ.битЗаявкаКлиента");
	ДанныеОбъекта.Вставить("Реквизиты", Новый Массив);
	
	РеквизитыОбъекта = Новый Структура;
	РеквизитыОбъекта.Вставить("Номер", НомерЗаказа);
	РеквизитыОбъекта.Вставить("Результат", Новый Структура("РезультатКод,РезультатОписание", "400", "Ошибка чтения xml."));
	ДанныеОбъекта.Реквизиты.Добавить(РеквизитыОбъекта); 	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеОбъекта", ДанныеОбъекта);
	ДополнительныеПараметры.Вставить("НомерЗаказа", НомерЗаказа);
	
	бг_ИнтеграцияSAP.ЗарегистрироватьИсходящееСообщениеReserveOrderResponse(
								ПредопределенноеЗначение("Документ.битЗаявкаКлиента.ПустаяСсылка"), 
								"400",
								"Ошибка чтения xml.",
								Не Документы.битЗаявкаКлиента.ФормироватьЗаказыКлиентовРегламентнымЗаданием(),
								ДополнительныеПараметры);	
	
КонецПроцедуры	

Функция НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта) Экспорт
	
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат Документы.битЗаявкаКлиента.ПустаяСсылка();
	КонецЕсли; 
	
	НайденнаяСсылка = НайтиСсылкуПоИдентификатору(СтруктураОбъекта); 
	Если НайденнаяСсылка <> Неопределено 
		И ОбщегоНазначения.СсылкаСуществует(НайденнаяСсылка) Тогда
		Возврат НайденнаяСсылка;
	КонецЕсли;
	
	Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "ГУИДЗаказаСПортала") Тогда
		НайденнаяСсылка = НайтиЗаявкуКлиентаПоГУИДЗаказаСПортала(СтруктураОбъекта.ГУИДЗаказаСПортала, НайденнаяСсылка);
	Иначе
		КодSAP = "";
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "Дата") Тогда
			// В заказах от Hybris даты нет, таким образом ключ поиска будет состоять только из номера.
			КодSAP = Формат(СтруктураОбъекта.Дата, "ДФ=yyyyMMdd") + "_";
		КонецЕсли;
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "Номер") Тогда
			КодSAP = КодSAP + СокрЛП(СтруктураОбъекта.Номер);
		КонецЕсли;
		СтруктураОбъекта.Вставить("КодSAP", КодSAP);
		
		Если Не ПустаяСтрока(КодSAP) Тогда
			НайденнаяСсылка = НайтиЗаявкуКлиентаПоКодуSAP(КодSAP, НайденнаяСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденнаяСсылка;
	
КонецФункции

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, 
			ИсключаяСвойства, СтандартнаяОбработка) Экспорт
			
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "Дата") Тогда	
		СтруктураОбъекта.Вставить("ДатаПоДаннымКлиента", СтруктураОбъекта.Дата);
	КонецЕсли;	
	Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "Номер") Тогда	
		СтруктураОбъекта.Вставить("НомерПоДаннымКлиента", СтруктураОбъекта.Номер);
	КонецЕсли;	
	Если СтруктураОбъекта.Свойство("Номер") Тогда
		// Удалим номер, если он есть, чтобы номер документа в системе 1С был сгенерирован автоматически
		// по правилам автонумерации, а не заполнялся полученным номером другой системы.
		СтруктураОбъекта.Удалить("Номер");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// В интернет-заказах в теле сообщения не передается дата, в качестве даты ставим текущую дату момента загрузки. 
	// Чтобы заявка не прыгала на текущую дату при повторной загрузке, запомним дату, 
	// до заполнения обекта из структуры, в случае если заявка уже существует.
	Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Дата) Тогда
		ДатаЗаявки = ЗагружаемыйОбъект.Дата;
	Иначе
		ДатаЗаявки = ТекущаяДатаСеанса();	
	КонецЕсли;	
	
	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта);  
	
	Если Не НужноЗагружатьЗаявкуКлиента(ЗагружаемыйОбъект) Тогда
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Возврат;
	КонецЕсли;	
		
	Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "ПометкаУдаления") 
		И СтруктураОбъекта.ПометкаУдаления = Истина Тогда
		ЗагружаемыйОбъект.Проведен = Ложь;	
	Иначе
		ЗагружаемыйОбъект.Проведен = Истина;
	КонецЕсли;		
	
	Если ЗагружаемыйОбъект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "КодСкладаИнтернетМагазина") Тогда	
			ЗагружаемыйОбъект.Организация = 
				бг_ИнтеграцияSAP.ОрганизацияПоКодуСкладаИнтернетМагазина(СтруктураОбъекта.КодСкладаИнтернетМагазина);	
		КонецЕсли;
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "КодГрузополучателя") Тогда
			Грузополучатель = бг_ИнтеграцияSAP.КонтрагентПоКодуSAP(СтруктураОбъекта.КодГрузополучателя);	
			Если ЗначениеЗаполнено(Грузополучатель) Тогда
				ЗагружаемыйОбъект.Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Грузополучатель, "ГоловнойКонтрагент");
			КонецЕсли;
		КонецЕсли;
		ЗагружаемыйОбъект.Дата = ДатаЗаявки;
		ЗагружаемыйОбъект.ДатаПоДаннымКлиента = ДатаЗаявки;
	ИначеЕсли ЗагружаемыйОбъект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
		Или ЗагружаемыйОбъект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
			
    	бг_ИнтеграцияB2B.ЗаполнитьЗагружаемыйОбъектB2B(ЗагружаемыйОбъект, СтруктураОбъекта);
	Иначе	
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "КодКонтрагента") Тогда	
			ЗагружаемыйОбъект.Организация = бг_ИнтеграцияSAP.ОрганизацияПоКодуSAP(СтруктураОбъекта.КодКонтрагента);	
		КонецЕсли;	
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "КодОрганизации") Тогда	
			ЗагружаемыйОбъект.Контрагент = бг_ИнтеграцияSAP.КонтрагентПоКодуSAP(СтруктураОбъекта.КодОрганизации);
		КонецЕсли;	
		ЗагружаемыйОбъект.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.Резервирование;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Контрагент) Тогда
		ЗагружаемыйОбъект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗагружаемыйОбъект.Контрагент, "Партнер");	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("СтандартнаяЗаписьНеТребуется")
		И ЗагружаемыйОбъект.ДополнительныеСвойства.СтандартнаяЗаписьНеТребуется Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	адаптер_ОбработчикиСобытийСтандартный.ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект);
	
КонецПроцедуры

Процедура ПослеЗаписиДанныхОбъектаВИБ(ЗагружаемыйОбъект, РезультатОбработки) Экспорт
	
	Если Не РезультатОбработки.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НужноЗагружатьЗаявкуКлиента(ЗагружаемыйОбъект) Тогда
		РезультатОбработки.Вставить("Успешно", Ложь);
		РезультатОбработки.Вставить("СобытиеСообщения", ПредопределенноеЗначение("Перечисление.адаптер_СобытияСообщений.Пропущено"));
		РезультатОбработки.Вставить("ТекстОшибки",
				НСтр("ru = 'Заявка клиента не предназначена для загрузки в текущую ИБ.';
					 |en = 'Заявка клиента не предназначена для загрузки в текущую ИБ.'"));
		Возврат;		
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS 
		И Документы.битЗаявкаКлиента.ФормироватьЗаказыКлиентовРегламентнымЗаданием() Тогда
		бг_ИнтеграцияSAP.ПроверитьЗапуститьФоновоеЗаданиеФормированияИнтернетЗаказов();
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("НаименованиеОрганизации");
	ВыгружаемыеРеквизиты.Добавить("КодОрганизации");
	ВыгружаемыеРеквизиты.Добавить("НаименованиеКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("КодКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("НаименованиеДоговораКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("КодДоговораКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("АдресДоставки");
	ВыгружаемыеРеквизиты.Добавить("НаименованиеГрузоотправителя");
	ВыгружаемыеРеквизиты.Добавить("КодГрузоотправителя");
	ВыгружаемыеРеквизиты.Добавить("НаименованиеГрузополучателя");
	ВыгружаемыеРеквизиты.Добавить("КодГрузополучателя");
	ВыгружаемыеРеквизиты.Добавить("алкЛицензияОрганизации");
	ВыгружаемыеРеквизиты.Добавить("алкПунктРазгрузкиОрганизации");
	ВыгружаемыеРеквизиты.Добавить("алкПунктРазгрузки");
	ВыгружаемыеРеквизиты.Добавить("ГруппаЗакупок");
	ВыгружаемыеРеквизиты.Добавить("КодСкладаИнтернетМагазина");
	ВыгружаемыеРеквизиты.Добавить("ДатаДоставки");
	ВыгружаемыеРеквизиты.Добавить("ИсточникЗаказа");
	ВыгружаемыеРеквизиты.Добавить("ДоставкаСледующийДень");
	ВыгружаемыеРеквизиты.Добавить("Операция");
	ВыгружаемыеРеквизиты.Добавить("ВиртуальныйЗаказ");
	ВыгружаемыеРеквизиты.Добавить("ГУИДЗаказаСПортала");
    ВыгружаемыеРеквизиты.Добавить("КодТТSY");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("ВремяДоставкиС");
	ВыгружаемыеРеквизиты.Добавить("ВремяДоставкиДО");
	ВыгружаемыеРеквизиты.Добавить("Исходный");

	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Дата",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
		"ДатаПоДаннымКлиента"));

	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Номер",
		ОбщегоНазначения.ОписаниеТипаСтрока(30),
		"НомерПоДаннымКлиента"));
	
	// Реквизиты ТЧ Товары
	ВыгружаемыеРеквизиты.Добавить("Товары.КодПозицииЗаказа");
	ВыгружаемыеРеквизиты.Добавить("Товары.ДатаОтгрузки");
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.ШтрихКодНоменклатуры");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодНоменклатурыSAP");
	ВыгружаемыеРеквизиты.Добавить("Товары.ЕдиницаИзмерения");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодЕдиницыИзмерения");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	ВыгружаемыеРеквизиты.Добавить("Товары.Цена");
	ВыгружаемыеРеквизиты.Добавить("Товары.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодСтавкиНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.ЦенаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.ТорговаяТочка");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодТорговойТочки");
	ВыгружаемыеРеквизиты.Добавить("Товары.СкладОтгрузки");
	ВыгружаемыеРеквизиты.Добавить("Товары.алкЛицензияКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("Товары.МаркерДействия");
 	ВыгружаемыеРеквизиты.Добавить("Товары.НомерПредзаказаКлиента");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодПозицииПредзаказаКлиента");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодСтрокиБюджета");
    ВыгружаемыеРеквизиты.Добавить("Товары.ИдентификаторSKUMT");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодSKUMT");
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ПочтаПредставителяТТ",
		ОбщегоНазначения.ОписаниеТипаСтрока(250));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТелефонПредставителяТТ",
		ОбщегоНазначения.ОписаниеТипаСтрока(250));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ФИОПредставителяТТ",
		ОбщегоНазначения.ОписаниеТипаСтрока(250));		
		
КонецПроцедуры	

// Возвращает признак, нужно ли загружать заявку клиента в ИБ.
//
// Параметры:
//  ЗагружаемыйОбъект - ДокументОбъект.бит_ЗаявкаКлиента
//
// Возвращаемое значение:
//  НужноЗагружать - Булево - Истина, нужно загружать
//                            Ложь, нет 
//
Функция НужноЗагружатьЗаявкуКлиента(ЗагружаемыйОбъект)
	
	НужноЗагружать = Истина;
	
	Если ЗагружаемыйОбъект.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS 
		И ЗагружаемыйОбъект.КодСкладаИнтернетМагазина = "IM02" Тогда
		// IM02 - это интернет-заказ Владивостока. Нам эти заявки загружать не надо.
		// Пришлось захардкодить, так как Hybris не могут обеспечить, чтобы интернет-заказ Владивостока
		// не выгружались в очередь кролика.
		НужноЗагружать = Ложь;
	КонецЕсли;	
		
    Возврат НужноЗагружать;
	
КонецФункции

Функция НайтиЗаявкуКлиентаПоКодуSAP(КодSAP, НайденнаяСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодSAP", КодSAP);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	битЗаявкаКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.битЗаявкаКлиента КАК битЗаявкаКлиента
	|ГДЕ
	|	битЗаявкаКлиента.КодSAP = &КодSAP";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденнаяСсылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат НайденнаяСсылка;
	
КонецФункции

#Область ReserveOrderResponse 

Процедура ЗаполнитьСоставВыгружаемыхОбъектовReserveOrderResponse(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	Реквизиты = ВыгружаемыеРеквизитыReserveOrderResponse();
	ДобавитьСвязанныеРеквизитыКВыгрузкеReserveOrderResponse(Реквизиты);
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		Реквизиты);
		
	ДобавитьКлючевыеРеквизитыReserveOrderResponse(РеквизитыИСвойства);
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъектаReserveOrderResponse(Объект, ДанныеСообщения)

	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");

	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);

	Для каждого РеквизитыОбъекта из ДанныеОбъекта.Реквизиты Цикл
		
		ЗаявкаКлиента = Неопределено;
		Если РеквизитыОбъекта.Свойство("Идентификатор") Тогда
			ЗаявкаКлиента = Документы.битЗаявкаКлиента.ПолучитьСсылку(
				Новый УникальныйИдентификатор(РеквизитыОбъекта.Идентификатор));	
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
			РеквизитыОбъекта.Вставить("Результат", 
				Новый Структура("РезультатКод,РезультатОписание", 
					"500", 
					НСтр("ru = 'Не удалось получить заявку клиента по GUID'")));		

			Продолжить;
		КонецЕсли;	
		
		РеквизитыОбъекта.Удалить("Идентификатор");
		
		РезультатКод = "";
		Если ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("РезультатКод") Тогда
			РезультатКод = ДанныеСообщения.ДополнительныеСвойстваОбъекта.РезультатКод;
		КонецЕсли;
		
		РезультатОписание = "";
		Если ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("РезультатОписание") Тогда
			РезультатОписание = ДанныеСообщения.ДополнительныеСвойстваОбъекта.РезультатОписание;
		КонецЕсли;
		
		Если РезультатКод = "200" Тогда
			// Запрос на резервирование товаров.
			ПроверитьЗарезервированныеТоварыReserveOrderResponse(ЗаявкаКлиента, РеквизитыОбъекта, РезультатКод);
		ИначеЕсли РезультатКод = "202" Тогда	
			// Запрос на отмену резервирования товаров.
			ПроверитьОтменуЗарезервированныхТоваровReserveOrderResponse(ЗаявкаКлиента, РеквизитыОбъекта, РезультатКод);
			Если РезультатКод = "404" Тогда
				// В описание результата надо включить номер заказа.	
				НомерЗаказа = "";
				РеквизитыОбъекта.Свойство("Номер", НомерЗаказа);
				ШаблонРезультатОписание = НСтр("ru = 'Заказ по номеру %1 не найден в 1С ERP.'");
				РезультатОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонРезультатОписание, НомерЗаказа);
						
				Если РеквизитыОбъекта.Свойство("Товары") Тогда 
					РеквизитыОбъекта.Удалить("Товары");
				КонецЕсли;	
			КонецЕсли;	
		Иначе	
			Если РеквизитыОбъекта.Свойство("Товары") Тогда 
				РеквизитыОбъекта.Удалить("Товары");
			КонецЕсли;	
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(РезультатКод) И Не ЗначениеЗаполнено(РезультатОписание) Тогда
			КодОтвета = Справочники.бг_КодыОтветовНаПредзаказыРезервов.КодОтветаНаПредзаказРезервов(РезультатКод);	
			Если ЗначениеЗаполнено(КодОтвета) Тогда
				РезультатОписание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КодОтвета, "Описание");
			КонецЕсли;	
		КонецЕсли;	
		
		РеквизитыОбъекта.Вставить("Результат", 
			Новый Структура("РезультатКод,РезультатОписание", РезультатКод, РезультатОписание));		
			
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ВыгружаемыеРеквизитыReserveOrderResponse()

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("ДатаДоставки");
	ВыгружаемыеРеквизиты.Добавить("ИсточникЗаказа");
	ВыгружаемыеРеквизиты.Добавить("КодГрузополучателя");
	ВыгружаемыеРеквизиты.Добавить("КодСкладаИнтернетМагазина");
	ВыгружаемыеРеквизиты.Добавить("Операция");
	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Номер",
		ОбщегоНазначения.ОписаниеТипаСтрока(30),
		"НомерПоДаннымКлиента"));
	
	// Реквизиты ТЧ Товары
	ВыгружаемыеРеквизиты.Добавить("Товары.КодПозицииЗаказа");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодНоменклатурыSAP");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");	
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузкеReserveOrderResponse(Реквизиты)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	// Реквизиты шапки
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"Результат",
			Новый ОписаниеТипов("СправочникСсылка.бг_КодыОтветовНаПредзаказыРезервов"),
			));

КонецПроцедуры

Процедура ДобавитьКлючевыеРеквизитыReserveOrderResponse(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_КодыОтветовНаПредзаказыРезервов,
		"Код",
		"РезультатКод",
		ОбщегоНазначения.ОписаниеТипаСтрока(3));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_КодыОтветовНаПредзаказыРезервов,
		"Описание",
		"РезультатОписание",
		ОбщегоНазначения.ОписаниеТипаСтрока(0));
		
КонецПроцедуры

// Проверяет удалось ли выполнить резервирование товаров в заказах клиента, сформированных по заявке.  
//  Заполняет в ТЧ "Товарв" фактическое количество зарезервированного товара.  
//  И, в зависимости от результата, формирует код ответа. 
//
Процедура ПроверитьЗарезервированныеТоварыReserveOrderResponse(ЗаявкаКлиента, РеквизитыОбъекта, РезультатКод)

	ТоварыOrderSP = ТоварыOrderSP(ЗаявкаКлиента, Истина);
	ТоварыOrderSP.Свернуть("POSITIONNUMBER", "ORDEREDQUANTITY,ACCEPTEDQUANTITY");
	
	ЕстьЗарезервированныеТовары = Ложь;
	ЕстьОтмененныеТовары = Ложь;	
	
	Если РеквизитыОбъекта.Свойство("Товары") Тогда
		Для каждого СтрокаТЧ Из РеквизитыОбъекта.Товары Цикл 
			Если Не СтрокаТЧ.Свойство("Количество") Тогда
				// В некоторых интернет-заказах, присланных от Hybris, встречаются
				// мусорные строки с нулевым количеством, в этом случае в 
				// строке не будет свойства "Количество". Чтобы далее не вызвать ошибку
				// пропустим такую строку.
				Продолжить;
			КонецЕсли;
			
			СтрокаТоварыOrderSP = ТоварыOrderSP.Найти(СтрокаТЧ.КодПозицииЗаказа, "POSITIONNUMBER");
			
			Если СтрокаТоварыOrderSP = Неопределено Тогда
				ЕстьОтмененныеТовары = Истина;	
				СтрокаТЧ.Количество = 0; 
				Продолжить;
			КонецЕсли;
			
			МожноРаспределить = Мин(СтрокаТЧ.Количество, СтрокаТоварыOrderSP.ACCEPTEDQUANTITY);
			Если МожноРаспределить < СтрокаТЧ.Количество Тогда
				ЕстьОтмененныеТовары = Истина;	
			КонецЕсли;
			Если МожноРаспределить > 0 Тогда
				ЕстьЗарезервированныеТовары = Истина;
			КонецЕсли;	
			
			СтрокаТЧ.Количество = МожноРаспределить;	
			СтрокаТоварыOrderSP.ACCEPTEDQUANTITY = СтрокаТоварыOrderSP.ACCEPTEDQUANTITY - МожноРаспределить;
		КонецЦикла;	
	КонецЕсли;	
	
	Если ЕстьЗарезервированныеТовары 
		И Не ЕстьОтмененныеТовары Тогда
		РезультатКод = "200"; // Предзаказ сформирован. Выполнено полное резервирование.
	ИначеЕсли ЕстьЗарезервированныеТовары 
		И ЕстьОтмененныеТовары Тогда
		РезультатКод = "201"; // Предзаказ сформирован. Выполнено частичное резервирование.	
	ИначеЕсли Не ЕстьЗарезервированныеТовары 
		И ЕстьОтмененныеТовары Тогда
        РезультатКод = "203"; // Для заказа нет доступных остатков. Резервирование не выполнено.
	КонецЕсли;		

КонецПроцедуры	

// Проверяет удалось ли выполнить отмену заказов клиента, сформированных по заявке.  
//  И, в зависимости от результата, формирует код ответа. 
//
Процедура ПроверитьОтменуЗарезервированныхТоваровReserveOrderResponse(ЗаявкаКлиента, РеквизитыОбъекта, РезультатКод)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаКлиента", ЗаявкаКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК ЗаказКлиента,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|			ТОГДА Товары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоОтменено,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|			ТОГДА 0
	|		ИНАЧЕ Товары.Количество
	|	КОНЕЦ КАК КоличествоНеОтменено
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка.Проведен
	|	И Товары.Ссылка.бг_ЗаявкаКлиента = &ЗаявкаКлиента
	|	И НЕ Товары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		// Если нет сформированных заказов клиента по заявке, считаем, что и заявки не было. 
		// Ситуацию когда заявка была, но по ней по каким-то причинам не сформировались заказы клиентов
		// не рассматриваем, считаем это форсмажором. В любом случае отмена резерва не состоялась.
		
		РезультатКод = "404"; // Заказ по номеру <Номер заказа> не найден в 1С ERP.	
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоНеОтменено > 0 Тогда
			// Если в сформированных заказах клиента по заявке, есть неотмененные позиции, 
			// считаем, что они не были отменены по причине того, что предзаказ включен 
			// в консолидированный заказ. Так как других причин не отменять позиции не предусмотрено.
			// См. Документы.бит_ЗаявкаКлиента.ОтменитьЗаказыКлиентов()
			РезультатКод = "403"; // Нельзя изменить резерв или отменить заказ.
								  // Предзаказ включен в консолидированный заказ на поставку.
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Сформированные заказы клиентов по заявке есть, и в них оменены все позиции.
	РезультатКод = "202"; // Отменено резервирование по предзаказу.

КонецПроцедуры	
	
#КонецОбласти

#Область OrderSP 

Процедура ЗаполнитьСоставВыгружаемыхОбъектовOrderSP(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	Реквизиты = ВыгружаемыеРеквизитыOrderSP();
	ДобавитьРеквизитыЧерезТочкуКВыгрузкеOrderSP(Реквизиты);
	ДобавитьСвязанныеРеквизитыКВыгрузкеOrderSP(Реквизиты);
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		Реквизиты);

КонецПроцедуры	

Функция ПолучитьДанныеВыгружаемогоОбъектаOrderSP(Объект, ДанныеСообщения)

	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");

	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);

	Для каждого РеквизитыОбъекта из ДанныеОбъекта.Реквизиты Цикл
		ЗаявкаКлиента = Неопределено;
		Если РеквизитыОбъекта.Свойство("Идентификатор") Тогда
			ЗаявкаКлиента = Документы.битЗаявкаКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитыОбъекта.Идентификатор));	
		КонецЕсли;	
		Если Не ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
			Продолжить;
		КонецЕсли;	
		
		РеквизитыОбъекта.Вставить("Дата", ТекущаяДатаСеанса());
		
		Товары = ТоварыOrderSP(ЗаявкаКлиента);	
		Если Товары.Количество() > 0 Тогда
			РеквизитыОбъекта.Вставить("Товары", Товары);
			РеквизитыОбъекта.Вставить("CURRENCY", Товары[0].Валюта);
		Иначе
			РеквизитыОбъекта.Вставить("CURRENCY", "руб.");
		КонецЕсли;
		
		РеквизитыОбъекта.Вставить("DATE", ТекущаяДатаСеанса());
		РеквизитыОбъекта.Удалить("Идентификатор");
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции	

Функция ВыгружаемыеРеквизитыOrderSP()

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"DATE",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
		"Дата"));
		
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"NUMBER",
		ОбщегоНазначения.ОписаниеТипаСтрока(11),
		"Номер"));
	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ORDERNUMBER",
		ОбщегоНазначения.ОписаниеТипаСтрока(30),
		"НомерПоДаннымКлиента"));
		
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ORDERDATE",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
		"ДатаПоДаннымКлиента")); 
		
	// Реквизиты ТЧ Товары	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.POSITIONNUMBER",
		ОбщегоНазначения.ОписаниеТипаСтрока(5),
		"Товары.КодПозицииЗаказа"));
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьРеквизитыЧерезТочкуКВыгрузкеOrderSP(Реквизиты)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"DISTRIBUTIONCENTERID",
		ОбщегоНазначения.ОписаниеТипаСтрока(13),
		"Организация.бг_КодSAP"));

КонецПроцедуры	

Процедура ДобавитьСвязанныеРеквизитыКВыгрузкеOrderSP(Реквизиты)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	// Реквизиты шапки
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"CURRENCY",
		ОбщегоНазначения.ОписаниеТипаСтрока(10),
		));
	
	// Реквизиты ТЧ Товары	
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.PRODUCTIDSUPPLIER",
		ОбщегоНазначения.ОписаниеТипаСтрока(15),
		));
		
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.PRODUCTIDBUYER",
		ОбщегоНазначения.ОписаниеТипаСтрока(18),
		));
		
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.ORDEREDQUANTITY",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3),
		));

	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.ORDRSPUNIT",
		ОбщегоНазначения.ОписаниеТипаСтрока(50),
		));

	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.ACCEPTEDQUANTITY",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3),
		));
		
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.PRICE",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2),
		));

	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.PRICEWITHVAT",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2),
		));

	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.DELIVERYDATE",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
		));

	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.SHIPPINGDATE",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
		));
		
КонецПроцедуры

Функция ТоварыOrderSP(ЗаявкаКлиента, ВернутьТаблицуЗначений = Ложь)
	
    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаКлиента", ЗаявкаКлиента);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ПОМЕСТИТЬ СписокЗаказовПоЗаявке
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Проведен
	|	И ЗаказКлиента.бг_ЗаявкаКлиента = &ЗаявкаКлиента
	|	И НЕ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТранспортнаяИнформация.Объект КАК ЗаказКлиента,
	|	ТранспортнаяИнформация.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС
	|ПОМЕСТИТЬ ДатыПоставкиЗаказов
	|ИЗ
	|	РегистрСведений.бг_ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|ГДЕ
	|	ТранспортнаяИнформация.Объект В
	|			(ВЫБРАТЬ
	|				СписокЗаказовПоЗаявке.ЗаказКлиента
	|			ИЗ
	|				СписокЗаказовПоЗаявке КАК СписокЗаказовПоЗаявке)
	|	И ТранспортнаяИнформация.ПлановаяДатаДоставкиС <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокЗаказовПоЗаявке.ЗаказКлиента КАК ЗаказКлиента,
	|	МИНИМУМ(ДатыПоставкиЗаказов.ПлановаяДатаДоставкиС) КАК ПлановаяДатаДоставкиС,
	|	МАКСИМУМ(СписокЗаказовПоЗаявке.ЗаказКлиента.Валюта.Наименование) КАК Валюта
	|ПОМЕСТИТЬ ДанныеЗаказовКлиентов
	|ИЗ
	|	СписокЗаказовПоЗаявке КАК СписокЗаказовПоЗаявке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоставкиЗаказов КАК ДатыПоставкиЗаказов
	|		ПО СписокЗаказовПоЗаявке.ЗаказКлиента = ДатыПоставкиЗаказов.ЗаказКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокЗаказовПоЗаявке.ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Ссылка КАК ЗаказКлиента,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.бг_КодСтрокиЗаявки КАК бг_КодСтрокиЗаявки,
	|	ТаблицаТоваров.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.Отменено
	|				И ТаблицаТоваров.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))
	|			ТОГДА ТаблицаТоваров.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.Количество = 0
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаТоваров.СуммаСНДС - ТаблицаТоваров.СуммаНДС) / ТаблицаТоваров.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаБезНДС,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.Количество = 0
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаТоваров.СуммаСНДС / ТаблицаТоваров.Количество КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЦенаСНДС
	|ПОМЕСТИТЬ ТоварыЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокЗаказовПоЗаявке.ЗаказКлиента
	|			ИЗ
	|				СписокЗаказовПоЗаявке КАК СписокЗаказовПоЗаявке)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	бг_КодСтрокиЗаявки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаявки.КодПозицииЗаказа КАК POSITIONNUMBER,
	|	ТоварыЗаявки.КодНоменклатурыSAP КАК PRODUCTIDBUYER,
	|	ТоварыЗаявки.Количество КАК ORDEREDQUANTITY,
	|	ЕСТЬNULL(ТоварыЗаказа.Номенклатура.ТоварнаяКатегория.бг_СкюМТ.Код, ТоварыЗаказа.Номенклатура.Код) КАК PRODUCTIDSUPPLIER,
	|	МАКСИМУМ(ЕСТЬNULL(ТоварыЗаказа.Номенклатура.ЕдиницаИзмерения.Наименование, ТоварыЗаявки.КодЕдиницыИзмерения)) КАК ORDRSPUNIT,
	|	МАКСИМУМ(ЕСТЬNULL(ТоварыЗаказа.ЦенаБезНДС, 0)) КАК PRICE,
	|	МАКСИМУМ(ЕСТЬNULL(ТоварыЗаказа.ЦенаСНДС, 0)) КАК PRICEWITHVAT,
	|	МИНИМУМ(ЕСТЬNULL(ДанныеЗаказовКлиентов.ПлановаяДатаДоставкиС, ДАТАВРЕМЯ(1, 1, 1))) КАК DELIVERYDATE,
	|	МИНИМУМ(ЕСТЬNULL(ТоварыЗаказа.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1))) КАК SHIPPINGDATE,
	|	СУММА(ЕСТЬNULL(ТоварыЗаказа.Количество, 0)) КАК ACCEPTEDQUANTITY,
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеЗаказовКлиентов.Валюта, """")) КАК Валюта
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК ТоварыЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказа КАК ТоварыЗаказа
	|		ПО ТоварыЗаявки.КодПозицииЗаказа = ТоварыЗаказа.бг_КодСтрокиЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗаказовКлиентов КАК ДанныеЗаказовКлиентов
	|		ПО (ТоварыЗаказа.ЗаказКлиента = ДанныеЗаказовКлиентов.ЗаказКлиента)
	|ГДЕ
	|	ТоварыЗаявки.Ссылка = &ЗаявкаКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаявки.КодПозицииЗаказа,
	|	ТоварыЗаявки.КодНоменклатурыSAP,
	|	ТоварыЗаявки.Количество,
	|	ЕСТЬNULL(ТоварыЗаказа.Номенклатура.ТоварнаяКатегория.бг_СкюМТ.Код, ТоварыЗаказа.Номенклатура.Код)
	|
	|УПОРЯДОЧИТЬ ПО
	|	POSITIONNUMBER";
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Если ВернутьТаблицуЗначений Тогда
		Товары = РезультатЗапроса.Выгрузить();
	Иначе	
		Товары = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки = СтруктураСтрокиТоварыOrderSP();
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
			Товары.Добавить(СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;	

	Возврат Товары;
	
КонецФункции	

Функция СтруктураСтрокиТоварыOrderSP()
	
	СтруктураСтроки = Новый Структура(
		"POSITIONNUMBER, 
		|PRODUCTIDBUYER,
		|ORDEREDQUANTITY,
		|PRODUCTIDSUPPLIER,
		|ORDRSPUNIT,
		|ACCEPTEDQUANTITY,
		|PRICE,
		|PRICEWITHVAT,
		|DELIVERYDATE,
		|SHIPPINGDATE,
		|Валюта
		|");
		
	Возврат СтруктураСтроки;	
	
КонецФункции	

#КонецОбласти

#Область B2B_PortalDistr

Функция НайтиСсылкуПоИдентификатору(СтруктураОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	НайденнаяСсылка = Неопределено;
	
	Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "Идентификатор") Тогда
		ВозможенПоискПоИдентификатору = Истина;
	ИначеЕсли бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(
														СтруктураОбъекта, "ГУИДЗаказаСПортала") Тогда
		СтруктураОбъекта.Вставить("Идентификатор", СтруктураОбъекта.ГУИДЗаказаСПортала);
		ВозможенПоискПоИдентификатору = Истина;
	Иначе
		ВозможенПоискПоИдентификатору = Ложь;
	КонецЕсли;
	
	Если ВозможенПоискПоИдентификатору Тогда
		НайденнаяСсылка = адаптер_РаботаСДаннымиИБ.НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта);
	КонецЕсли;
	
	Возврат НайденнаяСсылка;
	
КонецФункции

Функция НайтиЗаявкуКлиентаПоГУИДЗаказаСПортала(ГУИДЗаказаСПортала, НайденнаяСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГУИДЗаказаСПортала", ГУИДЗаказаСПортала);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	битЗаявкаКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.битЗаявкаКлиента КАК битЗаявкаКлиента
	|ГДЕ
	|	битЗаявкаКлиента.ГУИДЗаказаСПортала = &ГУИДЗаказаСПортала";

	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НайденнаяСсылка = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат НайденнаяСсылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти
