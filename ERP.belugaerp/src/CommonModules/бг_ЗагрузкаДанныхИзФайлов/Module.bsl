#Область ПрограммныйИнтерфейс

// Загрузка данных СПУМ из каталога
//
Процедура ЗагрузитьДанныеСПроизводственнойЛинии() Экспорт
	ПараметрыЗагрузки = Документы.битДанныеСПроизводственнойЛинии.ПараметрыЗагрузкиДанныхСПроизводственнойЛинии();
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.КаталогФайлов) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыеФайлы = ФайлыКЗагрузкеСПУМ(ПараметрыЗагрузки);
	Для Каждого Файл Из ЗагружаемыеФайлы  Цикл
		ЗагрузитьФайлДанныхСПроизводственнойЛинии(Файл, ПараметрыЗагрузки);
	КонецЦикла;
КонецПроцедуры

// Загрузка данных приборов АСИиУ из каталога
//
Процедура ЗагрузитьДанныеАСИиУ() Экспорт
	ПараметрыЗагрузки = Документы.битДанныеПриборовАСИиУ.ПараметрыЗагрузкиДанныхАСИиУ();
	
	Если Не ЗначениеЗаполнено(ПараметрыЗагрузки.КаталогФайлов) Тогда
		Возврат;
	КонецЕсли;
	ЗагружаемыеФайлы = ФайлыКЗагрузкеАСИиУ(ПараметрыЗагрузки);
	Для Каждого Файл Из ЗагружаемыеФайлы  Цикл
		ЗагрузитьФайлДанныхАСИиУ(Файл, ПараметрыЗагрузки);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общие

Функция ТаблицаФайлов()
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяФайла", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Результат.Колонки.Добавить("ПутьКФайлу", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	Результат.Колонки.Добавить("ДатаИзменения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("ХешФайла", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	Возврат  Результат;
КонецФункции

Процедура ДобавитьФайлыКаталога(ФайлыКаталога, ТаблицаФайлов)
	Для каждого Файл Из ФайлыКаталога Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;	
		СтрокаФайлКЗагрузке = ТаблицаФайлов.Добавить();
		СтрокаФайлКЗагрузке.ИмяФайла = Файл.ИмяБезРасширения;
		СтрокаФайлКЗагрузке.ПутьКФайлу = Файл.ПолноеИмя;
		
		ПараметрыФайла = ПараметрыФайла(Файл.ПолноеИмя);
		СтрокаФайлКЗагрузке.ДатаИзменения = ПараметрыФайла.ДатаИзменения;
		СтрокаФайлКЗагрузке.ХешФайла = ПараметрыФайла.ХешФайла;
	КонецЦикла;
КонецПроцедуры

Функция ПараметрыФайла(ПутьКФайлу) 
	ПараметрыФайла = Новый Структура("ХешФайла, ДатаИзменения", "", Дата(1, 1, 1));
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Существует() Тогда
		Попытка
			ДвоичныеДанные    = Новый ДвоичныеДанные(ПутьКФайлу);
			ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA1);
			ХешированиеДанных.Добавить(ДвоичныеДанные);
			ПараметрыФайла.ХешФайла = Base64Строка(ХешированиеДанных.ХешСумма);
			
			ПараметрыФайла.ДатаИзменения = Файл.ПолучитьВремяИзменения();
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанных(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
	Возврат ПараметрыФайла;
КонецФункции

Процедура УдалитьФайлДанных(Файл, ПараметрыЗагрузки)
	Если ПараметрыЗагрузки.УдалятьФайлыПослеЗагрузки Тогда
		УдалитьФайлы(Файл.ПутьКФайлу);
	КонецЕсли;
КонецПроцедуры

Процедура ЗафиксироватьОшибкиЗаполнения(ДокументОбъект, ОшибкиЗаполнения)
	Для Каждого ОшибкаЗаполнения Из ОшибкиЗаполнения Цикл
		ДокументОбъект.Комментарий = 
						ДокументОбъект.Комментарий
						+ ?(ПустаяСтрока(ДокументОбъект.Комментарий), "", Символы.ПС)
						+ ОшибкаЗаполнения;
	КонецЦикла;
КонецПроцедуры

Функция СобытиеЖурналаРегистрацииЗагрузкаДанных()
	
	Возврат НСтр("ru = 'Загрузка данных из файлов'");
	
КонецФункции

#КонецОбласти 

#Область ДанныеСПУМ

Функция ФайлыКЗагрузкеСПУМ(ПараметрыЗагрузки)
	ФайлыКЗагрузке = ТаблицаФайлов();
	МаскаПоискаФайлов = "*.%1";
	МаскаПоискаФайлов = СтрШаблон(МаскаПоискаФайлов, ПараметрыЗагрузки.ФорматФайлов);
	
	МассивФайлов = НайтиФайлы(ПараметрыЗагрузки.КаталогФайлов, МаскаПоискаФайлов, Истина);
	ДобавитьФайлыКаталога(МассивФайлов, ФайлыКЗагрузке);
	
	ФайлыКЗагрузке.Сортировать("ДатаИзменения");
	Возврат ФайлыКЗагрузке;
КонецФункции

Процедура ЗагрузитьФайлДанныхСПроизводственнойЛинии(Файл, ПараметрыЗагрузки)
	Попытка
		ДокументДанныеСПроизводственнойЛинии = ДокументДанныеСПроизводственнойЛинии(Файл, ПараметрыЗагрузки);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ДокументДанныеСПроизводственнойЛинии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ДокументДанныеСПроизводственнойЛинии.Статус      = Перечисления.бг_СтатусыЗагрузкиДанныхСПроизводственнойЛинии.Загружен;
		ДокументДанныеСПроизводственнойЛинии.Комментарий = "";
		Документы.битДанныеСПроизводственнойЛинии.ЗаполнитьДокументПоДаннымФайла(ДокументДанныеСПроизводственнойЛинии);
		
		ЗаписатьЗагружаемыйДокументСПУМ(ДокументДанныеСПроизводственнойЛинии);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Функция ДокументДанныеСПроизводственнойЛинии(Файл, ПараметрыЗагрузки)
	ДанныеЗагруженногоДокумента = Документы.битДанныеСПроизводственнойЛинии.ДанныеЗагруженногоДокумента(Файл.ИмяФайла);
	
	Если ДанныеЗагруженногоДокумента <> Неопределено
		И ДанныеЗагруженногоДокумента.ФайлДанныхОбработан
		И ДанныеЗагруженногоДокумента.ХешФайлаДанных = Файл.ХешФайла Тогда
		УдалитьФайлДанных(Файл, ПараметрыЗагрузки);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		Если ДанныеЗагруженногоДокумента = Неопределено Тогда
			ДанныеСПроизводственнойЛинииОбъект = Документы.битДанныеСПроизводственнойЛинии.СоздатьДокумент();
			ДанныеСПроизводственнойЛинииОбъект.Дата = ТекущаяДатаСеанса();
			ДанныеСПроизводственнойЛинииОбъект.ИмяФайла = Файл.ИмяФайла;
		Иначе
			ДанныеСПроизводственнойЛинииОбъект = ДанныеЗагруженногоДокумента.Ссылка.ПолучитьОбъект();
			ДанныеСПроизводственнойЛинииОбъект.Проведен = Ложь;
		КонецЕсли;
		
		ДанныеСПроизводственнойЛинииОбъект.ХешСуммаФайлаДанных = Файл.ХешФайла;
		ДанныеСПроизводственнойЛинииОбъект.Записать();
		
		Если ДанныеЗагруженногоДокумента = Неопределено
			Или ДанныеЗагруженногоДокумента.ХешФайлаДанных <> Файл.ХешФайла Тогда
			ПараметрыФайла = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
			ПараметрыФайла.ВладелецФайлов = ДанныеСПроизводственнойЛинииОбъект.Ссылка;
			ПараметрыФайла.ИмяБезРасширения = Файл.ИмяФайла;
			ПараметрыФайла.РасширениеБезТочки = ПараметрыЗагрузки.ФорматФайлов;
			ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяДатаСеанса();
			
			ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Файл.ПутьКФайлу);
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
			
			РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(
						ПараметрыФайла,
						АдресВременногоХранилищаФайла);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		Возврат ДанныеСПроизводственнойЛинииОбъект;
	Исключение
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
	КонецПопытки;
КонецФункции

Процедура ЗаписатьЗагружаемыйДокументСПУМ(ДанныеСПроизводственнойЛинииОбъект)
	УдалитьДублирующиеДокументыСПУМ(ДанныеСПроизводственнойЛинииОбъект);
	
	ОшибкиЗаполнения = Документы.битДанныеСПроизводственнойЛинии.ВыполнитьПроверкуЗагруженныхМарок(ДанныеСПроизводственнойЛинииОбъект);
	ДанныеСПроизводственнойЛинииОбъект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗагруженныхМарок");
	
	Если ОшибкиЗаполнения.Количество() > 0 Тогда
		ДанныеСПроизводственнойЛинииОбъект.Статус = Перечисления.бг_СтатусыЗагрузкиДанныхСПроизводственнойЛинии.ЗагруженСОшибками;
		ЗафиксироватьОшибкиЗаполнения(ДанныеСПроизводственнойЛинииОбъект, ОшибкиЗаполнения);
	КонецЕсли;
	
	Если Не ДанныеСПроизводственнойЛинииОбъект.ПроверитьЗаполнение() Тогда
		ДанныеСПроизводственнойЛинииОбъект.Статус = Перечисления.бг_СтатусыЗагрузкиДанныхСПроизводственнойЛинии.ЗагруженСОшибками;
	КонецЕсли;
	
	ДанныеСПроизводственнойЛинииОбъект.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры

Процедура УдалитьДублирующиеДокументыСПУМ(ТекущийДокумент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеСПроизводственнойЛинии.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.битДанныеСПроизводственнойЛинии КАК ДанныеСПроизводственнойЛинии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ДвижениеМарок КАК ДвижениеМарок
	|		ПО ДанныеСПроизводственнойЛинии.Ссылка = ДвижениеМарок.Регистратор
	|			И (ДвижениеМарок.СтатусМарки = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыАкцизныхМарок.ВключенаВЭтапПроизводства))
	|ГДЕ
	|	ДанныеСПроизводственнойЛинии.КодПаллеты = &КодПаллеты
	|	И ДанныеСПроизводственнойЛинии.Проведен
	|	И ДанныеСПроизводственнойЛинии.Дата <= &Период
	|	И ДанныеСПроизводственнойЛинии.Ссылка <> &ТекущийДокумент
	|	И ДвижениеМарок.Регистратор ЕСТЬ NULL";
	Запрос.УстановитьПараметр("КодПаллеты", ТекущийДокумент.КодПаллеты);
	Запрос.УстановитьПараметр("Период", ТекущийДокумент.Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДублирующийДокумент = Выборка.Ссылка.ПолучитьОбъект();
		
		Комментарий = СтрШаблон(НСтр("ru = 'Дублируется документом №%1 от %2'"), ТекущийДокумент.Номер, ТекущийДокумент.Дата);
		ДублирующийДокумент.Комментарий = Комментарий;
		
		ДублирующийДокумент.ПометкаУдаления = Истина;
		ДублирующийДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти 

#Область ДанныеАСИиУ

Функция ФайлыКЗагрузкеАСИиУ(ПараметрыЗагрузки)
	ТаблицаФайловПоказаний = ТаблицаФайлов();
	МаскаПоискаФайлов = "*.%1";
	МаскаПоискаФайлов = СтрШаблон(МаскаПоискаФайлов, ПараметрыЗагрузки.ФорматФайлов);
	
	ПапкиПриборов = НайтиФайлы(ПараметрыЗагрузки.КаталогФайлов, "*.*", Ложь);
	Для каждого ПапкаПрибора Из ПапкиПриборов Цикл
		Если Не ПапкаПрибора.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ПапкиСФайламиДанныхУстройства = НайтиФайлы(ПапкаПрибора.ПолноеИмя, "*Sended", Ложь);
		Для Каждого Папка Из ПапкиСФайламиДанныхУстройства Цикл
			Если Не Папка.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;
			Если Папка.Имя = "Sended" 
				Или (ПараметрыЗагрузки.ЗагружатьПятиминутныеДанные И Папка.Имя = "TimeSended") Тогда
				ФайлыКаталога = НайтиФайлы(Папка.ПолноеИмя, МаскаПоискаФайлов, Ложь);
				ДобавитьФайлыКаталога(ФайлыКаталога, ТаблицаФайловПоказаний);
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаФайловПоказаний.Сортировать("ДатаИзменения");
	Возврат ТаблицаФайловПоказаний;
КонецФункции

Процедура ЗагрузитьФайлДанныхАСИиУ(Файл, ПараметрыЗагрузки)
	Попытка
		ДокументДанныеАСИиУ = ДокументДанныеАСИиУ(Файл, ПараметрыЗагрузки);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ДокументДанныеАСИиУ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Документы.битДанныеПриборовАСИиУ.ЗаполнитьДокументПоДаннымФайла(ДокументДанныеАСИиУ);
		
		ДокументДанныеАСИиУ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Функция ДокументДанныеАСИиУ(Файл, ПараметрыЗагрузки)
	ДанныеЗагруженногоДокумента = Документы.битДанныеПриборовАСИиУ.ДанныеЗагруженногоДокумента(Файл.ИмяФайла);
	
	Если Не ДанныеЗагруженногоДокумента = Неопределено
		И ДанныеЗагруженногоДокумента.ХешФайлаДанных = Файл.ХешФайла Тогда
		УдалитьФайлДанных(Файл, ПараметрыЗагрузки);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		
		Если ДанныеЗагруженногоДокумента = Неопределено Тогда
			ДанныеПриборовАСИиУОбъект = Документы.битДанныеПриборовАСИиУ.СоздатьДокумент();
			ДанныеПриборовАСИиУОбъект.Дата = ТекущаяДатаСеанса();
			ДанныеПриборовАСИиУОбъект.ИмяФайла = Файл.ИмяФайла;
		Иначе
			ДанныеПриборовАСИиУОбъект = ДанныеЗагруженногоДокумента.Ссылка.ПолучитьОбъект();
			ДанныеПриборовАСИиУОбъект.Проведен = Ложь;
		КонецЕсли;
		ДанныеПриборовАСИиУОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ДанныеПриборовАСИиУОбъект.ХешСуммаФайлаДанных = Файл.ХешФайла;
		ДанныеПриборовАСИиУОбъект.Записать();
		
		ПараметрыФайла = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов = ДанныеПриборовАСИиУОбъект.Ссылка;
		ПараметрыФайла.ИмяБезРасширения = Файл.ИмяФайла;
		ПараметрыФайла.РасширениеБезТочки = ПараметрыЗагрузки.ФорматФайлов;
		ПараметрыФайла.ВремяИзмененияУниверсальное = ТекущаяДатаСеанса();
		
		ДвоичныеДанныеФайла = Новый ДвоичныеДанные(Файл.ПутьКФайлу);
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
		
		РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(
					ПараметрыФайла,
					АдресВременногоХранилищаФайла);
		
		ЗафиксироватьТранзакцию();
		
		Возврат ДанныеПриборовАСИиУОбъект
	Исключение
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
	КонецПопытки;
КонецФункции

#КонецОбласти 

#КонецОбласти
