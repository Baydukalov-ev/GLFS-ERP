#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты = ВыгружаемыеРеквизиты();
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		Реквизиты);
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры	

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	СтандартнаяОбработка = Ложь;
	СтавкиНДСПоСтрокам = Новый Соответствие;
	СоответствиеСтавокНДС = Новый Соответствие;  
	СоответствиеПеречисленийСтавкамНДС = Новый Соответствие;
	
	ПодготовитьДанныеПоНДС(СтавкиНДСПоСтрокам, 
		СоответствиеСтавокНДС,
		СоответствиеПеречисленийСтавкамНДС,
		СтруктураОбъекта);
		
	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта);

	ДозаполнитьШапкуДокумента(ЗагружаемыйОбъект, СтруктураОбъекта);
	ДозаполнитьТаблицуТовары(ЗагружаемыйОбъект,
		СтавкиНДСПоСтрокам, 
		СоответствиеСтавокНДС,
		СоответствиеПеречисленийСтавкамНДС);	
	
КонецПроцедуры

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	КлючМаршрутизации = КлючМаршрутизации + ".ERP";
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("СтандартнаяЗаписьНеТребуется")
		И ЗагружаемыйОбъект.ДополнительныеСвойства.СтандартнаяЗаписьНеТребуется Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	адаптер_ОбработчикиСобытийСтандартный.ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект);
	Справочники.адаптер_ИсходящиеСообщения.ЗарегистрироватьИсходящееСообщениеПриЗаписи(
		ЗагружаемыйОбъект,
		,
		,
		ЗагружаемыйОбъект);
	Возврат;
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	ДанныеВыгружаемогоОбъекта = адаптер_ОбработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	ДобавитьИнформациюОбУпаковкахНоменклатуры(ДанныеВыгружаемогоОбъекта, Объект, ДанныеСообщения);
	
	Возврат ДанныеВыгружаемогоОбъекта;
	
КонецФункции

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("Партнер");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("Организация");
	ВыгружаемыеРеквизиты.Добавить("Склад");
	ВыгружаемыеРеквизиты.Добавить("Валюта");
	ВыгружаемыеРеквизиты.Добавить("Менеджер");
	ВыгружаемыеРеквизиты.Добавить("Статус");
	ВыгружаемыеРеквизиты.Добавить("СуммаДокумента");
	ВыгружаемыеРеквизиты.Добавить("ДополнительнаяИнформация");
	ВыгружаемыеРеквизиты.Добавить("ХозяйственнаяОперация");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("НомерПоДаннымПоставщика");
	ВыгружаемыеРеквизиты.Добавить("ДатаПоДаннымПоставщика");
	ВыгружаемыеРеквизиты.Добавить("Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Договор");
	ВыгружаемыеРеквизиты.Добавить("Автор");
	ВыгружаемыеРеквизиты.Добавить("ДатаПоступления");
	ВыгружаемыеРеквизиты.Добавить("ЦенаВключаетНДС");
	ВыгружаемыеРеквизиты.Добавить("бг_ПунктПогрузки");
	
	// Реквизиты шапки из расширения
	ВыгружаемыеРеквизиты.Добавить("бг_ОплатаЗаПоставкуПослеРеализацииТовара");
	
	// Реквизиты ТЧ "Товары"
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.Упаковка");
	ВыгружаемыеРеквизиты.Добавить("Товары.КоличествоУпаковок");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	ВыгружаемыеРеквизиты.Добавить("Товары.ДатаПоступления");
	ВыгружаемыеРеквизиты.Добавить("Товары.Цена");
	ВыгружаемыеРеквизиты.Добавить("Товары.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Товары.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаСНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Отменено");
	ВыгружаемыеРеквизиты.Добавить("Товары.СтатьяРасходов");
	ВыгружаемыеРеквизиты.Добавить("Товары.Склад");
	ВыгружаемыеРеквизиты.Добавить("Товары.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Товары.СписатьНаРасходы");
	
	// Реквизиты ТЧ "Товары" из расширения
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_УпаковкаПаллета");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_КоличествоКоробок");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_КоличествоПаллет");
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ПодготовитьДанныеПоНДС(СтавкиНДСПоСтрокам, СоответствиеСтавокНДС, СоответствиеПеречисленийСтавкамНДС, СтруктураОбъекта)  
	
	Индекс = 0;
	Для каждого СтрокаТЧ Из СтруктураОбъекта.Товары Цикл
		СтавкиНДСПоСтрокам.Вставить(Индекс, СтрокаТЧ.СтавкаНДС);
		Индекс = Индекс + 1;
	КонецЦикла;
	
	ВыборкаПоСтавкам = Справочники.СтавкиНДС.Выбрать();
	Пока ВыборкаПоСтавкам.Следующий() Цикл  
		Если ВыборкаПоСтавкам.Ставка = 0
			Или ВыборкаПоСтавкам.Ставка = 10
			Или ВыборкаПоСтавкам.Ставка = 18
			Или ВыборкаПоСтавкам.Ставка = 20 Тогда
			СоответствиеПеречисленийСтавкамНДС.Вставить(ВыборкаПоСтавкам.ПеречислениеСтавкаНДС,
				ВыборкаПоСтавкам.Ссылка);
		Иначе
			СоответствиеСтавокНДС.Вставить(ВыборкаПоСтавкам.Ставка, ВыборкаПоСтавкам.Ссылка);
		КонецЕсли;
	КонецЦикла;   
	
КонецПроцедуры

Процедура ДозаполнитьШапкуДокумента(ЗагружаемыйОбъект, СтруктураОбъекта) 
	
	Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Контрагент)
		И ОбщегоНазначения.СсылкаСуществует(ЗагружаемыйОбъект.Контрагент) Тогда
		ЗагружаемыйОбъект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗагружаемыйОбъект.Контрагент, 
			"Партнер");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Договор)
		И ОбщегоНазначения.СсылкаСуществует(ЗагружаемыйОбъект.Договор) Тогда
		ЗагружаемыйОбъект.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗагружаемыйОбъект.Договор, 
			"ВалютаВзаиморасчетов");
	Иначе
		ЗагружаемыйОбъект.Договор = Неопределено;
	КонецЕсли;
	
	ЗагружаемыйОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
	ЗагружаемыйОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ЗагружаемыйОбъект.Приоритет);
	ЗагружаемыйОбъект.ДатаПоДаннымПоставщика = ТекущаяДатаСеанса();
	ЗагружаемыйОбъект.ДатаПоступления = ЗагружаемыйОбъект.Дата;
	ЗагружаемыйОбъект.НомерПоДаннымПоставщика = ЗагружаемыйОбъект.Номер;
	ЗагружаемыйОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
	ЗагружаемыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;  
	ЗагружаемыйОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;  
	ЗагружаемыйОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ЗагружаемыйОбъект.Автор 
		= бг_ПользователиИнтеграция.НайтиПользователяПоАутентификацииОС("\\" + СтруктураОбъекта.ПользовательОС);
	
	ЗагружаемыйОбъект.Номер = "";
	ЗагружаемыйОбъект.Дата = ТекущаяДатаСеанса();
	ЗагружаемыйОбъект.ПоступлениеОднойДатой = Истина;
	ЗагружаемыйОбъект.бг_ЗагруженИзТОиР = Истина;
	ЗагружаемыйОбъект.Проведен = Истина;   
	ЗагружаемыйОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;   
	
КонецПроцедуры

Процедура ДозаполнитьТаблицуТовары(ЗагружаемыйОбъект, СтавкиНДСПоСтрокам, СоответствиеСтавокНДС, СоответствиеПеречисленийСтавкамНДС) 
	
	МассивУпаковокКПроверке = ЗагружаемыйОбъект.Товары.ВыгрузитьКолонку("Упаковка");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка,
		|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
		|	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Ссылка В(&МассивУпаковок)";
	
	Запрос.УстановитьПараметр("МассивУпаковок", МассивУпаковокКПроверке);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ДанныеПоУпаковкам = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеПоУпаковкам.Вставить(ВыборкаДетальныеЗаписи.Ссылка, 
			Новый Структура("Числитель, Знаменатель", 
				ВыборкаДетальныеЗаписи.Числитель, ВыборкаДетальныеЗаписи.Знаменатель));
	КонецЦикла;
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из ЗагружаемыйОбъект.Товары Цикл
		
		ЗначенияУпаковки = ДанныеПоУпаковкам.Получить(СтрокаТЧ.Упаковка);
		Если ЗначенияУпаковки = Неопределено Тогда
			//Ссылки не существует в БД
			СтрокаТЧ.Упаковка = Неопределено; 
		Иначе
			Если ЗначенияУпаковки.Знаменатель = 0 Тогда
				ЗначенияУпаковки.Знаменатель = 1;
			КонецЕсли;
			СтрокаТЧ.Цена = СтрокаТЧ.Цена * ЗначенияУпаковки.Числитель / ЗначенияУпаковки.Знаменатель;
		КонецЕсли;
		
		Если СтавкиНДСПоСтрокам.Получить(Индекс).Ставка = 0 Тогда
			СтрокаТЧ.СтавкаНДС = Справочники.СтавкиНДС.БезНДС; 
		ИначеЕсли СтавкиНДСПоСтрокам.Получить(Индекс).Ставка = 10 Тогда
			СтрокаТЧ.СтавкаНДС = СоответствиеПеречисленийСтавкамНДС.Получить(Перечисления.СтавкиНДС.НДС10); 
		ИначеЕсли СтавкиНДСПоСтрокам.Получить(Индекс).Ставка = 18 Тогда
			СтрокаТЧ.СтавкаНДС = СоответствиеПеречисленийСтавкамНДС.Получить(Перечисления.СтавкиНДС.НДС18); 
		ИначеЕсли СтавкиНДСПоСтрокам.Получить(Индекс).Ставка = 20 Тогда
			СтрокаТЧ.СтавкаНДС = СоответствиеПеречисленийСтавкамНДС.Получить(Перечисления.СтавкиНДС.НДС20); 
		Иначе
			СтрокаТЧ.СтавкаНДС = СоответствиеСтавокНДС.Получить(СтавкиНДСПоСтрокам.Получить(Индекс).Ставка);
		КонецЕсли; 
		
		СтрокаТЧ.Склад = ЗагружаемыйОбъект.Склад;
       	СтрокаТЧ.ДатаПоступления = ЗагружаемыйОбъект.ДатаПоступления;
		
		Индекс = Индекс + 1;   
		
	КонецЦикла; 
	
КонецПроцедуры	

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,,
		"ПользовательОС",
		ОбщегоНазначения.ОписаниеТипаСтрока(150));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,,
		"Товары.бг_ЕдиницаИзмеренияКоробки",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,,
		"Товары.бг_ЕдиницаИзмеренияПаллеты",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
	// Табличная часть с упаковками номенклатуры
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,,
		"УпаковкиНоменклатуры.КодНоменклатуры",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,,
		"УпаковкиНоменклатуры.Упаковка",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	
КонецПроцедуры

Процедура ДобавитьИнформациюОбУпаковкахНоменклатуры(ДанныеВыгружаемогоОбъекта, Объект, ДанныеСообщения)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Если ДанныеВыгружаемогоОбъекта.Реквизиты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаПоУпаковкам =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|			ТОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета
	|		КОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ЕСТЬNULL(УпаковкиПаллеты.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК бг_ЕдиницаИзмеренияПаллеты,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|			ТОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета.Родитель
	|		КОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК бг_ЕдиницаИзмеренияКоробки,
	|	ЗаказПоставщикуТовары.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	ЗаказПоставщикуТовары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуТовары.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|			ТОГДА ЗаказПоставщикуТовары.Номенклатура
	|		ИНАЧЕ ЗаказПоставщикуТовары.Номенклатура.НаборУпаковок
	|	КОНЕЦ КАК ВладелецСправочникаУпаковки
	|ПОМЕСТИТЬ УпаковкиВДокументе
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиПаллеты
	|		ПО (ВЫБОР
	|				КОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|					ТОГДА ЗаказПоставщикуТовары.бг_УпаковкаПаллета = УпаковкиПаллеты.Родитель
	|							И УпаковкиПаллеты.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|							И НЕ УпаковкиПаллеты.ПометкаУдаления
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиВДокументе.Номенклатура.Код КАК КодНоменклатуры,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка_ЗначениеРеквизитаИдентификатор,
	|	УпаковкиЕдиницыИзмерения.бг_ИдентификаторЕКНоменклатуры КАК Упаковка_ЗначениеРеквизитабг_ИдентификаторЕКНоменклатуры,
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры КАК Упаковка_ЗначениеРеквизитабг_КодЕК_Номенклатуры,
	|	УпаковкиЕдиницыИзмерения.Код КАК Упаковка_ЗначениеРеквизитаКод,
	|	УпаковкиЕдиницыИзмерения.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения) КАК Упаковка_ЗначениеРеквизитаЭтоБазоваяЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка_ЗначениеРеквизитаТаблицаКлючей,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения КАК Упаковка_ЗначениеРеквизитабг_ТипЕдиницыИзмерения,
	|	УпаковкиВДокументе.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета_ЗначениеРеквизитаИдентификатор,
	|	УпаковкиВДокументе.бг_ЕдиницаИзмеренияКоробки КАК бг_ЕдиницаИзмеренияКоробки_ЗначениеРеквизитаИдентификатор,
	|	УпаковкиВДокументе.бг_ЕдиницаИзмеренияКоробки.бг_КодЕК_Номенклатуры КАК бг_ЕдиницаИзмеренияКоробки_ЗначениеРеквизитабг_КодЕК_Номенклатуры,
	|	УпаковкиВДокументе.бг_ЕдиницаИзмеренияПаллеты КАК бг_ЕдиницаИзмеренияПаллеты_ЗначениеРеквизитаИдентификатор,
	|	УпаковкиВДокументе.бг_ЕдиницаИзмеренияПаллеты.бг_КодЕК_Номенклатуры КАК бг_ЕдиницаИзмеренияПаллеты_ЗначениеРеквизитабг_КодЕК_Номенклатуры,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.Ссылка = УпаковкиВДокументе.бг_ЕдиницаИзмеренияПаллеты
	|			ТОГДА 3
	|		КОГДА УпаковкиЕдиницыИзмерения.Ссылка = УпаковкиВДокументе.бг_ЕдиницаИзмеренияКоробки
	|			ТОГДА 2
	|		КОГДА УпаковкиЕдиницыИзмерения.Ссылка = УпаковкиВДокументе.Упаковка
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриоритетПоУпаковкамДокумента,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|			ТОГДА 3
	|		КОГДА УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА 2
	|		КОГДА УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриоритетПоТипуЕдиницыИзмерения
	|ИЗ
	|	УпаковкиВДокументе КАК УпаковкиВДокументе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (УпаковкиВДокументе.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
	|				ИЛИ УпаковкиВДокументе.ВладелецСправочникаУпаковки = УпаковкиЕдиницыИзмерения.Владелец)
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодНоменклатуры,
	|	ПриоритетПоУпаковкамДокумента УБЫВ,
	|	ПриоритетПоТипуЕдиницыИзмерения УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоУпаковкам;
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	РезультатПоУпаковкам = Запрос.Выполнить();
	
	Если РезультатПоУпаковкам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполненияЗапросов = адаптер_РаботаСДаннымиИБ.ПолучитьПараметрыВыполненияЗапросов(Объект, ДанныеСообщения);
	
	Реквизиты = ДанныеВыгружаемогоОбъекта.Реквизиты[0];
	
	УпаковкиНоменклатуры = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		РезультатПоУпаковкам,
		ПараметрыВыполненияЗапросов.ТаблицаКлючей,
		ДанныеСообщения);
		
	Реквизиты.Вставить("УпаковкиНоменклатуры", УпаковкиНоменклатуры);
	
	Для каждого ДанныеТовара Из Реквизиты.Товары Цикл
	
		Если ДанныеТовара.Свойство("бг_УпаковкаПаллета") И ДанныеТовара.бг_УпаковкаПаллета.Свойство("Идентификатор") Тогда
			
			ИдентификаторУпаковкиПаллетыТовара = ДанныеТовара.бг_УпаковкаПаллета.Идентификатор;
			
			ДанныеУпаковки = ДанныеУпаковкиПоИдентификатору(Реквизиты.УпаковкиНоменклатуры, ИдентификаторУпаковкиПаллетыТовара);
			
			Если ДанныеУпаковки.Свойство("бг_ЕдиницаИзмеренияКоробки") Тогда
				ДанныеТовара.Вставить("бг_ЕдиницаИзмеренияКоробки", ДанныеУпаковки.бг_ЕдиницаИзмеренияКоробки);
			КонецЕсли;
			
			Если ДанныеУпаковки.Свойство("бг_ЕдиницаИзмеренияПаллеты") Тогда
				ДанныеТовара.Вставить("бг_ЕдиницаИзмеренияПаллеты", ДанныеУпаковки.бг_ЕдиницаИзмеренияПаллеты);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеУпаковкиПоИдентификатору(УпаковкиНоменклатуры, ИдентификаторПоиска)

	Для каждого ДанныеУпаковкиНоменклатуры Из УпаковкиНоменклатуры Цикл
	
		Если ДанныеУпаковкиНоменклатуры.Свойство("бг_УпаковкаПаллета")
			И ДанныеУпаковкиНоменклатуры.бг_УпаковкаПаллета.Свойство("Идентификатор") Тогда
			
			Если ДанныеУпаковкиНоменклатуры.бг_УпаковкаПаллета.Идентификатор = ИдентификаторПоиска Тогда
				Возврат ДанныеУпаковкиНоменклатуры;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"бг_КодЕК_Номенклатуры",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(15));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"КодТТSY",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(9));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Адрес",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(700));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"АдресГеокодирования",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(0));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"АдресЗначение",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(0));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"АдресЗначенияПолей",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(0));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Широта",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 7));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Долгота",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 7));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"ЭтоАльтернативныйАдрес",
		,
		Новый ОписаниеТипов("Булево"));		
		
КонецПроцедуры

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
