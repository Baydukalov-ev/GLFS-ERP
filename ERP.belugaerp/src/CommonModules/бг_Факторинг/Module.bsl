
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.бг_ОперацииПоФакторингу);
		
	КонецЕсли;
	
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.бг_ОперацииПоФакторингу);
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.бг_ОперацииПоФакторингу);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие Из КлючИЗначение - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие Из КлючИЗначение - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие;
	
	ИмяРегистра                 = Метаданные.РегистрыНакопления.бг_ОперацииПоФакторингу.Имя;
	ИмяТаблицыИзменений         = "Движениябг_ОперацииПоФакторингуИзменения"; 
	СтруктураТекстовЗапросов    = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(
		Запрос,
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	СоответствиеТекстовЗапросов.Вставить(ИмяТаблицыИзменений, СтруктураТекстовЗапросов);
	
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Если ТаблицыДляДвижений.Свойство("Таблицабг_ОперацииПоФакторингу") Тогда
		
		Движения.бг_ОперацииПоФакторингу.Загрузить(ТаблицыДляДвижений.Таблицабг_ОперацииПоФакторингу);
		Движения.бг_ОперацииПоФакторингу.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений Из Строка - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	Возврат;
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

// Синхронизирует связанные документы.
//
Процедура СинхронизироватьЗависимыеДокументы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписанияСинхронизаций = ОписанияСинхронизацииЗависимыхДокументов();

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Очередь.Документ КАК Документ,
	|	МАКСИМУМ(Очередь.Версия) КАК Версия
	|ИЗ
	|	РегистрСведений.бг_ОчередьСинхронизацииСвязанныхДокументов КАК Очередь
	|
	|СГРУППИРОВАТЬ ПО
	|	Очередь.Документ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписанияОшибок = Новый Массив;
		
		НачатьТранзакцию();
		Попытка
			
			Для Каждого ОписаниеСинхронизации Из ОписанияСинхронизаций Цикл
				СинхронизироватьДокументыПоОписаниюСинхронизации(Выборка.Документ,
					ОписаниеСинхронизации, ОписанияОшибок);
			КонецЦикла;
			
			Если ОписанияОшибок.Количество() > 0 Тогда
				ВызватьИсключение НСтр("ru = 'При синхронизации зависимых документов возникли ошибки.'");
			Иначе
				РегистрыСведений.бг_ОчередьСинхронизацииСвязанныхДокументов.ОчиститьОчередьПоДокументу(
					Выборка.Документ, Выборка.Версия);
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Синхронизация зависимых документов'"), 
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки());
			ВывестиОшибкиВЖурналРегистрации(ОписанияОшибок);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьВОчередьСинхронизацииСвязанныхДокументов(Документ, МенеджерВременныхТаблиц) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено
		Или МенеджерВременныхТаблиц.Таблицы.Найти("ТаблицаИзмененийбг_ОперацииПоФакторингу") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	ТаблицаИзмененийбг_ОперацииПоФакторингу КАК Таблица";

	Результат = Запрос.Выполнить();
	
	ДатаДобавленияВОчередь = ТекущаяДатаСеанса();
	Если Не Результат.Пустой() Тогда
		
		НаборЗаписей = РегистрыСведений.бг_ОчередьСинхронизацииСвязанныхДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ДатаДобавленияВОчередь);
		НаборЗаписей.Отбор.Документ.Установить(Документ.Ссылка);
		НаборЗаписей.Отбор.Версия.Установить(Документ.ВерсияДанных);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период = ДатаДобавленияВОчередь;
		НоваяЗапись.Документ = Документ.Ссылка;
		НоваяЗапись.Версия = Документ.ВерсияДанных;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписанияСинхронизацииЗависимыхДокументов()
	
	Описания = Новый Массив;
	Описания.Добавить(ОписаниеСинхронизацииРегистрацииРасходовЗаСчетДебиторскойЗадолженности());
	Описания.Добавить(ОписаниеСинхронизацииКорректировкиЗадолженностиСФактором());
	Описания.Добавить(ОписаниеСинхронизацииКорректировкиЗадолженностиСКонтрагентами());
	Описания.Добавить(ОписаниеСинхронизацииОбеспеченияОбязательств());
	
	Возврат Описания;
	
КонецФункции

#Область ОбщиеМетодыСинхронизацииДокументов

Функция ОписаниеСинхронизацииЗависимогоДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторСинхронизации", "");
	Описание.Вставить("МодульСинхронизации", ОбщегоНазначения.ОбщийМодуль("бг_Факторинг"));
	Описание.Вставить("ПроцедураЗаполненияДокумента", "");
	Описание.Вставить("ОписаниеЗависимогоДокумента", ОписаниеЗависимогоДокумента());
	Описание.Вставить("ТекстЗапросаПолученияДокументов", "");
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеЗависимогоДокумента(Имя = "", ПолноеИмя = "", Представление = "")
	
	Описание = Новый Структура;
	Описание.Вставить("Имя", Имя);
	Описание.Вставить("ПолноеИмя", ПолноеИмя);
	Описание.Вставить("Представление", Представление);
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Описание.Вставить("Метаданные", Неопределено);
	Иначе
		Описание.Вставить("Метаданные", Метаданные.НайтиПоПолномуИмени(ПолноеИмя));
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Процедура СинхронизироватьДокументыПоОписаниюСинхронизации(ИнициаторСинхронизации,
	ОписаниеСинхронизации, ОписанияОшибокСинхронизации)

	Запрос = Новый Запрос;
	Запрос.Текст = ОписаниеСинхронизации.ТекстЗапросаПолученияДокументов;
	Запрос.УстановитьПараметр("ИнициаторСинхронизации", ИнициаторСинхронизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗаблокироватьЗависимыеДокументы(ОписаниеСинхронизации, РезультатЗапроса, ОписанияОшибокСинхронизации) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗависимыхДокументов = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗависимыхДокументов.Следующий() Цикл
		
		ЗависимыйДокументОбъект = СинхронизироватьДокумент(ОписаниеСинхронизации, ВыборкаЗависимыхДокументов);
		ЗаписатьДокумент(ЗависимыйДокументОбъект, ОписаниеСинхронизации, ОписанияОшибокСинхронизации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаблокироватьЗависимыеДокументы(ОписаниеСинхронизации, ИсточникДанных, ОписанияОшибок)
	
	БлокировкаУстановлена = Истина;
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.ПолноеИмя);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ИсточникДанных;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ЗависимыйДокумент");
		Блокировка.Заблокировать();
		
	Исключение
		
		БлокировкаУстановлена = Ложь;
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось установить блокировку на зависимые документы %1.'"),
			ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.Представление);
		ОписанияОшибок.Добавить(ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ТекстОшибки));
		
	КонецПопытки;
	
	Возврат БлокировкаУстановлена;
	
КонецФункции

Функция СинхронизироватьДокумент(ОписаниеСинхронизации, ВыборкаЗависимыхДокументов)
		
	Если ЗначениеЗаполнено(ВыборкаЗависимыхДокументов.ЗависимыйДокумент) Тогда
		ЗависимыйДокументОбъект = ВыборкаЗависимыхДокументов.ЗависимыйДокумент.ПолучитьОбъект();
	Иначе
		ЗависимыйДокументОбъект = Документы[ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.Имя].СоздатьДокумент();
	КонецЕсли;
	
	Если Не ВыборкаЗависимыхДокументов.ТребуютсяЗависимыеДокументы Тогда
		ЗависимыйДокументОбъект.ПометкаУдаления = Истина;
	Иначе
		
		ЗависимыйДокументОбъект.ПометкаУдаления = Ложь;
		
		ПараметрыПроцедурыЗаполнения = Новый Массив;
		ПараметрыПроцедурыЗаполнения.Добавить(ЗависимыйДокументОбъект);
		ПараметрыПроцедурыЗаполнения.Добавить(ВыборкаЗависимыхДокументов);
		ОбщегоНазначения.ВыполнитьМетодОбъекта(ОписаниеСинхронизации.МодульСинхронизации,
			ОписаниеСинхронизации.ПроцедураЗаполненияДокумента, ПараметрыПроцедурыЗаполнения);
		
	КонецЕсли;
	
	Возврат ЗависимыйДокументОбъект;
	
КонецФункции

Функция РежимЗаписиДокумента(Документ)
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если Документ.ПометкаУдаления Тогда
		Если Документ.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РежимЗаписи;
	
КонецФункции

Процедура ЗаписатьДокумент(Документ, ОписаниеСинхронизации, ОписанияОшибокСинхронизации)
	
	РежимЗаписи = РежимЗаписиДокумента(Документ);
	
	ДокументЗаполненКорректно = Истина;
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДокументЗаполненКорректно = Документ.ПроверитьЗаполнение();
	КонецЕсли;
	
	Если ДокументЗаполненКорректно Тогда
		
		Попытка
			Документ.Записать(РежимЗаписи);
		Исключение
			ОписанияОшибокСинхронизации.Добавить(ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ОписаниеОшибки()));
		КонецПопытки;
	
	Иначе
		
		ТекстыОшибок = Новый Массив;
		Ошибки = ПолучитьСообщенияПользователю(Истина);
		Для Индекс = 0 По Ошибки.Количество() - 1 Цикл
			ТекстыОшибок.Добавить(Ошибки[Индекс].Текст);
		КонецЦикла;
		
		ТекстОшибки = СтрСоединить(ТекстыОшибок, Символы.ПС);
		ОписанияОшибокСинхронизации.Добавить(ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ТекстОшибки));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеОшибкиСинхронизации(ОписаниеСинхронизации, ТекстОшибки, Важность = Неопределено)
	
	УровеньОшибки = УровеньЖурналаРегистрации.Ошибка;
	Если Не Важность = Неопределено Тогда
		УровеньОшибки = Важность;
	КонецЕсли;
	
	Описание = Новый Структура;
	Описание.Вставить("ИмяСобытия", ОписаниеСинхронизации.ИдентификаторСинхронизации);
	Описание.Вставить("УровеньОшибки", УровеньОшибки);
	Описание.Вставить("ОбъектМетаданных", ОписаниеСинхронизации.ОписаниеЗависимогоДокумента.Метаданные);
	Описание.Вставить("ТекстОшибки", ТекстОшибки);
	
	Возврат Описание;
	
КонецФункции

Процедура ВывестиОшибкиВЖурналРегистрации(ОписанияОшибок)
	
	Для Каждого ОписаниеОшибки Из ОписанияОшибок Цикл
		ЗаписьЖурналаРегистрации(ОписаниеОшибки.ИмяСобытия, ОписаниеОшибки.УровеньОшибки,
			ОписаниеОшибки.ОбъектМетаданных,, ОписаниеОшибки.ТекстОшибки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияРегистрацииРасходовЗаСчетДебиторскойЗадолженности

Функция ОписаниеСинхронизацииРегистрацииРасходовЗаСчетДебиторскойЗадолженности()
	
	ОписаниеСинхронизации = ОписаниеСинхронизацииЗависимогоДокумента();
	ОписаниеСинхронизации.ИдентификаторСинхронизации = НСтр("ru = 'Обновление реквизитов прочих расходов.'");
	ОписаниеСинхронизации.ПроцедураЗаполненияДокумента = "ЗаполнитьРегистрациюРасходовЗаСчетДебиторскойЗадолженности";
	ОписаниеСинхронизации.ОписаниеЗависимогоДокумента = ОписаниеЗависимогоДокумента("ПрочиеДоходыРасходы",
		"Документ.ПрочиеДоходыРасходы",
		НСтр("ru = 'Прочие расходы'"));
	
	ОписаниеСинхронизации.ТекстЗапросаПолученияДокументов =
	"ВЫБРАТЬ
	|	РеквизитыФакторинга.Ссылка КАК Факторинг,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.Ссылка,
	|		ЗНАЧЕНИЕ(Документ.ПрочиеДоходыРасходы.ПустаяСсылка)) КАК ЗависимыйДокумент,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА) КАК ЗависимыйДокументПомеченНаУдаление,
	|	(РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж))
	|		И РеквизитыФакторинга.СуммаДокумента > 0) КАК ТребуютсяЗависимыеДокументы
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочиеДоходыРасходы КАК РеквизитыЗависимогоДокумента
	|		ПО РеквизитыФакторинга.Ссылка = РеквизитыЗависимогоДокумента.бг_Основание
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|	И (РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж))
	|		ИЛИ НЕ ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА))";

	Возврат ОписаниеСинхронизации;
	
КонецФункции

Процедура ЗаполнитьРегистрациюРасходовЗаСчетДебиторскойЗадолженности(ЗависимыйДокумент, ИсточникЗаполнения) Экспорт
	
	Если ЗависимыйДокумент.ЭтоНовый() Тогда
		ЗависимыйДокумент.УстановитьСсылкуНового(Документы.ПрочиеДоходыРасходы.ПолучитьСсылку());
	Иначе
		ЗависимыйДокумент.ПрочиеРасходы.Очистить();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыФакторинга.Дата КАК Дата,
	|	РеквизитыФакторинга.Подразделение КАК Подразделение,
	|	РеквизитыФакторинга.СтатьяРасходов КАК СтатьяРасходов,
	|	РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов КАК СтатьяАктивовПассивов,
	|	РеквизитыФакторинга.Организация КАК Организация,
	|	ТаблицаРеализаций.Контрагент КАК Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	&ИнициаторСинхронизации КАК бг_Основание,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(НастройкиСчетов.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка))) КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы) КАК ХозяйственнаяОперация,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК СуммаБезНДС,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК СуммаРегл
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|		ПО РеквизитыФакторинга.Ссылка = ТаблицаРеализаций.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетов
	|		ПО НастройкиСчетов.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
	|			И НастройкиСчетов.Субконто1 = ТаблицаРеализаций.Контрагент
	|			И НастройкиСчетов.Субконто2 = ТаблицаРеализаций.ДоговорКонтрагента
	|			И НастройкиСчетов.Субконто3 = НЕОПРЕДЕЛЕНО
	|			И НастройкиСчетов.ВладелецНастройки = &СсылкаНаЗависимыйДокумент
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыФакторинга.Дата,
	|	РеквизитыФакторинга.Организация,
	|	РеквизитыФакторинга.Подразделение,
	|	РеквизитыФакторинга.СтатьяРасходов,
	|	ТаблицаРеализаций.Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента,
	|	РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов";
	
	Запрос.УстановитьПараметр("ИнициаторСинхронизации", ИсточникЗаполнения.Факторинг);
	Запрос.УстановитьПараметр("СсылкаНаЗависимыйДокумент", ЗависимыйДокумент.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	РеквизитыФакторинга = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникЗаполнения.Факторинг,
		"Организация, Дата");
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("бг_Основание", ИсточникЗаполнения.Факторинг);
	ДанныеЗаполнения.Вставить("Организация", РеквизитыФакторинга.Организация);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	ЗависимыйДокумент.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(ЗависимыйДокумент, ДанныеЗаполнения);
	ЗависимыйДокумент.Дата = РеквизитыФакторинга.Дата;
	
	Пока Выборка.Следующий() Цикл
		
		НовыйРасход = ЗависимыйДокумент.ПрочиеРасходы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйРасход, Выборка);
		
		Если Не ЗначениеЗаполнено(НовыйРасход.НастройкаСчетовУчета) Тогда
			
			ДанныеНастройкиСчетаУчета = Новый Структура;
			ДанныеНастройкиСчетаУчета.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто1", Выборка.Контрагент);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто2", Выборка.ДоговорКонтрагента);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто3", Неопределено);
			ДанныеНастройкиСчетаУчета.Вставить("ВладелецНастройки", ЗависимыйДокумент.Ссылка);
			
			НовыйРасход.НастройкаСчетовУчета = СоздатьНастройкуСчетовУчета(ДанныеНастройкиСчетаУчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьНастройкуСчетовУчета(ОписаниеНастройки)
	
	НоваяНастройкаСчетовУчета = Справочники.НастройкиСчетовУчетаПрочихОпераций.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяНастройкаСчетовУчета, ОписаниеНастройки);
	
	НоваяНастройкаСчетовУчета.Записать();
	
	Возврат НоваяНастройкаСчетовУчета.Ссылка;
	
КонецФункции

#КонецОбласти

#Область СинхронизацияКорректировкиЗадолженности

Функция ОписаниеСинхронизацииКорректировкиЗадолженностиСФактором()
	
	ОписаниеСинхронизации = ОписаниеСинхронизацииЗависимогоДокумента();
	ОписаниеСинхронизации.ИдентификаторСинхронизации =
		НСтр("ru = 'Обновление реквизитов корректировки задолженности с фактором.'");
	ОписаниеСинхронизации.ПроцедураЗаполненияДокумента = "ЗаполнитьКорректировкуЗадолженностиСФактором";
	ОписаниеСинхронизации.ОписаниеЗависимогоДокумента = ОписаниеЗависимогоДокумента("КорректировкаЗадолженности",
		"Документ.КорректировкаЗадолженности",
		НСтр("ru = 'Корректировка задолженности'"));
	
	ОписаниеСинхронизации.ТекстЗапросаПолученияДокументов =
	"ВЫБРАТЬ
	|	РеквизитыФакторинга.Ссылка КАК Факторинг,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.Ссылка,
	|		ЗНАЧЕНИЕ(Документ.КорректировкаЗадолженности.ПустаяСсылка)) КАК ЗависимыйДокумент,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА) КАК ЗависимыйДокументПомеченНаУдаление,
	|	(РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.СуммаДокумента > 0
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам))) КАК ТребуютсяЗависимыеДокументы
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности КАК РеквизитыЗависимогоДокумента
	|		ПО РеквизитыФакторинга.Ссылка = РеквизитыЗависимогоДокумента.бг_Основание
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|	И НЕ РеквизитыФакторинга.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору)
	|	И (РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам))
	|		ИЛИ НЕ ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА))";

	Возврат ОписаниеСинхронизации;
	
КонецФункции

Процедура ЗаполнитьКорректировкуЗадолженностиСФактором(ЗависимыйДокумент, ИсточникЗаполнения) Экспорт
	
	Если ЗависимыйДокумент.ЭтоНовый() Тогда
		ЗависимыйДокумент.УстановитьСсылкуНового(Документы.КорректировкаЗадолженности.ПолучитьСсылку());
	Иначе
		
		ЗависимыйДокумент.Задолженность.Очистить();
		ЗависимыйДокумент.ДоходыРасходыАктивыПассивы.Очистить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияКорректировкиЗадолженностиСФактором();
	
	Запрос.УстановитьПараметр("ИнициаторСинхронизации", ИсточникЗаполнения.Факторинг);
	Запрос.УстановитьПараметр("СсылкаНаЗависимыйДокумент", ЗависимыйДокумент.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаРеквизитовЗависимогоДокумента = РезультатЗапроса[0].Выбрать();
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("бг_Основание", ИсточникЗаполнения.Факторинг);
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Пока ВыборкаРеквизитовЗависимогоДокумента.Следующий() Цикл
		
		Если ВыборкаРеквизитовЗависимогоДокумента.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам Тогда
			
			ДанныеЗаполнения.Вставить("КорреспонденцияСДоходами", Ложь);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", 
				Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
			
		Иначе
			
			ДанныеЗаполнения.Вставить("КорреспонденцияСДоходами", Истина);
			ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", 
				Перечисления.ХозяйственныеОперации.НачислениеДебиторскойЗадолженности);
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаРеквизитовЗависимогоДокумента);
		ЗависимыйДокумент.Заполнить(ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЗависимыйДокумент, ДанныеЗаполнения);
		ЗависимыйДокумент.Дата = ВыборкаРеквизитовЗависимогоДокумента.Дата;
		
		НоваяЗадолженность = ЗависимыйДокумент.Задолженность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗадолженность, ВыборкаРеквизитовЗависимогоДокумента);
		
	КонецЦикла;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыеДоходыРасходы = ЗависимыйДокумент.ДоходыРасходыАктивыПассивы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыеДоходыРасходы, Выборка, , "НастройкаСчетовУчета");
		
		Если ТипЗнч(НовыеДоходыРасходы.Статья) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов")
			И ЗначениеЗаполнено(НовыеДоходыРасходы.Статья) Тогда
			
			НовыеДоходыРасходы.НастройкаСчетовУчета = Выборка.НастройкаСчетовУчета;
			Если Не ЗначениеЗаполнено(НовыеДоходыРасходы.НастройкаСчетовУчета) Тогда
				
				ДанныеНастройкиСчетаУчета = Новый Структура;
				ДанныеНастройкиСчетаУчета.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
				ДанныеНастройкиСчетаУчета.Вставить("Субконто1", Выборка.КонтрагентРеализации);
				ДанныеНастройкиСчетаУчета.Вставить("Субконто2", Выборка.ДоговорРеализации);
				ДанныеНастройкиСчетаУчета.Вставить("Субконто3", Неопределено);
				ДанныеНастройкиСчетаУчета.Вставить("ВладелецНастройки", ЗависимыйДокумент.Ссылка);
			
				НовыеДоходыРасходы.НастройкаСчетовУчета = СоздатьНастройкуСчетовУчета(ДанныеНастройкиСчетаУчета);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияКорректировкиЗадолженностиСФактором()
	
	Возврат
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РеквизитыФакторинга.Ссылка КАК Ссылка,
	|	РеквизитыФакторинга.Дата КАК Дата,
	|	РеквизитыФакторинга.Организация КАК Организация,
	|	РеквизитыФакторинга.ВидОперации КАК ВидОперации,
	|	РеквизитыФакторинга.Фактор КАК Контрагент,
	|	РеквизитыФакторинга.Фактор.Партнер КАК Партнер,
	|	РеквизитыФакторинга.ДоговорФактора.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РеквизитыФакторинга.ДоговорФактора.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РеквизитыФакторинга.ДоговорФактора.ВалютаВзаиморасчетов КАК Валюта,
	|	РеквизитыФакторинга.ДоговорФактора КАК ДоговорКонтрагента,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК Сумма
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|		ПО ТаблицаРеализаций.Ссылка = РеквизитыФакторинга.Ссылка
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыФакторинга.Ссылка
	|;
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РеквизитыФакторинга.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам)
	|			ТОГДА РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов
	|		ИНАЧЕ РеквизитыФакторинга.СтатьяДоходов
	|	КОНЕЦ КАК Статья,
	|	ТаблицаРеализаций.Контрагент КАК КонтрагентРеализации,
	|	ТаблицаРеализаций.ДоговорКонтрагента КАК ДоговорРеализации,
	|	ТаблицаРеализаций.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	РеквизитыФакторинга.Подразделение КАК Подразделение,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(НастройкиСчетов.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка))) КАК НастройкаСчетовУчета,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК Сумма
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|		ПО ТаблицаРеализаций.Ссылка = РеквизитыФакторинга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетов
	|		ПО НастройкиСчетов.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
	|			И НастройкиСчетов.Субконто1 = ТаблицаРеализаций.Контрагент
	|			И НастройкиСчетов.Субконто2 = ТаблицаРеализаций.ДоговорКонтрагента
	|			И НастройкиСчетов.Субконто3 = НЕОПРЕДЕЛЕНО
	|			И НастройкиСчетов.ВладелецНастройки = &СсылкаНаЗависимыйДокумент
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|	И ТаблицаРеализаций.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА РеквизитыФакторинга.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам)
	|			ТОГДА РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов
	|		ИНАЧЕ РеквизитыФакторинга.СтатьяДоходов
	|	КОНЕЦ,
	|	РеквизитыФакторинга.Подразделение,
	|	ТаблицаРеализаций.Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента";

КонецФункции

Функция ОписаниеСинхронизацииКорректировкиЗадолженностиСКонтрагентами()
	
	ОписаниеСинхронизации = ОписаниеСинхронизацииЗависимогоДокумента();
	ОписаниеСинхронизации.ИдентификаторСинхронизации =
		НСтр("ru = 'Обновление реквизитов корректировки задолженности с контрагентами.'");
	ОписаниеСинхронизации.ПроцедураЗаполненияДокумента = "ЗаполнитьКорректировкуЗадолженностиСКонтрагентом";
	ОписаниеСинхронизации.ОписаниеЗависимогоДокумента = ОписаниеЗависимогоДокумента("КорректировкаЗадолженности",
		"Документ.КорректировкаЗадолженности",
		НСтр("ru = 'Корректировка задолженности'"));
	
	ОписаниеСинхронизации.ТекстЗапросаПолученияДокументов =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРеализаций.Ссылка КАК Факторинг,
	|	ТаблицаРеализаций.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КонтрагентыДляОбработки
	|ИЗ
	|	Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|ГДЕ
	|	ТаблицаРеализаций.Ссылка = &ИнициаторСинхронизации
	|	И ТаблицаРеализаций.Сумма > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКСинхронизации.Факторинг КАК Факторинг,
	|	ДанныеКСинхронизации.Контрагент КАК Контрагент,
	|	ДанныеКСинхронизации.ЗависимыйДокумент КАК ЗависимыйДокумент,
	|	МАКСИМУМ(ДанныеКСинхронизации.ЗависимыйДокументПомеченНаУдаление) КАК ЗависимыйДокументПомеченНаУдаление,
	|	МАКСИМУМ(ДанныеКСинхронизации.ТребуютсяЗависимыеДокументы) КАК ТребуютсяЗависимыеДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеквизитыФакторинга.Ссылка КАК Факторинг,
	|		КонтрагентыДляОбработки.Контрагент КАК Контрагент,
	|		ЕСТЬNULL(РеквизитыЗависимогоДокумента.Ссылка,
	|			ЗНАЧЕНИЕ(Документ.КорректировкаЗадолженности.ПустаяСсылка)) КАК ЗависимыйДокумент,
	|		ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА) КАК ЗависимыйДокументПомеченНаУдаление,
	|		(РеквизитыФакторинга.Проведен
	|			И РеквизитыФакторинга.ВидОперации = ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору)
	|			И РеквизитыФакторинга.СуммаДокумента > 0
	|		) КАК ТребуютсяЗависимыеДокументы
	|	ИЗ
	|		Документ.битФакторинг КАК РеквизитыФакторинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыДляОбработки КАК КонтрагентыДляОбработки
	|			ПО РеквизитыФакторинга.Ссылка = КонтрагентыДляОбработки.Факторинг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности КАК РеквизитыЗависимогоДокумента
	|			ПО РеквизитыФакторинга.Ссылка = РеквизитыЗависимогоДокумента.бг_Основание
	|				И РеквизитыЗависимогоДокумента.Контрагент = КонтрагентыДляОбработки.Контрагент
	|	ГДЕ
	|		РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|		И НЕ РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам))
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РеквизитыФакторинга.Ссылка КАК Факторинг,
	|		РеквизитыЗависимогоДокумента.Контрагент,
	|		РеквизитыЗависимогоДокумента.Ссылка,
	|		РеквизитыЗависимогоДокумента.ПометкаУдаления,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.битФакторинг КАК РеквизитыФакторинга
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности КАК РеквизитыЗависимогоДокумента
	|			ПО РеквизитыФакторинга.Ссылка = РеквизитыЗависимогоДокумента.бг_Основание
	|	ГДЕ
	|		РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|		И НЕ РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам))) КАК ДанныеКСинхронизации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКСинхронизации.Факторинг,
	|	ДанныеКСинхронизации.Контрагент,
	|	ДанныеКСинхронизации.ЗависимыйДокумент
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ДанныеКСинхронизации.ТребуютсяЗависимыеДокументы)
	|		ИЛИ НЕ МАКСИМУМ(ДанныеКСинхронизации.ЗависимыйДокументПомеченНаУдаление)";

	Возврат ОписаниеСинхронизации;
	
КонецФункции

Процедура ЗаполнитьКорректировкуЗадолженностиСКонтрагентом(ЗависимыйДокумент, ИсточникЗаполнения) Экспорт
	
	Если ЗависимыйДокумент.ЭтоНовый() Тогда
		ЗависимыйДокумент.УстановитьСсылкуНового(Документы.КорректировкаЗадолженности.ПолучитьСсылку());
	Иначе
		
		ЗависимыйДокумент.Задолженность.Очистить();
		ЗависимыйДокумент.ДоходыРасходыАктивыПассивы.Очистить();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияКорректировкиЗадолженностиСКонтрагентом();
	
	Запрос.УстановитьПараметр("ИнициаторСинхронизации", ИсточникЗаполнения.Факторинг);
	Запрос.УстановитьПараметр("Контрагент", ИсточникЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("СсылкаНаЗависимыйДокумент", ЗависимыйДокумент.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЗаполнитьРеквизитыКорректировкиЗадолженностиСКонтрагентом(РезультатЗапроса[0].Выбрать(), ЗависимыйДокумент);
	
	ВыборкаЗадолженности = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаЗадолженности.Следующий() Цикл
		
		НоваяЗадолженность = ЗависимыйДокумент.Задолженность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗадолженность, ВыборкаЗадолженности);
		
	КонецЦикла;
	
	ВыборкаРасходов = РезультатЗапроса[2].Выбрать();
	Пока ВыборкаРасходов.Следующий() Цикл
		
		НовыеДоходыРасходы = ЗависимыйДокумент.ДоходыРасходыАктивыПассивы.Добавить();
		ЗаполнитьЗначенияСвойств(НовыеДоходыРасходы, ВыборкаРасходов);
		Если Не ЗначениеЗаполнено(НовыеДоходыРасходы.НастройкаСчетовУчета) Тогда
			
			ДанныеНастройкиСчетаУчета = Новый Структура;
			ДанныеНастройкиСчетаУчета.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто1", ВыборкаРасходов.Контрагент);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто2", ВыборкаРасходов.ДоговорКонтрагента);
			ДанныеНастройкиСчетаУчета.Вставить("Субконто3", Неопределено);
			ДанныеНастройкиСчетаУчета.Вставить("ВладелецНастройки", ЗависимыйДокумент.Ссылка);
		
			НовыеДоходыРасходы.НастройкаСчетовУчета = СоздатьНастройкуСчетовУчета(ДанныеНастройкиСчетаУчета);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаЗаполненияКорректировкиЗадолженностиСКонтрагентом()
	
	Возврат
	"ВЫБРАТЬ
	|	&Контрагент КАК Контрагент,
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Ссылка КАК бг_Основание
	|ИЗ
	|	Документ.битФакторинг КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &ИнициаторСинхронизации
	|;
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ТаблицаРеализаций.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТаблицаРеализаций.Контрагент.Партнер КАК Партнер,
	|	ТаблицаРеализаций.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРеализаций.Сумма КАК Сумма
	|ИЗ
	|	Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|ГДЕ
	|	ТаблицаРеализаций.Ссылка = &ИнициаторСинхронизации
	|	И ТаблицаРеализаций.Контрагент = &Контрагент
	|	И ТаблицаРеализаций.Сумма > 0
	|;
	|
	|ВЫБРАТЬ
	|	РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов КАК Статья,
	|	ТаблицаРеализаций.Контрагент КАК Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаРеализаций.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	РеквизитыФакторинга.Подразделение КАК Подразделение,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(НастройкиСчетов.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка))) КАК НастройкаСчетовУчета,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК Сумма
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|		ПО ТаблицаРеализаций.Ссылка = РеквизитыФакторинга.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций КАК НастройкиСчетов
	|		ПО НастройкиСчетов.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
	|			И НастройкиСчетов.Субконто1 = ТаблицаРеализаций.Контрагент
	|			И НастройкиСчетов.Субконто2 = ТаблицаРеализаций.ДоговорКонтрагента
	|			И НастройкиСчетов.Субконто3 = НЕОПРЕДЕЛЕНО
	|			И НастройкиСчетов.ВладелецНастройки = &СсылкаНаЗависимыйДокумент
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|	И ТаблицаРеализаций.Контрагент = &Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыФакторинга.КорСтатьяАктивовЗадолженностьКлиентов,
	|	РеквизитыФакторинга.Подразделение,
	|	ТаблицаРеализаций.Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаРеализаций.Сумма) > 0";

КонецФункции

Процедура ЗаполнитьРеквизитыКорректировкиЗадолженностиСКонтрагентом(ВыборкаРеквизитов, ЗависимыйДокумент)
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("КорреспонденцияСДоходами", Ложь);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", 
		Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	ДанныеЗаполнения.Вставить("бг_Основание", Документы.битФакторинг.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Дата", Дата(1, 1, 1));
		
	Пока ВыборкаРеквизитов.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаРеквизитов);
	КонецЦикла;
	
	ЗависимыйДокумент.Заполнить(ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(ЗависимыйДокумент, ДанныеЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияОбеспеченияОбязательств

Функция ОписаниеСинхронизацииОбеспеченияОбязательств()
	
	ОписаниеСинхронизации = ОписаниеСинхронизацииЗависимогоДокумента();
	ОписаниеСинхронизации.ИдентификаторСинхронизации =
		НСтр("ru = 'Обновление реквизитов операции вручную.'");
	ОписаниеСинхронизации.ПроцедураЗаполненияДокумента = "ЗаполнитьОбеспечениеОбязательств";
	ОписаниеСинхронизации.ОписаниеЗависимогоДокумента = ОписаниеЗависимогоДокумента("ОперацияБух",
		"Документ.ОперацияБух",
		НСтр("ru = 'Операция (регламентированный учет)'"));
	
	ОписаниеСинхронизации.ТекстЗапросаПолученияДокументов =
	"ВЫБРАТЬ
	|	РеквизитыФакторинга.Ссылка КАК Факторинг,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.Ссылка,
	|		ЗНАЧЕНИЕ(Документ.ОперацияБух.ПустаяСсылка)) КАК ЗависимыйДокумент,
	|	ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА) КАК ЗависимыйДокументПомеченНаУдаление,
	|	(РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору))) КАК ТребуютсяЗависимыеДокументы
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияБух КАК РеквизитыЗависимогоДокумента
	|		ПО РеквизитыФакторинга.Ссылка = РеквизитыЗависимогоДокумента.бг_Основание
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|	И (РеквизитыФакторинга.Проведен
	|		И РеквизитыФакторинга.ВидОперации В (
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуНаФинансирование),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебитораНам),
	|			ЗНАЧЕНИЕ(Перечисление.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору))
	|		ИЛИ НЕ ЕСТЬNULL(РеквизитыЗависимогоДокумента.ПометкаУдаления, ИСТИНА))";
	
	Возврат ОписаниеСинхронизации;
	
КонецФункции

Процедура ЗаполнитьОбеспечениеОбязательств(ЗависимыйДокумент, ИсточникЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеквизитыФакторинга.Ссылка КАК Факторинг,
	|	РеквизитыФакторинга.Дата КАК Дата,
	|	РеквизитыФакторинга.Организация КАК Организация,
	|	РеквизитыФакторинга.ВидОперации КАК ВидОперации,
	|	РеквизитыФакторинга.Ответственный КАК Ответственный,
	|	ТаблицаРеализаций.Контрагент КАК Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК СуммаОперации,
	|	СУММА(ТаблицаРеализаций.Сумма) КАК СуммаУУ
	|ИЗ
	|	Документ.битФакторинг КАК РеквизитыФакторинга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битФакторинг.ДокументыРеализации КАК ТаблицаРеализаций
	|		ПО РеквизитыФакторинга.Ссылка = ТаблицаРеализаций.Ссылка
	|ГДЕ
	|	РеквизитыФакторинга.Ссылка = &ИнициаторСинхронизации
	|	И ТаблицаРеализаций.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыФакторинга.Ссылка,
	|	ТаблицаРеализаций.Контрагент,
	|	ТаблицаРеализаций.ДоговорКонтрагента
	|
	|ИТОГИ
	|	СУММА(Сумма),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Ответственный),
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(ВидОперации)
	|ПО
	|	Факторинг";
	
	Запрос.УстановитьПараметр("ИнициаторСинхронизации", ИсточникЗаполнения.Факторинг);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоДокументам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("бг_Основание", ИсточникЗаполнения.Факторинг);
	ДанныеЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Ответственный", Справочники.Пользователи.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Дата", Дата(1, 1, 1));
	ДанныеЗаполнения.Вставить("СуммаОперации", 0);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументам);
		ДанныеЗаполнения.СуммаОперации = ВыборкаПоДокументам.Сумма;
		ЗависимыйДокумент.Заполнить(ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(ЗависимыйДокумент, ДанныеЗаполнения);
		
		ЗависимыйДокумент.Движения.Хозрасчетный.Очистить();
		ЗависимыйДокумент.Движения.Хозрасчетный.Записывать = Истина;
		
		Если ВыборкаПоДокументам.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам
			Или ВыборкаПоДокументам.ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебиторомФактору Тогда
			
			ИмяСчета = "СчетКт";
			ИмяСубконто = "СубконтоКт";
			
		Иначе
			
			ИмяСчета = "СчетДт";
			ИмяСубконто = "СубконтоДт";
			
		КонецЕсли;
		
		Выборка = ВыборкаПоДокументам.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяПроводка = ЗависимыйДокумент.Движения.Хозрасчетный.Добавить();
			
			НоваяПроводка[ИмяСчета] = ПланыСчетов.Хозрасчетный.ОбеспеченияОбязательствВыданные;
			НоваяПроводка[ИмяСубконто].Контрагенты = Выборка.Контрагент;
			НоваяПроводка[ИмяСубконто].Договоры = Выборка.ДоговорКонтрагента; 
			НоваяПроводка.Сумма = Выборка.Сумма;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти