#Область ПрограммныйИнтерфейс

#Область Проведение

&После("ЗарегистрироватьУчетныеМеханизмы")
Процедура бг_ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента)
	
	МеханизмыДокумента.Добавить("бг_УчетБанковскихГарантий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&Перед("ОбработкаПроверкиЗаполнения")
Процедура бг_ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты)

	бг_ПроверитьОбъемБанковскихГарантий(Объект, Отказ, ПроверяемыеРеквизиты);
	бг_ПроверитьСрокДействияБанковскихГарантий(Объект, Отказ, ПроверяемыеРеквизиты);

	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Не Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("бг_ДокументПоступленияНаСклад");
    КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&После("ПриКопировании")
Процедура бг_ПриКопировании(Объект, ОбъектКопирования)
	
	бг_НакладнаяНаВыдачуФСМ = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область АкцизыПоПриобретеннымЦенностям

Функция бг_ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ДокументОбъект) Экспорт

	Если Не бг_УчетБанковскихГарантий.ВестиУчетАкцизовПоПриобретеннымЦенностям(ДокументОбъект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если бг_УчетБанковскихГарантий.ТребуетсяЗаполнениеАкцизовПоПриобретеннымЦенностям(ДокументОбъект) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеГарантии.БанковскаяГарантия КАК БанковскаяГарантия,
	|	БанковскиеГарантии.Количество КАК Количество
	|ПОМЕСТИТЬ БанковскиеГарантии
	|ИЗ
	|	&БанковскиеГарантии КАК БанковскиеГарантии
	|;
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|ВЫБРАТЬ
	|	АкцизПоПриобретеннымЦенностям.Номенклатура КАК Номенклатура,
	|	АкцизПоПриобретеннымЦенностям.СерияНоменклатуры КАК СерияНоменклатуры,
	|	АкцизПоПриобретеннымЦенностям.БанковскаяГарантия КАК БанковскаяГарантия,
	|	АкцизПоПриобретеннымЦенностям.Количество КАК Количество
	|ПОМЕСТИТЬ АкцизПоПриобретеннымЦенностям
	|ИЗ
	|	&бг_АкцизПоПриобретеннымЦенностям КАК АкцизПоПриобретеннымЦенностям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Неопределено КАК Номенклатура,
	|	Неопределено КАК СерияНоменклатуры,
	|	БанковскиеГарантии.БанковскаяГарантия КАК БанковскаяГарантия,
	|	БанковскиеГарантии.Количество КАК Количество
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	БанковскиеГарантии КАК БанковскиеГарантии
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено КАК Номенклатура,
	|	Неопределено КАК СерияНоменклатуры,
	|	Акцизы.БанковскаяГарантия,
	|	-Акцизы.Количество
	|ИЗ
	|	АкцизПоПриобретеннымЦенностям КАК Акцизы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Неопределено,
	|	1
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ 
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидАлкогольнойПродукции.ВидЛицензии В(&ВидыЛицензииСпирт)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Серия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Акцизы.Номенклатура,
	|	Акцизы.СерияНоменклатуры,
	|	Неопределено,
	|	-1
	|ИЗ
	|	АкцизПоПриобретеннымЦенностям КАК Акцизы
	|
	|СГРУППИРОВАТЬ ПО
	|	Акцизы.Номенклатура,
	|	Акцизы.СерияНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Данные.Номенклатура,
	|	Данные.СерияНоменклатуры,
	|	Данные.БанковскаяГарантия,
	|	СУММА(Данные.Количество) КАК Количество
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Номенклатура,
	|	Данные.СерияНоменклатуры,
	|	Данные.БанковскаяГарантия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Данные.Количество) <> 0";

	ВидыЛицензииСпирт = Новый Массив;
	ВидыЛицензииСпирт.Добавить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	ВидыЛицензииСпирт.Добавить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	Запрос.УстановитьПараметр("ВидыЛицензииСпирт", ВидыЛицензииСпирт);
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить(, "Номенклатура, Серия, Количество"));
	Запрос.УстановитьПараметр("бг_АкцизПоПриобретеннымЦенностям", ДокументОбъект.бг_АкцизПоПриобретеннымЦенностям.Выгрузить());
	Запрос.УстановитьПараметр("БанковскиеГарантии", ДокументОбъект.БанковскиеГарантии.Выгрузить(, "БанковскаяГарантия, Количество"));
	Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
КонецФункции

Функция бг_ТекстЗапросаДвиженияАкцизыПоПриобретеннымЦенностям() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТабличнаяЧасть.Ссылка.Дата КАК Период,
	|	ТабличнаяЧасть.Ссылка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК СерияНоменклатуры,
	|	ТабличнаяЧасть.БанковскаяГарантия КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.бг_СостоянияОплатыВходящегоАкциза.ЗарегистрированаБанковскаяГарантияЗаАкцизыВБюджет) КАК СтатусАкциза,
	|	ЗНАЧЕНИЕ(Перечисление.бг_СостоянияПодакцизногоСырья.ПустаяСсылка) КАК СостояниеСырья,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.бг_АкцизПоПриобретеннымЦенностям КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|	И ТабличнаяЧасть.БанковскаяГарантия <> ЗНАЧЕНИЕ(Справочник.бг_БанковскиеГарантии.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Ссылка,
	|	ТабличнаяЧасть.БанковскаяГарантия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТабличнаяЧасть.Ссылка.Дата,
	|	ТабличнаяЧасть.Ссылка.Организация,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.СерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.БанковскаяГарантия = ЗНАЧЕНИЕ(Справочник.бг_БанковскиеГарантии.ПустаяСсылка)
	|			ТОГДА &Ссылка
	|		ИНАЧЕ ТабличнаяЧасть.БанковскаяГарантия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.БанковскаяГарантия = ЗНАЧЕНИЕ(Справочник.бг_БанковскиеГарантии.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бг_СостоянияОплатыВходящегоАкциза.АкцизПоНеОплаченнымМЦ)
	|		КОГДА ТабличнаяЧасть.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
	|			И ТабличнаяЧасть.Ссылка.бг_ДиапазонБанковскихГарантий <> ЗНАЧЕНИЕ(Справочник.бг_БанковскиеГарантии.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.бг_СостоянияОплатыВходящегоАкциза.АвансовыйАкцизВСырье)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.бг_СостоянияОплатыВходящегоАкциза.АвансовыйАкцизНаТоварыВПути)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.бг_СостоянияПодакцизногоСырья.ВМестахХранения),
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.бг_АкцизПоПриобретеннымЦенностям КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)";
	
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

&После("ДополнитьТекстыЗапросовПроведения")
Процедура бг_ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры)
	
	бг_ДополнитьТекстыЗапросовПроведенияБанковскиеГарантии(Запрос, ТекстыЗапроса, Регистры);
	бг_ДополнитьТекстыЗапросовПроведенияАкцизыПоПриобретеннымЦенностям(Запрос, ТекстыЗапроса, Регистры);
	
КонецПроцедуры

Процедура бг_ДополнитьТекстыЗапросовПроведенияБанковскиеГарантии(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "бг_БанковскиеГарантии";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.БанковскаяГарантия КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ТабличнаяЧасть.БанковскаяГарантия КАК БанковскаяГарантия,
	|	ТабличнаяЧасть.Сумма КАК Сумма,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПриобретениеТоваровУслуг.Дата КАК Период,
	|	ПриобретениеТоваровУслуг.Организация КАК Организация
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.БанковскиеГарантии КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ПО ТабличнаяЧасть.Ссылка = ПриобретениеТоваровУслуг.Ссылка
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура бг_ДополнитьТекстыЗапросовПроведенияАкцизыПоПриобретеннымЦенностям(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "бг_АкцизПоПриобретеннымЦенностям";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(бг_ТекстЗапросаДвиженияАкцизыПоПриобретеннымЦенностям(), ИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполненияБанковскихГарантий

Процедура бг_ПроверитьОбъемБанковскихГарантий(Объект, Отказ, ПроверяемыеРеквизиты)

	Если ЗначениеЗаполнено(Объект.бг_ДиапазонБанковскихГарантий) И Объект.Товары.Итог("Количество") <> Объект.БанковскиеГарантии.Итог("Количество") Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр(
				"ru = 'Объем закупаемых товаров не соответствует объему банковских гарантий.';
				|en = 'Объем закупаемых товаров не соответствует объему банковских гарантий.'"),
			Объект,
			, // КлючДанных
			, // Поле
			Отказ);
			
	КонецЕсли;	

КонецПроцедуры

Процедура бг_ПроверитьСрокДействияБанковскихГарантий(Объект, Отказ, ПроверяемыеРеквизиты)
	
	ПолеПоискаБанковскойГарантии = "БанковскаяГарантия";
	СрокиДействияБанковскихГарантий = бг_СрокиДействияБанковскихГарантий(Объект);
	СрокиДействияБанковскихГарантий.Индексы.Добавить(ПолеПоискаБанковскойГарантии);
	
	ОтборБанковскойГарантии = Новый Структура(ПолеПоискаБанковскойГарантии);
	
	Для Каждого	СтрокаБанковскихГарантий Из Объект.БанковскиеГарантии Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборБанковскойГарантии, СтрокаБанковскихГарантий);
		
		СрокиДействияБанковскойГарантии = 
			СрокиДействияБанковскихГарантий.Найти(СтрокаБанковскихГарантий.БанковскаяГарантия, ПолеПоискаБанковскойГарантии);
			
		Если СрокиДействияБанковскойГарантии = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр(
						"ru = 'Банковские гарантии: в строке %1 использована не зарегистрированная банковская гарантия %2'; 
						|en = 'Банковские гарантии: в строке %1 использована не зарегистрированная банковская гарантия %2'"),
					СтрокаБанковскихГарантий.НомерСтроки,
					СтрокаБанковскихГарантий.БанковскаяГарантия),
				Объект,
				"БанковскиеГарантии",        
				, // Поле
				Отказ);
			
		ИначеЕсли СрокиДействияБанковскойГарантии.НачалоДействия > Объект.Дата Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр(
						"ru = 'Банковские гарантии: в строке %1 банковская гарантия %2 зарегистрирована позже (%3) даты документа (%4)';
						|en = 'Банковские гарантии: в строке %1 банковская гарантия %2 зарегистрирована позже (%3) даты документа (%4)'"),
					СтрокаБанковскихГарантий.НомерСтроки,
					СтрокаБанковскихГарантий.БанковскаяГарантия,
					Формат(СрокиДействияБанковскойГарантии.НачалоДействия, "ДЛФ=Д"),
					Формат(Объект.Дата, "ДЛФ=Д")),
				Объект,
				"БанковскиеГарантии",        
				, // Поле
				Отказ);
				
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Считаем, что банковская гарантия доступна с даты её регистрации
//
Функция бг_СрокиДействияБанковскихГарантий(Объект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеГарантии.БанковскаяГарантия КАК БанковскаяГарантия,
	|	МИНИМУМ(БанковскиеГарантии.Период) КАК НачалоДействия
	|ИЗ
	|	РегистрНакопления.бг_БанковскиеГарантии КАК БанковскиеГарантии
	|ГДЕ
	|	БанковскиеГарантии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И БанковскиеГарантии.БанковскаяГарантия В(&БанковскиеГарантии)
	|
	|СГРУППИРОВАТЬ ПО
	|	БанковскиеГарантии.БанковскаяГарантия";
	Запрос.УстановитьПараметр("БанковскиеГарантии", Объект.БанковскиеГарантии.ВыгрузитьКолонку("БанковскаяГарантия"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецОбласти
