
&ИзменениеИКонтроль("ЗаполнитьСгенерироватьСерии")
Процедура бг_ЗаполнитьСгенерироватьСерии(Контекст, Результат)

#Вставка
	Если Не ЗначениеЗаполнено(Контекст.Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
#КонецВставки
	
	//++ НЕ ГОСИС
	ПараметрыЗаполнения = Неопределено;
	ПараметрыЗаполнения = ИнтеграцияЕГАИСУТ.ПараметрыЗаполненияСерий();
	ПараметрыЗаполнения.ОрганизацияЕГАИС = Контекст.Объект.Грузополучатель;
	ПараметрыЗаполнения.ЗаполнятьБезЗапросаСправок = Контекст.ЗаполнятьБезЗапросаСправок;
	ПараметрыЗаполнения.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
	
	Если ТипЗнч(Контекст.Объект.ТорговыйОбъект) = ТипЗнч(Контекст.СобственныйТорговыйОбъектЗначениеПоУмолчанию) Тогда
		ИнтеграцияЕГАИСУТ.ЗаполнитьПараметрЗаполненияСклад(Контекст.Объект, ПараметрыЗаполнения);
	КонецЕсли;
	
	СтруктураДействий = Контекст.СтруктураДействий;
	Если (СтруктураДействий = Неопределено) Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("ПараметрыУказанияСерий, Склад", Контекст.ПараметрыУказанияСерий, ПараметрыЗаполнения.Склад));
	
#Вставка
	бг_СерииНоменклатуры.ДозаполнитьПараметрыГенерацииСерийАлкогольнойПродукции(ПараметрыЗаполнения, Контекст);
#КонецВставки
	РезультатЗаполнения = ИнтеграцияЕГАИСУТ.ЗаполнитьСгенерироватьСерии(
		Контекст.Объект.Товары,
		Контекст.МассивСтрок,
		ПараметрыЗаполнения,
		СтруктураДействий);
	ЗаполнитьЗначенияСвойств(Результат, РезультатЗаполнения);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Создан по аналогии с типовой процедурой ПолучитьКоличествоВозможныхДокументовПоступленияТоваров
//
Процедура бг_ПолучитьКоличествоВозможныхДокументовВозвратТоваровОтКлиента(Количество, Организация, ТорговыйОбъект, Контрагент) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВозвратТоваровОтКлиента.Ссылка) КАК Количество
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО ТТНВходящаяЕГАИС.ДокументОснование = ВозвратТоваровОтКлиента.Ссылка
	|ГДЕ
	|	НЕ ВозвратТоваровОтКлиента.ПометкаУдаления
	|	И ВозвратТоваровОтКлиента.Организация = &Организация
	|	И ВозвратТоваровОтКлиента.Склад = &Склад
	|	И ВозвратТоваровОтКлиента.Контрагент = &ПоставщикКонтрагент
	|	И ТТНВходящаяЕГАИС.Ссылка ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Склад",               ТорговыйОбъект);
	Запрос.УстановитьПараметр("ПоставщикКонтрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

&После("ПриОпределенииРасхожденийСТТНВходящейЕГАИС")
// Процедура проверяет наличие расхождений между ТТН и товарами накладной.
//
// Параметры:
//   ДокументСсылка      - ДокументСсылка.ТТНВходящаяЕГАИС - проверяемая ТТН.
//   ДокументПоступления - ДокументСсылка                  - проверяемое поступление товаров.
//   ЕстьРасхождения      - Булево                         - возвращаемое значение: Истина если есть расхождения.
Процедура бг_ПриОпределенииРасхожденийСТТНВходящейЕГАИС(ДокументСсылка, ДокументПоступления, ЕстьРасхождения) Экспорт
	
	Если ТипЗнч(ДокументПоступления) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		ЕстьРасхождения = ИнтеграцияЕГАИСУТ.бг_ЕстьРасхожденияМеждуДокументомВозвратТоваровОтКлиентаИТТНЕГАИС(ДокументСсылка, ДокументПоступления);
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ПриЗагрузкеТТНВходящаяЕГАИС")
//Процедура вызывается при загрузке ТТН входящей ЕГАИС (перед записью).
//
//Параметры:
//  ТТНВходящаяОбъект - ДокументОбъект.ТТНВходящаяЕГАИС - загружаемая ТТН.
Процедура бг_ПриЗагрузкеТТНВходящаяЕГАИС(ТТНВходящаяОбъект)

	//++ НЕ ГОСИС
	// Заполнение склада и организации
	РеквизитыОрганизацииЕГАИС = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТТНВходящаяОбъект.Грузополучатель, "Контрагент, ТорговыйОбъект");

	ТТНВходящаяОбъект.Организация = РеквизитыОрганизацииЕГАИС.Контрагент;
	ТТНВходящаяОбъект.ТорговыйОбъект = РеквизитыОрганизацииЕГАИС.ТорговыйОбъект;

	// Заполнение документа основания
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТТНИсходящаяЕГАИС.Ссылка            КАК Ссылка,
	|	ТТНИсходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
	|ГДЕ
	|	ТТНИсходящаяЕГАИС.Идентификатор = &Идентификатор");

	Запрос.УстановитьПараметр("Идентификатор", ТТНВходящаяОбъект.Идентификатор);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	ТТНИсходящая = Неопределено;

	Если Выборка.Следующий() Тогда
		ТТНИсходящая = Выборка.Ссылка;
		Если ЗначениеЗаполнено(Выборка.ДокументОснование) Тогда
			ТТНВходящаяОбъект.ДокументОснование = Выборка.ДокументОснование;
		КонецЕсли;
	КонецЕсли;

	// Заполнение серий
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ТТНВходящаяОбъект, Документы.ТТНВходящаяЕГАИС);

	Если ЗначениеЗаполнено(ТТНВходящаяОбъект.ДокументОснование) Тогда // скопировать ТЧ из ТТНИсходящая

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТТНИсходящаяЕГАИСТовары.НомерСтроки                   КАК НомерСтроки,
		|	ТТНИсходящаяЕГАИСТовары.АлкогольнаяПродукция          КАК АлкогольнаяПродукция,
		|	ТТНИсходящаяЕГАИСТовары.Номенклатура                  КАК Номенклатура,
		|	ТТНИсходящаяЕГАИСТовары.Характеристика                КАК Характеристика,
		|	ТТНИсходящаяЕГАИСТовары.Серия                         КАК Серия,
		|	ТТНИсходящаяЕГАИСТовары.ИдентификаторУпаковки         КАК ИдентификаторУпаковки,
		|	ТТНИсходящаяЕГАИСТовары.Количество                    КАК Количество,
		|	ТТНИсходящаяЕГАИСТовары.Сумма                         КАК Сумма,
		|	ТТНИсходящаяЕГАИСТовары.Цена                          КАК Цена,
		|	ТТНИсходящаяЕГАИСТовары.НомерПартии                   КАК НомерПартии,
		|	ТТНИсходящаяЕГАИСТовары.Справка2.РегистрационныйНомер КАК НомерСправки2Поставщика
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
		|ГДЕ
		|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка
		|";
#Вставка
		// очищаем серию в ТТН входящей, созданной из перемещения, т.к. для таких ТТН должны 
		// быть сгенерированы новые серии 
		Если ТипЗнч(ТТНВходящаяОбъект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, 
				"ТТНИсходящаяЕГАИСТовары.Серия", 
				"ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)");
		КонецЕсли;
#КонецВставки
		Запрос.УстановитьПараметр("Ссылка", ТТНИсходящая);
		Результат = Запрос.Выполнить();

		ТаблицаТТН = ТТНВходящаяОбъект.Товары.Выгрузить(, "НомерСправки2Поставщика,ИдентификаторСтроки,Справка2");

		ТТНВходящаяОбъект.Товары.Загрузить(Результат.Выгрузить());

		Для Каждого СтрокаТТН Из ТаблицаТТН Цикл
			СтруктураПоиска = Новый Структура("НомерСправки2Поставщика", СтрокаТТН.НомерСправки2Поставщика);
			СтрокиТовары = ТТНВходящаяОбъект.Товары.НайтиСтроки(СтруктураПоиска);

			Для Каждого СтрокаТовары Из СтрокиТовары Цикл
				СтрокаТовары.ИдентификаторСтроки = СтрокаТТН.ИдентификаторСтроки;
				СтрокаТовары.Справка2            = СтрокаТТН.Справка2;
			КонецЦикла;
		КонецЦикла;

		//пересчитываем количество и цену, если алкогольная продукция неупакованная
		Для каждого СтрокаТТНВходящая Из ТТНВходящаяОбъект.Товары Цикл
			Если СтрокаТТНВходящая.АлкогольнаяПродукция.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная Тогда
				Если СтрокаТТНВходящая.Номенклатура.ОбъемДАЛ <> 0 Тогда
					СтрокаТТНВходящая.Количество = СтрокаТТНВходящая.Количество * СтрокаТТНВходящая.Номенклатура.ОбъемДАЛ;
					СтрокаТТНВходящая.Цена       = СтрокаТТНВходящая.Цена / СтрокаТТНВходящая.Номенклатура.ОбъемДАЛ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

	Иначе // сгенерировать новые серии

		СобственныйТорговыйОбъектЗначениеПоУмолчанию = "";
		ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(Неопределено, СобственныйТорговыйОбъектЗначениеПоУмолчанию);

		КонтекстЗаполненияСерий = ИнтеграцияЕГАИС.КонтекстЗаполненияСерий();
		КонтекстЗаполненияСерий.Объект =                                       ТТНВходящаяОбъект;
		КонтекстЗаполненияСерий.Товары =                                       ТТНВходящаяОбъект.Товары;
		КонтекстЗаполненияСерий.ЗаполнятьБезЗапросаСправок =                   Истина;
		КонтекстЗаполненияСерий.СобственныйТорговыйОбъектЗначениеПоУмолчанию = СобственныйТорговыйОбъектЗначениеПоУмолчанию;
		КонтекстЗаполненияСерий.ПараметрыУказанияСерий =                       ПараметрыУказанияСерий;

		ЗаполнитьСгенерироватьСерии(КонтекстЗаполненияСерий, Новый Структура);

	КонецЕсли;

	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ТТНВходящаяОбъект, ПараметрыУказанияСерий);
	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры