#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Обход ситуации с реквизитом документа "Идентификатор" (особое свойство адаптера).
	СтрокиСРеквизитом = РеквизитыИСвойства.Реквизиты.НайтиСтроки(Новый Структура("ИмяСвойстваXDTO", "Идентификатор"));
	Для каждого СтрокаРеквизита Из СтрокиСРеквизитом Цикл
		СтрокаРеквизита.ИмяСвойстваXDTO = "";
	КонецЦикла;
	
	адаптер_НастройкиОбмена.УдалитьРеквизит(РеквизитыИСвойства, , "ДанныеПроверкиИПодбора");
	адаптер_НастройкиОбмена.УдалитьРеквизит(РеквизитыИСвойства, , "ДанныеПроверкиИПодбораАктРасхождений");
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
КонецПроцедуры	

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт

	// Реквизит Идентификатор заменить на бг_Идентификатор, т.к. предопределенное свойство адаптера.
	ТекстПоиска = "NULL КАК бг_Идентификатор,";
	ТекстЗамены = "ВыгружаемыйОбъект.Идентификатор КАК бг_Идентификатор,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	// Добавить условие на заполненность идентификатора ЕГАИС.
	ТекстПоиска = "&УсловиеЗапроса";
	
	ТекстЗамены = 
	"&УсловиеЗапроса
	| И ВыгружаемыйОбъект.ИдентификаторЕГАИС <> """"";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	// Упорядочим выгружаемые товары по номеру строки, т.к. на основе этого порядка выполняется связь с марками.
	ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ВыгружаемыйОбъект.Товары.НомерСтроки";
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(
		Объект,
		ДанныеСообщения);
	
	Если ДанныеОбъекта.Реквизиты.Количество() > 0 Тогда
		
		РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
		
		РеквизитыОбъекта.Вставить("бг_ЕстьДвиженияЕГАИС", бг_ТТНВходящаяЕГАИСИнтеграция.ЕстьДвиженияЕАГИС(Объект));
		РеквизитыОбъекта.Вставить("бг_ОтмененВЕГАИС", ТТНИсходящаяОтмененаВЕГАИС(Объект));
		РеквизитыОбъекта.Вставить("СтатусТТН", СтатусТТН(Объект));	
		
		Операции = Новый Массив;
		Операции.Добавить(Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН);	
		ДанныеЗапросаЕГАИС = бг_ТТНВходящаяЕГАИСИнтеграция.ДанныеЗапросаЕГАИС(Объект, Операции);
		
		ИдентификаторЗапросаАкта = "";
		ДатаЗапросаАкта = Дата(1, 1, 1);
		Если ДанныеЗапросаЕГАИС <> Неопределено Тогда
			ИдентификаторЗапросаАкта = ДанныеЗапросаЕГАИС.ИдентификаторЗапроса;
			ДатаЗапросаАкта = ДанныеЗапросаЕГАИС.ДатаСозданияЗапроса;
		КонецЕсли;
		РеквизитыОбъекта.Вставить("ИдентификаторЗапросаАкта", ИдентификаторЗапросаАкта);
		РеквизитыОбъекта.Вставить("ДатаЗапросаАкта", ДатаЗапросаАкта);
			
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ДокументОснование");
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			И ЗначениеЗаполнено(ДокументОснование) Тогда
			
			ДанныеМарокУпаковок = ДанныеМарокУпаковок(Объект, ДокументОснование);
			
			Если ДанныеМарокУпаковок <> Неопределено Тогда
				бг_МаркируемаяПродукция.ДобавитьДанныеОбАкцизныхМаркахВРеквизитыСообщения(
					РеквизитыОбъекта, Объект, ДанныеМарокУпаковок);
			КонецЕсли;
			
			ЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ЗаказКлиента");
			
			Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") 
				И ЗначениеЗаполнено(ЗаказКлиента) Тогда 
				
				ДатаОплаты = бг_ЗаказКлиентаИнтеграция.МаксимальнаяДатаОплатыПоЗаказуКлиента(ЗаказКлиента);
				
				Если ДатаОплаты <> Неопределено Тогда
					РеквизитыОбъекта.Вставить("ДатаОплаты", ДатаОплаты);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
		
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Результат = Истина;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "бг_ЗагруженИзУПП") Тогда
			ТекстОшибки = НСтр("ru = 'Документ загружен из УПП'"); 
			ДанныеСообщения.ТекстОшибки = ТекстОшибки;
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
#Область Шапка	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ИдентификаторЗапросаАкта",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"ДатаЗапросаАкта", 
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"бг_ЕстьДвиженияЕГАИС",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"бг_Идентификатор",
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"бг_ОтмененВЕГАИС",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		"ДокументОснование", // ИмяРеквизита
		,
		Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"бг_ВариантВыгрузкиМарокУпаковок",
		ОбщегоНазначения.ОписаниеТипаСтрока(25));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"бг_ИмяФайлаВыгрузкиМарокУпаковок",
		ОбщегоНазначения.ОписаниеТипаСтрока(0));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"СтатусТТН", 
		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС"));
		
#КонецОбласти // Конец Шапка

#Область АкцизныеМарки
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"АкцизныеМарки.КодАкцизнойМарки",
		Метаданные.РегистрыСведений.бг_ИдентификаторыМарок.Ресурсы.ИдентификаторМарки.Тип);
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"АкцизныеМарки.НомерКоробки",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"АкцизныеМарки.КлючСвязи",
		ОбщегоНазначения.ОписаниеТипаЧисло(5));
#КонецОбласти // Конец Марки

#Область Упаковки
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Упаковки.Упаковка",
		Метаданные.РегистрыСведений.бг_СоставУпаковок.Измерения.КодУпаковки.Тип);

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Упаковки.ИерархияУпаковки",
		Метаданные.РегистрыСведений.бг_СоставУпаковок.Ресурсы.КодВышестоящейУпаковки.Тип);
#КонецОбласти // Конец Упаковки

КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
			
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.РеализацияТоваровУслуг,
		"ЗаказКлиента",
		, // МетаданныеОбъекта
		Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ЗаказКлиента,
		"бг_ГУИДЗаказаСПортала",
		"бг_ГУИДЗаказаСПортала", // МетаданныеОбъекта
		ОбщегоНазначения.ОписаниеТипаСтрока(36));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ЗаказКлиента,
		,
		"ДатаОплаты", // МетаданныеОбъекта
		Новый ОписаниеТипов("Дата"));				
 		
КонецПроцедуры

Функция ДанныеМарокУпаковок(ТТНИсходящаяЕГАИС, РеализацияТоваровУслуг)

	ДанныеОтгружаемыхШтрихкодовТТН = Документы.ТТНИсходящаяЕГАИС.бг_ДанныеОтгружаемыхШтрихкодов(
		ТТНИсходящаяЕГАИС,
		РеализацияТоваровУслуг,
		Ложь);
		
	Если ДанныеОтгружаемыхШтрихкодовТТН = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	МаркиСоответствуютАлкогольнойПродукцииТТН = Документы.ТТНИсходящаяЕГАИС.бг_МаркиСоответствуютАлкогольнойПродукцииТТН(
		ДанныеОтгружаемыхШтрихкодовТТН.Марки,
		ТТНИсходящаяЕГАИС);
		
	// Если состав марок не соответствует алкогольной продукции ТТН, то такая ТТН некорректная,
	// выгружать ее без исправления ошибки не имеет смысла. Такая ситуация возможна, когда статус ЕГАИС
	// "Подтвержден" был установлен вручную.
	Если Не МаркиСоответствуютАлкогольнойПродукцииТТН Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	КлючевыеПоля = "АлкогольнаяПродукция, Справка2, Номенклатура, Серия";
	Товары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНИсходящаяЕГАИС, "Товары").Выгрузить();
	
	ДанныеМарокУпаковок = НовыйДанныеМарокУпаковок();
	
	// Заполнить АкцизныеМарки
	Для каждого СтрокаТовары Из Товары Цикл
	
		ПараметрыПоиска = Новый Структура(КлючевыеПоля);
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТовары);
		
		НайденныеДвиженияМарок = ДанныеОтгружаемыхШтрихкодовТТН.Марки.НайтиСтроки(ПараметрыПоиска);
		
		Для каждого ЗаписьМарки Из НайденныеДвиженияМарок Цикл
			НоваяСтрокаАкцизныеМарки = ДанныеМарокУпаковок.АкцизныеМарки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаАкцизныеМарки, ЗаписьМарки, "ИдентификаторМарки, КодУпаковки");
			НоваяСтрокаАкцизныеМарки.КлючСвязи = СтрокаТовары.НомерСтроки;		
		КонецЦикла;
	КонецЦикла;
	
	// Заполнить Упаковки
	КодыВышестоящихУпаковок = Новый Массив;
	
	Для каждого ЗаписьУпаковки Из ДанныеОтгружаемыхШтрихкодовТТН.Упаковки Цикл
		
		НоваяСтрокаУпаковки = ДанныеМарокУпаковок.Упаковки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковки, ЗаписьУпаковки);
		
		Если ЗначениеЗаполнено(ЗаписьУпаковки.КодВышестоящейУпаковки)
			И КодыВышестоящихУпаковок.Найти(ЗаписьУпаковки.КодВышестоящейУпаковки) = Неопределено Тогда
			
			КодыВышестоящихУпаковок.Добавить(ЗаписьУпаковки.КодВышестоящейУпаковки);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КодВышестоящейУпаковки Из КодыВышестоящихУпаковок Цикл
		НоваяСтрокаУпаковки = ДанныеМарокУпаковок.Упаковки.Добавить();
		НоваяСтрокаУпаковки.КодУпаковки = КодВышестоящейУпаковки;
	КонецЦикла;
	
	ДанныеМарокУпаковок.АкцизныеМарки.Сортировать("КлючСвязи, КодУпаковки");
	ДанныеМарокУпаковок.Упаковки.Сортировать("КодУпаковки, КодВышестоящейУпаковки");
	
	Колонка = ДанныеМарокУпаковок.АкцизныеМарки.Колонки.Найти("КодУпаковки");
	Колонка.Имя = "НомерКоробки";
	Колонка = ДанныеМарокУпаковок.АкцизныеМарки.Колонки.Найти("ИдентификаторМарки");
	Колонка.Имя = "КодАкцизнойМарки";
	Колонка = ДанныеМарокУпаковок.Упаковки.Колонки.Найти("КодУпаковки");
	Колонка.Имя = "Упаковка";
	Колонка = ДанныеМарокУпаковок.Упаковки.Колонки.Найти("КодВышестоящейУпаковки");
	Колонка.Имя = "ИерархияУпаковки";
	
	Возврат ДанныеМарокУпаковок;
	
КонецФункции

Функция НовыйДанныеМарокУпаковок()

	// АкцизныеМарки
	АкцизныеМарки = Новый ТаблицаЗначений;
	
	АкцизныеМарки.Колонки.Добавить(
		"ИдентификаторМарки",
		Метаданные.РегистрыСведений.бг_ИдентификаторыМарок.Ресурсы.ИдентификаторМарки.Тип);
		
	АкцизныеМарки.Колонки.Добавить(
		"КодУпаковки",
		Метаданные.РегистрыСведений.бг_ДвижениеМарок.Ресурсы.КодУпаковки.Тип);
		
	АкцизныеМарки.Колонки.Добавить(
		"КлючСвязи",
		Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
		
	// Упаковки
	Упаковки = Новый ТаблицаЗначений;
	
	Упаковки.Колонки.Добавить(
		"КодУпаковки",
		Метаданные.РегистрыСведений.бг_СоставУпаковок.Измерения.КодУпаковки.Тип);
		
	Упаковки.Колонки.Добавить(
		"КодВышестоящейУпаковки",
		Метаданные.РегистрыСведений.бг_СоставУпаковок.Ресурсы.КодВышестоящейУпаковки.Тип);

	ДанныеМарокУпаковок = Новый Структура;
	ДанныеМарокУпаковок.Вставить("АкцизныеМарки", АкцизныеМарки);
	ДанныеМарокУпаковок.Вставить("Упаковки", Упаковки);
	
	Возврат ДанныеМарокУпаковок;
		
КонецФункции

Функция ТТНИсходящаяОтмененаВЕГАИС(ТТНИсходящаяЕГАИС)
	
	СостояниеТТНИсходящаяЕГАИС = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ТТНИсходящаяЕГАИС);	
	СтатусыОтменыЕГАИС = Документы.ТТНИсходящаяЕГАИС.бг_СтатусыОтменыЕГАИС();
	
	ОтмененВЕГАИС = СтатусыОтменыЕГАИС.Найти(СостояниеТТНИсходящаяЕГАИС.Статус) <> Неопределено;
	
	Возврат ОтмененВЕГАИС;
	
КонецФункции

Функция СтатусТТН(Документ)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ДанныеСтатуса = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(Документ);	
	
	СтатусТТН = Новый Структура(
		"ЗначениеПеречисления",
		адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(ДанныеСтатуса.Статус));
	
	Возврат СтатусТТН;
	
КонецФункции

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
