
#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	КонтролироватьИзменения   = Ложь;
	КонтролироватьДатыЗапрета = Ложь;
	
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.бг_СуммовыеСкидкиЛокальные);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.бг_СуммовыеСкидки);
	КонецЕсли;
	Если КонтролироватьИзменения И Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.бг_СуммовыеСкидкиЛокальные);
		Если НЕ КонтролироватьДатыЗапрета Тогда
			Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.бг_СуммовыеСкидкиЛокальные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;
	
	ТекстыЗапросов = Новый Соответствие;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.бг_СуммовыеСкидкиЛокальные;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт
	
	СоответствиеТекстовЗапросов = Новый Соответствие;
	
	ИмяРегистра                 = Метаданные.РегистрыНакопления.бг_СуммовыеСкидкиЛокальные.Имя;
	ИмяТаблицыИзменений         = РегистрыНакопления.бг_СуммовыеСкидкиЛокальные.ИмяВременнойТаблицыИзменений();
	СтруктураТекстовЗапросов    = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(
		Запрос,
		ИмяРегистра,
		ИмяТаблицыИзменений,
		"Продажи"
	);
	
	СоответствиеТекстовЗапросов.Вставить(ИмяТаблицыИзменений, СтруктураТекстовЗапросов);
	
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам цен и скидок.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.бг_СуммовыеСкидкиЛокальные;
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, МетаданныеРегистра.Имя);

	МетаданныеРегистра = Метаданные.РегистрыСведений.бг_СуммовыеСкидки;
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, МетаданныеРегистра.Имя);
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	РегистрыНакопления.бг_СуммовыеСкидкиЛокальные.ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ);
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	РегистрыНакопления.бг_СуммовыеСкидкиЛокальные.СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ);
	
КонецПроцедуры

#КонецОбласти

// Выполняет проверку МРЦ алкогольной продукции и минимальных отпускных цен номенклатуры
//	в соответствии с данными регистров сведений
//		* бг_МинимальныеЦеныАлкогольнойПродукции
//		* ЦеныНоменклатуры25 (контролируется только для документов ЗаказКлиента и РеализацияТоваровУслуг)
//
//Параметры
// ДокументОбъект - ДокументОбъект.ЗаказКлиента, ДокументОбъект.РеализацияТоваровУслуг
//                  ДокументОбъект.ЗаказПоставщику, ДокументОбъект.ПриобретениеТоваровУслуг
// Отказ - Булево
//	
Процедура ПроверитьМинимальныеЦеныАлкогольнойПродукции(ДокументОбъект, Отказ) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТипДокумента = ТипЗнч(ДокументОбъект);
	Если ТипДокумента = Тип("ДокументОбъект.ПриобретениеТоваровУслуг")
		Или ТипДокумента = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		КонтролироватьМРЦ = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"КонтролироватьМинимальныеЦеныАлкогольнойПродукцииПриЗакупках", ДокументОбъект.Организация);
		Если КонтролироватьМРЦ <> Истина Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Организация, 
		"бг_ПродажаАлкогольнойПродукции") Тогда
		Возврат;
	КонецЕсли;
	
	Если бг_УчетАлкоголя.ЭтоЭкспортнаяПродажа(ДокументОбъект)
		Или Не бг_УчетАлкоголя.ПродажаАлкогольнойПродукции(ДокументОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЛицензии = ТипЛицензииДляМинимальныхЦен(ДокументОбъект);
	Если ТипЛицензии = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;

	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(ТекстЗапросаТоварыДокумента(ДокументОбъект));
	МассивТекстов.Добавить(ТекстЗапросаМинимальныхЦен("НомерСтроки"));
	МассивТекстов.Добавить(ТекстЗапросаПроверкиМРЦ());

	Запрос.Текст = СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос.УстановитьПараметр("Организация", Неопределено);
	Запрос.УстановитьПараметр("Партнер",     ДокументОбъект.Партнер);
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ДокументОбъект.Товары);
	Запрос.УстановитьПараметр("ДатаДокумента",   ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ДокументОбъект.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ТипЛицензии", ТипЛицензии);
	Запрос.УстановитьПараметр("Валюта", ДокументОбъект.Валюта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = "";
		
		Если Выборка.ЭтоАлкогольнаяПродукция
			И НЕ ЗначениеЗаполнено(Выборка.ВидАлкогольнойПродукции) Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В строке %1 для алкогольной продукции %2 крепостью %4º вида %3
					 |не удалось определить вид алкогольной продукции для проверки минимальных цен РАР.
					 |Возможно, не задано значение константы %5.'"),
				Выборка.НомерСтроки,
				Выборка.Номенклатура,
				Выборка.ВидАлкогольнойПродукцииНоменклатуры,
				Выборка.Крепость,
				Справочники.бг_ДополнительныеКонстанты
					.ОписаниеКонстанты("ВидАлкогольнойПродукцииДляКонтроляМРЦПрочихЛВИ")
					.Наименование
			);
			
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары",
				Выборка.НомерСтроки,
				"Номенклатура"
			);
			
		ИначеЕсли Выборка.ЭтоАлкогольнаяПродукция
			И Выборка.КонтролироватьУстановкуМРЦ
			И Выборка.МинимальнаяЦена = 0 Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В строке %1 для алкогольной продукции «%2» крепостью %4º вида %3 не задана минимальная %5 цена РАР.'"),
				Выборка.НомерСтроки,
				Выборка.Номенклатура,
				Выборка.ВидАлкогольнойПродукции,
				Выборка.Крепость,
				НРег(ТипЛицензии)
			);
			
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары",
				Выборка.НомерСтроки,
				"Цена"
			);
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ДокументОбъект.Ссылка,
				ПутьКТабЧасти,
				,
				Отказ
			);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Цена < Выборка.МинимальнаяЦена Тогда
			
			ТекстОшибки = НСтр("ru = 'В строке %1 для %2 «%3» установлена стоимость за единицу %4 с учётом НДС ниже цены «%5» %6'");
			ТекстОшибки = СтрШаблон(
				ТекстОшибки,
				Выборка.НомерСтроки,
				НСтр(?(Выборка.ЭтоАлкогольнаяПродукция, "ru = 'алкогольной продукции'", "ru = 'товара'")),
				Выборка.Номенклатура,
				ФормированиеПечатныхФорм.ФорматСумм(Выборка.Цена, "руб"),
				?(Выборка.ВидЦены = Неопределено, СтрШаблон(НСтр("ru = 'Минимальная %1 цена РАР'"), НРег(ТипЛицензии)), Строка(Выборка.ВидЦены)),
				ФормированиеПечатныхФорм.ФорматСумм(Выборка.МинимальнаяЦена, "руб")
			);
			
			Если Выборка.ЭтоАлкогольнаяПродукция И Выборка.ВидЦены = Неопределено Тогда
				ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.Таб + СтрШаблон(
					НСтр("ru = '(%1, крепость свыше %3° до %4° включительно, объём %5 л, минимальная %2 цена РАР за %6 л %7)'"),
					Выборка.ВидАлкогольнойПродукцииНоменклатуры,
					НРег(ТипЛицензии),
					Выборка.Крепость,
					Выборка.Крепость + 1,
					Выборка.Объем,
					Выборка.ЕмкостьТары,
					ФормированиеПечатныхФорм.ФорматСумм(Выборка.ЦенаРегулирования, "руб")
				);
			КонецЕсли;
			
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Товары", 
				Выборка.НомерСтроки, 
				"Цена");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки, 
				ДокументОбъект.Ссылка, 
				ПутьКТабЧасти,
				, 
				Отказ);
				
		КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет данные по скидкам в ТЧ товары после выполнения корректировки
// Обновляются реквизиты:
//	бг_ПроцентПримененнойСкидки
//	бг_СуммаПримененнойСкидки
//	бг_ЦенаСоСкидкой
//
//Параметры
//	ДокументОбъект    - ДокументОбъект, ДанныеФормыСтруктура - контейнер табличной части
//	ИмяТабличнойЧасти - Строка - имя обновляемой табличной части; по умолчанию "Товары"
//
Процедура ЗаполнитьИнформационныеПоляСкидок(ДокументОбъект, ИмяТабличнойЧасти = "Товары") Экспорт
	
	Товары = ДокументОбъект[ИмяТабличнойЧасти];
	
	Если НЕ Товары.Количество() Тогда
		Возврат;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товары[0], "бг_ЦенаСоСкидкой") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРазницуСЦенойEDI = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Товары[0], "бг_РазницаСEDI");
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок = 0 Тогда
			СтрокаТовары.бг_ПроцентПримененнойСкидки = 0;
			СтрокаТовары.бг_СуммаПримененнойСкидки   = 0;
			СтрокаТовары.бг_ЦенаСоСкидкой = 0;
			Если ЗаполнитьРазницуСЦенойEDI Тогда
				СтрокаТовары.бг_РазницаСEDI = СтрокаТовары.бг_ЦенаEDI;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если ДокументОбъект.ЦенаВключаетНДС Тогда
			СтрокаТовары.бг_ЦенаСоСкидкой            = СтрокаТовары.СуммаСНДС / СтрокаТовары.КоличествоУпаковок;
			СтрокаТовары.бг_СуммаПримененнойСкидки   = СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок - СтрокаТовары.СуммаСНДС;
			СтрокаТовары.бг_ПроцентПримененнойСкидки = 100 * (1 - СтрокаТовары.СуммаСНДС / (СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок));
		Иначе
			СтрокаТовары.бг_ЦенаСоСкидкой            = СтрокаТовары.Сумма / СтрокаТовары.КоличествоУпаковок;
			СтрокаТовары.бг_СуммаПримененнойСкидки   = СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок - СтрокаТовары.Сумма;
			СтрокаТовары.бг_ПроцентПримененнойСкидки = 100 * (1 - СтрокаТовары.Сумма / (СтрокаТовары.Цена * СтрокаТовары.КоличествоУпаковок));
		КонецЕсли;
		
		Если ЗаполнитьРазницуСЦенойEDI Тогда
			СтрокаТовары.бг_РазницаСEDI = СтрокаТовары.бг_ЦенаСоСкидкой - СтрокаТовары.бг_ЦенаEDI;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет скидки (наценки)
// Вызывается из обработки расчёта скидок
//
// Параметры:
//	ВариантСкидкиНаценки - Строка - имя варианта расчёта скидки (наценки)
//	СкидкаНаценка - Строка дерева скидок (наценок). Включает результаты проверки условий, способы совместного применения
//	Настройки - Структура - Настройки, заданные пользователем в форме настроек внешней обработки
//	Товары - Коллекция товаров, для которых требуется применить скидку (наценку)
//	ПараметрыРасчета - Структура - Параметры расчета скидок (наценок)
//
// Возвращаемое значение:
//	РезультатРасчета - ТаблицаЗначений - результат расчета
//
Функция Рассчитать(ВариантСкидкиНаценки, СкидкаНаценка, Настройки, Товары, ПараметрыРасчета) Экспорт
	РезультатРасчета = СкидкиНаценкиСервер.ПустаяТаблицаСкидокСРасшифровкой();
	бг_ИсточникЗаказа = Неопределено;
	ПараметрыРасчета.Свойство("бг_ИсточникЗаказа", бг_ИсточникЗаказа);
	
	Если ВариантСкидкиНаценки = "бг_СкидкаНаценкаФиксированнаяЦенаАкция" Тогда
		РассчитатьСкидкуНаценкуФиксированнаяЦенаАкция(РезультатРасчета, СкидкаНаценка, Товары, ПараметрыРасчета);
	ИначеЕсли ВариантСкидкиНаценки = "бг_СкидкаНаценкаФиксированнаяЦена"
		И Настройки <> Неопределено Тогда
		РассчитатьСкидкуНаценкуОбеспечениеЦены(РезультатРасчета, СкидкаНаценка, Настройки, Товары, ПараметрыРасчета);
	ИначеЕсли ВариантСкидкиНаценки = "бг_СкидкаНаценкаEDI" 
		И бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI Тогда
		РассчитатьСкидкуНаценкуКонечнаяЦена(РезультатРасчета, СкидкаНаценка, Товары, ПараметрыРасчета);
	ИначеЕсли ВариантСкидкиНаценки = "бг_СкидкаНаценкаКонечнаяЦена"
		И бг_ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI Тогда
		РассчитатьСкидкуНаценкуКонечнаяЦена(РезультатРасчета, СкидкаНаценка, Товары, ПараметрыРасчета);
	ИначеЕсли ВариантСкидкиНаценки = "бг_ОкруглениеДоЦенEDI" Тогда
		РассчитатьСкидкуДляОкругленияДоЦеныEDI(РезультатРасчета, СкидкаНаценка, Товары, ПараметрыРасчета);
	КонецЕсли;
	
	Возврат РезультатРасчета;
КонецФункции

#Область ДоработкаЗапросовРасчетаСкидокНаценок

// Дополняет параметры расчёта скидок
// Вызывается из процедур расчёта скидок по видам документов ОбщийМодуль.СкидкиНаценкиСервер
Процедура ДополнитьПараметрыРасчетаСкидокНаценок(ПараметрыРасчета) Экспорт
	
	ИерархияСкладов = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		ЗапросСкладов = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Т.Ссылка.Родитель КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Т
		|ГДЕ
		|	Т.Ссылка В (&Склад)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ
		|");
		ЗапросСкладов.УстановитьПараметр("Склад", ПараметрыРасчета.Склад);
		ИерархияСкладов = ЗапросСкладов.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		ИерархияСкладов.Добавить(ПараметрыРасчета.Склад);
	КонецЕсли;
	ИерархияСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	
	ПараметрыРасчета.Вставить("бг_Склады",            ИерархияСкладов);
	ПараметрыРасчета.Вставить("бг_ТекущаяГраница",    Новый Граница(ПараметрыРасчета.ТекущаяДата, ВидГраницы.Исключая));
	ПараметрыРасчета.Вставить("бг_СуммоваяСкидка",    бг_КонстантыПовтИсп.ЗначениеКонстанты("СуммоваяСкидкаCRM"));
	
КонецПроцедуры

// Выполняет доработку переданного текста запроса данных для расчёта скидок (наценок)
// Вызывается из процедур расчёта скидок по видам документов ОбщийМодуль.СкидкиНаценкиСервер
//  * бг_РассчитатьПоЗаказуКлиента
//  * бг_РассчитатьПоРеализацииТоваровУслуг
Процедура ПодставитьОграниченияЦенСкидокНаценок(ТекстЗапроса) Экспорт
	
	ТекстыЗапросовОграничений = Новый Массив;
	ТекстыЗапросовОграничений.Добавить(ТекстЗапросаМинимальныхЦен("КлючСвязи"));
	ТекстыЗапросовОграничений.Добавить(ТекстЗапросаМаксимальныхСкидок("КлючСвязи"));
	ТекстыЗапросовОграничений.Добавить(""); // для финального разделителя запросов в пакете
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"//ТекстЗапросаВременныхТаблицОграничений////////////////////////////////////////",
		СтрСоединить(ТекстыЗапросовОграничений, ОбщегоНазначенияУТ.РазделительЗапросовВПакете())
	);
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ПоляТаблицы",
		"&ПоляТаблицы,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА &ЦенаВключаетНДС = ЛОЖЬ
		|			И ЕСТЬNULL(Ц.МинимальнаяЦена, 0) * Таблица.Количество * 100 / (100 + ЕСТЬNULL(Таблица.СтавкаНДС.Ставка, 0)) > 
		|			Таблица.Сумма * (100 - ЕСТЬNULL(С.ПроцентСкидкиНаценки, 100)) / 100 ТОГДА
		|			ЕСТЬNULL(Ц.МинимальнаяЦена, 0) * Таблица.Количество * 100 / (100 + ЕСТЬNULL(Таблица.СтавкаНДС.Ставка, 0))
		|		КОГДА &ЦенаВключаетНДС = ЛОЖЬ ТОГДА
		|			Таблица.Сумма * (100 - ЕСТЬNULL(С.ПроцентСкидкиНаценки, 100)) / 100
		|		КОГДА ЕСТЬNULL(Ц.МинимальнаяЦена, 0) * Таблица.Количество > Таблица.Сумма * (100 - ЕСТЬNULL(С.ПроцентСкидкиНаценки, 100)) / 100 ТОГДА
		|			ЕСТЬNULL(Ц.МинимальнаяЦена, 0) * Таблица.Количество
		|		ИНАЧЕ 
		|			Таблица.Сумма * (100 - ЕСТЬNULL(С.ПроцентСкидкиНаценки, 100)) / 100
		|	КОНЕЦ КАК ЧИСЛО(15,2)) бг_ПредельнаяСумма,
		|	ЕСТЬNULL(Ц.МинимальнаяЦена, 0) бг_МинимальнаяЦена,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(Ц.МинимальнаяЦена, 0) * Таблица.Количество *
		|	ВЫБОР
		|		КОГДА &ЦенаВключаетНДС = ЛОЖЬ ТОГДА
		|			100 / (100 + ЕСТЬNULL(Таблица.СтавкаНДС.Ставка, 0))
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15,2)) КАК бг_МинимальнаяСумма"
	);
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		",&Соединение",
		"ЛЕВОЕ СОЕДИНЕНИЕ втТоварыМинимальныеЦены Ц
		|		ПО Таблица.КлючСвязи = Ц.КлючСвязи
		|		ЛЕВОЕ СОЕДИНЕНИЕ втМаксимальныеСкидки С
		|		ПО Таблица.КлючСвязи = С.КлючСвязи
		|	,&Соединение"
	);
	
	НастройкиПолейЦеновойГруппы = Перечисления.бг_ИсточникиЦеновойГруппы.НастройкиПолейЗапроса();
	ПоляЦеновойГруппы           = Новый Массив;
	
	Для каждого НастройкаПоля из НастройкиПолейЦеновойГруппы Цикл
		// поле "Номенклатура" в тексте запроса уже есть
		Если НастройкаПоля.Ключ <> "Номенклатура" Тогда
			ПоляЦеновойГруппы.Добавить(СтрШаблон("СправочникНоменклатура.%1 КАК %2", НастройкаПоля.Значение.Путь, НастройкаПоля.Значение.Имя));
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа",
		СтрСоединить(ПоляЦеновойГруппы, ",
		|	")
	);
	
КонецПроцедуры

// Выполняет доработку переданного запроса получения дерева скидок (наценок)
// Вызывается из функции, формирующей запрос дерева СкидкиНаценкиСервер.бг_ЗапросСкидкиНаценки
Процедура ПодставитьОстаткиНакопительныхСкидок(Запрос, ПараметрыРасчета) Экспорт
	
	// фрагмент основного запроса выборки дорабатывается для объединения и объединяется с основным запросом
	НачалоФрагмента    = СтрНайти(Запрос.Текст, "ВЫБРАТЬ", НаправлениеПоиска.СНачала, 1, 1);
	ОкончаниеФрагмента = СтрНайти(Запрос.Текст, "//бг_РасширенныйВариант4", НаправлениеПоиска.СКонца, , 1);
	ТекстЗапроса       = Сред(Запрос.Текст, НачалоФрагмента, ОкончаниеФрагмента - НачалоФрагмента);
	ТекстЗапроса       = СтрЗаменить(
		ТекстЗапроса,
		"СкидкиНаценки.Ссылка В(&СкидкиНаценки)",
		"НЕ СкидкиНаценки.Ссылка В (&СкидкиНаценки) И бг_ОстаткиСкидок.СкидкаНаценка ЕСТЬ НЕ NULL"
	);
	ТекстЗапроса       = ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() + ТекстЗапроса;
	Запрос.Текст       = СтрЗаменить(Запрос.Текст, "//бг_РасширенныйВариант4", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК СкидкаНаценка
	|ПОМЕСТИТЬ бг_НакопительныеСкидки
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.бг_Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (НЕ СкидкиНаценки.Управляемая
	|		ИЛИ СкидкиНаценки.Ссылка В(&УправляемыеСкидки))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкаНаценка,
	|	НачисленоОстаток КАК Остаток
	|ПОМЕСТИТЬ бг_ОстаткиНакопительныхСкидокПредварителльно
	|ИЗ
	|	РегистрНакопления.бг_СуммовыеСкидкиЛокальные.Остатки(
	|		 ,
	|		&Организация = Организация
	|		И &Контрагент = Контрагент
	|		И &бг_ПунктНазначения = ПунктНазначения
	|		И СкидкаНаценка В (ВЫБРАТЬ СкидкаНаценка ИЗ бг_НакопительныеСкидки)
	|	) КАК бг_СуммовыеСкидки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Начислено
	|		ИНАЧЕ -Начислено
	|	КОНЕЦ
	|	
	|ИЗ
	|	РегистрНакопления.бг_СуммовыеСкидкиЛокальные КАК бг_СуммовыеСкидки
	|ГДЕ
	|	&Организация = Организация
	|	И &Контрагент = Контрагент
	|	И &бг_ПунктНазначения = ПунктНазначения
	|	И СкидкаНаценка В (ВЫБРАТЬ СкидкаНаценка ИЗ бг_НакопительныеСкидки)
	|	И Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&бг_СуммоваяСкидка,
	|	ВЫБОР 
	|		КОГДА &бг_ДоступнаяСуммоваяСкидка <> 0 И &бг_ДоступнаяСуммоваяСкидка <= МАКСИМУМ(СуммовыеСкидки.СуммаСкидки) - СУММА(СуммовыеСкидки.СуммаРезерва) ТОГДА
	|			&бг_ДоступнаяСуммоваяСкидка
	|		ИНАЧЕ
	|			МАКСИМУМ(СуммовыеСкидки.СуммаСкидки) - СУММА(СуммовыеСкидки.СуммаРезерва)
	|		КОНЕЦ
	|ИЗ
	|	РегистрСведений.бг_СуммовыеСкидки.СрезПоследних(, Контрагент = &Контрагент) КАК СуммовыеСкидки
	|ГДЕ 
	|	&бг_СуммоваяСкидка В (ВЫБРАТЬ СкидкаНаценка ИЗ бг_НакопительныеСкидки)
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(СуммовыеСкидки.СуммаСкидки) - СУММА(СуммовыеСкидки.СуммаРезерва) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&бг_СуммоваяСкидка,
	|	СуммовыеСкидки.СуммаРезерва
	|ИЗ
	|	РегистрСведений.бг_СуммовыеСкидки КАК СуммовыеСкидки
	|ГДЕ 
	|	&бг_СуммоваяСкидка В (ВЫБРАТЬ СкидкаНаценка ИЗ бг_НакопительныеСкидки)
	|	И Контрагент = &Контрагент
	|	И Регистратор = &Регистратор
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкаНаценка,
	|	СУММА(Остаток) КАК Остаток
	|ПОМЕСТИТЬ бг_ОстаткиНакопительныхСкидок
	|ИЗ
	|	бг_ОстаткиНакопительныхСкидокПредварителльно
	|СГРУППИРОВАТЬ ПО
	|	СкидкаНаценка
	|ИМЕЮЩИЕ
	|	СУММА(Остаток) > 0
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ бг_НакопительныеСкидки
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ бг_ОстаткиНакопительныхСкидокПредварителльно";
	
	Запрос.Текст = ТекстЗапроса
		+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете()
		+ Запрос.Текст;
	
	// дополнительные поля выборки
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РасширенныйВариант2,", 
		"ВЫБОР СкидкиНаценки.СпособПримененияСкидки
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок) ТОГДА
		|			ЕСТЬNULL(бг_ОстаткиСкидок.Остаток, 0)
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК бг_ОстатокСкидкиНаценки,
		|	СкидкиНаценки.Ссылка В (&СкидкиНаценки) бг_Действующая,
		|	СкидкиНаценки.бг_ИсточникЦеновойГруппы,
		|	СкидкиНаценки.бг_Накопительная = ИСТИНА ИЛИ СкидкиНаценки.Ссылка = &бг_СуммоваяСкидка КАК бг_Накопительная,
		|	СкидкиНаценки.бг_БлокируетСуммовыеСкидки КАК бг_БлокируетСуммовыеСкидки,
		|	СкидкиНаценки.бг_БезусловноеПрименениеПослеПервогоСрабатывания КАК бг_БезусловноеПрименениеПослеПервогоСрабатывания,
		|	СкидкиНаценки.бг_НеУчитыватьПороги КАК бг_НеУчитыватьПороги,
		|	СкидкиНаценки.бг_ОграничениеСкидки,
		|	&РасширенныйВариант2,"
	);
	
	// соединение с временной таблицей остатков
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&РасширенныйВариант3", 
		"ЛЕВОЕ СОЕДИНЕНИЕ бг_ОстаткиНакопительныхСкидок бг_ОстаткиСкидок
		|		ПО СкидкиНаценки.Ссылка = бг_ОстаткиСкидок.СкидкаНаценка
		|		,&РасширенныйВариант3"
	);
	
КонецПроцедуры

// Выполняет доработку переданного запроса получения дерева скидок (наценок)
// Вызывается из функции, формирующей запрос дерева СкидкиНаценкиСервер.бг_ЗапросСкидкиНаценки
//
// Параметры:
//  Запрос           - Запрос, который требуется дополнить
//  ПараметрыРасчета - Структура парамтеров запроса
//
Процедура ДобавитьУсловияПоОграничениям(Запрос, ПараметрыРасчета) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СкидкиНаценкиОграничения.Ссылка КАК СкидкаНаценка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СкидкиНаценкиОграничения.Объект = Неопределено
	|				ТОГДА СкидкиНаценкиОграничения.ПоОбъему
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ПоОбъему,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СкидкиНаценкиОграничения.Объект = Неопределено
	|				ТОГДА СкидкиНаценкиОграничения.ПоСуммеСкидки
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ПоСуммеСкидки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СкидкиНаценкиОграничения.Объект = &Контрагент
	|				ТОГДА СкидкиНаценкиОграничения.ПоОбъему
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ПоОбъемуНаКонтрагента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СкидкиНаценкиОграничения.Объект = &Контрагент
	|				ТОГДА СкидкиНаценкиОграничения.ПоСуммеСкидки
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ПоСуммеСкидкиНаКонтрагента,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СкидкиНаценкиОграничения.Объект = &бг_ПунктНазначения
	|				ТОГДА СкидкиНаценкиОграничения.ПоОбъему
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ПоОбъемуНаПунктНазначения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СкидкиНаценкиОграничения.Объект = &бг_ПунктНазначения
	|				ТОГДА СкидкиНаценкиОграничения.ПоСуммеСкидки
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ПоСуммеСкидкиНаПунктНазначения
	|ПОМЕСТИТЬ бг_ВТ_СкидкиНаценкиОграничения
	|ИЗ
	|	Справочник.СкидкиНаценки.бг_Ограничения КАК СкидкиНаценкиОграничения
	|ГДЕ
	|	СкидкиНаценкиОграничения.Ссылка В(&СкидкиНаценки)
	|	И СкидкиНаценкиОграничения.Объект В (&Контрагент, &бг_ПунктНазначения, Неопределено)
	|
	|СГРУППИРОВАТЬ ПО
	|	СкидкиНаценкиОграничения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаСкидкиНаценки.СкидкаНаценка,
	|	СУММА(ЗаказКлиентаТовары.Номенклатура.ОбъемДАЛ * ЗаказКлиентаТовары.Количество) КАК Объем,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказКлиентаСкидкиНаценки.Сумма >= 0
	|				ТОГДА ЗаказКлиентаСкидкиНаценки.Сумма
	|			ИНАЧЕ -ЗаказКлиентаСкидкиНаценки.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказКлиентаСкидкиНаценки.Ссылка.бг_ПунктНазначения = &Контрагент
	|				ТОГДА ISNULL(ЗаказКлиентаТовары.Номенклатура.ОбъемДАЛ, 0) * ЗаказКлиентаТовары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемНаКонтрагента,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказКлиентаСкидкиНаценки.Ссылка.бг_ПунктНазначения <> &Контрагент
	|				ТОГДА 0
	|			КОГДА ЗаказКлиентаСкидкиНаценки.Сумма >= 0
	|				ТОГДА ЗаказКлиентаСкидкиНаценки.Сумма
	|			ИНАЧЕ -ЗаказКлиентаСкидкиНаценки.Сумма
	|		КОНЕЦ) КАК СуммаНаКонтрагента,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказКлиентаСкидкиНаценки.Ссылка.бг_ПунктНазначения = &бг_ПунктНазначения
	|				ТОГДА ISNULL(ЗаказКлиентаТовары.Номенклатура.ОбъемДАЛ, 0) * ЗаказКлиентаТовары.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемНаПунктРазгрузки,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказКлиентаСкидкиНаценки.Ссылка.бг_ПунктНазначения <> &бг_ПунктНазначения
	|				ТОГДА 0
	|			КОГДА ЗаказКлиентаСкидкиНаценки.Сумма >= 0
	|				ТОГДА ЗаказКлиентаСкидкиНаценки.Сумма
	|			ИНАЧЕ -ЗаказКлиентаСкидкиНаценки.Сумма
	|		КОНЕЦ) КАК СуммаНаПунктРазгрузки
	|ПОМЕСТИТЬ бг_ИспользованныеОбъемы
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК ЗаказКлиентаСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ЗаказКлиентаСкидкиНаценки.Ссылка = ЗаказКлиентаТовары.Ссылка
	|			И ЗаказКлиентаСкидкиНаценки.КлючСвязи = ЗаказКлиентаТовары.КлючСвязи
	|ГДЕ
	|	ЗаказКлиентаСкидкиНаценки.Ссылка.Проведен
	|	И ЗаказКлиентаСкидкиНаценки.Ссылка <> &Регистратор
	|	И ЗаказКлиентаСкидкиНаценки.Сумма <> 0
	|	И ЗаказКлиентаСкидкиНаценки.СкидкаНаценка В(&СкидкиНаценки)
	|	И ЗаказКлиентаСкидкиНаценки.СкидкаНаценка В(ВЫБРАТЬ СкидкаНаценка ИЗ бг_ВТ_СкидкиНаценкиОграничения)
	|
	|СГРУППИРОВАТЬ ПО ЗаказКлиентаСкидкиНаценки.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценкиОграничения.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА СкидкиНаценкиОграничения.ПоОбъему > 0
	|				И СкидкиНаценкиОграничения.ПоОбъему <= ЕСТЬNULL(ИспользованныеОбъемы.Объем, 0)
	|			ТОГДА 0
	|		КОГДА СкидкиНаценкиОграничения.ПоСуммеСкидки > 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидки <= ЕСТЬNULL(ИспользованныеОбъемы.Сумма, 0)
	|			ТОГДА 0

	|		КОГДА СкидкиНаценкиОграничения.ПоОбъемуНаКонтрагента > 0
	|				И СкидкиНаценкиОграничения.ПоОбъемуНаКонтрагента <= ЕСТЬNULL(ИспользованныеОбъемы.ОбъемНаКонтрагента, 0)
	|			ТОГДА 0
	|		КОГДА СкидкиНаценкиОграничения.ПоСуммеСкидкиНаКонтрагента > 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидкиНаКонтрагента <= ЕСТЬNULL(ИспользованныеОбъемы.СуммаНаКонтрагента, 0)
	|			ТОГДА 0

	|		КОГДА СкидкиНаценкиОграничения.ПоОбъемуНаПунктНазначения > 0
	|				И СкидкиНаценкиОграничения.ПоОбъемуНаПунктНазначения <= ЕСТЬNULL(ИспользованныеОбъемы.ОбъемНаПунктРазгрузки, 0)
	|			ТОГДА 0
	|		КОГДА СкидкиНаценкиОграничения.ПоСуммеСкидкиНаПунктНазначения > 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидкиНаПунктНазначения <= ЕСТЬNULL(ИспользованныеОбъемы.СуммаНаПунктРазгрузки, 0)
	|			ТОГДА 0

	|		КОГДА СкидкиНаценкиОграничения.ПоОбъемуНаКонтрагента = 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидкиНаКонтрагента = 0
	|				И СкидкиНаценкиОграничения.ПоОбъемуНаПунктНазначения = 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидкиНаПунктНазначения = 0
	|				И СкидкиНаценкиОграничения.ПоОбъему = 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидки = 0
	|			ТОГДА 0

	|		КОГДА СкидкиНаценкиОграничения.ПоСуммеСкидки > 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидки > ЕСТЬNULL(ИспользованныеОбъемы.Сумма, 0)
	|			ТОГДА СкидкиНаценкиОграничения.ПоСуммеСкидки - ЕСТЬNULL(ИспользованныеОбъемы.Сумма, 0)

	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ОграничениеСуммыСкидки
	|ПОМЕСТИТЬ бг_ОграниченияПредварительный
	|ИЗ
	|	бг_ВТ_СкидкиНаценкиОграничения КАК СкидкиНаценкиОграничения
	|		ЛЕВОЕ СОЕДИНЕНИЕ бг_ИспользованныеОбъемы КАК ИспользованныеОбъемы
	|		ПО СкидкиНаценкиОграничения.СкидкаНаценка = ИспользованныеОбъемы.СкидкаНаценка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценкиОграничения.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА СкидкиНаценкиОграничения.ПоСуммеСкидкиНаКонтрагента > 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидкиНаКонтрагента > ЕСТЬNULL(ИспользованныеОбъемы.СуммаНаКонтрагента, 0)
	|			ТОГДА СкидкиНаценкиОграничения.ПоСуммеСкидкиНаКонтрагента - ЕСТЬNULL(ИспользованныеОбъемы.СуммаНаКонтрагента, 0)
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ
	|	бг_ВТ_СкидкиНаценкиОграничения КАК СкидкиНаценкиОграничения
	|		ЛЕВОЕ СОЕДИНЕНИЕ бг_ИспользованныеОбъемы КАК ИспользованныеОбъемы
	|		ПО СкидкиНаценкиОграничения.СкидкаНаценка = ИспользованныеОбъемы.СкидкаНаценка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценкиОграничения.СкидкаНаценка КАК СкидкаНаценка,
	|	ВЫБОР
	|		КОГДА СкидкиНаценкиОграничения.ПоСуммеСкидкиНаПунктНазначения > 0
	|				И СкидкиНаценкиОграничения.ПоСуммеСкидкиНаПунктНазначения > ЕСТЬNULL(ИспользованныеОбъемы.СуммаНаПунктРазгрузки, 0)
	|			ТОГДА СкидкиНаценкиОграничения.ПоСуммеСкидкиНаПунктНазначения - ЕСТЬNULL(ИспользованныеОбъемы.СуммаНаПунктРазгрузки, 0)
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИЗ
	|	бг_ВТ_СкидкиНаценкиОграничения КАК СкидкиНаценкиОграничения
	|		ЛЕВОЕ СОЕДИНЕНИЕ бг_ИспользованныеОбъемы КАК ИспользованныеОбъемы
	|		ПО СкидкиНаценкиОграничения.СкидкаНаценка = ИспользованныеОбъемы.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияПредварительный.СкидкаНаценка КАК СкидкаНаценка,
	|	МИНИМУМ(ОграниченияПредварительный.ОграничениеСуммыСкидки) КАК ОграничениеСуммыСкидки
	|ПОМЕСТИТЬ бг_Ограничения
	|ИЗ
	|	бг_ОграниченияПредварительный КАК ОграниченияПредварительный
	|
	|СГРУППИРОВАТЬ ПО
	|	ОграниченияПредварительный.СкидкаНаценка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ бг_ВТ_СкидкиНаценкиОграничения";
	
	Запрос.Текст = ТекстЗапроса
	+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете()
	+ Запрос.Текст;
	
	// дополнительные поля выборки
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&РасширенныйВариант2,", 
		"	ISNULL(ОграничениеСуммыСкидки, -1) КАК бг_ОграничениеСуммыСкидки,
		|	ISNULL(ИспользованныеОбъемы.Сумма, 0) КАК бг_РанееИспользованнаяСумма,
		|	&РасширенныйВариант2,"
	);

	// соединение с временной таблицей ограничений
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&РасширенныйВариант3", 
		"ЛЕВОЕ СОЕДИНЕНИЕ бг_Ограничения КАК Ограничения
		|		ПО СкидкиНаценки.Ссылка = Ограничения.СкидкаНаценка
		|		ЛЕВОЕ СОЕДИНЕНИЕ бг_ИспользованныеОбъемы КАК ИспользованныеОбъемы
		|		ПО СкидкиНаценки.Ссылка = ИспользованныеОбъемы.СкидкаНаценка
		|		,&РасширенныйВариант3"
	);

КонецПроцедуры

#КонецОбласти

// Выполняет распределение накопленных остатков скидок с учётом ограничений после расчёта скидок
Процедура РаспределитьОстаткиНакопительныхСкидок(ДеревоСкидок, РассчитанныеСкидкиНаценки, ПараметрыРасчета) Экспорт
	
	ПараметрыРасчета.Вставить("РаспределениеНакопительнойСкидки", Истина);
	СуммоваяСкидкаCRM = бг_КонстантыПовтИсп.ЗначениеКонстанты("СуммоваяСкидкаCRM");
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	// Заполним таблицу остатков допустимых скидок исходя из порогов
	Товары  = ПараметрыРасчета.Товары;
	ОтборСтрокСкидок = Новый Структура(
		"СпособПримененияСкидки",
		Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок
	);
	ОстаткиДоступныхСкидок = РассчитанныеСкидкиНаценки.Скопировать(ОтборСтрокСкидок, "КлючСвязи, Сумма");
	ОстаткиДоступныхСкидок.Свернуть("КлючСвязи", "Сумма");
	ОстаткиДоступныхСкидок.Колонки.Добавить("Остаток", ОписаниеТипаЧисло);
	ОстаткиДоступныхСкидок.Колонки.Добавить("ОстатокБезУчетаПорогов", ОписаниеТипаЧисло);
	ОстаткиДоступныхСкидок.Колонки.Добавить("ОстатокДоТребуемойЦены", ОписаниеТипаЧисло);
	ОстаткиДоступныхСкидок.Колонки.Добавить("СтрокаТовара", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	
	Если Товары.Колонки.Найти("бг_РаспределятьСуммовуюСкидку") = Неопределено Тогда
		РаспределениеНаВыбранныеСтрокиТоваров = Ложь;
	Иначе
		РаспределениеНаВыбранныеСтрокиТоваров = Товары.Найти(Истина, "бг_РаспределятьСуммовуюСкидку") <> Неопределено;
	КонецЕсли;
	
	Для каждого Товар из Товары Цикл
		
		// остатки суммовых скидок всегда с НДС, а остатки порогов всегда без НДС
		КоэффициентНДС = 1;
		Если ПараметрыРасчета.ЦенаВключаетНДС = Ложь Тогда
			КратностьРубля = 100;
			   КоэффициентНДС = (КратностьРубля + Товар.СтавкаНДС) / КратностьРубля;
		КонецЕсли;
		
		ОстатокСуммыСкидки = Макс(Товар.Сумма - Товар.бг_ПредельнаяСумма, 0);
		ОстатокСуммыСкидкиБезУчетаПорогов = Макс(Товар.Сумма - Товар.бг_МинимальнаяСумма, 0);
		ОстатокСуммыСкидкиДоТребуемойЦены = Мин(ОстатокСуммыСкидки, Товар.Сумма - Товар.бг_ТребуемаяЦена * Товар.Количество);
		Если ОстатокСуммыСкидки > 0 
			Или ОстатокСуммыСкидкиБезУчетаПорогов > 0 Тогда
			СтрокаОстатка = ОстаткиДоступныхСкидок.Найти(Товар.КлючСвязи, "КлючСвязи");
			Если СтрокаОстатка = Неопределено Тогда
				СтрокаОстатка = ОстаткиДоступныхСкидок.Добавить();
				СтрокаОстатка.КлючСвязи = Товар.КлючСвязи;
			КонецЕсли;
			СтрокаОстатка.Остаток = 
				ДоступныйОстатокСкидки(ОстатокСуммыСкидки * КоэффициентНДС, СтрокаОстатка.Сумма, Товар.Количество);
			СтрокаОстатка.ОстатокБезУчетаПорогов = 
				ДоступныйОстатокСкидки(ОстатокСуммыСкидкиБезУчетаПорогов * КоэффициентНДС, 
				СтрокаОстатка.Сумма, Товар.Количество);
			Если Товар.бг_ТребуемаяЦена <> 0 Тогда
				СтрокаОстатка.ОстатокДоТребуемойЦены = 
					ДоступныйОстатокСкидки(ОстатокСуммыСкидкиДоТребуемойЦены * КоэффициентНДС, 
					СтрокаОстатка.Сумма, Товар.Количество);
			КонецЕсли;
			СтрокаОстатка.СтрокаТовара = Товар;
		КонецЕсли;
	КонецЦикла;
	
	ОстаткиДоступныхСкидок.Колонки.Удалить("Сумма");
	
	ОбновляемыеГруппы = Новый ТаблицаЗначений;
	ОбновляемыеГруппы.Колонки.Добавить("Группа",  Новый ОписаниеТипов("СтрокаДереваЗначений"));
	ОбновляемыеГруппы.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	
	ОтборСтрокДерева = Новый Структура(
		"СпособПримененияСкидки, ЭтоГруппа",
		Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок,
		Ложь);
	РаспределяемыеСкидки  = ДеревоСкидок.Строки.НайтиСтроки(ОтборСтрокДерева, Истина);
	Для каждого СтрокаДерева из РаспределяемыеСкидки Цикл
		
		Если НЕ СтрокаДерева.бг_ОстатокСкидкиНаценки Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Ссылка = СуммоваяСкидкаCRM Тогда
			
			// Если доступная скидка равна 0 и установлено распредялять на все, то это означает не распределять нечего
			Если ПараметрыРасчета.Свойство("бг_ДоступнаяСуммоваяСкидка")
				И ПараметрыРасчета.бг_ДоступнаяСуммоваяСкидка = 0
				И Товары.Колонки.Найти("бг_РаспределятьСуммовуюСкидку") <> Неопределено
				И Товары.Найти(Ложь, "бг_РаспределятьСуммовуюСкидку") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ПолеОстатка = ?(СтрокаДерева.бг_НеУчитыватьПороги, "ОстатокБезУчетаПорогов", "Остаток");
		Если ОстаткиДоступныхСкидок.Итог(ПолеОстатка) <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаДерева.Ссылка = СуммоваяСкидкаCRM Тогда
			РаспределитьОстатокНакопительнойСкидки(СтрокаДерева, РассчитанныеСкидкиНаценки, ПараметрыРасчета, 
				ОстаткиДоступныхСкидок, РаспределениеНаВыбранныеСтрокиТоваров, Истина);
		КонецЕсли;
		РаспределитьОстатокНакопительнойСкидки(СтрокаДерева, РассчитанныеСкидкиНаценки, ПараметрыРасчета, 
			ОстаткиДоступныхСкидок, РаспределениеНаВыбранныеСтрокиТоваров);

	КонецЦикла;
	ПараметрыРасчета.Удалить("РаспределениеНакопительнойСкидки");
	
КонецПроцедуры

Процедура РаспределитьОстатокНакопительнойСкидки(СтрокаДерева, РассчитанныеСкидкиНаценки, ПараметрыРасчета, 
	ОстаткиДоступныхСкидок, РаспределениеНаВыбранныеСтрокиТоваров, ДоФиксированнойЦены = Ложь)

	Товары  = ПараметрыРасчета.Товары;
	Если ДоФиксированнойЦены = Истина Тогда
		ПолеОстатка = "ОстатокДоТребуемойЦены";
	ИначеЕсли СтрокаДерева.бг_НеУчитыватьПороги Тогда
		ПолеОстатка = "ОстатокБезУчетаПорогов";
	Иначе
		ПолеОстатка = "Остаток";
	КонецЕсли;

	СуммаКРаспределению = Мин(СтрокаДерева.бг_ОстатокСкидкиНаценки, ОстаткиДоступныхСкидок.Итог(ПолеОстатка));
	
	Если СтрокаДерева.ПараметрыУсловий.ЕстьУсловияПоСтроке Тогда
		ИсточникКлючейСвязи = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий;
	Иначе
		ИсточникКлючейСвязи = Товары;
	КонецЕсли;

	ТаблицаРаспределения = ЗаполнитьТаблицуРаспределенияОстатковНакопительнойСкидки(СтрокаДерева, 
		РассчитанныеСкидкиНаценки, ОстаткиДоступныхСкидок, ПолеОстатка, 
	 	ИсточникКлючейСвязи, РаспределениеНаВыбранныеСтрокиТоваров);
	
	РаспределениеНакопительнойСкидки(СтрокаДерева, СуммаКРаспределению, ТаблицаРаспределения, 
		РассчитанныеСкидкиНаценки, ПолеОстатка, ПараметрыРасчета);
КонецПроцедуры

Процедура РаспределениеНакопительнойСкидки(СтрокаДерева, СуммаКРаспределению, ТаблицаРаспределения, 
	РассчитанныеСкидкиНаценки, ПолеОстатка, ПараметрыРасчета)

	Разрядность = 2;

	ОтборРассчитанныхСкидок = Новый Структура("СкидкаНаценка, СпособПримененияСкидки, КлючСвязи",
		СтрокаДерева.Ссылка,
		Перечисления.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок);
		
	БазаРаспределения = ТаблицаРаспределения.Итог(ПолеОстатка);
	Для каждого СтрокаРаспределения Из ТаблицаРаспределения Цикл
		Если БазаРаспределения = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСкидки = Окр(СуммаКРаспределению * СтрокаРаспределения[ПолеОстатка] / БазаРаспределения, Разрядность);
		// Сумма скидки д.б. кратна количеству
		Количество = СтрокаРаспределения.СтрокаТовара.Количество;
		КратностьРубля = 100;
		Если Количество <> 0 Тогда
			СуммаСкидки = Количество * Цел(СуммаСкидки / Количество * КратностьРубля) / КратностьРубля;
		КонецЕсли;
		СуммаКРаспределению = СуммаКРаспределению - СуммаСкидки;
		БазаРаспределения = БазаРаспределения - СтрокаРаспределения[ПолеОстатка];
	
		Если ПараметрыРасчета.ЦенаВключаетНДС = Ложь Тогда
			   СуммаСкидки = Окр(СуммаСкидки * КратностьРубля
			   	/ (КратностьРубля + СтрокаРаспределения.СтрокаТовара.СтавкаНДС), Разрядность);
		КонецЕсли;

		ОтборРассчитанныхСкидок.КлючСвязи = СтрокаРаспределения.КлючСвязи;

		СтрокаСкидки = СтрокаДерева.РезультатРасчета.Найти(СтрокаРаспределения.КлючСвязи, "КлючСвязи");
		Если СтрокаСкидки = Неопределено Тогда
			// добавить результат расчёта скидки
			СкидкиНаценкиСервер.бг_ПрименитьЗначениеСкидкиКТовару(
				СтрокаДерева,
				СуммаСкидки,
				0,
				СтрокаРаспределения.СтрокаТовара,
				СтрокаДерева.РезультатРасчета,
				ПараметрыРасчета
			);
		Иначе
			// скорректировать результат расчёта скидки
			СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаСкидки;
			СтрокаСкидки.бг_СуммаСписанияНакопительнойСкидки = 
				СтрокаСкидки.бг_СуммаСписанияНакопительнойСкидки + СуммаСкидки;

			СтрокаСкидки.Расшифровка[0].Сумма = СтрокаСкидки.Расшифровка[0].Сумма + СуммаСкидки;
			СтрокаСкидки.Расшифровка[0].бг_СуммаСписанияНакопительнойСкидки = 
				СтрокаСкидки.Расшифровка[0].бг_СуммаСписанияНакопительнойСкидки + СуммаСкидки;
		КонецЕсли;
		
		// протащим скидку по дереву рекурсивно
		ОтразитьСкидкуВДеревеРекурсивно(СтрокаДерева.Родитель, ПараметрыРасчета, СтрокаДерева.Ссылка, СуммаСкидки,
			СтрокаРаспределения.КлючСвязи);

		НайденныеСтроки = РассчитанныеСкидкиНаценки.НайтиСтроки(ОтборРассчитанныхСкидок);
		Если НайденныеСтроки.Количество() Тогда
			СтрокаСкидки = НайденныеСтроки[0];
		Иначе
			СтрокаСкидки = РассчитанныеСкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, ОтборРассчитанныхСкидок);
		КонецЕсли;

		СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаСкидки;
		СтрокаСкидки.бг_СуммаСписанияНакопительнойСкидки = 
			СтрокаСкидки.бг_СуммаСписанияНакопительнойСкидки + СуммаСкидки;
	КонецЦикла;

КонецПроцедуры

Процедура ОтразитьСкидкуВДеревеРекурсивно(СтрокаДерева, ПараметрыРасчета, СкидкаНаценка, СуммаСкидки, КлючСвязи)

	Если ЗначениеЗаполнено(СтрокаДерева) Тогда
		СтрокаРезультатРасчета = СтрокаДерева.РезультатРасчета.Найти(КлючСвязи, "КлючСвязи");
		Если СтрокаРезультатРасчета = Неопределено Тогда
			СтрокаРезультатРасчета = СтрокаДерева.РезультатРасчета.Добавить();
			СтрокаРезультатРасчета.Расшифровка = ПараметрыРасчета.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
		КонецЕсли;
		
		СтрокаРезультатРасчета.КлючСвязи = КлючСвязи;
		СтрокаРезультатРасчета.Сумма = СтрокаРезультатРасчета.Сумма + СуммаСкидки;
		СтрокаРезультатРасчета.бг_СуммаСписанияНакопительнойСкидки = 
		СтрокаРезультатРасчета.бг_СуммаСписанияНакопительнойСкидки + СуммаСкидки;
		СтрокаРезультатРасчета.Действует = Истина;
		
		// Расшифровка скидки.
		СтрокаРасшифровки = СтрокаРезультатРасчета.Расшифровка.Найти(СкидкаНаценка, "СкидкаНаценка");
		Если СтрокаРасшифровки = Неопределено Тогда
			СтрокаРасшифровки = СтрокаРезультатРасчета.Расшифровка.Добавить();
			СтрокаРасшифровки.СкидкаНаценка = СкидкаНаценка;
		КонецЕсли;
		
		СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма + СуммаСкидки;
		СтрокаРасшифровки.бг_СуммаСписанияНакопительнойСкидки = 
			СтрокаРасшифровки.бг_СуммаСписанияНакопительнойСкидки + СуммаСкидки;
		
		ОтразитьСкидкуВДеревеРекурсивно(СтрокаДерева.Родитель, ПараметрыРасчета, СкидкаНаценка, СуммаСкидки, КлючСвязи);
	КонецЕсли;

КонецПроцедуры

Функция ЗаполнитьТаблицуРаспределенияОстатковНакопительнойСкидки(СтрокаДерева, РассчитанныеСкидкиНаценки, 
	ОстаткиДоступныхСкидок, ПолеОстатка,
	ИсточникКлючейСвязи, РаспределениеНаВыбранныеСтрокиТоваров)

	ТаблицаРаспределения = ОстаткиДоступныхСкидок.СкопироватьКолонки();
	Для каждого КлючСвязи из ИсточникКлючейСвязи.ВыгрузитьКолонку("КлючСвязи") Цикл
		
		СтрокаОстатка = ОстаткиДоступныхСкидок.Найти(КлючСвязи, "КлючСвязи");
	
		Если СтрокаОстатка = Неопределено
			Или СтрокаОстатка[ПолеОстатка] <= 0 Тогда
			Продолжить;
		КонецЕсли;

		Если РаспределениеНаВыбранныеСтрокиТоваров = Истина
			И СтрокаОстатка.СтрокаТовара.бг_РаспределятьСуммовуюСкидку = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Ссылка = бг_КонстантыПовтИсп.ЗначениеКонстанты("СуммоваяСкидкаCRM") Тогда
			Если ПолеОстатка <> "ОстатокДоТребуемойЦены"
				И СтрокаОстатка.СтрокаТовара.бг_ТребуемаяЦена <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОтборБлокируетСуммовые = Новый Структура("КлючСвязи, бг_БлокируетСуммовыеСкидки", КлючСвязи, Истина);
			Если РассчитанныеСкидкиНаценки.НайтиСтроки(ОтборБлокируетСуммовые).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаРаспределения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОстатка);
	КонецЦикла;

	Возврат ТаблицаРаспределения;
КонецФункции

#Область ФормированиеТекстовЗапросов

Функция ТекстЗапросаИнтервалыДействияСкидкиНаценки(ИмяВременнойТаблицы = "", ИмяПараметра = "СкидкаНаценка") Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.Источник КАК Источник,
		|	МИНИМУМ(Т.ДатаНачала) КАК ДатаНачала,
		|	ДОБАВИТЬКДАТЕ(Т.ДатаОкончания, ДЕНЬ, -1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ПериодыДействияСкидкиНаценки
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т1.Источник КАК Источник,
		|		Т1.Период КАК ДатаНачала,
		|		МИНИМУМ(Т2.Период) КАК ДатаОкончания
		|	ИЗ
		|		РегистрСведений.ДействиеСкидокНаценок КАК Т1
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДействиеСкидокНаценок КАК Т2
		|			ПО Т1.Период < Т2.Период
		|				И Т2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
		|				И Т1.Источник = Т2.Источник
		|				И Т1.СкидкаНаценка = Т2.СкидкаНаценка
		|	ГДЕ
		|		Т1.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|		И Т1.СкидкаНаценка = &СкидкаНаценка
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Т1.Источник,
		|		Т1.Период) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Источник,
		|	Т.ДатаОкончания";
	
	Если ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_ПериодыДействияСкидкиНаценки", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_ПериодыДействияСкидкиНаценки", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СкидкаНаценка", "&" + ИмяПараметра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИнтервалыДействияСкидокНаценок(ИмяВременнойТаблицы, ИмяТаблицыИсходныхДанных, УсловиеОтбораСкидкиНаценки) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т.СкидкаНаценка КАК СкидкаНаценка,
		|	Т.Источник КАК Источник,
		|	МИНИМУМ(Т.ДатаНачала) КАК ДатаНачала,
		|	ДОБАВИТЬКДАТЕ(Т.ДатаОкончания, ДЕНЬ, -1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ПериодыДействияСкидокНаценок
		|ИЗ
		|	(ВЫБРАТЬ
		|		Т1.СкидкаНаценка КАК СкидкаНаценка,
		|		Т1.Источник КАК Источник,
		|		Т1.Период КАК ДатаНачала,
		|		МИНИМУМ(Т2.Период) КАК ДатаОкончания
		|	ИЗ
		|		ВТ_ДанныеРегистра КАК Т1
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК Т2
		|			ПО Т1.Период < Т2.Период
		|				И Т2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.НеДействует)
		|				И Т1.Источник = Т2.Источник
		|				И Т1.СкидкаНаценка = Т2.СкидкаНаценка
		|	ГДЕ
		|		Т1.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияСкидок.Действует)
		|		И &УсловиеОтбораСкидкиНаценки
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Т1.СкидкаНаценка,
		|		Т1.Источник,
		|		Т1.Период) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.СкидкаНаценка,
		|	Т.Источник,
		|	Т.ДатаОкончания
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.Источник,
		|	ДатаНачала";
	
	Если ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_ПериодыДействияСкидокНаценок", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_ПериодыДействияСкидокНаценок", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ДанныеРегистра",           ИмяТаблицыИсходныхДанных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораСкидкиНаценки", "Т1.СкидкаНаценка " + УсловиеОтбораСкидкиНаценки);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПересеченияИнтерваловДействия(ИмяВременнойТаблицы, ИмяПервойТаблицы, ИмяВторойТаблицы) Экспорт
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Т1.СкидкаНаценка КАК СкидкаНаценка1,
		|	Т1.Источник      КАК Источник1,
		|	Т1.ДатаНачала    КАК ДатаНачала1,
		|	Т1.ДатаОкончания КАК ДатаОкончания1,
		|
		|	Т2.СкидкаНаценка КАК СкидкаНаценка2,
		|	Т2.Источник      КАК Источник2,
		|	Т2.ДатаНачала    КАК ДатаНачала2,
		|	Т2.ДатаОкончания КАК ДатаОкончания2
		|
		|ПОМЕСТИТЬ ВТ_ПересеченияИнтервалов
		|ИЗ
		|	_ПерваяТаблица_ Т1
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ _ВтораяТаблица_ Т2
		|	ПО Т2.ДатаНачала <= ЕСТЬNULL(Т1.ДатаОкончания, Т2.ДатаНачала)
		|		И Т1.ДатаНачала <= ЕСТЬNULL(Т2.ДатаОкончания, Т1.ДатаНачала)
		|		И Т1.Источник = Т2.Источник
		|		И Т1.СкидкаНаценка <> Т2.СкидкаНаценка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ПерваяТаблица_", ИмяПервойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ВтораяТаблица_", ИмяВторойТаблицы);
	
	Если ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_ПересеченияИнтервалов", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВТ_ПересеченияИнтервалов", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

// Устанавливает параметры запроса из структуры. Параметры ищутся по именам
//
// Параметры:
//  Запрос		 - Запрос - запрос, которому нужно установить параметры из структуры
//  Параметры	 - Структура - структура
//
Процедура УстановитьПараметрыЗапроса(Запрос, Параметры) Экспорт
	НайденныеПараметры = Запрос.НайтиПараметры();
	Для каждого НайденныйПараметр из НайденныеПараметры Цикл
		ЗначениеПараметра = Неопределено;
		Если Параметры.Свойство(НайденныйПараметр.Имя, ЗначениеПараметра) Тогда
			Запрос.УстановитьПараметр(НайденныйПараметр.Имя, ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция УдалитьЛишниеДанныеВДеревеСкидок(СтрокиДеревоСкидок) Экспорт

	КоличествоЭлементов = СтрокиДеревоСкидок.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементов Цикл
		Строка = СтрокиДеревоСкидок[КоличествоЭлементов - ОбратныйИндекс];
		
		Если Строка.ЭтоГруппа Тогда
			УдалитьЛишниеДанныеВДеревеСкидок(Строка.Строки);
			Если Строка.Строки.Количество() = 0 Тогда
				СтрокиДеревоСкидок.Удалить(Строка);
			КонецЕсли;
		ИначеЕсли Не Строка.ЭтоГруппа
			И Строка.ПараметрыУсловий.ТаблицаУсловий.Количество() = 0 Тогда
			Если Не ЕстьРезультатРасчетаПоСтроке(Строка) Тогда
				СтрокиДеревоСкидок.Удалить(Строка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Ложь;

КонецФункции

Функция ЕстьРезультатРасчетаПоСтроке(Строка)

	Если Не ЗначениеЗаполнено(Строка.РезультатРасчета) Тогда
		Возврат Ложь;
	ИначеЕсли Строка.РезультатРасчета.НайтиСтроки(Новый Структура("Сумма", 0)).Количество() 
		<> Строка.РезультатРасчета.Количество() Тогда
		Возврат Истина;
	ИначеЕсли Строка.РезультатРасчета.НайтиСтроки(Новый Структура("бг_СуммаНачислено", 0)).Количество() 
		<> Строка.РезультатРасчета.Количество() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Функция ДоступныйОстатокСкидки(ОстатокСуммыСкидки, НакопленнаяСкидка, Количество)
	
	ДоступныйОстаток = Макс(ОстатокСуммыСкидки - НакопленнаяСкидка, 0);
	
	// Сумма скидки д.б. кратна количеству
	Если Количество <> 0 Тогда
		КратностьРубля = 100;
		ДоступныйОстаток = Количество * Цел(ДоступныйОстаток / Количество * КратностьРубля) / КратностьРубля;
	КонецЕсли;

	Возврат ДоступныйОстаток;
КонецФункции

// Производится запись данных в регистр сведений ДействиеСкидокНаценок
//
// Параметры:
//  СкидкаНаценка	            - Ссылка на Скинку/Наценку
//  ИсточникиДействияСкидок	    - Ссылка на источник Скинки/Наценки
//  ДатаНачалаДействияСхемы	    - дата начала действия
//  ДатаОкончанияДействияСхемы	- дата окончания действия
//
Процедура ЗаписатьДействиеСкидок(СкидкаНаценка, Знач ИсточникиДействияСкидок, 
	ДатаНачалаДействияСхемы = Неопределено, ДатаОкончанияДействияСхемы = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ИсточникиДействияСкидок) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ИсточникиДействияСкидок) <> Тип("Массив") Тогда
		ИсточникиДействияСкидокКопия = ИсточникиДействияСкидок;
		ИсточникиДействияСкидок = Новый Массив;
		ИсточникиДействияСкидок.Добавить(ИсточникиДействияСкидокКопия);
	КонецЕсли;
	
	Для Каждого Источник Из ИсточникиДействияСкидок Цикл
		Если Не ЗначениеЗаполнено(Источник) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
		
			Если ЗначениеЗаполнено(ДатаНачалаДействияСхемы) Тогда
				Запись = РегистрыСведений.ДействиеСкидокНаценок.СоздатьМенеджерЗаписи();
				
				Запись.Период = ДатаНачалаДействияСхемы;
				Запись.Источник = Источник;
				Запись.СкидкаНаценка = СкидкаНаценка;
				
				Запись.Статус = Перечисления.СтатусыДействияСкидок.Действует;
				Запись.Ответственный = Пользователи.ТекущийПользователь();
				
				Запись.Записать(Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаОкончанияДействияСхемы) Тогда
				Запись = РегистрыСведений.ДействиеСкидокНаценок.СоздатьМенеджерЗаписи();
				
				Запись.Период = ДатаОкончанияДействияСхемы;
				Запись.Источник = Источник;
				Запись.СкидкаНаценка = СкидкаНаценка;
				
				Запись.Статус = Перечисления.СтатусыДействияСкидок.НеДействует;
				Запись.Ответственный = Пользователи.ТекущийПользователь();
				
				Запись.Записать(Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		
		Исключение

			ОтменитьТранзакцию();
			
			ТекстОшибки = НСтр("ru='Не удалось установить действия скидок 
				|Источник: %1
				|Скидка: %2
				|%3'"); 
			ТекстОшибки = СтрШаблон(ТекстОшибки, Источник, СкидкаНаценка, ОписаниеОшибки());
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("бг_УстановкаДействияСкидок", 
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ТекстОшибки);
			
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

// Производится применение ранее начисленных скидок, зафиксированных в табличной части СкидкиНаценки
// к новым изменениям в Заказе клиента
// Например, при разбиении строк заказа по серим номенклатуры
//
// Параметры:
//  ЗаказОбъект	            - Заказ клиента
//
Процедура ПрименитьТекущиеСкидкиНаценки(ЗаказОбъект) Экспорт

	Точность = 2;
	СтоПроцентов = 100;

	ТекущиеСкидки = СкидкиНаценкиЗаказа(ЗаказОбъект.Ссылка);
	
	ЗаказОбъект.СкидкиНаценки.Очистить();
	Для Каждого СтрокаТовары Из ЗаказОбъект.Товары Цикл
		
		НайденныеСкидки = ТекущиеСкидки.НайтиСтроки(Новый Структура("Номенклатура", СтрокаТовары.Номенклатура));
		
		ЦенаАвтоматическойСкидки = 0;
		Для Каждого СтрокаСкидки Из НайденныеСкидки Цикл
			
			// Заполнение СкидкиНаценки
			НоваяСтрокаСкидки = ЗаказОбъект.СкидкиНаценки.Добавить();
			НоваяСтрокаСкидки.КлючСвязи = СтрокаТовары.КлючСвязи;
			НоваяСтрокаСкидки.СкидкаНаценка = СтрокаСкидки.СкидкаНаценка;
			
			НоваяСтрокаСкидки.Сумма = СтрокаСкидки.Сумма * СтрокаТовары.Количество;
			НоваяСтрокаСкидки.бг_СуммаНачислено = СтрокаСкидки.СуммаНачислено * СтрокаТовары.Количество;
			НоваяСтрокаСкидки.бг_СуммаСписанияНакопительнойСкидки = 
				СтрокаСкидки.СуммаСписанияНакопительнойСкидки * СтрокаТовары.Количество;

			ЦенаАвтоматическойСкидки = ЦенаАвтоматическойСкидки + СтрокаСкидки.Сумма;
			
		КонецЦикла;
		
		// Заполнение скидок в Товарах
		СтрокаТовары.СуммаАвтоматическойСкидки = Окр(СтрокаТовары.Количество * ЦенаАвтоматическойСкидки, Точность);
		
		// Применение автоматической скидки.
		СуммаБезСкидки = Окр(СтрокаТовары.Количество * СтрокаТовары.Цена, Точность);
		
		Если СуммаБезСкидки <> 0 Тогда
			СтрокаТовары.ПроцентРучнойСкидки = СтоПроцентов * СтрокаТовары.СуммаРучнойСкидки / СуммаБезСкидки;
		КонецЕсли;
		
		СуммаСкидки = СтрокаТовары.СуммаАвтоматическойСкидки + СтрокаТовары.СуммаРучнойСкидки;
		
		СтрокаТовары.ПроцентАвтоматическойСкидки = 
			?(СуммаБезСкидки = 0, 0 , СтоПроцентов * СтрокаТовары.СуммаАвтоматическойСкидки / СуммаБезСкидки);
		
		СтрокаТовары.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТовары.СуммаНДС = 
			СкидкиНаценкиСервер.РассчитатьСуммуНДС(СтрокаТовары.Сумма, СтрокаТовары.СтавкаНДС, ЗаказОбъект);
		
		СтрокаТовары.СуммаСНДС = СтрокаТовары.Сумма + ?(ЗаказОбъект.ЦенаВключаетНДС, 0, СтрокаТовары.СуммаНДС);
		
	КонецЦикла;
	ЗаказОбъект.СуммаДокумента = 
		ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ЗаказОбъект.Товары, ЗаказОбъект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Возвращает строку кодов строк бюджета по переданному массиву скидок
//
// Параметры:
//  СкидкиНаценки - Список значений скидок/наценок
//
// Возвращаемое значение:
//	КодыСтрокБюджета - Строка содержащая коды строк бюджета
//
Функция КодыСтрокБюджетаПоСкидкам(СкидкиНаценки) Экспорт
	
	МассивСкидокНаценок = СкидкиНаценки.ВыгрузитьЗначения();
	КодыСтрокиБюджетаСкидокИНаценок = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСкидокНаценок, "бг_КодСтрокиБюджета");
		
	КодыСтрокБюджета = "";
	Если КодыСтрокиБюджетаСкидокИНаценок.Количество() > 0 Тогда

		Для Каждого СтрокаКодСтрокиБюджета Из КодыСтрокиБюджетаСкидокИНаценок Цикл
			КодСтрокиБюджета = СокрЛП(СтрокаКодСтрокиБюджета.Значение);
			Если КодСтрокиБюджета <> "" Тогда
				КодыСтрокБюджета = ?(КодыСтрокБюджета = "", "", КодыСтрокБюджета + ";") + КодСтрокиБюджета;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Возврат КодыСтрокБюджета;
	
КонецФункции

#КонецОбласти

#Область РасчетСкидокНаценок

// Выполняет расчёт скидки ВнешняяОбработка.бг_СкидкаНаценкаФиксированнаяЦенаАкция
// Вызывается из метода Рассчитать этой обработки
//
// товары, для которых задана целевая цена -- это позиции-реципиенты, получатели скидки
// сумма скидки составляет разницу между суммой по базовой цене и суммой, 
// уже рассчитанной с учётом скидок от базовой цены до вызова расчёта этой скидки
//
Процедура РассчитатьСкидкуНаценкуФиксированнаяЦенаАкция(РезультатРасчета, СкидкаНаценка, Товары, ПараметрыРасчета)

	Точность = 2;
	СтоПроцентов = 100;
	
	Если ТипЗнч(Товары) = Тип("Массив") Тогда
		Если Товары.Количество() И ТипЗнч(Товары[0]) = Тип("СтрокаТаблицыЗначений") Тогда
			ТаблицаТоваров = Товары[0].Владелец().Скопировать(Товары);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТаблицаТоваров = Товары;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		ТекстЗапросаВременнойТаблицы(ТаблицаТоваров, "ВТ_Товары", "Товары") + 
		ОбщегоНазначенияУТ.РазделительЗапросовВПакете() + 
		"ВЫБРАТЬ
		|	Товары.КлючСвязи КАК КлючСвязи,
		|	Товары.Номенклатура КАК Номенклатура,
		|	МИНИМУМ(ЕСТЬNULL(ЦеновыеГруппыНоменклатура.ЗначениеСкидкиНаценки, ЦеновыеГруппыСкюМТ.ЗначениеСкидкиНаценки)) КАК ЦелеваяЦена,
		|	СУММА(ЕСТЬNULL(ЦеновыеГруппыНоменклатура.ЗначениеСкидкиНаценки, ЦеновыеГруппыСкюМТ.ЗначениеСкидкиНаценки) * Товары.Количество) КАК ЦелеваяСумма
		|ПОМЕСТИТЬ ЦелевыеСуммы
		|ИЗ
		|	ВТ_Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.бг_ЦеновыеГруппы КАК ЦеновыеГруппыНоменклатура
		|		ПО Товары.Номенклатура = ЦеновыеГруппыНоменклатура.ЦеноваяГруппа
		|			И (ЦеновыеГруппыНоменклатура.Ссылка = &СкидкаНаценка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.бг_ЦеновыеГруппы КАК ЦеновыеГруппыСкюМТ
		|		ПО Товары.Номенклатура.ТоварнаяКатегория.бг_СкюМТ = ЦеновыеГруппыСкюМТ.ЦеноваяГруппа
		|			И (ЦеновыеГруппыСкюМТ.Ссылка = &СкидкаНаценка)
		|ГДЕ
		|	НЕ ЕСТЬNULL(ЦеновыеГруппыНоменклатура.ЗначениеСкидкиНаценки, ЦеновыеГруппыСкюМТ.ЗначениеСкидкиНаценки) ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Товары.КлючСвязи,
		|	Товары.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Товары.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.*,
		|	ЦелевыеСуммы.ЦелеваяЦена КАК ЦелеваяЦена,
		|	ЦелевыеСуммы.ЦелеваяСумма КАК ЦелеваяСумма
		|ИЗ
		|	ВТ_Товары КАК Товары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЦелевыеСуммы КАК ЦелевыеСуммы
		|		ПО Товары.Номенклатура = ЦелевыеСуммы.Номенклатура
		|			И Товары.КлючСвязи = ЦелевыеСуммы.КлючСвязи"
	);
	Запрос.УстановитьПараметр("Товары",        ТаблицаТоваров);
	Запрос.УстановитьПараметр("СкидкаНаценка", СкидкаНаценка.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		СуммаСоСкидками = СкидкиНаценкиСервер.бг_ОстатокСуммыПоСтроке(СкидкаНаценка, Выборка, ПараметрыРасчета, Истина);
		ПредельнаяСумма = ?(СкидкаНаценка.бг_НеУчитыватьПороги, Выборка.бг_МинимальнаяСумма, Выборка.бг_ПредельнаяСумма);
		ЦелеваяСумма = Выборка.ЦелеваяСумма;
		Если ПараметрыРасчета.ЦенаВключаетНДС = Ложь Тогда
			ЦелеваяСумма = Окр(ЦелеваяСумма * СтоПроцентов / (СтоПроцентов + Выборка.СтавкаНДС), Точность);
		КонецЕсли;

		ОстатокСкидки   = Макс(СуммаСоСкидками - ПредельнаяСумма, 0);
		СуммаНачислено  = СуммаСоСкидками - ЦелеваяСумма;
		СуммаСкидки     = Мин(СуммаНачислено, ОстатокСкидки);
		Если СуммаСкидки Или СуммаНачислено Тогда
			ПараметрыРасчета.Вставить("бг_СуммаНачислено", СуммаНачислено);
			СкидкиНаценкиСервер.ПрименитьЗначениеСкидкиКТовару(СкидкаНаценка, СуммаСкидки, 
				Выборка, РезультатРасчета, ПараметрыРасчета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область ОбеспечениеЦены

// Выполняет расчёт скидки ВнешняяОбработка.бг_СкидкаНаценкаФиксированнаяЦена
// Вызывается из метода Рассчитать этой обработки
//
// товары, для которых задана целевая цена -- это позиции-доноры,
// остальные товары коллекции -- позиции-реципиенты, получатели скидки;
// сумма скидки составляет разницу между суммой по базовой цене и суммой,
// уже рассчитанной с учётом скидок от базовой цены до вызова расчёта этой скидки;
// сумма скидок позиций-доноров распределяется по позициями-реципиентам
// пропорционально остатку допустимой скидки
//
Процедура РассчитатьСкидкуНаценкуОбеспечениеЦены(РезультатРасчета, СкидкаНаценка, Настройки, Товары, ПараметрыРасчета)
	
	Если ТипЗнч(Товары) = Тип("Массив") Тогда
		Если Товары.Количество() И ТипЗнч(Товары[0]) = Тип("СтрокаТаблицыЗначений") Тогда
			ТаблицаТоваров = Товары[0].Владелец().Скопировать(Товары);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТаблицаТоваров = Товары;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		ТекстЗапросаВременнойТаблицы(ТаблицаТоваров, "ВТ_Товары", "Товары") + 
		ОбщегоНазначенияУТ.РазделительЗапросовВПакете() + 
		ТекстЗапросаВременнойТаблицы(Настройки.Таблица, "ВТ_ЦеновыеГруппы", "ЦеновыеГруппы") +
		ОбщегоНазначенияУТ.РазделительЗапросовВПакете() + 
		"ВЫБРАТЬ
		|	Товары.*,
		|	ISNULL(ЦеновыеГруппыНоменклатура.ЗначениеСкидкиНаценки, ЦеновыеГруппыСкюМТ.ЗначениеСкидкиНаценки) КАК ЦелеваяЦена,
		|	ISNULL(ЦеновыеГруппыНоменклатура.ЗначениеСкидкиНаценки, ЦеновыеГруппыСкюМТ.ЗначениеСкидкиНаценки) * Товары.Количество КАК ЦелеваяСумма
		|ИЗ
		|	ВТ_Товары КАК Товары
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеновыеГруппы КАК ЦеновыеГруппыНоменклатура
		|	ПО Товары.Номенклатура = ЦеновыеГруппыНоменклатура.ЦеноваяГруппа
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеновыеГруппы КАК ЦеновыеГруппыСкюМТ
		|	ПО Товары.Номенклатура.ТоварнаяКатегория.бг_СкюМТ = ЦеновыеГруппыСкюМТ.ЦеноваяГруппа
		|ГДЕ 
		|	НЕ ISNULL(ЦеновыеГруппыНоменклатура.ЗначениеСкидкиНаценки, ЦеновыеГруппыСкюМТ.ЗначениеСкидкиНаценки) IS NULL
		|	И Товары.Отменено = Ложь" +
		ОбщегоНазначенияУТ.РазделительЗапросовВПакете() + 
		"ВЫБРАТЬ
		|	Товары.*,
		|	0 СуммаСоСкидками,
		|	0 СуммаСкидки,
		|	0 ОстатокСкидки
		|ИЗ
		|	ВТ_Товары КАК Товары
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеновыеГруппы КАК ЦеновыеГруппыНоменклатура
		|	ПО Товары.Номенклатура = ЦеновыеГруппыНоменклатура.ЦеноваяГруппа
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЦеновыеГруппы КАК ЦеновыеГруппыСкюМТ
		|	ПО Товары.Номенклатура.ТоварнаяКатегория.бг_СкюМТ = ЦеновыеГруппыСкюМТ.ЦеноваяГруппа
		|ГДЕ
		|	ISNULL(ЦеновыеГруппыНоменклатура.ЦеноваяГруппа, ЦеновыеГруппыСкюМТ.ЦеноваяГруппа) ЕСТЬ NULL
		|	И Товары.Отменено = Ложь"
	);
	Запрос.УстановитьПараметр("Товары",        ТаблицаТоваров);
	Запрос.УстановитьПараметр("ЦеновыеГруппы", Настройки.Таблица);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// данные подлежащие распределению
	СуммаКРаспределению = ОбработатьДанныеПодлежащиеРаспределению(РезультатРасчета, СкидкаНаценка, 
		ПараметрыРасчета, РезультатыЗапроса[2]);
	
	// распределять нечего
	Если Не СуммаКРаспределению Тогда
		Возврат;
	КонецЕсли;
	
	// данные, куда распределять
	ТаблицаРаспределения = РезультатыЗапроса[3].Выгрузить();
	
	Если Не ТаблицаРаспределения.Количество() Тогда
		ТекстСообщения = НСтр("ru = 'Нет позиций для распределения суммы %1 скидки «%2», "
			+ "поскольку все позиции служат источником суммы распределения'");
		ТекстСообщения = СтрШаблон(
			ТекстСообщения,
			ФормированиеПечатныхФорм.ФорматСумм(СуммаКРаспределению, "руб"),
			СкидкаНаценка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ПараметрыРасчета.Регистратор, 
			"Товары", "Объект.Товары", Истина);
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицуРаспределенияОбеспеченияЦены(ТаблицаРаспределения, СкидкаНаценка, ПараметрыРасчета);

	Если ТаблицаРаспределения.Итог("ОстатокСкидки") = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Суммарная база (оставшаяся допустимая сумма скидок) "
			+ "для распределения суммы %1 скидки «%2» равна нулю, распределение невозможно'");
		ТекстСообщения = СтрШаблон(
			ТекстСообщения,
			ФормированиеПечатныхФорм.ФорматСумм(СуммаКРаспределению, "руб"),
			СкидкаНаценка.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, 
			ПараметрыРасчета.Регистратор, "Товары", "Объект.Товары", Истина);
		Возврат;
	КонецЕсли;

	РаспределениеОбеспеченияЦены(СкидкаНаценка, ТаблицаРаспределения, СуммаКРаспределению, 
		РезультатРасчета, ПараметрыРасчета);
	
КонецПроцедуры

Функция ОбработатьДанныеПодлежащиеРаспределению(РезультатРасчета, СкидкаНаценка, ПараметрыРасчета, РезультатЗапроса)

	Выборка = РезультатЗапроса.Выбрать();
	СуммаКРаспределению = 0;
	Пока Выборка.Следующий() Цикл
		
		СуммаСоСкидками = СкидкиНаценкиСервер.бг_ОстатокСуммыПоСтроке(СкидкаНаценка, Выборка, ПараметрыРасчета, Истина);
		ОстатокСкидки   = Макс(СуммаСоСкидками - ?(СкидкаНаценка.бг_НеУчитыватьПороги, Выборка.бг_МинимальнаяСумма, Выборка.бг_ПредельнаяСумма), 0);
		ПредельнаяСумма = ?(СкидкаНаценка.бг_НеУчитыватьПороги, Выборка.бг_МинимальнаяСумма, Выборка.бг_ПредельнаяСумма); 
		ЦелеваяСумма = Выборка.ЦелеваяСумма;
		Если ПараметрыРасчета.ЦенаВключаетНДС = Ложь Тогда
			КратностьРубля = 100;
			Точность = 2;
			ЦелеваяСумма = Окр(ЦелеваяСумма * КратностьРубля / (КратностьРубля + Выборка.СтавкаНДС), Точность);
		КонецЕсли;

		ОстатокСкидки   = Макс(СуммаСоСкидками - ПредельнаяСумма, 0); // оставшаяся скидка, максимально допустимая к начислению с учетом порогов
		СуммаНачислено  = СуммаСоСкидками - ЦелеваяСумма;
		СуммаСкидки     = СуммаНачислено;
		Если ОстатокСкидки < СуммаСкидки Тогда
			СуммаКРаспределению = СуммаКРаспределению + СуммаСкидки - ОстатокСкидки;
			СуммаСкидки  = ОстатокСкидки;
		КонецЕсли;
		Если СуммаСкидки ИЛИ СуммаНачислено Тогда
			СкидкиНаценкиСервер.бг_ПрименитьЗначениеСкидкиКТовару(СкидкаНаценка, СуммаСкидки, СуммаНачислено, Выборка, РезультатРасчета, ПараметрыРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммаКРаспределению;

КонецФункции // ОбработатьДанныеПодлежащиеРаспределению(СкидкаНаценка, ПараметрыРасчета, РезультатыЗапроса[2])()


Процедура ПодготовитьТаблицуРаспределенияОбеспеченияЦены(ТаблицаРаспределения, СкидкаНаценка, ПараметрыРасчета)

	// скидка не должна размывается на позиции, по которым произойдет потом ее вытеснение
	ПрименитьВытеснениеКТаблицеРаспредения(СкидкаНаценка.Родитель, ТаблицаРаспределения);

	Для каждого Товар из ТаблицаРаспределения Цикл
		Товар.СуммаСоСкидками = СкидкиНаценкиСервер.бг_ОстатокСуммыПоСтроке(СкидкаНаценка, Товар, ПараметрыРасчета, Истина);
		Товар.СуммаСкидки     = Товар.Сумма - Товар.СуммаСоСкидками;
		Товар.ОстатокСкидки   = Макс(Товар.СуммаСоСкидками - ?(СкидкаНаценка.бг_НеУчитыватьПороги, Товар.бг_МинимальнаяСумма, Товар.бг_ПредельнаяСумма), 0);
		
		// Сумма скидки д.б. кратна количеству
		Количество = Товар.Количество;
		Если Количество <> 0 Тогда
			КратностьРубля = 100;
			Товар.ОстатокСкидки = Количество * Цел(Товар.ОстатокСкидки / Количество * КратностьРубля) / КратностьРубля;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределениеОбеспеченияЦены(СкидкаНаценка, ТаблицаРаспределения, СуммаКРаспределению, 
	РезультатРасчета, ПараметрыРасчета)

	БазаРаспределения = ТаблицаРаспределения.Итог("ОстатокСкидки");
	СуммаКРаспределению = Мин(СуммаКРаспределению, БазаРаспределения);
	Для каждого Товар из ТаблицаРаспределения Цикл
		Если БазаРаспределения = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Разрядность = 2;
		СуммаСкидки = Окр(СуммаКРаспределению * Товар.ОстатокСкидки / БазаРаспределения, Разрядность);
		СуммаСкидки = Мин(СуммаСкидки, Товар.ОстатокСкидки);
		// Сумма скидки д.б. кратна количеству
		Количество = Товар.Количество;
		Если Количество <> 0 Тогда
			КратностьРубля = 100;
			СуммаСкидки = Количество * Цел(СуммаСкидки / Количество * КратностьРубля) / КратностьРубля;
		КонецЕсли;
		СуммаКРаспределению = СуммаКРаспределению - СуммаСкидки;
		БазаРаспределения = БазаРаспределения - Товар.ОстатокСкидки;
		
		Если СуммаСкидки Тогда
			СкидкиНаценкиСервер.бг_ПрименитьЗначениеСкидкиКТовару(СкидкаНаценка, СуммаСкидки, 0, Товар, РезультатРасчета, ПараметрыРасчета);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПрименитьВытеснениеКТаблицеРаспредения(СтрокаДерева, ТаблицаРаспределения)

	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Для каждого ПодтрокаСтрокиДерева Из СтрокаДерева.Строки Цикл
			Если ПодтрокаСтрокиДерева.ЭтоГруппа = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого СтрокаРезультатаРасчета Из ПодтрокаСтрокиДерева.РезультатРасчета Цикл
				Если СтрокаРезультатаРасчета.Сумма <> 0 Тогда
					НайденнаяСтрока = ТаблицаРаспределения.Найти(СтрокаРезультатаРасчета.КлючСвязи, "КлючСвязи");
					Если НайденнаяСтрока <> Неопределено Тогда
						ТаблицаРаспределения.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		ПрименитьВытеснениеКТаблицеРаспредения(СтрокаДерева.Родитель, ТаблицаРаспределения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ЕстьСкидкиБлокирующиеСуммовые(СтрокиДереваСкидок, КлючСвязи)

	Для каждого Строка Из СтрокиДереваСкидок Цикл
		Если Строка.ЭтоГруппа
			И ЕстьСкидкиБлокирующиеСуммовые(Строка.Строки, КлючСвязи) Тогда
			Возврат Истина;
		ИначеЕсли Не Строка.ЭтоГруппа
			И ЗначениеЗаполнено(Строка.РезультатРасчета) Тогда
			СтрокаРезультатаРасчета = Строка.РезультатРасчета.Найти(КлючСвязи, "КлючСвязи");
			Если СтрокаРезультатаРасчета <> Неопределено
				И Строка.бг_БлокируетСуммовыеСкидки
				И СтрокаРезультатаРасчета.Сумма <> 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Выполняет расчёт скидки ВнешняяОбработка.бг_СкидкаНаценкаEDI, ВнешняяОбработка.бг_СкидкаНаценкаКонечнаяЦена
// Вызывается из метода Рассчитать этой обработки
//
// приводит цену в строках таблицы к ценам EDI (к конечным ценам) (если разница цены со скидкой и цены EDI больше чем 3 копейки),
// сумма скидки/наценки составляет разницу между суммой рассчитанной от цены EDI, и суммой
// уже рассчитанной с учётом скидок от базовой цены до вызова расчёта этой скидки
//
Процедура РассчитатьСкидкуНаценкуКонечнаяЦена(РезультатРасчета, СкидкаНаценка, Товары, ПараметрыРасчета)
	
	ТабличнаяЧастьТовары = ПараметрыРасчета.Объект.Товары;
	Если Не ЗначениеЗаполнено(ТабличнаяЧастьТовары)
		Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧастьТовары[0], "бг_ЦенаEDI") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Товары) = Тип("Массив") Тогда
		Если Товары.Количество() И ТипЗнч(Товары[0]) = Тип("СтрокаТаблицыЗначений") Тогда
			ТаблицаТоваров = Товары[0].Владелец().Скопировать(Товары);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТаблицаТоваров = Товары.Скопировать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров.Колонки.Добавить("бг_ЦенаEDI", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СуммаСоСкидками = СкидкиНаценкиСервер.бг_ОстатокСуммыПоСтроке(СкидкаНаценка, СтрокаТаблицы, ПараметрыРасчета, Истина);
		
		СтрокаТаблицы.Сумма = СуммаСоСкидками;
		СтрокаТаблицы.Цена = СуммаСоСкидками / СтрокаТаблицы.Количество;
		
		СтруктураПоиска = Новый Структура("КлючСвязи, Номенклатура, Серия",
			СтрокаТаблицы.КлючСвязи, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Серия);
		
		СтрокиСЦенойEDI = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиСЦенойEDI.Количество() Тогда
			СтрокаТаблицы.бг_ЦенаEDI = СтрокиСЦенойEDI[0].бг_ЦенаEDI;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	ТекстЗапросаВременнойТаблицы(ТаблицаТоваров, "ВТ_Товары", "Товары") + 
	ОбщегоНазначенияУТ.РазделительЗапросовВПакете() + 
	"ВЫБРАТЬ
	|	ТТ.*,
	|	ТТ.бг_ЦенаEDI КАК ЦелеваяЦена,
	|	ТТ.бг_ЦенаEDI * ТТ.Количество КАК ЦелеваяСумма
	|ИЗ
	|	ВТ_Товары КАК ТТ
	|ГДЕ
	|	ТТ.бг_ЦенаEDI > 0");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаСоСкидками = Выборка.Сумма;
		ОстатокСкидки = Макс(СуммаСоСкидками - Выборка.бг_ПредельнаяСумма, 0);
		СуммаНачислено = СуммаСоСкидками - Выборка.ЦелеваяСумма;
		СуммаСкидки = Мин(СуммаНачислено, ОстатокСкидки);
		Если СуммаСкидки ИЛИ СуммаНачислено Тогда
			СкидкиНаценкиСервер.бг_ПрименитьЗначениеСкидкиКТовару(
				СкидкаНаценка, СуммаСкидки, СуммаНачислено, Выборка, РезультатРасчета, ПараметрыРасчета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчёт скидки ВнешняяОбработка.бг_ОкруглениеДоЦенEDI
// Вызывается из метода Рассчитать этой обработки
//
// приводит цену в строках таблицы к ценам EDI (если разница цены со скидкой и цены EDI в пределах 3-х копеек),
// сумма скидки/наценки включается в другую скидку с признаком CRM (т.е. у скидки заполнен рекцизит "бг_ТипСкидкиНаценкиCRM")
//
Процедура РассчитатьСкидкуДляОкругленияДоЦеныEDI(РезультатРасчета, СкидкаНаценка, Товары, ПараметрыРасчета)
	
	ТабличнаяЧастьТовары = ПараметрыРасчета.Объект.Товары;
	Если Не ЗначениеЗаполнено(ТабличнаяЧастьТовары)
		Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТабличнаяЧастьТовары[0], "бг_ЦенаEDI") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Товары) = Тип("Массив") Тогда
		Если Товары.Количество() И ТипЗнч(Товары[0]) = Тип("СтрокаТаблицыЗначений") Тогда
			ТаблицаТоваров = Товары[0].Владелец().Скопировать(Товары);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТаблицаТоваров = Товары.Скопировать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТаблицаТоваров) Тогда
		Возврат;
	КонецЕсли;
	
	// Выбрать скидку в которую включить округление
	//  Сумма округления рассчитывается по скидке "бг_ОкруглениеДоЦенEDI",
	//  но результат рассчета включается в сумму другой скидки в которой заполнен реквизит бг_ТипСкидкиНаценкиCRM
	СтрокаДереваСкидкаCRM = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СкидкиНаценки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СкидкиНаценки КАК СкидкиНаценки
		|ГДЕ
		|	СкидкиНаценки.Ссылка В(&СкидкиНаценки)
		|	И НЕ СкидкиНаценки.ЭтоГруппа
		|	И СкидкиНаценки.Управляемая = Ложь
		|	И СкидкиНаценки.СпособПримененияСкидки = Значение(Перечисление.СпособыПримененияСкидокНаценок.ПрименитьВМоментРасчетаСкидокНаценок)
		|	И СкидкиНаценки.бг_ТипСкидкиНаценкиCRM <> ЗНАЧЕНИЕ(Справочник.бг_ТипыСкидокНаценокCRM.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("СкидкиНаценки", ПараметрыРасчета.СкидкиНаценки);
	
	СкидкиCRM = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для каждого СкидкаCRM Из СкидкиCRM Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("бг_Действующая", Истина);
		ПараметрыОтбора.Вставить("Рассчитано", Истина);
		ПараметрыОтбора.Вставить("Ссылка", СкидкаCRM);
		ПараметрыОтбора.Вставить("ЭтоГруппа", Ложь);
		
		СтрокиДереваСкидокДляПримененияОкругления = СкидкаНаценка.Владелец().Строки.НайтиСтроки(ПараметрыОтбора, Истина);
		Если СтрокиДереваСкидокДляПримененияОкругления.Количество() Тогда
			СтрокаДереваСкидкаCRM = СтрокиДереваСкидокДляПримененияОкругления[0];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТоваров.Колонки.Добавить("бг_ЦенаEDI", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаСоСкидками = СкидкиНаценкиСервер.бг_ОстатокСуммыПоСтроке(СкидкаНаценка, СтрокаТаблицы, ПараметрыРасчета, Истина);
		
		СтрокаТаблицы.Сумма = СуммаСоСкидками;
		СтрокаТаблицы.Цена = СуммаСоСкидками / СтрокаТаблицы.Количество;
		
		СтруктураПоиска = Новый Структура(
			"КлючСвязи, Номенклатура, Серия",
			СтрокаТаблицы.КлючСвязи, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Серия);
		
		СтрокиСЦенойEDI = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиСЦенойEDI.Количество() Тогда
			СтрокаТаблицы.бг_ЦенаEDI = СтрокиСЦенойEDI[0].бг_ЦенаEDI;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	ТекстЗапросаВременнойТаблицы(ТаблицаТоваров, "ВТ_Товары", "Товары") + 
	ОбщегоНазначенияУТ.РазделительЗапросовВПакете() + 
	"ВЫБРАТЬ
	|	ТТ.*,
	|	ТТ.бг_ЦенаEDI КАК ЦелеваяЦена,
	|	ТТ.бг_ЦенаEDI * ТТ.Количество КАК ЦелеваяСумма
	|ИЗ
	|	ВТ_Товары КАК ТТ
	|ГДЕ
	|	ТТ.бг_ЦенаEDI > 0
	|	И (ТТ.бг_ЦенаEDI - ТТ.Цена <> 0)
	|	И (ТТ.бг_ЦенаEDI - ТТ.Цена >= -0.03)
	|	И (ТТ.бг_ЦенаEDI - ТТ.Цена <= 0.03)");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаСоСкидками = Выборка.Сумма;
		ОстатокСкидки = Макс(СуммаСоСкидками - Выборка.бг_ПредельнаяСумма, 0);
		СуммаНачислено = СуммаСоСкидками - Выборка.ЦелеваяСумма;
		СуммаСкидки = Мин(СуммаНачислено, ОстатокСкидки);
		Если СуммаСкидки ИЛИ СуммаНачислено Тогда
			
			Если Не СкидкаНаценка.НазначенаПользователем Тогда
				// Если пользователь не назначил скидку - не нужно приводить цену к цене EDI
				СкидкиНаценкиСервер.бг_ПрименитьЗначениеСкидкиКТовару(
					СкидкаНаценка, СуммаСкидки, СуммаНачислено, Выборка, РезультатРасчета, ПараметрыРасчета);
				Продолжить;
			КонецЕсли;
			
			СтрокаДереваСкидкаCRM =
				СтрокаДереваСкидокДляРаспределенияСкидкиОкругденияЦеныEDI(СтрокаДереваСкидкаCRM, Выборка.КлючСвязи);

			Если СтрокаДереваСкидкаCRM = Неопределено Тогда
				// Если скидка CRM предварительно не была рассчитана - не нужно приводить цену к цене EDI
				СкидкиНаценкиСервер.бг_ПрименитьЗначениеСкидкиКТовару(
					СкидкаНаценка, 0, СуммаНачислено, Выборка, РезультатРасчета, ПараметрыРасчета);
				Продолжить;
			КонецЕсли;
			
			СтрокаРезультатРасчета = СтрокаДереваСкидкаCRM.РезультатРасчета.Найти(Выборка.КлючСвязи, "КлючСвязи");
			Если СтрокаРезультатРасчета = Неопределено
				Или Не СтрокаРезультатРасчета.Действует Тогда
				// Если на строку документа не применилась скидка CRM - не нужно приводить цену к цене EDI
				СкидкиНаценкиСервер.бг_ПрименитьЗначениеСкидкиКТовару(
					СкидкаНаценка, 0, СуммаНачислено, Выборка, РезультатРасчета, ПараметрыРасчета);
				Продолжить;
			КонецЕсли;
			
			СтрокаРезультатРасчета.Сумма = СтрокаРезультатРасчета.Сумма + СуммаСкидки;
			СтрокаРезультатРасчета.бг_СуммаНачислено = СтрокаРезультатРасчета.бг_СуммаНачислено + СуммаНачислено;
			
			НоваяРасшифровкаСкидки = СтрокаРезультатРасчета.Расшифровка.Добавить();
			НоваяРасшифровкаСкидки.СкидкаНаценка = СкидкаНаценка.Ссылка;
			НоваяРасшифровкаСкидки.Сумма = СуммаСкидки;
			НоваяРасшифровкаСкидки.ЭтоСообщение = Ложь;
			НоваяРасшифровкаСкидки.бг_СуммаНачислено = СуммаНачислено;
			НоваяРасшифровкаСкидки.бг_СуммаСписанияНакопительнойСкидки = 0;
			
			СкидкиНаценкиСервер.бг_РассчитатьСкидкиПоГруппеСовместногоПримененияРекурсивно(
				СтрокаДереваСкидкаCRM, ПараметрыРасчета);

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция НовыеНастройкиСкидкиНаценки(ВариантСкидкиНаценки) Экспорт
	
	ЦеновыеГруппы = Новый ТаблицаЗначений;
	Колонки = ЦеновыеГруппы.Колонки;
	
	Колонки.Добавить("ЦеноваяГруппа",         Новый ОписаниеТипов("СправочникСсылка.бг_ЕК_СКЮ_СкюМТ"),  НСтр("ru = 'SKU MT'; en = 'SKU MT'"),        20);
	Колонки.Добавить("ЗначениеСкидкиНаценки", Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип, НСтр("ru = 'Цена, %1'; en = 'Price in %1'"), 15);
	
	Колонки.ЗначениеСкидкиНаценки.Заголовок = СтрШаблон(Колонки.ЗначениеСкидкиНаценки.Заголовок, Константы.ВалютаУправленческогоУчета.Получить());
	
	НовыеНастройки = Новый Структура;
	НовыеНастройки.Вставить("Таблица",              ЦеновыеГруппы);
	НовыеНастройки.Вставить("ВариантСкидкиНаценки", ВариантСкидкиНаценки);
	НовыеНастройки.Вставить("СлужебныеПоля",        СтрРазделить("ВариантСкидкиНаценки,СлужебныеПоля", ","));
	
	Возврат НовыеНастройки;
	
КонецФункции

Функция НовыеНастройкиУсловияПредоставления(ВариантУсловияПредоставления) Экспорт
	
	ТипСчетчика    = ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный);
	ТипОграничения = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный);
	
	ЦеновыеГруппы = Новый ТаблицаЗначений;
	Колонки = ЦеновыеГруппы.Колонки;
	
	Колонки.Добавить(
		"ЦеноваяГруппа",
		Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"),
		НСтр("ru = 'Группа'; en = 'Group'"),
		20
	);
	Колонки.Добавить(
		"МинимальноеКоличествоЕдиниц",
		ТипСчетчика,
		НСтр("ru = 'Минимальное количество единиц'; en = 'Minimal items count'"),
		15
	);
	Колонки.Добавить(
		"МаксимальноеКоличествоЕдиниц",
		ТипСчетчика,
		НСтр("ru = 'Максимальное количество единиц'; en = 'Maximal items count'"),
		15
	);
	Колонки.Добавить(
		"МинимальнаяЕмкостьЕдиницы",
		ТипОграничения,
		НСтр("ru = 'Минимальная ёмкость единицы'; en = 'Minimal item volume'"),
		15
	);
	Колонки.Добавить("МаксимальнаяЕмкостьЕдиницы",
		ТипОграничения,
		НСтр("ru = 'Максимальная ёмкость единицы'; en = 'Maximal item volume'"),
		15
	);
	Колонки.Добавить(
		"МинимальноеКоличествоДекалитров",
		ОбщегоНазначения.ОписаниеТипаЧисло(18, 6, ДопустимыйЗнак.Неотрицательный),
		НСтр("ru = 'Минимальное количество декалитров'; en = 'Minimal decaliters amount'"),
		15
	);
	
	МинимальноеКоличество = Новый Структура(
		"Тип,Заголовок",
		ТипСчетчика,
		НСтр("ru = 'Минимальное количество групп'; en = 'Minimal groups amount'")
	);
	
	НовыеНастройки = Новый Структура;
	НовыеНастройки.Вставить("Таблица",                      ЦеновыеГруппы);
	НовыеНастройки.Вставить("МинимальноеКоличество",        МинимальноеКоличество);
	НовыеНастройки.Вставить("ВариантУсловияПредоставления", ВариантУсловияПредоставления);
	НовыеНастройки.Вставить("СлужебныеПоля",                СтрРазделить("ВариантУсловияПредоставления,СлужебныеПоля", ","));
	
	Возврат НовыеНастройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеТекстаЗапросаВременнойТаблицы

Функция ЗаменитьФрагментЗапроса(ТекстЗапроса, СтрокаПоиска, ЗначениеЗамены, ШаблонЗамены, ЗначениеПоУмолчанию)
	СтрокаЗамены = ?(ПустаяСтрока(ЗначениеЗамены), ЗначениеПоУмолчанию, СтрШаблон(ШаблонЗамены, ЗначениеЗамены));
	Возврат СтрЗаменить(ТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
КонецФункции

// Возвращает выражение типа языка запросов для переданного описания типа
//  Если тип составной - возвращается пустая строка
//  Если тип не входит в перечень (Число,Строка,Дата,Булево,ЛюбаяСсылка) - возвращается пустая строка
//
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - описание типа колонки
// 
// Возвращаемое значение:
//   - Строка - выражения описания типа языка запросов
//
Функция ВыражениеТипаЯзыкаЗапросов(Знач ОписаниеТипа)
	Если ОписаниеТипа.СодержитТип(Тип("Null")) Тогда
		ОписаниеТипа = Новый ОписаниеТипов(ОписаниеТипа,, "Null");
	КонецЕсли;
	Если ОписаниеТипа.Типы().Количество() = 1 Тогда
		Если ОписаниеТипа.СодержитТип(Тип("Число")) Тогда
			Квалификатор = ОписаниеТипа.КвалификаторыЧисла;
			Если НЕ Квалификатор.Разрядность
				И НЕ Квалификатор.РазрядностьДробнойЧасти Тогда
				Возврат "ЧИСЛО";
			Иначе
				Возврат СтрШаблон("ЧИСЛО(%1, %2)",
					Формат(Квалификатор.Разрядность, "ЧГ=0;ЧН=0"),
					Формат(Квалификатор.РазрядностьДробнойЧасти, "ЧГ=0;ЧН=0"));
			КонецЕсли;
		ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Строка")) Тогда
			Квалификатор = ОписаниеТипа.КвалификаторыСтроки;
			Если НЕ Квалификатор.Длина Тогда
				Возврат "СТРОКА";
			Иначе
				Возврат СтрШаблон("СТРОКА(%1)",
					Формат(Квалификатор.Длина, "ЧГ=0"));
			КонецЕсли;
		ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Булево")) Тогда
			Возврат "БУЛЕВО";
		ИначеЕсли ОписаниеТипа.СодержитТип(Тип("Дата")) Тогда
			Возврат "ДАТА";
		Иначе
			Тип = ОписаниеТипа.Типы()[0];
			Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				Тип = Метаданные.НайтиПоТипу(Тип);
				Если Тип = Неопределено Тогда
					Возврат "";
				Иначе
					Возврат Тип.ПолноеИмя();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает выражение поля языка запросов для переданной колонки
//  При необходимости формирует выражение ограничения типа
//
// Параметры:
//  Колонка		 - Произвольный	 - описание колонки-источника поля,
//  	должно содержать свойства Имя и ТипЗначения
//  Псевдоним	 - Строка		 - псевдоним поля,
//  	выбирается равным имени колонки если опущен или пуст
// 
// Возвращаемое значение:
//   - Строка - выражение поля, включая псевдоним
//
Функция ВыражениеПоляЯзыкаЗапросов(Колонка, Знач Псевдоним = "")
	ВыражениеТипа = ВыражениеТипаЯзыкаЗапросов(Колонка.ТипЗначения);
	Псевдоним     = ?(ПустаяСтрока(Псевдоним), Колонка.Имя, Псевдоним);
	Если ПустаяСтрока(ВыражениеТипа) Тогда
		ОписаниеПоля = СтрШаблон("Т.%1 КАК %2", Колонка.Имя, Псевдоним);
	Иначе
		ОписаниеПоля = СтрШаблон("ВЫРАЗИТЬ(Т.%1 КАК %3) КАК %2", Колонка.Имя, Псевдоним, ВыражениеТипа);
	КонецЕсли;
	Возврат ОписаниеПоля;
КонецФункции

// Возвращает текст запроса создания временной таблицы для помещения переданной таблицы Таблица
//  По возможности выполняется приведение типов в запросе
//
// Параметры:
//  Таблица				 - ТаблицаЗначений, ТабличнаяЧасть, Массив	 - коллекция строк таблицы
//  ИмяВременнойТаблицы	 - Строка									 - имя создаваемой временной таблицы
//  ИмяПараметра		 - Строка									 - имя параметра запроса, содержащего таблицу
//  ИменаКолонок		 - Массив, Строка							 - имена полей выборки, по умолчанию все поля
// 
// Возвращаемое значение:
//   - Строка - текст запроса создания временной таблицы
//
Функция ТекстЗапросаВременнойТаблицы(Таблица, ИмяВременнойТаблицы, ИмяПараметра, ИменаКолонок = "*") Экспорт
	ПоляВыборки = Новый Массив;
	
	ТипТаблицы = ТипЗнч(Таблица);
	Если ТипТаблицы = Тип("ТаблицаЗначений") Тогда
		Колонки = Таблица.Колонки;
	ИначеЕсли ТипТаблицы = Тип("Массив") И Таблица.Количество() И ТипЗнч(Таблица[0]) = Тип("СтрокаТаблицыЗначений") Тогда
		Колонки = Таблица[0].Владелец().Колонки;
	Иначе
		Колонки = Новый Структура;
		МетаТаблица = Метаданные.НайтиПоТипу(ТипТаблицы);
		Если МетаТаблица = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип %1 параметра Таблица'; en = 'Wrong type %1 of the first parameter'"), ТипТаблицы);
		КонецЕсли;
		Для каждого Колонка из МетаТаблица.СтандартныеРеквизиты Цикл
			Колонки.Вставить(Колонка.Имя, Новый Структура("Имя,ТипЗначения", Колонка.Имя, Колонка.Тип));
		КонецЦикла;
		Для каждого Колонка из МетаТаблица.Реквизиты Цикл
			Колонки.Вставить(Колонка.Имя, Новый Структура("Имя,ТипЗначения", Колонка.Имя, Колонка.Тип));
		КонецЦикла;
	КонецЕсли;
	
	Если ИменаКолонок = "*" Тогда
		ЭтоСтруктура = ТипЗнч(Колонки) = Тип("Структура");
		Для каждого Колонка из Колонки Цикл
			ОписаниеПоля = ВыражениеПоляЯзыкаЗапросов(?(ЭтоСтруктура, Колонка.Значение, Колонка));
			ПоляВыборки.Добавить(ОписаниеПоля);
		КонецЦикла;
	Иначе
		Если ТипЗнч(ИменаКолонок) = Тип("Строка") Тогда
			МассивИмен = СтрРазделить(ИменаКолонок, ",
			|	 ", Ложь);
		ИначеЕсли ТипЗнч(ИменаКолонок) = Тип("Массив") Тогда
			МассивИмен   = ИменаКолонок;
		ИначеЕсли ТипЗнч(ИменаКолонок) = Тип("ФиксированныйМассив") Тогда
			МассивИмен   = ИменаКолонок;
		ИначеЕсли ТипЗнч(ИменаКолонок) = Тип("Структура") Тогда
			МассивИмен   = ИменаКолонок;
		ИначеЕсли ТипЗнч(ИменаКолонок) = Тип("ФиксированнаяСтруктура") Тогда
			МассивИмен   = ИменаКолонок;
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверный тип %1 последнего параметра'; en = 'Wrong type %1 of the last parameter'"), ТипЗнч(ИменаКолонок));
		КонецЕсли;
		ЭтоСтруктура = ТипЗнч(МассивИмен) = Тип("Структура");
		Для каждого ИмяКолонки из МассивИмен Цикл
			Колонка      = Колонки[?(ЭтоСтруктура, ИмяКолонки.Ключ, ИмяКолонки)];
			ОписаниеПоля = ВыражениеПоляЯзыкаЗапросов(Колонка, ?(ЭтоСтруктура, ИмяКолонки.Значение, ""));
			ПоляВыборки.Добавить(ОписаниеПоля);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтрШаблон(
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК АвтоНомерЗаписи,
		|	%1
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	&%3 КАК Т",
		СтрСоединить(ПоляВыборки, ",
		|	"),
		ИмяВременнойТаблицы,
		ИмяПараметра
	);
КонецФункции

#КонецОбласти

#Область ПроверкаМинимальныхЦенДокумента

Функция ТипЛицензииДляМинимальныхЦен(ДокументОбъект)

	ТипДокумента = ТипЗнч(ДокументОбъект);
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента")
		И ДокументОбъект.бг_Магазин <> Справочники.Контрагенты.ПустаяСсылка()
		И ДокументОбъект.бг_ЗаказРозничногоПокупателя = Документы.ЗаказКлиента.ПустаяСсылка() Тогда
		// Это заказ розничного покупателя
		
		ТипЛицензии = Перечисления.бг_ТипыЛицензийПоставщиковАлкогольнойПродукции.Розничная;
		
	Иначе
		Если ТипДокумента = Тип("ДокументОбъект.ПриобретениеТоваровУслуг")
			Или ТипДокумента = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
			ВладелецЛицензии = ДокументОбъект.Контрагент;
		Иначе
			ВладелецЛицензии = ДокументОбъект.Организация;
		КонецЕсли;
		
		ТипЛицензии = Справочники.ЛицензииПоставщиковАлкогольнойПродукции.бг_ТипЛицензииОрганизации(
			ВладелецЛицензии, ДокументОбъект.Дата);
		
		Если ТипЛицензии = Неопределено Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не указан тип алкогольной лицензии для %1'"), ВладелецЛицензии);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ДокументОбъект.Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТипЛицензии;

КонецФункции

Функция ТекстЗапросаТоварыДокумента(ДокументОбъект)
	
	Текст = 
	"ВЫБРАТЬ
	|	КурсВалюты.Курс/ КурсВалюты.Кратность КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта) КАК КурсВалюты
	|ГДЕ
	|	КурсВалюты.Кратность <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА &ЦенаВключаетНДС ТОГДА
	|			ТаблицаТоваров.Цена
	|		ИНАЧЕ ТаблицаТоваров.Цена * (100 + ВЫРАЗИТЬ(ТаблицаТоваров.СтавкаНДС КАК Справочник.СтавкиНДС).Ставка) / 100
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Количество = 0 ТОГДА
	|			0
	|		ИНАЧЕ ТаблицаТоваров.СуммаСНДС / ТаблицаТоваров.Количество
	|	КОНЕЦ КАК ЦенаСоСкидкой,
	|	&ТекстЗаменыДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		ТекстЗаменыДатаОтгрузки = 
		"	ВЫБОР 
		|		КОГДА ТаблицаТоваров.ДатаОтгрузки = ДАТАВРЕМЯ(1,1,1) 
		|			ТОГДА НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)
		|		ИНАЧЕ ТаблицаТоваров.ДатаОтгрузки
		|	КОНЕЦ";
		ТекстУсловия = "
		|ГДЕ
		|	НЕ Отменено";
	Иначе
		ТекстЗаменыДатаОтгрузки = "НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ)";
		ТекстУсловия = "";
	КонецЕсли;
	
	Возврат СтрЗаменить(Текст, "&ТекстЗаменыДатаОтгрузки", ТекстЗаменыДатаОтгрузки) + ТекстУсловия;
	
КонецФункции

Функция ТекстЗапросаПроверкиМРЦ()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втТовары.НомерСтроки КАК НомерСтроки,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	втТовары.ЦенаСоСкидкой * ISNULL(КурсыВалют.КоэффициентПересчета, 1) КАК Цена,
	|	ЕСТЬNULL(втТоварыМинимальныеЦены.ЭтоАлкогольнаяПродукция, ЛОЖЬ) ЭтоАлкогольнаяПродукция,
	|	ЕСТЬNULL(втТоварыМинимальныеЦены.МинимальнаяЦена, 0) МинимальнаяЦена,
	|	ЕСТЬNULL(втТоварыМинимальныеЦены.КонтролироватьУстановкуМРЦ, ЛОЖЬ) КонтролироватьУстановкуМРЦ,
	|	втТоварыМинимальныеЦены.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	Н.ВидАлкогольнойПродукции ВидАлкогольнойПродукцииНоменклатуры,
	|	втТоварыМинимальныеЦены.ВидЦены,
	|	втТоварыМинимальныеЦены.Объем КАК Объем,
	|	втТоварыМинимальныеЦены.Крепость КАК Крепость,
	|	втТоварыМинимальныеЦены.ЦенаРегулирования,
	|	втТоварыМинимальныеЦены.ЕмкостьТары
	|ИЗ
	|	втТовары КАК втТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ втТоварыМинимальныеЦены КАК втТоварыМинимальныеЦены
	|	ПО втТовары.НомерСтроки = втТоварыМинимальныеЦены.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура Н
	|	ПО втТовары.Номенклатура = Н.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют
	|	ПО ИСТИНА
	|ГДЕ
	|	втТовары.ЦенаСоСкидкой * ISNULL(КурсыВалют.КоэффициентПересчета, 1) < ЕСТЬNULL(втТоварыМинимальныеЦены.МинимальнаяЦена, 0)
	|	ИЛИ ЕСТЬNULL(втТоварыМинимальныеЦены.ЭтоАлкогольнаяПродукция, ЛОЖЬ)
	|		И ЕСТЬNULL(втТоварыМинимальныеЦены.КонтролироватьУстановкуМРЦ, ЛОЖЬ)
	|		И ЕСТЬNULL(втТоварыМинимальныеЦены.МинимальнаяЦена, 0) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТоварыМинимальныеЦены";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОграниченияСкидокНаценок

// Возвращает текст запроса, формирующего временные таблицы минимальных цен
// Вызывается из:
//  - процедуры контроля минимальных цен при проведении документов
//  - процедур расчёта скидок по видам документов
//
// Параметры:
//	ИмяТаблицыМинимальныхЦен - Строка - имя временной таблицы для помещения минимальных цен
//	ИмяКлючевогоПоля         - Строка - имя ключевого поля этой таблицы
//
// Возвращаемое значение:
//	Строка - текст запроса
//

Функция ТекстЗапросаМинимальныхЦен(ИмяКлючевогоПоля)
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛицензииПоставщиковАлкогольнойПродукции.бг_ТипЛицензии КАК ТипЛицензии,
	|	ТТ.ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_ТипыЛицензий
	|ИЗ
	|	Справочник.ЛицензииПоставщиковАлкогольнойПродукции КАК ЛицензииПоставщиковАлкогольнойПродукции
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары ТТ
	|	ПО ЛицензииПоставщиковАлкогольнойПродукции.Владелец = &Организация
	|		И ТТ.ДатаОтгрузки МЕЖДУ 
	|			ВЫБОР ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала
	|				КОГДА ДАТАВРЕМЯ(1, 1, 1) ТОГДА ТТ.ДатаОтгрузки
	|				ИНАЧЕ ЛицензииПоставщиковАлкогольнойПродукции.ДатаНачала
	|			КОНЕЦ
	|			И
	|			ВЫБОР ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|				КОГДА ДАТАВРЕМЯ(1, 1, 1) ТОГДА ТТ.ДатаОтгрузки
	|				ИНАЧЕ ЛицензииПоставщиковАлкогольнойПродукции.ДатаОкончания
	|			КОНЕЦ
	|		И НЕ ЛицензииПоставщиковАлкогольнойПродукции.ПометкаУдаления
	|ГДЕ
	|	&ТипЛицензии = Неопределено
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ТипЛицензии КАК ТипЛицензии,
	|	ТТ.ДатаОтгрузки
	|ИЗ
	|	втТовары ТТ
	|ГДЕ
	|	&ТипЛицензии <> Неопределено
	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.КлючевоеПоле КАК НомерСтроки,
	|	втТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВАП.бг_ИспользоватьПрочуюАлкогольнуюПродукцию ТОГДА
	|			ВЫРАЗИТЬ(ЗК_ПрочаяАП.Значение КАК Справочник.ВидыАлкогольнойПродукции)
	|		ИНАЧЕ Т.ВидАлкогольнойПродукции
	|	КОНЕЦ ВидАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА ВАП.бг_ИспользоватьПрочуюАлкогольнуюПродукцию ТОГДА
	|			ВЫРАЗИТЬ(ЗК_ПрочаяАП.Значение КАК Справочник.ВидыАлкогольнойПродукции).бг_КонтролироватьКрепость
	|		ИНАЧЕ ВАП.бг_КонтролироватьКрепость
	|	КОНЕЦ КонтролироватьКрепость,
	|	ВЫБОР
	|		КОГДА Т.Крепость <= ЕСТЬNULL(ЗК_МинКрепость.Значение, 28)
	|			ТОГДА ВАП.бг_КонтролироватьУстановкуМРЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КонтролироватьУстановкуМРЦ,
	|	Т.ОбъемДАЛ * 10 КАК Объем,
	|	ВЫБОР Т.Крепость
	|		КОГДА ВЫРАЗИТЬ(Т.Крепость КАК ЧИСЛО(3, 0))
	|			ТОГДА Т.Крепость - 1
	|		ИНАЧЕ ВЫРАЗИТЬ(Т.Крепость КАК ЧИСЛО(3, 0))
	|	КОНЕЦ КАК Крепость,
	|	втТовары.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ втТоварыКрепостьОбъем
	|ИЗ
	|	втТовары КАК втТовары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Т
	|		ПО втТовары.Номенклатура = Т.Ссылка
	|			И Т.АлкогольнаяПродукция
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции ВАП
	|		ПО ВидАлкогольнойПродукции = ВАП.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗначенияДополнительныхКонстант ЗК_МинКрепость
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бг_ДополнительныеКонстанты К_МинКрепость
	|			ПО К_МинКрепость.Идентификатор = ""МинимальнаяКрепостьАлкогольнойПродукции""
	|		ПО ЗК_МинКрепость.Константа = К_МинКрепость.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗначенияДополнительныхКонстант ЗК_ПрочаяАП
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бг_ДополнительныеКонстанты К_ПрочаяАП
	|			ПО К_ПрочаяАП.Идентификатор = ""ВидАлкогольнойПродукцииДляКонтроляМРЦПрочихЛВИ""
	|		ПО ЗК_ПрочаяАП.Константа = К_ПрочаяАП.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	втТовары.КлючевоеПоле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ДатаОтгрузки,
	|	бг_МинимальныеЦеныАлкогольнойПродукции.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции,
	|	бг_МинимальныеЦеныАлкогольнойПродукции.ТипЛицензии,
	|	ВЫБОР
	|		КОГДА ВАП.бг_КонтролироватьКрепость ТОГДА
	|			бг_МинимальныеЦеныАлкогольнойПродукции.Крепость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Крепость,
	|	бг_МинимальныеЦеныАлкогольнойПродукции.ЕмкостьТары КАК ЕмкостьТары,
	|	бг_МинимальныеЦеныАлкогольнойПродукции.Цена КАК Цена,
	|	бг_МинимальныеЦеныАлкогольнойПродукции.Период КАК Период
	|ПОМЕСТИТЬ втМинимальныеЦены
	|ИЗ
	|	РегистрСведений.бг_МинимальныеЦеныАлкогольнойПродукции КАК бг_МинимальныеЦеныАлкогольнойПродукции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТипыЛицензий Т
	|		ПО бг_МинимальныеЦеныАлкогольнойПродукции.ТипЛицензии = Т.ТипЛицензии
	|			И Т.ДатаОтгрузки МЕЖДУ Период И ВЫБОР ПериодОкончания КОГДА ДАТАВРЕМЯ(1, 1, 1) ТОГДА ДатаОтгрузки ИНАЧЕ ПериодОкончания КОНЕЦ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции ВАП
	|		ПО ВидАлкогольнойПродукции = ВАП.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтгрузки, ВидАлкогольнойПродукции, Крепость, Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ТипыЛицензий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыУточнениеПоВидам.НомерСтроки КАК НомерСтроки,
	|	втТоварыУточнениеПоВидам.ВидАлкогольнойПродукции,
	|	втТоварыУточнениеПоВидам.КонтролироватьКрепость,
	|	втМинимальныеЦены.ТипЛицензии,
	|	втМинимальныеЦены.Крепость,
	|	втТоварыУточнениеПоВидам.ДатаОтгрузки,
	|	МАКСИМУМ(Период) КАК ДатаСреза
	|ПОМЕСТИТЬ втТоварыДатыСрезаМРЦ
	|ИЗ
	|	втТоварыКрепостьОбъем КАК втТоварыУточнениеПоВидам
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныеЦены втМинимальныеЦены
	|	ПО втТоварыУточнениеПоВидам.ВидАлкогольнойПродукции = втМинимальныеЦены.ВидАлкогольнойПродукции
	|		И ВЫБОР КОГДА КонтролироватьКрепость ТОГДА втТоварыУточнениеПоВидам.Крепость ИНАЧЕ 0 КОНЕЦ = втМинимальныеЦены.Крепость
	|		И втТоварыУточнениеПоВидам.ДатаОтгрузки = втМинимальныеЦены.ДатаОтгрузки
	|СГРУППИРОВАТЬ ПО
	|	втТоварыУточнениеПоВидам.НомерСтроки,
	|	втТоварыУточнениеПоВидам.ВидАлкогольнойПродукции,
	|	втТоварыУточнениеПоВидам.КонтролироватьКрепость,
	|	втТоварыУточнениеПоВидам.ДатаОтгрузки,
	|	втМинимальныеЦены.ТипЛицензии,
	|	втМинимальныеЦены.Крепость
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	втТоварыУточнениеПоВидам.НомерСтроки,
	|	втТоварыУточнениеПоВидам.ВидАлкогольнойПродукции,
	|	втТоварыУточнениеПоВидам.КонтролироватьКрепость,
	|	втТоварыУточнениеПоВидам.ДатаОтгрузки,
	|	втМинимальныеЦены.ТипЛицензии,
	|	втМинимальныеЦены.Крепость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыДатыСрезаМРЦ.НомерСтроки КАК НомерСтроки,
	|	втМинимальныеЦены.Период,
	|	втМинимальныеЦены.ТипЛицензии,
	|	ВЫБОР ЕСТЬNULL(втМинимальныеЦены.ЕмкостьТары, 0)
	|		КОГДА 0 ТОГДА
	|			ЕСТЬNULL(втМинимальныеЦены.Цена, 0) / 0.5
	|		ИНАЧЕ
	|			ЕСТЬNULL(втМинимальныеЦены.Цена, 0) / ЕмкостьТары
	|	КОНЕЦ ЦенаЛитра,
	|	ЕСТЬNULL(втМинимальныеЦены.Цена, 0) КАК ЦенаРегулирования,
	|	ВЫБОР ЕСТЬNULL(втМинимальныеЦены.ЕмкостьТары, 0)
	|		КОГДА 0 ТОГДА
	|			0.5
	|		ИНАЧЕ
	|			втМинимальныеЦены.ЕмкостьТары
	|	КОНЕЦ КАК ЕмкостьТары
	|ПОМЕСТИТЬ втТовары_МинимальныеЦены
	|ИЗ
	|	втТоварыДатыСрезаМРЦ КАК втТоварыДатыСрезаМРЦ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМинимальныеЦены КАК втМинимальныеЦены
	|		ПО втТоварыДатыСрезаМРЦ.ВидАлкогольнойПродукции = втМинимальныеЦены.ВидАлкогольнойПродукции
	|			И втТоварыДатыСрезаМРЦ.ДатаОтгрузки = втМинимальныеЦены.ДатаОтгрузки
	|			И втТоварыДатыСрезаМРЦ.ДатаСреза = втМинимальныеЦены.Период
	|			И втТоварыДатыСрезаМРЦ.Крепость = втМинимальныеЦены.Крепость
	|			И втТоварыДатыСрезаМРЦ.ТипЛицензии = втМинимальныеЦены.ТипЛицензии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТоварыДатыСрезаМРЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втМинимальныеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.КлючевоеПоле     КАК НомерСтроки,
	|	Т.Номенклатура     КАК Номенклатура,
	|	Ц.ВидЦены          КАК ВидЦены,
	|	МАКСИМУМ(Ц.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПериодыМинимальныхОтпускныхЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25 Ц
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТовары Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации О
	|		ПО О.Ссылка = &Организация
	|	ПО Ц.Номенклатура = Т.Номенклатура
	|		И Ц.ВидЦены = О.бг_МинимальнаяОтпускнаяЦена
	|		И Ц.Период <= Т.ДатаОтгрузки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента ПС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗначенияДополнительныхКонстант ЗК
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бг_ДополнительныеКонстанты К
	|			ПО ЗК.Константа = К.Ссылка
	|				И К.Идентификатор = ""ИсключенияПроверкиМинимальныхОтпускныхЦен""
	|		ПО ПС.Сегмент = ЗК.Значение
	|	ПО ПС.Партнер = &Партнер
	|ГДЕ
	|	ПС.Сегмент ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Т.КлючевоеПоле, Т.Номенклатура, Ц.ВидЦены
	|ИНДЕКСИРОВАТЬ ПО
	|	МАКСИМУМ(Ц.Период), Т.Номенклатура, Ц.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	П.НомерСтроки, П.Период, П.ВидЦены, МАКСИМУМ(Ц.Цена)
	|ПОМЕСТИТЬ ВТ_ПредельныеЦены
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25 Ц
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыМинимальныхОтпускныхЦен П
	|	ПО Ц.Номенклатура = П.Номенклатура
	|		И Ц.ВидЦены = П.ВидЦены
	|		И Ц.Период = П.Период
	|СГРУППИРОВАТЬ ПО
	|	П.НомерСтроки, П.Период, П.ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыМинимальныхОтпускныхЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючевоеПоле,
	|	ТоварыРасширенная.ВидАлкогольнойПродукции,
	|	МЦ.ТипЛицензии,
	|	МЦ.Период ПериодЦеныРегулирования,
	|	ТоварыРасширенная.Крепость,
	|	ТоварыРасширенная.Объем,
	|	ТоварыРасширенная.КонтролироватьУстановкуМРЦ,
	|	ТоварыРасширенная.НомерСтроки ЕСТЬ НЕ NULL ЭтоАлкогольнаяПродукция,
	|	МЦ.ЦенаРегулирования, МЦ.ЕмкостьТары,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МЦ.ЦенаЛитра * ТоварыРасширенная.Объем, 0) < ЕСТЬNULL(ПЦ.Цена, 0) ТОГДА
	|			ЕСТЬNULL(ПЦ.ВидЦены, 0)
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ ВидЦены,
	|	ПЦ.Период ПериодЦеныОграничения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МЦ.ЦенаЛитра * ТоварыРасширенная.Объем, 0) < ЕСТЬNULL(ПЦ.Цена, 0) ТОГДА
	|			ЕСТЬNULL(ПЦ.Цена, 0)
	|		ИНАЧЕ
	|			ЕСТЬNULL(МЦ.ЦенаЛитра * ТоварыРасширенная.Объем, 0)
	|	КОНЕЦ МинимальнаяЦена
	|ПОМЕСТИТЬ втТоварыМинимальныеЦены
	|ИЗ
	|	втТовары Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ втТовары_МинимальныеЦены МЦ
	|	ПО Товары.КлючевоеПоле = МЦ.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПредельныеЦены ПЦ
	|	ПО Товары.КлючевоеПоле = ПЦ.НомерСтроки
	|	ЛЕВОЕ СОЕДИНЕНИЕ втТоварыКрепостьОбъем ТоварыРасширенная
	|	ПО Товары.КлючевоеПоле = ТоварыРасширенная.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Товары.КлючевоеПоле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТовары_МинимальныеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПредельныеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТоварыКрепостьОбъем
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КлючевоеПоле", ИмяКлючевогоПоля);
	
	Возврат ТекстЗапроса;
КонецФункции

// Возвращает текст запроса, формирующего временные таблицы максимальных скидок
// Вызывается из:
//  - процедур расчёта скидок по видам документов
//
// Параметры:
//	ИмяТаблицыМаксимальныхСкидок - Строка - имя временной таблицы для помещения максимальных скидок
//	ИмяТаблицыТоваров            - Строка - имя временной таблицы товаров
//	ИмяКлючевогоПоля             - Строка - имя ключевого поля этой таблицы
//
// Возвращаемое значение:
//	Строка - текст запроса
//
// Приоритеты получения максимальной скидки
//  0 - Вид цены + Номенклатура
//  1 - Пустой вид цены + Номенклатура
//  2 - Вид цены + СкюМТ
//  3 - Пустой вид цены + СкюМТ
//  4 - Вид цены + Пустая номенклатура + Пустой СкюМТ
//  5 - Пустой вид цены + Пустая номенклатура + Пустой СкюМТ
//  6 - Используется константа

Функция ТекстЗапросаМаксимальныхСкидок(ИмяКлючевогоПоля)
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_ДатыОтгрузки
	|ИЗ
	|	втТовары Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Период)    КАК Период,
	|	Организация         КАК Организация,
	|	Покупатель          КАК Покупатель,
	|	ВидЦены             КАК ВидЦены,
	|	СкюМТ               КАК СкюМТ,
	|	Номенклатура        КАК Номенклатура,
	|	ДатаОтгрузки        КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_СрезМаксимальныхПроцентовСкидок
	|ИЗ (
	|
	|	ВЫБРАТЬ
	|		Период,
	|		Организация,
	|		Покупатель,
	|		ВидЦены,
	|		СкюМТ,
	|		Номенклатура,
	|		ДатаОтгрузки
	|	ИЗ
	|		РегистрСведений.бг_МаксимальныеПроцентыСкидок Р
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыОтгрузки Т
	|		ПО ДатаОтгрузки МЕЖДУ Период И ДатаОкончанияДействия
	|			И Организация = &Организация
	|			И (Покупатель В (&Партнер, &Контрагент, НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			ИЛИ Покупатель В (ВЫБРАТЬ ПартнерыСегмента.Сегмент ИЗ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента ГДЕ ПартнерыСегмента.Партнер = &Партнер))
	|			И ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Период,
	|		Организация,
	|		Покупатель,
	|		ВидЦены,
	|		СкюМТ,
	|		Номенклатура,
	|		ДатаОтгрузки
	|	ИЗ
	|		РегистрСведений.бг_МаксимальныеПроцентыСкидок Р
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыОтгрузки Т
	|		ПО Период <= ДатаОтгрузки
	|			И Организация = &Организация
	|			И (Покупатель В (&Партнер, &Контрагент, НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|			ИЛИ Покупатель В (ВЫБРАТЬ ПартнерыСегмента.Сегмент ИЗ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента ГДЕ ПартнерыСегмента.Партнер = &Партнер))
	|			И ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|
	|	) Т
	|СГРУППИРОВАТЬ ПО
	|	Организация,
	|	Покупатель,
	|	ВидЦены,
	|	СкюМТ,
	|	Номенклатура,
	|	ДатаОтгрузки
	|ИНДЕКСИРОВАТЬ ПО
	|	МАКСИМУМ(Период),
	|	Организация,
	|	Покупатель,
	|	ВидЦены,
	|	СкюМТ,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Р.Период, 
	|	Р.Покупатель,
	|	ДатаОтгрузки,
	|	Р.ВидЦены,
	|	Р.СкюМТ,
	|	Р.Номенклатура,
	|	ПроцентСкидкиНаценки
	|ПОМЕСТИТЬ ВТ_АктивныеМаксимальныеПроцентыСкидок
	|ИЗ
	|	РегистрСведений.бг_МаксимальныеПроцентыСкидок Р
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СрезМаксимальныхПроцентовСкидок С
	|	ПО Р.Период = С.Период
	|		И Р.Организация = С.Организация
	|		И Р.Покупатель = С.Покупатель
	|		И Р.СкюМТ = С.СкюМТ
	|		И Р.Номенклатура = С.Номенклатура
	|		И Р.ВидЦены = С.ВидЦены
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	NULL, 
	|	NULL,
	|	Т.ДатаОтгрузки,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Р.Значение КАК ЧИСЛО(9, 4)), 100)
	|ИЗ
	|	ВТ_ДатыОтгрузки Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗначенияДополнительныхКонстант Р
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бг_ДополнительныеКонстанты К
	|		ПО К.Идентификатор = ""МаксимальныйПроцентСкидки""
	|	ПО Р.Константа = К.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СрезМаксимальныхПроцентовСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДатыОтгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 Приоритет,
	|	Т.КлючевоеПоле НомерСтроки,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ПОМЕСТИТЬ ВТ_ПриоритетыМаксимальныхПроцентов
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И Т.ВидЦены = А.ВидЦены
	|		И Т.Номенклатура = А.Номенклатура
	|		И А.Покупатель = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) = А.ВидЦены
	|		И Т.Номенклатура = А.Номенклатура
	|		И А.Покупатель = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И Т.ВидЦены = А.ВидЦены
	|		И Т.Номенклатура.ТоварнаяКатегория.бг_СкюМТ = А.СкюМТ
	|		И А.Покупатель = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) = А.ВидЦены
	|		И Т.Номенклатура.ТоварнаяКатегория.бг_СкюМТ = А.СкюМТ
	|		И А.Покупатель = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И Т.ВидЦены = А.ВидЦены
	|		И ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) = А.Номенклатура
	|		И ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка) = А.СкюМТ
	|		И А.Покупатель = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) = А.ВидЦены
	|		И ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) = А.Номенклатура
	|		И ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка) = А.СкюМТ
	|		И А.Покупатель = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	Т.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И НЕОПРЕДЕЛЕНО = А.ВидЦены
	|		И А.Покупатель = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	10 Приоритет,
	|	Т.КлючевоеПоле НомерСтроки,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И Т.ВидЦены = А.ВидЦены
	|		И Т.Номенклатура = А.Номенклатура
	|		И А.Покупатель = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	11 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) = А.ВидЦены
	|		И Т.Номенклатура = А.Номенклатура
	|		И А.Покупатель = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	12 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И Т.ВидЦены = А.ВидЦены
	|		И Т.Номенклатура.ТоварнаяКатегория.бг_СкюМТ = А.СкюМТ
	|		И А.Покупатель = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	13 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) = А.ВидЦены
	|		И Т.Номенклатура.ТоварнаяКатегория.бг_СкюМТ = А.СкюМТ
	|		И А.Покупатель = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	14 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И Т.ВидЦены = А.ВидЦены
	|		И ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) = А.Номенклатура
	|		И ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка) = А.СкюМТ
	|		И А.Покупатель = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	15 Приоритет,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) = А.ВидЦены
	|		И ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) = А.Номенклатура
	|		И ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка) = А.СкюМТ
	|		И А.Покупатель = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	16,
	|	Т.КлючевоеПоле,
	|	А.Покупатель,
	|	А.ВидЦены,
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	Т.ДатаОтгрузки
	|ИЗ
	|	втТовары Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО Т.ДатаОтгрузки = А.ДатаОтгрузки
	|		И НЕОПРЕДЕЛЕНО = А.ВидЦены
	|		И А.Покупатель = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомерСтроки, МИНИМУМ(Приоритет)
	|ПОМЕСТИТЬ ВТ_МинимальныеПриоритетыМаксимальныхПроцентов
	|ИЗ
	|	ВТ_ПриоритетыМаксимальныхПроцентов Т
	|СГРУППИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.НомерСтроки, 
	|	Т.Покупатель,
	|	Т.ДатаОтгрузки, 
	|	Т.ВидЦены, 
	|	Т.Номенклатура,
	|	Т.СкюМТ
	|ПОМЕСТИТЬ ВТ_ОтборыМаксимальныхПроцентов
	|ИЗ
	|	ВТ_ПриоритетыМаксимальныхПроцентов Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МинимальныеПриоритетыМаксимальныхПроцентов П
	|	ПО Т.НомерСтроки = П.НомерСтроки И Т.Приоритет = П.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПриоритетыМаксимальныхПроцентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МинимальныеПриоритетыМаксимальныхПроцентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	А.Период, 
	|	А.Покупатель, 
	|	А.СкюМТ,
	|	А.Номенклатура,
	|	А.ВидЦены,
	|	О.НомерСтроки КлючевоеПоле, 
	|	А.ПроцентСкидкиНаценки
	|ПОМЕСТИТЬ втМаксимальныеСкидки
	|ИЗ
	|	ВТ_ОтборыМаксимальныхПроцентов О
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АктивныеМаксимальныеПроцентыСкидок А
	|	ПО О.ДатаОтгрузки = А.ДатаОтгрузки
	|		И О.Покупатель = А.Покупатель
	|		И О.ВидЦены = А.ВидЦены
	|		И О.СкюМТ = А.СкюМТ
	|		И О.Номенклатура = А.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АктивныеМаксимальныеПроцентыСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОтборыМаксимальныхПроцентов
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КлючевоеПоле", ИмяКлючевогоПоля);
	
	Возврат ТекстЗапроса;
КонецФункции

Функция СтрокаДереваСкидокДляРаспределенияСкидкиОкругденияЦеныEDI(СтрокаДереваСкидкаCRM, КлючСвязи)
	
	Результат = Неопределено;
	
	ГруппаСкидок = СтрокаДереваСкидкаCRM.Родитель;
	ВариантСовместногоПрименения = ГруппаСкидок.ВариантСовместногоПрименения;
	
	ПоляСортировки = "РеквизитДопУпорядочивания";
	Если ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		ПоляСортировки = "РеквизитДопУпорядочивания";
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		ПоляСортировки = "Сумма Убыв, РеквизитДопУпорядочивания";
	ИначеЕсли ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		ПоляСортировки = "Сумма Возр, РеквизитДопУпорядочивания";
	КонецЕсли;
	
	ТаблицаСкидок = Новый ТаблицаЗначений;
	ТаблицаСкидок.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаСкидок.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	ТаблицаСкидок.Колонки.Добавить("СтрокаДереваСкидок", Новый ОписаниеТипов("СтрокаДереваЗначений"));
	
	Для каждого ПодчиненнаяСтрока Из ГруппаСкидок.Строки Цикл
		
		Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.Управляемая И Не ПодчиненнаяСтрока.НазначенаПользователем Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатРасчета = ПодчиненнаяСтрока.РезультатРасчета;
		Если Не ЗначениеЗаполнено(РезультатРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("КлючСвязи", КлючСвязи);
		СтрокиРезультатРасчета = РезультатРасчета.НайтиСтроки(Отбор);
		Для каждого СтрокаРасчета Из СтрокиРезультатРасчета Цикл
			Если СтрокаРасчета.Сумма <> 0 И СтрокаРасчета.Действует Тогда
				НоваяСтрокаТаблицы = ТаблицаСкидок.Добавить();
				НоваяСтрокаТаблицы.Сумма = СтрокаРасчета.Сумма;
				НоваяСтрокаТаблицы.РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
				НоваяСтрокаТаблицы.СтрокаДереваСкидок = ПодчиненнаяСтрока;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаСкидок.Количество() Тогда
		ТаблицаСкидок.Сортировать(ПоляСортировки);
		Результат = ТаблицаСкидок[0].СтрокаДереваСкидок;
	Иначе
		Результат = СтрокаДереваСкидкаCRM;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция СкидкиНаценкиЗаказа(Заказ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СУММА(ЗаказКлиентаСкидкиНаценки.Сумма) / СУММА(ЗаказКлиентаТовары.Количество) КАК Сумма,
	|	СУММА(ЗаказКлиентаСкидкиНаценки.бг_СуммаНачислено) / СУММА(ЗаказКлиентаТовары.Количество) КАК СуммаНачислено,
	|	СУММА(ЗаказКлиентаСкидкиНаценки.бг_СуммаСписанияНакопительнойСкидки) / СУММА(ЗаказКлиентаТовары.Количество) КАК СуммаСписанияНакопительнойСкидки
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК ЗаказКлиентаСкидкиНаценки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ЗаказКлиентаСкидкиНаценки.Ссылка = ЗаказКлиентаТовары.Ссылка
	|			И ЗаказКлиентаСкидкиНаценки.КлючСвязи = ЗаказКлиентаТовары.КлючСвязи
	|ГДЕ
	|	ЗаказКлиентаСкидкиНаценки.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаСкидкиНаценки.СкидкаНаценка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаказКлиентаТовары.Количество) <> 0";
	
	Запрос.УстановитьПараметр("Ссылка", Заказ);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти
