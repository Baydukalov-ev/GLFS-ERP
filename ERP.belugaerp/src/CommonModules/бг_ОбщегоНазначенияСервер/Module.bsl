#Область ПрограммныйИнтерфейс

Функция ЭтоРабочаяБаза() Экспорт
	СтрокаПодключенияРабочейБазы = бг_КонстантыПовтИсп.ЗначениеКонстанты("СтрокаПодключенияРабочейБазы");
	Если Не ЗначениеЗаполнено(СтрокаПодключенияРабочейБазы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаПодключенияРабочейБазы = НРег(СтрокаПодключенияРабочейБазы);
	СтрокаСоединенияИнформационнойБазы = НРег(СтрокаСоединенияИнформационнойБазы());
	
	Разделитель = ",";
	СтрокиПодключения = СтрРазделить(СтрокаПодключенияРабочейБазы, Разделитель);
	
	Возврат СтрокиПодключения.Найти(СтрокаСоединенияИнформационнойБазы) <> Неопределено;
КонецФункции

Процедура ДобавитьРеквизитУправленческаяОрганизация(РеквизитыИСвойства) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_УправленческаяОрганизация",
		Новый ОписаниеТипов("Булево"));
		
КонецПроцедуры

Процедура ИзменитьТекстЗапросаУправленческаяОрганизация(ТекстЗапроса) Экспорт
	ТекстПоиска = "ВыгружаемыйОбъект.Организация";
	ТекстЗамены = 
		"(ВЫБОР КОГДА ВыгружаемыйОбъект.Организация = Значение(Справочник.Организации.УправленческаяОрганизация)
		|		ТОГДА ВыгружаемыйОбъект.Склад.бг_Организация
		|		ИНАЧЕ ВыгружаемыйОбъект.Организация КОНЕЦ)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
КонецПроцедуры

Процедура ЗаполнитьРеквизитУправленческаяОрганизация(Объект, ДанныеОбъекта) Экспорт
	Если ДанныеОбъекта <> Неопределено 
		И ДанныеОбъекта.Реквизиты.Количество() > 0 Тогда
		
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
		ДанныеОбъекта.Реквизиты[0].Вставить("бг_УправленческаяОрганизация", 
			Организация = ПредопределенноеЗначение("Справочник.Организации.УправленческаяОрганизация"));
		
	КонецЕсли;
КонецПроцедуры

Функция ИдентификаторСУчетомТаблицыКлючей(Идентификатор, ПолноеИмяОбъектаМетаданных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	адаптер_ТаблицаКлючей.ИдентификаторОбъекта КАК ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.адаптер_ТаблицаКлючей КАК адаптер_ТаблицаКлючей
	|ГДЕ
	|	адаптер_ТаблицаКлючей.Идентификатор = &Идентификатор
	|	И адаптер_ТаблицаКлючей.ПолноеИмяОбъектаМетаданных = &ПолноеИмяОбъектаМетаданных";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИдентификаторОбъекта;
	Иначе
		Возврат Идентификатор;
	КонецЕсли;
	
КонецФункции

Функция СсылкаНаКлассификатор(СтруктураОбъекта, ИмяКлюча, ЗначениеКлюча = Неопределено, ТекстДополнительногоУсловия = "ИСТИНА") Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = адаптер_РаботаСДаннымиИБ.НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта);
	
	Если ЗначениеЗаполнено(Ссылка)
		И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ИЗ
	|	" + СтруктураОбъекта.ПолноеИмя + " КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных." + ИмяКлюча + " = &" + ИмяКлюча + "
	|	И " + ТекстДополнительногоУсловия + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДанных.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если ЗначениеКлюча = Неопределено Тогда
		Запрос.УстановитьПараметр(ИмяКлюча, СокрЛП(СтруктураОбъекта[ИмяКлюча]));
	Иначе
		Запрос.УстановитьПараметр(ИмяКлюча, ЗначениеКлюча);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьВОбъектеСтрокуКонтактнойИнформации(Объект, ТипКИ, ВидКИ, ЗначенияПолейКИ, ПостфиксПолейКИ = "") Экспорт
	
	ЗначенияПолей = Новый Структура;
	
	Если ВидКИ = Справочники.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагента
		Или ВидКИ = Справочники.ВидыКонтактнойИнформации.МеждународныйАдресОрганизации
		Или ВидКИ = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица Тогда
		
		ЗначенияПолей.Вставить("Представление", ЗначенияПолейКИ["Представление" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("Страна", ЗначенияПолейКИ["Поле1" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("КодСтраны", "");
		ЗначенияПолей.Вставить("Индекс", "");
		ЗначенияПолей.Вставить("Регион", "");
		ЗначенияПолей.Вставить("КодРегиона", "");
		ЗначенияПолей.Вставить("РегионСокращение", "");
		ЗначенияПолей.Вставить("Район", "");
		ЗначенияПолей.Вставить("РайонСокращение", "");
		ЗначенияПолей.Вставить("Город", "");
		ЗначенияПолей.Вставить("ГородСокращение", "");
		ЗначенияПолей.Вставить("НаселенныйПункт", "");
		ЗначенияПолей.Вставить("НаселенныйПунктСокращение", "");
		ЗначенияПолей.Вставить("Улица", "");
		ЗначенияПолей.Вставить("УлицаСокращение", "");
		ЗначенияПолей.Вставить("ТипДома", "");
		ЗначенияПолей.Вставить("Дом", "");
		ЗначенияПолей.Вставить("ТипКорпуса", "");
		ЗначенияПолей.Вставить("Корпус", "");
		ЗначенияПолей.Вставить("ТипКвартиры", "");
		ЗначенияПолей.Вставить("Квартира", "");
		ЗначенияПолей.Вставить("Комментарий", ЗначенияПолейКИ["Комментарий" + ПостфиксПолейКИ]);
		
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		
		ЗначенияПолей.Вставить("Представление", ЗначенияПолейКИ["Представление" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("Страна", "РОССИЯ");
		ЗначенияПолей.Вставить("КодСтраны", "643");
		ЗначенияПолей.Вставить("Индекс", ЗначенияПолейКИ["Поле1" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("Регион", ЗначенияПолейКИ["Поле2" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("КодРегиона", "");
		ЗначенияПолей.Вставить("РегионСокращение", "");
		ЗначенияПолей.Вставить("Район", ЗначенияПолейКИ["Поле3" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("РайонСокращение", "");
		ЗначенияПолей.Вставить("Город", ЗначенияПолейКИ["Поле4" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("ГородСокращение", "");
		ЗначенияПолей.Вставить("НаселенныйПункт", ЗначенияПолейКИ["Поле5" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("НаселенныйПунктСокращение", "");
		ЗначенияПолей.Вставить("Улица", ЗначенияПолейКИ["Поле6" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("УлицаСокращение", "");
		
		Если ЗначениеЗаполнено(ЗначенияПолейКИ["ТипДома" + ПостфиксПолейКИ])
			И ЗначениеЗаполнено(ЗначенияПолейКИ["ТипДома" + ПостфиксПолейКИ].ЗначениеПеречисления) Тогда
			ЗначенияПолей.Вставить("ТипДома", ЗначенияПолейКИ["ТипДома" + ПостфиксПолейКИ].ЗначениеПеречисления);
		Иначе
			ЗначенияПолей.Вставить("ТипДома", "");
		КонецЕсли;
		
		ЗначенияПолей.Вставить("Дом", ЗначенияПолейКИ["Поле7" + ПостфиксПолейКИ]);
		
		Если ЗначениеЗаполнено(ЗначенияПолейКИ["ТипКорпуса" + ПостфиксПолейКИ])
			И ЗначениеЗаполнено(ЗначенияПолейКИ["ТипКорпуса" + ПостфиксПолейКИ].ЗначениеПеречисления) Тогда
			ЗначенияПолей.Вставить("ТипКорпуса", ЗначенияПолейКИ["ТипКорпуса" + ПостфиксПолейКИ].ЗначениеПеречисления);
		Иначе
			ЗначенияПолей.Вставить("ТипКорпуса", "");
		КонецЕсли;
		
		ЗначенияПолей.Вставить("Корпус", ЗначенияПолейКИ["Поле8" + ПостфиксПолейКИ]);
		
		Если ЗначениеЗаполнено(ЗначенияПолейКИ["ТипКвартиры" + ПостфиксПолейКИ])
			И ЗначениеЗаполнено(ЗначенияПолейКИ["ТипКвартиры" + ПостфиксПолейКИ].ЗначениеПеречисления) Тогда
			ЗначенияПолей.Вставить("ТипКвартиры", ЗначенияПолейКИ["ТипКвартиры" + ПостфиксПолейКИ].ЗначениеПеречисления);
		Иначе
			ЗначенияПолей.Вставить("ТипКвартиры", "");
		КонецЕсли;
		
		ЗначенияПолей.Вставить("Квартира", ЗначенияПолейКИ["Поле9" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("Комментарий", ЗначенияПолейКИ["Комментарий" + ПостфиксПолейКИ]);
		
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		
		ЗначенияПолей.Вставить("Представление", ЗначенияПолейКИ["Представление" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("КодСтраны", ЗначенияПолейКИ["Поле1" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("КодГорода", ЗначенияПолейКИ["Поле2" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("НомерТелефона", ЗначенияПолейКИ["Поле3" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("Добавочный", ЗначенияПолейКИ["Поле4" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("Комментарий", ЗначенияПолейКИ["Комментарий" + ПостфиксПолейКИ]);
		
	Иначе  
		
		ЗначенияПолей.Вставить("Представление", ЗначенияПолейКИ["Представление" + ПостфиксПолейКИ]);
		ЗначенияПолей.Вставить("Комментарий", ЗначенияПолейКИ["Комментарий" + ПостфиксПолейКИ]);
		
	КонецЕсли;
	
	ДанныеЗаполнения = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
	
	СтрокаЗаполнения = ДанныеЗаполнения.Добавить();
	СтрокаЗаполнения.Вид = ВидКИ;
	СтрокаЗаполнения.Тип = ТипКИ;
	СтрокаЗаполнения.ЗначенияПолей = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзJSONВXML(
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(ЗначенияПолей, ВидКИ), ТипКИ);
	СтрокаЗаполнения.Представление = ЗначенияПолей.Представление;
	
	УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(Объект, ДанныеЗаполнения);
	
КонецПроцедуры

Функция ОбщийМодульИнтеграции(ИмяМетаданных, ПолноеИмя) Экспорт
	
	Если ПолноеИмя Тогда
		ИмяМетаданныхБезПрефиксаИмен = СтрокаБезПрефиксаИмен(Сред(ИмяМетаданных, СтрНайти(ИмяМетаданных, ".") + 1));
	Иначе
		ИмяМетаданныхБезПрефиксаИмен = СтрокаБезПрефиксаИмен(ИмяМетаданных);
	КонецЕсли;
	
	Модуль = ОбщегоНазначения.ОбщийМодуль(СтрШаблон("бг_%1Интеграция", ИмяМетаданныхБезПрефиксаИмен));
	
	Возврат Модуль;
	
КонецФункции

Процедура бг_ПроверкаСоответствияНоменклатурыОрганизациямПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Организация = Источник.Организация;
	НоменклатураТоваров = Источник.Товары.ВыгрузитьКолонку("Номенклатура");
	
	Если НоменклатураТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	бг_СоответствиеНоменклатурыОрганизациям.Номенклатура.Представление КАК НоменклатураПредставление
		|ИЗ
		|	РегистрСведений.бг_СоответствиеНоменклатурыОрганизациям КАК бг_СоответствиеНоменклатурыОрганизациям
		|ГДЕ
		|	бг_СоответствиеНоменклатурыОрганизациям.Номенклатура В(&Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	бг_СоответствиеНоменклатурыОрганизациям.Номенклатура,
		|	бг_СоответствиеНоменклатурыОрганизациям.Номенклатура.Представление
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(ВЫБОР
		|				КОГДА бг_СоответствиеНоменклатурыОрганизациям.Организация = &Организация
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бг_СоответствиеНоменклатурыОрганизациям.Номенклатура.Представление КАК НоменклатураПредставление
		|ИЗ
		|	РегистрСведений.бг_СоответствиеНоменклатурыОрганизациям КАК бг_СоответствиеНоменклатурыОрганизациям
		|ГДЕ
		|	бг_СоответствиеНоменклатурыОрганизациям.Номенклатура В(&Номенклатура)";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", НоменклатураТоваров);
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ОбщегоНазначения.СообщитьПользователю(
	СтрШаблон(НСтр("ru = 'В %1 несоответствие номенклатуры организации:'"), Источник),
	Источник.Ссылка,,,
	Отказ
	);
	
	ОбщегоНазначения.СообщитьПользователю(Символы.Таб + СтрСоединить(Результат.Выгрузить().ВыгрузитьКолонку("НоменклатураПредставление"), Символы.ПС + Символы.Таб));
	
КонецПроцедуры

Функция ОтменитьЗагрузкуОбъекта(ЗагружаемыйОбъект, СтруктураОбъекта, ИмяПоляОбменERP, ИмяПредопределенногоРодителя, СтандартнаяОбработка) Экспорт
	
	Если Не ЗагружаемыйОбъект.ЭтоНовый() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяПредопределенногоРодителя <> Неопределено
		И СтруктураОбъекта.Родитель <> Неопределено
		И СтруктураОбъекта.Родитель.ИмяПредопределенныхДанных <> ИмяПредопределенногоРодителя Тогда
		ОтменитьЗагрузкуОбъекта = Истина;
	Иначе
		
		Если ИмяПоляОбменERP = Неопределено Тогда
			ОбменERP = Неопределено;
		ИначеЕсли Не СтруктураОбъекта.Свойство(ИмяПоляОбменERP) Тогда
			ОбменERP = Неопределено;
		ИначеЕсли СтруктураОбъекта[ИмяПоляОбменERP] = Неопределено Тогда
			ОбменERP = Неопределено;
		ИначеЕсли Не ЗначениеЗаполнено(СтруктураОбъекта[ИмяПоляОбменERP].ЗначениеПеречисления) Тогда
			ОбменERP = Неопределено;
		Иначе
			ОбменERP = СтруктураОбъекта[ИмяПоляОбменERP].ЗначениеПеречисления;
		КонецЕсли;
		
		Если ОбменERP = "Выгружать" Тогда
			ОтменитьЗагрузкуОбъекта = Ложь;
		ИначеЕсли ОбменERP = "НеВыгружать" Тогда
			ОтменитьЗагрузкуОбъекта = Истина;
		ИначеЕсли СтруктураОбъекта.ПометкаУдаления Тогда
			ОтменитьЗагрузкуОбъекта = Истина;
		Иначе
			ОтменитьЗагрузкуОбъекта = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтменитьЗагрузкуОбъекта Тогда
		СтандартнаяОбработка = Ложь;
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
	КонецЕсли;
	
	Возврат ОтменитьЗагрузкуОбъекта;
	
КонецФункции

Функция СуществующиеСвойства(СтруктураСвойств, СписокСвойств) Экспорт
	
	МассивСвойств = СтрРазделить(СписокСвойств, ",", Ложь);
	
	КоличествоСвойств = МассивСвойств.Количество();
	
	Для НомерПоПорядку = 1 По КоличествоСвойств Цикл
		
		Если Не СтруктураСвойств.Свойство(СокрЛП(МассивСвойств[КоличествоСвойств - НомерПоПорядку])) Тогда
			МассивСвойств.Удалить(КоличествоСвойств - НомерПоПорядку);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСвойств, ",");
	
КонецФункции

Функция СуммаСписков(Список1, Список2, ВключатьПустые) Экспорт
	
	Если ЗначениеЗаполнено(Список1)
		И ЗначениеЗаполнено(Список2) Тогда
		Списки = Список1 + "," + Список2;
	ИначеЕсли ЗначениеЗаполнено(Список1) Тогда
		Списки = Список1;
	ИначеЕсли ЗначениеЗаполнено(Список2) Тогда
		Списки = Список2;
	Иначе
		Возврат "";
	КонецЕсли;
	
	МассивСДублями = СтрРазделить(Списки, ",", ВключатьПустые);
	
	Для НомерПоПорядку = 1 По МассивСДублями.Количество() Цикл
		МассивСДублями[НомерПоПорядку - 1] = СокрЛП(МассивСДублями[НомерПоПорядку - 1]);
	КонецЦикла;
	
	МассивБезДублей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСДублями);
	
	Возврат СтрСоединить(МассивБезДублей, ",");
	
КонецФункции

Функция ТекстЗапросаБезОбращенияЧерезТочкуКNull(ТекстЗапроса) Экспорт
	
	Возврат ТекстЗапроса;

	// Конструкции вида "NULL.Наименование КАК ..." должны быть преобразованы просто в "NULL КАК ...".
	НачальнаяПозицияНевернойКонструкции = СтрНайти(ТекстЗапроса, "NULL.");
	
	Пока НачальнаяПозицияНевернойКонструкции > 0 Цикл
		
		КонечнаяПозицияНевернойКонструкции = СтрНайти(ТекстЗапроса, " КАК",, НачальнаяПозицияНевернойКонструкции);
		
		Если КонечнаяПозицияНевернойКонструкции > 0 Тогда
			
			ДлинаНевернойКонструкции = КонечнаяПозицияНевернойКонструкции - НачальнаяПозицияНевернойКонструкции;
			
			Если ДлинаНевернойКонструкции > 5 Тогда
				
				НевернаяКонструкция = Сред(ТекстЗапроса, НачальнаяПозицияНевернойКонструкции, ДлинаНевернойКонструкции);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, НевернаяКонструкция, "NULL");
				
				НачальнаяПозицияНевернойКонструкции = СтрНайти(ТекстЗапроса, "NULL.");
				
			Иначе
				Прервать; // Непредвиденный формат запроса, избегаем зацикливания.
			КонецЕсли;
		Иначе
			Прервать; // Непредвиденный формат запроса, избегаем зацикливания.
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ЗарегистрироватьИсходящееСообщениеПриЗаписи(Источник, ДополнительныеСвойства = Неопределено, НастройкиВыгрузки = Неопределено) Экспорт
	
	Перем адаптер_ИсходящиеСообщения; // Используется объект из расширения БИТ.MDT
	адаптер_ИсходящиеСообщения = ОбщегоНазначения.ОбщийМодуль("Справочники.адаптер_ИсходящиеСообщения");
	
	УстановитьПривилегированныйРежим(Истина);
	адаптер_ИсходящиеСообщения.ЗарегистрироватьИсходящееСообщениеПриЗаписи(Источник, ДополнительныеСвойства, НастройкиВыгрузки);
	
КонецПроцедуры		

Функция ЗначениеПеречислениеВСтруктуру(Знач ЗначениеПеречисления) Экспорт
	
	ДанныеПеречисления = Новый Структура();
	
	Если ЗначениеЗаполнено(ЗначениеПеречисления) 
		И Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеПеречисления)) Тогда
		
		МетаданныеПеречисления = ЗначениеПеречисления.Метаданные();
		ИндексЗначения = Перечисления[МетаданныеПеречисления.Имя].Индекс(ЗначениеПеречисления);
		
		ТекстЗначениеПеречисления = МетаданныеПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;
		ДанныеПеречисления.Вставить("ЗначениеПеречисления", ТекстЗначениеПеречисления);
		
	КонецЕсли;
	
	Возврат ДанныеПеречисления;
	
КонецФункции

Функция МаксимальноеЗначениеСтроковогоРеквизитаСправочника(Ссылка, ИмяСправочника, ИмяРеквизита) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДанных." + ИмяРеквизита + ") КАК МаксимальноеЗначение
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка <> &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МаксимальноеЗначение;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ИнкрементированнаяСтрока(Строка, МаксимальнаяДлина) Экспорт
	
	Если ЗначениеЗаполнено(Строка) Тогда
		
		СокрЛПСтрока = СокрЛП(Строка);
		ДлинаСокрЛПСтроки = СтрДлина(СокрЛПСтрока);
		
		ПозицияПервойЦифры = Неопределено;
		
		Для ПорядковыйНомер = 1 По ДлинаСокрЛПСтроки Цикл
			
			Символ = Сред(СокрЛПСтрока, ДлинаСокрЛПСтроки - ПорядковыйНомер, 1);
			
			Если Символ >= "0"
				И Символ <= "9" Тогда
				ПозицияПервойЦифры = ДлинаСокрЛПСтроки - ПорядковыйНомер;
			Иначе
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПозицияПервойЦифры = Неопределено Тогда
			Префикс = СокрЛПСтрока;
			ИнкрементированноеЧисло = Неопределено;
			ОграниченнаяМаксимальнаяДлина = 0;
		ИначеЕсли ПозицияПервойЦифры = 0 Тогда
			Префикс = "";
			ИнкрементированноеЧисло = Число(СокрЛПСтрока) + 1;
			ОграниченнаяМаксимальнаяДлина = ДлинаСокрЛПСтроки;
		Иначе
			Префикс = Лев(СокрЛПСтрока, ПозицияПервойЦифры - 1);
			ИнкрементированноеЧисло = Число(Сред(СокрЛПСтрока, ПозицияПервойЦифры)) + 1;
			ОграниченнаяМаксимальнаяДлина = ДлинаСокрЛПСтроки - ПозицияПервойЦифры + 1;
		КонецЕсли;
		
	Иначе
		Префикс = "";
		ИнкрементированноеЧисло = 1;
		ОграниченнаяМаксимальнаяДлина = МаксимальнаяДлина;
	КонецЕсли;
	
	Если ИнкрементированноеЧисло = Неопределено Тогда
		ИнкрементированнаяСтрока = Префикс;
	Иначе
		
		МаксимальноеЧисло = 1;
		
		Для ПорядковыйНомер = 1 По ОграниченнаяМаксимальнаяДлина Цикл
			МаксимальноеЧисло = МаксимальноеЧисло * 10;
		КонецЦикла;
		
		МаксимальноеЧисло = МаксимальноеЧисло - 1;
		
		ИнкрементированноеЧисло = Мин(ИнкрементированноеЧисло, МаксимальноеЧисло);
		ИнкрементированнаяСтрока = Префикс + Формат(ИнкрементированноеЧисло, "ЧЦ=" + Формат(ОграниченнаяМаксимальнаяДлина, "ЧГ=") + "; ЧВН=; ЧГ=");
		
	КонецЕсли;
	
	Возврат ИнкрементированнаяСтрока;
	
КонецФункции

Процедура ПередЗаписьюСправочникаНСИ(Отказ, Объект) Экспорт
	
	Объект.Наименование = СтрокаБезЛишнихСимволов(Объект.Наименование);
	
	Если Объект.Метаданные().Иерархический
		И Объект.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		ЕстьГруппы = Истина;
		ЭтоГруппа = Объект.ЭтоГруппа;
	Иначе
		ЕстьГруппы = Ложь;
		ЭтоГруппа = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		ТекстИсключения = НСтр("ru = 'Поле ""Наименование"" не заполнено';
								|en = '""Title"" is required'");
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если Не Отказ
		И Не Объект.ПометкаУдаления
		И Не ЭтоГруппа
		И Не НаименованиеУникально(Объект, ЕстьГруппы) Тогда
		
		ТекстИсключения = НСтр("ru = 'Значение поля ""Наименование"" не уникально';
								|en = 'Value of field ""Title"" is not unique'");
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, имеется ли указанное свойство с заполненным значением в проверяемой структуре.
//
// Параметры:
//  ПроверяемаяСтруктура - Структура - Проверяемая структура
//  ИмяСвойства          - Строка - Ключ для поиска свойства
//
// Возвращаемое значение:
//  Булево - Истина, в проверяемой структуре есть свойство и значение свойства заполнено.
//           Ложь, в проверяемой структуре нет свойства или значение свойства не заполнено.  
//
Функция ЕстьЗаполненноеСвойствоВСтруктуре(ПроверяемаяСтруктура, ИмяСвойства) Экспорт
	
	Возврат ПроверяемаяСтруктура.Свойство(ИмяСвойства) И ЗначениеЗаполнено(ПроверяемаяСтруктура[ИмяСвойства]);
	
КонецФункции

// Дополняет текст сообщения, сообщениями, которые еще не были выведены пользователю.
// 
//  Параметры;
//   ТекстСообщения - Строка - Текст сообщения, который надо дополнить. 
//
Процедура ДополнитьТекстСообщениямиПользователю(ТекстСообщения) Экспорт 
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Сообщение Из Сообщения Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + Сообщение.Текст;
	КонецЦикла;
	
КонецПроцедуры

// Создает объект ОписаниеТипов, содержащий тип кода номенклатуры контрагентов.
// Используется в алгоритмах сопоставления номенклатуры контрагентов и номенклатуры ИБ.
// Например, при загрузке заказов клиентов. Строка 18 символов, так как это максимальная,
// известная на данный момент, длина кода номенклатуры контрагентов (Код номенклатуры SAP).
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Строка 18 символов.
//
Функция ОписаниеТипаКодНоменклатурыКонтрагента() Экспорт
	
	ДлинаКолаНоменклатурыКонтрагента = 18;
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаКолаНоменклатурыКонтрагента));
	
КонецФункции

// Возвращает имя перечисления из структуры объекта.
// Применяется, если надо получить из загружаемого объекта значение перечисления
// типа, которого нет в приемнике. 
//
// Параметры:
//  СтруктураОбъекта - Структура - Структура загружаемого объекта
//  ИмяСвойства      - Строка - Ключ для поиска свойства
//
// Возвращаемое значение:
//  Строка - Значение перечисления из структуры объекта.  
//
Функция ЗначениеПеречисленияИзСтруктурыОбъекта(СтруктураОбъекта, ИмяСвойства) Экспорт

	ЗначениеПеречисления = "";
	
	ЗначениеСвойства = Неопределено;
	СтруктураОбъекта.Свойство(ИмяСвойства, ЗначениеСвойства);
	
	Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
		И ЗначениеСвойства.Свойство("ЗначениеПеречисления") Тогда
		ЗначениеПеречисления = ЗначениеСвойства.ЗначениеПеречисления;	
	КонецЕсли;
	
	Возврат ЗначениеПеречисления;
	
КонецФункции

// Возвращает строку без символов переноса строки.
// Применяется, если надо получить из исходной строки, строку с удаленными символами переноса строки.
// Например, чтобы получить длинный текст сообщения. 
//
// Параметры:
//  ИсходнаяСтрока - Строка - Исходная строка, из которой будут удалены символы переноса строки.
//
// Возвращаемое значение:
//  Строка - Строка без символов переноса строки.  
//
Функция СтрокаБезСимволовПереноса(ИсходнаяСтрока) Экспорт

	Возврат СтрЗаменить(ИсходнаяСтрока, Символы.ПС, "");

КонецФункции

// Функция возвращает изменения документа, относительно записанного в базе
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, изменение которого необходимо проанализировать
// 	ПроверяемыеРеквизиты - Структура - Структура имен реквизитов, изменение которых требуется проверять
// 	ПроверяемыеТабличныеЧасти - Структура - Структура имен табличных частей, изменение которых требуется проверять.
//
// Возвращаемое значение:
// 	Структура - Содержит изменения объекта:
// 				* Реквизиты - ТаблицаЗначений - Таблица измененных реквизитов:
//	                                              * Имя - Строка - 
//	                                              * НовоеЗначение - Произвольный -
//											      * СтароеЗначение - Произвольный - 
// 				* ТабличныеЧасти - Структура - Изменные табличные части
Функция ИзмененияОбъекта(Объект, ПроверяемыеРеквизиты = Неопределено,
	ПроверяемыеТабличныеЧасти = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	Если ПроверяемыеРеквизиты = Неопределено Тогда
		ПроверяемыеРеквизиты = Новый Структура;
	КонецЕсли;
	
	Если ПроверяемыеТабличныеЧасти = Неопределено Тогда
		ПроверяемыеТабличныеЧасти = Новый Структура;
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Метаданные(); 
	
	ПолноеИмя = МетаданныеДокумента.ПолноеИмя();
	
	ТабличныеЧастиДокумента = Новый Структура;
	Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если СтрНайти(ТабличнаяЧасть.Имя, "Удалить") = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если Не ПроверяемыеТабличныеЧасти.Свойство(ТабличнаяЧасть.Имя) Тогда
			Продолжить;
		КонецЕсли;
		РеквизитыТабличнойЧасти = Новый Структура;
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			РеквизитыТабличнойЧасти.Вставить(Реквизит.Имя);
		КонецЦикла;
		ТабличныеЧастиДокумента.Вставить(ТабличнаяЧасть.Имя, РеквизитыТабличнойЧасти);
	КонецЦикла;
	
	ТекстЗапроса= "ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка";
		ШаблонРеквизит = ",
		|	Таблица.%1 КАК %1";
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонРеквизит, Реквизит.Ключ); 
	КонецЦикла;
	
	ШаблонПоместить = "
	|ИЗ
	|	%1 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|";
	ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонПоместить, ПолноеИмя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий(); 
	
	ТаблицаИзмененныхРеквизитов = Новый ТаблицаЗначений;
	ТаблицаИзмененныхРеквизитов.Колонки.Добавить("Имя");
	ТаблицаИзмененныхРеквизитов.Колонки.Добавить("НовоеЗначение");
	ТаблицаИзмененныхРеквизитов.Колонки.Добавить("СтароеЗначение");
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если Выборка[Реквизит.Ключ] <> Объект[Реквизит.Ключ] Тогда
			НоваяСтрока = ТаблицаИзмененныхРеквизитов.Добавить();
			НоваяСтрока.Имя = Реквизит.Ключ;
			НоваяСтрока.НовоеЗначение = Объект[Реквизит.Ключ];
			НоваяСтрока.СтароеЗначение = Выборка[Реквизит.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаИзмененныхРеквизитов.Количество() > 0 Тогда
		Результат.Вставить("Реквизиты", ТаблицаИзмененныхРеквизитов);
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДокумента Цикл
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки";
		ШаблонРеквизит = ",
		|	Таблица.%1 КАК %1";
		Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
			ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонРеквизит, Реквизит.Ключ);
		КонецЦикла;
		
		ШаблонПоместить = "
		|ПОМЕСТИТЬ НоваяТаблица%1
		|ИЗ
		|	&%1 КАК Таблица
		|;
		|
		|////////////////////////////
		|";
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(ШаблонПоместить, ТабличнаяЧасть.Ключ);
		
		ТекстОбъединенияНовая =
		"ВЫБРАТЬ
		|	Таблица.НомерСтроки КАК НомерСтроки";
		
		ТекстОбъединенияСтарая =
		"ВЫБРАТЬ
		|	-Таблица.НомерСтроки КАК НомерСтроки";
		
		ШаблонРеквизит = ",
		|	Таблица.%1 КАК %1";
		Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
			ТекстОбъединенияНовая  = ТекстОбъединенияНовая + СтрШаблон(ШаблонРеквизит, Реквизит.Ключ);
			ТекстОбъединенияСтарая = ТекстОбъединенияСтарая + СтрШаблон(ШаблонРеквизит, Реквизит.Ключ);
		КонецЦикла;
		
		ШаблонИзНовая = "
		|ИЗ
		|	НоваяТаблица%1 КАК Таблица";
		ТекстОбъединенияНовая = ТекстОбъединенияНовая + СтрШаблон(ШаблонИзНовая, ТабличнаяЧасть.Ключ);
		
		ШаблонИзСтарая = "
		|ИЗ
		|	%1.%2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
		ТекстОбъединенияСтарая = ТекстОбъединенияСтарая + СтрШаблон(ШаблонИзСтарая, ПолноеИмя, ТабличнаяЧасть.Ключ);
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	СУММА(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки";
		ШаблонРеквизит = ",
		|	ВложенныйЗапрос.%1 КАК %1";
		Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
			ТекстЗапроса  = ТекстЗапроса + СтрШаблон(ШаблонРеквизит, Реквизит.Ключ);
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ 
		|(" 
		+ Символы.ПС + ТекстОбъединенияНовая 
		+ Символы.ПС + " ОБЪЕДИНИТЬ ВСЕ "
		+ Символы.ПС + ТекстОбъединенияСтарая + ") КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО";
		
		ШаблонСгруппировать = "
		|	ВложенныйЗапрос.%1,";
		Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
			ТекстЗапроса  = ТекстЗапроса + СтрШаблон(ШаблонСгруппировать, Реквизит.Ключ);
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "ИСТИНА
		|ИМЕЮЩИЕ 
		|	СУММА(ВложенныйЗапрос.НомерСтроки) <> 0";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр(ТабличнаяЧасть.Ключ, Объект[ТабличнаяЧасть.Ключ]);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Если Не Результат.Свойство("ТабличныеЧасти") Тогда
				Результат.Вставить("ТабличныеЧасти", Новый Структура);
			КонецЕсли;
			Результат.ТабличныеЧасти.Вставить(ТабличнаяЧасть.Ключ, РезультатЗапроса.Выгрузить());
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Записывает ссылочный объект в ИБ в режиме загрузки данных и отключает дальнейшую запись
// стандартным обработчиком Адаптера. 
// Вызывается из переопределяемого обработчика Адаптера ЗаполнитьЗагружаемыйОбъект().
//  
//  Параметры:
//    Объект - ДокументОбъект, СправочникОбъект - загружаемый объект ссылочного типа.
//
Процедура ЗаписатьЗагружаемыйОбъектВРежимеЗагрузкиДанных(Объект) Экспорт
	
	Объект.ОбменДанными.Загрузка = Истина;
	Объект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных");
	Объект.Записать(РежимЗаписиДокумента.Запись);
	
	// Так как в режиме загрузки версии объектов не создаются, создадим версию.
	Объект.ОбменДанными.Загрузка = Ложь;
	ВерсионированиеОбъектов.ЗаписатьВерсиюОбъекта(Объект, РежимЗаписиДокумента.Запись);
	
	// Отключим запись стандартным обработчиком Адаптера. 
	Объект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
	
КонецПроцедуры

// Возвращает объект ОписаниеТипов, содержащий тип Количество - Число(15, 3).
// Используется для создания колонок таблиц значений.
//
// Параметры:
//  Неотрицательное - Булево - если Истина, то допустимый знак Неотрицательный
//
// Возвращаемое значение:
//  ОписаниеТипов - описание типа Число(15, 3).
//
Функция ОписаниеТипаКоличество(Неотрицательное = Истина) Экспорт
	
	Разрядность = 15;
	РазрядностьДробнойЧасти = 3;
	
	Если Неотрицательное Тогда
		Знак = ДопустимыйЗнак.Неотрицательный;
	Иначе
		Знак = ДопустимыйЗнак.Любой;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ОписаниеТипаЧисло(Разрядность, РазрядностьДробнойЧасти, Знак);
	
КонецФункции

// Складывает числовые значения свойства двух структур и сохраняет сумму в структуре приемнике.
//
// Параметры:
//  СтруктураПриемник - Структура - Структура, в которой надо сохранить сумму значений свойства
//  СтруктураИсточник - Структура - Структура из которой надо добавить значение свойства
//  ИмяСвойства       - Строка    - Ключ для поиска свойства
//
Процедура СуммироватьЧисловыеЗначенияСвойстваСтруктур(СтруктураПриемник, СтруктураИсточник, ИмяСвойства) Экспорт
	
	ТипЧисло = Тип("Число");
	
	Если СтруктураИсточник.Свойство(ИмяСвойства)
		И ТипЗнч(СтруктураИсточник[ИмяСвойства]) = ТипЧисло Тогда
		ЗначениеИсточник = СтруктураИсточник[ИмяСвойства];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если СтруктураПриемник.Свойство(ИмяСвойства)
		И ТипЗнч(СтруктураПриемник[ИмяСвойства]) = ТипЧисло Тогда
		ЗначениеПриемник = СтруктураПриемник[ИмяСвойства];
	Иначе
		Возврат;
	КонецЕсли;
	
	СтруктураПриемник.Вставить(ИмяСвойства, ЗначениеПриемник + ЗначениеИсточник);
	
КонецПроцедуры

// Возвращает код номенклатуры SAP по данным справочника Номенклатура контрагентов.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - ссылка на номенклатуру
//
// Возвращаемое значение:
//  Строка - код номенклатуры SAP
//
Функция КодНоменклатурыSAPПОДаннымПоставщиков(Номенклатура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивНоменклатуры", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура));
	
	бг_ИнтеграцияSAP.СоздатьВТНоменклатура(Запрос.МенеджерВременныхТаблиц, Параметры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТНоменклатура.КодДляПоискаНоменклатуры КАК КодДляПоискаНоменклатуры
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура";
	
	РезультатЗапроса = Запрос.Выполнить();
	КодНоменклатурыSAP = "";
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КодНоменклатурыSAP = Выборка.КодДляПоискаНоменклатуры;
	КонецЕсли;
	
	Возврат КодНоменклатурыSAP;
	
КонецФункции

// Возвращает организацию по переданному тикеру.
//
// Параметры:
//  Тикер - Строка - тикер (код) организации, принятый в группе компаний.
//
// Возвращаемое значение:
//  Организация - СправочникСсылка.Организации - ссылка на организацию
//
Функция ОрганизацияПоТикеру(Тикер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Тикер) Тогда
		Возврат Организация;
	КонецЕсли;
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("Тикер", Тикер);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.бг_Тикер = &Тикер";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация; 
	
КонецФункции

// Возвращает контрагента по переданному тикеру.
//
// Параметры:
//  Тикер - Строка - тикер (код) организации, принятый в группе компаний.
//
// Возвращаемое значение:
//  Организация - СправочникСсылка.Организации - ссылка на организацию
//
Функция КонтрагентПоТикеру(Тикер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Тикер) Тогда
		Возврат Контрагент;
	КонецЕсли;
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("Тикер", Тикер);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.бг_Тикер = &Тикер";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Контрагент = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Контрагент; 
	
КонецФункции

// Возвращает контрагента по переданному тикеру.
//
// Параметры:
//  КодНСИ - Строка - код НСИ товарной категории.
//
// Возвращаемое значение:
//  ТоварнаяКатегория - СправочникСсылка.ТоварныеКатегории - ссылка на товарную категорию
//
Функция ТоварнаяКатегорияПоКодуНСИ(КодНСИ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(КодНСИ) Тогда
		Возврат ТоварнаяКатегория;
	КонецЕсли;
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("КодНСИ", КодНСИ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ТоварныеКатегории.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|ГДЕ
	|	НЕ ТоварныеКатегории.ПометкаУдаления
	|	И ТоварныеКатегории.бг_КодНСИ = &КодНСИ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ТоварнаяКатегория = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТоварнаяКатегория; 
	
КонецФункции

// Возвращает ссылку на вид контактной информации.
// Если по виден не был найден по имени, то выполняется поиск по именам предопределенных элементов.
//
// Параметры:
//  ИдентификаторДляФормул - Строка - Идентификатор для формул вида контактной информации.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации
//
Функция ВидКонтактнойИнформацииПоИдентификаторуДляФормул(ИдентификаторДляФормул) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ИдентификаторДляФормул) Тогда
		Возврат ВидКИ;
	КонецЕсли;
	
	Запрос= Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторДляФормул", ИдентификаторДляФормул);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|	И ВидыКонтактнойИнформации.ИдентификаторДляФормул = &ИдентификаторДляФормул";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			ВидКИ = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидКИ; 
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаБезПрефиксаИмен(Строка)
	
	ПрефиксИмен = ПрефиксИмен();
	ДлинаПрефиксаИмен = СтрДлина(ПрефиксИмен);
	
	Если Лев(Строка, ДлинаПрефиксаИмен) = ПрефиксИмен Тогда
		Возврат Сред(Строка, ДлинаПрефиксаИмен + 1);
	Иначе
		Возврат Строка;
	КонецЕсли;
	
КонецФункции

Функция ПрефиксИмен()
	
	Возврат "бг_";
	
КонецФункции

Процедура ОтключитьНастройкиОбменаЕГАИСВПеремещеннойИнформационнойБазе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не бг_ОбщегоНазначенияСервер.ЭтоРабочаяБаза() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|ГДЕ
		|	((ВЫРАЗИТЬ(НастройкиОбменаЕГАИС.АдресУТМ КАК СТРОКА(1024))) <> """"
		|			ИЛИ НастройкиОбменаЕГАИС.ПортУТМ <> 0)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаписьРегистраСведений = РегистрыСведений.НастройкиОбменаЕГАИС.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистраСведений, Выборка);
			ЗаписьРегистраСведений.АдресУТМ = "";
			ЗаписьРегистраСведений.ПортУТМ = 0;
			ЗаписьРегистраСведений.Записать();
		КонецЦикла;
		
		Отказ = Истина;
		
		Если Выборка.Количество() > 0 Тогда
			Событие = НСтр("ru = 'Отключение обмена с ЕГАИС'");
			
			Комментарий = НСтр("ru = 'Отключен обмен с ЕГАИС. Пользователь: %1, строка подключения ИБ: %2'");
			Комментарий = СтрШаблон(Комментарий, Пользователи.ТекущийПользователь(), СтрокаСоединенияИнформационнойБазы());
			
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьНастройкиЗагрузкиДанныхСПроизводственнойЛинии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не бг_ОбщегоНазначенияСервер.ЭтоРабочаяБаза() Тогда
		
		ВыполненаОчисткаНастроек = Ложь;
		
		ИдентификаторКонстантыУдалениеФайловПослеЗагрузки = "УдалятьФайлыДанныхСПУМПослеЗагрузки";
		Если бг_КонстантыПовтИсп.ЗначениеКонстанты(ИдентификаторКонстантыУдалениеФайловПослеЗагрузки) = Истина Тогда
			Константа = Справочники.бг_ДополнительныеКонстанты.НайтиСоздатьКонстанту(
										ИдентификаторКонстантыУдалениеФайловПослеЗагрузки);
										
			РегистрыСведений.бг_ЗначенияДополнительныхКонстант.УстановитьЗначениеКонстантыБезРазреза(Константа, Ложь);
			
			ВыполненаОчисткаНастроек = Истина;
		КонецЕсли;
		
		ИдентификаторКонстантыКаталогФайлов = "КаталогФайловДанныхСПУМ";
		Если бг_КонстантыПовтИсп.ЗначениеКонстанты(ИдентификаторКонстантыКаталогФайлов) <> "" Тогда
			Константа = Справочники.бг_ДополнительныеКонстанты.НайтиСоздатьКонстанту(ИдентификаторКонстантыКаталогФайлов);
			РегистрыСведений.бг_ЗначенияДополнительныхКонстант.УстановитьЗначениеКонстантыБезРазреза(Константа, "");
			
			ВыполненаОчисткаНастроек = Истина;
		КонецЕсли;
		
		Если ВыполненаОчисткаНастроек Тогда
			Событие = НСтр("ru = 'Отключение загрузки данных СПУМ'");
			Комментарий = СтрШаблон(
					НСтр("ru = 'Отключена загрузка данных СПУМ. Пользователь: %1, строка подключения ИБ: %2'"),
					Пользователи.ТекущийПользователь(),
					СтрокаСоединенияИнформационнойБазы());
			ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Предупреждение,,, Комментарий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтрокаБезЛишнихСимволов(Строка)
	
	СтрокаБезЛишнихСимволов = СокрЛП(Строка);
	СтрокаБезЛишнихСимволов = СтрЗаменить(СтрокаБезЛишнихСимволов, Символы.НПП, "");
	СтрокаБезЛишнихСимволов = СтрЗаменить(СтрокаБезЛишнихСимволов, Символы.ПС, "");
	СтрокаБезЛишнихСимволов = СтрЗаменить(СтрокаБезЛишнихСимволов, "¶", "");
	
	Пока Найти(СтрокаБезЛишнихСимволов, "  ") <> 0 Цикл
		СтрокаБезЛишнихСимволов = СтрЗаменить(СтрокаБезЛишнихСимволов, "  ", " ");
	КонецЦикла;
	
	Возврат СтрокаБезЛишнихСимволов;
	
КонецФункции

Функция НаименованиеУникально(Объект, ЕстьГруппы)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДанных.Ссылка КАК Ссылка
	|ИЗ
	|	" + Объект.Метаданные().ПолноеИмя() + " КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка <> &Ссылка
	|	И ТаблицаДанных.Наименование = &Наименование";
	
	Если ЕстьГруппы Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И НЕ ТаблицаДанных.ЭтоГруппа";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти
