
#Область ПрограммныйИнтерфейс

// В файловом варианте запускаются дополнительные регламентные задания по порядку.
//
Процедура ОбщееЗаданиеФайловойБазы() Экспорт
	
	ВыгрузкаДанныхВоВнешнееХранилище();
	ВыгрузкаДанныхДляЧикаго();
	ЗагрузкаДанныхАСИиУ();
	ЗагрузкаДанныхСПроизводственнойЛинии();
	РегистрацияКОтправкеOrderSP();
	РегистрацияЗаказовКлиентовКОбеспечениюИОтгрузке();
    ОбработатьНоменклатуруБезЦеныУстановкаЦенНоменклатуры();
	ОбработатьНоменклатуруБезЦеныРегистрацияЦенНоменклатурыПоставщика();
	ЗакрытиеЗаказовКлиентов();
	ЗакрытиеЗаказовПоставщикам();
	ЗакрытиеДоговоровДекларацийСоответствия();
	ПовторноеАвтоСогласованиеЗаказовКлиентов();
	СинхронизацияЗависимыхДокументов();
	УдалитьОтмененныеЗаказыИзМаршрутныхЛистов();
	
	Для каждого ДанныеВариантаОбработки Из Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктивныеВарианты() Цикл
		ОбработатьОбъектыДляОтложеннойОбработки(ДанныеВариантаОбработки.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Дополняет структуру - перечень дополнительных регламентных заданий 
//
// Параметры:
//  Структура - Ключ - ключ регламентного задания, Значение - наименование регламентного задания.
// 
Процедура ДополнитьСтруктуруКлючейРегламентныхЗаданий(СтруктураКлючей) Экспорт
	
	Перем адаптер_ОбщегоНазначенияСервер;
	адаптер_ОбщегоНазначенияСервер = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбщегоНазначенияСервер");
	
	Если адаптер_ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКлючей.Вставить("бг_ЗагрузкаДанныхСПроизводственнойЛинии", 
		НСтр("ru='БЕЛУГА. Загрузка данных с производственной линии'"));
	
	СтруктураКлючей.Вставить("бг_ВыгрузкаДанныхВоВнешнееХранилище",
		НСтр("ru='БЕЛУГА. Выгрузка данных во внешнее хранилище'"));
		
	СтруктураКлючей.Вставить("бг_ЗагрузкаДанныхИзЧикаго_Алкотрейд", 
		НСтр("ru='БЕЛУГА. Загрузка данных из Чикаго (Алкотрейд)'"));
		
	СтруктураКлючей.Вставить("бг_ЗагрузкаДанныхИзЧикаго_БМ", 
		НСтр("ru='БЕЛУГА. Загрузка данных из Чикаго (БМ)'"));
		
	СтруктураКлючей.Вставить("бг_ЗагрузкаДанныхИзЧикаго_БМЗ", 
		НСтр("ru='БЕЛУГА. Загрузка данных из Чикаго (БМЗ)'"));
	
	СтруктураКлючей.Вставить("бг_ВыгрузкаДанныхДляЧикаго", 
		НСтр("ru='БЕЛУГА. Выгрузка данных для Чикаго (Алкотрейд)'"));
	
	СтруктураКлючей.Вставить("бг_ВыгрузкаДанныхДляЧикаго_БМ", 
		НСтр("ru='БЕЛУГА. Выгрузка данных для Чикаго (БМ)'"));
	
	СтруктураКлючей.Вставить("бг_ВыгрузкаДанныхДляЧикаго_БМЗ", 
		НСтр("ru='БЕЛУГА. Выгрузка данных для Чикаго (БМЗ)'"));
		
	СтруктураКлючей.Вставить("бг_ВыгрузкаДанныхДляЧикаго_Остатки_БМЗ", 
		НСтр("ru='БЕЛУГА. Выгрузка остатков товаров для Чикаго (БМЗ)'"));
		
	СтруктураКлючей.Вставить("бг_ВыгрузкаДанныхДляЧикаго_Остатки_Алкотрейд", 
		НСтр("ru='БЕЛУГА. Выгрузка остатков товаров для Чикаго (Алкотрейд)'"));

	СтруктураКлючей.Вставить("бг_ВыгрузкаДанныхДляЧикаго_Остатки_БМ", 
		НСтр("ru='БЕЛУГА. Выгрузка остатков товаров для Чикаго (БМ)'"));
		
	СтруктураКлючей.Вставить("бг_ЗагрузкаДанныхАСИиУ", 
		НСтр("ru='БЕЛУГА. Загрузка показаний приборов АСИиУ'"));
		
	СтруктураКлючей.Вставить("бг_ОчисткаИзмененийДляВыгрузкиВоВнешнееХранилище", 
		НСтр("ru='БЕЛУГА. Очистка изменений для выгрузки во внешнее хранилище'"));

	СтруктураКлючей.Вставить("бг_РегистрацияКОтправкеOrderSP", 
		НСтр("ru='БЕЛУГА. Регистрация к отправке OrderSP'"));	
		
	СтруктураКлючей.Вставить("бг_РегистрацияЗаказовКлиентовКОбеспечениюИОтгрузке", 
		НСтр("ru='БЕЛУГА. Регистрация заказов клиентов к обеспечению и отгрузке'"));	
	СтруктураКлючей.Вставить("бг_СоздатьУстановкуЦенНоменклатуры", 
		НСтр("ru='БЕЛУГА. Создание установки цен номенклатуры'"));
		
	СтруктураКлючей.Вставить("бг_СоздатьРегистрациюЦенНоменклатурыПоставщика", 
		НСтр("ru='БЕЛУГА. Создание регистрации цен поставщика'"));
		
	СтруктураКлючей.Вставить("бг_ЗакрытиеЗаказовКлиентов", 
		НСтр("ru='БЕЛУГА. Закрытие заказов клиентов'"));
		
	СтруктураКлючей.Вставить("бг_ЗакрытиеЗаказовПоставщикам", 
		НСтр("ru='БЕЛУГА. Закрытие заказов поставщикам'"));
		
	СтруктураКлючей.Вставить("бг_ЗакрытиеДоговоровДекларацийСоответствия", 
		НСтр("ru='БЕЛУГА. Закрытие договоров контрагентов/деклараций о соответствии'"));
		
	СтруктураКлючей.Вставить("бг_ПерезапускЗаданийПоОтложеннойЗаписиДвиженийМарок",
		НСтр("ru='БЕЛУГА. Перезапуск заданий по отложенной записи движений марок'"));
		
	СтруктураКлючей.Вставить("бг_ПовторноеАвтоСогласованиеЗаказовКлиентов",
		НСтр("ru='БЕЛУГА. Повторное автосогласование заказов клиентов'"));	
		
	СтруктураКлючей.Вставить("бг_ОбновитьИсторию",
		НСтр("ru='БЕЛУГА. Обновить историю'"));
		
	СтруктураКлючей.Вставить("бг_СинхронизацияЗависимыхДокументов",
		НСтр("ru='БЕЛУГА. Синхронизация зависимых документов'"));
		
	СтруктураКлючей.Вставить("бг_УдалениеОтмененныхЗаказовИзМаршрутныхЛистов",
		НСтр("ru='БЕЛУГА. Удаление отмененных заказов из маршрутных листов'"));
	
	ДополнитьСтруктуруКлючейВариантамиОтложеннойОбработкиОбъектов(СтруктураКлючей);
	
КонецПроцедуры

// Точка входа для выполнения дополнительных регламентных заданий.
//
// Параметры:
//  КлючЗадания - Строка - Ключ регламентного задания.
// 
Процедура ВыполнитьРегламентноеЗадание(КлючЗадания) Экспорт

	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() 
		Или Не бг_ОбщегоНазначенияСервер.ЭтоРабочаяБаза() Тогда 
		Возврат;
	КонецЕсли;

	Если КлючЗадания = "бг_ЗагрузкаДанныхСПроизводственнойЛинии" Тогда
		ЗагрузкаДанныхСПроизводственнойЛинии();
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхВоВнешнееХранилище" Тогда
		ВыгрузкаДанныхВоВнешнееХранилище();
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхИзЧикаго_Алкотрейд" Тогда
		ЗагрузкаДанныхИзЧикаго();
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхИзЧикаго_БМ" Тогда
		ЗагрузкаДанныхИзЧикаго();
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхИзЧикаго_БМЗ" Тогда
		ЗагрузкаДанныхИзЧикаго();
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго" Тогда
		ВыгрузкаДанныхДляЧикаго();
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_БМ" Тогда
		ВыгрузкаДанныхДляЧикаго();
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_БМЗ" Тогда
		ВыгрузкаДанныхДляЧикаго();
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_Остатки_БМЗ" Тогда
		ВыгрузкаДанныхДляЧикаго();
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_Остатки_Алкотрейд" Тогда
		ВыгрузкаДанныхДляЧикаго();
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_Остатки_БМ" Тогда
		ВыгрузкаДанныхДляЧикаго();
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхАСИиУ" Тогда
		ЗагрузкаДанныхАСИиУ();
	ИначеЕсли КлючЗадания = "бг_ОчисткаИзмененийДляВыгрузкиВоВнешнееХранилище" Тогда
		ОчисткаИзмененийДляВыгрузкиВоВнешнееХранилище();
	ИначеЕсли КлючЗадания = "бг_РегистрацияКОтправкеOrderSP" Тогда
		РегистрацияКОтправкеOrderSP();
	ИначеЕсли КлючЗадания = "бг_РегистрацияЗаказовКлиентовКОбеспечениюИОтгрузке" Тогда
		РегистрацияЗаказовКлиентовКОбеспечениюИОтгрузке();
    ИначеЕсли КлючЗадания = "бг_СоздатьУстановкуЦенНоменклатуры" Тогда
		ОбработатьНоменклатуруБезЦеныУстановкаЦенНоменклатуры();		
	ИначеЕсли КлючЗадания = "бг_СоздатьРегистрациюЦенНоменклатурыПоставщика" Тогда
		ОбработатьНоменклатуруБезЦеныРегистрацияЦенНоменклатурыПоставщика();
	ИначеЕсли КлючЗадания = "бг_ЗакрытиеЗаказовКлиентов" Тогда
		ЗакрытиеЗаказовКлиентов();
	ИначеЕсли КлючЗадания = "бг_ЗакрытиеЗаказовПоставщикам" Тогда
		ЗакрытиеЗаказовПоставщикам();
	ИначеЕсли КлючЗадания = "бг_ЗакрытиеДоговоровДекларацийСоответствия" Тогда
		ЗакрытиеДоговоровДекларацийСоответствия();
	ИначеЕсли КлючЗадания = "бг_СинхронизацияЗависимыхДокументов" Тогда
		СинхронизацияЗависимыхДокументов();
	ИначеЕсли КлючЗадания = "бг_ПерезапускЗаданийПоОтложеннойЗаписиДвиженийМарок" Тогда
		ПерезапускЗаданийПоОтложеннойЗаписиДвиженийМарок();	
	ИначеЕсли КлючЗадания = "бг_ПовторноеАвтоСогласованиеЗаказовКлиентов" Тогда
		ПовторноеАвтоСогласованиеЗаказовКлиентов();	
	ИначеЕсли КлючЗадания = "бг_ОбновитьИсторию" Тогда
		ОбновитьИсторию();	
	ИначеЕсли КлючЗадания = "бг_УдалениеОтмененныхЗаказовИзМаршрутныхЛистов" Тогда
		УдалитьОтмененныеЗаказыИзМаршрутныхЛистов();	
	ИначеЕсли СтрНачинаетсяС(КлючЗадания, Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ШапкаКлючаЗадания()) Тогда
		ВыполнитьРегламентноеЗаданиеОтложеннойОбработкиОбъектов(КлючЗадания);
	Иначе
		// NOP
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры дополнительных регламентного задания по умолчанию.
//
// Параметры:
//  КлючЗадания      - Строка - ключ регламентного задания.
//  ПараметрыЗадания - Структура, которая будет заполнена, содержит имена (ключи) и значения параметров регламентного задания. 
//                     Состав ключей см. СтруктураПараметровЗаданияПоУмолчанию(). 
//
Процедура ЗаполнитьПараметрыЗаданияПоУмолчанию(ПараметрыЗадания, КлючЗадания) Экспорт
	
	Если КлючЗадания = "бг_ЗагрузкаДанныхСПроизводственнойЛинии" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = 300;
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхВоВнешнееХранилище" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		// периодичность запуска задания: каждый день один раз в день. Время запуска 03.00
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхИзЧикаго_Алкотрейд" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхИзЧикаго_БМ" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхИзЧикаго_БМЗ" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_БМ" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_БМЗ" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_Остатки_БМЗ" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_Остатки_Алкотрейд" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_ВыгрузкаДанныхДляЧикаго_Остатки_БМ" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_ЗагрузкаДанныхАСИиУ" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = 7200;
	ИначеЕсли КлючЗадания = "бг_ОчисткаИзмененийДляВыгрузкиВоВнешнееХранилище" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		// периодичность запуска задания: каждую неделю один раз в день. Время запуска 04.00
	ИначеЕсли КлючЗадания = "бг_РегистрацияКОтправкеOrderSP" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_РегистрацияЗаказовКлиентовКОбеспечениюИОтгрузке" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
    ИначеЕсли КлючЗадания = "бг_СоздатьУстановкуЦенНоменклатуры" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_СоздатьРегистрациюЦенНоменклатурыПоставщика" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 300;
	ИначеЕсли КлючЗадания = "бг_ЗакрытиеЗаказовКлиентов" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
	ИначеЕсли КлючЗадания = "бг_ЗакрытиеЗаказовПоставщикам" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
	ИначеЕсли КлючЗадания = "бг_ЗакрытиеДоговоровДекларацийСоответствия" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = 10800;
	ИначеЕсли КлючЗадания = "бг_ПерезапускЗаданийПоОтложеннойЗаписиДвиженийМарок" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = 0;
	ИначеЕсли КлючЗадания = "бг_ПовторноеАвтоСогласованиеЗаказовКлиентов" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = 0;
	ИначеЕсли КлючЗадания = "бг_ОбновитьИсторию" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = 10800;
	ИначеЕсли КлючЗадания = "бг_СинхронизацияЗависимыхДокументов" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
	ИначеЕсли КлючЗадания = "бг_УдалениеОтмененныхЗаказовИзМаршрутныхЛистов" Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении 	  = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня 	  = 3600;
	ИначеЕсли СтрНачинаетсяС(КлючЗадания, Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ШапкаКлючаЗадания()) Тогда
		ПараметрыЗадания.ИнтервалПовтораПриАварийномЗавершении = 25;
		ПараметрыЗадания.КоличествоПовторовПриАварийномЗавершении = 3;
		ПараметрыЗадания.Расписание.ПериодПовтораВТечениеДня = 60;
	Иначе
		// NOP
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтложеннаяОбработкаОбъектов

// Дополняет структуру ключей регламентных заданий вариантами отложенной обработки объектов.
//
// Параметры:
//  СтруктураКлючей - Структура - структура ключей регламентных заданий, 
//                                ключи структуры соответствуют ключам заданий
//
Процедура ДополнитьСтруктуруКлючейВариантамиОтложеннойОбработкиОбъектов(СтруктураКлючей) Экспорт
	
	ШапкаКлючаЗадания = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ШапкаКлючаЗадания();
	ШапкаПредставленияЗадания = НСтр("ru='БЕЛУГА. Отложенная обработка объектов'");
	
	Для Каждого ДанныеВариантаОбработки Из Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктивныеВарианты() Цикл
		
		ИмяЗадания = ДанныеВариантаОбработки.Имя;
		ПредставлениеЗадания = ДанныеВариантаОбработки.Представление; 
		
		Если ДанныеВариантаОбработки.Значение =
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьЗаказыКлиентов Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НастройкиУзловИнтеграцииSAP.Организация.бг_Тикер КАК Тикер
			|ИЗ
			|	Справочник.бг_НастройкиУзловИнтеграцииSAP КАК НастройкиУзловИнтеграцииSAP
			|ГДЕ
			|	НЕ НастройкиУзловИнтеграцииSAP.ПометкаУдаления";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				// Добавляем ключ регламентного задания для каждой организации, по которой
				// настроен узел обмена SAP. Таким образом формирование заказов клиентов по заявкам
				// будет выполняться параллельно, для каждой организации в отдельном фоновом задании.
				Тикер = СокрЛП(Выборка.Тикер);
				СтруктураКлючей.Вставить(
					СтрШаблон("%1%2_%3", ШапкаКлючаЗадания, ИмяЗадания, Тикер), 
					СтрШаблон("%1. %2 (%3)", ШапкаПредставленияЗадания, ПредставлениеЗадания, Тикер));
			КонецЦикла;
		Иначе
			// Добавляем ключ регламентного задания, соответствующий варианту отложенной обработки.
			СтруктураКлючей.Вставить(
				СтрШаблон("%1%2", ШапкаКлючаЗадания, ИмяЗадания), 
				СтрШаблон("%1. %2", ШапкаПредставленияЗадания, ПредставлениеЗадания));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет регламентное задание отложенной обработки объектов.
//
Процедура ВыполнитьРегламентноеЗаданиеОтложеннойОбработкиОбъектов(КлючЗадания)
	
	ИмяВариантаОбработки = СтрЗаменить(
		КлючЗадания,
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ШапкаКлючаЗадания(),
		"");
	
	Если СтрНачинаетсяС(ИмяВариантаОбработки, "СформироватьЗаказыКлиентов") Тогда
		// Вызываем отдельную процедуру формирования заказов клиентов с указанием организации.
		ТикерОрганизации = "";
		ПозицияРазделителя = СтрНайти(ИмяВариантаОбработки, "_");
		Если ПозицияРазделителя > 0 Тогда
			ТикерОрганизации = Сред(ИмяВариантаОбработки, ПозицияРазделителя + 1);
		КонецЕсли;
		СформироватьЗаказыКлиентовПоЗаявкамКлиентов(ТикерОрганизации);
	Иначе
		// Вызываем общую для всех вариантов отложенной обработки объектов процедуру.
		ОбработатьОбъектыДляОтложеннойОбработки(
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов[ИмяВариантаОбработки]);
	КонецЕсли;
	
КонецПроцедуры

// Синхронизирует регламентные задания формирования заказов клиентов с 
// настройками узлов интеграции с SAP. 
// Вызывается из обработчиков при записи объектов, влияющих на набор
// регламентных заданий формирования заказов клиентов.
// 
Процедура СинхронизироватьРегламентныеЗаданияФормированияЗаказов() Экспорт
	
	Перем адаптер_РегламентныеЗадания, адаптер_ОбщегоНазначенияСервер, адаптер_ОбщегоНазначенияПовтИсп;    
	адаптер_РегламентныеЗадания = ОбщегоНазначения.ОбщийМодуль("адаптер_РегламентныеЗадания");
	адаптер_ОбщегоНазначенияСервер = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбщегоНазначенияСервер");
	адаптер_ОбщегоНазначенияПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбщегоНазначенияПовтИсп");
	
	Если адаптер_ОбщегоНазначенияСервер.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Удалим регламентные задания формирования заказов клиентов, которых не должно быть,
	// например, изменили организацию в настройке узла интеграции с SAP. 
	СтруктураКлючей = Новый Структура;
	бг_РегламентныеЗадания.ДополнитьСтруктуруКлючейВариантамиОтложеннойОбработкиОбъектов(СтруктураКлючей);
	
	МетаданныеЗадания = адаптер_ОбщегоНазначенияПовтИсп.МетаданныеРегламентногоЗадания();
	Если МетаданныеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", МетаданныеЗадания);
	
	// Определяем регламентные задания к удалению.
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	
	Для Каждого РегламентноеЗаданиеОбъект Из Задания Цикл
		
		КлючЗадания = РегламентноеЗаданиеОбъект.Ключ;
		Если СтрНайти(КлючЗадания, "СформироватьЗаказыКлиентов") = 0 
			Или СтруктураКлючей.Свойство(КлючЗадания) Тогда
			Продолжить;
		КонецЕсли;
		
		// Это регламентное задание формирования заказов надо удалить,
		// так как его нет в новой структуре ключей.
		Попытка
			РегламентноеЗаданиеОбъект.Удалить();
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка удаления регламентного задания %1: %2'"),
				КлючЗадания,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла; 
	
	// Создадим регламентные задания формирования заказов клиентов, которые должны быть.
	адаптер_РегламентныеЗадания.СоздатьРегламентныеЗаданияАдаптера();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРегламентныхЗаданий

Процедура ЗагрузкаДанныхСПроизводственнойЛинии()
	бг_ЗагрузкаДанныхИзФайлов.ЗагрузитьДанныеСПроизводственнойЛинии();
КонецПроцедуры

Процедура ОбработатьОбъектыДляОтложеннойОбработки(ВариантОбработки)
	РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ОбработатьОбъекты(ВариантОбработки);
КонецПроцедуры

Процедура ЗагрузкаДанныхАСИиУ()
	бг_ЗагрузкаДанныхИзФайлов.ЗагрузитьДанныеАСИиУ();
КонецПроцедуры

Процедура ЗагрузкаДанныхИзЧикаго()
	Обработки.бг_ЗагрузкаДанныхИзЧикаго.ЗагрузитьДанныеИзЧикаго();  	
КонецПроцедуры

Процедура ВыгрузкаДанныхДляЧикаго()
	Обработки.бг_ВыгрузкаДанныхДляЧикаго.ВыгрузитьДанныеДляЧикаго();  	
КонецПроцедуры

Процедура ВыгрузкаДанныхВоВнешнееХранилище()
	
	бг_ТоварыОрганизацийКВыгрузкеВХранилищеИнтеграция.ЗарегистрироватьИсходящееСообщениеВыгрузкиОстатков();	
	
КонецПроцедуры

Процедура ОчисткаИзмененийДляВыгрузкиВоВнешнееХранилище()
	
	бг_ТоварыОрганизацийКВыгрузкеВХранилищеИнтеграция.ОчиститьИзмененияДляВыгрузкиВоВнешнееХранилище();	
	
КонецПроцедуры

Процедура РегистрацияКОтправкеOrderSP()
	РегистрыСведений.бг_ОчередьЗаявокКлиентовКОтправкеOrderSP.ЗарегистрироватьИсходящиеСообщенияКОтправкеOrderSP();		
КонецПроцедуры

Процедура РегистрацияЗаказовКлиентовКОбеспечениюИОтгрузке()
	бг_ЗаказыКлиентов.ЗарегистрироватьЗаказыКлиентовКОбеспечениюИОтгрузке();
КонецПроцедуры

Процедура ОбработатьНоменклатуруБезЦеныУстановкаЦенНоменклатуры()
	Документы.УстановкаЦенНоменклатуры.бг_СоздатьУстановкуЦенНоменклатуры();
КонецПроцедуры

Процедура ОбработатьНоменклатуруБезЦеныРегистрацияЦенНоменклатурыПоставщика()
	Документы.РегистрацияЦенНоменклатурыПоставщика.бг_СоздатьРегистрациюЦенНоменклатурыПоставщика();
КонецПроцедуры

Процедура ЗакрытиеЗаказовКлиентов()
	бг_ЗакрытиеЗаказовКлиентов.ЗакрытьЗаказыКлиентов();		
КонецПроцедуры	

Процедура ЗакрытиеЗаказовПоставщикам()
	бг_ЗакрытиеЗаказовПоставщикам.ЗакрытьЗаказыПоставщикам();	
КонецПроцедуры

Процедура ЗакрытиеДоговоровДекларацийСоответствия()
	бг_ЗакрытиеДоговоровДекларацийСоответствия.ЗакрытьДоговораДекларацииСоответствия();
КонецПроцедуры

Процедура ПовторноеАвтоСогласованиеЗаказовКлиентов()
	РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ПовторноеАвтоСогласование();		
КонецПроцедуры	

Процедура ОбновитьИсторию()
	ИсторияДанных.ОбновитьИсторию();
КонецПроцедуры	

Процедура СинхронизацияЗависимыхДокументов()
	бг_Факторинг.СинхронизироватьЗависимыеДокументы();
КонецПроцедуры

Процедура СформироватьЗаказыКлиентовПоЗаявкамКлиентов(ТикерОрганизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТикерОрганизации", ТикерОрганизации);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.бг_Тикер = &ТикерОрганизации";
	
	Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	бг_ОбъектыДляОтложеннойОбработки.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.бг_ОбъектыДляОтложеннойОбработки КАК бг_ОбъектыДляОтложеннойОбработки
	|ГДЕ
	|	бг_ОбъектыДляОтложеннойОбработки.ВариантОбработки = &ВариантОбработки
	|	И бг_ОбъектыДляОтложеннойОбработки.КоличествоПопыток < &МаксимальноеЧислоПопыток
	|	И ВЫРАЗИТЬ(бг_ОбъектыДляОтложеннойОбработки.Объект КАК Документ.битЗаявкаКлиента).Организация В (&Организации)
	|
	|УПОРЯДОЧИТЬ ПО
	|	бг_ОбъектыДляОтложеннойОбработки.Приоритет";                    
	
	ВариантОбработки = Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьЗаказыКлиентов;
	Запрос.УстановитьПараметр("ВариантОбработки", ВариантОбработки);
	Запрос.УстановитьПараметр(
		"МаксимальноеЧислоПопыток",
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.МаксимальноеЧислоПопыток(ВариантОбработки));
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл  
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ОбработатьОбъект(Выборка.Объект, ВариантОбработки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезапускЗаданийПоОтложеннойЗаписиДвиженийМарок()

	бг_ОтложеннаяОбработкаДвиженийМарок.ПерезапуститьУпавшиеЗаданияПоОтложеннойЗаписиДвиженийМарок();
	
КонецПроцедуры

Процедура УдалитьОтмененныеЗаказыИзМаршрутныхЛистов()
	СекундВСутках = 86400;
	НачалоПериода = НачалоДня(ТекущаяДатаСеанса()) + СекундВСутках;
	
	Обработки.бг_ФормированиеМаршрутныхЛистов.УдалитьОтмененныеЗаказыИзМаршрутныхЛистов(, НачалоПериода);	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 