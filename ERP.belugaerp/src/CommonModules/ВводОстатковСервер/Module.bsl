#Область ПрограммныйИнтерфейс
#Область ПереопределяемыеПроцедуры
	
&Вместо("СформироватьДокументыВводаОстатковПоДаннымОперативногоУчета")
Процедура бг_СформироватьДокументыВводаОстатковПоДаннымОперативногоУчета(Параметры, АдресХранилища) Экспорт
	
	ДатаВвода                       = Неопределено;
	ОтражатьВБУиНУ                  = Ложь;
	ОтражатьВУУ                     = Ложь;
	СозданныеДокументыВводаОстатков = Новый Массив;
	
	Если Параметры.Свойство("ДатаВвода") Тогда
		ДатаВвода = Параметры.ДатаВвода;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаВвода) Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтражатьВБУиНУ") Тогда
		ОтражатьВБУиНУ = Параметры.ОтражатьВБУиНУ;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтражатьВУУ") Тогда
		ОтражатьВУУ = Параметры.ОтражатьВУУ;
	КонецЕсли;
	
	Если Не ОтражатьВБУиНУ И Не ОтражатьВУУ Тогда
		Возврат;
	КонецЕсли;

	ПараметрыЗаполненияОстатков = Новый Структура;
	ПараметрыЗаполненияОстатков.Вставить("ОтражатьВБУиНУ", ОтражатьВБУиНУ);
	ПараметрыЗаполненияОстатков.Вставить("ОтражатьВУУ", ОтражатьВУУ);
	
	Если Параметры.Свойство("МассивХозяйственныхОпераций") Тогда
		ДоступныеХозяйственныеОперации = Параметры.МассивХозяйственныхОпераций;
	Иначе
		ПараметрыОтбораХозяйственныхОпераций = ИнициализироватьПараметрыОтбораДоступныхХозяйственныхОпераций();
		ДоступныеХозяйственныеОперации       = ДоступныеХозяйственныеОперации(ПараметрыОтбораХозяйственныхОпераций);
	КонецЕсли;
	
	Организации = Новый Массив;
	
	Если Не Параметры.Свойство("Организации", Организации) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Организации.Ссылка КАК Организация
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	НЕ Организации.ПометкаУдаления
			|	И (&Организации = НЕОПРЕДЕЛЕНО
			|			ИЛИ Организации.Ссылка В (&Организации))
			|	И (Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
			|			ИЛИ &УчитыватьУпрОрганизацию)");
		
		Запрос.УстановитьПараметр("Организации",                            Организации);
		Запрос.УстановитьПараметр("УчитыватьУпрОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
		
		Организации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
		
	КонецЕсли;

	НомерПоПорядку = 0;
	ВсегоОбъектов  = ДоступныеХозяйственныеОперации.Количество();
	
	Для Каждого ХозяйственнаяОперация Из ДоступныеХозяйственныеОперации Цикл
		
		НомерПоПорядку    = НомерПоПорядку + 1;
		ПроцентВыполнения = Окр(100 * НомерПоПорядку / ВсегоОбъектов);
		
		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения);
		
		ДокументВводаОстатков                      = ОпределитьДокументПоХозяйственнойОперации(ХозяйственнаяОперация);
		ДокументОтражаетсяВРегламентированномУчете = ДокументОтражаетсяВРегламентированномУчете(ДокументВводаОстатков);
		
		Если Не ДокументОтражаетсяВРегламентированномУчете Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерДокумента              = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ДокументВводаОстатков).ПолноеИмя());
		ОстаткиПоХозяйственнойОперации = МенеджерДокумента.ОстаткиПоТипуОперации(ДатаВвода, ХозяйственнаяОперация, Организации,, ПараметрыЗаполненияОстатков);
		ПоляСравнения                  = МенеджерДокумента.КлючевыеПоляРеглУчетаПоТипуОперации(ХозяйственнаяОперация);
		
		Если ОстаткиПоХозяйственнойОперации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументВводаНачальныхОстатков = Неопределено; // ДокументОбъект
		
		Для Каждого СтрокаТаблицы Из ОстаткиПоХозяйственнойОперации Цикл
			
			Если КлючевыеПоляОтличаются(ДокументВводаНачальныхОстатков, СтрокаТаблицы, ПоляСравнения) Тогда
				
				Если Не ДокументВводаНачальныхОстатков = Неопределено Тогда
					ДокументВводаНачальныхОстатков.Записать(РежимЗаписиДокумента.Запись);
					СозданныеДокументыВводаОстатков.Добавить(ДокументВводаНачальныхОстатков.Ссылка);
				КонецЕсли;
				
				ДокументВводаНачальныхОстатков = МенеджерДокумента.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокументВводаНачальныхОстатков, СтрокаТаблицы);
				
				ДанныеЗаполнения = ИнициализироватьЗначенияЗаполненияДокументаВводОстатков();
				ДанныеЗаполнения.Дата           = ДатаВвода;
				ДанныеЗаполнения.Ответственный  = Пользователи.ТекущийПользователь();
				ДанныеЗаполнения.ОтражатьВБУиНУ = ОтражатьВБУиНУ;
				ДанныеЗаполнения.ОтражатьВУУ    = ОтражатьВУУ;
				ДанныеЗаполнения.Комментарий    = НСтр("ru = '#Ввод остатков по данным оперативного учета.';
														|en = '#Enter balance by operational accounting data.'");
// Вставка
				Если ТипЗнч(ДокументВводаНачальныхОстатков) = Тип("ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде") Тогда
					Продолжить;
				КонецЕсли;				
// КонецВставки
				ЗаполнитьЗначенияСвойств(ДокументВводаНачальныхОстатков, ДанныеЗаполнения, , "ХозяйственнаяОперация, Организация");
				
				ТабличнаяЧастьДокумента   = СтрокаТаблицы.ЗаполняемаяТабличнаяЧасть;
				ЗаполняемаяТабличнаяЧасть = ДокументВводаНачальныхОстатков[ТабличнаяЧастьДокумента]; //ТабличнаяЧасть
				
			КонецЕсли;
			
			СтрокаТабличнойЧасти = ЗаполняемаяТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТаблицы);
			
		КонецЦикла;
		
		Если Не ДокументВводаНачальныхОстатков = Неопределено Тогда
			ДокументВводаНачальныхОстатков.Записать(РежимЗаписиДокумента.Запись);
			СозданныеДокументыВводаОстатков.Добавить(ДокументВводаНачальныхОстатков.Ссылка);
		КонецЕсли;
			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СозданныеДокументыВводаОстатков, АдресХранилища);
	
КонецПроцедуры
	
#КонецОбласти
#КонецОбласти

