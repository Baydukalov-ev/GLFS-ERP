#Область ПрограммныйИнтерфейс

// Синкронизирует (обновляет и при необходимости создает в ИБ элементы справочника "Номенклатура контрагентов")
//  при изменении кода SAP номенклатуры.  Код номенклатуры SAP может быть задан 
//   - в справочнике "SKU МТ (НСИ)", для номенклатуры имеющей SKU МТ (АП, БАП)
//   - непосредственно в справочнике "Номенклатура", для номенклатуры не имеющей SKU МТ (ПОСМ) 
// Вызывается из обработчика ПриЗаписи справочников, изменение которых приводит к изменению кода SAP номенклатуры. 
//
//  Параметры;
//   СКЮ_МТ_ТК_Номенклатура 
//     - СправочникСсылка.бг_ЕК_СКЮ_СкюМТ, СправочникСсылка.ТоварныеКатегории, СправочникСсылка.Номенклатура
//     - ссылка на элемент справочника изменение которого повлияло на изменение кода SAP номенклатуры.
//
Процедура СинхронизироватьНоменклатуруКонтрагентовПоКодуSAP(СКЮ_МТ_ТК_Номенклатура) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(СКЮ_МТ_ТК_Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;    
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КодНоменклатурыSAP = "";
	Отказ = Ложь;
	ПодготовитьДанныеДляСинхронизацииНоменклатурыКонтрагентовПоКодуSAP(
															СКЮ_МТ_ТК_Номенклатура, 
															Запрос, 
															КодНоменклатурыSAP,
															Отказ);
															
	Если Отказ Тогда
		Возврат;
	КонецЕсли;														
	
	РезультатыЗапроса = ДанныеДляСинхронизацииНоменклатурыКонтрагентовПоКодуSAP(Запрос);
	
	ОбновитьСоздатьНоменклатуруКонтрагентовПоКодуSAP(РезультатыЗапроса, КодНоменклатурыSAP);

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область СинхронизацияНоменклатурыКонтрагентовПоКодуSAP
	
// Создает в запросе временную таблицу ВТНоменклатура, содержит номенклатуру, по которой изменился Код SAP.
//  По ходу заполняет параметр КодНоменклатурыSAP, новым кодом SAP, для дальнейшего использования.
//  Если неверно передан параметр или не задан новый код SAP, выставляет флаг Отказ в Истина.
//
Процедура ПодготовитьДанныеДляСинхронизацииНоменклатурыКонтрагентовПоКодуSAP(СКЮ_МТ_ТК_Номенклатура, 
																			Запрос,
																			КодНоменклатурыSAP,
																			Отказ)

	Запрос.УстановитьПараметр("СКЮ_МТ_ТК_Номенклатура", СКЮ_МТ_ТК_Номенклатура);
	
	Если ТипЗнч(СКЮ_МТ_ТК_Номенклатура) = Тип("СправочникСсылка.бг_ЕК_СКЮ_СкюМТ") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ = &СКЮ_МТ_ТК_Номенклатура";
		
		КодНоменклатурыSAP = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СКЮ_МТ_ТК_Номенклатура, "КодНоменклатурыSAP");
		
	ИначеЕсли ТипЗнч(СКЮ_МТ_ТК_Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.ТоварнаяКатегория = &СКЮ_МТ_ТК_Номенклатура";
		
		КодНоменклатурыSAP = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СКЮ_МТ_ТК_Номенклатура, "бг_СкюМТ.КодНоменклатурыSAP");
		
	ИначеЕсли ТипЗнч(СКЮ_МТ_ТК_Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатура
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	СпрНоменклатура.Ссылка = &СКЮ_МТ_ТК_Номенклатура";
		
		КодНоменклатурыSAP = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СКЮ_МТ_ТК_Номенклатура, "бг_КодНоменклатурыSAP");
		Если Не ЗначениеЗаполнено(КодНоменклатурыSAP) Тогда
			ТоварнаяКатегория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СКЮ_МТ_ТК_Номенклатура, "ТоварнаяКатегория");	
			Если ЗначениеЗаполнено(ТоварнаяКатегория) Тогда
				КодНоменклатурыSAP = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТоварнаяКатегория, "бг_СкюМТ.КодНоменклатурыSAP");
			КонецЕсли;	
		КонецЕсли;
		
	Иначе
		
		Отказ = Истина;	
		Возврат;
		
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КодНоменклатурыSAP) Тогда
		// Если новый код SAP не задан, то не будем очищать старый код SAP в номенклатуре партнеров. 
		Отказ = Истина;	
		Возврат;
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает массив результатов запроса для обработки номенклатуры контрагентов.
//  В результатах содержатся таблицы с необходимыми данными по номенклатуре упаковкам и штрихкодам.
//
Функция ДанныеДляСинхронизацииНоменклатурыКонтрагентовПоКодуSAP(Запрос)

	Запрос.Текст =
	#Область ТекстЗапроса
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТПартнеры
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.бг_КодSAP <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.Владелец КАК Номенклатура,
	|	Упаковки.Ссылка КАК Упаковка,
	|	Упаковки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Упаковки.Числитель КАК Числитель,
	|	Упаковки.Знаменатель КАК Знаменатель,
	|	Упаковки.Наименование КАК Наименование,
	|	Упаковки.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	Упаковки.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|ГДЕ
	|	НЕ Упаковки.ПометкаУдаления
	|	И Упаковки.Владелец В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Штрихкоды.Владелец.Владелец КАК Номенклатура,
	|	Штрихкоды.Владелец КАК Упаковка,
	|	Штрихкоды.Код КАК Код,
	|	Штрихкоды.Штрихкод КАК Штрихкод,
	|	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.бг_Штрихкоды_ЕК_Номенклатуры КАК Штрихкоды
	|ГДЕ
	|	НЕ Штрихкоды.ПометкаУдаления
	|	И Штрихкоды.Владелец.Владелец В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПартнеры.Партнер КАК Партнер,
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВТНоменклатура.Номенклатура КАК Справочник.Номенклатура).Наименование КАК НоменклатураНаименование,
	|	ВЫРАЗИТЬ(ВТНоменклатура.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	ВЫРАЗИТЬ(ВТНоменклатура.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ВЫРАЗИТЬ(ВТНоменклатура.Номенклатура КАК Справочник.Номенклатура).ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента,
	|	НоменклатураКонтрагентов.бг_КодНоменклатурыКонтрагента КАК бг_КодНоменклатурыКонтрагента
	|ИЗ
	|	ВТПартнеры КАК ВТПартнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНоменклатура КАК ВТНоменклатура
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ВТПартнеры.Партнер = НоменклатураКонтрагентов.Владелец
	|			И (ВТНоменклатура.Номенклатура = НоменклатураКонтрагентов.Номенклатура)
	|ГДЕ
	|	НЕ ВТНоменклатура.Номенклатура ЕСТЬ NULL";
	#КонецОбласти
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
    Возврат РезультатыЗапроса;
	
КонецФункции

// Обновляет и при необходимости создает в ИБ элементы справочника "Номенклатура контрагентов"
//  по переданным данным для синхронизации номенклатуры контрагентов по коду SAP.
//
Процедура ОбновитьСоздатьНоменклатуруКонтрагентовПоКодуSAP(РезультатыЗапроса, КодНоменклатурыSAP)
	
	ТаблицаУпаковки = РезультатыЗапроса[1].Выгрузить();
	ТаблицаШтрихкоды = РезультатыЗапроса[2].Выгрузить();
	
	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();	
	КонецЕсли;	
	
	Выборка = РезультатыЗапроса[3].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.НоменклатураКонтрагента) Тогда
			
			Если Выборка.бг_КодНоменклатурыКонтрагента = КодНоменклатурыSAP Тогда
				Продолжить;
			КонецЕсли;		
			
			НоменклатураПоставщикаОбъект = Выборка.НоменклатураКонтрагента.ПолучитьОбъект();
			ШаблонСообщенияОшибки = НСтр("ru = 'Не удалось изменить номенклатуру %1 партнера %2 по коду SAP %3.';
										 |en = 'Cannot change items %1 of partner %2 by SAP code %3.'", 
										ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщенияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку
				(ШаблонСообщенияОшибки, Выборка.Номенклатура, Выборка.Партнер, КодНоменклатурыSAP);
				
			НоменклатураПоставщикаОбъект.ОбменДанными.Загрузка = Истина;
			НоменклатураПоставщикаОбъект.бг_КодНоменклатурыКонтрагента = КодНоменклатурыSAP; 
			
		Иначе	
			
			Если Выборка.НоменклатураПометкаУдаления = Истина Тогда
				Продолжить;
			КонецЕсли;	
			
			ШаблонСообщенияОшибки = НСтр("ru = 'Не удалось создать новую номенклатуру %1 партнера %2 по коду SAP %3.';
										 |en = 'Cannot create new item %1 of partner %2 by SAP code %3.'", 
										ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщенияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку
				(ШаблонСообщенияОшибки, Выборка.Номенклатура, Выборка.Партнер, КодНоменклатурыSAP);

			ОтборУпаковки = Новый Структура("Номенклатура,Числитель,Знаменатель", Выборка.Номенклатура, 1, 1);
			НайденныеУпаковки = ТаблицаУпаковки.НайтиСтроки(ОтборУпаковки);
			
			Если НайденныеУпаковки.Количество() > 0 Тогда	
				СтрокаУпаковки = НайденныеУпаковки[0];
			Иначе
				СтрокаУпаковки = Неопределено;
			КонецЕсли;	

			НоменклатураПоставщикаОбъект = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
			НоменклатураПоставщикаОбъект.Владелец = Выборка.Партнер;
			НоменклатураПоставщикаОбъект.УстановитьНовыйКод();
			НоменклатураПоставщикаОбъект.Номенклатура = Выборка.Номенклатура;
			НоменклатураПоставщикаОбъект.ВладелецНоменклатуры = Выборка.Партнер;
			НоменклатураПоставщикаОбъект.КоличествоУпаковок = 1;
			НоменклатураПоставщикаОбъект.КоличествоБазовойЕдиницыИзмерения = 1;
			НоменклатураПоставщикаОбъект.бг_КодНоменклатурыКонтрагента = КодНоменклатурыSAP;		
			
			Если СтрокаУпаковки <> Неопределено Тогда
				
				ОтборШтрихкоды = Новый Структура("Номенклатура,Упаковка", СтрокаУпаковки.Номенклатура, СтрокаУпаковки.Упаковка);
				НайденныеШтрихкоды = ТаблицаШтрихкоды.НайтиСтроки(ОтборШтрихкоды);	
				Если НайденныеШтрихкоды.Количество() > 0 Тогда
					Штрихкод = НайденныеШтрихкоды[0].Штрихкод;
				Иначе
					ОтборШтрихкоды = Новый Структура("Номенклатура,ЕдиницаИзмерения", 
												СтрокаУпаковки.Номенклатура, СтрокаУпаковки.ЕдиницаИзмерения);
					НайденныеШтрихкоды = ТаблицаШтрихкоды.НайтиСтроки(ОтборШтрихкоды);
					Если НайденныеШтрихкоды.Количество() > 0 Тогда
						Штрихкод = НайденныеШтрихкоды[0].Штрихкод;
					Иначе	
						Штрихкод = "";
					КонецЕсли;	
				КонецЕсли;	
				
				НаименованиеНоменклатурыПоставщика = Выборка.НоменклатураНаименование + " " + СтрокаУпаковки.Наименование; 
				НоменклатураПоставщикаОбъект.Упаковка = СтрокаУпаковки.Упаковка;
				НоменклатураПоставщикаОбъект.НаименованиеНоменклатуры = НаименованиеНоменклатурыПоставщика;
				НоменклатураПоставщикаОбъект.Наименование = НаименованиеНоменклатурыПоставщика;
				НоменклатураПоставщикаОбъект.НаименованиеУпаковки = СтрокаУпаковки.Наименование;
				НоменклатураПоставщикаОбъект.НаименованиеБазовойЕдиницыИзмерения = СтрокаУпаковки.ЕдиницаИзмеренияНаименование;
				НоменклатураПоставщикаОбъект.КодОКЕИБазовойЕдиницыИзмерения = СтрокаУпаковки.ЕдиницаИзмеренияКод;
				НоменклатураПоставщикаОбъект.Штрихкод = Штрихкод;
				НоменклатураПоставщикаОбъект.НаименованиеПолное = НаименованиеНоменклатурыПоставщика; 
				НоменклатураПоставщикаОбъект.Идентификатор = 
					Справочники.НоменклатураКонтрагентов.ИдентификаторНоменклатурыКонтрагента(
						НаименованиеНоменклатурыПоставщика,
						"", 
						НоменклатураПоставщикаОбъект.НаименованиеУпаковки);
			Иначе	
				НаименованиеНоменклатурыПоставщика = Выборка.НоменклатураНаименование; 
				НоменклатураПоставщикаОбъект.Упаковка = Неопределено;
				НоменклатураПоставщикаОбъект.НаименованиеНоменклатуры = НаименованиеНоменклатурыПоставщика;
				НоменклатураПоставщикаОбъект.Наименование = НаименованиеНоменклатурыПоставщика;
				НоменклатураПоставщикаОбъект.НаименованиеУпаковки = Выборка.ЕдиницаИзмеренияНаименование;
				НоменклатураПоставщикаОбъект.НаименованиеБазовойЕдиницыИзмерения = Выборка.ЕдиницаИзмеренияНаименование;
				НоменклатураПоставщикаОбъект.КодОКЕИБазовойЕдиницыИзмерения = Выборка.ЕдиницаИзмеренияКод;
				НоменклатураПоставщикаОбъект.Штрихкод = "";
				НоменклатураПоставщикаОбъект.НаименованиеПолное = НаименованиеНоменклатурыПоставщика; 
				НоменклатураПоставщикаОбъект.Идентификатор = 
					Справочники.НоменклатураКонтрагентов.ИдентификаторНоменклатурыКонтрагента(
						НаименованиеНоменклатурыПоставщика,
						"", 
						НоменклатураПоставщикаОбъект.НаименованиеУпаковки);
			КонецЕсли;
			
		КонецЕсли;	
		
		Попытка
			
			НоменклатураПоставщикаОбъект.Записать();
		
		Исключение
			
			Если НетВнешнейТранзакции Тогда
				ОтменитьТранзакцию();	
			КонецЕсли;	
		
			ШаблонСообщения = 
				НСтр("ru = '%1.
					       |По причине: %2
						   |';
					 |en = '%1.
					       |Reason: %2
						   |'",	
				ОбщегоНазначения.КодОсновногоЯзыка());
			
			ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения,
				ТекстСообщенияОшибки,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'СопоставлениеНоменклатурыКонтрагентов'"),
				УровеньЖурналаРегистрации.Ошибка,
				НоменклатураПоставщикаОбъект.Метаданные(),
				?(НоменклатураПоставщикаОбъект.ЭтоНовый(), Неопределено, НоменклатураПоставщикаОбъект.Ссылка),
				ТекстСообщения);
				
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
	КонецЦикла;

	Если НетВнешнейТранзакции Тогда
		ЗафиксироватьТранзакцию();	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 
