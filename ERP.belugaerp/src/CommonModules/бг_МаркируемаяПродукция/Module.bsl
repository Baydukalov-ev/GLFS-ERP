#Область ПрограммныйИнтерфейс

#Область ПрограммныйИнтерфейс_РаботаСоШтрихкодами

Функция ДлиныШтрихкодовМарок() Экспорт

	ДлиныШтрихкодовМарок = Новый Структура;
	
	ДлиныШтрихкодовМарок.Вставить(
		"КороткаяМарка",
		Метаданные.РегистрыСведений.бг_ИдентификаторыМарок.Ресурсы.НомерМарки.Тип.КвалификаторыЧисла.Разрядность); // 14

	ДлиныШтрихкодовМарок.Вставить("СтараяМарка", 68);
		
	ДлиныШтрихкодовМарок.Вставить(
		"ПолнаяМарка",
		Метаданные.РегистрыСведений.бг_ИдентификаторыМарок.Ресурсы.ИдентификаторМарки.Тип.КвалификаторыСтроки.Длина); // 150
		
	ДлиныШтрихкодовМарок.Вставить("СтараяУпаковка", 18);
		
	ДлиныШтрихкодовМарок.Вставить(
		"Упаковка",
		Метаданные.РегистрыСведений.бг_СоставУпаковок.Измерения.КодУпаковки.Тип.КвалификаторыСтроки.Длина); // 26
		
	Возврат Новый ФиксированнаяСтруктура(ДлиныШтрихкодовМарок);
	
КонецФункции

// Возвращает таблицу марок, ГУИДов и связанных товаров по переданным идентификаторам штрихкодов разных уровней:
// паллет, коробок и бутылок.
//
// Параметры:
//  Штрихкоды - Массив - строковые штрихкоды: паллеты, коробки, бутылки.
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - отбор по организации ЕГАИС
//   			  (одна марка может в разное время относиться к разным организациям).
//  СтатусыМарок - Массив ПеречислениеСсылка.бг_СтатусыАкцизныхМарок - отбор по статусам марок.
//  Дата - Дата - получение состояния на дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений - состав полей см. в НовыйДанныеМарокПоШтрихкодам(). 
//
Функция ДанныеМарокПоШтрихкодам(Штрихкоды, ОрганизацияЕГАИС, СтатусыМарок = Неопределено, Дата = Неопределено) Экспорт
	
	ТоварыПоШтрихкодамРезультат = НовыйДанныеМарокПоШтрихкодам();
	
	Если Штрихкоды.Количество() = 0 Тогда
		Возврат ТоварыПоШтрихкодамРезультат;
	КонецЕсли;
	
	// Коллекция "Штрихкоды" включает в себя все типы штрихкодов:
	// 01. Штрихкоды паллет (26 или 18 символов).
	// 02. Штрихкоды коробок (26 символов).
	// 03. Штрихкоды марок (150 или 68 символов).
	// Задача все штрихкоды разузловать до марок, найти их ГУИДы и данные товаров.
	
	// Дифференцируем все входящие штрихкоды по типам упаковок: паллета, коробка, бутылка (марка).
	ШтрихкодыПоТипамУпаковок = ШтрихкодыПоТипамУпаковок(Штрихкоды);
	
	// Для увеличения производительности механизма не используем итеративную разузловку штрихкодов с произвольным
	// количеством уровней вложенности, пока данная задача явно не будет поставлена. Предполагаем, что уровней вложенности
	// максимум 3: паллета, коробка, бутылка (марка).
	ТоварыПоШтрихкодамРезультат = ДанныеМарокПоШтрихкодамПоТипамУпаковок(
		ШтрихкодыПоТипамУпаковок,
		ОрганизацияЕГАИС,
		СтатусыМарок,
		Дата);
	
	Возврат ТоварыПоШтрихкодамРезультат;
	
КонецФункции

Функция НовыйДанныеМарокПоШтрихкодам() Экспорт
	
	ДанныеМарокПоШтрихкодам = Новый ТаблицаЗначений;
	
	ДлиныШтрихкодовМарок = ДлиныШтрихкодовМарок();
	
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"Серия",
		Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"ГУИДМарки",
		Новый ОписаниеТипов("УникальныйИдентификатор"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"Штрихкод",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлиныШтрихкодовМарок.ПолнаяМарка));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"ШтрихкодРодитель",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлиныШтрихкодовМарок.Упаковка));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"СтатусМарки",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_СтатусыАкцизныхМарок"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"Организация",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	ДанныеМарокПоШтрихкодам.Колонки.Добавить(
		"ОрганизацияЕГАИС",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	
	Возврат ДанныеМарокПоШтрихкодам;
	
КонецФункции

Функция ШтрихкодыПоТипамУпаковок(Штрихкоды) Экспорт
	
	ШтрихкодыПоТипамУпаковок = Новый Структура(
		"Паллеты, Коробки, Марки",
		Новый Массив,
		Новый Массив,
		Новый Массив);
	
	ДлиныШтрихкодовМарок = ДлиныШтрихкодовМарок();
	
	Для каждого Штрихкод Из Штрихкоды Цикл
		
		ТипУпаковки = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(Штрихкод, ДлиныШтрихкодовМарок);
		
		Если ТипУпаковки <> Неопределено Тогда
			
			Если ТипУпаковки = Перечисления.бг_ТипыЕдиницИзмерения.Паллета Тогда
				ШтрихкодыПоТипамУпаковок.Паллеты.Добавить(Штрихкод);
			ИначеЕсли ТипУпаковки = Перечисления.бг_ТипыЕдиницИзмерения.Коробка Тогда
				ШтрихкодыПоТипамУпаковок.Коробки.Добавить(Штрихкод);
			ИначеЕсли ТипУпаковки = Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда
				ШтрихкодыПоТипамУпаковок.Марки.Добавить(Штрихкод);
			Иначе
				ВызватьИсключение НСтр("ru='Неучтенный тип штрихкода'");
			КонецЕсли;
			
		Иначе
			ВызватьИсключение НСтр("ru='Неизвестный тип штрихкода'");
		КонецЕсли;
	КонецЦикла;	

	Возврат ШтрихкодыПоТипамУпаковок;
	
КонецФункции

// Возвращает таблицу среза последних состава упаковок по переданным идентификаторам штрихкодов разных уровней:
// паллет и коробок.
//
// Параметры:
//  Штрихкоды - Массив - строковые штрихкоды: паллеты и коробки.
//  Дата - Дата - получение среза на дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений - состав полей см. в запросе. 
//
Функция ДанныеСоставаУпаковокСрезПоследних(Штрихкоды, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Дата = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	бг_СоставУпаковокСрезПоследних.КодУпаковки КАК Штрихкод,
		|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки КАК ШтрихкодРодитель
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок.СрезПоследних КАК бг_СоставУпаковокСрезПоследних
		|ГДЕ
		|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки В(&Штрихкоды)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	бг_СоставУпаковокСрезПоследних.КодУпаковки,
		|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок.СрезПоследних(, КодУпаковки В (&Штрихкоды)) КАК бг_СоставУпаковокСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтрихкодРодитель,
		|	Штрихкод";
		
	Иначе
		
		// Ввиду того, что запрос на основе виртуальной таблицы среза последних на дату строится очень долго,
		// строим запрос среза последних вручную на основании таблицы движений, предварительно фильтруя записи.
		// ВТ СоставУпаковокЗначенияИзмеренийДляПостроенияСреза - цель таблицы получить список значений измерений КодУпаковки,
		//  по которым необходимо взять движения и построить из них срез последних: сюда попадают коробки из параметра,
		//  Штрихкоды, а также коды упаковок, которые когда-то содержались в паллетах, указанных в параметре Штрихкоды.
		// ВТ СоставУпаковокДвижения - выбираются движения раньше периода в параметрах из регистра бг_СоставУпаковок
		//  по кодам упаковок, полученных на предыдущем шаге.
		// ВТ СоставУпаковокСрезПоследних - срез последних, построенный из таблицы движений.
		// ВТ Выбираем данные из СоставУпаковокСрезПоследних объединением: либо КодУпаковки должен быть указан в параметре
		//  Штрихкоды (коробки), либо КодВышестоящейУпаковки должен содержаться в параметре Штрихкоды (паллеты).
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ СоставУпаковокЗначенияИзмеренийДляПостроенияСреза
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|ГДЕ
		|	бг_СоставУпаковок.Активность
		|	И бг_СоставУпаковок.Период < &Дата
		|	И бг_СоставУпаковок.КодУпаковки В(&Штрихкоды)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бг_СоставУпаковок.КодУпаковки
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|ГДЕ
		|	бг_СоставУпаковок.Активность
		|	И бг_СоставУпаковок.Период < &Дата
		|	И бг_СоставУпаковок.КодВышестоящейУпаковки В(&Штрихкоды)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_СоставУпаковок.Период КАК Период,
		|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки,
		|	бг_СоставУпаковок.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
		|ПОМЕСТИТЬ СоставУпаковокДвижения
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставУпаковокЗначенияИзмеренийДляПостроенияСреза КАК СоставУпаковокЗначенияИзмеренийДляПостроенияСреза
		|		ПО бг_СоставУпаковок.КодУпаковки = СоставУпаковокЗначенияИзмеренийДляПостроенияСреза.КодУпаковки
		|ГДЕ
		|	бг_СоставУпаковок.Активность
		|	И бг_СоставУпаковок.Период < &Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СоставУпаковокДвижения.Период) КАК МаксимальныйПериод,
		|	СоставУпаковокДвижения.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ СоставУпаковокМаксимальныйПериод
		|ИЗ
		|	СоставУпаковокДвижения КАК СоставУпаковокДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставУпаковокДвижения.КодУпаковки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МаксимальныйПериод,
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставУпаковокДвижения.КодУпаковки КАК Штрихкод,
		|	СоставУпаковокДвижения.КодВышестоящейУпаковки КАК ШтрихкодРодитель
		|ПОМЕСТИТЬ СоставУпаковокСрезПоследних
		|ИЗ
		|	СоставУпаковокДвижения КАК СоставУпаковокДвижения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставУпаковокМаксимальныйПериод КАК СоставУпаковокМаксимальныйПериод
		|		ПО СоставУпаковокДвижения.КодУпаковки = СоставУпаковокМаксимальныйПериод.КодУпаковки
		|			И СоставУпаковокДвижения.Период = СоставУпаковокМаксимальныйПериод.МаксимальныйПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставУпаковокСрезПоследних.Штрихкод КАК Штрихкод,
		|	СоставУпаковокСрезПоследних.ШтрихкодРодитель КАК ШтрихкодРодитель
		|ИЗ
		|	СоставУпаковокСрезПоследних КАК СоставУпаковокСрезПоследних
		|ГДЕ
		|	СоставУпаковокСрезПоследних.Штрихкод В(&Штрихкоды)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставУпаковокСрезПоследних.Штрихкод,
		|	СоставУпаковокСрезПоследних.ШтрихкодРодитель
		|ИЗ
		|	СоставУпаковокСрезПоследних КАК СоставУпаковокСрезПоследних
		|ГДЕ
		|	СоставУпаковокСрезПоследних.ШтрихкодРодитель В(&Штрихкоды)";
		
		Запрос.УстановитьПараметр("Дата", Дата);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("Штрихкоды", Штрихкоды);
	
	ДанныеСоставаУпаковокСрезПоследних = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеСоставаУпаковокСрезПоследних;

КонецФункции

Функция ДатаПолученияШтрихкодов(ДокументОбъектWMS, НужноУчитыватьДвиженияДокумента = Неопределено) Экспорт
	
	ДатаПолученияШтрихкодов = Неопределено;
	
	Если НужноУчитыватьДвиженияДокумента = Неопределено Тогда
		НужноУчитыватьДвиженияДокумента = ДокументОбъектWMS.Проведен;
	КонецЕсли;
	
	ЭтоОперативноеПроведение = ЗначениеЗаполнено(ДокументОбъектWMS.Дата)
		И НачалоДня(ТекущаяДатаСеанса()) = НачалоДня(ДокументОбъектWMS.Дата)
		Или Не ЗначениеЗаполнено(ДокументОбъектWMS.Ссылка);
	
	Если ЭтоОперативноеПроведение И Не НужноУчитыватьДвиженияДокумента Тогда
		ДатаПолученияШтрихкодов = Неопределено;
	Иначе
		ДатаПолученияШтрихкодов = ?(ЗначениеЗаполнено(ДокументОбъектWMS.Дата), ДокументОбъектWMS.Дата, Неопределено);
	КонецЕсли;
		
	Возврат ДатаПолученияШтрихкодов;

КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс_РаботаСоШтрихкодами

Функция РезультатСравненияТаблицТоваров(ТаблицаТоваров1, ТаблицаТоваров2, КонтролироватьСерии, ФиксироватьОшибки = Ложь) Экспорт

	Результат = Новый Структура("ТаблицыСовпадают, Ошибки", Истина, Новый Массив);
	
	Результат.ТаблицыСовпадают = Истина;
	
	КоличествоСтрокТаблицы1 = ТаблицаТоваров1.Количество();
	КоличествоСтрокТаблицы2 = ТаблицаТоваров2.Количество();
	
	Если КоличествоСтрокТаблицы1 <> КоличествоСтрокТаблицы2 Тогда
		Результат.ТаблицыСовпадают = Ложь;
		Если Не ФиксироватьОшибки Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если КонтролироватьСерии Тогда
		СоединениеТаблицТоваров = СоединениеТаблицТоваровССериями(ТаблицаТоваров1, ТаблицаТоваров2);
	Иначе
		СоединениеТаблицТоваров = СоединениеТаблицТоваровБезСерий(ТаблицаТоваров1, ТаблицаТоваров2);
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ЕстьОшибки", Истина);
	НайденныеСтрокиСОшибками = СоединениеТаблицТоваров.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтрокиСОшибками.Количество() = 0 Тогда
		Возврат Результат;
	Иначе
		
		Результат.ТаблицыСовпадают = Ложь;
		
		Если Не ФиксироватьОшибки Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаСОшибкой Из НайденныеСтрокиСОшибками Цикл
	
		Если СтрокаСОшибкой.РазличаетсяКоличество Тогда
			
			// Ключевые поля есть в обеих таблицах, отличается лишь количество.
			Если КонтролироватьСерии Тогда
				
				ТекстОшибки = СтрШаблон("Номенклатура: ""%1"", серия: ""%2"", количество[1] = %3, количество[2] = %4",
					СтрокаСОшибкой.Номенклатура1,
					СтрокаСОшибкой.Серия1,
					СтрокаСОшибкой.Количество1,
					СтрокаСОшибкой.Количество2);
					
			Иначе
				
				ТекстОшибки = СтрШаблон("Номенклатура: ""%1"", количество[1] = %2, количество[2] = %3",
					СтрокаСОшибкой.Номенклатура1,
					СтрокаСОшибкой.Количество1,
					СтрокаСОшибкой.Количество2);
				
			КонецЕсли;
			
		Иначе
			
			// В одной из таблиц нет соединения по "Номенклатура" + "Серия".
			НетДанныхВоВторойТаблице = Не ЗначениеЗаполнено(СтрокаСОшибкой.Номенклатура2);
			
			Если КонтролироватьСерии Тогда
				
				ТекстОшибки = СтрШаблон("Номенклатура: ""%1"", серия: ""%2"", количество = %3",
					?(НетДанныхВоВторойТаблице, СтрокаСОшибкой.Номенклатура1, СтрокаСОшибкой.Номенклатура2),
					?(НетДанныхВоВторойТаблице, СтрокаСОшибкой.Серия1, СтрокаСОшибкой.Серия2),
					?(НетДанныхВоВторойТаблице, СтрокаСОшибкой.Количество1, СтрокаСОшибкой.Количество2));
					
			Иначе
				
				ТекстОшибки = СтрШаблон("Номенклатура: ""%1"", количество = %2",
					?(НетДанныхВоВторойТаблице, СтрокаСОшибкой.Номенклатура1, СтрокаСОшибкой.Номенклатура2),
					?(НетДанныхВоВторойТаблице, СтрокаСОшибкой.Количество1, СтрокаСОшибкой.Количество2));
				
			КонецЕсли;
		КонецЕсли;
			
		Результат.Ошибки.Добавить(ТекстОшибки);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция КартинкиТиповУпаковок() Экспорт

	КартинкиТиповУпаковок = Новый Структура;
	
	КартинкиТиповУпаковок.Вставить("Бутылка", БиблиотекаКартинок.МаркируемаяПродукцияШапка);
	КартинкиТиповУпаковок.Вставить("Коробка", БиблиотекаКартинок.МаркироватьУпаковку);
	КартинкиТиповУпаковок.Вставить("Паллета", БиблиотекаКартинок.РазделСклад16);
	КартинкиТиповУпаковок.Вставить("Пустая", Новый Картинка);
	
	Возврат КартинкиТиповУпаковок;

КонецФункции

Функция ЗначенияТиповУпаковок() Экспорт

	ЗначенияТиповУпаковок = Новый Структура;
	
	ЗначенияТиповУпаковок.Вставить(
		"Бутылка",
		Перечисления.бг_ТипыЕдиницИзмерения.Бутылка);
		
	ЗначенияТиповУпаковок.Вставить(
		"Коробка",
		Перечисления.бг_ТипыЕдиницИзмерения.Коробка);
		
	ЗначенияТиповУпаковок.Вставить(
		"Паллета",
		Перечисления.бг_ТипыЕдиницИзмерения.Паллета);
		
	ЗначенияТиповУпаковок.Вставить(
		"Пустая",
		Перечисления.бг_ТипыЕдиницИзмерения.ПустаяСсылка());

	Возврат ЗначенияТиповУпаковок;	
		
КонецФункции

Процедура ДобавитьДанныеОбАкцизныхМаркахВРеквизитыСообщения(РеквизитыОбъекта, Объект, ДанныеМарокУпаковок) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ВариантВыгрузки = ВариантВыгрузкиМарокУпаковок(Объект);
	КаталогВыгрузки = бг_КонстантыПовтИсп.ЗначениеКонстанты("КаталогВыгрузкиДанныхОбАкцизныхМаркахДляСистем1С");
	
	Если ВариантВыгрузки = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ЧерезФайл Тогда
		Если ЗначениеЗаполнено(КаталогВыгрузки) Тогда
			ИмяФайла = ИмяФайлаВыгрузкиМарокУпаковок(Объект, КаталогВыгрузки);
			Если ЗаписатьДанныеМарокУпаковокВФайл(ИмяФайла, ДанныеМарокУпаковок) Тогда 
				РеквизитыОбъекта.Вставить("бг_ИмяФайлаВыгрузкиМарокУпаковок", ИмяФайла);
			Иначе
				ВариантВыгрузки = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении;
			КонецЕсли;
		Иначе
			ВариантВыгрузки = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантВыгрузки = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении Тогда
		РеквизитыОбъекта.Вставить("АкцизныеМарки", ДанныеМарокУпаковок.АкцизныеМарки);
		РеквизитыОбъекта.Вставить("Упаковки", ДанныеМарокУпаковок.Упаковки);
	КонецЕсли;
	
	РеквизитыОбъекта.Вставить("бг_ВариантВыгрузкиМарокУпаковок", XMLСтрока(ВариантВыгрузки));
	
КонецПроцедуры

Функция ДанныеМарокУпаковокИзФайла(ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда	
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		
		ДанныеМарокУпаковок = ПрочитатьJSON(ЧтениеJSON, Ложь, "", ФорматДатыJSON.ISO);
	Иначе 
		ВызватьИсключение СтрШаблон(НСтр("ru='Не найден файл %1'"), ИмяФайла);
	КонецЕсли;
	
	Возврат ДанныеМарокУпаковок;
	
КонецФункции

Процедура ЗаполнитьТаблицуОбъектаПоДаннымМарокУпаковокИзФайла(Объект, ИмяТаблицы, ДанныеМарокУпаковок) Экспорт

	ТаблицаОбъекта = Объект[ИмяТаблицы];
	
	ТаблицаОбъекта.Очистить();
	Если ДанныеМарокУпаковок.Свойство(ИмяТаблицы) Тогда
		Для Каждого СтрокаТаблицы Из ДанныеМарокУпаковок[ИмяТаблицы] Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаОбъекта.Добавить(), СтрокаТаблицы);
		КонецЦикла;
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru='Не найдена таблица %1 в файле'"), ИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

Функция ТекстОшибкиРасхожденийТоваровПоМаркамИВДокументе() Экспорт
	
	Возврат НСтр("ru='Товары, привязанные к маркам, не совпадают с товарами, указанными в документе'");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеМарокПоШтрихкодамПоТипамУпаковок(ШтрихкодыПоТипамУпаковок, ОрганизацияЕГАИС, 
	СтатусыМарок = Неопределено, Дата = Неопределено)
	
	ШтрихкодыКоробокУказанныеWMS = Новый ТаблицаЗначений;
	ШтрихкодыКоробокУказанныеWMS.Колонки.Добавить(
		"Штрихкод",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлиныШтрихкодовМарок().Упаковка));
	
	Для каждого Штрихкод Из ШтрихкодыПоТипамУпаковок.Коробки Цикл
		ШтрихкодыКоробокУказанныеWMS.Добавить().Штрихкод = Штрихкод;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Если Дата = Неопределено Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыКоробокУказанныеWMS.Штрихкод КАК ШтрихкодКоробки
		|ПОМЕСТИТЬ ШтрихкодыКоробокУказанныеWMS
		|ИЗ
		|	&ШтрихкодыКоробокУказанныеWMS КАК ШтрихкодыКоробокУказанныеWMS
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_СоставУпаковокСрезПоследних.КодУпаковки КАК ШтрихкодКоробки
		|ПОМЕСТИТЬ ШтрихкодыКоробок
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок.СрезПоследних КАК бг_СоставУпаковокСрезПоследних
		|ГДЕ
		|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки В(&ШтрихкодыПаллетУказанныеWMS)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ШтрихкодыКоробокУказанныеWMS.ШтрихкодКоробки
		|ИЗ
		|	ШтрихкодыКоробокУказанныеWMS КАК ШтрихкодыКоробокУказанныеWMS
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодКоробки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_ИдентификаторыМарок.ГУИДМарки КАК ГУИДМарки
		|ПОМЕСТИТЬ ГУИДыМарокПоШтрихкодамУказаннымWMS
		|ИЗ
		|	РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
		|ГДЕ
		|	бг_ИдентификаторыМарок.ИдентификаторМарки В(&ШтрихкодыМарокУказанныеWMS)
		|	И бг_ИдентификаторыМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_ДвижениеМарокСрезПоследних.ГУИДМарки КАК ГУИДМарки,
		|	бг_ДвижениеМарокСрезПоследних.Серия КАК Серия,
		|	бг_ДвижениеМарокСрезПоследних.КодУпаковки КАК КодУпаковки,
		|	бг_ДвижениеМарокСрезПоследних.СтатусМарки КАК СтатусМарки
		|ПОМЕСТИТЬ ДанныеМарок
		|ИЗ
		|	РегистрСведений.бг_ДвижениеМарок.СрезПоследних КАК бг_ДвижениеМарокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыКоробок КАК ШтрихкодыКоробок
		|		ПО бг_ДвижениеМарокСрезПоследних.КодУпаковки = ШтрихкодыКоробок.ШтрихкодКоробки
		|ГДЕ
		|	&УсловиеСтатусыМарок
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бг_ДвижениеМарокСрезПоследних.ГУИДМарки,
		|	бг_ДвижениеМарокСрезПоследних.Серия,
		|	бг_ДвижениеМарокСрезПоследних.КодУпаковки,
		|	бг_ДвижениеМарокСрезПоследних.СтатусМарки
		|ИЗ
		|	РегистрСведений.бг_ДвижениеМарок.СрезПоследних(
		|			,
		|			ГУИДМарки В
		|				(ВЫБРАТЬ
		|					ГУИДыМарокПоШтрихкодамУказаннымWMS.ГУИДМарки КАК ГУИДМарки
		|				ИЗ
		|					ГУИДыМарокПоШтрихкодамУказаннымWMS КАК ГУИДыМарокПоШтрихкодамУказаннымWMS)) КАК бг_ДвижениеМарокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГУИДыМарокПоШтрихкодамУказаннымWMS КАК ГУИДыМарокПоШтрихкодамУказаннымWMS
		|		ПО бг_ДвижениеМарокСрезПоследних.ГУИДМарки = ГУИДыМарокПоШтрихкодамУказаннымWMS.ГУИДМарки
		|ГДЕ
		|	&УсловиеСтатусыМарок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ДанныеМарок.Серия КАК Серия,
		|	ДанныеМарок.ГУИДМарки КАК ГУИДМарки,
		|	бг_ИдентификаторыМарок.ИдентификаторМарки КАК Штрихкод,
		|	ДанныеМарок.КодУпаковки КАК ШтрихкодРодитель,
		|	ДанныеМарок.СтатусМарки КАК СтатусМарки,
		|	бг_ИдентификаторыМарок.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
		|ИЗ
		|	ДанныеМарок КАК ДанныеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
		|		ПО ДанныеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
		|			И (бг_ИдентификаторыМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ПО СерииНоменклатуры.бг_Номенклатура = Номенклатура.Ссылка
		|		ПО ДанныеМарок.Серия = СерииНоменклатуры.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Серия,
		|	ШтрихкодРодитель,
		|	Штрихкод";
		
		Если СтатусыМарок <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"&УсловиеСтатусыМарок",
				"бг_ДвижениеМарокСрезПоследних.СтатусМарки В (&СтатусыМарок)");
				
			Запрос.УстановитьПараметр("СтатусыМарок", СтатусыМарок);
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСтатусыМарок", "Истина");
		КонецЕсли;
		
	Иначе
		
		// Ввиду того, что запросы на основе виртуальных таблиц срезов последних на дату строятся очень долго,
		// строим запросы срезов последних вручную на основании таблиц движений, предварительно фильтруя записи.
		// ВТ СоставУпаковокЗначенияИзмеренийДляПостроенияСрезаПоКоробкам - цель таблицы получить список значений измерений
		//  КодУпаковки, по которым необходимо взять движения и построить из них срез упаковок: сюда попадают коробки,
		//  которые когда-то содержались в паллетах, указанных в параметре ШтрихкодыПаллетУказанныеWMS.
		// ВТ СоставУпаковокДвиженияПоКоробкам - движения состава упаковок, из которых нужно построить срез последних.
		// ВТ ШтрихкодыКоробок - в таблице содержатся все коробки, из которых нужно будет получать марки на дату.
		//  Это объединение: 1. Коробок, которые получены из среза последних из паллет, указанных в параметре
		//  ШтрихкодыПаллетУказанныеWMS; 2. Коробок, явно указанных в параметре ШтрихкодыКоробокУказанныеWMS.
		// ВТ ГУИДыМарокПоШтрихкодамУказаннымWMS - штрихкоды марок из параметры ШтрихкодыМарокУказанныеWMS соединяются
		//  с регистром бг_ИдентификаторыМарок и получаются ГУИДы марок, явно указанных в параметре, для получения их состояния.
		// ВТ ДвижениеМарокЗначенияИзмеренийДляПостроенияСреза - цель таблицы получить список значений измерений
		//  ГУИДМарки, по которым необходимо взять движения и построить из них срез марок: сюда попадают 1. Марки, которые
		//  когда-то содержались в параметре ШтрихкодыКоробокУказанныеWMS и марки, которые когда-то содержались в коробках,
		//  полученных разузлованием паллет из параметра ШтрихкодыПаллетУказанныеWMS.
		// ВТ ДвижениеМарокСрезПоследних - срез последних марок, полученный из таблицы движений.
		// ВТ ДанныеМарок - получается объединением: 1. Из ДвижениеМарокСрезПоследних по маркам, содержащимся в коробках из
		//  ВТ ШтрихкодыКоробок; 2. Из ДвижениеМарокСрезПоследних вместе с ГУИДыМарокПоШтрихкодамУказаннымWMS - по маркам, явно указанным
		//  в параметре ШтрихкодыМарокУказанныеWMS.
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыКоробокУказанныеWMS.Штрихкод КАК ШтрихкодКоробки
		|ПОМЕСТИТЬ ШтрихкодыКоробокУказанныеWMS
		|ИЗ
		|	&ШтрихкодыКоробокУказанныеWMS КАК ШтрихкодыКоробокУказанныеWMS
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ СоставУпаковокЗначенияИзмеренийДляПостроенияСрезаПоКоробкам
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|ГДЕ
		|	бг_СоставУпаковок.Активность
		|	И бг_СоставУпаковок.Период < &Дата
		|	И бг_СоставУпаковок.КодВышестоящейУпаковки В(&ШтрихкодыПаллетУказанныеWMS)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_СоставУпаковок.Период КАК Период,
		|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки,
		|	бг_СоставУпаковок.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
		|ПОМЕСТИТЬ СоставУпаковокДвиженияПоКоробкам
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставУпаковокЗначенияИзмеренийДляПостроенияСрезаПоКоробкам КАК СоставУпаковокЗначенияИзмеренийДляПостроенияСрезаПоКоробкам
		|		ПО бг_СоставУпаковок.КодУпаковки = СоставУпаковокЗначенияИзмеренийДляПостроенияСрезаПоКоробкам.КодУпаковки
		|ГДЕ
		|	бг_СоставУпаковок.Активность
		|	И бг_СоставУпаковок.Период < &Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(СоставУпаковокДвиженияПоКоробкам.Период) КАК МаксимальныйПериод,
		|	СоставУпаковокДвиженияПоКоробкам.КодУпаковки КАК КодУпаковки
		|ПОМЕСТИТЬ СоставУпаковокМаксимальныйПериодПоКоробкам
		|ИЗ
		|	СоставУпаковокДвиженияПоКоробкам КАК СоставУпаковокДвиженияПоКоробкам
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставУпаковокДвиженияПоКоробкам.КодУпаковки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МаксимальныйПериод,
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставУпаковокДвиженияПоКоробкам.КодУпаковки КАК ШтрихкодКоробки
		|ПОМЕСТИТЬ ШтрихкодыКоробок
		|ИЗ
		|	СоставУпаковокДвиженияПоКоробкам КАК СоставУпаковокДвиженияПоКоробкам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СоставУпаковокМаксимальныйПериодПоКоробкам КАК СоставУпаковокМаксимальныйПериодПоКоробкам
		|		ПО СоставУпаковокДвиженияПоКоробкам.КодУпаковки = СоставУпаковокМаксимальныйПериодПоКоробкам.КодУпаковки
		|			И СоставУпаковокДвиженияПоКоробкам.Период = СоставУпаковокМаксимальныйПериодПоКоробкам.МаксимальныйПериод
		|ГДЕ
		|	СоставУпаковокДвиженияПоКоробкам.КодВышестоящейУпаковки В(&ШтрихкодыПаллетУказанныеWMS)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШтрихкодыКоробокУказанныеWMS.ШтрихкодКоробки
		|ИЗ
		|	ШтрихкодыКоробокУказанныеWMS КАК ШтрихкодыКоробокУказанныеWMS
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодКоробки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_ИдентификаторыМарок.ГУИДМарки КАК ГУИДМарки
		|ПОМЕСТИТЬ ГУИДыМарокПоШтрихкодамУказаннымWMS
		|ИЗ
		|	РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
		|ГДЕ
		|	бг_ИдентификаторыМарок.ИдентификаторМарки В(&ШтрихкодыМарокУказанныеWMS)
		|	И бг_ИдентификаторыМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки
		|ПОМЕСТИТЬ ДвижениеМарокЗначенияИзмеренийДляПостроенияСреза
		|ИЗ
		|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыКоробок КАК ШтрихкодыКоробок
		|		ПО бг_ДвижениеМарок.КодУпаковки = ШтрихкодыКоробок.ШтрихкодКоробки
		|ГДЕ
		|	бг_ДвижениеМарок.Активность
		|	И бг_ДвижениеМарок.Период < &Дата
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	бг_ДвижениеМарок.ГУИДМарки
		|ИЗ
		|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГУИДыМарокПоШтрихкодамУказаннымWMS КАК ГУИДыМарокПоШтрихкодамУказаннымWMS
		|		ПО бг_ДвижениеМарок.ГУИДМарки = ГУИДыМарокПоШтрихкодамУказаннымWMS.ГУИДМарки
		|ГДЕ
		|	бг_ДвижениеМарок.Активность
		|	И бг_ДвижениеМарок.Период < &Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	бг_ДвижениеМарок.Период КАК Период,
		|	бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки,
		|	бг_ДвижениеМарок.Серия КАК Серия,
		|	бг_ДвижениеМарок.КодУпаковки КАК КодУпаковки,
		|	бг_ДвижениеМарок.СтатусМарки КАК СтатусМарки
		|ПОМЕСТИТЬ ДвижениеМарокДвижения
		|ИЗ
		|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвижениеМарокЗначенияИзмеренийДляПостроенияСреза КАК ДвижениеМарокЗначенияИзмеренийДляПостроенияСреза
		|		ПО бг_ДвижениеМарок.ГУИДМарки = ДвижениеМарокЗначенияИзмеренийДляПостроенияСреза.ГУИДМарки
		|ГДЕ
		|	бг_ДвижениеМарок.Активность
		|	И бг_ДвижениеМарок.Период < &Дата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДвижениеМарокДвижения.Период) КАК МаксимальныйПериод,
		|	ДвижениеМарокДвижения.ГУИДМарки КАК ГУИДМарки
		|ПОМЕСТИТЬ ДвижениеМарокМаксимальныйПериод
		|ИЗ
		|	ДвижениеМарокДвижения КАК ДвижениеМарокДвижения
		|
		|СГРУППИРОВАТЬ ПО
		|	ДвижениеМарокДвижения.ГУИДМарки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МаксимальныйПериод,
		|	ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвижениеМарокДвижения.ГУИДМарки КАК ГУИДМарки,
		|	ДвижениеМарокДвижения.Серия КАК Серия,
		|	ДвижениеМарокДвижения.КодУпаковки КАК КодУпаковки,
		|	ДвижениеМарокДвижения.СтатусМарки КАК СтатусМарки
		|ПОМЕСТИТЬ ДвижениеМарокСрезПоследних
		|ИЗ
		|	ДвижениеМарокДвижения КАК ДвижениеМарокДвижения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвижениеМарокМаксимальныйПериод КАК ДвижениеМарокМаксимальныйПериод
		|		ПО ДвижениеМарокДвижения.Период = ДвижениеМарокМаксимальныйПериод.МаксимальныйПериод
		|			И ДвижениеМарокДвижения.ГУИДМарки = ДвижениеМарокМаксимальныйПериод.ГУИДМарки
		|ГДЕ
		|	&УсловиеСтатусыМарок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодУпаковки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвижениеМарокСрезПоследних.ГУИДМарки КАК ГУИДМарки,
		|	ДвижениеМарокСрезПоследних.Серия КАК Серия,
		|	ДвижениеМарокСрезПоследних.КодУпаковки КАК КодУпаковки,
		|	ДвижениеМарокСрезПоследних.СтатусМарки КАК СтатусМарки
		|ПОМЕСТИТЬ ДанныеМарок
		|ИЗ
		|	ДвижениеМарокСрезПоследних КАК ДвижениеМарокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыКоробок КАК ШтрихкодыКоробок
		|		ПО ДвижениеМарокСрезПоследних.КодУпаковки = ШтрихкодыКоробок.ШтрихкодКоробки
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДвижениеМарокСрезПоследних.ГУИДМарки,
		|	ДвижениеМарокСрезПоследних.Серия,
		|	ДвижениеМарокСрезПоследних.КодУпаковки,
		|	ДвижениеМарокСрезПоследних.СтатусМарки
		|ИЗ
		|	ДвижениеМарокСрезПоследних КАК ДвижениеМарокСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГУИДыМарокПоШтрихкодамУказаннымWMS КАК ГУИДыМарокПоШтрихкодамУказаннымWMS
		|		ПО ДвижениеМарокСрезПоследних.ГУИДМарки = ГУИДыМарокПоШтрихкодамУказаннымWMS.ГУИДМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ДанныеМарок.Серия КАК Серия,
		|	ДанныеМарок.ГУИДМарки КАК ГУИДМарки,
		|	бг_ИдентификаторыМарок.ИдентификаторМарки КАК Штрихкод,
		|	ДанныеМарок.КодУпаковки КАК ШтрихкодРодитель,
		|	ДанныеМарок.СтатусМарки КАК СтатусМарки,
		|	бг_ИдентификаторыМарок.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС
		|ИЗ
		|	ДанныеМарок КАК ДанныеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
		|		ПО ДанныеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
		|			И (бг_ИдентификаторыМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|			ПО СерииНоменклатуры.бг_Номенклатура = Номенклатура.Ссылка
		|		ПО ДанныеМарок.Серия = СерииНоменклатуры.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Серия,
		|	ШтрихкодРодитель,
		|	Штрихкод";
		
		Если СтатусыМарок <> Неопределено Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"&УсловиеСтатусыМарок",
				"ДвижениеМарокДвижения.СтатусМарки В(&СтатусыМарок)");
				
			Запрос.УстановитьПараметр("СтатусыМарок", СтатусыМарок);
			
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСтатусыМарок", "Истина");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Дата", Дата);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("ШтрихкодыПаллетУказанныеWMS", ШтрихкодыПоТипамУпаковок.Паллеты);
	Запрос.УстановитьПараметр("ШтрихкодыМарокУказанныеWMS", ШтрихкодыПоТипамУпаковок.Марки);
	Запрос.УстановитьПараметр("ШтрихкодыКоробокУказанныеWMS", ШтрихкодыКоробокУказанныеWMS);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);

	ДанныеТоваровПоШтрихкодам = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеТоваровПоШтрихкодам;

КонецФункции

Функция СоединениеТаблицТоваровБезСерий(ТаблицаТоваров1, ТаблицаТоваров2)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров1.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров1.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваров1
	|ИЗ
	|	&ТаблицаТоваров1 КАК ТаблицаТоваров1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров2.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров2.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваров2
	|ИЗ
	|	&ТаблицаТоваров2 КАК ТаблицаТоваров2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТоваров1.Номенклатура КАК Номенклатура1,
	|	ВТ_ТаблицаТоваров1.Количество КАК Количество1,
	|	ВТ_ТаблицаТоваров2.Номенклатура КАК Номенклатура2,
	|	ВТ_ТаблицаТоваров2.Количество КАК Количество2,
	|	ВТ_ТаблицаТоваров1.Номенклатура ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров1.Количество ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров2.Номенклатура ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров2.Количество ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров1.Количество <> ВТ_ТаблицаТоваров2.Количество КАК ЕстьОшибки,
	|	НЕ ВТ_ТаблицаТоваров1.Номенклатура ЕСТЬ NULL
	|		И НЕ ВТ_ТаблицаТоваров2.Номенклатура ЕСТЬ NULL
	|		И ВТ_ТаблицаТоваров1.Количество <> ВТ_ТаблицаТоваров2.Количество КАК РазличаетсяКоличество
	|ИЗ
	|	ВТ_ТаблицаТоваров1 КАК ВТ_ТаблицаТоваров1
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТаблицаТоваров2 КАК ВТ_ТаблицаТоваров2
	|		ПО ВТ_ТаблицаТоваров1.Номенклатура = ВТ_ТаблицаТоваров2.Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров1", ТаблицаТоваров1);
	Запрос.УстановитьПараметр("ТаблицаТоваров2", ТаблицаТоваров2);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция СоединениеТаблицТоваровССериями(ТаблицаТоваров1, ТаблицаТоваров2)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров1.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров1.Серия КАК Серия,
	|	ТаблицаТоваров1.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваров1
	|ИЗ
	|	&ТаблицаТоваров1 КАК ТаблицаТоваров1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров2.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров2.Серия КАК Серия,
	|	ТаблицаТоваров2.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаТоваров2
	|ИЗ
	|	&ТаблицаТоваров2 КАК ТаблицаТоваров2
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаТоваров1.Номенклатура КАК Номенклатура1,
	|	ВТ_ТаблицаТоваров1.Серия КАК Серия1,
	|	ВТ_ТаблицаТоваров1.Количество КАК Количество1,
	|	ВТ_ТаблицаТоваров2.Номенклатура КАК Номенклатура2,
	|	ВТ_ТаблицаТоваров2.Серия КАК Серия2,
	|	ВТ_ТаблицаТоваров2.Количество КАК Количество2,
	|	ВТ_ТаблицаТоваров1.Номенклатура ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров1.Серия ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров1.Количество ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров2.Номенклатура ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров2.Серия ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров2.Количество ЕСТЬ NULL
	|		ИЛИ ВТ_ТаблицаТоваров1.Количество <> ВТ_ТаблицаТоваров2.Количество КАК ЕстьОшибки,
	|	НЕ ВТ_ТаблицаТоваров1.Номенклатура ЕСТЬ NULL
	|		И НЕ ВТ_ТаблицаТоваров1.Серия ЕСТЬ NULL
	|		И НЕ ВТ_ТаблицаТоваров2.Номенклатура ЕСТЬ NULL
	|		И НЕ ВТ_ТаблицаТоваров2.Серия ЕСТЬ NULL
	|		И ВТ_ТаблицаТоваров1.Количество <> ВТ_ТаблицаТоваров2.Количество КАК РазличаетсяКоличество
	|ИЗ
	|	ВТ_ТаблицаТоваров1 КАК ВТ_ТаблицаТоваров1
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ТаблицаТоваров2 КАК ВТ_ТаблицаТоваров2
	|		ПО ВТ_ТаблицаТоваров1.Номенклатура = ВТ_ТаблицаТоваров2.Номенклатура
	|			И ВТ_ТаблицаТоваров1.Серия = ВТ_ТаблицаТоваров2.Серия";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров1", ТаблицаТоваров1);
	Запрос.УстановитьПараметр("ТаблицаТоваров2", ТаблицаТоваров2);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#Область ИнтеграцияМарокУпаковокЧерезФайл

Функция ВариантВыгрузкиМарокУпаковок(Объект)
	
	ВариантВыгрузки = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.битОтчетОПроизводствеЕГАИС") Тогда
		ВариантВыгрузки = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВариантВыгрузкиАкцизныхМарокОтчетОПроизводствеЕГАИС");
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ВариантВыгрузки = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВариантВыгрузкиАкцизныхМарокТТНИсходящаяЕГАИС");
	КонецЕсли;
	
	Возврат ВариантВыгрузки;
	
КонецФункции

Функция ИмяФайлаВыгрузкиМарокУпаковок(Объект, Каталог)
	
	ИмяФайла = СтрШаблон(
		"%1%2.json", 
		НормализованыйАдресДиректории(Каталог), 
		Строка(Объект.УникальныйИдентификатор()));
	
	Возврат ИмяФайла;
	
КонецФункции

Функция НормализованыйАдресДиректории(Адрес)

	НормализованыйАдрес = СокрЛП(Адрес);
	
	Если Не Прав(НормализованыйАдрес, 1) = "\" Тогда
		НормализованыйАдрес = НормализованыйАдрес + "\";
	КонецЕсли;
	
	Возврат НормализованыйАдрес;
	
КонецФункции

Функция ЗаписатьДанныеМарокУпаковокВФайл(ИмяФайла, ДанныеМарокУпаковок)
	
	ДанныеМарокУпаковокДляЗаписиВФайл = Новый Структура;
	ДанныеМарокУпаковокДляЗаписиВФайл.Вставить(
		"АкцизныеМарки", ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеМарокУпаковок.АкцизныеМарки));
	ДанныеМарокУпаковокДляЗаписиВФайл.Вставить(
		"Упаковки", ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеМарокУпаковок.Упаковки));
	
	ДанныеЗаписыныУспешно = Ложь;
	
	Попытка
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайла, "UTF-8",, Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
		ЗаписатьJSON(ЗаписьJSON, ДанныеМарокУпаковокДляЗаписиВФайл);
		ЗаписьJSON.Закрыть();
		
		ДанныеЗаписыныУспешно = Истина;
	Исключение
	КонецПопытки;
	
	Возврат ДанныеЗаписыныУспешно;
	
КонецФункции

#КонецОбласти

// Временно. Для многопоточного массового заполнения Организации ЕГАИС в регистре Идентификаторы марок
//
Процедура ЗаполнитьОрганизациюЕГАИСВРегистреИдентификаторовМарок(ТаблицаИдентификаторовМарок) Экспорт

	Для Каждого СтрокаТаблицы Из ТаблицаИдентификаторовМарок Цикл 
		Набор = РегистрыСведений.бг_ИдентификаторыМарок.СоздатьНаборЗаписей();
		Набор.Отбор.ГУИДМарки.Установить(СтрокаТаблицы.ГУИДМарки);
		
		ЗаполнитьЗначенияСвойств(Набор.Добавить(), СтрокаТаблицы);
		
		Набор.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
		Набор.ОбменДанными.Загрузка = Истина;
		Набор.Записать();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
