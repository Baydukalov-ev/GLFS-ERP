#Область ПрограммныйИнтерфейс

Функция АвтоматическиФормироватьЗаявкиНаРасходованиеДС(Договор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ИнтеграцияВключена() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС");
	
КонецФункции

Функция ДатаПлатежа(ДатаОтсчета, Договор, Соглашение) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаОтсчета) Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	Отсрочка = Отсрочка(Договор, Соглашение);
	
	Возврат ДатаОтсчета + (Отсрочка * 86400);
	
КонецФункции

Функция БанковскийСчетФактора(Договор, ДатаСреза) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентовбг_НастройкиОплатыЧерезФакторинговуюКомпанию.БанковскийСчетФактора КАК БанковскийСчетФактора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов.бг_НастройкиОплатыЧерезФакторинговуюКомпанию КАК ДоговорыКонтрагентовбг_НастройкиОплатыЧерезФакторинговуюКомпанию
		|ГДЕ
		|	ДоговорыКонтрагентовбг_НастройкиОплатыЧерезФакторинговуюКомпанию.Ссылка = &Ссылка
		|	И ДоговорыКонтрагентовбг_НастройкиОплатыЧерезФакторинговуюКомпанию.ДатаНачалаДействия <= &ДатаСреза
		|	И ДоговорыКонтрагентовбг_НастройкиОплатыЧерезФакторинговуюКомпанию.ДатаОкончанияДействия >= &ДатаСреза";
	
	Запрос.УстановитьПараметр("Ссылка", Договор);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.БанковскийСчетФактора;
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	
КонецФункции

Процедура СоздатьОбновитьЗаявкуНаРасходованиеДС(ЗаявкаНаРасходованиеДС, ДанныеЗаполнения, Отказ,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	СвойстваДокументаОснованияПриПроведении = Неопределено;
	ДополнительныеПараметры.Свойство("СвойстваДокументаОснованияПриПроведении", СвойстваДокументаОснованияПриПроведении);
	
	ДокументОснование = ДанныеЗаполнения.ОбъектОплаты;
	
	ФормироватьЗаявкуНаРасходованиеДС = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС");
	
	Если Не ФормироватьЗаявкуНаРасходованиеДС
		И Не ДополнительныеПараметры.Свойство("ПринудительноФормироватьЗаявку") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаявкаНаРасходованиеДС) Тогда
		ЗаявкаНаРасходованиеДС = ЗаявкаНаРасходованиеДСПоДокументуОснованию(ДокументОснование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаявкаНаРасходованиеДС) Тогда
		
		ЗаявкаНаРасходованиеДСОбъект = ЗаявкаНаРасходованиеДС.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(СвойстваДокументаОснованияПриПроведении) И
			СвойстваДокументаОснованияПриПроведении.РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
			
			ЗаявкаНаРасходованиеДСОбъект.УстановитьПометкуУдаления(Истина);
			Возврат;
		КонецЕсли;
		
		Если ЗаявкаНаРасходованиеДСОбъект.Проведен Тогда
			Для каждого НаборЗаписей Из ЗаявкаНаРасходованиеДСОбъект.Движения Цикл
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ЗаявкаНаРасходованиеДСОбъект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		
	КонецЕсли;
	
	ЗаявкаНаРасходованиеДСОбъект.ПометкаУдаления = Ложь;
	ЗаявкаНаРасходованиеДСОбъект.РасшифровкаПлатежа.Очистить();
	
	ЗаявкаНаРасходованиеДСОбъект.Заполнить(ДокументОснование);
	
	ЗаполнитьШапкуДокумента(ЗаявкаНаРасходованиеДСОбъект, ДанныеЗаполнения);
	ЗаполнитьРасшифровкуПлатежа(ЗаявкаНаРасходованиеДСОбъект, ДанныеЗаполнения);
	
	Если ЗаявкаНаРасходованиеДСОбъект.РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") = 0 Тогда
		Если ЗаявкаНаРасходованиеДСОбъект.ЭтоНовый() Тогда
			ЗаявкаНаРасходованиеДСОбъект = Неопределено;
		Иначе
			ЗаявкаНаРасходованиеДСОбъект.ПометкаУдаления = Истина;
			Если ЗаявкаНаРасходованиеДСОбъект.Проведен Тогда
				ЗаявкаНаРасходованиеДСОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);
			Иначе
				ЗаявкаНаРасходованиеДСОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ЗаявкаНаРасходованиеДСОбъект.ПроверитьЗаполнение() Тогда
		ЗаявкаНаРасходованиеДСОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ЗаявкаНаРасходованиеДСОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ТекстОшибки = НСтр("ru = 'Не удалось сформировать/обновить заявку на оплату. См. служебные сообщения'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИнтеграцияВключена() Экспорт
	
	ДатаНачалаИнтеграции = бг_КонстантыПовтИсп.ЗначениеКонстанты("ДатаНачалаИнтеграцииПоПроектуМагистраль");
	
	Если Не ЗначениеЗаполнено(ДатаНачалаИнтеграции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НачалоДня(ДатаНачалаИнтеграции) <= НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

Функция ШаблоныНазначенияПлатежа() Экспорт
	
	Шаблоны = Новый Структура;
	
	ОбщийТекстШаблона = НСтр("ru = 'Оплата за товары/услуги по договору № %1 от %2 по УПД № %3 от %4.
                              |'");
	ТекстСНДС = НСтр("ru = 'В том числе НДС 20% - %5 %6'");
	ТекстБезНДС = НСтр("ru = 'Без НДС'");
	ТекстФакторинг = НСтр("ru = ' (факторинг)'");
	
	ПараметрыШаблона =
		"%1 - номер договора" + Символы.ПС +
		"%2 - дата договора" + Символы.ПС +
		"%3 - номер входящего документа" + Символы.ПС +
		"%4 - дата входящего документа" + Символы.ПС +
		"%5 - сумма НДС" + Символы.ПС +
		"%6 - валюта взаиморасчетов";
	
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("Наименование", "Шаблон с НДС");
	СтруктураШаблона.Вставить("Шаблон", ОбщийТекстШаблона + ТекстСНДС);
	СтруктураШаблона.Вставить("ПараметрыШаблона", ПараметрыШаблона);
	Шаблоны.Вставить("ШаблонСНДС", СтруктураШаблона);
	
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("Наименование", "Шаблон с НДС (факторинг)");
	СтруктураШаблона.Вставить("Шаблон", ОбщийТекстШаблона + ТекстСНДС + ТекстФакторинг);
	СтруктураШаблона.Вставить("ПараметрыШаблона", ПараметрыШаблона);
	Шаблоны.Вставить("ШаблонСНДСФакторинг", СтруктураШаблона);
	
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("Наименование", "Шаблон без НДС");
	СтруктураШаблона.Вставить("Шаблон", ОбщийТекстШаблона + ТекстБезНДС);
	СтруктураШаблона.Вставить("ПараметрыШаблона", ПараметрыШаблона);
	Шаблоны.Вставить("ШаблонБезНДС", СтруктураШаблона);
	
	СтруктураШаблона = Новый Структура;
	СтруктураШаблона.Вставить("Наименование", "Шаблон без НДС (факторинг)");
	СтруктураШаблона.Вставить("Шаблон", ОбщийТекстШаблона + ТекстБезНДС + ТекстФакторинг);
	СтруктураШаблона.Вставить("ПараметрыШаблона", ПараметрыШаблона);
	Шаблоны.Вставить("ШаблонБезНДСФакторинг", СтруктураШаблона);
	
	Возврат Шаблоны;
	
КонецФункции

Процедура ЗаполнитьСписокШаблонов(СписокЗначений) Экспорт
	
	СписокШаблонов = ШаблоныНазначенияПлатежа();
	
	Для каждого КлючИЗначение Из СписокШаблонов Цикл
		СписокЗначений.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение.Наименование);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыДоговора(Договор, Поле, Отказ) Экспорт
	
	РеквизитыДляПроверкиДоговора = Новый Структура;
	РеквизитыДляПроверкиДоговора.Вставить("БанковскийСчетКонтрагента");
	РеквизитыДляПроверкиДоговора.Вставить("БанковскийСчетКонтрагентаБанк", "БанковскийСчетКонтрагента.Банк");
	РеквизитыДляПроверкиДоговора.Вставить("БанковскийСчетКонтрагентаПометкаУдаления",
		"БанковскийСчетКонтрагента.ПометкаУдаления");
	РеквизитыДляПроверкиДоговора.Вставить("бг_ОтсрочкаПлатежа");
	РеквизитыДляПроверкиДоговора.Вставить("бг_ШаблонТекстаНазначенияПлатежа");
	РеквизитыДляПроверкиДоговора.Вставить("СтатьяДвиженияДенежныхСредств");
	РеквизитыДляПроверкиДоговора.Вставить("СтатьяДДСПредопределенный", "СтатьяДвиженияДенежныхСредств.Предопределенный");
	РеквизитыДляПроверкиДоговора.Вставить("ТипДоговора");
	РеквизитыДляПроверкиДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, РеквизитыДляПроверкиДоговора);
	
	Если Не ЗначениеЗаполнено(РеквизитыДляПроверкиДоговора.БанковскийСчетКонтрагента)
		Или Не ОбщегоНазначения.СсылкаСуществует(РеквизитыДляПроверкиДоговора.БанковскийСчетКонтрагента) Тогда
		ТекстОшибки = НСтр("ru = 'В договоре не заполнен банковский счет контрагента'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	КонецЕсли;
	
	Если РеквизитыДляПроверкиДоговора.БанковскийСчетКонтрагентаПометкаУдаления = Истина Тогда
		ТекстОшибки = НСтр("ru = 'Банковский счет контрагента в договоре помечен на удаление'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыДляПроверкиДоговора.БанковскийСчетКонтрагентаБанк)
		Или Не ОбщегоНазначения.СсылкаСуществует(РеквизитыДляПроверкиДоговора.БанковскийСчетКонтрагентаБанк) Тогда
		ТекстОшибки = НСтр("ru = 'В банковском счете контрагента в договре не заполнен банк'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыДляПроверкиДоговора.СтатьяДвиженияДенежныхСредств) Тогда
		ТекстОшибки = НСтр("ru = 'В договоре не заполнена статья движения денежных средств'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	КонецЕсли;
	
	Если РеквизитыДляПроверкиДоговора.СтатьяДДСПредопределенный = Истина Тогда
		ТекстОшибки = НСтр("ru = 'В договоре выбрана предопределенная статья движения денежных средств'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РеквизитыДляПроверкиДоговора.бг_ШаблонТекстаНазначенияПлатежа) Тогда
		ТекстОшибки = НСтр("ru = 'В договоре не заполнен шаблон назначения платежа (Магистраль)'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	КонецЕсли;
	
	Если РеквизитыДляПроверкиДоговора.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком Тогда
		Если Не ЗначениеЗаполнено(РеквизитыДляПроверкиДоговора.бг_ОтсрочкаПлатежа) Тогда
			ТекстОшибки = НСтр("ru = 'В договоре не заполнена отсрочка платежа (Магистраль)'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыСоглашения(Соглашение, Поле, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
		|ГДЕ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Ссылка
		|	И СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОплаты = &ВариантОплаты
		|	И СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Сдвиг > 0";
	
	Запрос.УстановитьПараметр("Ссылка", Соглашение);
	Запрос.УстановитьПараметр("ВариантОплаты", Перечисления.ВариантыКонтроляОплатыПоставщику.КредитСдвиг);
	
	Если Запрос.Выполнить().Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'В соглашении не заполнены этапы графика оплат'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , Поле, , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСвязанныхОбъектов(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = Объект.Ссылка;
	
	ПерезаполнитьДокументы = Ложь;
	КлючевыеРеквизитыИзменились = КлючевыеРеквизитыОбъектаИзменились(Объект, Ссылка, ПерезаполнитьДокументы);
	
	Если Не КлючевыеРеквизитыИзменились Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияОбъекта = ТипЗнч(Объект);
	ИмяПоля = "";
	Если ТипЗначенияОбъекта = Тип("СправочникОбъект.Контрагенты") Тогда
		ИмяПоля = "Контрагент";
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		ИмяПоля = "Договор";
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СоглашенияСПоставщиками") Тогда
		ИмяПоля = "ДокументОснование.Соглашение";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыгружаемыйОбъект.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Заявки
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ВыгружаемыйОбъект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК Расшифровка
	|		ПО (ВыгружаемыйОбъект.Ссылка = Расшифровка.Ссылка
	|				И ТИПЗНАЧЕНИЯ(Расшифровка.ОбъектРасчетов.Объект) В (&ТипыДокументов)
	|				И Расшифровка.ОбъектРасчетов.Объект.бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС)
	|ГДЕ
	|	ВыгружаемыйОбъект.Проведен
	|	И НЕ ВыгружаемыйОбъект.Закрыта
	|	И ВыгружаемыйОбъект.Статус В(&Статус)
	|	И &УсловиеЗапроса
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявки.Ссылка КАК Ссылка
	|ИЗ
	|	Заявки КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Остатки КАК ДенежныеСредстваКВыплатеОстатки
	|		ПО Заявки.Ссылка = ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств
	|			И (ДенежныеСредстваКВыплатеОстатки.СуммаОстаток <> 0)";
	
	УсловиеЗапроса = "ВыгружаемыйОбъект." + ИмяПоля + " = &ЗначениеРеквизита";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&УсловиеЗапроса", УсловиеЗапроса);
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	СписокСтатусов.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	
	ТипыДокументов = ТипыДокументовДляФормированияЗаявокНаРасходованиеДС();
	
	Запрос.УстановитьПараметр("Статус", СписокСтатусов);
	Запрос.УстановитьПараметр("ЗначениеРеквизита", Ссылка);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ПерезаполнитьДокументы Тогда
			бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(Выборка.Ссылка);
		Иначе
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
				Выборка.Ссылка,
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ПерезаполнитьЗаявкиНаРасходованиеДС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НадписьСтатусЗаявкиНаРасходованиеДС(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = НСтр("ru = 'n/a'");
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Новый ФорматированнаяСтрока(Результат, , WebЦвета.Красный);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыРасчетов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Объект = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыРасчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка,
	|	ЗаявкаНаРасходованиеДенежныхСредств.бг_НомерЗаявкиМагистраль КАК НомерЗаявкиМагистраль,
	|	ЗаявкаНаРасходованиеДенежныхСредств.бг_СтатусЗаявкиМагистраль КАК СтатусЗаявкиМагистраль,
	|	ЗаявкаНаРасходованиеДенежныхСредств.Закрыта КАК Закрыта,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|	КОНЕЦ КАК СтатусКОплате,
	|	ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента КАК СуммаДокумента,
	|	ЗаявкаНаРасходованиеДенежныхСредств.Валюта КАК ВалютаДокумента,
	|	СУММА(ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
	|		ПО (ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка)
	|ГДЕ
	|	(ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование = &Основание
	|			ИЛИ ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа.ОбъектРасчетов В
	|				(ВЫБРАТЬ
	|					ОбъектыРасчетов.Ссылка
	|				ИЗ
	|					ОбъектыРасчетов))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка,
	|	ЗаявкаНаРасходованиеДенежныхСредств.бг_НомерЗаявкиМагистраль,
	|	ЗаявкаНаРасходованиеДенежныхСредств.бг_СтатусЗаявкиМагистраль,
	|	ЗаявкаНаРасходованиеДенежныхСредств.Закрыта,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|	КОНЕЦ,
	|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗаявкиМагистраль";
	
	Запрос.УстановитьПараметр("Основание", ДокументСсылка);
	
	ВыборкаПоЗаявкам = Запрос.Выполнить().Выбрать();
	
	МассивСтрок = Новый Массив;
	Пока ВыборкаПоЗаявкам.Следующий() Цикл
		
		СуммаСтрокойВВалютеДокумента =
			ФормированиеПечатныхФорм.ФорматСумм(ВыборкаПоЗаявкам.СуммаДокумента, ВыборкаПоЗаявкам.ВалютаДокумента);
		
		СуммаСтрокойВВалютеВзаиморасчетов = "";
		Если ВыборкаПоЗаявкам.ВалютаДокумента <> ВыборкаПоЗаявкам.ВалютаВзаиморасчетов Тогда
			СуммаСтрокойВВалютеВзаиморасчетов =
				"/" + ФормированиеПечатныхФорм.ФорматСумм(ВыборкаПоЗаявкам.СуммаДокумента, ВыборкаПоЗаявкам.ВалютаДокумента);
		КонецЕсли;
		Содержимое = СтрШаблон(НСтр("ru = '№ %1, сумма %2%3 (%4)'"),
			ВыборкаПоЗаявкам.НомерЗаявкиМагистраль,
			СуммаСтрокойВВалютеДокумента,
			СуммаСтрокойВВалютеВзаиморасчетов,
			ВыборкаПоЗаявкам.СтатусЗаявкиМагистраль);
		
		ФорматированнаяСтрока = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href = ""%1"">%2</a>'"),
			ПолучитьНавигационнуюСсылку(ВыборкаПоЗаявкам.Заявка),
			Содержимое);
		
		МассивСтрок.Добавить(ФорматированнаяСтрока);
		
	КонецЦикла;
	
	Если МассивСтрок.Количество() > 0 Тогда
    	Результат = МассивСтрок;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(Результат);
	
КонецФункции

Процедура УстановитьДоступностьРеквизитовМагистральНаФорме(Форма) Экспорт
	
	Если Форма.Элементы.Найти("бг_ГруппаШапкаМагистраль") <> Неопределено Тогда
		
		ДоговорАвтоматическиФормироватьЗаявкиНаРасходованиеДС =
			АвтоматическиФормироватьЗаявкиНаРасходованиеДС(Форма.Объект.Договор);
		
		ДоступностьРеквизитовМагистраль = Пользователи.РолиДоступны("бг_ДобавлениеИзменениеНастроекМагистраль")
			И ДоговорАвтоматическиФормироватьЗаявкиНаРасходованиеДС;
			
		ВидимостьРеквизитовМагистраль = Форма.Объект.бг_АвтоматическиФормироватьЗаявкиНаРасходованиеДС
			Или ДоговорАвтоматическиФормироватьЗаявкиНаРасходованиеДС;
		
		Форма.Элементы.бг_ГруппаШапкаМагистраль.Видимость = ВидимостьРеквизитовМагистраль;
		Форма.Элементы.бг_ГруппаШапкаМагистраль.ТолькоПросмотр = Не ДоступностьРеквизитовМагистраль;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьШапкуДокумента(ЗаявкаНаРасходованиеДСОбъект, ДанныеЗаполнения)
	
	РасшифровкаПлатежа = ЗаявкаНаРасходованиеДСОбъект.РасшифровкаПлатежа;
	
	Если РасшифровкаПлатежа.Количество() = 0 Или РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") = 0 Тогда
		ЗаявкаНаРасходованиеДСОбъект.Статус = 
			ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована");
		Возврат;
	КонецЕсли;
	
	Если ЗаявкаНаРасходованиеДСОбъект.ЭтоНовый() Тогда
		ЗаявкаНаРасходованиеДСОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	РеквизитыДоговора = Новый Структура;
	РеквизитыДоговора.Вставить("Дата");
	РеквизитыДоговора.Вставить("Номер");
	РеквизитыДоговора.Вставить("Подразделение");
	РеквизитыДоговора.Вставить("БанковскийСчет");
	РеквизитыДоговора.Вставить("БанковскийСчетКонтрагента");
	РеквизитыДоговора.Вставить("бг_ШаблонТекстаНазначенияПлатежа");
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Договор, РеквизитыДоговора);
	
	ДатаПлатежа = ДатаПлатежа(ДанныеЗаполнения.Дата, ДанныеЗаполнения.Договор, ДанныеЗаполнения.Соглашение);
	
	ЗаявкаНаРасходованиеДСОбъект.Валюта = ДанныеЗаполнения.Валюта;
	ЗаявкаНаРасходованиеДСОбъект.Договор = ДанныеЗаполнения.Договор;
	ЗаявкаНаРасходованиеДСОбъект.ДатаПлатежа = ДатаПлатежа;
	ЗаявкаНаРасходованиеДСОбъект.ЖелательнаяДатаПлатежа = ДатаПлатежа;
	ЗаявкаНаРасходованиеДСОбъект.ФормаОплатыБезналичная = Истина;
	ЗаявкаНаРасходованиеДСОбъект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная");
	ЗаявкаНаРасходованиеДСОбъект.Подразделение = РеквизитыДоговора.Подразделение;
	ЗаявкаНаРасходованиеДСОбъект.БанковскийСчет = РеквизитыДоговора.БанковскийСчет;
	ЗаявкаНаРасходованиеДСОбъект.БанковскийСчетКонтрагента = РеквизитыДоговора.БанковскийСчетКонтрагента;
	ЗаявкаНаРасходованиеДСОбъект.Статус =
		ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована");
	
	ЗаявкаНаРасходованиеДСОбъект.бг_БанковскийСчетФактора =
		бг_Магистраль.БанковскийСчетФактора(ДанныеЗаполнения.Договор, ДанныеЗаполнения.ДатаВходящегоДокумента);
	
	ВалютаВзаиморасчетов = РасшифровкаПлатежа[0].ВалютаВзаиморасчетов;
	ВалютаВзаиморасчетовНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаВзаиморасчетов, "Наименование");
	
	СуммаНДС = РасшифровкаПлатежа.Итог("СуммаНДС");
	Если ЗаявкаНаРасходованиеДСОбъект.Валюта <> ВалютаВзаиморасчетов Тогда
		ПроцентНДСЧислитель = 0.2;
		ПроцентНДСЗнаменатель = 1.2;
		СуммаНДС = Окр(РасшифровкаПлатежа.Итог("СуммаВзаиморасчетов") * ПроцентНДСЧислитель / ПроцентНДСЗнаменатель, 2);
	КонецЕсли;
	
	СписокШаблонов = ШаблоныНазначенияПлатежа();
	ПараметрыШаблона = Неопределено;
	Если ЗначениеЗаполнено(РеквизитыДоговора.бг_ШаблонТекстаНазначенияПлатежа) Тогда
		СписокШаблонов.Свойство(РеквизитыДоговора.бг_ШаблонТекстаНазначенияПлатежа, ПараметрыШаблона);
	КонецЕсли;
	
	НазначениеПлатежа = "";
	Если ЗначениеЗаполнено(ПараметрыШаблона) Тогда
		НазначениеПлатежа = ПараметрыШаблона.Шаблон;
	Иначе
		НазначениеПлатежа = СтрШаблон(НСтр("ru = 'Не удалось определить шаблон по имени ""%1""'"), 
										РеквизитыДоговора.бг_ШаблонТекстаНазначенияПлатежа);
	КонецЕсли;
	
	ЗаявкаНаРасходованиеДСОбъект.НазначениеПлатежа =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НазначениеПлатежа,
			РеквизитыДоговора.Номер,
			Формат(РеквизитыДоговора.Дата, "ДФ=dd.MM.yyyy"),
			ДанныеЗаполнения.НомерВходящегоДокумента,
			Формат(ДанныеЗаполнения.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"),
			Формат(СуммаНДС, "ЧДЦ=2; ЧГ=0"),
			ВалютаВзаиморасчетовНаименование);
	
КонецПроцедуры

Процедура ЗаполнитьРасшифровкуПлатежа(ЗаявкаНаРасходованиеДСОбъект, ДанныеЗаполнения)
	
	СтатьяДвиженияДенежныхСредств =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Договор, "СтатьяДвиженияДенежныхСредств");
	
	Для каждого СтрокаРасшифровкаПлатежа Из ЗаявкаНаРасходованиеДСОбъект.РасшифровкаПлатежа Цикл
		СтрокаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
	КонецЦикла;
	
КонецПроцедуры

Функция ТипыДокументовДляФормированияЗаявокНаРасходованиеДС()
	
	Результат = Новый Массив;
	Результат.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
	Результат.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	
	Возврат Результат;
	
КонецФункции

Функция ЗаявкаНаРасходованиеДСПоДокументуОснованию(ДокументОснование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыРасчетов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Объект = &Основание
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыРасчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Заявка,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
	|	КОНЕЦ КАК СтатусКОплате
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	(ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование = &Основание
	|			ИЛИ ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа.ОбъектРасчетов В
	|				(ВЫБРАТЬ
	|					ОбъектыРасчетов.Ссылка
	|				ИЗ
	|					ОбъектыРасчетов))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусКОплате,
	|	ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	
	ВыборкаПоЗаявкам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоЗаявкам.Следующий() Цикл
		Если Не ЗапрещеноИзменениеЗаявкиНаРасходованиеДС(ВыборкаПоЗаявкам.Заявка) Тогда
			Возврат ВыборкаПоЗаявкам.Заявка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ЗапрещеноИзменениеЗаявкиНаРасходованиеДС(ЗаявкаНаРасходованиеДС, Отказ = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	
	Если Не ЗначениеЗаполнено(ЗаявкаНаРасходованиеДС) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПроверяемыеРеквизиты = Новый Структура;
	ПроверяемыеРеквизиты.Вставить("Статус");
	ПроверяемыеРеквизиты.Вставить("Закрыта");
	ПроверяемыеРеквизиты.Вставить("ДатаПлатежа");
	
	ПроверяемыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаНаРасходованиеДС, ПроверяемыеРеквизиты);
	
	Если ПроверяемыеРеквизиты.Закрыта Тогда
		ТекстПредупреждения = НСтр("ru = '%1 в статусе ""Закрыта"" - обновление заявки пропущено'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстПредупреждения, ЗаявкаНаРасходованиеДС), ЗаявкаНаРасходованиеДС);
		Результат = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.ДатаПлатежа)
		И ((НачалоДня(ПроверяемыеРеквизиты.ДатаПлатежа) - НачалоДня(ТекущаяДатаСеанса())) <= 86400) Тогда
		ТекстПредупреждения = НСтр("ru = 'До перечисления платежа по документу %1 осталось менее суток - обновление заявки пропущено'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстПредупреждения, ЗаявкаНаРасходованиеДС), ЗаявкаНаРасходованиеДС);
		Результат = Истина;
	КонецЕсли;
	
	Если ПроверяемыеРеквизиты.Статус = 
		ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате") Тогда
		ТекстПредупреждения = НСтр("ru = '%1 в статусе ""К оплате"" - обновление заявки пропущено'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстПредупреждения, ЗаявкаНаРасходованиеДС), ЗаявкаНаРасходованиеДС);
		Результат = Истина;
	КонецЕсли;
	
	ОстатокОплаты = ОстатокОплатыПоЗаявке(ЗаявкаНаРасходованиеДС);
	Если ОстатокОплаты = 0 Тогда
		ТекстПредупреждения = НСтр("ru = '%1 оплачена полностью - обновление заявки пропущено'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстПредупреждения, ЗаявкаНаРасходованиеДС), ЗаявкаНаРасходованиеДС);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыОбъектаРасчетов(ОбъектРасчетов)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект КАК ОбъектОплаты,
	|	ОбъектыРасчетов.Дата КАК Дата,
	|	ОбъектыРасчетов.Номер КАК Номер,
	|	ОбъектыРасчетов.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ОбъектыРасчетов.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ОбъектыРасчетов.Договор КАК Договор,
	|	ОбъектыРасчетов.Соглашение КАК Соглашение,
	|	ОбъектыРасчетов.Сумма КАК Сумма,
	|	ОбъектыРасчетов.Валюта КАК Валюта,
	|	ОбъектыРасчетов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ОбъектыРасчетов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Ссылка = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектРасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция Отсрочка(Договор, Соглашение)
	
	Отсрочка = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Отсрочка = ОтсрочкаПоСоглашению(Соглашение);
	КонецЕсли;
	
	Если Отсрочка = 0 Тогда
		Отсрочка = ОтсрочкаПоНастройкамМагистрали(Договор);
	КонецЕсли;
	
	Возврат Отсрочка;
	
КонецФункции

Функция ОтсрочкаПоСоглашению(Соглашение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
		|ГДЕ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Ссылка
		|	И СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОплаты = &ВариантОплаты";
	
	Запрос.УстановитьПараметр("Ссылка", Соглашение);
	Запрос.УстановитьПараметр("ВариантОплаты", ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитСдвиг"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Сдвиг;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Функция ОтсрочкаПоНастройкамМагистрали(Договор)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "бг_ОтсрочкаПлатежа");
	
КонецФункции

Функция ОстатокОплатыПоЗаявке(ЗаявкаНаРасходованиеДС)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДенежныеСредства.СуммаОстаток КАК НеОплачено
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	) КАК ДенежныеСредства
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаРасходованиеДС);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивРезультатов[0].Пустой() Тогда
		Результат = -1;
	Иначе
		Результат = МассивРезультатов[1].Выгрузить()[0].НеОплачено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючевыеРеквизитыОбъектаИзменились(Объект, Ссылка, ПерезаполнитьДокументы)
	
	ТипЗначенияОбъекта = ТипЗнч(Объект);
	
	ВыгрузитьДокументы = Ложь;
	
	Если ТипЗначенияОбъекта = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ПроверяемыеРеквизиты = Новый Структура;
		ПроверяемыеРеквизиты.Вставить("ИНН");
		ПроверяемыеРеквизиты.Вставить("КПП");
		ПроверяемыеРеквизиты.Вставить("НаименованиеПолное");
		
		ПроверяемыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ПроверяемыеРеквизиты);
		
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			Если Объект[ПроверяемыйРеквизит.Ключ] <> ПроверяемыйРеквизит.Значение Тогда
				ВыгрузитьДокументы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		
		ПроверяемыеРеквизиты = Новый Структура;
		ПроверяемыеРеквизиты.Вставить("БанковскийСчетКонтрагента");
		ПроверяемыеРеквизиты.Вставить("СтатьяДвиженияДенежныхСредств");
		ПроверяемыеРеквизиты.Вставить("бг_ОтсрочкаПлатежа");
		ПроверяемыеРеквизиты.Вставить("бг_ШаблонТекстаНазначенияПлатежа");
		
		ПроверяемыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ПроверяемыеРеквизиты);
		
		Для каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
			Если Объект[ПроверяемыйРеквизит.Ключ] <> ПроверяемыйРеквизит.Значение Тогда
				ПерезаполнитьДокументы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПерезаполнитьДокументы Тогда
			ПерезаполнитьДокументы = Не ОбщегоНазначения.КоллекцииИдентичны(
				Объект.бг_НастройкиОплатыЧерезФакторинговуюКомпанию,
				Ссылка.бг_НастройкиОплатыЧерезФакторинговуюКомпанию,
				"КонтрагентФактор, БанковскийСчетФактора, ДатаНачалаДействия, ДатаОкончанияДействия");
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.СоглашенияСПоставщиками") Тогда
		
		ПерезаполнитьДокументы = Не ОбщегоНазначения.КоллекцииИдентичны(
			Объект.ЭтапыГрафикаОплаты,
			Ссылка.ЭтапыГрафикаОплаты,
			"ВариантОплаты, Сдвиг");
		
	КонецЕсли;
	
	Возврат ВыгрузитьДокументы Или ПерезаполнитьДокументы;
	
КонецФункции

Процедура КонтрольЗаявокНаРасходованиеДС(Источник, Отказ, РежимПроведения)
	
	Если Отказ Или Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ДополнительныеСвойства.Свойство("ТаблицаОбъектовОплаты") Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Если ЗначениеЗаполнено(Регистратор)
		И ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		// Пропускаем создание/обновление заявки на расходование ДС
		//  если регистратором является сама заявка на расходование ДС
		Возврат;
	КонецЕсли;
	
	МассивОбрабатываемыхТипов = ТипыДокументовДляФормированияЗаявокНаРасходованиеДС();
	
	ПроверятьСвойстваРегистратораПриПроведении =
		ЗначениеЗаполнено(Регистратор) И Не МассивОбрабатываемыхТипов.Найти(ТипЗнч(Регистратор)) = Неопределено;
	
	ОбъектыРасчетов = Источник.ДополнительныеСвойства.ТаблицаОбъектовОплаты.Скопировать();
	ОбъектыРасчетов.Свернуть("ОбъектРасчетов");
	
	Для каждого СтрокаОбъектыРасчетов Из ОбъектыРасчетов Цикл
		
		ДанныеЗаполнения = РеквизитыОбъектаРасчетов(СтрокаОбъектыРасчетов.ОбъектРасчетов);
		
		Если МассивОбрабатываемыхТипов.Найти(ТипЗнч(ДанныеЗаполнения.ОбъектОплаты)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		
		Если ПроверятьСвойстваРегистратораПриПроведении Тогда
			ДополнительныеПараметры.Вставить("СвойстваДокументаОснованияПриПроведении",
				Источник.ДополнительныеСвойства.СвойстваДокумента);
		КонецЕсли;
		
		ЗаявкаНаРасходованиеДС = Неопределено;
		СоздатьОбновитьЗаявкуНаРасходованиеДС(ЗаявкаНаРасходованиеДС, ДанныеЗаполнения, Отказ, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура КонтрольИзмененияДанныхЗаявокНаРасходованиеДС(Источник, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьИзменениеСвязанныхОбъектов(Источник);
	
КонецПроцедуры

Процедура РасчетыСПоставщикамиПриЗаписиНабора(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КонтрольЗаявокНаРасходованиеДС(Источник, Отказ, РежимПроведения);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ПерезаполнитьЗаявкуПриИзмененииСвязанныхОбъектов(ЗаявкаНаРасходованиеДС, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаявкаНаРасходованиеДС) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИнтеграцияВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И НЕ ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)";

	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаРасходованиеДС);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДанныеЗаполнения = РеквизитыОбъектаРасчетов(ВыборкаДетальныеЗаписи.ОбъектРасчетов);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ОбъектОплаты) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбрабатываемыхТипов = ТипыДокументовДляФормированияЗаявокНаРасходованиеДС();
	Если МассивОбрабатываемыхТипов.Найти(ТипЗнч(ДанныеЗаполнения.ОбъектОплаты)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьОбновитьЗаявкуНаРасходованиеДС(ЗаявкаНаРасходованиеДС, ДанныеЗаполнения, Отказ);
	
КонецПроцедуры

#КонецОбласти
