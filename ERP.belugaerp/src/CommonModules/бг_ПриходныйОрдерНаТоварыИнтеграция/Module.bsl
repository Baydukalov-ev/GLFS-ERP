#Область ПрограммныИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ОставитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		ВыгружаемыеРеквизиты());
		
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт

	ТекстЗапроса = бг_ОбщегоНазначенияСервер.ТекстЗапросаБезОбращенияЧерезТочкуКNull(ТекстЗапроса);
	ТекстЗапросаТаблицаКлючей = бг_ОбщегоНазначенияСервер.ТекстЗапросаБезОбращенияЧерезТочкуКNull(ТекстЗапросаТаблицаКлючей);
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ПараметрыВыполненияЗапросов = адаптер_РаботаСДаннымиИБ.ПолучитьПараметрыВыполненияЗапросов(Объект, ДанныеСообщения);	
	
	ДанныеВыгружаемогоОбъекта = Новый Структура;
	ДанныеВыгружаемогоОбъекта.Вставить("ПолноеИмя", ПараметрыВыполненияЗапросов.ПолноеИмя);
	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Новый Массив);
	
	Если Не ТребуетсяВыгружать(Объект) Тогда
		Возврат ДанныеВыгружаемогоОбъекта;
	КонецЕсли;
	
	ВыгружаемыеДанные = ВыгружаемыеДанные(Объект);
	
	Если ВыгружаемыеДанные.РезультатПоШапке.Пустой() Тогда
		Возврат ДанныеВыгружаемогоОбъекта;	
	КонецЕсли;
	
	Реквизиты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		ВыгружаемыеДанные.РезультатПоШапке,
		ПараметрыВыполненияЗапросов.ТаблицаКлючей,
		ДанныеСообщения);
		
	Если Реквизиты.Количество() > 0 Тогда
			
		Товары = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
			ВыгружаемыеДанные.РезультатПоТоварам,
			ПараметрыВыполненияЗапросов.ТаблицаКлючей,
			ДанныеСообщения);
			
		Реквизиты[0].Вставить("Товары", Товары);	
	КонецЕсли;
	
	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Реквизиты);
	
	ДанныеСообщения.RoutingKey = КлючМаршрутизации(ВыгружаемыеДанные, ДанныеСообщения.RoutingKey);
	
	Возврат ДанныеВыгружаемогоОбъекта;
	
КонецФункции

Процедура ВыгрузитьСвязанныеОбъекты(Объект) Экспорт

	Если Не Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьПТиУПриСменеНаФинальныйСтатус(Объект);
	ЗарегистрироватьПеремещениеТоваровВФинальномСтатусе(Объект);
	ЗарегистрироватьПересортицуТоваровВФинальномСтатусе(Объект);
	
КонецПроцедуры

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("Склад");
	ВыгружаемыеРеквизиты.Добавить("СкладскаяОперация");
	ВыгружаемыеРеквизиты.Добавить("Статус");
	ВыгружаемыеРеквизиты.Добавить("Ответственный");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("ХозяйственнаяОперация");
	ВыгружаемыеРеквизиты.Добавить("бг_РазрешитьПараллельнуюСборку");
	ВыгружаемыеРеквизиты.Добавить("бг_Исполнитель");
	ВыгружаемыеРеквизиты.Добавить("бг_ТипПриемки");
	ВыгружаемыеРеквизиты.Добавить("бг_ЕстьАлкогольнаяПродукция");
	ВыгружаемыеРеквизиты.Добавить("бг_ЕстьМаркируемаяАлкогольнаяПродукция");
	
	// Реквизиты ТЧ "Товары"
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.Серия");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	
	ВыгружаемыеРеквизиты = СтрСоединить(ВыгружаемыеРеквизиты, ",");

	Возврат ВыгружаемыеРеквизиты;

КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
    Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты шапки
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Представление",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Штрихкод",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ТТНВходящаяЕГАИС",
		Новый ОписаниеТипов("ДокументСсылка.ТТНВходящаяЕГАИС"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Приоритет",
		Новый ОписаниеТипов("СправочникСсылка.Приоритеты"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ПунктРазгрузки",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"КодКатегорииСкладаSolvo",
		ОбщегоНазначения.ОписаниеТипаСтрока(2));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ОрганизацияСклада",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Контрагент",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ПлановаяДатаПоступления",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
	СписокТиповЗаказ = Новый Массив;
	СписокТиповЗаказ.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	СписокТиповЗаказ.Добавить(Тип("ДокументСсылка.ЗаказНаПеремещение"));
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Заказ",
		Новый ОписаниеТипов(СписокТиповЗаказ)); 
	
	// Реквизиты ТЧ "Товары"
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Товары.Упаковка",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Товары.НомерСтроки",
		ОбщегоНазначения.ОписаниеТипаЧисло(15));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Товары.ЗаказНазначенияПредставление",
		ОбщегоНазначения.ОписаниеТипаСтрока(200));	
		
КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Описанные ниже реквизиты не являются ключевыми, по ним не производится поиск в приемнике.
	// Но приемниками этого сообщения являются WMS системы, которым очевиднее видеть свойства данных реквзитов
	// внутри вложенной структуры, а не в корне сообщения.
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СерииНоменклатуры,
		"Наименование");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СерииНоменклатуры,
		"КодВидаМарки");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"КодЕК_Номенклатуры");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"КодЕК_ПОСМ",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_НоменклатураИнтеграция.ДлинаКодаЕК_ПОСМ()));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"Код");
						
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битТипыПриемкиWMS,
		"Наименование");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битТипыПриемкиWMS,
		"ИмяПредопределенныхДанных");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битТипыПриемкиWMS,
		"ПроверятьПаллеты");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битТипыПриемкиWMS,
		"ПроверятьКоробки");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битТипыПриемкиWMS,
		"КоличествоПроверяемыхКоробокВПаллете");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битТипыПриемкиWMS,
		"КоличествоПроверяемыхБутылокВКоробке");
				
КонецПроцедуры

Функция ВыгружаемыеДанные(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанных();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Штрихкод", ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(Ссылка));
	Запрос.УстановитьПараметр("ТипПриемкиБезПроверки", Справочники.битТипыПриемкиWMS.БезПроверки);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	МаксимальныйИндексЗапроса = РезультатыЗапросов.ВГраница();
	
	ВыгружаемыеДанные = Новый Структура;
	ВыгружаемыеДанные.Вставить("РезультатПоШапке", РезультатыЗапросов[МаксимальныйИндексЗапроса - 1]);
	ВыгружаемыеДанные.Вставить("РезультатПоТоварам", РезультатыЗапросов[МаксимальныйИндексЗапроса]);
	
	Возврат ВыгружаемыеДанные;

КонецФункции

Функция ТекстЗапросаВыгружаемыхДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки КАК НомерСтроки,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS КАК ВариантСинхронизацииWMS,
	|	ЕСТЬNULL(ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии,
	|	ПриходныйОрдерНаТоварыТовары.Серия КАК Серия,
	|	ПриходныйОрдерНаТоварыТовары.Назначение КАК Назначение,
	|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Номенклатура,
	|	МАКСИМУМ(УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры) КАК КодЕК_Номенклатуры
	|ПОМЕСТИТЬ КодыЕКНоменклатурыБезИспользованияСерий
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО ТоварыДокумента.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|			И (ТоварыДокумента.ИспользоватьСерии = ЛОЖЬ)
	|			И (ТоварыДокумента.ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры))
	|			И (УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка))
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиЕдиницыИзмерения.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(УпаковкиЕдиницыИзмерения.Ссылка) КАК БазоваяУпаковка
	|ПОМЕСТИТЬ ВТ_БазовыеУпаковки
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (ТоварыДокумента.Ссылка = &Ссылка)
	|			И ТоварыДокумента.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|			И ТоварыДокумента.Номенклатура.ЕдиницаИзмерения = УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения
	|			И (НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления)
	|			И (УпаковкиЕдиницыИзмерения.Числитель = 1)
	|			И (УпаковкиЕдиницыИзмерения.Знаменатель = 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТТНВходящаяЕГАИС.Ссылка) КАК ТТНВходящаяЕГАИС,
	|	ТТНВходящаяЕГАИС.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ТТНВходящаяЕГАИС
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|ГДЕ
	|	ТТНВходящаяЕГАИС.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ПриходныйОрдерНаТовары.Распоряжение КАК Распоряжение
	|			ИЗ
	|				Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|			ГДЕ
	|				ПриходныйОрдерНаТовары.Ссылка = &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТТНВходящаяЕГАИС.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ПриобретениеТоваровУслуг.Контрагент
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ВозвратТоваровОтКлиента.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ПриобретениеТоваровУслуг
	|			ТОГДА ЕСТЬNULL(ЗаказПоставщикуДокумент.ДатаПоступления, ПриходныйОрдерНаТовары.Дата)
	|		КОГДА ПриходныйОрдерНаТовары.Распоряжение ССЫЛКА Документ.ЗаказНаПеремещение
	|			ТОГДА ЕСТЬNULL(ЗаказНаПеремещениеДокумент.ЖелаемаяДатаПоступления, ПриходныйОрдерНаТовары.Дата)
	|		ИНАЧЕ ПриходныйОрдерНаТовары.Дата
	|	КОНЕЦ КАК ПлановаяДатаПоступления,
	|	ЕСТЬNULL(ЗаказПоставщикуДокумент.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ЗаказПоставщику,
	|	ЕСТЬNULL(ЗаказНаПеремещениеДокумент.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)) КАК ЗаказНаПеремещение,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщикуДокумент.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ТИПЗНАЧЕНИЯ(ЗаказПоставщикуДокумент.Ссылка)
	|		КОГДА ЗаказНаПеремещениеДокумент.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ТИПЗНАЧЕНИЯ(ЗаказНаПеремещениеДокумент.Ссылка)
	|		ИНАЧЕ ТИПЗНАЧЕНИЯ(ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|	КОНЕЦ КАК ЗаказТипЗначения
	|ПОМЕСТИТЬ ВТ_ДанныеРаспоряжения
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщикуДокумент
	|			ПО ПриобретениеТоваровУслуг.ЗаказПоставщику = ЗаказПоставщикуДокумент.Ссылка
	|		ПО ПриходныйОрдерНаТовары.Распоряжение = ПриобретениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|		ПО ПриходныйОрдерНаТовары.Распоряжение = ВозвратТоваровОтКлиента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение КАК ЗаказНаПеремещениеДокумент
	|		ПО ПриходныйОрдерНаТовары.Распоряжение = ЗаказНаПеремещениеДокумент.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Идентификатор,
	|	ПриходныйОрдерНаТовары.Дата КАК Дата,
	|	ПриходныйОрдерНаТовары.Номер КАК Номер,
	|	ПриходныйОрдерНаТовары.Представление КАК Представление,
	|	ПриходныйОрдерНаТовары.Проведен КАК Проведен,
	|	ПриходныйОрдерНаТовары.ПометкаУдаления КАК ПометкаУдаления,
	|	ПриходныйОрдерНаТовары.бг_РазрешитьПараллельнуюСборку КАК бг_РазрешитьПараллельнуюСборку,
	|	ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.бг_Исполнитель КАК Справочник.Пользователи) КАК бг_Исполнитель_ЗначениеРеквизитаИдентификатор_Сч1,
	|	ВЫРАЗИТЬ(ПриходныйОрдерНаТовары.бг_Исполнитель КАК Справочник.ГруппыПользователей) КАК бг_Исполнитель_ЗначениеРеквизитаИдентификатор_Сч2,
	|	ТИПЗНАЧЕНИЯ(ПриходныйОрдерНаТовары.бг_Исполнитель) КАК бг_Исполнитель_ЗначениеРеквизитаТипЗначения,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад_ЗначениеРеквизитаИдентификатор,
	|	ПриходныйОрдерНаТовары.Статус КАК Статус_ЗначениеРеквизитаЗначениеПеречисления,
	|	ЕСТЬNULL(ВТ_ТТНВходящаяЕГАИС.ТТНВходящаяЕГАИС, ЗНАЧЕНИЕ(Документ.ТТНВходящаяЕГАИС.ПустаяСсылка)) КАК ТТНВходящаяЕГАИС_ЗначениеРеквизитаИдентификатор,
	|	&Штрихкод КАК Штрихкод,
	|	ПриходныйОрдерНаТовары.Склад.бг_ПунктРазгрузки КАК ПунктРазгрузки_ЗначениеРеквизитаИдентификатор,
	|	ПриходныйОрдерНаТовары.Склад.бг_Организация КАК ОрганизацияСклада_ЗначениеРеквизитаИдентификатор,
	|	ПриходныйОрдерНаТовары.Склад.бг_КодКатегорииСкладаSolvo КАК КодКатегорииСкладаSolvo,
	|	ПриходныйОрдерНаТовары.бг_Приоритет КАК Приоритет_ЗначениеРеквизитаИдентификатор,
	|	ПриходныйОрдерНаТовары.бг_Приоритет.Наименование КАК Приоритет_ЗначениеРеквизитаНаименование,
	|	ПриходныйОрдерНаТовары.Комментарий КАК Комментарий,
	|	ПриходныйОрдерНаТовары.ХозяйственнаяОперация КАК ХозяйственнаяОперация_ЗначениеРеквизитаЗначениеПеречисления,
	|	ПриходныйОрдерНаТовары.Ответственный КАК Ответственный_ЗначениеРеквизитаИдентификатор,
	|	ПриходныйОрдерНаТовары.Ответственный.Наименование КАК Ответственный_ЗначениеРеквизитаНаименование,
	|	ВТ_ДанныеРаспоряжения.Контрагент КАК Контрагент_ЗначениеРеквизитаИдентификатор,
	|	ВТ_ДанныеРаспоряжения.Контрагент КАК Контрагент_ЗначениеРеквизитаТаблицаКлючей,
	|	ПриходныйОрдерНаТовары.бг_ТипПриемки КАК бг_ТипПриемки_ЗначениеРеквизитаИдентификатор,
	|	ПриходныйОрдерНаТовары.бг_ТипПриемки.Наименование КАК бг_ТипПриемки_ЗначениеРеквизитаНаименование,
	|	ПриходныйОрдерНаТовары.бг_ТипПриемки.ПроверятьПаллеты КАК бг_ТипПриемки_ЗначениеРеквизитаПроверятьПаллеты,
	|	ПриходныйОрдерНаТовары.бг_ТипПриемки.ПроверятьКоробки КАК бг_ТипПриемки_ЗначениеРеквизитаПроверятьКоробки,
	|	ПриходныйОрдерНаТовары.бг_ТипПриемки.КоличествоПроверяемыхКоробокВПаллете КАК бг_ТипПриемки_ЗначениеРеквизитаКоличествоПроверяемыхКоробокВПаллете,
	|	ПриходныйОрдерНаТовары.бг_ТипПриемки.КоличествоПроверяемыхБутылокВКоробке КАК бг_ТипПриемки_ЗначениеРеквизитаКоличествоПроверяемыхБутылокВКоробке,
	|	ПриходныйОрдерНаТовары.бг_ТипПриемки.ИмяПредопределенныхДанных КАК бг_ТипПриемки_ЗначениеРеквизитаИмяПредопределенныхДанных,
	|	ПриходныйОрдерНаТовары.Склад.бг_Организация.Префикс КАК ПрефиксОрганизации,
	|	ВТ_ДанныеРаспоряжения.ПлановаяДатаПоступления КАК ПлановаяДатаПоступления,
	|	ВЫРАЗИТЬ(ВТ_ДанныеРаспоряжения.ЗаказПоставщику КАК Документ.ЗаказПоставщику) КАК Заказ_ЗначениеРеквизитаИдентификатор_Сч1,
	|	ВЫРАЗИТЬ(ВТ_ДанныеРаспоряжения.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Ссылка КАК Заказ_ЗначениеРеквизитаТаблицаКлючей,
	|	ВЫРАЗИТЬ(ВТ_ДанныеРаспоряжения.ЗаказНаПеремещение КАК Документ.ЗаказНаПеремещение) КАК Заказ_ЗначениеРеквизитаИдентификатор_Сч2,
	|	ВЫРАЗИТЬ(ВТ_ДанныеРаспоряжения.ЗаказНаПеремещение КАК Документ.ЗаказНаПеремещение).Ссылка КАК Заказ_ЗначениеРеквизитаТаблицаКлючей_Сч2,
	|	ВТ_ДанныеРаспоряжения.ЗаказТипЗначения КАК Заказ_ЗначениеРеквизитаТипЗначения,
	|	ПриходныйОрдерНаТовары.СкладскаяОперация КАК СкладскаяОперация_ЗначениеРеквизитаЗначениеПеречисления,
	|	ПриходныйОрдерНаТовары.бг_ЕстьАлкогольнаяПродукция КАК бг_ЕстьАлкогольнаяПродукция,
	|	ПриходныйОрдерНаТовары.бг_ЕстьМаркируемаяАлкогольнаяПродукция КАК бг_ЕстьМаркируемаяАлкогольнаяПродукция
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТТНВходящаяЕГАИС КАК ВТ_ТТНВходящаяЕГАИС
	|		ПО ПриходныйОрдерНаТовары.Распоряжение = ВТ_ТТНВходящаяЕГАИС.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРаспоряжения КАК ВТ_ДанныеРаспоряжения
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка
	|	И ПриходныйОрдерНаТовары.бг_ТипПриемки <> &ТипПриемкиБезПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура_ЗначениеРеквизитаИдентификатор,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура_ЗначениеРеквизитаТаблицаКлючей,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ТоварыДокумента.ИспользоватьСерии = ИСТИНА
	|				ТОГДА ТоварыДокумента.Серия.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры
	|			ИНАЧЕ КодыЕКНоменклатурыБезИспользованияСерий.КодЕК_Номенклатуры
	|		КОНЕЦ, """") КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры,
	|	ВЫБОР
	|		КОГДА ТоварыДокумента.ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_ПОСМ)
	|			ТОГДА ВЫРАЗИТЬ(ТоварыДокумента.Номенклатура.Код КАК СТРОКА(999))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Номенклатура_ЗначениеРеквизитаКодЕК_ПОСМ,
	|	ТоварыДокумента.Номенклатура.Код КАК Номенклатура_ЗначениеРеквизитаКод,
	|	ТоварыДокумента.Серия.Наименование КАК Серия_ЗначениеРеквизитаНаименование,
	|	ТоварыДокумента.Серия.бг_ВидМарки.Код КАК Серия_ЗначениеРеквизитаКодВидаМарки,
	|	ТоварыДокумента.Серия КАК Серия_ЗначениеРеквизитаИдентификатор,
	|	ТоварыДокумента.Серия КАК Серия_ЗначениеРеквизитаТаблицаКлючей,
	|	ЕСТЬNULL(ВТ_БазовыеУпаковки.БазоваяУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка_ЗначениеРеквизитаИдентификатор,
	|	ЕСТЬNULL(ВТ_БазовыеУпаковки.БазоваяУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка_ЗначениеРеквизитаТаблицаКлючей,
	|	ТоварыДокумента.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА Назначения.Заказ ССЫЛКА Документ.ЗаказКлиента
	|			ТОГДА ВЫРАЗИТЬ(Назначения.Заказ КАК Документ.ЗаказКлиента).Представление
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЗаказНазначенияПредставление
	|ИЗ
	|	ТоварыДокумента КАК ТоварыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БазовыеУпаковки КАК ВТ_БазовыеУпаковки
	|		ПО ТоварыДокумента.Номенклатура = ВТ_БазовыеУпаковки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО ТоварыДокумента.Назначение = Назначения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КодыЕКНоменклатурыБезИспользованияСерий КАК КодыЕКНоменклатурыБезИспользованияСерий
	|		ПО ТоварыДокумента.Номенклатура = КодыЕКНоменклатурыБезИспользованияСерий.Номенклатура";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"Номенклатура.Код КАК СТРОКА(999)",
		СтрШаблон(
			"Номенклатура.Код КАК СТРОКА(%1)",
			Формат(бг_НоменклатураИнтеграция.ДлинаКодаЕК_ПОСМ(), "ЧГ=0")));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция КлючМаршрутизации(ВыгружаемыеДанные, СтандартныйКлючМаршрутизации)

	// Типовое событие адаптера ПолучитьКлючМаршрутизацииИсходящегоСообщения() не используется целенаправленно, потому что
	// в данной задаче для определения ключа маршрутизации требуются рассчитанные для выгрузки данные. Типовое событие же
	// событие адаптера выполняется в транзакции записи объекта, и лишние запросы для
	// определения ключа маршрутизации в этот момент выполнять нецелесообразно.
	ТаблицаПоШапке = ВыгружаемыеДанные.РезультатПоШапке.Выгрузить();
	Если Не (ТаблицаПоШапке.Количество() > 0 И ЗначениеЗаполнено(ТаблицаПоШапке[0].ПрефиксОрганизации)) Тогда
		Возврат СтандартныйКлючМаршрутизации;
	КонецЕсли;
	
	ПрефиксОрганизации = СокрЛП(ТаблицаПоШапке[0].ПрефиксОрганизации);
	
	Если Не ПустаяСтрока(ПрефиксОрганизации) Тогда 
		Возврат "xml.Документ.ПриходныйОрдерНаТовары." + ПрефиксОрганизации;
	Иначе
		Возврат СтандартныйКлючМаршрутизации;	
	КонецЕсли;

КонецФункции

Функция ТребуетсяВыгружать(Документ)
	
	ТребуетсяВыгружать = Истина;
	
	Если ЕстьЗапрещенныеВидыНоменклатурыДляИнтеграцииWMS(Документ) Тогда
		ТребуетсяВыгружать = Ложь;
	КонецЕсли;
	
	ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(Документ);
	Если ДанныеТТНВходящей <> Неопределено И ДанныеТТНВходящей.ДоверительнаяПриемка Тогда
		ТребуетсяВыгружать = Ложь;
	КонецЕсли;
	
	Возврат ТребуетсяВыгружать;
	
КонецФункции

Функция ЕстьЗапрещенныеВидыНоменклатурыДляИнтеграцииWMS(Документ)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	ПриходныйОрдерНаТоварыТовары.Ссылка.Склад КАК Склад
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ЗапрещенныеВидыНоменклатурыДляИнтеграцииWMS КАК бг_ЗапрещенныеВидыНоменклатурыДляИнтеграцииWMS
		|		ПО ПриходныйОрдерНаТоварыТовары.Ссылка.Склад = бг_ЗапрещенныеВидыНоменклатурыДляИнтеграцииWMS.Склад
		|			И ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры = бг_ЗапрещенныеВидыНоменклатурыДляИнтеграцииWMS.ВидНоменклатуры
		|			И (бг_ЗапрещенныеВидыНоменклатурыДляИнтеграцииWMS.ИмяМетаданныхДокумента = &ИмяМетаданныхДокумента)
		|ГДЕ
		|	ПриходныйОрдерНаТоварыТовары.Ссылка = &Документ";	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ИмяМетаданныхДокумента", Документ.Метаданные().Имя);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

Процедура ЗарегистрироватьПТиУПриСменеНаФинальныйСтатус(Объект)
	
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	СтатусПринят = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.Принят");
	
	Если ДополнительныеСвойства.Свойство("бг_ПредыдущийСтатус")
		И ДополнительныеСвойства.бг_ПредыдущийСтатус <> СтатусПринят
		И Объект.Статус = СтатусПринят И ЗначениеЗаполнено(Объект.Распоряжение)
		И ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(Объект.Распоряжение);		
	КонецЕсли;	

КонецПроцедуры

Процедура ЗарегистрироватьПеремещениеТоваровВФинальномСтатусе(Объект)
	
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	СтатусПринят = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.Принят");
	
	Если ДополнительныеСвойства.Свойство("бг_ПредыдущийСтатус")
		И ДополнительныеСвойства.бг_ПредыдущийСтатус <> СтатусПринят
		И Объект.Статус = СтатусПринят 
		И ЗначениеЗаполнено(Объект.Распоряжение) 
		И ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(Объект.Распоряжение);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗарегистрироватьПересортицуТоваровВФинальномСтатусе(Объект)
	
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	СтатусПринят = ПредопределенноеЗначение("Перечисление.СтатусыПриходныхОрдеров.Принят");
	
	Если ДополнительныеСвойства.Свойство("бг_ПредыдущийСтатус")
		И ДополнительныеСвойства.бг_ПредыдущийСтатус <> СтатусПринят
		И Объект.Статус = СтатусПринят 
		И ЗначениеЗаполнено(Объект.Распоряжение) 
		И ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(
			Объект.Распоряжение, 
			Истина);
		
		Если ДанныеТТНВходящей = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПересортицаТоваров = Документы.ПересортицаТоваров.бг_ДокументПересортицыТоваровНаОснованииТТНВходящей(
			ДанныеТТНВходящей.Документ);
		
		Если ЗначениеЗаполнено(ПересортицаТоваров) Тогда
			бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(ПересортицаТоваров);	
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
