
#Область ПрограммныйИнтерфейс

// Заполняет и проводит заказ клиента подготовленными данными. 
//
//  Параметры:
//   ДанныеЗаполнения        - Структура - Параметры формирования заказа клиента.
//   ТоварыЗаказКлиента      - ТаблицаЗначений - подготовленные данные для заполнения ТЧ "Товары" заказа клиента.
//   АктуализацияОбеспечения - Булево - Признак получения параметров для актуализации обеспечения, используется
//                                      во внутренних алгоритмах. 
//                                      Истина, параметры заполнения получаем для актуализации обеспечения
//                                      Ложь, параметры заполнения получаем для исходного заполнения заказа.
//
//  Возвращаемое значение;
//   Результат - Структура - результат выполнения
//    * ЕстьОшибкиПроведения - Булево - Истина, были ошибки при прведении заказа. Ложь -нет.
//    * ТекстОшибки          - Строка - Описание ошибки.
//
Функция ОбработатьЗаказКлиента(ДанныеЗаполнения, ТоварыЗаказКлиента, АктуализацияОбеспечения = Ложь) Экспорт
	
	Результат = Новый Структура("ЕстьОшибкиПроведения, ТекстОшибки", Ложь, "");
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДокументОбъект = ДанныеЗаполнения.Ссылка.ПолучитьОбъект();
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	Если АктуализацияОбеспечения Тогда
		Если Не ВыполненаАктуализацияОбеспечения(ТоварыЗаказКлиента) Тогда
			// При актуализации обеспечения не нашли новых доступных остатков ни по одной позиции.
			Возврат Результат;
		КонецЕсли;
		РаспределитьАктуализированноеОбеспечение(ДокументОбъект, ДанныеЗаполнения, ТоварыЗаказКлиента);
	Иначе
		ДокументОбъект.Товары.Очистить();
		ДокументОбъект.МаксимальныйКодСтроки = 0;
		Для каждого СтрокаТовары Из ТоварыЗаказКлиента Цикл
			ДобавитьСтрокуВТТоварыЗаказаКлиента(ДокументОбъект, СтрокаТовары, КэшированныеЗначения); 
		КонецЦикла;
		ОбработатьТЧТовары(ДокументОбъект);
	КонецЕсли;	
	
	УстановитьФлагНеОтгружатьЧастямиИДатуОтгрузкиВЗаказе(ДокументОбъект);
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументОбъект);
	
	СортироватьТоварыЗаказаКлиентаПоНоменклатуре(ДокументОбъект.Товары, ДанныеЗаполнения);
	
	ЗаписатьИПровестиЗаказКлиентаПослеОбработки(ДокументОбъект, Результат);
	
	Возврат Результат;
	
Конецфункции

Процедура ЗаполнитьСоглашениеДоговорУсловияПродаж(ДокументОбъект, ДанныеЗаполнения, ВызыватьИсключение = Ложь) Экспорт
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СоглашениеДоговор = СоглашениеИДоговорСКлиентомПоВидуНоменклатуры(
							ДанныеЗаполнения.Организация, 
							ДанныеЗаполнения.Контрагент,
							ДанныеЗаполнения.ВидНоменклатуры);
							
	ДокументОбъект.Соглашение = СоглашениеДоговор.Соглашение;
	
	// Заполнение соглашения по статистике.
	Если Не ЗначениеЗаполнено(СоглашениеДоговор.Соглашение) Тогда
		ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект);
		Если Не ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			ДокументОбъект.Соглашение = СоглашениеСКлиентомПоОрганизации(ДанныеЗаполнения.Организация, ДанныеЗаполнения.Контрагент);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
			СоглашениеДоговор.Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение, "бг_Договор");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ДокументОбъект.Соглашение);	
		Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
			ДокументОбъект.Договор = СоглашениеДоговор.Договор;
			Если Не ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
				ДокументОбъект.Договор = Общегоназначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение, "бг_Договор");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
				ДокументОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокументОбъект,
			                                                                  ДокументОбъект.ХозяйственнаяОперация,
			                                                                  ДокументОбъект.Валюта);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
				ШаблонСообщения = 
					НСтр("ru = 'Не определен договор для контрагента %1 по организации %2 и виду номенклатуры %3.';
						 |en = 'Не определен договор для контрагента %1 по организации %2 и виду номенклатуры %3.'",
					КодОсновногоЯзыка);

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.Организация, ДанныеЗаполнения.ВидНоменклатуры);
					
				Если ВызыватьИсключение Тогда
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ДокументОбъект.Договор = Неопределено;
		КонецЕсли;
		
		ДокументОбъект.ЦенаВключаетНДС = УсловияПродаж.ЦенаВключаетНДС;
		ДокументОбъект.ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
		ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
		ЗаполнитьЗначенияСвойств(ДокументОбъект,
		                         УсловияПродаж,
		                        "ГруппаФинансовогоУчета,ТребуетсяЗалогЗаТару,ФормаОплаты,ГрафикОплаты");
		Если ЗначениеЗаполнено(ДокументОбъект.ГрафикОплаты) И Не ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты) Тогда
			ДокументОбъект.ФормаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ГрафикОплаты, "ФормаОплаты");
		КонецЕсли;
		
	Иначе	
		ШаблонСообщения = 
			НСтр("ru = 'Не определено соглашение для контрагента %1 по организации %2 и виду номенклатуры %3.';
				 |en = 'Не определено соглашение для контрагента %1 по организации %2 и виду номенклатуры %3.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.Организация, ДанныеЗаполнения.ВидНоменклатуры);
			
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заполненную табличную часть "Товары" для формирования заказа клиента.
// Используется при загрузке заказов из внешних систем: SAP, EDI и др.).
//
//  Параметры:
//   ДанныеЗаполнения     - Структура - Параметры формирования заказа клиента.
//   ДанныеПоНоменклатуре - ТаблицаЗначений - Данные, необходимые для подбора товаров в заказ клиента.
//
//  Возвращаемое значение:
//   ТоварыЗаказКлиента   - ТаблицаЗначений - ТЧ "Товары" для формирования заказа клиента.
//
Функция ТЧТоварыЗаказаКлиента(ДанныеЗаполнения, ДанныеПоНоменклатуре) Экспорт

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	КэшУпаковокПаллетНоменклатуры = Новый Соответствие;
	
	// Создаем пустую копию ТЧ "Товары" документа "Заказ клиента".
	ТоварыЗаказКлиента = Документы.ЗаказКлиента.СоздатьДокумент().Товары.Выгрузить();
	Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP 
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED 
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS 
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		
		ТоварыЗаказКлиента.Колонки.Добавить("ЦенаБезНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ТоварыЗаказКлиента.Колонки.Добавить("ЦенаСНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	КонецЕсли;

	// Добавим служебные колонки, необходимые для размещения обеспечения в заказах поставщикам.
	// Заказ поставщику - по которому ожидается поступление под заказ клиента на долгосрочные резервы 
	//                    или на свободный остаток. 
	ТоварыЗаказКлиента.Колонки.Добавить("ЗаказНаПоступление", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	// Назначение - если заполнено, то ожидаемое поступлению под заказ клиента на долгосрочные резервы,
	//              если пустое, то ожидаемое поступлению на свободный остаток.
	ТоварыЗаказКлиента.Колонки.Добавить("ЗаказНаПоступлениеНазначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));

	ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	ЦенаВключаетНДС = Истина;
	Если ДанныеЗаполнения.Свойство("Соглашение") 
		И ЗначениеЗаполнено(ДанныеЗаполнения.Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Соглашение, "ВидЦен,ЦенаВключаетНДС");
		ВидЦены = РеквизитыСоглашения.ВидЦен;
		ЦенаВключаетНДС = РеквизитыСоглашения.ЦенаВключаетНДС;
	КонецЕсли;
	ДанныеЗаполнения.Вставить("ВидЦены", ВидЦены);
	ДанныеЗаполнения.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
	ДанныеЗаполнения.Вставить(
		"Валюта",
		ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеЗаполнения.Организация));
	
	Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
    	ЗаполнитьИПроверитьРезервыИнтернетЗаказовВТЧТовары(ДанныеЗаполнения);
	КонецЕсли;			

	ПараметрыРезервирования = РегистрыСведений.бг_НастройкиРезервированияЗаказовКлиентов.ПараметрыРезервирования(
			ДанныеЗаполнения.Организация,
			ДанныеЗаполнения.КаналПродаж, 
			ДанныеЗаполнения.Партнер, 
			ДанныеЗаполнения.ДатаОтгрузки);
	
	НомерСтроки = 0;
	Для каждого СтрокаТоварыДанныеЗаполнения Из ДанныеЗаполнения.Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;

		АдресОшибки = НСтр("ru = 'Строка %НомерСтроки%. ';
						   |en = 'Line %НомерСтроки%. '", КодОсновногоЯзыка);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго
			Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Creatio Тогда
			
			Если СтрокаТоварыДанныеЗаполнения.Отменено Тогда
				СтрокаТоварыЗаказаКлиента = ТоварыЗаказКлиента.Добавить();
				ЗаполнитьСтрокуТЧТоварыЗаказаКлиента(
						ДанныеЗаполнения,
						СтрокаТоварыЗаказаКлиента,
						СтрокаТоварыДанныеЗаполнения,
						СтрокаТоварыДанныеЗаполнения);
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
		
		Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
			Для каждого СтрокаДанныеПоРезервамПредзаказов Из СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов Цикл 
				Для каждого РаспределениеРезервов Из СтрокаДанныеПоРезервамПредзаказов.РаспределениеРезервов Цикл
					Если РаспределениеРезервов.Зарезервировано <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТоварыЗаказаКлиента = ТоварыЗаказКлиента.Добавить();
					
					СтруктураРеквизитов = ШаблонРеквизитовСтрокиТоваровЗаказаКлиента();
					СтруктураРеквизитов.Номенклатура = СтрокаДанныеПоРезервамПредзаказов.Номенклатура;
					СтруктураРеквизитов.КоличествоУпаковок = РаспределениеРезервов.Зарезервировано;
					СтруктураРеквизитов.Склад = РаспределениеРезервов.Склад;
					СтруктураРеквизитов.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;	
					СтруктураРеквизитов.бг_УпаковкаПаллета = СтрокаДанныеПоРезервамПредзаказов.УпаковкаПаллета;
					СтруктураРеквизитов.бг_ЗаказКлиентаИсточникОбеспечения = СтрокаДанныеПоРезервамПредзаказов.ЗаказНаОтгрузку;
					СтруктураРеквизитов.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения = РаспределениеРезервов.ЖелаемаяДатаОтгрузки;
					СтруктураРеквизитов.бг_ЗаказПоставщикуИсточникОбеспечения = Неопределено;
					
					ЗаполнитьСтрокуТЧТоварыЗаказаКлиента(
							ДанныеЗаполнения,
							СтрокаТоварыЗаказаКлиента, 
							СтрокаТоварыДанныеЗаполнения, 
							СтруктураРеквизитов);
				КонецЦикла;	
			КонецЦикла;	
			
			Продолжить;
		КонецЕсли;
		
		СтрокаДанныеПоНоменклатуре = ДанныеПоНоменклатуре.Найти(СтрокаТоварыДанныеЗаполнения.КодДляПоискаНоменклатуры, "КодДляПоискаНоменклатуры");
		Если СтрокаДанныеПоНоменклатуре = Неопределено Тогда
			ШаблонСообщения = 
				НСтр("ru = 'Не найдена номенклатура по коду ""%1"".'",
				КодОсновногоЯзыка);
	
			ТекстСообщения = АдресОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, СтрокаТоварыДанныеЗаполнения.КодДляПоискаНоменклатуры);
				
			Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP 
				Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
				// Для заказов Винлаб на пополнение запасов, если не нашли номенклатуру, то просто не включаем строку
				// заявки в заказ клиента, чтобы не стопорить весь заказ. 
				ИмяСобытияЖурнала = 
						Документы.битЗаявкаКлиента.СобытиеЖурналаРегистрацииСозданияЗаказовКлиентов()
						+ "." + НСтр("ru = 'Не найдена номенклатура по коду SAP.'");
						
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурнала,
					УровеньЖурналаРегистрации.Предупреждение,
					ДанныеЗаполнения.Ссылка.Метаданные(),
					ДанныеЗаполнения.Ссылка,
					ТекстСообщения);
				
				Продолжить;
			Иначе	
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;	
			
		КонецЕсли;
		
		ОсталосьРаспределить = СтрокаТоварыДанныеЗаполнения.Количество;
		
		Если ДанныеЗаполнения.Свойство("Исходный") Тогда
			Исходный = ДанныеЗаполнения.Исходный;
		Иначе
			Исходный = Ложь;
		КонецЕсли;
		
		Если ПараметрыРезервирования.РазрешеноРезервированиеПоДатеОтгрузки 
			И Не Исходный Тогда
			ПодобратьТоварыВЗаказКлиента(
					ДанныеЗаполнения, 
					ТоварыЗаказКлиента, 
					СтрокаТоварыДанныеЗаполнения,
					СтрокаДанныеПоНоменклатуре,
					ОсталосьРаспределить);
		КонецЕсли;		

		ДобавитьНеобеспеченноеКоличествоТовараВЗаказКлиента(
				ДанныеЗаполнения, 
				ТоварыЗаказКлиента, 
				СтрокаТоварыДанныеЗаполнения,
				СтрокаДанныеПоНоменклатуре,
				ОсталосьРаспределить,
				АдресОшибки);
		
	КонецЦикла;
	
	СортироватьТоварыЗаказаКлиентаПоНоменклатуре(ТоварыЗаказКлиента, ДанныеЗаполнения);
	
	ПроверитьДатыОтгрузкиВТЧТовары(ТоварыЗаказКлиента, ДанныеЗаполнения);
	ЗаполнитьИПроверитьВидыНоменклатурыВТЧТовары(ТоварыЗаказКлиента, ДанныеЗаполнения);
	
	ЗаполнитьПаллетыПоУмолчаниюВТЧТовары(ТоварыЗаказКлиента);
	ПересчитатьКоличествоКоробокИПаллетВТЧ(ТоварыЗаказКлиента);
	
	// Добавим служебные колонки, необходимые для актуализации обеспечения.
	ДобавитьИЗаполнитьКолонкуСКЮМТ(ТоварыЗаказКлиента);		
	
	Возврат ТоварыЗаказКлиента;
	
КонецФункции

// Возвращает подготовленные данные по номенклатуре (остатки, ожидаемые поступления),
// необходимые для подбора товаров в заказ клиента.
// Используется при загрузке заказов из внешних систем: SAP, EDI и др.).
//
//  Параметры:
//   ДанныеЗаполнения - Структура - Параметры формирования заказа клиента.
//
//  Возвращаемое значение:
//   ДанныеПоНоменклатуре - ТаблицаЗначений - Данные, необходимые для подбора товаров в заказ клиента.
//                                            Состав колонок см. ПустыеДанныеПоНоменклатуре().
//
Функция ДанныеПоНоменклатуре(ДанныеЗаполнения) Экспорт
	
	ДанныеПоНоменклатуре = ПустыеДанныеПоНоменклатуре();
	
	Запрос = ЗапросДанныеПоНоменклатуре(ДанныеЗаполнения);
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения.Вставить("ТаблицаСклады", Результаты[Результаты.Количество() - 2].Выгрузить());
	Если ДанныеЗаполнения.ТаблицаСклады.Количество() = 0 Тогда
		Если ДанныеЗаполнения.Свойство("ВиртуальныйЗаказ") 
			И ДанныеЗаполнения.ВиртуальныйЗаказ = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Не определен склад для виртуальных заказов.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не определены склад и/или вид номенклатуры для выполнения отгрузки.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ВыборкаКодДляПоискаНоменклатуры = Результаты[Результаты.Количество() - 1].Выбрать(
											ОбходРезультатаЗапроса.ПоГруппировкам, 
											"КодДляПоискаНоменклатуры");
	Пока ВыборкаКодДляПоискаНоменклатуры.Следующий() Цикл
		
		СтрокаДанныеПоНоменклатуре = НоваяСтрокаДанныхПоНоменклатуре(ДанныеПоНоменклатуре);
		СтрокаДанныеПоНоменклатуре.КодДляПоискаНоменклатуры	= ВыборкаКодДляПоискаНоменклатуры.КодДляПоискаНоменклатуры;
		
		Выборка = ВыборкаКодДляПоискаНоменклатуры.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьСтрокуДанныеПоНоменклатуре(СтрокаДанныеПоНоменклатуре, Выборка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

Функция ВидНоменклатурыЗаказаКлиента(ДокументОбъект) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	ВЫРАЗИТЬ(ВТ_Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары
	|ГДЕ
	|	ВТ_Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(ВТ_Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры";
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить(, "Номенклатура"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.ВидыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.ВидНоменклатуры;
	КонецЕсли;	

	Возврат Справочники.ВидыНоменклатуры.ПустаяСсылка();

КонецФункции

// Выполняет свертку одинаковых позиций в строках табличной части Товары заказа клиента.
// 
// Параметры:
//  ДокументОбъект    - ДокументОбъект.ЗаказКлиента - заказ клиента.
//  СтруктураДействий - Структура - действия, которые будут выполнены для измененных строк. 
//
Процедура СвернутьТЧТоварыЗаказаКлиента(ДокументОбъект, СтруктураДействий) Экспорт
	
	ТоварыДокумента = ДокументОбъект.Товары.Выгрузить();
	ДокументОбъект.Товары.Очистить();
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ИзмененныеСтроки = Новый Массив;
	
	ОтборСтрок = Новый Структура(
		"Номенклатура,
		|Отменено,
		|ВариантОбеспечения,
		|Серия,
		|бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения,
		|бг_ЗаказКлиентаИсточникОбеспечения,
		|бг_ЗаказПоставщикуИсточникОбеспечения,
		|бг_КодПозицииПредзаказаКлиента,
		|бг_КодСтрокиЗаявки,
		|бг_НомерПредзаказаКлиента,
		|бг_ПриходныйОрдерОбособленногоОбеспечения,
		|бг_УпаковкаПаллета");
	
	Для каждого СтрокаТоварыДокумента Из ТоварыДокумента Цикл
		
		ДобавитьСтрокуТЧ = Истина;
		Если Не СтрокаТоварыДокумента.Отменено Тогда
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаТоварыДокумента);
			НайденныеСтрокиСоСклада = ДокументОбъект.Товары.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтрокиСоСклада.Количество() > 0 Тогда
				ДобавитьСтрокуТЧ = Ложь;
				СтрокаТЧ = НайденныеСтрокиСоСклада[0];
				СтрокаТЧ.Количество = СтрокаТЧ.Количество + СтрокаТоварыДокумента.Количество;
				ИзмененныеСтроки.Добавить(СтрокаТЧ);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
						СтрокаТЧ, 
						СтруктураДействий, 
						КэшированныеЗначения);
						
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавитьСтрокуТЧ Тогда
			НоваяСтрока = ДокументОбъект.Товары.Добавить();		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		ПересчитатьКоличествоКоробокИПаллетВТЧ(ИзмененныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает строки ТЧ товары заказа клиента после программного заполнения.
//  
// Параметры:
//  ДокументОбъект			  - ДокументОбъект.ЗаказКлиента - Заказ клиента объект, в котором обработать ТЧ.
//  СтрокиТоваровДляОбработки - Массив - строки товаров, в которые нужно обработать,
//  	                        если передано "Неопределено", то обрабатываются все строки товаров.
//
Процедура ОбработатьТЧТовары(ДокументОбъект, СтрокиТоваровДляОбработки = Неопределено) Экспорт

	СтруктураПересчетаСуммы = 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	ПараметрыЗаполненияСтавкиНДС = 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокументОбъект, Истина);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", ДокументОбъект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", ДокументОбъект.Соглашение);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", ДокументОбъект.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", ДокументОбъект.ВернутьМногооборотнуюТару);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены, СрокПоставки");
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
			ДокументОбъект.Товары, СтрокиТоваровДляОбработки, ПараметрыЗаполнения, СтруктураДействий);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
	СкидкиНаценкиСервер.Рассчитать(ДокументОбъект, СтруктураПараметры);
	ДокументОбъект.СкидкиРассчитаны = Истина;
	
	ПараметрыУказанияСерий =
			Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
						ДокументОбъект, 
						Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			ДокументОбъект, 
			ПараметрыУказанияСерий, 
			СтрокиТоваровДляОбработки);

	Если СтрокиТоваровДляОбработки = Неопределено Тогда
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
				ДокументОбъект.Товары, 
				СтруктураДействий, 
				КэшированныеЗначения);
	Иначе
		Для каждого СтрокаТоваров Из СтрокиТоваровДляОбработки Цикл
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				СтрокаТоваров, 
				СтруктураДействий, 
				КэшированныеЗначения);	
		КонецЦикла;
	КонецЕсли;
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ДокументОбъект, "Товары");
	
КонецПроцедуры

// Пересчитывает количество коробок и паллет в строках табличной части.
//
// Параметры:
//  ТоварыЗаказКлиента - ДокументТабличнаяЧасть.ЗаказКлиента.Товары - табличная часть Товары
//                     - ТаблицаЗначений - таблца товары, структура таблице соответствует ТЧ Товары
//                     - Массив - массив строк табличной части Товары
//                        * Документ.ТабличнаяЧастьСтрока.ЗаказКлиента.Товары
//
Процедура ПересчитатьКоличествоКоробокИПаллетВТЧ(ТоварыЗаказКлиента) Экспорт
	
	УпаковкиПаллеты = Новый Массив;
	Для Каждого СтрокаТоварыЗаказаКлиента Из ТоварыЗаказКлиента Цикл
		Если ЗначениеЗаполнено(СтрокаТоварыЗаказаКлиента.бг_УпаковкаПаллета) Тогда
			УпаковкиПаллеты.Добавить(СтрокаТоварыЗаказаКлиента.бг_УпаковкаПаллета);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УпаковкиПаллеты", УпаковкиПаллеты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК УпаковкаПаллета,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Паллета)
	|			ТОГДА УпаковкиЕдиницыИзмерения.Числитель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентПаллеты,
	|	ВЫБОР
	|		КОГДА УпаковкиЕдиницыИзмерения.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)
	|			ТОГДА УпаковкиЕдиницыИзмерения.Родитель.Числитель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоэффициентКоробки
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка В(&УпаковкиПаллеты)";
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеУпаковок = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ДанныеУпаковок.Вставить(
			Выборка.УпаковкаПаллета,
			Новый Структура(
				"КоэффициентПаллеты,КоэффициентКоробки",
				Выборка.КоэффициентПаллеты, Выборка.КоэффициентКоробки));
	КонецЦикла;
	
	Для Каждого СтрокаТоварыЗаказаКлиента Из ТоварыЗаказКлиента Цикл 
		
		СтрокаТоварыЗаказаКлиента.бг_КоличествоКоробок = 0;
		СтрокаТоварыЗаказаКлиента.бг_КоличествоПаллет = 0;
		
		ДанныеУпаковки = ДанныеУпаковок.Получить(СтрокаТоварыЗаказаКлиента.бг_УпаковкаПаллета);
		Если ДанныеУпаковки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеУпаковки.КоэффициентКоробки > 0 Тогда
			СтрокаТоварыЗаказаКлиента.бг_КоличествоКоробок = 
				СтрокаТоварыЗаказаКлиента.КоличествоУпаковок / ДанныеУпаковки.КоэффициентКоробки;
		КонецЕсли;
		
		Если ДанныеУпаковки.КоэффициентПаллеты > 0 Тогда
			СтрокаТоварыЗаказаКлиента.бг_КоличествоПаллет = 
				СтрокаТоварыЗаказаКлиента.КоличествоУпаковок / ДанныеУпаковки.КоэффициентПаллеты;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Передает заказ клиента на сборку (Формирует по заказу Расходный ордер на товары).
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Заказ клиента, который передается на сборку.
//   ОтменитьНеобеспеченныеПозиции - Булево -
//                        Истина - при передаче в сборку отменить все необеспеченные позиции
//                        Ложь   - не отменять
//
Процедура ПередатьЗаказКлиентаНаСборку(ЗаказКлиента, ОтменитьНеобеспеченныеПозиции = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Документы.ЗаказКлиента.бг_ЗаказПереданНаСборку(ЗаказКлиента) Тогда
		// Возможно заказ уже был передан на сборку, например, пользователем интерактивно.
		Возврат;	
	КонецЕсли;
	
	// Перед обработкой проверим, что выполнены условия передачи заказа в сборку. 
	// Возможно в заказ внесли изменения уже после того, как он был добавлен в очередь.
	Действие = НСтр("ru = 'Передача на сборку';
				 	|en = 'Передача на сборку'");
	ПроверитьАктуальностьОтгрузкиПоЗаказуКлиента(ЗаказКлиента, Действие, Истина);
	
	Если Не ОтменитьНеобеспеченныеПозиции
		И ТребуетсяАктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента) Тогда
		// Если не предусмотрена автоматическая отмена необеспеченных позиций или могли снять резерв интерактивно.
		ШаблонСообщения = 
			НСтр("ru = '%1, не обработан, В заказе присутствуют необеспеченные и неотмененные товарные позиции.';
				 |en = '%1, не обработан, В заказе присутствуют необеспеченные и неотмененные товарные позиции.'",
			ОбщегоНазначения.КодОсновногоЯзыка());

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли; 
	
	ПодготовитьКОтгрузкеЗаказКлиента(ЗаказКлиента, ОтменитьНеобеспеченныеПозиции);
	
	Если Не ЕстьСтрокиКОтгрузкеВЗаказеКлиента(ЗаказКлиента) Тогда
		// После подготовки к отгрузке, может оказаться так, что нет строк к отгрузке. 
		//Например, все строки отменены.
		// В этом случае создавать расходный ордер смысла нет.
		ШаблонСообщения = 
			НСтр("ru = '%1, не передан в сборку. В заказе нет позиций к отгрузке.';
				 |en = '%1, не передан в сборку. В заказе нет позиций к отгрузке.'");

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента);
			
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЗаказКлиента);
		Возврат;
	КонецЕсли;	
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "Партнер,Склад,ДатаОтгрузки");
	ИспользоватьОрдернуюСхемуПриОтгрузке = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(
					РеквизитыЗаказа.Склад, 
					РеквизитыЗаказа.ДатаОтгрузки);
	Если Не ИспользоватьОрдернуюСхемуПриОтгрузке Тогда
		// Расходный ордер формируем только для складов с включенной ордерной схемой
		// на дату отгрузки.
		Возврат;
	КонецЕсли;					
	
	СтруктураПараметровСозданияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
	
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("ЗонаОтгрузки", Справочники.СкладскиеЯчейки.ПустаяСсылка());
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("Получатель", РеквизитыЗаказа.Партнер);
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("Склад", РеквизитыЗаказа.Склад);
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить(
						"РаспоряженияНаОтгрузку", 
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЗаказКлиента));
	
	// Добавим дополнительные параметры для MobileSmarts. 
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("бг_Исполнитель", Неопределено);
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("бг_КонтролироватьСерии", Ложь);
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("бг_РазрешитьПараллельнуюСборку", Ложь);
	СтруктураПараметровСозданияРасходныхОрдеров.Вставить("бг_ОбязательнаяАгрегация", Ложь);
	
	ЕстьОшибка = СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров).ЕстьОшибка;
	
	Если ЕстьОшибка Тогда
		ШаблонСообщения = 
			НСтр("ru = 'Есть ошибки при формировании расходного ордера по распоряжению %1.';
				 |en = 'Есть ошибки при формировании расходного ордера по распоряжению %1.'");

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;	
	
КонецПроцедуры	

// Передает закзы клиентов в сборку.
//
// Параметры:
//  ЗаказыКлиентов - Массив - массив заказов клиентов, в которых надо актуализировать обеспечение.
//    * Элемент массива - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента.
//  ОтменитьНеобеспеченныеПозиции - Булево -
//                        Истина - при передаче в сборку отменить все необеспеченные позиции
//                        Ложь   - не отменять
//
Процедура ПередатьЗаказыКлиентовНаСборкуВФоне(Знач ЗаказыКлиентов, ОтменитьНеобеспеченныеПозиции = Ложь) Экспорт
	
	Для Каждого ЗаказКлиента Из ЗаказыКлиентов Цикл
		Попытка
			Документы.ЗаказКлиента.бг_ПередатьЗаказКлиентаНаСборку(ЗаказКлиента, ОтменитьНеобеспеченныеПозиции);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ЗаказКлиента);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Актуализирует обеспечение в заказе клиента.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Заказ клиента, в котором надо актуализировать обеспечение.
//
Процедура АктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат;
	КонецЕсли;

	ЗаявкаКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "бг_ЗаявкаКлиента");
	АктуализироватьЗаказОбособленно = Ложь;
	Если ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
		ТребуетсяАктуализироватьОбеспечение = ТребуетсяАктуализироватьОбеспечениеЗаказаКлиента(ЗаявкаКлиента);
		// Если по заявке уже есть переданный на сборку заказ. То проверим можно ли актуализировать
		// переданный заказ, и если можно, то актуализировать будем только этот заказ и только со склада заказа.
		// То есть, не будем искать на других складах товар, чтобы не задевать заказы, переданные на сборку.
		Если Не ТребуетсяАктуализироватьОбеспечение Тогда
			ТребуетсяАктуализироватьОбеспечение = ТребуетсяАктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента);
			АктуализироватьЗаказОбособленно = Истина;
		КонецЕсли;
	Иначе
		ТребуетсяАктуализироватьОбеспечение = ТребуетсяАктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента);
	КонецЕсли;
	
	Если Не ТребуетсяАктуализироватьОбеспечение Тогда
		// Возможно заказ уже обеспечен пользователем интерактивно, например, типовыми механизмами.
		Возврат;	
	КонецЕсли; 
	
	// Перед обработкой проверим, что выполнены условия для актуализации обеспечения. 
	// Возможно в заказ внесли изменения уже после того, как он был добавлен в очередь.
	Действие = НСтр("ru = 'Актуализация обеспечения';
				 	|en = 'Актуализация обеспечения'");
	ПроверитьАктуальностьОтгрузкиПоЗаказуКлиента(ЗаказКлиента, Действие);
	ПроверитьНастройкиРезервированияПоЗаказуКлиента(ЗаказКлиента, Действие);
	
	ПараметрыЗаполнения = ПараметрыЗаполненияЗаказаКлиента(ЗаказКлиента, Истина, АктуализироватьЗаказОбособленно);
	ДанныеПоНоменклатуре = ДанныеПоНоменклатуре(ПараметрыЗаполнения);		
	ТоварыЗаказКлиента = ТЧТоварыЗаказаКлиента(ПараметрыЗаполнения, ДанныеПоНоменклатуре);
	ОбновитьОбеспечениеЗаказаКлиента(ПараметрыЗаполнения, ТоварыЗаказКлиента);

	ПараметрыПередачиНаСборку = ПараметрыПередачиНаСборкуЗаказаКлиента(ЗаказКлиента);
	
	Если ПараметрыПередачиНаСборку.ПередатьНаСборку Тогда
		
		// Если уже пришло время передавать заказ на сборку, то после актуализации обеспечения,
		// отменим необеспеченные позиции, если это определено в настройках автоматической передачи на сборку.
		Если ПараметрыПередачиНаСборку.ОтменятьНеОбеспеченныеПозиции Тогда
			ОтменитьНеобеспеченныеПозицииЗаказаКлиента(ЗаказКлиента);
		КонецЕсли;
		
		// Проверим, что заказ надо передавать на сборку (возможна ситуация, когда отменили все строки заказа).
		Если ЕстьПозицииДляПередачиЗаказаКлиентаНаСборку(ЗаказКлиента) Тогда
			// В качестве приоритета обработки будем использовать порядковый номер дня передачи на сборку, считая от 01.01.2000.
			ДатаПередачиНаСборку = НачалоДня(ПараметрыПередачиНаСборку.ДатаОтгрузки - ПараметрыПередачиНаСборку.КоличествоЧасовДоОтгрузки * 60 * 60); 
			ДеньПередачиНаСборку = Цел((ДатаПередачиНаСборку - '20000101000000') / 86400); 
			
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
				ЗаказКлиента, 
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ПередатьЗаказыКлиентовНаСборку,
				ДеньПередачиНаСборку);
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

// Актуализирует обеспечение в заказах клиентов.
//
// Параметры:
//  ЗаказыКлиентов - Массив - массив заказов клиентов, в которых надо актуализировать обеспечение.
//    * Элемент массива - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента.
//
Процедура АктуализироватьОбеспечениеЗаказовКлиентовВФоне(Знач ЗаказыКлиентов) Экспорт
	
	Для Каждого ЗаказКлиента Из ЗаказыКлиентов Цикл
		Попытка
			Документы.ЗаказКлиента.бг_АктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента);
		Исключение
			ОбщегоНазначения.СообщитьПользователю(
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ЗаказКлиента);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает в переданном заказе клиента флаг "Не отгружать частями" и дату отгрузки.
//
// Параметры:
// 	ЗаказОбъект - ДокументОбъект.ЗаказКлиента - Заказ клиента.
//
Процедура УстановитьФлагНеОтгружатьЧастямиИДатуОтгрузкиВЗаказе(ЗаказОбъект) Экспорт
	
	НеОтгружатьЧастями = Истина;
	Если ЗаказОбъект.Товары.Количество() > 0 Тогда
		ДатаОтгрузки = ЗаказОбъект.Товары[0].ДатаОтгрузки;	
	Иначе
		ДатаОтгрузки = '00010101';
	КонецЕсли;	
	
	Для каждого СтрокаТовары Из ЗаказОбъект.Товары Цикл
		Если ДатаОтгрузки <> СтрокаТовары.ДатаОтгрузки Тогда
			НеОтгружатьЧастями = Ложь;
			ДатаОтгрузки = Мин(ДатаОтгрузки, СтрокаТовары.ДатаОтгрузки);
		КонецЕсли;	
	КонецЦикла;	
	
	ЗаказОбъект.ДатаОтгрузки = ДатаОтгрузки;
	ЗаказОбъект.НеОтгружатьЧастями = НеОтгружатьЧастями;

КонецПроцедуры

Процедура ПересчитатьИтоговыеДанныеВЗаказеКлиента(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧТовары.НомерСтроки КАК НомерСтроки,
	|	ТЧТовары.Номенклатура КАК Номенклатура,
	|	ТЧТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТЧТовары.Отменено КАК Отменено,
	|	ТЧТовары.бг_КоличествоКоробок КАК КоличествоКоробок,
	|	ТЧТовары.бг_КоличествоПаллет КАК КоличествоПаллет
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТЧТовары КАК ТЧТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втТовары.КоличествоПаллет) КАК бг_КоличествоПаллет,
	|	СУММА(ВЫБОР
	|			КОГДА втТовары.Номенклатура.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка)
	|				ТОГДА втТовары.КоличествоУпаковок
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК бг_КоличествоБутылок
	|ИЗ
	|	втТовары КАК втТовары
	|ГДЕ
	|	НЕ втТовары.Отменено";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТЧТовары", ДокументОбъект.Товары.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка);
	
КонецПроцедуры

// Добавляет в очередь обектов для отложенной обработки заказы клиентов для резервирования и автоматической передачи на сборку.
//  Вызывается из обработчика регламентного задания "БЕЛУГА. Регистрация заказов клиентов к обеспечению и отгрузке"
//
Процедура ЗарегистрироватьЗаказыКлиентовКОбеспечениюИОтгрузке() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОформлятьСначалаНакладные = Константы.ПорядокОформленияНакладныхРасходныхОрдеров.Получить()
		= Перечисления.ПорядокОформленияНакладныхРасходныхОрдеров.СначалаНакладные;
	Запрос.УстановитьПараметр("ОформлятьСначалаНакладные", ОформлятьСначалаНакладные);
	
	ТекущаяДата = ТекущаяДатаСеанса(); 
	МинДатаОтгрузки = НачалоДня(ТекущаяДата);
	МаксЧасовДоОтгрузки = МаксимальноеКоличествоЧасовДоОтгрузки();
	МаксДатаОтгрузки = НачалоДня(ТекущаяДата + МаксЧасовДоОтгрузки * 3600);
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("МинДатаОтгрузки", МинДатаОтгрузки);
	Запрос.УстановитьПараметр("МаксДатаОтгрузки", МаксДатаОтгрузки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ДокументОтгрузки КАК ЗаказКлиента
	|ПОМЕСТИТЬ СписокЗаказовКлиентов
	|ИЗ
	|	(ВЫБРАТЬ
	|		РаспоряженияКОтгрузке.Склад КАК Склад,
	|		РаспоряженияКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|		РаспоряженияКОтгрузке.Получатель КАК Получатель,
	|		РаспоряженияКОтгрузке.Номенклатура КАК Номенклатура,
	|		РаспоряженияКОтгрузке.Характеристика КАК Характеристика,
	|		РаспоряженияКОтгрузке.Назначение КАК Назначение,
	|		РаспоряженияКОтгрузке.Серия КАК Серия
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|				,
	|				ТИПЗНАЧЕНИЯ(ДокументОтгрузки) = ТИП(Документ.ЗаказКлиента)
	|					И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказКлиента).ДатаОтгрузки МЕЖДУ &МинДатаОтгрузки И &МаксДатаОтгрузки
	|					И НЕ ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв
	|					И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа <> ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS)) КАК РаспоряженияКОтгрузке
	|	ГДЕ
	|		(&ОформлятьСначалаНакладные
	|					И РаспоряженияКОтгрузке.ВРезервеОстаток + РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.КОформлениюОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
	|				ИЛИ НЕ &ОформлятьСначалаНакладные
	|					И РаспоряженияКОтгрузке.ВРезервеОстаток + РаспоряженияКОтгрузке.КОтгрузкеОстаток - РаспоряженияКОтгрузке.СобираетсяОстаток - РаспоряженияКОтгрузке.СобраноОстаток > 0
	|				ИЛИ РаспоряженияКОтгрузке.СобираетсяОстаток <> 0
	|				ИЛИ РаспоряженияКОтгрузке.СобраноОстаток <> 0)) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ЗаказКлиента
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|		ЗаказыКлиентов.Номенклатура КАК Номенклатура,
	|		ЗаказыКлиентов.Характеристика КАК Характеристика,
	|		ЗаказыКлиентов.КодСтроки КАК КодСтроки,
	|		ЗаказыКлиентов.Склад КАК Склад,
	|		ЗаказыКлиентов.Серия КАК Серия
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(
	|				,
	|				ТИПЗНАЧЕНИЯ(ЗаказКлиента) = ТИП(Документ.ЗаказКлиента)
	|					И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).ДатаОтгрузки МЕЖДУ &МинДатаОтгрузки И &МаксДатаОтгрузки
	|					И НЕ ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв
	|					И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа <> ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS)) КАК ЗаказыКлиентов
	|	ГДЕ
	|		ЗаказыКлиентов.ЗаказаноОстаток - ЗаказыКлиентов.КОформлениюОстаток > 0) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(СписокЗаказовКлиентов.ЗаказКлиента КАК Документ.ЗаказКлиента).ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ЗаказыКлиентовНеОтгруженные
	|ИЗ
	|	СписокЗаказовКлиентов КАК СписокЗаказовКлиентов
	|ГДЕ
	|	ВЫРАЗИТЬ(СписокЗаказовКлиентов.ЗаказКлиента КАК Документ.ЗаказКлиента).ДатаОтгрузки >= &ТекущаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентовСНастройкамиПередачиНаСборку.ЗаказКлиента КАК ЗаказКлиента,
	|	МАКСИМУМ(&ТекстЗапросаКоличествоЧасовДоОтгрузки) КАК КоличествоЧасовДоОтгрузки,
	|	МАКСИМУМ(&ТекстЗапросаАктуализироватьОбеспечение) КАК АктуализироватьОбеспечение,
	|	МАКСИМУМ(&ТекстЗапросаОтменятьНеОбеспеченныеПозиции) КАК ОтменятьНеОбеспеченныеПозиции
	|ПОМЕСТИТЬ НастройкиПередачиЗаказовНаСборку
	|ИЗ
	|	ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиПередачиНаСборку
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентовСНастройкамиПередачиНаСборку.ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа КАК ИсточникЗаказа,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ЗаявкаКлиента КАК ЗаявкаКлиента,
	|	ЗаказыКлиентовНеОтгруженные.ДатаОтгрузки КАК ДатаОтгрузки,
	|	НастройкиПередачиЗаказовНаСборку.КоличествоЧасовДоОтгрузки КАК КоличествоЧасовДоОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПередачиЗаказовНаСборку.КоличествоЧасовДоОтгрузки, 0) > 0
	|				И РАЗНОСТЬДАТ(&ТекущаяДата, ЗаказыКлиентовНеОтгруженные.ДатаОтгрузки, ЧАС) <= НастройкиПередачиЗаказовНаСборку.КоличествоЧасовДоОтгрузки
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПередатьНаСборку,
	|	ЕСТЬNULL(НастройкиПередачиЗаказовНаСборку.АктуализироватьОбеспечение, ЛОЖЬ) КАК АктуализироватьОбеспечение,
	|	ЕСТЬNULL(НастройкиПередачиЗаказовНаСборку.ОтменятьНеОбеспеченныеПозиции, ЛОЖЬ) КАК ОтменятьНеОбеспеченныеПозиции
	|ИЗ
	|	ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовНеОтгруженные
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПередачиЗаказовНаСборку КАК НастройкиПередачиЗаказовНаСборку
	|		ПО ЗаказыКлиентовНеОтгруженные.ЗаказКлиента = НастройкиПередачиЗаказовНаСборку.ЗаказКлиента";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоличествоЧасовДоОтгрузки",
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаКоличествоЧасовДоОтгрузки());
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаАктуализироватьОбеспечение",
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаАктуализироватьОбеспечение());
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтменятьНеОбеспеченныеПозиции",
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаОтменятьНеОбеспеченныеПозиции());
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиПередачиНаСборку",
	    "ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиПередачиНаСборку
		|		" +
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаСоединенияСНастройкамиПередачиНаСборку(
			"ВЫРАЗИТЬ(ЗаказыКлиентовСНастройкамиПередачиНаСборку.ЗаказКлиента КАК Документ.ЗаказКлиента)"));

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТребуетсяАктуализироватьОбеспечение = ТребуетсяАктуализироватьОбеспечениеЗаказаКлиента(Выборка.ЗаказКлиента);
		
		Если Выборка.ПередатьНаСборку Тогда
			
			// В качестве приоритета обработки будем использовать порядковый номер дня передачи на сборку, считая от 01.01.2000.
			ДатаПередачиНаСборку = НачалоДня(Выборка.ДатаОтгрузки - Выборка.КоличествоЧасовДоОтгрузки * 60 * 60); 
			ДеньПередачиНаСборку = Цел((ДатаПередачиНаСборку - '20000101000000') / 86400); 
			
			Если Выборка.АктуализироватьОбеспечение 
				И ТребуетсяАктуализироватьОбеспечение Тогда
				РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
					Выборка.ЗаказКлиента, 
					Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.АктуализироватьОбеспечениеЗаказовКлиентов,
					ДеньПередачиНаСборку);
			Иначе	
				Если Документы.ЗаказКлиента.бг_ЗаказПереданНаСборку(Выборка.ЗаказКлиента) Тогда
					// Возможно заказ уже был передан на сборку ранее.
					Продолжить;
				КонецЕсли;
				
				// Проверим, что заказ надо передавать на сборку.
				Если Не ЕстьПозицииДляПередачиЗаказаКлиентаНаСборку(Выборка.ЗаказКлиента) Тогда
					Продолжить;
				КонецЕсли;	
					
				РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
					Выборка.ЗаказКлиента, 
					Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ПередатьЗаказыКлиентовНаСборку,
					ДеньПередачиНаСборку);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура СоздатьНоменклатуруПартнераПоДаннымЗаказаКлиента(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка,
	|	ЗаказКлиента.Контрагент КАК Контрагент,
	|	ЗаказКлиента.Партнер КАК Партнер
	|ПОМЕСТИТЬ РеквизитыЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыЗаказа.Партнер КАК Партнер,
	|	РеквизитыЗаказа.Контрагент КАК Контрагент,
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Номенклатура.Наименование КАК Наименование,
	|	ВЫРАЗИТЬ(ЗаказКлиентаТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(500)) КАК НаименованиеПолное,
	|	ЗаказКлиентаТовары.Номенклатура.Код КАК Код,
	|	ЗаказКлиентаТовары.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК УпаковкаКоличествоВложений,
	|	УпаковкиЕдиницыИзмерения.Родитель КАК УпаковкаРодитель,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК УпаковкаЕдиницаИзмерения,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения КАК УпаковкаТипЕдиницыИзмерения
	|ПОМЕСТИТЬ НоменклатураЗаказа
	|ИЗ
	|	РеквизитыЗаказа КАК РеквизитыЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|			ПО ЗаказКлиентаТовары.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|		ПО РеквизитыЗаказа.Ссылка = ЗаказКлиентаТовары.Ссылка
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения В (ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Бутылка), ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураЗаказа.Партнер КАК Партнер,
	|	НоменклатураЗаказа.Контрагент КАК Контрагент,
	|	НоменклатураЗаказа.Номенклатура КАК Номенклатура,
	|	НоменклатураЗаказа.Наименование КАК Наименование,
	|	НоменклатураЗаказа.НаименованиеПолное КАК НаименованиеПолное,
	|	НоменклатураЗаказа.Код КАК Код,
	|	НоменклатураЗаказа.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаИзмерения,
	|	НоменклатураЗаказа.Упаковка КАК Упаковка,
	|	НоменклатураЗаказа.УпаковкаКоличествоВложений КАК УпаковкаКоличествоВложений,
	|	НоменклатураЗаказа.УпаковкаРодитель КАК УпаковкаРодитель,
	|	НоменклатураЗаказа.УпаковкаЕдиницаИзмерения КАК УпаковкаЕдиницаИзмерения,
	|	НоменклатураЗаказа.УпаковкаЕдиницаИзмерения.Код КАК УпаковкаЕдиницаИзмеренияКодОКЕИ,
	|	НоменклатураЗаказа.УпаковкаТипЕдиницыИзмерения КАК УпаковкаТипЕдиницыИзмерения,
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента
	|ИЗ
	|	НоменклатураЗаказа КАК НоменклатураЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО НоменклатураЗаказа.Партнер = НоменклатураКонтрагентов.Владелец
	|			И НоменклатураЗаказа.Номенклатура = НоменклатураКонтрагентов.Номенклатура
	|			И НоменклатураЗаказа.Упаковка = НоменклатураКонтрагентов.Упаковка
	|ГДЕ
	|	НоменклатураКонтрагентов.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураЗаказа.Номенклатура КАК Номенклатура,
	|	НоменклатураЗаказа.Упаковка КАК Упаковка,
	|	бг_Штрихкоды_ЕК_Номенклатуры.Штрихкод КАК Штрихкод,
	|	бг_Штрихкоды_ЕК_Номенклатуры.ЕдиницаИзмерения КАК ШтрихкодЕдиницаИзмерения
	|ИЗ
	|	НоменклатураЗаказа КАК НоменклатураЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.бг_Штрихкоды_ЕК_Номенклатуры КАК бг_Штрихкоды_ЕК_Номенклатуры
	|		ПО (НоменклатураЗаказа.Упаковка = бг_Штрихкоды_ЕК_Номенклатуры.Владелец)
	|ГДЕ
	|	НЕ бг_Штрихкоды_ЕК_Номенклатуры.Ссылка ЕСТЬ NULL
	|	И НЕ бг_Штрихкоды_ЕК_Номенклатуры.Штрихкод = """"";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаУпаковки = РезультатЗапроса[2];
	ТаблицаШтрихкоды = РезультатЗапроса[3].Выгрузить();
	
	ВыборкаУпаковки = РезультатЗапросаУпаковки.Выбрать();
	Пока ВыборкаУпаковки.Следующий() Цикл
		
		СтрокиПоШтрихкодам = ТаблицаШтрихкоды.НайтиСтроки(Новый Структура("Номенклатура, Упаковка, ШтрихкодЕдиницаИзмерения",
			ВыборкаУпаковки.Номенклатура, ВыборкаУпаковки.Упаковка, ВыборкаУпаковки.УпаковкаЕдиницаИзмерения));
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("Номенклатура", ВыборкаУпаковки.Номенклатура);
		ДанныеЗаполнения.Вставить("Партнер", ВыборкаУпаковки.Партнер);
		ДанныеЗаполнения.Вставить("Упаковка", ВыборкаУпаковки.Упаковка);
		ДанныеЗаполнения.Вставить("Штрихкод", "");
		ДанныеЗаполнения.Вставить("ЕдиницаИзмерения", ВыборкаУпаковки.УпаковкаЕдиницаИзмерения);
		ДанныеЗаполнения.Вставить("КодОКЕИ", ВыборкаУпаковки.УпаковкаЕдиницаИзмеренияКодОКЕИ);
		ДанныеЗаполнения.Вставить("АртикулПоставщика", "");
		ДанныеЗаполнения.Вставить("НаименованиеПоставщика", "");
		
		Если СтрокиПоШтрихкодам.Количество() >= 1 Тогда
			ДанныеЗаполнения.Вставить("Штрихкод", СтрокиПоШтрихкодам[0].Штрихкод);
			СоздатьНоменклатуруПартнера(ДанныеЗаполнения);
		ИначеЕсли СтрокиПоШтрихкодам.Количество() = 0 Тогда
			СтрокиПоШтрихкодам = ТаблицаШтрихкоды.НайтиСтроки(Новый Структура("Номенклатура, ШтрихкодЕдиницаИзмерения",
				ВыборкаУпаковки.Номенклатура, ВыборкаУпаковки.УпаковкаЕдиницаИзмерения));
			Если СтрокиПоШтрихкодам.Количество() > 0 Тогда
				ДанныеЗаполнения.Вставить("Штрихкод", СтрокиПоШтрихкодам[0].Штрихкод);
				СоздатьНоменклатуруПартнера(ДанныеЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры заполнения обеспечения в заказе клиента.
//
//  Параметры:
//   ЗаказКлиента            - ДокументСсылка.ЗаказКлиента, ДокументОбъект.ЗаказКлиента - заказ клиента.
//   АктуализацияОбеспечения - Булево - Признак получения параметров для актуализации обеспечения, используется
//                                      во внутренних алгоритмах. 
//                                      Истина, параметры заполнения получаем для актуализации обеспечения
//                                      Ложь, параметры заполнения получаем для исходного заполнения заказа.
//   АктуализироватьЗаказОбособленно - Булево - Признак обособленного обеспечения заказа
//                                     при актуализации обеспечения, не учитывать разделение заказов по заявке. 
//
//  Возвращаемое значение:
//   ПараметрыЗаполнения - Структура - параметры заполнения обеспечения в заказе клиента. 
//
Функция ПараметрыЗаполненияЗаказаКлиента(ЗаказКлиента, 
										АктуализацияОбеспечения = Ложь,
										АктуализироватьЗаказОбособленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента")
		И Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ИсточникЗаказа = Неопределено;
	ЗаявкаКлиента  = Неопределено;	
	Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗаказКлиента,
			"бг_ИсточникЗаказа,бг_ЗаявкаКлиента,ДатаОтгрузки,Склад");
		ИсточникЗаказа = РеквизитыЗаказа.бг_ИсточникЗаказа;
		ЗаявкаКлиента  = РеквизитыЗаказа.бг_ЗаявкаКлиента;	
		ДатаОтгрузки   = РеквизитыЗаказа.ДатаОтгрузки;
	Иначе
		ИсточникЗаказа = ЗаказКлиента.бг_ИсточникЗаказа;
		ЗаявкаКлиента  = ЗаказКлиента.бг_ЗаявкаКлиента;
		ДатаОтгрузки   = ЗаказКлиента.ДатаОтгрузки;
	КонецЕсли;
	
	Если ЗаказКлиентаФормируетсяПоЗаявкеКлиента(ИсточникЗаказа) Тогда
		Если Не ЗначениеЗаполнено(ЗаявкаКлиента) Тогда
			Возврат Неопределено;	
		КонецЕсли;
		ПараметрыЗаполнения = Документы.битЗаявкаКлиента.РеквизитыЗаявкиКлиентаДляФормированияЗаказов(
				ЗаявкаКлиента,
				АктуализацияОбеспечения,
				?(АктуализироватьЗаказОбособленно, ЗаказКлиента, Неопределено));
	Иначе
		ПараметрыЗаполнения = Документы.ЗаказКлиента.бг_РеквизитыЗаказаКлиентаДляЗаполненияОбеспечения(
				ЗаказКлиента,
				АктуализацияОбеспечения);	
	КонецЕсли;
	
	Если АктуализацияОбеспечения Тогда
		ПараметрыЗаполнения.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает параметры передачи на сборку заказа клиента на текущую дату.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//
//  Возвращаемое значение:
//   ПараметрыПередачиНаСборку - Структура - параметры передачи на сборку
//
Функция ПараметрыПередачиНаСборкуЗаказаКлиента(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыПередачиНаСборку = Новый Структура;
	ПараметрыПередачиНаСборку.Вставить("ПередатьНаСборку", Ложь);
	ПараметрыПередачиНаСборку.Вставить("АктуализироватьОбеспечение", Ложь);
	ПараметрыПередачиНаСборку.Вставить("ОтменятьНеОбеспеченныеПозиции", Ложь);
	ПараметрыПередачиНаСборку.Вставить("ДатаОтгрузки", '00010101');
 	ПараметрыПередачиНаСборку.Вставить("КоличествоЧасовДоОтгрузки", 0);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ЗаказыКлиентовНеОтгруженные
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентовСНастройкамиПередачиНаСборку.ЗаказКлиента КАК ЗаказКлиента,
	|	МАКСИМУМ(&ТекстЗапросаКоличествоЧасовДоОтгрузки) КАК КоличествоЧасовДоОтгрузки,
	|	МАКСИМУМ(&ТекстЗапросаАктуализироватьОбеспечение) КАК АктуализироватьОбеспечение,
	|	МАКСИМУМ(&ТекстЗапросаОтменятьНеОбеспеченныеПозиции) КАК ОтменятьНеОбеспеченныеПозиции
	|ПОМЕСТИТЬ НастройкиПередачиЗаказовНаСборку
	|ИЗ
	|	ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиПередачиНаСборку
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентовСНастройкамиПередачиНаСборку.ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа КАК ИсточникЗаказа,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ЗаявкаКлиента КАК ЗаявкаКлиента,
	|	ЗаказыКлиентовНеОтгруженные.ДатаОтгрузки КАК ДатаОтгрузки,
	|	НастройкиПередачиЗаказовНаСборку.КоличествоЧасовДоОтгрузки КАК КоличествоЧасовДоОтгрузки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиПередачиЗаказовНаСборку.КоличествоЧасовДоОтгрузки, 0) > 0
	|				И РАЗНОСТЬДАТ(&ТекущаяДата, ЗаказыКлиентовНеОтгруженные.ДатаОтгрузки, ЧАС) <= НастройкиПередачиЗаказовНаСборку.КоличествоЧасовДоОтгрузки
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПередатьНаСборку,
	|	ЕСТЬNULL(НастройкиПередачиЗаказовНаСборку.АктуализироватьОбеспечение, ЛОЖЬ) КАК АктуализироватьОбеспечение,
	|	ЕСТЬNULL(НастройкиПередачиЗаказовНаСборку.ОтменятьНеОбеспеченныеПозиции, ЛОЖЬ) КАК ОтменятьНеОбеспеченныеПозиции
	|ИЗ
	|	ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовНеОтгруженные
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПередачиЗаказовНаСборку КАК НастройкиПередачиЗаказовНаСборку
	|		ПО ЗаказыКлиентовНеОтгруженные.ЗаказКлиента = НастройкиПередачиЗаказовНаСборку.ЗаказКлиента";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоличествоЧасовДоОтгрузки",
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаКоличествоЧасовДоОтгрузки());
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаАктуализироватьОбеспечение",
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаАктуализироватьОбеспечение());
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтменятьНеОбеспеченныеПозиции",
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаОтменятьНеОбеспеченныеПозиции());
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиПередачиНаСборку",
	    "ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиПередачиНаСборку
		|		" +
		РегистрыСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.ТекстЗапросаСоединенияСНастройкамиПередачиНаСборку(
			"ВЫРАЗИТЬ(ЗаказыКлиентовСНастройкамиПередачиНаСборку.ЗаказКлиента КАК Документ.ЗаказКлиента)"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПередачиНаСборку, Выборка);	
	КонецЕсли;	
	
	Возврат ПараметрыПередачиНаСборку;
	
КонецФункции

// Возвращает параметры резервирования заказа клиента на текущую дату.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//
//  Возвращаемое значение:
//   ПараметрыРезервирования - Структура - параметры резервирования заказа.
//
Функция ПараметрыРезервированияЗаказаКлиента(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыРезервирования = Новый Структура;
	ПараметрыРезервирования.Вставить("РазрешеноРезервированиеПоДатеОтгрузки", Истина);
	ПараметрыРезервирования.Вставить("ДнейДоОтгрузкиДляРезервирования", 0);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ЗаказыКлиентовНеОтгруженные
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентовСНастройкамиРезервирования.ЗаказКлиента КАК ЗаказКлиента,
	|	МАКСИМУМ(&ТекстЗапросаДнейДоОтгрузкиДляРезервирования) КАК ДнейДоОтгрузкиДляРезервирования
	|ПОМЕСТИТЬ СрокиРезервирования
	|ИЗ
	|	ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиРезервирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентовСНастройкамиРезервирования.ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ИсточникЗаказа КАК ИсточникЗаказа,
	|	ВЫРАЗИТЬ(ЗаказыКлиентовНеОтгруженные.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ЗаявкаКлиента КАК ЗаявкаКлиента,
	|	ЗаказыКлиентовНеОтгруженные.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЕСТЬNULL(СрокиРезервирования.ДнейДоОтгрузкиДляРезервирования, 0) КАК ДнейДоОтгрузкиДляРезервирования,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СрокиРезервирования.ДнейДоОтгрузкиДляРезервирования, 0) > 0
	|				И РАЗНОСТЬДАТ(&ТекущаяДата, ЗаказыКлиентовНеОтгруженные.ДатаОтгрузки, ДЕНЬ) > СрокиРезервирования.ДнейДоОтгрузкиДляРезервирования
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазрешеноРезервированиеПоДатеОтгрузки
	|ИЗ
	|	ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовНеОтгруженные
	|		ЛЕВОЕ СОЕДИНЕНИЕ СрокиРезервирования КАК СрокиРезервирования
	|		ПО ЗаказыКлиентовНеОтгруженные.ЗаказКлиента = СрокиРезервирования.ЗаказКлиента";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаДнейДоОтгрузкиДляРезервирования",
		РегистрыСведений.бг_НастройкиРезервированияЗаказовКлиентов.ТекстЗапросаДнейДоОтгрузкиДляРезервирования());

	ПодстрокаЗаменыСоединения = "ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиРезервирования
		|		"
		+ РегистрыСведений.бг_НастройкиРезервированияЗаказовКлиентов.ТекстЗапросаСоединенияСНастройкамиРезервирования(
			"ВЫРАЗИТЬ(ЗаказыКлиентовСНастройкамиРезервирования.ЗаказКлиента КАК Документ.ЗаказКлиента)");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"ЗаказыКлиентовНеОтгруженные КАК ЗаказыКлиентовСНастройкамиРезервирования",
	    ПодстрокаЗаменыСоединения);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ПараметрыРезервирования, Выборка);	
	КонецЕсли;	
	
	Возврат ПараметрыРезервирования;
	
КонецФункции

// Заполняет и проводит заказ клиента подготовленными данными. 
//
//  Параметры:
//   ТоварыЗаказКлиента - ТаблицаЗначений - подготовленные данные для заполнения ТЧ "Товары" заказа клиента.
//
//  Возвращаемое значение;
//   Булево - Истина - Обеспечение актуализировано, нашли новые доступные остатки. 
//            Ложь   - Не нашли новых доступных остатков ни по одной товарной позиции.
//
Функция ВыполненаАктуализацияОбеспечения(ТоварыЗаказКлиента) Экспорт
	
	// При актуализации обеспечения в заказе клиента перед передачей на сборку 
	// или по кнопке из формы списка заказов в таблице ТоварыЗаказКлиента учитывались
	// только те строки, в которых в исходном заказе клиента был указан вариант обеспечения "К обеспечению". 
	
	ВыполненаАктуализацияОбеспечения = Ложь;
	Для каждого СтрокаТЧ Из ТоварыЗаказКлиента Цикл
		Если СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада
			Или РазмещениеВОжидаемомПоступлении(СтрокаТЧ) Тогда
			ВыполненаАктуализацияОбеспечения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ВыполненаАктуализацияОбеспечения;
	
КонецФункции	

// Возвращает признак того, что документ заказ клиента формируется по данным документа заявка клиента.
//
//  Праметры:
//   ИсточникЗаказа - ПеречислениеСсылка.бг_ИсточникиЗагрузкиЗаказовКлиентов - Источник заказа.
//
//  Возвращаемое значение:
//   Булево - Истина - Заказы клиента, загруженные из переданного источника, оформляются на основании
//                     документа Заявка клиента.
//            Ложь   - без Заявки клиента.
//
Функция ЗаказКлиентаФормируетсяПоЗаявкеКлиента(ИсточникЗаказа) Экспорт

	Возврат ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED 
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент;

КонецФункции

#Область ЗаказРозничногоПокупателя

// Возвращает информацияю о том является ли переданный заказ клиента 
// заказом, оформленным на розничного покупателя
//
// Параметры 
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента
//  
// Тип возвращаемого значения
//  Булево
Функция ЭтоЗаказРозничногоПокупателя(ЗаказКлиента) Экспорт
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "бг_Магазин, бг_ЗаказРозничногоПокупателя");
	Возврат ЗначениеЗаполнено(РеквизитыЗаказа.бг_Магазин) И Не ЗначениеЗаполнено(РеквизитыЗаказа.бг_ЗаказРозничногоПокупателя);
	
КонецФункции

// Возвращает информацияю о том является ли переданный заказ клиента 
// заказом, оформленным через магазин
//
// Параметры 
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента
//  
// Тип возвращаемого значения
//  Булево
Функция ЭтоЗаказМагазина(ЗаказКлиента) Экспорт
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "бг_Магазин, бг_ЗаказРозничногоПокупателя");
	Возврат ЗначениеЗаполнено(РеквизитыЗаказа.бг_Магазин) И ЗначениеЗаполнено(РеквизитыЗаказа.бг_ЗаказРозничногоПокупателя);
	
КонецФункции

// Выполняет поиск заказа магазина связанного с заказом клиента
//
// Параметры 
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента
// Тип возвращаемого значения
//  ДокументСсылка.ЗаказКлиента
//
Функция НайтиЗаказМагазина(ЗаказКлиента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.бг_ЗаказРозничногоПокупателя = &ЗаказКлиента";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Выполняет создание заказа магазина на основании изменения 
// статуса согласования заказа розничного покупателя
//
// Параметры 
//  Источник - РегистрСведенийНаборЗаписей.бг_СогласованиеЗаказовКлиентов
//  Отказ - Булево
//  РежимПроведения - Булево
//
Процедура ИзменитьСтатусЗаказаМагазинаПриЗаписиРегистра(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказКлиента = Источник.Отбор.ЗаказКлиента.Значение;
	Если ЗаказКлиента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоЗаказРозничногоПокупателя(ЗаказКлиента) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл
		РезультатСогласования = Запись.РезультатСогласования;
	КонецЦикла;
	
	ЗаказМагазина = НайтиЗаказМагазина(ЗаказКлиента);
	Если Не ЗаказМагазина = Неопределено Тогда
		РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ЗаписатьНовоеСостояние(ЗаказМагазина,
			Новый Структура("РезультатСогласования", РезультатСогласования));
		Возврат;
	ИначеЕсли РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ЗаказСогласован(ЗаказКлиента) Тогда
		ДобавитьСозданиеЗаказаМагазинаДляОтложеннойОбработки(ЗаказКлиента);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет создание заказа магазина
// Параметры:
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента
//
Функция СоздатьЗаказМагазина(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаказМагазина");
	Результат.Вставить("ОписаниеОшибки", "");
	
	ЗначенияРеквизитовЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаказКлиента, "ДатаОтгрузки, бг_Магазин");
	
	РезультатПроверки = ДоступноСозданиеМагазина(ЗаказКлиента, ЗначенияРеквизитовЗаказа);
	Если РезультатПроверки.УсловияВыполнены Тогда
	
		ЗаказМагазинаОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ЗаказМагазинаОбъект, ЗаказКлиента, , "Номер, Дата");
		ЗаказМагазинаОбъект.Дата = ТекущаяДатаСеанса();
		
		Для Каждого СтрокаТовары из ЗаказКлиента.Товары Цикл
			НоваяСтрокаТовары = ЗаказМагазинаОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТовары,,
				"ВидЦены, Цена, Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки, СуммаАвтоматическойСкидки, 
				|бг_ЦенаEDI, бг_ЦенаСоСкидкой, бг_ТребуемаяЦена, бг_СуммаПримененнойСкидки");
		КонецЦикла;
		
		ДанныеЗаполненияЗаказаМагазина = ДанныеЗаполненияЗаказаМагазина(ЗаказКлиента);
		
		ЗаполнитьЗначенияСвойств(ЗаказМагазинаОбъект, ДанныеЗаполненияЗаказаМагазина);
		ЗаполнитьТабличнуюЧастьТоварыЗаказаМагазина(ЗаказМагазинаОбъект, ДанныеЗаполненияЗаказаМагазина.Товары);
		
		ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЗаказМагазинаОбъект);
		
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(
			ЗаказМагазинаОбъект.НалогообложениеНДС, 
			ПараметрыЗаполнения);
			
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(
			ЗаказМагазинаОбъект.Договор, 
			ЗаказМагазинаОбъект.БанковскийСчет, 
			ЗаказМагазинаОбъект.БанковскийСчетКонтрагента);
			
		Если ЗначениеЗаполнено(ЗаказМагазинаОбъект.Соглашение) Тогда
			ЗаказМагазинаОбъект.ЗаполнитьУсловияПродажПоСоглашению(Истина);
		Иначе
			ЗаказМагазинаОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
		
		ОбработатьТЧТовары(ЗаказМагазинаОбъект);
		
		// проверка цен
		СтрокиСНулевойЦеной = ЗаказМагазинаОбъект.Товары.НайтиСтроки(Новый Структура("Цена", 0));
		Для Каждого Строка Из СтрокиСНулевойЦеной Цикл
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена цена на номенклатуру: %1'"), Строка.Номенклатура);
			Результат.ОписаниеОшибки = СтрШаблон("%1 %2 %3", Результат.ОписаниеОшибки, ТекстОшибки, Символы.ПС);
		КонецЦикла;
		
		Если Результат.ОписаниеОшибки = "" Тогда
			НачатьТранзакцию();
			Попытка
				ЗаказМагазинаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				СостояниеСогласования = РегистрыСведений.бг_СогласованиеЗаказовКлиентов.СостояниеСогласования(ЗаказКлиента);
				СостояниеСогласования.ЗаказКлиента = ЗаказМагазинаОбъект.Ссылка;
				
				РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ЗаписатьНовоеСостояние(
				ЗаказМагазинаОбъект.Ссылка, СостояниеСогласования);
				
				Результат.ЗаказМагазина = ЗаказМагазинаОбъект.Ссылка;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				Результат.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		Результат.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление скидок в документах РеализацияТоваровИУслуг и
// ТТНИсходящаяЕГАИС связанных с заказом клиента
//
// Параметры:
//  ЗаказКлиента - ДокументОбъект.ЗаказКлиента
//
Процедура ОбновитьСкидкиВЗаказеМагазина(ЗаказКлиента, ЗаказМагазина, ДанныеДляПересчета) Экспорт
	
	ЗаказМагазинаОбъект = ЗаказМагазина.ПолучитьОбъект();

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказМагазинаОбъект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));

	Для Каждого СтрокаТовары Из ЗаказМагазинаОбъект.Товары Цикл
		СтрокаПоиска = ДанныеДляПересчета.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
		Если СтрокаПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТовары.ПроцентРучнойСкидки = СтрокаПоиска.ПроцентРучнойСкидки + СтрокаПоиска.ПроцентАвтоматическойСкидки;
		СтрокаТовары.СуммаРучнойСкидки = СтрокаПоиска.СуммаРучнойСкидки + СтрокаПоиска.СуммаАвтоматическойСкидки;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, Неопределено);
	КонецЦикла;

	Если ЗаказМагазинаОбъект.Проведен Тогда
		ЗаказМагазинаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ЗаказМагазинаОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;

КонецПроцедуры

// Выполняет обновление скидок в документах РеализацияТоваровИУслуг и
// ТТНИсходящаяЕГАИС связанных с заказом клиента
//
// Параметры:
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента
//
Функция ПодготовитьДанныеДляОтчетаПоСкидкам(ДанныеЗаказов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыДоПересчета.НомерСтроки КАК НомерСтроки,
	|	ТоварыДоПересчета.Номенклатура КАК Номенклатура,
	|	ТоварыДоПересчета.Количество КАК Количество,
	|	ТоварыДоПересчета.Упаковка КАК Упаковка,
	|	ТоварыДоПересчета.Цена КАК Цена,
	|	ТоварыДоПересчета.Сумма КАК Сумма,
	|	ТоварыДоПересчета.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыДоПересчета.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТоварыДоПересчета.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыДоПересчета.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки
	|ПОМЕСТИТЬ ТоварыДоПересчета
	|ИЗ
	|	&ТоварыДоПересчета КАК ТоварыДоПересчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыПослеПересчета.НомерСтроки КАК НомерСтроки,
	|	ТоварыПослеПересчета.Номенклатура КАК Номенклатура,
	|	ТоварыПослеПересчета.Количество КАК Количество,
	|	ТоварыПослеПересчета.Упаковка КАК Упаковка,
	|	ТоварыПослеПересчета.Цена КАК Цена,
	|	ТоварыПослеПересчета.Сумма КАК Сумма,
	|	ТоварыПослеПересчета.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыПослеПересчета.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТоварыПослеПересчета.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыПослеПересчета.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки
	|ПОМЕСТИТЬ ТоварыПослеПересчета
	|ИЗ
	|	&ТоварыПослеПересчета КАК ТоварыПослеПересчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказаМагазина.НомерСтроки КАК НомерСтроки,
	|	ТоварыЗаказаМагазина.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказаМагазина.Количество КАК Количество,
	|	ТоварыЗаказаМагазина.Упаковка КАК Упаковка,
	|	ТоварыЗаказаМагазина.Цена КАК Цена,
	|	ТоварыЗаказаМагазина.Сумма КАК Сумма,
	|	ТоварыЗаказаМагазина.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ТоварыЗаказаМагазина.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ТоварыЗаказаМагазина.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ТоварыЗаказаМагазина.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки
	|ПОМЕСТИТЬ ТоварыЗаказаМагазина
	|ИЗ
	|	&ТоварыЗаказаМагазина КАК ТоварыЗаказаМагазина
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказаМагазина.НомерСтроки КАК НомерСтроки,
	|	ТоварыЗаказаМагазина.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказаМагазина.Количество КАК Количество,
	|	ТоварыЗаказаМагазина.Упаковка КАК Упаковка,
	|	ТоварыЗаказаМагазина.Цена КАК ЦенаМагазина,
	|	ТоварыЗаказаМагазина.Сумма КАК СуммаМагазина,
	|	ТоварыЗаказаМагазина.Сумма + ТоварыЗаказаМагазина.СуммаРучнойСкидки + ТоварыЗаказаМагазина.СуммаАвтоматическойСкидки КАК СуммаМагазинаБезСкидки,
	|	ТоварыЗаказаМагазина.ПроцентРучнойСкидки + ТоварыЗаказаМагазина.ПроцентАвтоматическойСкидки КАК ПроцентСкидкиМагазина,
	|	ТоварыЗаказаМагазина.СуммаРучнойСкидки + ТоварыЗаказаМагазина.СуммаАвтоматическойСкидки КАК СуммаСкидкиМагазина,
	|	ТоварыПослеПересчета.Цена КАК ЦенаПослеПересчета,
	|	ТоварыПослеПересчета.Сумма КАК СуммаПослеПересчета,
	|	ТоварыПослеПересчета.Сумма + ТоварыПослеПересчета.СуммаРучнойСкидки + ТоварыПослеПересчета.СуммаАвтоматическойСкидки КАК СуммаПослеПересчетаБезСкидки,
	|	ТоварыПослеПересчета.ПроцентРучнойСкидки + ТоварыПослеПересчета.ПроцентАвтоматическойСкидки КАК СкидкаПослеПересчета,
	|	ТоварыПослеПересчета.СуммаРучнойСкидки + ТоварыПослеПересчета.СуммаАвтоматическойСкидки КАК СуммаСкидкиПослеПересчета,
	|	ТоварыДоПересчета.Цена КАК ЦенаДоПересчета,
	|	ТоварыДоПересчета.Сумма КАК СуммаДоПересчета,
	|	ТоварыДоПересчета.Сумма + ТоварыДоПересчета.СуммаРучнойСкидки + ТоварыДоПересчета.СуммаАвтоматическойСкидки КАК СуммаДоПересчетаБезСкидки,
	|	ТоварыДоПересчета.ПроцентРучнойСкидки + ТоварыДоПересчета.ПроцентАвтоматическойСкидки КАК СкидкаДоПересчета,
	|	ТоварыДоПересчета.СуммаРучнойСкидки + ТоварыДоПересчета.СуммаАвтоматическойСкидки КАК СуммаСкидкиДоПересчета
	|ПОМЕСТИТЬ ТоварыОбщая
	|ИЗ
	|	ТоварыЗаказаМагазина КАК ТоварыЗаказаМагазина
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДоПересчета КАК ТоварыДоПересчета
	|		ПО ТоварыЗаказаМагазина.НомерСтроки = ТоварыДоПересчета.НомерСтроки
	|			И ТоварыЗаказаМагазина.Номенклатура = ТоварыДоПересчета.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПослеПересчета КАК ТоварыПослеПересчета
	|		ПО ТоварыЗаказаМагазина.НомерСтроки = ТоварыПослеПересчета.НомерСтроки
	|			И ТоварыЗаказаМагазина.Номенклатура = ТоварыПослеПересчета.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Организация) КАК ПредставлениеПоставщика,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Партнер) КАК ПредставлениеПокупателя,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.Ссылка) КАК ТекстЗаголовка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТоварыЗаказаМагазина.Количество) КАК ВсегоКоличество,
	|	СУММА(ТоварыЗаказаМагазина.Сумма + ТоварыЗаказаМагазина.СуммаРучнойСкидки + ТоварыЗаказаМагазина.СуммаАвтоматическойСкидки) КАК ВсегоБезСкидокМагазину,
	|	СУММА(ТоварыЗаказаМагазина.СуммаРучнойСкидки + ТоварыЗаказаМагазина.СуммаАвтоматическойСкидки) КАК ВсегоСкидокМагазину,
	|	ТоварыЗаказаМагазина.Сумма КАК ВсегоМагазину
	|ИЗ
	|	ТоварыЗаказаМагазина КАК ТоварыЗаказаМагазина
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаказаМагазина.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТоварыДоПересчета.Сумма + ТоварыДоПересчета.СуммаРучнойСкидки + ТоварыДоПересчета.СуммаАвтоматическойСкидки) КАК ВсегоБезСкидок,
	|	СУММА(ТоварыДоПересчета.СуммаРучнойСкидки + ТоварыДоПересчета.СуммаАвтоматическойСкидки) КАК ВсегоСкидок,
	|	СУММА(ТоварыДоПересчета.Сумма) КАК Всего
	|ИЗ
	|	ТоварыДоПересчета КАК ТоварыДоПересчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ТоварыПослеПересчета.Сумма) КАК ВсегоПослеПересчета,
	|	СУММА(ТоварыПослеПересчета.Сумма + ТоварыПослеПересчета.СуммаРучнойСкидки + ТоварыПослеПересчета.СуммаАвтоматическойСкидки) КАК ВсегоБезСкидокПослеПересчета,
	|	СУММА(ТоварыПослеПересчета.СуммаРучнойСкидки + ТоварыПослеПересчета.СуммаАвтоматическойСкидки) КАК ВсегоСкидокПослеПересчета
	|ИЗ
	|	ТоварыПослеПересчета КАК ТоварыПослеПересчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОбщая.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры, """")) КАК Код,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыОбщая.Номенклатура) КАК Номенклатура,
	|	ТоварыОбщая.Количество КАК Количество,
	|	ТоварыОбщая.Упаковка КАК Упаковка,
	|	ТоварыОбщая.ЦенаМагазина КАК ЦенаМагазину,
	|	ТоварыОбщая.СуммаМагазина КАК СуммаБезСкидкиМагазину,
	|	ТоварыОбщая.ПроцентСкидкиМагазина КАК ПроцентСкидкиМагазину,
	|	ТоварыОбщая.СуммаСкидкиМагазина КАК СуммаСкидкиМагазину,
	|	ТоварыОбщая.СуммаМагазина + ТоварыОбщая.СуммаСкидкиМагазина КАК СуммаМагазину,
	|	ТоварыОбщая.ЦенаДоПересчета КАК ЦенаДоПересчета,
	|	ТоварыОбщая.СуммаДоПересчета + ТоварыОбщая.СуммаСкидкиДоПересчета КАК СуммаБезСкидкиДоПересчета,
	|	ТоварыОбщая.СкидкаДоПересчета КАК ПроцентСкидкиДоПересчета,
	|	ТоварыОбщая.СуммаСкидкиДоПересчета КАК СуммаСкидкиДоПересчета,
	|	ТоварыОбщая.СуммаДоПересчета КАК СуммаДоПересчета,
	|	ТоварыОбщая.ЦенаПослеПересчета КАК ЦенаПослеПересчета,
	|	ТоварыОбщая.СуммаПослеПересчета + ТоварыОбщая.СуммаСкидкиПослеПересчета КАК СуммаБезСкидкиПослеПересчета,
	|	ТоварыОбщая.СкидкаПослеПересчета КАК ПроцентСкидкиПослеПересчета,
	|	ТоварыОбщая.СуммаСкидкиПослеПересчета КАК СуммаСкидкиПослеПересчета,
	|	ТоварыОбщая.СуммаПослеПересчета КАК СуммаПослеПересчета
	|ИЗ
	|	ТоварыОбщая КАК ТоварыОбщая
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО ТоварыОбщая.Номенклатура = УпаковкиЕдиницыИзмерения.Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОбщая.НомерСтроки,
	|	ТоварыОбщая.Количество,
	|	ТоварыОбщая.Упаковка,
	|	ТоварыОбщая.ЦенаМагазина,
	|	ТоварыОбщая.СуммаМагазина,
	|	ТоварыОбщая.ПроцентСкидкиМагазина,
	|	ТоварыОбщая.СуммаСкидкиМагазина,
	|	ТоварыОбщая.ЦенаПослеПересчета,
	|	ТоварыОбщая.СуммаПослеПересчета,
	|	ТоварыОбщая.СкидкаПослеПересчета,
	|	ТоварыОбщая.СуммаСкидкиПослеПересчета,
	|	ТоварыОбщая.ЦенаДоПересчета,
	|	ТоварыОбщая.СуммаДоПересчета,
	|	ТоварыОбщая.СкидкаДоПересчета,
	|	ТоварыОбщая.СуммаСкидкиДоПересчета,
	|	ПРЕДСТАВЛЕНИЕ(ТоварыОбщая.Номенклатура)";

	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаказов.Ссылка);
	Запрос.УстановитьПараметр("ТоварыДоПересчета", ДанныеЗаказов.ТоварыДоПересчета);
	Запрос.УстановитьПараметр("ТоварыПослеПересчета", ДанныеЗаказов.ТоварыПослеПересчета);
	Запрос.УстановитьПараметр("ТоварыЗаказаМагазина", ДанныеЗаказов.ТоварыЗаказаМагазина);

	Результаты = Запрос.ВыполнитьПакет();

	ДанныеДляОтчета = Новый Структура;
	ДанныеДляОтчета.Вставить("ЗаказКлиента", ДанныеЗаказов.Ссылка);
	ДанныеДляОтчета.Вставить("ДанныеШапки", ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(Результаты[Результаты.Количество() - 5]));

	ДанныеПодвала = Новый Структура;
	ДанныеПодвала.Вставить("ИтогиМагазина", ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(Результаты[Результаты.Количество() - 4]));
	ДанныеПодвала.Вставить("ИтогиДоПересчета", ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(Результаты[Результаты.Количество() - 3]));
	ДанныеПодвала.Вставить("ИтогиПослеПересчета", ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(Результаты[Результаты.Количество() - 2]));

	ДанныеДляОтчета.Вставить("ДанныеПодвала", ДанныеПодвала);
	ДанныеДляОтчета.Вставить("Товары", Результаты[Результаты.Количество() - 1].Выгрузить());

	Возврат ДанныеДляОтчета;

КонецФункции

// Выполняет создание заказа магазина на основании изменения 
// статуса согласования заказа розничного покупателя
//
// Параметры 
//  Источник - РегистрСведений.бг_СогласованиеЗаказовКлиентов
//  Отказ - Булево
//  РежимПроведения - РежимПроведенияДокумента
//
Процедура СоздатьЗаказМагазинаПриИзменииСтатусаСогласования(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказСсылка = Источник.Отбор.ЗаказКлиента.Значение;
	Если Не ЗначениеЗаполнено(ЗаказСсылка)
		Или Не ОбщегоНазначения.СсылкаСуществует(ЗаказСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоЗаказРозничногоПокупателя(ЗаказСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из Источник Цикл
		РезультатСогласованияКК = Запись.РезультатСогласованияКК;
		РезультатСогласованияФК = Запись.РезультатСогласованияФК;
	КонецЦикла;
	
	Если РезультатСогласованияКК <> Перечисления.бг_РезультатыСогласования.Согласовано
		Или РезультатСогласованияФК <> Перечисления.бг_РезультатыСогласования.Согласовано Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказВГО = НайтиЗаказМагазина(ЗаказСсылка);
	Если ЗначениеЗаполнено(ЗаказВГО) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СоздатьЗаказМагазина(ЗаказСсылка);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Создание заказа ВГО'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказКлиента,
			ЗаказСсылка, 
			СтрШаблон(НСтр("ru = 'Не удалось создать заказ ВГО по причине %1'"), 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

// Функция - Возвращает признак того, что начальные товары по заказу клиента заполнены
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//
//  Возвращаемое значение:
//   Булево - Истина, если начальные товары по заказу клиента заполнены.
//
Функция НачальныеТоварыЗаполнены(ЗаказКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	бг_НачальныеТоварыЗаказовКлиентов.ЗаказКлиента КАК ЗаказКлиента,
		|	бг_НачальныеТоварыЗаказовКлиентов.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.бг_НачальныеТоварыЗаказовКлиентов КАК бг_НачальныеТоварыЗаказовКлиентов
		|ГДЕ
		|	бг_НачальныеТоварыЗаказовКлиентов.ЗаказКлиента = &ЗаказКлиента";	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Процедура - Выполняет заполнение начальных товаров заказа клиента в регистре
//
// Параметры:
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//  ТоварыЗаказКлиента - ТаблицаЗначений - данные ТЧ "Товары" заказа клиента.
//
Процедура ЗаполнитьНачальныеТовары(ЗаказКлиента, ТоварыЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТоварыЗаказКлиента.Свернуть("Номенклатура", "Сумма, Количество");
	
	Для Каждого СтрокаТоваров Из ТоварыЗаказКлиента Цикл 
		НаборЗаписей = РегистрыСведений.бг_НачальныеТоварыЗаказовКлиентов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказКлиента.Установить(ЗаказКлиента);
		НаборЗаписей.Отбор.Номенклатура.Установить(СтрокаТоваров.Номенклатура);
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТоваров);
		Запись.ЗаказКлиента = ЗаказКлиента;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать(Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу документов реализации, связанных с закзом клиента
//
// Параметры:
//  Заказ - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реализаций
//    Колонки:
//    Ссылка - документ РеализацияТоваровУслуг
//    Проведен - признак проведения
//
Функция ДокументыРеализацииПоЗаказу(Заказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	Не РеализацияТоваровУслуг.ПометкаУдаления
	|	И РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

#Область ПодпискиНаСобытия

Процедура ЗаказКлиентаПриПроведении(Источник, Отказ, РежимПроведения) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	бг_ЗакрытиеЗаказовКлиентов.ПометитьНаУдалениеПодчиненныеДокументы(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхДляПодбораТоваровВЗаказКлиента

// Вспомогательные процедуры и функции. Вызываются из функции ДанныеПоНоменклатуре(). 

Функция ПустыеДанныеПоНоменклатуре() 
	
	ОписаниеТипаТаблицаЗначений = Новый ОписаниеТипов("ТаблицаЗначений");
	
	ДанныеПоНоменклатуре = Новый ТаблицаЗначений;
	ДанныеПоНоменклатуре.Колонки.Добавить(
			"КодДляПоискаНоменклатуры", 
			бг_ОбщегоНазначенияСервер.ОписаниеТипаКодНоменклатурыКонтрагента());
	ДанныеПоНоменклатуре.Колонки.Добавить("СоответствующаяНоменклатура", ОписаниеТипаТаблицаЗначений);
	ДанныеПоНоменклатуре.Колонки.Добавить("СвободныеОстатки", ОписаниеТипаТаблицаЗначений);
	ДанныеПоНоменклатуре.Колонки.Добавить("ДолгосрочныеРезервы", ОписаниеТипаТаблицаЗначений);
	ДанныеПоНоменклатуре.Колонки.Добавить("ДолгосрочныеРезервыСтороннихПартнеров", ОписаниеТипаТаблицаЗначений);
	ДанныеПоНоменклатуре.Колонки.Добавить("ДолгосрочныеРезервыПоКаналамПродаж", ОписаниеТипаТаблицаЗначений);
	ДанныеПоНоменклатуре.Колонки.Добавить("ДолгосрочныеРезервыВЗаказахПоставщикам", ОписаниеТипаТаблицаЗначений); 
	ДанныеПоНоменклатуре.Колонки.Добавить("ЧужиеДолгосрочныеРезервыВЗаказахПоставщикам", ОписаниеТипаТаблицаЗначений);
	ДанныеПоНоменклатуре.Колонки.Добавить("СвободныеОстаткиВЗаказахПоставщикам", ОписаниеТипаТаблицаЗначений);
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции	

Функция ЗапросДанныеПоНоменклатуре(ДанныеЗаполнения)

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
    Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	СоздатьВспомогательныеВТ(ДанныеЗаполнения, МенеджерВременныхТаблиц);
	УстановитьБлокировкиРегистраРаспределениеЗапасов(МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
	Запрос.УстановитьПараметр("Партнер", ДанныеЗаполнения.Партнер);
	Запрос.УстановитьПараметр("ИсточникЗаказа", ДанныеЗаполнения.ИсточникЗаказа);
	Запрос.УстановитьПараметр("КаналПродаж", ДанныеЗаполнения.КаналПродаж);
	Запрос.УстановитьПараметр("ЗаявкаКлиента", Неопределено);
	Запрос.УстановитьПараметр("ЗаказКлиента", Неопределено);

	Заказ = Неопределено;
	ДанныеЗаполнения.Свойство("Ссылка", Заказ);
	Если ДанныеЗаполнения.Свойство("ОбособленныйЗаказКлиента") 
		И ЗначениеЗаполнено(ДанныеЗаполнения.ОбособленныйЗаказКлиента) Тогда
		// В рамках заявки обособленно обеспечиваем один заказ.
		Заказ = ДанныеЗаполнения.ОбособленныйЗаказКлиента;
	КонецЕсли; 
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.битЗаявкаКлиента") Тогда
		Запрос.УстановитьПараметр("ЗаявкаКлиента", Заказ);
		Запрос.УстановитьПараметр("ЗаказКлиента", Неопределено);
		Запрос.УстановитьПараметр("ЗаказыПоЗаявкеКлиента", Истина);
	ИначеЕсли ТипЗнч(Заказ) =Тип("ДокументСсылка.ЗаказКлиента") Тогда	
		Запрос.УстановитьПараметр("ЗаявкаКлиента", Неопределено);
		Запрос.УстановитьПараметр("ЗаказКлиента", Заказ);
		Запрос.УстановитьПараметр("ЗаказыПоЗаявкеКлиента", Ложь);
	Иначе
		Запрос.УстановитьПараметр("ЗаявкаКлиента", Неопределено);
		Запрос.УстановитьПараметр("ЗаказКлиента", Неопределено);
		Запрос.УстановитьПараметр("ЗаказыПоЗаявкеКлиента", Ложь);
	КонецЕсли;	
	
	СегментНоменклатурыЗапрещеннойКПродаже = Неопределено;	
	ДанныеЗаполнения.Свойство("СегментНоменклатурыЗапрещеннойКПродаже", СегментНоменклатурыЗапрещеннойКПродаже);
	
	Запрос.УстановитьПараметр("СегментНоменклатурыЗапрещеннойКПродаже", СегментНоменклатурыЗапрещеннойКПродаже);
	Запрос.УстановитьПараметр(
		"ИспользоватьСегментНоменклатурыЗапрещеннойКПродаже", 
		ЗначениеЗаполнено(СегментНоменклатурыЗапрещеннойКПродаже));
	
	СегментНоменклатурыПриоритетнойКПродаже = Неопределено;	
	ДанныеЗаполнения.Свойство("СегментНоменклатурыПриоритетнойКПродаже", СегментНоменклатурыПриоритетнойКПродаже);
	
	Запрос.УстановитьПараметр("СегментНоменклатурыПриоритетнойКПродаже", СегментНоменклатурыПриоритетнойКПродаже);
	Запрос.УстановитьПараметр(
		"ИспользоватьСегментНоменклатурыПриоритетнойКПродаже", 
		ЗначениеЗаполнено(СегментНоменклатурыПриоритетнойКПродаже));
		
	Если ДанныеЗаполнения.Свойство("ИспользоватьПравилаОкругленияДоКороба") Тогда	
		ИспользоватьПравилаОкругленияДоКороба = ДанныеЗаполнения.ИспользоватьПравилаОкругленияДоКороба;
	Иначе
		ИспользоватьПравилаОкругленияДоКороба = Ложь;
	КонецЕсли;	
	Запрос.УстановитьПараметр("ИспользоватьПравилаОкругленияДоКороба", ИспользоватьПравилаОкругленияДоКороба);
	
	Если ДанныеЗаполнения.Свойство("ПодборНоменклатурыПоНаибольшимОстаткамСерий") Тогда
		ПодборНоменклатурыПоНаибольшимОстаткамСерий = ДанныеЗаполнения.ПодборНоменклатурыПоНаибольшимОстаткамСерий;
	Иначе
		ПодборНоменклатурыПоНаибольшимОстаткамСерий = Ложь;
	КонецЕсли;	
	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	Партнеры.ПартнерРезерва КАК Партнер
	|ПОМЕСТИТЬ ВТПартнерыЧужихДолгосрочныхРезервов
	|ИЗ
	|	РегистрСведений.бг_ПартнерыДолгосрочныхРезервов КАК Партнеры
	|ГДЕ
	|	Партнеры.ПартнерОтгрузки = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыКаналовПродаж.КаналПродаж КАК КаналПродаж,
	|	ПриоритетыКаналовПродаж.Приоритет КАК Приоритет,
	|	ПриоритетыКаналовПродаж.МаксимальноеОсвобождаемоеКоличествоПоОднойНоменклатуре КАК МаксимальноеОсвобождаемоеКоличествоПоОднойНоменклатуре
	|ПОМЕСТИТЬ ВТПриоритетыКаналовПродаж
	|ИЗ
	|	РегистрСведений.бг_ПриоритетыКаналовПродажДолгосрочныхРезервов КАК ПриоритетыКаналовПродаж
	|ГДЕ
	|	ПриоритетыКаналовПродаж.Организация = &Организация
	|	И ПриоритетыКаналовПродаж.ИсточникЗаказа = &ИсточникЗаказа
	|	И ПриоритетыКаналовПродаж.КаналПродажОтгрузки = &КаналПродаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТИсключаемаяНоменклатура
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	&ИспользоватьСегментНоменклатурыЗапрещеннойКПродаже
	|	И НоменклатураСегмента.Сегмент = &СегментНоменклатурыЗапрещеннойКПродаже
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТПриоритетнаяНоменклатура
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	&ИспользоватьСегментНоменклатурыПриоритетнойКПродаже
	|	И НоменклатураСегмента.Сегмент = &СегментНоменклатурыПриоритетнойКПродаже
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаОкругленияКоличества.СкюМТ КАК СКЮ_МТ,
	|	ПравилаОкругленияКоличества.ПравилоОкругления КАК ПравилоОкругления
	|ПОМЕСТИТЬ ВТПравилаОкругленияКоличества
	|ИЗ
	|	РегистрСведений.бг_ПравилаОкругленияКоличестваВЗаказахКлиентов КАК ПравилаОкругленияКоличества
	|ГДЕ
	|	&ИспользоватьПравилаОкругленияДоКороба 
	|	И ПравилаОкругленияКоличества.Партнер = &Партнер
	|	И ПравилаОкругленияКоличества.СкюМТ <> ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка)
	|	И ПравилаОкругленияКоличества.СкюМТ В
	|			(ВЫБРАТЬ 
	|				ВТНоменклатура.СКЮ_МТ
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СКЮ_МТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаОкругленияКоличества.ПравилоОкругления КАК ПравилоОкругления
	|ПОМЕСТИТЬ ВТПравилаОкругленияКоличестваПоВсемСКЮ
	|ИЗ
	|	РегистрСведений.бг_ПравилаОкругленияКоличестваВЗаказахКлиентов КАК ПравилаОкругленияКоличества
	|ГДЕ
	|	&ИспользоватьПравилаОкругленияДоКороба 
	|	И ПравилаОкругленияКоличества.Партнер = &Партнер
	|	И ПравилаОкругленияКоличества.СкюМТ = ЗНАЧЕНИЕ(Справочник.бг_ЕК_СКЮ_СкюМТ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ПОМЕСТИТЬ ВТЗаказыКлиентовРегистраторы	
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	&ЗаказыПоЗаявкеКлиента
	|	И ЗаказКлиента.бг_ЗаявкаКлиента = &ЗаявкаКлиента
	|	И ЗаказКлиента.бг_ЗаявкаКлиента <> ЗНАЧЕНИЕ(Документ.битЗаявкаКлиента.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК ЗаказКлиента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	НЕ &ЗаказыПоЗаявкеКлиента
	|	И ЗаказКлиента.Ссылка = &ЗаказКлиента
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыТоваров.ДолгосрочныйРезерв КАК ДолгосрочныйРезерв,
	|	ВЫРАЗИТЬ(РезервыТоваров.ДолгосрочныйРезерв КАК Документ.ЗаказКлиента).Партнер КАК Партнер,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад КАК Склад,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику) КАК ЗаказПоставщику,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления КАК ДатаПоступления,
	|	РезервыТоваров.Номенклатура КАК Номенклатура,
	|	РезервыТоваров.УпаковкаПаллета КАК УпаковкаПаллета,
	|	(РезервыТоваров.УПоставщикаОборот - РезервыТоваров.ОтмененоОборот - РезервыТоваров.ПоступилоОборот - РезервыТоваров.ВыбылоОборот) КАК Количество
	|ПОМЕСТИТЬ ВТОжидаемыеПоступленияПоДРДанныеРегистра
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			,
	|			ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад В
	|					(ВЫБРАТЬ
	|						ВТСклады.Склад
	|					ИЗ
	|						ВТСклады КАК ВТСклады)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТНоменклатура КАК ВТНоменклатура)
	|				И ДолгосрочныйРезерв <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)	
	|				И ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК РезервыТоваров	
	|ГДЕ
	|	ВЫРАЗИТЬ(РезервыТоваров.ДолгосрочныйРезерв КАК Документ.ЗаказКлиента).Организация = &Организация	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервыТоваров.ДолгосрочныйРезерв КАК ДолгосрочныйРезерв,
	|	ВЫРАЗИТЬ(РезервыТоваров.ДолгосрочныйРезерв КАК Документ.ЗаказКлиента).Партнер КАК Партнер,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад КАК Склад,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику) КАК ЗаказПоставщику,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления КАК ДатаПоступления,
	|	РезервыТоваров.Номенклатура КАК Номенклатура,
	|	РезервыТоваров.УпаковкаПаллета КАК УпаковкаПаллета,
	|	-(РезервыТоваров.УПоставщикаОборот - РезервыТоваров.ОтмененоОборот - РезервыТоваров.ПоступилоОборот - РезервыТоваров.ВыбылоОборот) КАК Количество
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад В
	|					(ВЫБРАТЬ
	|						ВТСклады.Склад
	|					ИЗ
	|						ВТСклады КАК ВТСклады)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТНоменклатура КАК ВТНоменклатура)
	|				И ДолгосрочныйРезерв <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)	
	|				И ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК РезервыТоваров	
	|ГДЕ
	|	РезервыТоваров.Регистратор В
	|		(ВЫБРАТЬ
	|			ВТЗаказыКлиентовРегистраторы.ЗаказКлиента
	|		ИЗ
	|			ВТЗаказыКлиентовРегистраторы КАК ВТЗаказыКлиентовРегистраторы)
	|	И ВЫРАЗИТЬ(РезервыТоваров.ДолгосрочныйРезерв КАК Документ.ЗаказКлиента).Организация = &Организация	
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыТоваров.ДолгосрочныйРезерв КАК ДолгосрочныйРезерв,
	|	РезервыТоваров.Партнер КАК Партнер,
	|	РезервыТоваров.Склад КАК Склад,
	|	РезервыТоваров.ЗаказПоставщику КАК ЗаказПоставщику,
	|	РезервыТоваров.ДатаПоступления КАК ДатаПоступления,
	|	РезервыТоваров.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиУпаковокПаллет.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	РезервыТоваров.УпаковкаПаллета КАК УпаковкаПаллета,
	|	СУММА(РезервыТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТОжидаемыеПоступленияПоДР
	|ИЗ
	|	ВТОжидаемыеПоступленияПоДРДанныеРегистра КАК РезервыТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ХарактеристикиУпаковокПаллет КАК ХарактеристикиУпаковокПаллет
	|		ПО РезервыТоваров.Номенклатура = ХарактеристикиУпаковокПаллет.Номенклатура
	|			И РезервыТоваров.УпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета
	|
	|СГРУППИРОВАТЬ ПО	
	|	РезервыТоваров.ДолгосрочныйРезерв,
	|	РезервыТоваров.Партнер,
	|	РезервыТоваров.Склад,
	|	РезервыТоваров.ЗаказПоставщику,
	|	РезервыТоваров.ДатаПоступления,
	|	РезервыТоваров.Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиУпаковокПаллет.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
	|	РезервыТоваров.УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаПоступление КАК Документ.ЗаказПоставщику) КАК ЗаказПоставщику,
	|	ИнформацияОДоступности.Свободно КАК Количество
	|ПОМЕСТИТЬ ВТОжидаемыеПоступленияНаСвободныеОстаткиДанныеРегистров
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаПоступление КАК Документ.ЗаказПоставщику) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаПоступление КАК Документ.ЗаказПоставщику).Организация = &Организация
	|	И ИнформацияОДоступности.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|	И ИнформацияОДоступности.Склад В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады КАК ВТСклады)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад КАК Склад,
	|	РезервыТоваров.Номенклатура КАК Номенклатура,
	|	РезервыТоваров.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику) КАК ЗаказПоставщику,
	|	- РезервыТоваров.УПоставщикаОборот + РезервыТоваров.ПоступилоОборот + РезервыТоваров.ОтмененоОборот КАК Количество
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			,
	|			ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад В
	|					(ВЫБРАТЬ
	|						ВТСклады.Склад
	|					ИЗ
	|						ВТСклады КАК ВТСклады)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТНоменклатура КАК ВТНоменклатура)
	|				И ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК РезервыТоваров	
	|
	|ГДЕ
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад КАК Склад,
	|	РезервыТоваров.Номенклатура КАК Номенклатура,
	|	РезервыТоваров.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику) КАК ЗаказПоставщику,
	|	- (- РезервыТоваров.УПоставщикаОборот + РезервыТоваров.ПоступилоОборот + РезервыТоваров.ОтмененоОборот) КАК Количество
	|ИЗ
	|	РегистрНакопления.бг_РезервыТоваров.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику).Склад В
	|					(ВЫБРАТЬ
	|						ВТСклады.Склад
	|					ИЗ
	|						ВТСклады КАК ВТСклады)
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТНоменклатура.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТНоменклатура КАК ВТНоменклатура)
	|				И ВЫРАЗИТЬ(ЗаказПоставщику КАК Документ.ЗаказПоставщику) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК РезервыТоваров	
	|
	|ГДЕ
	|	РезервыТоваров.Регистратор В
	|		(ВЫБРАТЬ
	|			ВТЗаказыКлиентовРегистраторы.ЗаказКлиента
	|		ИЗ
	|			ВТЗаказыКлиентовРегистраторы КАК ВТЗаказыКлиентовРегистраторы)
	|	И ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику) <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(РезервыТоваров.ЗаказПоставщику КАК Документ.ЗаказПоставщику).Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиУпаковокПаллет.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика, 
	|	ИнформацияОДоступности.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ИнформацияОДоступности.ЗаказПоставщику КАК ЗаказПоставщику,
	|	СУММА(ИнформацияОДоступности.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТОжидаемыеПоступленияНаСвободныеОстатки
	|ИЗ
	|	ВТОжидаемыеПоступленияНаСвободныеОстаткиДанныеРегистров КАК ИнформацияОДоступности
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ХарактеристикиУпаковокПаллет КАК ХарактеристикиУпаковокПаллет
	|		ПО ИнформацияОДоступности.Номенклатура = ХарактеристикиУпаковокПаллет.Номенклатура
	|			И ИнформацияОДоступности.УпаковкаПаллета = ХарактеристикиУпаковокПаллет.УпаковкаПаллета
	|
	|СГРУППИРОВАТЬ ПО	
	|	ИнформацияОДоступности.Склад,
	|	ИнформацияОДоступности.Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиУпаковокПаллет.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)), 
	|	ИнформацияОДоступности.УпаковкаПаллета,
	|	ИнформацияОДоступности.ЗаказПоставщику
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Подобранные чужие долгосрочные резервы, зарезервированные в остатках на складах, 
	// в соответствии с настройкой в РС "Приоритеты каналов продаж долгосрочных резервов".
	// При актуализации обеспечения, не отменяем движения заказов, которыми зарезервировали
	// товары на складе. Учтем эти уже отобранные чужие резервы, чтобы дважды не отобрать
	// максимальное освобождаемое количество по одной номенклатуре из чужих резервов.
	|ВЫБРАТЬ
	|	РаспределениеЗапасовДвижения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	РаспределениеЗапасовДвижения.Номенклатура КАК Номенклатура,
	|	СУММА(-РаспределениеЗапасовДвижения.Резервировать) КАК Подобрано
	|ПОМЕСТИТЬ ВТПодобранныеЧужиеДР
	|ИЗ
	|	РегистрНакопления.РаспределениеЗапасовДвижения КАК РаспределениеЗапасовДвижения	
	|
	|ГДЕ
	|	РаспределениеЗапасовДвижения.Регистратор В
	|		(ВЫБРАТЬ
	|			ВТЗаказыКлиентовРегистраторы.ЗаказКлиента
	|		ИЗ
	|			ВТЗаказыКлиентовРегистраторы КАК ВТЗаказыКлиентовРегистраторы)
	|	И ВЫРАЗИТЬ(РаспределениеЗапасовДвижения.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента) <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|	И РаспределениеЗапасовДвижения.Резервировать < 0
	|
	|СГРУППИРОВАТЬ ПО	
	|	РаспределениеЗапасовДвижения.ЗаказНаОтгрузку,
	|	РаспределениеЗапасовДвижения.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказНаОтгрузку,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистров.Номенклатура КАК Номенклатура,
	|	ДанныеРегистров.Назначение КАК Назначение,
	|	ДанныеРегистров.Склад КАК Склад,
	|	ДанныеРегистров.Серия КАК Серия,
	|	СУММА(ДанныеРегистров.СвободныйОстаток) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ВТТаблицаОстатковСерий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.Склад КАК Склад,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток КАК СвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				Склад В
	|						(ВЫБРАТЬ
	|							ВТСклады.Склад
	|						ИЗ
	|							ВТСклады КАК ВТСклады)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТНоменклатура.Номенклатура КАК Номенклатура
	|						ИЗ
	|							ВТНоменклатура КАК ВТНоменклатура)
	|					И (Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|							И НЕ ВЫРАЗИТЬ(Назначение КАК Справочник.Назначения).ДвиженияПоСкладскимРегистрам
	|						ИЛИ Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|					И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтгрузкеОстатки.Номенклатура,
	|		ТоварыКОтгрузкеОстатки.Назначение,
	|		ТоварыКОтгрузкеОстатки.Склад,
	|		ТоварыКОтгрузкеОстатки.Серия,
	|		-ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.ВРезервеОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|				,
	|				Склад В
	|						(ВЫБРАТЬ
	|							ВТСклады.Склад
	|						ИЗ
	|							ВТСклады КАК ВТСклады)
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ВТНоменклатура.Номенклатура КАК Номенклатура
	|						ИЗ
	|							ВТНоменклатура КАК ВТНоменклатура)
	|					И (Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|							И НЕ ВЫРАЗИТЬ(Назначение КАК Справочник.Назначения).ДвиженияПоСкладскимРегистрам
	|						ИЛИ Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
	|					И Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК ТоварыКОтгрузкеОстатки) КАК ДанныеРегистров
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистров.Номенклатура,
	|	ДанныеРегистров.Назначение,
	|	ДанныеРегистров.Склад,
	|	ДанныеРегистров.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистров.СвободныйОстаток) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаОстатковСерий.Номенклатура КАК Номенклатура,
	|	ВТТаблицаОстатковСерий.Назначение КАК Назначение,
	|	ВТТаблицаОстатковСерий.Склад КАК Склад,
	|	СпрСерии.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	&ТексПоляУпорядочиванияПоОстаткамСерий КАК ПорядокПоОстаткамСерий
	|ПОМЕСТИТЬ ДанныеУпорядочиванияПоСериям
	|ИЗ
	|	ВТТаблицаОстатковСерий КАК ВТТаблицаОстатковСерий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СпрСерии
	|		ПО ВТТаблицаОстатковСерий.Серия = СпрСерии.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаОстатковСерий.Номенклатура,
	|	ВТТаблицаОстатковСерий.Назначение,
	|	ВТТаблицаОстатковСерий.Склад,
	|	СпрСерии.бг_УпаковкаПаллета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Назначение,
	|	Склад,
	|	УпаковкаПаллета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Свободные остатки на складах.
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ВТСклады.Приоритет КАК Приоритет,
	|	0 КАК ПриоритетДополнительный,
	|	ВЫБОР
	|		КОГДА ВТПриоритетнаяНоменклатура.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетнаяНоменклатура,
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК ЗаказНаОтгрузку,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ЖелаемаяДатаОтгрузки,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) КАК ЗаказНаПоступление,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоступления,
	|	ИнформацияОДоступности.Свободно КАК Свободно,
	|	0 КАК ЗарезервированоСобственныеДР,
	|	0 КАК ЗарезервированоЧужиеДР,
	|	0 КАК ЗарезервированоПоКаналамПродаж,
	|	0 КАК ОжидаемоеПоступлениеСобственныеДР,
	|	0 КАК ОжидаемоеПоступлениеЧужиеДР,
	|	0 КАК ОжидаемоеПоступлениеСвободно
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК ВТСклады
	|		ПО ИнформацияОДоступности.Склад = ВТСклады.Склад
	|			И ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВТСклады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетнаяНоменклатура КАК ВТПриоритетнаяНоменклатура
	|		ПО ИнформацияОДоступности.Номенклатура = ВТПриоритетнаяНоменклатура.Номенклатура
	|			И ИнформацияОДоступности.Характеристика = ВТПриоритетнаяНоменклатура.Характеристика
	|ГДЕ
	|	ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
	|	И ИнформацияОДоступности.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|	И ИнформацияОДоступности.Склад В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады КАК ВТСклады)
	|	И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|				ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|			ИЗ
	|				ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Собственные долгосрочные резервы, зарезервированные в остатках на складах.
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад,
	|	ВТСклады.Приоритет,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер = &Партнер
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТПриоритетнаяНоменклатура.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетнаяНоменклатура,
	|	ИнформацияОДоступности.Номенклатура,
	|	ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента),
	|	ИнформацияОДоступности.ЖелаемаяДатаОтгрузки,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) КАК ЗаказНаПоступление,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоступления,
	|	0,
	|	ИнформацияОДоступности.Зарезервировано,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК ВТСклады
	|		ПО ИнформацияОДоступности.Склад = ВТСклады.Склад
	|			И ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВТСклады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетнаяНоменклатура КАК ВТПриоритетнаяНоменклатура
	|		ПО ИнформацияОДоступности.Номенклатура = ВТПриоритетнаяНоменклатура.Номенклатура
	|			И ИнформацияОДоступности.Характеристика = ВТПриоритетнаяНоменклатура.Характеристика
	|ГДЕ
	|	ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв = ИСТИНА
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер В
	|			(ВЫБРАТЬ
	|				ВТПартнеры.Партнер
	|			ИЗ
	|				ВТПартнеры КАК ВТПартнеры)
	|	И ИнформацияОДоступности.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|	И ИнформацияОДоступности.Склад В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады КАК ВТСклады)
	|	И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|				ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|			ИЗ
	|				ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Чужие долгосрочные резервы, зарезервированные в остатках на складах, 
	// в соответствии с настройкой в РС "Партнеры долгосрочных резервов".
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад,
	|	ВТСклады.Приоритет,
	|	0,
	|	ВЫБОР
	|		КОГДА ВТПриоритетнаяНоменклатура.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетнаяНоменклатура,
	|	ИнформацияОДоступности.Номенклатура,
	|	ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента),
	|	ИнформацияОДоступности.ЖелаемаяДатаОтгрузки,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) КАК ЗаказНаПоступление,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоступления,
	|	0,
	|	0,
	|	ИнформацияОДоступности.Зарезервировано,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК ВТСклады
	|		ПО ИнформацияОДоступности.Склад = ВТСклады.Склад
	|			И ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВТСклады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетнаяНоменклатура КАК ВТПриоритетнаяНоменклатура
	|		ПО ИнформацияОДоступности.Номенклатура = ВТПриоритетнаяНоменклатура.Номенклатура
	|			И ИнформацияОДоступности.Характеристика = ВТПриоритетнаяНоменклатура.Характеристика
	|ГДЕ
	|	ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв = ИСТИНА
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|	И НЕ ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер В
	|				(ВЫБРАТЬ
	|					ВТПартнеры.Партнер
	|				ИЗ
	|					ВТПартнеры КАК ВТПартнеры)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер В
	|				(ВЫБРАТЬ
	|					ВТПартнерыЧужихДолгосрочныхРезервов.Партнер
	|				ИЗ
	|					ВТПартнерыЧужихДолгосрочныхРезервов КАК ВТПартнерыЧужихДолгосрочныхРезервов)
	|	И ИнформацияОДоступности.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|	И ИнформацияОДоступности.Склад В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады КАК ВТСклады)
	|	И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|				ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|			ИЗ
	|				ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Чужие долгосрочные резервы, зарезервированные в остатках на складах, 
	// в соответствии с настройкой в РС "Приоритеты каналов продаж долгосрочных резервов".
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад,
	|	ЕСТЬNULL(ВТПриоритетыКаналовПродаж.Приоритет, 99),
	|	ВТСклады.Приоритет,
	|	ВЫБОР
	|		КОГДА ВТПриоритетнаяНоменклатура.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетнаяНоменклатура,
	|	ИнформацияОДоступности.Номенклатура,
	|	ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента),
	|	ИнформацияОДоступности.ЖелаемаяДатаОтгрузки,
	|	ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) КАК ЗаказНаПоступление,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоступления,
	|	0,
	|	0,
	|	0,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТПриоритетыКаналовПродаж.МаксимальноеОсвобождаемоеКоличествоПоОднойНоменклатуре, 0) > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ВТПриоритетыКаналовПродаж.МаксимальноеОсвобождаемоеКоличествоПоОднойНоменклатуре, 0) - ЕСТЬNULL(ВТПодобранныеЧужиеДР.Подобрано, 0) > 0
	|						ТОГДА ЕСТЬNULL(ВТПриоритетыКаналовПродаж.МаксимальноеОсвобождаемоеКоличествоПоОднойНоменклатуре, 0) - ЕСТЬNULL(ВТПодобранныеЧужиеДР.Подобрано, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ИнформацияОДоступности.Зарезервировано
	|	КОНЕЦ,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК ВТСклады
	|		ПО ИнформацияОДоступности.Склад = ВТСклады.Склад
	|			И ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВТСклады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетыКаналовПродаж КАК ВТПриоритетыКаналовПродаж
	|		ПО (ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_КаналПродаж = ВТПриоритетыКаналовПродаж.КаналПродаж)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетнаяНоменклатура КАК ВТПриоритетнаяНоменклатура
	|		ПО ИнформацияОДоступности.Номенклатура = ВТПриоритетнаяНоменклатура.Номенклатура
	|			И ИнформацияОДоступности.Характеристика = ВТПриоритетнаяНоменклатура.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодобранныеЧужиеДР КАК ВТПодобранныеЧужиеДР
	|		ПО ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента) = ВТПодобранныеЧужиеДР.ЗаказНаОтгрузку
	|			И ИнформацияОДоступности.Номенклатура = ВТПодобранныеЧужиеДР.Номенклатура
	|ГДЕ
	|	ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).бг_ДолгосрочныйРезерв = ИСТИНА
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|	И НЕ ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер В
	|				(ВЫБРАТЬ
	|					ВТПартнеры.Партнер
	|				ИЗ
	|					ВТПартнеры КАК ВТПартнеры)
	|	И НЕ ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Партнер В
	|				(ВЫБРАТЬ
	|					ВТПартнерыЧужихДолгосрочныхРезервов.Партнер
	|				ИЗ
	|					ВТПартнерыЧужихДолгосрочныхРезервов КАК ВТПартнерыЧужихДолгосрочныхРезервов)
	|	И ИнформацияОДоступности.Номенклатура В
	|			(ВЫБРАТЬ
	|				ВТНоменклатура.Номенклатура КАК Номенклатура
	|			ИЗ
	|				ВТНоменклатура КАК ВТНоменклатура)
	|	И ИнформацияОДоступности.Склад В
	|			(ВЫБРАТЬ
	|				ВТСклады.Склад
	|			ИЗ
	|				ВТСклады КАК ВТСклады)
	|	И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|				ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|			ИЗ
	|				ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|	И НЕ ВТПриоритетыКаналовПродаж.КаналПродаж ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Собственные долгосрочные резервы, размещенные в заказах поставщикам.
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад,
	|	ВТСклады.Приоритет,
	|	ВЫБОР
	|		КОГДА ИнформацияОДоступности.Партнер = &Партнер
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПриоритетДополнительный,
	|	ВЫБОР
	|		КОГДА ВТПриоритетнаяНоменклатура.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетнаяНоменклатура,
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ИнформацияОДоступности.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ИнформацияОДоступности.Партнер КАК Партнер,
	|	ИнформацияОДоступности.ДолгосрочныйРезерв КАК ЗаказНаОтгрузку,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ЖелаемаяДатаОтгрузки,
	|	ИнформацияОДоступности.ЗаказПоставщику КАК ЗаказНаПоступление,
    |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ИнформацияОДоступности.ДатаПоступления КАК ДатаПоступления,
	|	0 КАК Свободно,
	|	0 КАК ЗарезервированоСобственныеДР,
	|	0 КАК ЗарезервированоЧужиеДР,
	|	0 КАК ЗарезервированоПоКаналамПродаж,
	|	ИнформацияОДоступности.Количество КАК ОжидаемоеПоступлениеСобственныеДР,
	|	0 КАК ОжидаемоеПоступлениеЧужиеДР,
	|	0 КАК ОжидаемоеПоступлениеСвободно
	|ИЗ
	|	ВТОжидаемыеПоступленияПоДР КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК ВТСклады
	|		ПО ИнформацияОДоступности.Склад = ВТСклады.Склад
	|			И ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВТСклады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетнаяНоменклатура КАК ВТПриоритетнаяНоменклатура
	|		ПО ИнформацияОДоступности.Номенклатура = ВТПриоритетнаяНоменклатура.Номенклатура
	|			И ИнформацияОДоступности.Характеристика = ВТПриоритетнаяНоменклатура.Характеристика
	|ГДЕ
	|	ИнформацияОДоступности.Партнер В
	|			(ВЫБРАТЬ
	|				ВТПартнеры.Партнер
	|			ИЗ
	|				ВТПартнеры КАК ВТПартнеры)
	|	И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|				ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|			ИЗ
	|				ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Чужие долгосрочные резервы, размещенные в заказах поставщикам, 
	// в соответствии с настройкой в РС "Партнеры долгосрочных резервов".
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад,
	|	ВТСклады.Приоритет,
	|	0 КАК ПриоритетДополнительный,
	|	ВЫБОР
	|		КОГДА ВТПриоритетнаяНоменклатура.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетнаяНоменклатура,
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ИнформацияОДоступности.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ИнформацияОДоступности.Партнер КАК Партнер,
	|	ИнформацияОДоступности.ДолгосрочныйРезерв КАК ЗаказНаОтгрузку,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ЖелаемаяДатаОтгрузки,
	|	ИнформацияОДоступности.ЗаказПоставщику КАК ЗаказНаПоступление,
    |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ИнформацияОДоступности.ДатаПоступления КАК ДатаПоступления,
	|	0 КАК Свободно,
	|	0 КАК ЗарезервированоСобственныеДР,
	|	0 КАК ЗарезервированоЧужиеДР,
	|	0 КАК ЗарезервированоПоКаналамПродаж,
	|	0 КАК ОжидаемоеПоступлениеСобственныеДР,
	|	ИнформацияОДоступности.Количество КАК ОжидаемоеПоступлениеЧужиеДР,
	|	0 КАК ОжидаемоеПоступлениеСвободно
	|ИЗ
	|	ВТОжидаемыеПоступленияПоДР КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК ВТСклады
	|		ПО ИнформацияОДоступности.Склад = ВТСклады.Склад
	|			И ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВТСклады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетнаяНоменклатура КАК ВТПриоритетнаяНоменклатура
	|		ПО ИнформацияОДоступности.Номенклатура = ВТПриоритетнаяНоменклатура.Номенклатура
	|			И ИнформацияОДоступности.Характеристика = ВТПриоритетнаяНоменклатура.Характеристика
	|ГДЕ
	|	НЕ ИнформацияОДоступности.Партнер В
	|			(ВЫБРАТЬ
	|				ВТПартнеры.Партнер
	|			ИЗ
	|				ВТПартнеры КАК ВТПартнеры)
	|	И ИнформацияОДоступности.Партнер В
	|			(ВЫБРАТЬ
	|				ВТПартнерыЧужихДолгосрочныхРезервов.Партнер
	|			ИЗ
	|				ВТПартнерыЧужихДолгосрочныхРезервов КАК ВТПартнерыЧужихДолгосрочныхРезервов)
	|	И НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|				ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|			ИЗ
	|				ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Свободные ожидаемые поступления в заказах поставщикам.
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад,
	|	ВТСклады.Приоритет,
	|	0,
	|	ВЫБОР
	|		КОГДА ВТПриоритетнаяНоменклатура.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПриоритетнаяНоменклатура,
	|	ИнформацияОДоступности.Номенклатура,
	|	ИнформацияОДоступности.УпаковкаПаллета,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка) КАК ЗаказНаОтгрузку,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ЖелаемаяДатаОтгрузки,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказПоставщику КАК Документ.ЗаказПоставщику) КАК ЗаказНаПоступление,
    |	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказПоставщику КАК Документ.ЗаказПоставщику).ДатаПоступления КАК ДатаПоступления,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ИнформацияОДоступности.Количество
	|ИЗ
	|	ВТОжидаемыеПоступленияНаСвободныеОстатки КАК ИнформацияОДоступности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК ВТСклады
	|		ПО ИнформацияОДоступности.Склад = ВТСклады.Склад
	|			И ВЫРАЗИТЬ(ИнформацияОДоступности.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ВТСклады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПриоритетнаяНоменклатура КАК ВТПриоритетнаяНоменклатура
	|		ПО ИнформацияОДоступности.Номенклатура = ВТПриоритетнаяНоменклатура.Номенклатура
	|			И ИнформацияОДоступности.Характеристика = ВТПриоритетнаяНоменклатура.Характеристика
	|ГДЕ
	|	НЕ (ИнформацияОДоступности.Номенклатура, ИнформацияОДоступности.Характеристика) В
	|			(ВЫБРАТЬ
	|				ВТИсключаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|				ВТИсключаемаяНоменклатура.Характеристика КАК Характеристика
	|			ИЗ
	|				ВТИсключаемаяНоменклатура КАК ВТИсключаемаяНоменклатура)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Склад КАК Склад,
	|	Склады.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Склады.Приоритет КАК Приоритет,
	|	Склады.ИспользоватьДляОтложенногоОбеспечения КАК ИспользоватьДляОтложенногоОбеспечения
	|ИЗ
	|	ВТСклады КАК Склады
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатура.КодДляПоискаНоменклатуры КАК КодДляПоискаНоменклатуры,
	|	ВТНоменклатура.Номенклатура КАК Номенклатура,
	|	ВТНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ВТНоменклатура.УчетОстатковИРезервовВРазрезеУпаковокПаллет КАК УчетОстатковИРезервовВРазрезеУпаковокПаллет, 
	|	ВТ_Остатки.УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВТ_Остатки.Склад КАК Склад,
	|	ВТ_Остатки.Приоритет КАК Приоритет,
	|	ВТ_Остатки.ПриоритетДополнительный КАК ПриоритетДополнительный,
	|	ВТ_Остатки.Партнер КАК Партнер,
	|	ВТ_Остатки.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	ВТ_Остатки.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ВТ_Остатки.ЗаказНаПоступление КАК ЗаказНаПоступление,
    |	ВТ_Остатки.Назначение КАК Назначение,
	|	ВТ_Остатки.ДатаПоступления КАК ДатаПоступления,
	|	ЕСТЬNULL(ВТ_Остатки.ПриоритетнаяНоменклатура, ЛОЖЬ) КАК ПриоритетнаяНоменклатура,
	|	ЕСТЬNULL(ВТПравилаОкругленияКоличества.ПравилоОкругления, ЕСТЬNULL(ВТПравилаОкругленияКоличестваПоВсемСКЮ.ПравилоОкругления, НЕОПРЕДЕЛЕНО)) КАК ПравилоОкругления, 
	|	&ТекстПоляПорядокПоОстаткамСерий КАК ПорядокПоОстаткамСерий,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Остатки.Свободно, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Остатки.Свободно, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Свободно,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Остатки.ЗарезервированоСобственныеДР, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Остатки.ЗарезервированоСобственныеДР, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗарезервированоСобственныеДР,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Остатки.ЗарезервированоЧужиеДР, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Остатки.ЗарезервированоЧужиеДР, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗарезервированоЧужиеДР,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Остатки.ЗарезервированоПоКаналамПродаж, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Остатки.ЗарезервированоПоКаналамПродаж, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗарезервированоПоКаналамПродаж,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Остатки.ОжидаемоеПоступлениеСобственныеДР, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Остатки.ОжидаемоеПоступлениеСобственныеДР, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОжидаемоеПоступлениеСобственныеДР,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Остатки.ОжидаемоеПоступлениеЧужиеДР, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Остатки.ОжидаемоеПоступлениеЧужиеДР, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОжидаемоеПоступлениеЧужиеДР,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВТ_Остатки.ОжидаемоеПоступлениеСвободно, 0) > 0
	|				ТОГДА ЕСТЬNULL(ВТ_Остатки.ОжидаемоеПоступлениеСвободно, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОжидаемоеПоступлениеСвободно
	|ИЗ
	|	ВТНоменклатура КАК ВТНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО ВТНоменклатура.Номенклатура = ВТ_Остатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеУпорядочиванияПоСериям КАК ДанныеУпорядочиванияПоСериям
	|		ПО ВТНоменклатура.Номенклатура = ДанныеУпорядочиванияПоСериям.Номенклатура
	|			И ВТ_Остатки.Назначение = ДанныеУпорядочиванияПоСериям.Назначение
	|			И ВТ_Остатки.Склад = ДанныеУпорядочиванияПоСериям.Склад
	|			И ВТ_Остатки.УпаковкаПаллета = ДанныеУпорядочиванияПоСериям.УпаковкаПаллета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравилаОкругленияКоличества КАК ВТПравилаОкругленияКоличества
	|		ПО ВТНоменклатура.СКЮ_МТ = ВТПравилаОкругленияКоличества.СКЮ_МТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравилаОкругленияКоличестваПоВсемСКЮ КАК ВТПравилаОкругленияКоличестваПоВсемСКЮ
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНоменклатура.ВидНоменклатуры,
	|	ВТНоменклатура.Номенклатура,
	|	ВТНоменклатура.УчетОстатковИРезервовВРазрезеУпаковокПаллет, 
	|	ВТ_Остатки.Склад,
	|	ВТ_Остатки.УпаковкаПаллета,
	|	ВТНоменклатура.КодДляПоискаНоменклатуры,
	|	ВТ_Остатки.ЖелаемаяДатаОтгрузки,
	|	ВТ_Остатки.ЗаказНаОтгрузку,
	|	ВТ_Остатки.Партнер,
	|	ВТ_Остатки.Приоритет,
	|	ВТ_Остатки.ПриоритетДополнительный,
	|	ВТ_Остатки.ЗаказНаПоступление,
    |	ВТ_Остатки.Назначение,
	|	ВТ_Остатки.ДатаПоступления,
	|	ЕСТЬNULL(ВТ_Остатки.ПриоритетнаяНоменклатура, ЛОЖЬ),
	|	ЕСТЬNULL(ВТПравилаОкругленияКоличества.ПравилоОкругления, ЕСТЬNULL(ВТПравилаОкругленияКоличестваПоВсемСКЮ.ПравилоОкругления, НЕОПРЕДЕЛЕНО)),
	|	&ТекстПоляПорядокПоОстаткамСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодДляПоискаНоменклатуры,
	|	ЕСТЬNULL(ВТ_Остатки.ПриоритетнаяНоменклатура, ЛОЖЬ) УБЫВ,
	|	Приоритет,
	|	&ТекстПоляУпорядочитьПоОстаткамСерий,
	|	ПриоритетДополнительный
	|ИТОГИ ПО
	|	КодДляПоискаНоменклатуры";
	#КонецОбласти
	
	Если ПодборНоменклатурыПоНаибольшимОстаткамСерий Тогда
		// Такой подбор номенклатуры сейчас используется для заказов собственных контрагентов ВГО.
		// Для них стараемся, чтобы отгружаемых партий было меньше, в идеале - 1.
		ТексПоляУпорядочиванияПоОстаткамСерий = 
			"МАКСИМУМ(ВТТаблицаОстатковСерий.СвободныйОстаток)";
		ТекстПоляПорядокПоОстаткамСерий = 
			"ЕСТЬNULL(ДанныеУпорядочиванияПоСериям.ПорядокПоОстаткамСерий, 0)";
		ТекстПоляУпорядочитьПоОстаткамСерий = 
			"ЕСТЬNULL(ДанныеУпорядочиванияПоСериям.ПорядокПоОстаткамСерий, 0) УБЫВ";
	Иначе
		// Стандартный подбор по дате производства (розлива)
		ТексПоляУпорядочиванияПоОстаткамСерий = 
			"МИНИМУМ(СпрСерии.ДатаПроизводства)";
		ТекстПоляПорядокПоОстаткамСерий = 
			"ЕСТЬNULL(ДанныеУпорядочиванияПоСериям.ПорядокПоОстаткамСерий, ДАТАВРЕМЯ(1, 1, 1))";
		ТекстПоляУпорядочитьПоОстаткамСерий = 
			"ЕСТЬNULL(ДанныеУпорядочиванияПоСериям.ПорядокПоОстаткамСерий, ДАТАВРЕМЯ(1, 1, 1))";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТексПоляУпорядочиванияПоОстаткамСерий",
		ТексПоляУпорядочиванияПоОстаткамСерий);
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстПоляПорядокПоОстаткамСерий",
		ТекстПоляПорядокПоОстаткамСерий);
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"&ТекстПоляУпорядочитьПоОстаткамСерий",
		ТекстПоляУпорядочитьПоОстаткамСерий);
	
	Возврат Запрос;

КонецФункции

Функция НоваяСтрокаДанныхПоНоменклатуре(ДанныеПоНоменклатуре)
	
	СтрокаДанныеПоНоменклатуре = ДанныеПоНоменклатуре.Добавить();
	СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура				   = ПустаяТаблицаСоответствующаяНоменклатура();
	СтрокаДанныеПоНоменклатуре.СвободныеОстатки							   = ПустаяТаблицаСвободныеОстатки();
	СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервы						   = ПустаяТаблицаДолгосрочныеРезервы();
	СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыСтороннихПартнеров	   = ПустаяТаблицаДолгосрочныеРезервы();
	СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыПоКаналамПродаж	       = ПустаяТаблицаДолгосрочныеРезервы();
	СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыВЗаказахПоставщикам	   = ПустаяТаблицаДолгосрочныеРезервы();
	СтрокаДанныеПоНоменклатуре.ЧужиеДолгосрочныеРезервыВЗаказахПоставщикам = ПустаяТаблицаДолгосрочныеРезервы();
	СтрокаДанныеПоНоменклатуре.СвободныеОстаткиВЗаказахПоставщикам   	   = ПустаяТаблицаДолгосрочныеРезервы();
	
	Возврат СтрокаДанныеПоНоменклатуре;
	
КонецФункции	

Процедура ЗаполнитьСтрокуДанныеПоНоменклатуре(СтрокаДанныеПоНоменклатуре, Выборка)
	
	НайденнаяСтрокаСоответствующаяНоменклатура = 
		СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура.Найти(Выборка.Номенклатура, "Номенклатура");
	Если НайденнаяСтрокаСоответствующаяНоменклатура = Неопределено Тогда
		НоваяСтрокаСоответствующаяНоменклатура = СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСоответствующаяНоменклатура, Выборка);
	КонецЕсли;
	
	Если Выборка.УчетОстатковИРезервовВРазрезеУпаковокПаллет
		И Не ЗначениеЗаполнено(Выборка.УпаковкаПаллета) Тогда
		// Если по номенклатуре ведется учет остатков и резервов в разрезе паллет,
		// то не будем учитывать для распределения остатки без указания упаковки (паллеты).
		// Так как при подборе таких остатков будет вызвана ошибка при проведении заказа клиента.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Свободно > 0 Тогда
		НоваяСтрока = СтрокаДанныеПоНоменклатуре.СвободныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Выборка.Свободно;
	КонецЕсли;
	Если Выборка.ЗарезервированоСобственныеДР > 0 Тогда
		НоваяСтрока = СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Выборка.ЗарезервированоСобственныеДР;
	КонецЕсли;
	Если Выборка.ЗарезервированоЧужиеДР > 0 Тогда
		НоваяСтрока = СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыСтороннихПартнеров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Выборка.ЗарезервированоЧужиеДР;
	КонецЕсли;
	Если Выборка.ЗарезервированоПоКаналамПродаж > 0 Тогда
		НоваяСтрока = СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыПоКаналамПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Выборка.ЗарезервированоПоКаналамПродаж;
	КонецЕсли;
	Если Выборка.ОжидаемоеПоступлениеСобственныеДР > 0 Тогда
		НоваяСтрока = СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыВЗаказахПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Выборка.ОжидаемоеПоступлениеСобственныеДР;
	КонецЕсли;
	Если Выборка.ОжидаемоеПоступлениеЧужиеДР > 0 Тогда
		НоваяСтрока = СтрокаДанныеПоНоменклатуре.ЧужиеДолгосрочныеРезервыВЗаказахПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Выборка.ОжидаемоеПоступлениеЧужиеДР;
	КонецЕсли;
	Если Выборка.ОжидаемоеПоступлениеСвободно > 0 Тогда
		НоваяСтрока = СтрокаДанныеПоНоменклатуре.СвободныеОстаткиВЗаказахПоставщикам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Количество = Выборка.ОжидаемоеПоступлениеСвободно;
	КонецЕсли;

КонецПроцедуры			

#КонецОбласти

#Область ПодборТоваровВЗаказКлиента

Процедура СоздатьВспомогательныеВТ(ДанныеЗаполнения, МенеджерВременныхТаблиц)

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	Параметры = Новый Структура();
	ИсточникЗаказа = ДанныеЗаполнения.ИсточникЗаказа;
	
	Если ДанныеЗаполнения.Свойство("ОбособленныйЗаказКлиента") Тогда 
		Параметры.Вставить("ОбособленныйЗаказКлиента", ДанныеЗаполнения.ОбособленныйЗаказКлиента);
	Иначе
		Параметры.Вставить("ОбособленныйЗаказКлиента", Неопределено);
	КонецЕсли;
	
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP 
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
		
		НастройкаУзлаИнтеграцииSAP = бг_ИнтеграцияSAP.НастройкаУзлаИнтеграцииSAPПоОрганизацииИИсточнику(ДанныеЗаполнения.Организация, 
				Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS);
		Если Не ЗначениеЗаполнено(НастройкаУзлаИнтеграцииSAP) Тогда
			ШаблонСообщения = 
				НСтр("ru = 'Не найдена настройка узла интеграции SAP по организации %1.';
					 |en = 'Не найдена настройка узла интеграции SAP по организации %1.'",
				КодОсновногоЯзыка);

			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, ДанныеЗаполнения.Организация);
				
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
		Параметры.Вставить("НастройкаУзлаИнтеграцииSAP",		НастройкаУзлаИнтеграцииSAP);
		Параметры.Вставить("КодыНоменклатурыКонтрагента",		ДанныеЗаполнения.Товары.ВыгрузитьКолонку("КодДляПоискаНоменклатуры"));
		Параметры.Вставить("ВиртуальныйЗаказ", ДанныеЗаполнения.ВиртуальныйЗаказ);
		
		бг_ИнтеграцияSAP.СоздатьВТНоменклатура(МенеджерВременныхТаблиц, Параметры);
		бг_ИнтеграцияSAP.СоздатьВТСклады(МенеджерВременныхТаблиц, Параметры);
		
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B 
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		
		Параметры.Вставить("Организация", ДанныеЗаполнения.Организация);
		Параметры.Вставить("ИсточникЗаказа", ДанныеЗаполнения.ИсточникЗаказа);
		МассивКодовSKUMT = бг_интеграцияb2b.КодыSKUMTПоИдентификаторамSKUMT(ДанныеЗаполнения.Товары.ВыгрузитьКолонку("ИдентификаторSKUMT"));
		ВидНоменклатуры  = бг_интеграцияb2b.ВидНоменклатурыПоSKUMT(МассивКодовSKUMT);
		Параметры.Вставить("МассивКодовSKUMT", МассивКодовSKUMT);
		Параметры.Вставить("ВидНоменклатуры", ВидНоменклатуры);
		бг_интеграцияb2b.СоздатьВспомогательныеВТ(ДанныеЗаполнения, МенеджерВременныхТаблиц, Параметры);
		
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		
		Параметры.Вставить("Склад", ДанныеЗаполнения.Склад);
		Параметры.Вставить("ТоварныеКатегории", ДанныеЗаполнения.Товары.ВыгрузитьКолонку("ТоварнаяКатегория"));
		Параметры.Вставить("Партнер", ДанныеЗаполнения.Партнер);
		бг_ИнтеграцияВГО.СоздатьВспомогательныеВТ(МенеджерВременныхТаблиц, Параметры);
		
	Иначе
		
		Параметры.Вставить("Товары", ДанныеЗаполнения.Товары);
		Параметры.Вставить("Склад", ДанныеЗаполнения.Склад);
		Параметры.Вставить("Партнер", ДанныеЗаполнения.Партнер);
		
		СоздатьВТНоменклатура(МенеджерВременныхТаблиц, Параметры);
		СоздатьВТСклады(МенеджерВременныхТаблиц, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТСклады(МенеджерВременныхТаблиц, Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_СписокНоменклатуры
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ВТ_ВидыНоменклатуры
	|ИЗ
	|	ВТ_СписокНоменклатуры КАК ВТ_СписокНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ВТ_СписокНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	ЕСТЬNULL(ВТ_ВидыНоменклатуры.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
	|	0 КАК Приоритет,
	|	ИСТИНА КАК ИспользоватьДляОтложенногоОбеспечения
	|ПОМЕСТИТЬ ВТСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВидыНоменклатуры КАК ВТ_ВидыНоменклатуры
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Склады.Ссылка = &Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СписокНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВидыНоменклатуры";
	
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("Товары", Параметры.Товары);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТНоменклатура(МенеджерВременныхТаблиц, Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	//ВТПартнеры - партнёры, из чьих долгосрочных резервов можно забирать остатки. Для Чикаго таких пока не нужно, но ВТПартнеры далее используется в общих запросах
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТПартнеры
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.бг_ЗафиксированныйТовар КАК бг_ЗафиксированныйТовар
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ КАК СКЮ_МТ,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.бг_ЗафиксированныйТовар
	|			ТОГДА СпрНоменклатура.Код
	|		ИНАЧЕ СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ.Код
	|	КОНЕЦ КАК КодДляПоискаНоменклатуры
	|ПОМЕСТИТЬ ВТ_СКЮ_МТ
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	|		ПО СпрНоменклатура.Ссылка = ВТ_Товары.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ,
	|	ВЫБОР
	|		КОГДА ВТ_Товары.бг_ЗафиксированныйТовар
	|			ТОГДА СпрНоменклатура.Код
	|		ИНАЧЕ СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ.Код
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СКЮ_МТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СпрНоменклатура.бг_УчетОстатковИРезервовВРазрезеУпаковокПаллет КАК УчетОстатковИРезервовВРазрезеУпаковокПаллет, 
	|	СпрНоменклатура.ЕдиницаИзмерения.Код КАК КодЕИ,
	|	СпрНоменклатура.Код КАК КодНоменклатуры,
	|	ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(1024)) КАК НаименованиеНоменклатуры,
	|	ВТ_СКЮ_МТ.СКЮ_МТ КАК СКЮ_МТ,
	|	ВЫБОР
	|		КОГДА ВТ_СКЮ_МТ.КодДляПоискаНоменклатуры = СпрНоменклатура.Код
	|			ТОГДА ВТ_СКЮ_МТ.КодДляПоискаНоменклатуры
	|		ИНАЧЕ СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ.Код
	|	КОНЕЦ КАК КодДляПоискаНоменклатуры
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СКЮ_МТ КАК ВТ_СКЮ_МТ
	|		ПО СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ = ВТ_СКЮ_МТ.СКЮ_МТ
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА СпрНоменклатура.АлкогольнаяПродукция
	|				ТОГДА СпрНоменклатура.ВидАлкогольнойПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("Товары", Параметры.Товары);
	Запрос.УстановитьПараметр("Партнер", Параметры.Партнер);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПустаяТаблицаСвободныеОстатки()

	СвободныеОстатки = Новый ТаблицаЗначений;
	СвободныеОстатки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	СвободныеОстатки.Колонки.Добавить("УпаковкаПаллета", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	СвободныеОстатки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));	
	СвободныеОстатки.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));	
	СвободныеОстатки.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));	
	СвободныеОстатки.Колонки.Добавить("ПриоритетнаяНоменклатура", Новый ОписаниеТипов("Булево"));	
	СвободныеОстатки.Колонки.Добавить("ПравилоОкругления", Новый ОписаниеТипов("ПеречислениеСсылка.бг_ПравилаОкругленияДоКороба"));	
	СвободныеОстатки.Колонки.Добавить("УчетОстатковИРезервовВРазрезеУпаковокПаллет", Новый ОписаниеТипов("Булево"));	
	
	Возврат СвободныеОстатки; 
	
КонецФункции

Функция ПустаяТаблицаДолгосрочныеРезервы()

	ДолгосрочныеРезервы = Новый ТаблицаЗначений;
	ДолгосрочныеРезервы.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	ДолгосрочныеРезервы.Колонки.Добавить("УпаковкаПаллета", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ДолгосрочныеРезервы.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));	
	ДолгосрочныеРезервы.Колонки.Добавить("Приоритет", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));	
	ДолгосрочныеРезервы.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));	
	ДолгосрочныеРезервы.Колонки.Добавить("ПриоритетнаяНоменклатура", Новый ОписаниеТипов("Булево"));	
	ДолгосрочныеРезервы.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ДолгосрочныеРезервы.Колонки.Добавить("ЗаказНаОтгрузку", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	ДолгосрочныеРезервы.Колонки.Добавить("ЖелаемаяДатаОтгрузки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДолгосрочныеРезервы.Колонки.Добавить("ЗаказНаПоступление", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	ДолгосрочныеРезервы.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	ДолгосрочныеРезервы.Колонки.Добавить("ДатаПоступления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДолгосрочныеРезервы.Колонки.Добавить("ПравилоОкругления", Новый ОписаниеТипов("ПеречислениеСсылка.бг_ПравилаОкругленияДоКороба"));	
	ДолгосрочныеРезервы.Колонки.Добавить("УчетОстатковИРезервовВРазрезеУпаковокПаллет", Новый ОписаниеТипов("Булево"));	
	
	Возврат ДолгосрочныеРезервы; 
	
КонецФункции

Функция ПустаяТаблицаСоответствующаяНоменклатура()

	СоответствующаяНоменклатура = Новый ТаблицаЗначений;
	СоответствующаяНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	СоответствующаяНоменклатура.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));	
	СоответствующаяНоменклатура.Колонки.Добавить("ПравилоОкругления", Новый ОписаниеТипов("ПеречислениеСсылка.бг_ПравилаОкругленияДоКороба"));	
	СоответствующаяНоменклатура.Колонки.Добавить("УчетОстатковИРезервовВРазрезеУпаковокПаллет", Новый ОписаниеТипов("Булево"));	
	
	Возврат СоответствующаяНоменклатура; 
	
КонецФункции

Процедура ДополнитьДанныеЗаполненияДляПодбораТоваров(ДанныеЗаполнения) 
	
	ОтборПоПриоритетнымСкладам = Новый Массив;
	ОтборПоДополнительнымСкладам = Новый Массив;
	Для каждого СтрокаТаблицаСклады Из ДанныеЗаполнения.ТаблицаСклады Цикл
		Если СтрокаТаблицаСклады.Приоритет = 0 Тогда
			ОтборПоПриоритетнымСкладам.Добавить(СтрокаТаблицаСклады.Склад);
		Иначе
			ОтборПоДополнительнымСкладам.Добавить(СтрокаТаблицаСклады.Склад);
		КонецЕсли;
	КонецЦикла;
	ДанныеЗаполнения.Вставить("ОтборПоПриоритетнымСкладам", ОтборПоПриоритетнымСкладам);	
	ДанныеЗаполнения.Вставить("ОтборПоДополнительнымСкладам", ОтборПоДополнительнымСкладам);	
	
	ОбеспечиватьИзОжидаемыхПоступлений = Ложь;
	Если ДанныеЗаполнения.Свойство("ОбеспечиватьИзОжидаемыхПоступлений") Тогда
		ОбеспечиватьИзОжидаемыхПоступлений = ДанныеЗаполнения.ОбеспечиватьИзОжидаемыхПоступлений;
	КонецЕсли;
 	ДанныеЗаполнения.Вставить("ОбеспечиватьИзОжидаемыхПоступлений", ОбеспечиватьИзОжидаемыхПоступлений);	

Конецпроцедуры

// Подбирает товары в заказ клиента.
//
Процедура ПодобратьТоварыВЗаказКлиента(ДанныеЗаполнения, 
										ТоварыЗаказКлиента, 
										СтрокаТоварыДанныеЗаполнения,
										СтрокаДанныеПоНоменклатуре,
										ОсталосьРаспределить)
				
	ДополнитьДанныеЗаполненияДляПодбораТоваров(ДанныеЗаполнения);									
										
	Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
	
		ПодобратьТоварыВЗаказКлиентаСобственнаяРозница(ДанныеЗаполнения, 
										ТоварыЗаказКлиента, 
										СтрокаТоварыДанныеЗаполнения,
										СтрокаДанныеПоНоменклатуре,
										ОсталосьРаспределить);	
		
	Иначе		
	
		ПодобратьТоварыВЗаказКлиентаСторонниеКаналыПродаж(ДанныеЗаполнения, 
										ТоварыЗаказКлиента, 
										СтрокаТоварыДанныеЗаполнения,
										СтрокаДанныеПоНоменклатуре,
										ОсталосьРаспределить);	
		
	КонецЕсли;
					
КонецПроцедуры				

// Подбирает товары в заказ клиента для собственной рззницы - сети магазинов Винлаб.
//
Процедура ПодобратьТоварыВЗаказКлиентаСобственнаяРозница(ДанныеЗаполнения,
														ТоварыЗаказКлиента, 
														СтрокаТоварыДанныеЗаполнения,
														СтрокаДанныеПоНоменклатуре,
														ОсталосьРаспределить);	

	// Подбор номенклатуры по свободным остаткам с приоритетного (основного) склада.
	ПодобратьТоварыВЗаказКлиентаПоСвободнымОстаткам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.СвободныеОстатки,
		ОсталосьРаспределить,
		ДанныеЗаполнения.ОтборПоПриоритетнымСкладам);
	
	// Подбор номенклатуры из собственных долгосрочных резервов.
	ПодобратьТоварыВЗаказКлиентаПоДолгосрочнымРезервам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервы,
		ОсталосьРаспределить);
	
	// Подбор номенклатуры по свободным остаткам с дополнительных (не основных) складов.
	ПодобратьТоварыВЗаказКлиентаПоСвободнымОстаткам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.СвободныеОстатки,
		ОсталосьРаспределить,
		ДанныеЗаполнения.ОтборПоДополнительнымСкладам);  
		
	// Подбор номенклатуры из чужих долгосрочных резервов на складе 
	// в соответствии с настройкой в РС "Партнеры долгосрочных резервов".
	ПодобратьТоварыВЗаказКлиентаПоДолгосрочнымРезервам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыСтороннихПартнеров,
		ОсталосьРаспределить);
		
	// Подбор номенклатуры из чужих долгосрочных резервов на складе 
	// в соответствии с настройкой в РС "Приоритеты каналов продаж долгосрочных резервов". 
	ПодобратьТоварыВЗаказКлиентаПоДолгосрочнымРезервам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыПоКаналамПродаж,
		ОсталосьРаспределить);
		
	Если ДанныеЗаполнения.ОбеспечиватьИзОжидаемыхПоступлений Тогда
		
		ПодобратьТоварыВЗаказКлиентаИзОжидаемыхПоступленийДР(
			ДанныеЗаполнения,
			ТоварыЗаказКлиента, 
			СтрокаТоварыДанныеЗаполнения,
			СтрокаДанныеПоНоменклатуре,
			ОсталосьРаспределить);		
			
		// Подбор номенклатуры из ожидаемых поступлений на свободные остатки.
		ПодобратьТоварыВЗаказКлиентаПоОжидаемымПоступлениям(
			ДанныеЗаполнения,
			ТоварыЗаказКлиента,
			СтрокаТоварыДанныеЗаполнения,
			СтрокаДанныеПоНоменклатуре.СвободныеОстаткиВЗаказахПоставщикам,
			ОсталосьРаспределить); 
	КонецЕсли;
	
КонецПроцедуры

// Подбирает товары в заказ клиента для сторонних каналов продаж - Чикаго, EDI, creatio, B2B и др.
//
Процедура ПодобратьТоварыВЗаказКлиентаСторонниеКаналыПродаж(ДанныеЗаполнения,
															ТоварыЗаказКлиента, 
															СтрокаТоварыДанныеЗаполнения,
															СтрокаДанныеПоНоменклатуре,
															ОсталосьРаспределить)
															
	// Подбор номенклатуры из собственных долгосрочных резервов.
	ПодобратьТоварыВЗаказКлиентаПоДолгосрочнымРезервам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервы,
		ОсталосьРаспределить);
		
	// Подбор номенклатуры из чужих долгосрочных резервов на складе 
	// в соответствии с настройкой в РС "Партнеры долгосрочных резервов".
	ПодобратьТоварыВЗаказКлиентаПоДолгосрочнымРезервам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыСтороннихПартнеров,
		ОсталосьРаспределить);
														
	Если ДанныеЗаполнения.ОбеспечиватьИзОжидаемыхПоступлений Тогда
		ПодобратьТоварыВЗаказКлиентаИзОжидаемыхПоступленийДР(
			ДанныеЗаполнения,
			ТоварыЗаказКлиента, 
			СтрокаТоварыДанныеЗаполнения,
			СтрокаДанныеПоНоменклатуре,
			ОсталосьРаспределить);		
	КонецЕсли;
	
	// Подбор номенклатуры по свободным остаткам на складах.
	ПодобратьТоварыВЗаказКлиентаПоСвободнымОстаткам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.СвободныеОстатки,
		ОсталосьРаспределить);  

	// Подбор номенклатуры из чужих долгосрочных резервов на складе 
	// в соответствии с настройкой в РС "Приоритеты каналов продаж долгосрочных резервов". 
	ПодобратьТоварыВЗаказКлиентаПоДолгосрочнымРезервам(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыПоКаналамПродаж,
		ОсталосьРаспределить);
		
	Если ДанныеЗаполнения.ОбеспечиватьИзОжидаемыхПоступлений Тогда	
		// Подбор номенклатуры из ожидаемых поступлений на свободные остатки.
		ПодобратьТоварыВЗаказКлиентаПоОжидаемымПоступлениям(
			ДанныеЗаполнения,
			ТоварыЗаказКлиента,
			СтрокаТоварыДанныеЗаполнения,
			СтрокаДанныеПоНоменклатуре.СвободныеОстаткиВЗаказахПоставщикам,
			ОсталосьРаспределить); 
	КонецЕсли;
										
КонецПроцедуры										

// Подбирает товары в заказ клиента из ожидаемых поступлений под долгосрочные резервы.
//
Процедура ПодобратьТоварыВЗаказКлиентаИзОжидаемыхПоступленийДР(ДанныеЗаполнения,
																ТоварыЗаказКлиента, 
																СтрокаТоварыДанныеЗаполнения,
																СтрокаДанныеПоНоменклатуре,
																ОсталосьРаспределить)

	// Подбор номенклатуры из ожидаемых поступлений собственных долгосрочных резервов.
	ПодобратьТоварыВЗаказКлиентаПоОжидаемымПоступлениям(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ДолгосрочныеРезервыВЗаказахПоставщикам,
		ОсталосьРаспределить);
		
	// Подбор номенклатуры из ожидаемых поступлений долгосрочных резервов других партнёров	
	// в соответствии с настройкой в РС "Партнеры долгосрочных резервов".
	ПодобратьТоварыВЗаказКлиентаПоОжидаемымПоступлениям(
		ДанныеЗаполнения,
		ТоварыЗаказКлиента,
		СтрокаТоварыДанныеЗаполнения,
		СтрокаДанныеПоНоменклатуре.ЧужиеДолгосрочныеРезервыВЗаказахПоставщикам,
		ОсталосьРаспределить);

КонецПроцедуры

Процедура ПодобратьТоварыВЗаказКлиентаПоСвободнымОстаткам(ДанныеЗаполнения,
															ТоварыЗаказКлиента, 
															СтрокаТоварыДанныеЗаполнения, 
															СвободныеОстатки, 
															ОсталосьРаспределить, 
															ОтборПоСкладам = Неопределено)
															
	ЕстьОтборПоСкладам = ТипЗнч(ОтборПоСкладам) = Тип("Массив"); 
	Для каждого СтрокаОстатки Из СвободныеОстатки Цикл 
		
		Если ЕстьОтборПоСкладам 
			И ОтборПоСкладам.Найти(СтрокаОстатки.Склад) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		МожноРаспределить = МожноРаспределитьСУчетомПравилаОкругленияДоКороба(
										ОсталосьРаспределить, 
										СтрокаОстатки.Количество, 
										СтрокаОстатки.ПравилоОкругления, 
										СтрокаОстатки.Номенклатура, 
										СтрокаОстатки.УпаковкаПаллета);
														
		Если МожноРаспределить > 0 Тогда
			СтрокаТоварыЗаказаКлиента = ТоварыЗаказКлиента.Добавить();	
			
			СтруктураРеквизитов = ШаблонРеквизитовСтрокиТоваровЗаказаКлиента();
			СтруктураРеквизитов.Номенклатура = СтрокаОстатки.Номенклатура;
			СтруктураРеквизитов.КоличествоУпаковок = МожноРаспределить;
			СтруктураРеквизитов.Склад = СтрокаОстатки.Склад;
			СтруктураРеквизитов.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;	
			СтруктураРеквизитов.бг_УпаковкаПаллета = СтрокаОстатки.УпаковкаПаллета;
			СтруктураРеквизитов.бг_ЗаказКлиентаИсточникОбеспечения = Неопределено;
			СтруктураРеквизитов.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения = '00010101';
			СтруктураРеквизитов.бг_ЗаказПоставщикуИсточникОбеспечения = Неопределено;
			
			ЗаполнитьСтрокуТЧТоварыЗаказаКлиента(
					ДанныеЗаполнения,
					СтрокаТоварыЗаказаКлиента, 
					СтрокаТоварыДанныеЗаполнения, 
					СтруктураРеквизитов);
					
			ОсталосьРаспределить = ОсталосьРаспределить - МожноРаспределить;
			СтрокаОстатки.Количество = СтрокаОстатки.Количество - МожноРаспределить;
		КонецЕсли;	
		
		Если ОсталосьРаспределить <= 0 Тогда
			// Распределили все количество в строке заявки по свободным остаткам.
			Прервать;		
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры	

Процедура ПодобратьТоварыВЗаказКлиентаПоДолгосрочнымРезервам(ДанныеЗаполнения,
																ТоварыЗаказКлиента, 
																СтрокаТоварыДанныеЗаполнения, 
																ДолгосрочныеРезервы, 
																ОсталосьРаспределить)

	Для каждого СтрокаОстатки Из ДолгосрочныеРезервы Цикл 
		
		МожноРаспределить = МожноРаспределитьСУчетомПравилаОкругленияДоКороба(
										ОсталосьРаспределить, 
										СтрокаОстатки.Количество, 
										СтрокаОстатки.ПравилоОкругления, 
										СтрокаОстатки.Номенклатура, 
										СтрокаОстатки.УпаковкаПаллета);
														
		Если МожноРаспределить > 0 Тогда
			СтрокаТоварыЗаказаКлиента = ТоварыЗаказКлиента.Добавить();	
			
			СтруктураРеквизитов = ШаблонРеквизитовСтрокиТоваровЗаказаКлиента();
			СтруктураРеквизитов.Номенклатура = СтрокаОстатки.Номенклатура;
			СтруктураРеквизитов.КоличествоУпаковок = МожноРаспределить;
			СтруктураРеквизитов.Склад = СтрокаОстатки.Склад;
			СтруктураРеквизитов.бг_УпаковкаПаллета = СтрокаОстатки.УпаковкаПаллета; 
			СтруктураРеквизитов.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада;	
			СтруктураРеквизитов.бг_ЗаказКлиентаИсточникОбеспечения = СтрокаОстатки.ЗаказНаОтгрузку;
			СтруктураРеквизитов.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения = СтрокаОстатки.ЖелаемаяДатаОтгрузки;
			СтруктураРеквизитов.бг_ЗаказПоставщикуИсточникОбеспечения = Неопределено;
			
			ЗаполнитьСтрокуТЧТоварыЗаказаКлиента(
					ДанныеЗаполнения,
					СтрокаТоварыЗаказаКлиента, 
					СтрокаТоварыДанныеЗаполнения, 
					СтруктураРеквизитов);
					
			ОсталосьРаспределить = ОсталосьРаспределить - МожноРаспределить;
			СтрокаОстатки.Количество = СтрокаОстатки.Количество - МожноРаспределить;
		КонецЕсли;	
		
		Если ОсталосьРаспределить <= 0 Тогда
			// Распределили все количество в строке заявки по свободным остаткам.
			Прервать;		
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры	

Процедура ПодобратьТоварыВЗаказКлиентаПоОжидаемымПоступлениям(ДанныеЗаполнения,
																ТоварыЗаказКлиента, 
																СтрокаТоварыДанныеЗаполнения, 
																ОжидаемыеПоступления, 
																ОсталосьРаспределить)

	Для каждого СтрокаОстатки Из ОжидаемыеПоступления Цикл 
	
	    Если СтрокаТоварыДанныеЗаполнения.ДатаОтгрузки < СтрокаОстатки.ДатаПоступления Тогда
			Продолжить;	
		КонецЕсли;
		
		Если СтрокаОстатки.УчетОстатковИРезервовВРазрезеУпаковокПаллет
			И Не ЗначениеЗаполнено(СтрокаОстатки.УпаковкаПаллета) Тогда
			// Не будем учитывать ожидаемые поступления алкогольной продукции, если не заполнена паллета.
			// Это могут быть старые заказы поставщикам, в которых не заполнялись паллеты.
			Продолжить;	
		КонецЕсли;	
			
		МожноРаспределить = МожноРаспределитьСУчетомПравилаОкругленияДоКороба(
										ОсталосьРаспределить, 
										СтрокаОстатки.Количество, 
										СтрокаОстатки.ПравилоОкругления, 
										СтрокаОстатки.Номенклатура, 
										СтрокаОстатки.УпаковкаПаллета);
														
		Если МожноРаспределить > 0 Тогда
			СтрокаТоварыЗаказаКлиента = ТоварыЗаказКлиента.Добавить();	
			
			СтруктураРеквизитов = ШаблонРеквизитовСтрокиТоваровЗаказаКлиента();
			СтруктураРеквизитов.Номенклатура = СтрокаОстатки.Номенклатура;
			СтруктураРеквизитов.КоличествоУпаковок = МожноРаспределить;
			СтруктураРеквизитов.Склад = СтрокаОстатки.Склад;
			СтруктураРеквизитов.бг_УпаковкаПаллета = СтрокаОстатки.УпаковкаПаллета; 
			// Это ожидаемое поступлению под заказ клиента на долгосрочные резервы или на свободный остаток.
			СтруктураРеквизитов.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
			СтруктураРеквизитов.бг_ЗаказКлиентаИсточникОбеспечения = СтрокаОстатки.ЗаказНаОтгрузку;
			СтруктураРеквизитов.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения = СтрокаОстатки.ЖелаемаяДатаОтгрузки;
			СтруктураРеквизитов.бг_ЗаказПоставщикуИсточникОбеспечения = СтрокаОстатки.ЗаказНаПоступление;
			
			ЗаполнитьСтрокуТЧТоварыЗаказаКлиента(
					ДанныеЗаполнения,
					СтрокаТоварыЗаказаКлиента, 
					СтрокаТоварыДанныеЗаполнения, 
					СтруктураРеквизитов);
					
			ОсталосьРаспределить = ОсталосьРаспределить - МожноРаспределить;
			СтрокаОстатки.Количество = СтрокаОстатки.Количество - МожноРаспределить;
		КонецЕсли;	
		
		Если ОсталосьРаспределить <= 0 Тогда
			// Распределили все количество в строке заявки по свободным остаткам.
			Прервать;		
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры	

Процедура ЗаполнитьСтрокуТЧТоварыЗаказаКлиента(ДанныеЗаполнения, СтрокаТоварыЗаказаКлиента, СтрокаТоварыДанныеЗаполнения, СтруктураРеквизитов)

	СтрокаТоварыЗаказаКлиента.Номенклатура = СтруктураРеквизитов.Номенклатура;
	СтрокаТоварыЗаказаКлиента.ДатаОтгрузки = СтрокаТоварыДанныеЗаполнения.ДатаОтгрузки;
	СтрокаТоварыЗаказаКлиента.Упаковка = Неопределено;
	СтрокаТоварыЗаказаКлиента.КоличествоУпаковок = СтруктураРеквизитов.КоличествоУпаковок;
	СтрокаТоварыЗаказаКлиента.Количество = СтруктураРеквизитов.КоличествоУпаковок; // Упаковку не указываем, можем заполнить количество.  
	
	Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP 
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		
		СтрокаТоварыЗаказаКлиента.бг_КодСтрокиЗаявки = СтрокаТоварыДанныеЗаполнения.КодПозицииЗаказа;
		СтрокаТоварыЗаказаКлиента.ЦенаБезНДС = СтрокаТоварыДанныеЗаполнения.Цена;
		СтрокаТоварыЗаказаКлиента.ЦенаСНДС = СтрокаТоварыДанныеЗаполнения.ЦенаНДС;
		
		Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
			СтрокаТоварыЗаказаКлиента.ДатаОтгрузки = ДанныеЗаполнения.ДатаДоставки;
			СтрокаТоварыЗаказаКлиента.бг_КодПозицииПредзаказаКлиента = СтрокаТоварыДанныеЗаполнения.КодПозицииПредзаказаКлиента;
			СтрокаТоварыЗаказаКлиента.бг_НомерПредзаказаКлиента = СтрокаТоварыДанныеЗаполнения.НомерПредзаказаКлиента;
		КонецЕсли;
		
	ИначеЕсли ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS Тогда
		
		СтрокаТоварыЗаказаКлиента.бг_КодСтрокиЗаявки = СтрокаТоварыДанныеЗаполнения.КодПозицииЗаказа;
		СтрокаТоварыЗаказаКлиента.ЦенаБезНДС = 1;
		СтрокаТоварыЗаказаКлиента.ЦенаСНДС   = 1;
		
		СтрокаТоварыЗаказаКлиента.ДатаОтгрузки = ДанныеЗаполнения.ДатаДоставки;

		Если СтруктураРеквизитов.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению Тогда
			СтрокаТоварыЗаказаКлиента.Отменено = Истина;
			СтрокаТоварыЗаказаКлиента.ПричинаОтмены = бг_КонстантыПовтИсп.ЗначениеКонстанты("ПричинаОтменыНетДоступныхОстатков");
		КонецЕсли;
		
	ИначеЕсли ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго Тогда
		
		СтрокаТоварыЗаказаКлиента.Отменено 					= СтрокаТоварыДанныеЗаполнения.Отменено;
        СтрокаТоварыЗаказаКлиента.бг_ЗафиксированныйТовар	= СтрокаТоварыДанныеЗаполнения.бг_ЗафиксированныйТовар;
		
	ИначеЕсли ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr
		Или ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.СобственныйКонтрагент Тогда
		
		СтрокаТоварыЗаказаКлиента.бг_КодСтрокиЗаявки = СтрокаТоварыДанныеЗаполнения.КодПозицииЗаказа;
		
	КонецЕсли;
	
	СтрокаТоварыЗаказаКлиента.Склад = СтруктураРеквизитов.Склад;
	СтрокаТоварыЗаказаКлиента.ВариантОбеспечения = СтруктураРеквизитов.ВариантОбеспечения;
	
	СтрокаТоварыЗаказаКлиента.бг_УпаковкаПаллета = СтруктураРеквизитов.бг_УпаковкаПаллета;
	СтрокаТоварыЗаказаКлиента.бг_ЗаказКлиентаИсточникОбеспечения = СтруктураРеквизитов.бг_ЗаказКлиентаИсточникОбеспечения;
	СтрокаТоварыЗаказаКлиента.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения = СтруктураРеквизитов.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения;
	СтрокаТоварыЗаказаКлиента.бг_ЗаказПоставщикуИсточникОбеспечения = СтруктураРеквизитов.бг_ЗаказПоставщикуИсточникОбеспечения;
	
	Если ДанныеЗаполнения.Свойство("ДатаОтгрузки") 
		И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОтгрузки) Тогда
		// Дата отгрузки заполняется в данных заполнения при актуализации обеспечения.
		// Чтобы при актуализации обеспечения не замещать дату отгрузки в заказе клиента,
		// в случае, если дата отгрузки в заказе была передвинута и не соотиетствует
		// дате отгрузки в заявке клиента.
		СтрокаТоварыЗаказаКлиента.ДатаОтгрузки = ДанныеЗаполнения.ДатаОтгрузки; 
	КонецЕсли;
	
КонецПроцедуры	

Функция ШаблонРеквизитовСтрокиТоваровЗаказаКлиента()
	
	Возврат Новый Структура("
		|Номенклатура,
		|КоличествоУпаковок,
		|Склад,
		|ВариантОбеспечения,	
		|бг_УпаковкаПаллета,
		|бг_ЗаказКлиентаИсточникОбеспечения,
		|бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения,
		|бг_ЗаказПоставщикуИсточникОбеспечения
		|");
		
КонецФункции

// Устанавливает блокировки на регистр сведений РаспределениеЗапасов перед чтением данных
// свободных остатков, резервов и ожидаемых поступлений для актуализации обеспечения в заказах клиентов.
//
Процедура УстановитьБлокировкиРегистраРаспределениеЗапасов(МенеджерВременныхТаблиц)
	
	Если Не ТранзакцияАктивна() Тогда
		// Возможно процедура вызвана вне транзакции, например,
		// справочное получения каких-то данных по остаткам или резервам.
		Возврат;
	КонецЕсли;
	
	ИспользоватьБлокировки = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"ИспользоватьБлокировкиРаспределенияЗапасовПриФормированииЗаказовПоЗаявкам");
	Если Не ИспользоватьБлокировки Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеЗапасовСостояния.Ссылка КАК Состояние
	|ПОМЕСТИТЬ СостоянияРаспределенияЗапасов 
	|ИЗ
	|	Перечисление.РаспределениеЗапасовСостояния КАК РаспределениеЗапасовСостояния
	|ГДЕ
	|	РаспределениеЗапасовСостояния.Ссылка В 
	|		(ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе), 
	|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве), 
	|		ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОжидаемоеПоступление))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	Склады.Склад КАК Склад,
	|	СостоянияРаспределенияЗапасов.Состояние КАК Состояние
	|ИЗ
	|	ВТНоменклатура КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСклады КАК Склады
	|		ПО ТаблицаТоваров.ВидНоменклатуры = Склады.ВидНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияРаспределенияЗапасов КАК СостоянияРаспределенияЗапасов
	|		ПО (ИСТИНА)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	БлокировкаДанных = Новый БлокировкаДанных();
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РаспределениеЗапасов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Состояние", "Состояние");
	БлокировкаДанных.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеВЗаказНеобеспеченнойНоменклатуры

// Добавляет необеспеченное количество товаров в заказ клиента с действием "К обеспечению". 
// Ставит первую возможную номенклатуре на приоритетный (основной) склад.
//
Процедура ДобавитьНеобеспеченноеКоличествоТовараВЗаказКлиента(ДанныеЗаполнения, 
													ТоварыЗаказКлиента, 
													СтрокаТоварыДанныеЗаполнения,
													СтрокаДанныеПоНоменклатуре,
													ОсталосьРаспределить,
													АдресОшибки)

	Если ОсталосьРаспределить <= 0 Тогда
		// Весь товар обеспечили из свободных остатков, долгосрочных резервов 
		// или ожидаемых поступлений.
		Возврат;		
	КонецЕсли;	
	
	СтрокаТоварыЗаказаКлиента = ТоварыЗаказКлиента.Добавить();
	
	Номенклатура = СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[0].Номенклатура;
	ПравилоОкругления = СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[0].ПравилоОкругления;
	
	СтрокаТаблицаСклады = Неопределено;
	ВидНоменклатуры = СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[0].ВидНоменклатуры;
	ОтборСкладов = Новый Структура;
	ОтборСкладов.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	ОтборСкладов.Вставить("ИспользоватьДляОтложенногоОбеспечения", Истина);
	НайденныеСтрокиСкладов = ДанныеЗаполнения.ТаблицаСклады.НайтиСтроки(ОтборСкладов);
	Если НайденныеСтрокиСкладов.Количество() > 0 Тогда
		СтрокаТаблицаСклады = НайденныеСтрокиСкладов[0]; 
	Иначе
		// Возможно флаг не указан ни для одного склада. Найдем склад просто по виду номенклатуры.
		ОтборСкладов.Удалить("ИспользоватьДляОтложенногоОбеспечения");
		НайденныеСтрокиСкладов = ДанныеЗаполнения.ТаблицаСклады.НайтиСтроки(ОтборСкладов);
		Если НайденныеСтрокиСкладов.Количество() > 0 Тогда
			СтрокаТаблицаСклады = НайденныеСтрокиСкладов[0];
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицаСклады = Неопределено Тогда
		ШаблонСообщения = 
			НСтр("ru = 'Не найден склад, с которого надо отгружать Номенклатуру вида %1.'",
			ОбщегоНазначения.КодОсновногоЯзыка());

		ТекстСообщения = АдресОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[0].ВидНоменклатуры);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтруктураРеквизитов = ШаблонРеквизитовСтрокиТоваровЗаказаКлиента();
	СтруктураРеквизитов.Номенклатура = Номенклатура;
	СтруктураРеквизитов.КоличествоУпаковок = ОсталосьРаспределить;
	СтруктураРеквизитов.Склад = СтрокаТаблицаСклады.Склад;
	СтруктураРеквизитов.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
    СтруктураРеквизитов.Вставить(
		"УчетОстатковИРезервовВРазрезеУпаковокПаллет",
		СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[0].УчетОстатковИРезервовВРазрезеУпаковокПаллет);
	
	// Для обеспечения берем первую номенклатуру из соответствующих по СКЮ МТ.
	// Но эта первая номенклатура может быть указана как запрещенная к продаже.
	// В этом случае необходимо для обеспечения указать в заказе разрешенную номенклатуру.
	СегментНоменклатурыЗапрещеннойКПродаже = Неопределено;	
	ДанныеЗаполнения.Свойство("СегментНоменклатурыЗапрещеннойКПродаже", СегментНоменклатурыЗапрещеннойКПродаже);
	
	ПодобратьРазрешеннуюНоменклатуруНеобеспеченныхТоваров(
	        СтрокаТоварыДанныеЗаполнения,
			СтрокаДанныеПоНоменклатуре,
			СтруктураРеквизитов,
			СегментНоменклатурыЗапрещеннойКПродаже,
			АдресОшибки);				
	
    // Скорректируем количество, с учетом заданного правила округления количества до целого короба.
	СтруктураРеквизитов.КоличествоУпаковок = МожноРаспределитьСУчетомПравилаОкругленияДоКороба(
													ОсталосьРаспределить, 
													ОсталосьРаспределить, 
													ПравилоОкругления, 
													СтруктураРеквизитов.Номенклатура, 
													СтруктураРеквизитов.бг_УпаковкаПаллета,
													Истина);
	
	ЗаполнитьСтрокуТЧТоварыЗаказаКлиента(
			ДанныеЗаполнения,
			СтрокаТоварыЗаказаКлиента,
			СтрокаТоварыДанныеЗаполнения,
			СтруктураРеквизитов);
	
КонецПроцедуры					

Процедура ПодобратьРазрешеннуюНоменклатуруНеобеспеченныхТоваров(
	        СтрокаТоварыДанныеЗаполнения,
			СтрокаДанныеПоНоменклатуре,
			СтруктураРеквизитов,
			СегментНоменклатурыЗапрещеннойКПродаже,
			АдресОшибки)				
	
	Если СтруктураРеквизитов.УчетОстатковИРезервовВРазрезеУпаковокПаллет Тогда
		
		ПодобратьУпаковкуПаллетуНеобеспеченныхТоваров(
		        СтрокаТоварыДанныеЗаполнения,
				СтрокаДанныеПоНоменклатуре,
				СтруктураРеквизитов,
				СегментНоменклатурыЗапрещеннойКПродаже, 
				АдресОшибки);				
		
	Иначе
		
		ПодобратьНоменклатуруНеобеспеченныхТоваров(
		        СтрокаТоварыДанныеЗаполнения,
				СтрокаДанныеПоНоменклатуре,
				СтруктураРеквизитов,
				СегментНоменклатурыЗапрещеннойКПродаже, 
				АдресОшибки);				
		
	КонецЕсли;

КонецПроцедуры					

Процедура ПодобратьУпаковкуПаллетуНеобеспеченныхТоваров(СтрокаТоварыДанныеЗаполнения,
														СтрокаДанныеПоНоменклатуре,
														СтруктураРеквизитов,
														СегментНоменклатурыЗапрещеннойКПродаже, 
														АдресОшибки)				

	КэшУпаковокПаллетНоменклатуры = Новый Соответствие;
																
	ПараметрыПолученияПаллеты = Новый Структура;
	ПараметрыПолученияПаллеты.Вставить("НеПроверятьУникальность");

	Если ЗначениеЗаполнено(СегментНоменклатурыЗапрещеннойКПродаже) Тогда
		ПараметрыПолученияПаллеты.Вставить(
				"СегментИсключаемойНоменклатуры", 
				СегментНоменклатурыЗапрещеннойКПродаже);
	КонецЕсли;

	СтруктураРеквизитов.бг_УпаковкаПаллета = 
		РегистрыСведений.бг_ХарактеристикиУпаковокПаллет.УпаковкаПаллетаПоУмолчанию(
				СтруктураРеквизитов.Номенклатура,
				КэшУпаковокПаллетНоменклатуры,
				ПараметрыПолученияПаллеты);
													
	// Если у первой номенклатуры не нашлось упаковки паллеты, то попоробуем взять другую соответствующую
	// номенклатуру, у которой есть упаковка паллета.
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.бг_УпаковкаПаллета) Тогда
		КоличествоСоответствующаяНоменклатура = СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура.Количество();
		Для Индекс = 1 По КоличествоСоответствующаяНоменклатура - 1 Цикл	
			бг_УпаковкаПаллета = 
				РегистрыСведений.бг_ХарактеристикиУпаковокПаллет.УпаковкаПаллетаПоУмолчанию(
										СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[Индекс].Номенклатура,
										КэшУпаковокПаллетНоменклатуры,
										ПараметрыПолученияПаллеты);				
			Если ЗначениеЗаполнено(бг_УпаковкаПаллета) Тогда 															
				СтруктураРеквизитов.Номенклатура =
					СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[Индекс].Номенклатура;
				ПравилоОкругления = 
					СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[Индекс].ПравилоОкругления;
				СтруктураРеквизитов.бг_УпаковкаПаллета = бг_УпаковкаПаллета;
				Прервать;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.бг_УпаковкаПаллета) Тогда
		ШаблонСообщения = 
			НСтр("ru = 'Не найдена разрешенная к продаже упаковка (паллета) для номенклатура по коду ""%1"".';
			     |en = 'Не найдена разрешенная к продаже упаковка (паллета) для номенклатура по коду ""%1"".'",
							ОбщегоНазначения.КодОсновногоЯзыка());

		ТекстСообщения = АдресОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, СтрокаТоварыДанныеЗаполнения.КодДляПоискаНоменклатуры);
			
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	

КонецПроцедуры

Процедура ПодобратьНоменклатуруНеобеспеченныхТоваров(СтрокаТоварыДанныеЗаполнения,
														СтрокаДанныеПоНоменклатуре,
														СтруктураРеквизитов,
														СегментНоменклатурыЗапрещеннойКПродаже, 
														АдресОшибки)				

	Если Не ЗначениеЗаполнено(СегментНоменклатурыЗапрещеннойКПродаже) Тогда
		// Если нет номенклатуры, которую нельзя продавать, то ничего делать не надо,
		// Оставляем в заказе для обеспечения первую номенклатуру из соответствующих по СКЮ МТ.
		Возврат;	
	КонецЕсли;
			
	Если бг_Номенклатура.НоменклатураВключенаВСоставСегмента(СтруктураРеквизитов.Номенклатура, 
			СегментНоменклатурыЗапрещеннойКПродаже) Тогда			
		СтруктураРеквизитов.Номенклатура = Неопределено;
	КонецЕсли;
	
	// Если первая номенклатура запрещена к продаже, то попоробуем взять другую
	// номенклатуру, по которой нет запрета к продаже.
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.Номенклатура) Тогда
		КоличествоСоответствующаяНоменклатура = СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура.Количество();
		Для Индекс = 1 По КоличествоСоответствующаяНоменклатура - 1 Цикл	
			НоменклатураЗапрещенаКПродаже = бг_Номенклатура.НоменклатураВключенаВСоставСегмента(
				СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[Индекс].Номенклатура,
				СегментНоменклатурыЗапрещеннойКПродаже);
			
			Если Не НоменклатураЗапрещенаКПродаже Тогда 															
				СтруктураРеквизитов.Номенклатура = 
					СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[Индекс].Номенклатура;
				ПравилоОкругления = 
					СтрокаДанныеПоНоменклатуре.СоответствующаяНоменклатура[Индекс].ПравилоОкругления;
				Прервать;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов.Номенклатура) Тогда
		ШаблонСообщения = НСтр("ru = 'Не найдена разрешенная к продаже номенклатура по коду ""%1"".';
					 		   |en = 'Не найдена разрешенная к продаже номенклатура по коду ""%1"".'",
							ОбщегоНазначения.КодОсновногоЯзыка());

		ТекстСообщения = АдресОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, СтрокаТоварыДанныеЗаполнения.КодДляПоискаНоменклатуры);
			
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;	
	
КонецПроцедуры					

// Возвращает количество товара, которое можно учесть при распределении, с учетом
//  правила округления до целых коробок.
//  Вспомогательная функция вызывается из алгоритмов распределения заказанного количества 
//  товаров на доступные остатки. 
//
Функция МожноРаспределитьСУчетомПравилаОкругленияДоКороба(ОсталосьРаспределить, 
															КоличествоОстаток, 
															ПравилоОкругления, 
															Номенклатура, 
															УпаковкаПаллета = Неопределено,
															ЭтоПоследнийОстатокКРаспределению = Ложь)
															
	МожноРаспределить = Мин(ОсталосьРаспределить, КоличествоОстаток); // Не дополненное до целого короба.	
	// Иногда в системе ошибочно появляются дробные остатки.
	// Чтобы в заказы не попадали дробные количества товаров, всегда берем целое от остатка.
	МожноРаспределить = Цел(МожноРаспределить);
	МожноРаспределитьСУчетомПравила = МожноРаспределить;
	
	Если МожноРаспределить <= 0
		Или Не ВозможенРасчетПоПравилуОкругления(Номенклатура, ПравилоОкругления) Тогда
		Возврат МожноРаспределитьСУчетомПравила;	
	КонецЕсли;														
	
	КоэффициентКоробки = 1;
	Коробка = Неопределено;
	Если ЗначениеЗаполнено(УпаковкаПаллета) Тогда
		Коробка = бг_Номенклатура.КоробкаПаллеты(УпаковкаПаллета, КоэффициентКоробки);		 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Коробка) Тогда
		Коробка = бг_Номенклатура.КоробкаНоменклатуры(Номенклатура, КоэффициентКоробки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Коробка) 
		Или КоэффициентКоробки <= 0 Тогда
		// Правило округления применить не можем, так как не смогли определить коробку 
		// и количество бутылок в коробке для номенклатуры.
		Возврат МожноРаспределитьСУчетомПравила;	
	КонецЕсли;														

	// Дополним количество, которое можно распределить, до целого короба.
	МожноРаспределитьДоведенноеДоКороба = 
		Окр(МожноРаспределить / КоэффициентКоробки + 0.5, 0, РежимОкругления.Окр15как10) * КоэффициентКоробки;	
		
	Если МожноРаспределитьДоведенноеДоКороба <= КоличествоОстаток Тогда
		
		// Доступного остатка хватает, чтобы распределить количество, дополненное до целого короба.
		МожноРаспределитьСУчетомПравила = МожноРаспределитьДоведенноеДоКороба;
		
	Иначе	
		
		// Доступного остатка не хватает, чтобы распределить количество, дополненное до целого короба.
		Если ЭтоПоследнийОстатокКРаспределению Тогда
			// Это последняя итерация распределения (больше доступных остатков нет).
			Если ПравилоОкругления = Перечисления.бг_ПравилаОкругленияДоКороба.ОкруглятьВсегда Тогда
				// Если это последняя итерация распределения, то в случае если указано,
				// что округлять надо всегда, вернем количество, доведенное до целого короба.
				МожноРаспределитьСУчетомПравила = МожноРаспределитьДоведенноеДоКороба;
			Иначе
				МожноРаспределитьСУчетомПравила = МожноРаспределить;
			КонецЕсли;	
		Иначе
			// Уменьшим количество, которое можно распределить, до целого короба.
			МожноРаспределитьСУчетомПравила = Цел(МожноРаспределить / КоэффициентКоробки) * КоэффициентКоробки;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат МожноРаспределитьСУчетомПравила;

КонецФункции

Функция ВозможенРасчетПоПравилуОкругления(Номенклатура, ПравилоОкругления)

	Возврат ЗначениеЗаполнено(Номенклатура)
		И ЗначениеЗаполнено(ПравилоОкругления)
		И ПравилоОкругления <> Перечисления.бг_ПравилаОкругленияДоКороба.НеОкруглять;

КонецФункции

#КонецОбласти

Функция РазмещениеВОжидаемомПоступлении(СтрокаТЧ)

	Возврат СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению 
			И ЗначениеЗаполнено(СтрокаТЧ.бг_ЗаказПоставщикуИсточникОбеспечения);	

КонецФункции

Процедура РаспределитьАктуализированноеОбеспечение(ДокументОбъект, ДанныеЗаполнения, ТоварыЗаказКлиента)

	ТоварыДокумента = ДокументОбъект.Товары.Выгрузить();
	
	ТоварыДокумента.Колонки.Добавить(
			"НовоеОбеспечение",
			Новый ОписаниеТипов("Массив")); 
			
	ТоварыДокумента.Колонки.Добавить(
			"ЕстьИзменения",
			Новый ОписаниеТипов("Булево")); 
			
	ДобавитьИЗаполнитьКолонкуСКЮМТ(ТоварыДокумента);		
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Отменено", Ложь);
	ОтборСтрок.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
	
	Для каждого СтрокаТоварыЗаказаКлиента Из ТоварыЗаказКлиента Цикл
		
		ОтборСтрок.Вставить("Номенклатура", СтрокаТоварыЗаказаКлиента.Номенклатура);
		ОтборСтрок.Вставить("бг_УпаковкаПаллета", СтрокаТоварыЗаказаКлиента.бг_УпаковкаПаллета);
		
		ОтборСтрок.Вставить(
				"бг_ЗаказКлиентаИсточникОбеспечения", 
				СтрокаТоварыЗаказаКлиента.бг_ЗаказКлиентаИсточникОбеспечения);
		ОтборСтрок.Вставить(
				"бг_ЗаказПоставщикуИсточникОбеспечения", 
				СтрокаТоварыЗаказаКлиента.бг_ЗаказПоставщикуИсточникОбеспечения);
				
		ОсталосьРаспределить = СтрокаТоварыЗаказаКлиента.Количество;		
		
		РаспределитьАктуализированноеОбеспечениеПоНоменклатуре(
				ТоварыДокумента, 
				ОтборСтрок, 
				СтрокаТоварыЗаказаКлиента,
				ОсталосьРаспределить);	
				
		Если Не СтрокаТоварыЗаказаКлиента.бг_ЗафиксированныйТовар
			И ОсталосьРаспределить > 0
			И ЗначениеЗаполнено(СтрокаТоварыЗаказаКлиента.СКЮ_МТ) Тогда
		
			ОтборСтрок.Удалить("Номенклатура");
			ОтборСтрок.Удалить("бг_УпаковкаПаллета");
			ОтборСтрок.Удалить("бг_ЗаказКлиентаИсточникОбеспечения");
			ОтборСтрок.Удалить("бг_ЗаказПоставщикуИсточникОбеспечения");
			
			ОтборСтрок.Вставить("СКЮ_МТ", СтрокаТоварыЗаказаКлиента.СКЮ_МТ);
		
			РаспределитьАктуализированноеОбеспечениеПоСКЮМТ(
					ТоварыДокумента, 
					ОтборСтрок, 
					СтрокаТоварыЗаказаКлиента,
					ОсталосьРаспределить);	
			
		КонецЕсли;		
		
		СтрокаТоварыЗаказаКлиента.Количество = ОсталосьРаспределить;
		
	КонецЦикла;
	
	ОбработатьСтрокиКОбеспечениюТоваровДокумента(ДокументОбъект, ТоварыДокумента, ТоварыЗаказКлиента);
	
КонецПроцедуры

Процедура ДобавитьИЗаполнитьКолонкуСКЮМТ(ТаблицаНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Добавим колонку СКЮ_МТ.
	Если ТаблицаНоменклатуры.Колонки.Найти("СКЮ_МТ") = Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.Добавить(
				"СКЮ_МТ",
				Новый ОписаниеТипов("СправочникСсылка.бг_ЕК_СКЮ_СкюМТ")); 
	КонецЕсли;
			
	// Заполнним колонку СКЮ_МТ.		
	Номенклатура = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");		
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(Номенклатура.ТоварнаяКатегория КАК Справочник.ТоварныеКатегории).бг_СкюМТ КАК СКЮ_МТ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)";
	
	СКЮ_МТ = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.СКЮ_МТ) Тогда
			СКЮ_МТ.Вставить(Выборка.Ссылка, Выборка.СКЮ_МТ);	
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из ТаблицаНоменклатуры Цикл
		СтрокаТЧ.СКЮ_МТ = СКЮ_МТ.Получить(СтрокаТЧ.Номенклатура);
	КонецЦикла;

КонецПроцедуры

// Распределяет новое обеспечение в строках исходной таблицы товаров документа.
// Распределение в рамках одной номенклатуры. 
//
Процедура РаспределитьАктуализированноеОбеспечениеПоНоменклатуре(ТоварыДокумента, 
																ОтборСтрок, 
																СтрокаТоварыЗаказаКлиента,
																ОсталосьРаспределить)
																	
	Если ОсталосьРаспределить > 0 Тогда
		НайденныеСтрокиКОбеспечению = ТоварыДокумента.НайтиСтроки(ОтборСтрок);
		ЗаполнитьНовоеОбеспечениеТоваровДокумента(
				НайденныеСтрокиКОбеспечению, 
				СтрокаТоварыЗаказаКлиента,
				ОсталосьРаспределить);
	КонецЕсли;
	
	Если ОсталосьРаспределить > 0 Тогда
		ОтборСтрок.Удалить("бг_ЗаказКлиентаИсточникОбеспечения");
		НайденныеСтрокиКОбеспечению = ТоварыДокумента.НайтиСтроки(ОтборСтрок);
		ЗаполнитьНовоеОбеспечениеТоваровДокумента(
				НайденныеСтрокиКОбеспечению, 
				СтрокаТоварыЗаказаКлиента,
				ОсталосьРаспределить);
	КонецЕсли;

 	Если ОсталосьРаспределить > 0 Тогда
		ОтборСтрок.Удалить("бг_ЗаказПоставщикуИсточникОбеспечения");
		НайденныеСтрокиКОбеспечению = ТоварыДокумента.НайтиСтроки(ОтборСтрок);
		ЗаполнитьНовоеОбеспечениеТоваровДокумента(
				НайденныеСтрокиКОбеспечению, 
				СтрокаТоварыЗаказаКлиента,
				ОсталосьРаспределить);
	КонецЕсли;
	
	Если ОсталосьРаспределить > 0 Тогда
		ОтборСтрок.Удалить("бг_УпаковкаПаллета");
		НайденныеСтрокиКОбеспечению = ТоварыДокумента.НайтиСтроки(ОтборСтрок);
		ЗаполнитьНовоеОбеспечениеТоваровДокумента(
				НайденныеСтрокиКОбеспечению, 
				СтрокаТоварыЗаказаКлиента,
				ОсталосьРаспределить);
	КонецЕсли;
	
КонецПроцедуры

// Распределяет новое обеспечение в строках исходной таблицы товаров документа. 
// Распределение в рамках одного СКЮ МТ. 
//
Процедура РаспределитьАктуализированноеОбеспечениеПоСКЮМТ(ТоварыДокумента, 
															ОтборСтрок, 
															СтрокаТоварыЗаказаКлиента,
															ОсталосьРаспределить)
																	
	Если ОсталосьРаспределить > 0 Тогда
		НайденныеСтрокиКОбеспечению = ТоварыДокумента.НайтиСтроки(ОтборСтрок);
		ЗаполнитьНовоеОбеспечениеТоваровДокумента(
				НайденныеСтрокиКОбеспечению, 
				СтрокаТоварыЗаказаКлиента,
				ОсталосьРаспределить);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНовоеОбеспечениеТоваровДокумента(НайденныеСтрокиКОбеспечению, 
														СтрокаТоварыЗаказаКлиента, 
														ОсталосьРаспределить)
	
	Если НайденныеСтрокиКОбеспечению.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОсталосьРаспределить <= 0 Тогда
		Возврат;	
	КонецЕсли;
	
	СтрокаЗаказаКОбеспечению = НайденныеСтрокиКОбеспечению[0]; 

	СтруктураНовойСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТоварыЗаказаКлиента);	
	СтруктураНовойСтроки.Вставить("Количество", ОсталосьРаспределить);
	СтрокаЗаказаКОбеспечению.НовоеОбеспечение.Добавить(СтруктураНовойСтроки);

	ОсталосьРаспределить = 0;
	
КонецПроцедуры	

Процедура ОбработатьСтрокиКОбеспечениюТоваровДокумента(ДокументОбъект, ТоварыДокумента, ТоварыЗаказКлиента)

	СтрокиУдалить = Новый Массив;
	СтрокиДобавить = Новый Массив;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ИзменяемыеРеквизиты = Новый Массив;
	ИзменяемыеРеквизиты.Добавить("Номенклатура");
	ИзменяемыеРеквизиты.Добавить("бг_УпаковкаПаллета");
	ИзменяемыеРеквизиты.Добавить("ВариантОбеспечения");
	ИзменяемыеРеквизиты.Добавить("Количество");
	ИзменяемыеРеквизиты.Добавить("бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения");
	ИзменяемыеРеквизиты.Добавить("бг_ЗаказКлиентаИсточникОбеспечения");
	ИзменяемыеРеквизиты.Добавить("бг_ЗаказПоставщикуИсточникОбеспечения");
	ИзменяемыеРеквизитыСтрокой = СтрСоединить(ИзменяемыеРеквизиты, ",");    
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("Отменено", Ложь);
	ОтборСтрок.Вставить("ВариантОбеспечения", Перечисления.ВариантыОбеспечения.КОбеспечению);
	
	НайденныеСтрокиКОбеспечению = ТоварыДокумента.НайтиСтроки(ОтборСтрок);
	
	Для каждого СтрокаЗаказаКОбеспечению Из НайденныеСтрокиКОбеспечению Цикл
		
		Если СтрокаЗаказаКОбеспечению.НовоеОбеспечение.Количество() = 0 Тогда
			СтрокиУдалить.Добавить(СтрокаЗаказаКОбеспечению);
			Продолжить;
		КонецЕсли;
		
		ДобавитьВТоварыСтрокиНовогоОбеспечения(
		        СтрокиДобавить,
				СтрокаЗаказаКОбеспечению,
				ИзменяемыеРеквизитыСтрокой,
				СтруктураДействий,
				КэшированныеЗначения);
		
	КонецЦикла;
	
	// Удалим исходные строки документа, на которые не распределилось новое обеспечение.
	Для каждого СтрокаТЧ Из СтрокиУдалить Цикл
		ТоварыДокумента.Удалить(СтрокаТЧ);
	КонецЦикла; 
	
	// Добавим строки нового обеспечения, по которым исходные строки документа надо разбить.
	Для каждого СтрокаТЧ Из СтрокиДобавить Цикл
		ОтборПоискаСтарыхСтрок = Новый Структура("Номенклатура", СтрокаТЧ.Номенклатура);
		СтарыеСтрокиНоменклатуры = ТоварыДокумента.НайтиСтроки(ОтборПоискаСтарыхСтрок);
		Если СтарыеСтрокиНоменклатуры.Количество() > 0 Тогда
			// Сохраняем порядок строк номенклатуры.
			ИндексСтрокиНоменклатуры = ТоварыДокумента.Индекс(СтарыеСтрокиНоменклатуры[0]);
			НоваяСтрокаТоварыДокумента = ТоварыДокумента.Вставить(ИндексСтрокиНоменклатуры);
		Иначе
			НоваяСтрокаТоварыДокумента = ТоварыДокумента.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыДокумента, СтрокаТЧ);

		НоваяСтрокаТоварыДокумента.КодСтроки = 0;
		НоваяСтрокаТоварыДокумента.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				НоваяСтрокаТоварыДокумента, 
				СтруктураДействий, 
				КэшированныеЗначения);
		НоваяСтрокаТоварыДокумента.ЕстьИзменения = Истина;
	КонецЦикла; 
	
	ДокументОбъект.Товары.Очистить();
	Для каждого СтрокаТоварыДокумента Из ТоварыДокумента Цикл
		НоваяСтрока = ДокументОбъект.Товары.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыДокумента);
	КонецЦикла;
	
	// Добавим строки нового обеспечения, которые не распределились на исходные строки документа.
	Для каждого СтрокаТЧ Из ТоварыЗаказКлиента Цикл
		Если СтрокаТЧ.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьСтрокуВТТоварыЗаказаКлиента(ДокументОбъект, СтрокаТЧ, КэшированныеЗначения);
	КонецЦикла; 
	
	СвернутьТЧТоварыЗаказаКлиента(ДокументОбъект, СтруктураДействий);
	ПересчитатьКоличествоКоробокИПаллетВТЧ(ДокументОбъект.Товары);
	ОбработатьТЧТовары(ДокументОбъект);
	
КонецПроцедуры

Процедура ДобавитьВТоварыСтрокиНовогоОбеспечения(СтрокиДобавить,
												СтрокаЗаказаКОбеспечению, 
												ИзменяемыеРеквизитыСтрокой,
												СтруктураДействий,
												КэшированныеЗначения)

	ПерваяСтрока = Истина;
	Для каждого СтрокаНовогоОбеспечения Из СтрокаЗаказаКОбеспечению.НовоеОбеспечение Цикл	
		Если ПерваяСтрока Тогда
			// Сохраняем исходную строку в документе, но изменяем данные актуального обеспечения.
			ЗаполнитьЗначенияСвойств(
					СтрокаЗаказаКОбеспечению, 
					СтрокаНовогоОбеспечения, 
					ИзменяемыеРеквизитыСтрокой);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
					СтрокаЗаказаКОбеспечению, 
					СтруктураДействий, 
					КэшированныеЗначения);
			СтрокаЗаказаКОбеспечению.ЕстьИзменения = Истина;
		Иначе	
		    // Добавляем строку в документ, но не изменяем данные, кроме актуального обеспечения.
			НоваяСтрокаТоварыДокумента = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаНовогоОбеспечения);
			// Копируем данные из исходной строки. 
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыДокумента, СтрокаЗаказаКОбеспечению);
			// Изменяем данные актуального обеспечения.
			ЗаполнитьЗначенияСвойств(
					НоваяСтрокаТоварыДокумента, 
					СтрокаНовогоОбеспечения, 
					ИзменяемыеРеквизитыСтрокой);
			СтрокиДобавить.Добавить(НоваяСтрокаТоварыДокумента);
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
					НоваяСтрокаТоварыДокумента, 
					СтруктураДействий,
					КэшированныеЗначения);
		КонецЕсли;	
		
		ПерваяСтрока = Ложь;	
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ДобавитьСтрокуВТТоварыЗаказаКлиента(ДокументОбъект, СтрокаТовары, КэшированныеЗначения)
	
	НоваяСтрока = ДокументОбъект.Товары.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
	
	Если НоваяСтрока.Цена = 0 
		И ЗначениеЗаполнено(ДокументОбъект.Соглашение) Тогда
		ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение, "ВидЦен"); 
		Если ЗначениеЗаполнено(ВидЦены) Тогда
			НоваяСтрока.ВидЦены = ВидЦены;
			
			СтруктураДействийЗаполнитьЦену = Новый Структура;
			СтруктураДействийЗаполнитьЦену.Вставить("ЗаполнитьЦенуПродажи", 
					ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(ДокументОбъект));
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
						НоваяСтрока, 
						СтруктураДействийЗаполнитьЦену,
						КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока.КодСтроки = 0;
	НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор());

КонецПроцедуры	

Процедура ЗаписатьИПровестиЗаказКлиентаПослеОбработки(ДокументОбъект, Результат)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	БылПроведен = ДокументОбъект.Проведен;
	СталПроведен = Ложь;
	
	ЕстьОшибкиЗаполнения = Ложь;
	Попытка

		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			СталПроведен = Истина;
		Иначе	
			ЕстьОшибкиЗаполнения = Истина;
			
			ШаблонСообщения = 
				НСтр("ru = 'Документ %1 невозможно провести по причине некорректного заполнения.';
					 |en = 'Document %1 is not posted. Reason: the document is filled incorrectly.'",
				КодОсновногоЯзыка);
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка);					
			бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
			
			Если Не БылПроведен Тогда	
				// Документ ранее не был проведен, запишем в режиме записи.
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ДокументОбъект.Ссылка);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	
			
			Результат.Вставить("ЕстьОшибкиПроведения", Истина);
			Результат.Вставить("ТекстОшибки", ТекстСообщения);
			
		КонецЕсли;	
		
	Исключение

		Если ЕстьОшибкиЗаполнения Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось записать документ %1.';
						           |en = 'Document %1 is not saved.'",	
					               КодОсновногоЯзыка);
		Иначе
			ШаблонСообщения = НСтр("ru = 'Не удалось провести документ %1.';
						           |en = 'Document %1 is not posted.'",	
					               КодОсновногоЯзыка);
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокументОбъект.Ссылка) 
			+ Символы.ПС  
			+ НСтр("ru = 'По причине: '; en = 'Reason: '", КодОсновногоЯзыка)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
	
		Результат.Вставить("ЕстьОшибкиПроведения", Истина);
		Результат.Вставить("ТекстОшибки", ТекстСообщения);
		
	КонецПопытки;
		
	
	Если СталПроведен Тогда
		ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	КонецЕсли;

КонецПроцедуры	

Функция СоглашениеИДоговорСКлиентомПоВидуНоменклатуры(Организация, Контрагент, ВидНоменклатуры = Неопределено) Экспорт
	
	СоглашениеДоговор = Новый Структура("Соглашение,Договор");	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ?(ЗначениеЗаполнено(ВидНоменклатуры), ВидНоменклатуры, Справочники.ВидыНоменклатуры.ПустаяСсылка()));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Соглашение КАК Соглашение,
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры КАК бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры
	|ГДЕ
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Организация = &Организация
	|	И бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Контрагент = &Контрагент
	|	И бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Соглашение,
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Договор
	|ИЗ
	|	РегистрСведений.бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры КАК бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры
	|ГДЕ
	|	бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Организация = &Организация
	|	И бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.Контрагент = &Контрагент
	|	И бг_СоглашенияИДоговорыСКлиентамиПоВидамНоменклатуры.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СоглашениеДоговор, Выборка);
	КонецЕсли;
	
    Возврат СоглашениеДоговор; 
	
КонецФункции

Функция СоглашениеСКлиентомПоОрганизации(Организация, Контрагент)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	СоглашенияСКлиентами.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Организация = &Организация
	|	И СоглашенияСКлиентами.Контрагент = &Контрагент
	|	И НЕ СоглашенияСКлиентами.ПометкаУдаления
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 2 Тогда
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
	Выборка.Следующий();
	Возврат Выборка.Соглашение;
	
КонецФункции

Процедура ЗаполнитьСоглашениеПоСтатистике(ДокументОбъект)
	
	ОписаниеРеквизитов = Новый Структура;
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "ЦенаВключаетНДС";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Организация, Партнер, Валюта";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Соглашение", Параметры);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ДокументОбъект, Неопределено, ОписаниеРеквизитов);
	
КонецПроцедуры

Процедура ЗаполнитьИПроверитьВидыНоменклатурыВТЧТовары(ТоварыЗаказКлиента, ДанныеЗаполнения)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	// Добавим и запролним служебную колонку "ВидНоменклатуры".
	ТоварыЗаказКлиента.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	МассивНоменклатуры = ТоварыЗаказКлиента.ВыгрузитьКолонку("Номенклатура");
	ВидыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивНоменклатуры, "ВидНоменклатуры");
	
	ЭтоПерваяСтрока = Истина;
	ВидНоменклатуры = Неопределено;
	НомерСтроки = 0;
	Для каждого СтрокаТоварыЗаказаКлиента Из ТоварыЗаказКлиента Цикл
		
		НомерСтроки = НомерСтроки + 1;

		АдресОшибки = НСтр("ru = 'Строка %НомерСтроки%. ';
						   |en = 'Line %НомерСтроки%. '", КодОсновногоЯзыка);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		СтрокаТоварыЗаказаКлиента.ВидНоменклатуры = ВидыНоменклатуры.Получить(СтрокаТоварыЗаказаКлиента.Номенклатура);
		
		Если ДанныеЗаполнения.ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP Тогда
			// Для заказов винлаб на пополнение запасов проверим, что в переданной заявке один вид номенклатуры.
			// В консолидированных заказах и интернет заказах допускается наличие номенклатуры разных видов.
			// Если в строках заявки клиента будет номенклатура разных видов, то по видам номенклатуры будут
			// созданы отдельные Заказы клиентов. Если эту проверку убрать, то и для заказов винлаб на пополнение
			// запасов будут созданы отдельные Заказы клиентов по каждому виду номенклатуры.
			Если ЭтоПерваяСтрока Тогда
				Если ЗначениеЗаполнено(СтрокаТоварыЗаказаКлиента.ВидНоменклатуры) Тогда
					ВидНоменклатуры = СтрокаТоварыЗаказаКлиента.ВидНоменклатуры;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СтрокаТоварыЗаказаКлиента.ВидНоменклатуры)
					И ЗначениеЗаполнено(ВидНоменклатуры)
					И СтрокаТоварыЗаказаКлиента.ВидНоменклатуры <> ВидНоменклатуры Тогда
					ШаблонСообщения = 
						НСтр("ru = 'Указаны разыные значения в поле ""Вид номенклатуры"": %1, %2 ...';
							 |en = 'There are different values in the column ""Product type"": %1, %2 ...'",
						КодОсновногоЯзыка);
			
					ТекстСообщения = АдресОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонСообщения, ВидНоменклатуры, СтрокаТоварыЗаказаКлиента.ВидНоменклатуры);
						
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоПерваяСтрока = Ложь;
		
	КонецЦикла;

КонецПроцедуры

// Заполняет паллеты по умолчанию в строках табличной части для товаров, по которым
// не ведется учет остатков и резервов в разрезе паллет, но паллеты нужны для корректной интеграции с УПП.
// Например, номенклатура вида ридель. Так как именно в паллете зашит код ЕК номенклатуры.
//
// Параметры:
//  ТоварыЗаказКлиента - ДокументТабличнаяЧасть.ЗаказКлиента.Товары - табличная часть Товары
//                     - ТаблицаЗначений - таблца товары, структура таблице соответствует ТЧ Товары
//                     - Массив - массив строк табличной части Товары
//                        * Документ.ТабличнаяЧастьСтрока.ЗаказКлиента.Товары
//
Процедура ЗаполнитьПаллетыПоУмолчаниюВТЧТовары(ТоварыЗаказКлиента)
	
	ОтбораСтрок = Новый Структура("бг_УпаковкаПаллета", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
	НоменклатураБезПаллет = 
		ТоварыЗаказКлиента.Скопировать(ОтбораСтрок, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
	Паллетизация = бг_Номенклатура.ПаллетизацияМассиваНоменклатурПоУмолчанию(НоменклатураБезПаллет);
	
	Для Каждого СтрокаТЧ Из ТоварыЗаказКлиента Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.бг_УпаковкаПаллета) Тогда
			ПаллетаПоУмолчанию = Паллетизация.Получить(СтрокаТЧ.Номенклатура);
			Если ЗначениеЗаполнено(ПаллетаПоУмолчанию) Тогда
				СтрокаТЧ.бг_УпаковкаПаллета = ПаллетаПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДатыОтгрузкиВТЧТовары(ТоварыЗаказКлиента, ДанныеЗаполнения)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	ЭтоПерваяСтрока = Истина;
	ДатаОтгрузки = Неопределено;
	НомерСтроки = 0;
	Для каждого СтрокаТоварыЗаказаКлиента Из ТоварыЗаказКлиента Цикл
		
		НомерСтроки = НомерСтроки + 1;

		АдресОшибки = НСтр("ru = 'Строка %НомерСтроки%. ';
						   |en = 'Line %НомерСтроки%. '", КодОсновногоЯзыка);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если СтрокаТоварыЗаказаКлиента.Отменено Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЭтоПерваяСтрока Тогда
			Если ЗначениеЗаполнено(СтрокаТоварыЗаказаКлиента.ДатаОтгрузки) Тогда
				ДатаОтгрузки = СтрокаТоварыЗаказаКлиента.ДатаОтгрузки;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаТоварыЗаказаКлиента.ДатаОтгрузки)
				И ЗначениеЗаполнено(ДатаОтгрузки)
				И СтрокаТоварыЗаказаКлиента.ДатаОтгрузки <> ДатаОтгрузки Тогда
				ШаблонСообщения = 
					НСтр("ru = 'Указаны разыные значения в поле ""Дата отгрузки"": %1, %2 ...';
						 |en = 'There are different values in the column ""Shipment date"": %1, %2 ...'",
					КодОсновногоЯзыка);
		
				ТекстСообщения = АдресОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, ДатаОтгрузки, СтрокаТоварыЗаказаКлиента.ДатаОтгрузки);
					
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоПерваяСтрока = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИПроверитьРезервыИнтернетЗаказовВТЧТовары(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		Возврат;
	КонецЕсли;

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("ДатаДоставки", ДанныеЗаполнения.ДатаДоставки);
	Запрос.УстановитьПараметр("КодГрузополучателя", ДанныеЗаполнения.КодГрузополучателя);
	Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
	Запрос.УстановитьПараметр("ТаблицаРезервыПредзаказовСторнированныеКЗ", ДанныеЗаполнения.ТаблицаРезервыПредзаказовСторнированныеКЗ);
	
	Запрос.Текст = 
	#Область ТекстЗапроса
	"ВЫБРАТЬ
	|	битЗаявкаКлиента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаявкиПредзаказовКлиентов
	|ИЗ
	|	Документ.битЗаявкаКлиента КАК битЗаявкаКлиента
	|ГДЕ
	|	битЗаявкаКлиента.Проведен
	|	И битЗаявкаКлиента.ИсточникЗаказа = ЗНАЧЕНИЕ(Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS)
	|	И битЗаявкаКлиента.Операция = ЗНАЧЕНИЕ(Перечисление.бг_ОперацииЗаявокКлиентов.Резервирование)
	|	И битЗаявкаКлиента.Организация = &Организация
	|	И битЗаявкаКлиента.ДатаДоставки = &ДатаДоставки
	|	И битЗаявкаКлиента.КодГрузополучателя = &КодГрузополучателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказыПредзаказовКлиентов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Проведен
	|	И ЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И ЗаказКлиента.Организация = &Организация
	|	И ЗаказКлиента.бг_ЗаявкаКлиента В
	|			(ВЫБРАТЬ
	|				ВТЗаявкиПредзаказовКлиентов.Ссылка
	|			ИЗ
	|				ВТЗаявкиПредзаказовКлиентов КАК ВТЗаявкиПредзаказовКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК ЗаявкаПредзаказаКлиента,
	|	Товары.Ссылка.НомерПоДаннымКлиента КАК НомерПредзаказаКлиента,
	|	Товары.КодПозицииЗаказа КАК КодПозицииПредзаказаКлиента,
	|	Товары.КодНоменклатурыSAP КАК КодНоменклатурыSAPПредзаказаКлиента,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТоварыЗаявокПредзаказовКлиентов
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТЗаявкиПредзаказовКлиентов.Ссылка
	|			ИЗ
	|				ВТЗаявкиПредзаказовКлиентов КАК ВТЗаявкиПредзаказовКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК ЗаказПредзаказаКлиента,
	|	Товары.Ссылка.бг_ЗаявкаКлиента.НомерПоДаннымКлиента КАК НомерПредзаказаКлиента,
	|	Товары.бг_КодСтрокиЗаявки КАК КодПозицииПредзаказаКлиента,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.бг_УпаковкаПаллета КАК УпаковкаПаллета
	|ПОМЕСТИТЬ ВТТоварыЗаказовПредзаказовКлиентов
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТЗаказыПредзаказовКлиентов.Ссылка
	|			ИЗ
	|				ВТЗаказыПредзаказовКлиентов КАК ВТЗаказыПредзаказовКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыПредзаказов.Склад КАК Склад,
	|	РезервыПредзаказов.Номенклатура КАК Номенклатура,
	|	РезервыПредзаказов.УпаковкаПаллета КАК УпаковкаПаллета,
	|	РезервыПредзаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	РезервыПредзаказов.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	РезервыПредзаказов.Зарезервировано КАК Зарезервировано
	|ПОМЕСТИТЬ ВТРезервыПредзаказовСторнированные
	|ИЗ
	|	&ТаблицаРезервыПредзаказовСторнированныеКЗ КАК РезервыПредзаказов
	|ГДЕ
	|	РезервыПредзаказов.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияОДоступности.Склад КАК Склад,
	|	ИнформацияОДоступности.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ИнформацияОДоступности.Характеристика.бг_УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента), ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) КАК ЗаказНаОтгрузку,
	|	ИнформацияОДоступности.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ИнформацияОДоступности.Зарезервировано КАК Зарезервировано
	|ПОМЕСТИТЬ ВТРезервыПредзаказов
	|ИЗ
	|	РегистрСведений.РаспределениеЗапасов КАК ИнформацияОДоступности
	|ГДЕ
	|	ИнформацияОДоступности.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ВРезерве)
	|	И ВЫРАЗИТЬ(ИнформацияОДоступности.ЗаказНаОтгрузку КАК Документ.ЗаказКлиента).Организация = &Организация
	|	И ИнформацияОДоступности.ЗаказНаОтгрузку В
	|			(ВЫБРАТЬ
	|				ВТЗаказыПредзаказовКлиентов.Ссылка
	|			ИЗ
	|				ВТЗаказыПредзаказовКлиентов КАК ВТЗаказыПредзаказовКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезервыПредзаказов.Склад,
	|	РезервыПредзаказов.Номенклатура,
	|	РезервыПредзаказов.УпаковкаПаллета,
	|	РезервыПредзаказов.ЗаказНаОтгрузку,
	|	РезервыПредзаказов.ЖелаемаяДатаОтгрузки,
	|	РезервыПредзаказов.Зарезервировано
	|ИЗ
	|	ВТРезервыПредзаказовСторнированные КАК РезервыПредзаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерПредзаказаКлиента КАК НомерПредзаказаКлиента,
	|	Товары.КодПозицииПредзаказаКлиента КАК КодПозицииПредзаказаКлиента,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	ВТТоварыЗаявокПредзаказовКлиентов КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.НомерПредзаказаКлиента,
	|	Товары.КодПозицииПредзаказаКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.ЗаявкаПредзаказаКлиента КАК ЗаявкаПредзаказаКлиента,
	|	Товары.НомерПредзаказаКлиента КАК НомерПредзаказаКлиента,
	|	Товары.КодПозицииПредзаказаКлиента КАК КодПозицииПредзаказаКлиента,
	|	Товары.КодНоменклатурыSAPПредзаказаКлиента КАК КодНоменклатурыSAPПредзаказаКлиента,
	|	ЕСТЬNULL(ТоварыЗаказов.ЗаказПредзаказаКлиента, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)) КАК ЗаказНаОтгрузку,
	|	ЕСТЬNULL(ТоварыЗаказов.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(ТоварыЗаказов.УпаковкаПаллета, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК УпаковкаПаллета
	|ИЗ
	|	ВТТоварыЗаявокПредзаказовКлиентов КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыЗаказовПредзаказовКлиентов КАК ТоварыЗаказов
	|		ПО Товары.НомерПредзаказаКлиента = ТоварыЗаказов.НомерПредзаказаКлиента
	|			И Товары.КодПозицииПредзаказаКлиента = ТоварыЗаказов.КодПозицииПредзаказаКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыПредзаказов.Склад КАК Склад,
	|	РезервыПредзаказов.Номенклатура КАК Номенклатура,
	|	РезервыПредзаказов.УпаковкаПаллета КАК УпаковкаПаллета,
	|	РезервыПредзаказов.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
	|	РезервыПредзаказов.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	СУММА(РезервыПредзаказов.Зарезервировано) КАК Зарезервировано
	|ИЗ
	|	ВТРезервыПредзаказов КАК РезервыПредзаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыПредзаказов.Склад,
	|	РезервыПредзаказов.Номенклатура,
	|	РезервыПредзаказов.УпаковкаПаллета,
	|	РезервыПредзаказов.ЗаказНаОтгрузку,
	|	РезервыПредзаказов.ЖелаемаяДатаОтгрузки";
	#КонецОбласти
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// В этой таблице собраны суммарные количества товаров по заявкам клиентов от Hybris (Заявки предзаказов). 
	ТаблицаТоварыЗаявокПредзаказов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 3].Выгрузить();
	// В этой таблице собраны связи товаров заявок клиентов от Hybris и товаров сформированных заказов клиентов. 
	ТаблицаТоварыПредзаказов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 2].Выгрузить();
	// В этой таблице собраны резервы товаров по сформированным заказам клиентов от Hybris (предзаказам).	
	ТаблицаРезервыПредзаказов = РезультатыЗапроса[РезультатыЗапроса.Количество() - 1].Выгрузить();
	
	ДанныеЗаполнения.Товары.Колонки.Добавить("ДанныеПоРезервамПредзаказов", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ОтборТоварыПредзаказов = Новый Структура("НомерПредзаказаКлиента,КодПозицииПредзаказаКлиента"); 
	ОтборРезервыПредзаказов = Новый Структура("Номенклатура,УпаковкаПаллета,ЗаказНаОтгрузку");
	
	// На первом шаге распределим данные по товарным позициям консолидированного заказа, пришедшие из SAP по товарным позициям, зарезервированным
	// по предзаказам, которые были загружены из Hybris.
	НомерСтроки = 0;
	МаксимальныйКодПозицииЗаказа = 0;
	Для каждого СтрокаТоварыДанныеЗаполнения Из ДанныеЗаполнения.Товары Цикл
		
		НомерСтроки = НомерСтроки + 1;

		АдресОшибки = НСтр("ru = 'Строка %НомерСтроки%. ';
						   |en = 'Line %НомерСтроки%. '", КодОсновногоЯзыка);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов = ПустаяТаблицаДанныеПоРезервамПредзаказов();
		
		ЗаполнитьЗначенияСвойств(ОтборТоварыПредзаказов, СтрокаТоварыДанныеЗаполнения);
		НайденныеСтрокиТоварыПредзаказов = ТаблицаТоварыПредзаказов.НайтиСтроки(ОтборТоварыПредзаказов); 
		
		Для каждого СтрокаТоварыПредзаказов Из НайденныеСтрокиТоварыПредзаказов Цикл 
			СтрокаДанныеПоРезервам = СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныеПоРезервам, СтрокаТоварыПредзаказов);
		КонецЦикла;
		
		ОсталосьРаспределить = СтрокаТоварыДанныеЗаполнения.Количество;
		Для каждого СтрокаДанныеПоРезервамПредзаказов Из СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов Цикл
			ЗаполнитьЗначенияСвойств(ОтборРезервыПредзаказов, СтрокаДанныеПоРезервамПредзаказов);
			НайденныеСтрокиРезервыПредзаказов = ТаблицаРезервыПредзаказов.НайтиСтроки(ОтборРезервыПредзаказов);	
			Для каждого СтрокаРезервыПредзаказов Из НайденныеСтрокиРезервыПредзаказов Цикл
				МожноРаспределить = Мин(ОсталосьРаспределить, СтрокаРезервыПредзаказов.Зарезервировано);
				Если МожноРаспределить > 0 Тогда
					СтрокаРаспределениеРезервов = Новый Структура("Склад,ЖелаемаяДатаОтгрузки,Зарезервировано");
					ЗаполнитьЗначенияСвойств(СтрокаРаспределениеРезервов, СтрокаРезервыПредзаказов);
					СтрокаРаспределениеРезервов.Зарезервировано = МожноРаспределить; 
					СтрокаДанныеПоРезервамПредзаказов.РаспределениеРезервов.Добавить(СтрокаРаспределениеРезервов);
					
					СтрокаРезервыПредзаказов.Зарезервировано = СтрокаРезервыПредзаказов.Зарезервировано - МожноРаспределить;
					ОсталосьРаспределить = ОсталосьРаспределить - МожноРаспределить;
				КонецЕсли;
				Если ОсталосьРаспределить <= 0 Тогда
					Прервать;	
				КонецЕсли;	
			КонецЦикла;
			Если ОсталосьРаспределить <= 0 Тогда
				Прервать;	
			КонецЕсли;	
		КонецЦикла;
		
		// Уменьшим в таблице товаров заявок количество на, то количество которое распределили по резервам предзаказов.
		// Таким образом в этой таблице останутся количества товаров заявок, которые не распределили по резервам предзаказов. 
		НайденныеСтрокиТоварыЗаявокПредзаказов = ТаблицаТоварыЗаявокПредзаказов.НайтиСтроки(ОтборТоварыПредзаказов);
		Если НайденныеСтрокиТоварыЗаявокПредзаказов.Количество() > 0 Тогда
			Распределено = СтрокаТоварыДанныеЗаполнения.Количество - ОсталосьРаспределить; 
			НайденныеСтрокиТоварыЗаявокПредзаказов[0].Количество = НайденныеСтрокиТоварыЗаявокПредзаказов[0].Количество - Распределено; 
		КонецЕсли;
		
		Попытка
			КодПозицииЗаказаЧисло = Число(СтрокаТоварыДанныеЗаполнения.КодПозицииЗаказа);
			Если КодПозицииЗаказаЧисло > МаксимальныйКодПозицииЗаказа Тогда
				МаксимальныйКодПозицииЗаказа = КодПозицииЗаказаЧисло;	
			КонецЕсли;
		Исключение
		
		КонецПопытки;
		
	КонецЦикла;
	
	// На втором шаге добавим в консолидированный заказ позиции, зарезервированные по предзаказам, которые были загружены из Hybris,
	// но по каким-то причинам не пришедшие в консолидированном заказе.
	ОтборТоварыПредзаказов = Новый Структура("Номенклатура,УпаковкаПаллета,ЗаказНаОтгрузку");
	ОтборТоварыЗаявокПредзаказов = Новый Структура("НомерПредзаказаКлиента,КодПозицииПредзаказаКлиента");
	ОтборДанныеПоРезервамПредзаказов = Новый Структура("ЗаявкаПредзаказаКлиента,
													   |КодНоменклатурыSAPПредзаказаКлиента,
													   |ЗаказНаОтгрузку,
													   |Номенклатура,
													   |УпаковкаПаллета");
	Для каждого СтрокаРезервыПредзаказов Из ТаблицаРезервыПредзаказов Цикл
		Если СтрокаРезервыПредзаказов.Зарезервировано <= 0 Тогда
			Продолжить;	
		КонецЕсли;	
		// Не все количество товара, зарезервированное по предзаказам распределилось на товары консолидированного заказа.	
		// Это значит, что зарезервировано по предзаказам из Hybris товаров больше, чем в консолидированного заказе из SAP.	
	    // В этои случае надо добавить в консолидированный заказ эти товары.
		ЗаполнитьЗначенияСвойств(ОтборТоварыПредзаказов, СтрокаРезервыПредзаказов);
		НайденныеСтрокиТоварыПредзаказов = ТаблицаТоварыПредзаказов.НайтиСтроки(ОтборТоварыПредзаказов); 

		ОсталосьРаспределить = СтрокаРезервыПредзаказов.Зарезервировано;
		Для каждого СтрокаТоварыПредзаказов Из НайденныеСтрокиТоварыПредзаказов Цикл 
			ЗаполнитьЗначенияСвойств(ОтборТоварыЗаявокПредзаказов, СтрокаТоварыПредзаказов);
			НайденныеСтрокиТоварыЗаявокПредзаказов = ТаблицаТоварыЗаявокПредзаказов.НайтиСтроки(ОтборТоварыЗаявокПредзаказов);
			Для каждого СтрокаТоварыЗаявокПредзаказов Из НайденныеСтрокиТоварыЗаявокПредзаказов Цикл
				МожноРаспределить = Мин(ОсталосьРаспределить, СтрокаТоварыЗаявокПредзаказов.Количество);
				Если МожноРаспределить > 0 Тогда
					
					НайденныеСтрокиДанныеЗаполненияТовары = ДанныеЗаполнения.Товары.НайтиСтроки(ОтборТоварыЗаявокПредзаказов);
					Если НайденныеСтрокиДанныеЗаполненияТовары.Количество() > 0 Тогда
						СтрокаТоварыДанныеЗаполнения = НайденныеСтрокиДанныеЗаполненияТовары[0];
						СтрокаТоварыДанныеЗаполнения.Количество = СтрокаТоварыДанныеЗаполнения.Количество + МожноРаспределить;
					Иначе
						СтрокаТоварыДанныеЗаполнения = ДанныеЗаполнения.Товары.Добавить();
						СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов = ПустаяТаблицаДанныеПоРезервамПредзаказов();
						СтрокаТоварыДанныеЗаполнения.КодДляПоискаНоменклатуры = СтрокаТоварыПредзаказов.КодНоменклатурыSAPПредзаказаКлиента;
						СтрокаТоварыДанныеЗаполнения.КодНоменклатурыSAP = СтрокаТоварыПредзаказов.КодНоменклатурыSAPПредзаказаКлиента;
						
						МаксимальныйКодПозицииЗаказа = МаксимальныйКодПозицииЗаказа + 10;
						СтрокаТоварыДанныеЗаполнения.КодПозицииЗаказа = Прав("00000" + Формат(МаксимальныйКодПозицииЗаказа, "ЧГ=0"), 5);
						
						СтрокаТоварыДанныеЗаполнения.МаркерДействия = "001";
						Если ЗначениеЗаполнено(СтрокаТоварыПредзаказов.Номенклатура) Тогда
							СтрокаТоварыДанныеЗаполнения.Номенклатура = 
								ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТоварыПредзаказов.Номенклатура, "Наименование");
						КонецЕсли;
						СтрокаТоварыДанныеЗаполнения.КодПозицииПредзаказаКлиента = СтрокаТоварыЗаявокПредзаказов.КодПозицииПредзаказаКлиента;
						СтрокаТоварыДанныеЗаполнения.НомерПредзаказаКлиента	= СтрокаТоварыЗаявокПредзаказов.НомерПредзаказаКлиента;
						СтрокаТоварыДанныеЗаполнения.Количество = МожноРаспределить;
					КонецЕсли;	
					
					ЗаполнитьЗначенияСвойств(ОтборДанныеПоРезервамПредзаказов, СтрокаТоварыПредзаказов);
					НайденныеСтрокиДанныеПоРезервамПредзаказов = СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов.НайтиСтроки(ОтборДанныеПоРезервамПредзаказов);
					Если НайденныеСтрокиДанныеПоРезервамПредзаказов.Количество() > 0 Тогда
						СтрокаДанныеПоРезервамПредзаказов = НайденныеСтрокиДанныеПоРезервамПредзаказов[0];
					Иначе
						СтрокаДанныеПоРезервамПредзаказов = СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаДанныеПоРезервамПредзаказов, СтрокаТоварыПредзаказов);	
					КонецЕсли;

					СтрокаРаспределениеРезервов = Новый Структура("Склад,ЖелаемаяДатаОтгрузки,Зарезервировано");
					ЗаполнитьЗначенияСвойств(СтрокаРаспределениеРезервов, СтрокаРезервыПредзаказов);
					СтрокаРаспределениеРезервов.Зарезервировано = МожноРаспределить; 
					СтрокаДанныеПоРезервамПредзаказов.РаспределениеРезервов.Добавить(СтрокаРаспределениеРезервов);
					
					СтрокаРезервыПредзаказов.Зарезервировано = СтрокаРезервыПредзаказов.Зарезервировано - МожноРаспределить;
					ОсталосьРаспределить = ОсталосьРаспределить - МожноРаспределить;
					
				КонецЕсли;
				Если ОсталосьРаспределить <= 0 Тогда
					Прервать;	
				КонецЕсли;	
			КонецЦикла;
			Если ОсталосьРаспределить <= 0 Тогда
				Прервать;	
			КонецЕсли;	
		КонецЦикла;
		
		Если ОсталосьРаспределить > 0 Тогда
			// Если что-то осталось, то это значит, что по данным распределения запасов зарезервировано товаров
			// по предзаказам на эту дату отгрузки и по этой торговой точке больше, чем было в заявках клиентов. 
			// При штатной работе такого быть не должно. Но все равно добавим в заказ клиента,
			// исходя из того, что отгружаем все зарезервированные по предзаказам товары.
			СтрокаТоварыДанныеЗаполнения = ДанныеЗаполнения.Товары.Добавить();
			СтрокаТоварыДанныеЗаполнения.ДанныеПоРезервамПредзаказов = ПустаяТаблицаДанныеПоРезервамПредзаказов();
			
			МаксимальныйКодПозицииЗаказа = МаксимальныйКодПозицииЗаказа + 10;
			СтрокаТоварыДанныеЗаполнения.КодПозицииЗаказа = Прав("00000" + Формат(МаксимальныйКодПозицииЗаказа, "ЧГ=0"), 5);
			
			СтрокаТоварыДанныеЗаполнения.МаркерДействия = "001";
			Если ЗначениеЗаполнено(СтрокаРезервыПредзаказов.Номенклатура) Тогда
				СтрокаТоварыДанныеЗаполнения.Номенклатура = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаРезервыПредзаказов.Номенклатура, "Наименование");
			КонецЕсли;
            Если НайденныеСтрокиТоварыПредзаказов.Количество() > 0 Тогда
				СтрокаТоварыДанныеЗаполнения.КодПозицииПредзаказаКлиента = НайденныеСтрокиТоварыПредзаказов[0].КодПозицииПредзаказаКлиента;
				СтрокаТоварыДанныеЗаполнения.НомерПредзаказаКлиента	= НайденныеСтрокиТоварыПредзаказов[0].НомерПредзаказаКлиента;
			Иначе
				СтрокаТоварыДанныеЗаполнения.КодПозицииПредзаказаКлиента = "";
				СтрокаТоварыДанныеЗаполнения.НомерПредзаказаКлиента	= "";
			КонецЕсли;
			СтрокаТоварыДанныеЗаполнения.Количество = МожноРаспределить;
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры	

Функция ПустаяТаблицаДанныеПоРезервамПредзаказов()

	ДанныеПоРезервам = Новый ТаблицаЗначений;
	ДанныеПоРезервам.Колонки.Добавить("ЗаявкаПредзаказаКлиента", Новый ОписаниеТипов("ДокументСсылка.битЗаявкаКлиента"));
	ДанныеПоРезервам.Колонки.Добавить("КодНоменклатурыSAPПредзаказаКлиента", ОбщегоНазначения.ОписаниеТипаСтрока(18));
	ДанныеПоРезервам.Колонки.Добавить("ЗаказНаОтгрузку", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	ДанныеПоРезервам.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	ДанныеПоРезервам.Колонки.Добавить("УпаковкаПаллета", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ДанныеПоРезервам.Колонки.Добавить("РаспределениеРезервов", Новый ОписаниеТипов("Массив"));
	
	Возврат ДанныеПоРезервам; 
	
КонецФункции

Процедура СоздатьНоменклатуруПартнера(ДанныеЗаполнения)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.НаименованиеПоставщика) Тогда
		НаименованиеНоменклатурыПоставщика = ДанныеЗаполнения.НаименованиеПоставщика;
	Иначе
		НаименованиеНоменклатурыПоставщика = Строка(ДанныеЗаполнения.Номенклатура) + " " + Строка(ДанныеЗаполнения.Упаковка);
	КонецЕсли;
	
	НоменклатураПоставщикаОбъект = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
	
	НоменклатураПоставщикаОбъект.Номенклатура = ДанныеЗаполнения.Номенклатура;
	НоменклатураПоставщикаОбъект.Упаковка = ДанныеЗаполнения.Упаковка;
	НоменклатураПоставщикаОбъект.Артикул = ДанныеЗаполнения.АртикулПоставщика;
	НоменклатураПоставщикаОбъект.ВладелецНоменклатуры = ДанныеЗаполнения.Партнер;
	НоменклатураПоставщикаОбъект.Владелец = ДанныеЗаполнения.Партнер;
	НоменклатураПоставщикаОбъект.НаименованиеНоменклатуры = НаименованиеНоменклатурыПоставщика;
	НоменклатураПоставщикаОбъект.Наименование = НаименованиеНоменклатурыПоставщика;
	НоменклатураПоставщикаОбъект.НаименованиеУпаковки = Строка(ДанныеЗаполнения.Упаковка);
	НоменклатураПоставщикаОбъект.НаименованиеБазовойЕдиницыИзмерения = Строка(ДанныеЗаполнения.ЕдиницаИзмерения);
	НоменклатураПоставщикаОбъект.КодОКЕИБазовойЕдиницыИзмерения = ДанныеЗаполнения.КодОКЕИ;
	НоменклатураПоставщикаОбъект.КоличествоУпаковок = 1;
	НоменклатураПоставщикаОбъект.КоличествоБазовойЕдиницыИзмерения = 1;
	НоменклатураПоставщикаОбъект.Штрихкод = ДанныеЗаполнения.Штрихкод;
	НоменклатураПоставщикаОбъект.НаименованиеПолное = НаименованиеНоменклатурыПоставщика; 
	НоменклатураПоставщикаОбъект.Идентификатор = 
		Справочники.НоменклатураКонтрагентов.ИдентификаторНоменклатурыКонтрагента(
			НаименованиеНоменклатурыПоставщика, "", НоменклатураПоставщикаОбъект.НаименованиеУпаковки);
	
	НоменклатураПоставщикаОбъект.Записать();
	
КонецПроцедуры

#Область ОбеспечениеИОтгрузкаЗаказов

Функция ТребуетсяАктуализироватьОбеспечениеЗаказаКлиента(ЗаказКлиента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат Ложь;	
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	
	ТекстУсловияЗаказКлиента = "ЛОЖЬ";
	Если ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
		Если Документы.ЗаказКлиента.бг_ЗаказПереданНаСборку(ЗаказКлиента) Тогда
			// Возможно заказ уже передан на сборку пользователем интерактивно.
			Возврат Ложь;	
		КонецЕсли;
		
		ТекстУсловияЗаказКлиента = "ЗаказКлиентаТовары.Ссылка = &Ссылка";
	ИначеЕсли ТипЗнч(ЗаказКлиента) = Тип("ДокументСсылка.битЗаявкаКлиента") Тогда	
		// Если передана заявка, то проверяем все заказы клиента по заявке.
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.бг_ЗаявкаКлиента = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Документы.ЗаказКлиента.бг_ЗаказПереданНаСборку(Выборка.Ссылка) Тогда
				// Если по заявке уже есть заказ переданный на сборку, то уже ничего не актуализируем.
				Возврат Ложь;	
			КонецЕсли;
		КонецЦикла;
		
		ТекстУсловияЗаказКлиента = "ЗаказКлиентаТовары.Ссылка.бг_ЗаявкаКлиента = &Ссылка";
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	&ТекстУсловияЗаказКлиента
	|	И ЗаказКлиентаТовары.Ссылка.Проведен
	|	И ЗаказКлиентаТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И ЗаказКлиентаТовары.Количество > 0
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияЗаказКлиента", ТекстУсловияЗаказКлиента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция ЕстьПозицииДляПередачиЗаказаКлиентаНаСборку(ЗаказКлиента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат Ложь;	
	КонецЕсли;

	Если Документы.ЗаказКлиента.бг_ЗаказПереданНаСборку(ЗаказКлиента) Тогда
		// Заказ уже передан на сборку.
		Возврат Ложь;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|	И ЗаказКлиентаТовары.Ссылка.Проведен
	|	И ЗаказКлиентаТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И ЗаказКлиентаТовары.Количество > 0
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.ВариантОбеспечения В ( 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада), 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции	

// Проверяет возможность резервирования по заказу клиента.
//  Вспмогательная процедура, вызывается перед актуализацией обеспечения и перед
//  передачей заказа на сборку.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//
Процедура ПроверитьНастройкиРезервированияПоЗаказуКлиента(ЗаказКлиента, Действие)
	
	УстановитьПривилегированныйРежим(Истина);
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	ПараметрыРезервирования = ПараметрыРезервированияЗаказаКлиента(ЗаказКлиента);

	Если Не ПараметрыРезервирования.РазрешеноРезервированиеПоДатеОтгрузки Тогда
		
		ШаблонСообщения = 
			НСтр("ru = 'По заказу %1 превышено разрешенное количество дней до отгрузки: %2 дн. %3 не выполнена.';
				 |en = 'По заказу %1 превышено разрешенное количество дней до отгрузки: %2 дн. %3 не выполнена.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента, ПараметрыРезервирования.ДнейДоОтгрузкиДляРезервирования, Действие);
			
		ВызватьИсключение ТекстСообщения;	

	КонецЕсли;
			
КонецПроцедуры
	
// Проверяет возможность отгрузки по заказу клиента.
//  Вспмогательная процедура, вызывается перед актуализацией обеспечения и перед
//  передачей заказа на сборку.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//   Действие     - Строка - описание действия для текста сообщений об ошибке
//   ПередачаВСборку - Булево - Истина, проверка выполняется перед передачей в сборку
//                              Ложь, проверка выполняется перед актуализацией обеспечения
//
Процедура ПроверитьАктуальностьОтгрузкиПоЗаказуКлиента(ЗаказКлиента, Действие, ПередачаВСборку = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		ШаблонСообщения = 
			НСтр("ru = 'Заказ клиента не выбран. %1 не выполнена.';
				 |en = 'Заказ клиента не выбран. %1 не выполнена.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, Действие);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЗаказКлиента,
			"Проведен,Статус,ДатаОтгрузки,бг_ИсточникЗаказа");
			
	ИсточникЗаказа = РеквизитыЗаказа.бг_ИсточникЗаказа;		
	Если Не РазрешенаАктуализацияОтгрузкиПоИсточникуЗаказаКлиента(ИсточникЗаказа, ПередачаВСборку) Тогда
		ШаблонСообщения = 
			НСтр("ru = '%1 загружен из источника %2. %3 не выполнена.';
				 |en = '%1 загружен из источника %2. %3 не выполнена.'",
			КодОсновногоЯзыка);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента, ИсточникЗаказа, Действие);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	Если ПередачаВСборку И ЭтоЗаказРозничногоПокупателя(ЗаказКлиента) Тогда
		ШаблонСообщения = 
			НСтр("ru = '%1 является заказом розничного покупателя. %2 не выполнена.';
				 |en = '%1 является заказом розничного покупателя. %2 не выполнена.'",
			КодОсновногоЯзыка);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента, Действие);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	Если Не РеквизитыЗаказа.Проведен Тогда
		ШаблонСообщения = 
			НСтр("ru = '%1 не проведен. %2 не выполнена.';
				 |en = '%1 не проведен. %2 не выполнена.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента, Действие);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
	Если РеквизитыЗаказа.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда	
		ШаблонСообщения = 
			НСтр("ru = '%1 не согласован. %2 не выполнена.';
				 |en = '%1 не согласован. %2 не выполнена.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, ЗаказКлиента, Действие);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;

	Если РеквизитыЗаказа.ДатаОтгрузки < НачалоДня(ТекущаяДатаСеанса()) Тогда	
		ШаблонСообщения = 
			НСтр("ru = '%1 дата отгрузки %2 меньше текщей даты %3. %4 не выполнена.';
				 |en = '%1 дата отгрузки %2 меньше текщей даты %3. %4 не выполнена.'",
			КодОсновногоЯзыка);

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				ЗаказКлиента, 
				Формат(РеквизитыЗаказа.ДатаОтгрузки, "ДФ=dd.MM.yyyy"),
				Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy"),
				Действие);
			
		ВызватьИсключение ТекстСообщения;	
	КонецЕсли;
	
КонецПроцедуры

Функция РазрешенаАктуализацияОтгрузкиПоИсточникуЗаказаКлиента(ИсточникЗаказа, ПередачаВСборку)
	
	// Логика:
	//   - Интернет-заказы нельзя ни актуализировать ни передавать на сборку.
	//   - Консолидированные заказы нельзя актуализировать, но можно передавать на сборку.
	
	Возврат ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS 
			И (ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED 
					Или ПередачаВСборку); 
	
КонецФункции

// Обновляет обеспечение в заказе клиента в строках с действием "К обеспечению"
// по новым данным о доступности товаров.
// 
//
Процедура ОбновитьОбеспечениеЗаказаКлиента(ПараметрыЗаполнения, ТоварыЗаказКлиента)
	
	Если ЗаказКлиентаФормируетсяПоЗаявкеКлиента(ПараметрыЗаполнения.ИсточникЗаказа) Тогда
		Документы.битЗаявкаКлиента.ОбновитьОбеспечениеЗаказовПоЗаявкиКлиента(ПараметрыЗаполнения, ТоварыЗаказКлиента);
	Иначе	
	    РезультатОбработки = ОбработатьЗаказКлиента(ПараметрыЗаполнения, ТоварыЗаказКлиента, Истина);
		Если РезультатОбработки.ЕстьОшибкиПроведения Тогда
			ВызватьИсключение РезультатОбработки.ТекстОшибки;	
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры	

// Отменяет необеспеченные позиции в заказе клиента.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//
Процедура ОтменитьНеобеспеченныеПозицииЗаказаКлиента(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат;
	КонецЕсли;
	
   	ДокументОбъект = ЗаказКлиента.ПолучитьОбъект();
	
	НадоЗаписатьЗаказ = Ложь;
	Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		Если СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению 
			И Не СтрокаТЧ.Отменено Тогда
			СтрокаТЧ.Отменено = Истина;
			СтрокаТЧ.ПричинаОтмены = бг_КонстантыПовтИсп.ЗначениеКонстанты("ПричинаОтменыНетДоступныхОстатков");
			НадоЗаписатьЗаказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НадоЗаписатьЗаказ Тогда
		Возврат;
	КонецЕсли;

	РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось провести документ %1 после отмены необеспеченных позиций.';
								           |en = 'Не удалось провести документ %1 после отмены необеспеченных позиций.'");
	Иначе
		ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось записать документ %1 после отмены необеспеченных позиций.';
								           |en = 'Не удалось записать документ %1 после отмены необеспеченных позиций.'");
	КонецЕсли;	
	
	ЗаписатьЗаказКлиентаВИБ(ДокументОбъект, РежимЗаписи, ТекстСообщенияВСлучаеОшибки);
	
КонецПроцедуры

// Устанавливает действие "Отгрузить" по обеспеченным позициям в заказе клиента.
//
//  Параметры:
//   ЗаказКлиента - ДокументСсылка.ЗаказКлиента - ссылка на заказ клиента 
//   ОтменитьНеобеспеченныеПозиции - Булево -
//                        Истина - отменить необеспеченные позиции
//                        Ложь   - не отменять
//
//
Процедура ПодготовитьКОтгрузкеЗаказКлиента(ЗаказКлиента, ОтменитьНеобеспеченныеПозиции = Ложь)

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ЗаказКлиента) Тогда
		Возврат;
	КонецЕсли;
	
   	ДокументОбъект = ЗаказКлиента.ПолучитьОбъект();
	
	НадоЗаписатьЗаказ = Ложь;
	Для каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
		Если СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада 
			И Не СтрокаТЧ.Отменено Тогда
			СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить;
			НадоЗаписатьЗаказ = Истина;
		КонецЕсли;
		Если ОтменитьНеобеспеченныеПозиции
			И СтрокаТЧ.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению 
			И Не СтрокаТЧ.Отменено Тогда
			СтрокаТЧ.Отменено = Истина;
			СтрокаТЧ.ПричинаОтмены = бг_КонстантыПовтИсп.ЗначениеКонстанты("ПричинаОтменыНетДоступныхОстатков");
			НадоЗаписатьЗаказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не НадоЗаписатьЗаказ Тогда
		Возврат;
	КонецЕсли;
	
	ПланированиеОтгрузокБезУказанияСерий = Ложь;
	Если ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
		ПланированиеОтгрузокБезУказанияСерий = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "бг_РазрешитьПланированиеОтгрузокБезУказанияСерий");
	КонецЕсли;		
	
	Если Не ПланированиеОтгрузокБезУказанияСерий Тогда
		// Заполним серии номенклатуры.
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект,
			Документы.ЗаказКлиента));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		
		Если бг_Номенклатура.ЕстьСтрокиДляЗаполненияСерийПоFIFO(ДокументОбъект.Товары) Тогда
			бг_Номенклатура.ЗаполнитьСерииПоДатеПроизводстваВТЧТовары(ДокументОбъект, ПараметрыУказанияСерий);
	    КонецЕсли;
	КонецЕсли;
	
	РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось провести документ %1 после подготовки к отгрузке.';
								           |en = 'Не удалось провести документ %1 после подготовки к отгрузке.'");
	Иначе
		ТекстСообщенияВСлучаеОшибки = НСтр("ru = 'Не удалось записать документ %1 после подготовки к отгрузке.';
								           |en = 'Не удалось записать документ %1 после подготовки к отгрузке.'");
	КонецЕсли;	
	
	ЗаписатьЗаказКлиентаВИБ(ДокументОбъект, РежимЗаписи, ТекстСообщенияВСлучаеОшибки);
	
КонецПроцедуры	

// Возвращает признак - есть ли в заказе клиента товарные позиции к отгрузке.
//
Функция ЕстьСтрокиКОтгрузкеВЗаказеКлиента(ЗаказКлиента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И ЗаказКлиентаТовары.Количество > 0
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции	

Процедура ЗаписатьЗаказКлиентаВИБ(ДокументОбъект, РежимЗаписи, ТекстСообщенияВСлучаеОшибки)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект,
		Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ДокументОбъект, "Товары");
	ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ДокументОбъект);

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		ТекстСообщенияНекорректногоЗаполнения = 
				НСтр("ru = 'Не заполнены все реквизиты, обязательные к заполнению.';
					 |en = 'Не заполнены все реквизиты, обязательные к заполнению.'");
		бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(
				ТекстСообщенияНекорректногоЗаполнения);
		ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки, ДокументОбъект) 
				+ Символы.ПС 
				+ ТекстСообщенияНекорректногоЗаполнения;
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	НетВнешнейТранзакции = Не ТранзакцияАктивна();
	Если НетВнешнейТранзакции Тогда
		НачатьТранзакцию();	
	КонецЕсли;	
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);	
		
		Если НетВнешнейТранзакции Тогда
			ЗафиксироватьТранзакцию();	
		КонецЕсли;	
	Исключение
		Если НетВнешнейТранзакции Тогда
			ОтменитьТранзакцию();	
		КонецЕсли;	
		
		ТекстСообщения = СтрШаблон(ТекстСообщенияВСлучаеОшибки, ДокументОбъект) + 
			Символы.ПС + 
			НСтр("ru = 'По причине: '; en = 'По причине: '") +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Если Не РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	КонецЕсли;

КонецПроцедуры

// Возвращает максимальное количество часов до отгрузки (передачи на сборку) заказа клиента,
// установленное в настройках автоматической передачи заказов на сборку.
//
Функция МаксимальноеКоличествоЧасовДоОтгрузки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаксЧасовДоОтгрузки = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку.КоличествоЧасовДоОтгрузки) КАК КоличествоЧасовДоОтгрузки
	|ИЗ
	|	РегистрСведений.бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку КАК бг_НастройкиАвтоматическойПередачиЗаказовКлиентовНаСборку";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.КоличествоЧасовДоОтгрузки) Тогда
			МаксЧасовДоОтгрузки = Выборка.КоличествоЧасовДоОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МаксЧасовДоОтгрузки;
	
КонецФункции	

Процедура СортироватьТоварыЗаказаКлиентаПоНоменклатуре(Товары, ДанныеЗаполнения)
	
	// По умолчанию при формировании заказов сортируем номенклатуру в строках по алфавиту. 
	ВыполнятьСортировку = Истина;
	
	Контрагент = Неопределено;
	ДанныеЗаполнения.Свойство("Контрагент", Контрагент);
	Если ЗначениеЗаполнено(Контрагент)
		И бг_КонстантыПовтИсп.ЗначениеКонстанты("СохранятьИсходныйПорядокСтрокВЗаказах", Контрагент) Тогда
		ВыполнятьСортировку = Ложь;
	КонецЕсли;
	
	Если ВыполнятьСортировку Тогда
		Товары.Сортировать("Номенклатура ВОЗР");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказРозничногоПокупателя

Функция ДанныеЗаполненияЗаказаМагазина(ЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	Запрос.УстановитьПараметр("ЭтоАлкогольнаяПродажа", бг_УчетАлкоголя.ПродажаАлкогольнойПродукции(ЗаказКлиента));
	Запрос.УстановитьПараметр("Настройка", Справочники.бг_creatio_НастройкиОбмена.ДействующаяНастройкаОбмена());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.Ссылка КАК Ссылка,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.НомерСтроки КАК НомерСтроки,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.Договор КАК Договор,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.Организация КАК Организация,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.ВидЦен КАК ВидЦен,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.ВариантОплаты КАК ВариантОплаты,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.ЭтоАлкогольнаяПродажа КАК ЭтоАлкогольнаяПродажа
	|ПОМЕСТИТЬ ДанныеЗаполненияДоговоров
	|ИЗ
	|	Справочник.бг_creatio_НастройкиОбмена.ДанныеЗаполненияДоговоров КАК бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров
	|ГДЕ
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияДоговоров.Ссылка = &Настройка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияЛицензий.Ссылка КАК Ссылка,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияЛицензий.НомерСтроки КАК НомерСтроки,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияЛицензий.Контрагент КАК Контрагент,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияЛицензий.Лицензия КАК Лицензия
	|ПОМЕСТИТЬ ДанныеЗаполненияЛицензий
	|ИЗ
	|	Справочник.бг_creatio_НастройкиОбмена.ДанныеЗаполненияЛицензий КАК бг_creatio_НастройкиОбменаДанныеЗаполненияЛицензий
	|ГДЕ
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияЛицензий.Ссылка = &Настройка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияПунктовНазначения.Ссылка КАК Ссылка,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияПунктовНазначения.НомерСтроки КАК НомерСтроки,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияПунктовНазначения.Контрагент КАК Контрагент,
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияПунктовНазначения.ПунктНазначения КАК ПунктНазначения
	|ПОМЕСТИТЬ ДанныеЗаполненияПунктовНазначения
	|ИЗ
	|	Справочник.бг_creatio_НастройкиОбмена.ДанныеЗаполненияПунктовНазначения КАК бг_creatio_НастройкиОбменаДанныеЗаполненияПунктовНазначения
	|ГДЕ
	|	бг_creatio_НастройкиОбменаДанныеЗаполненияПунктовНазначения.Ссылка = &Настройка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиента.бг_Магазин КАК Контрагент,
	|	ЗаказКлиента.бг_Магазин.Партнер КАК Партнер,
	|	ЗаказКлиента.Контрагент КАК бг_РозничныйПокупатель,
	|	ЗаказКлиента.Договор КАК бг_ДоговорРозничногоПокупателя,
	|	ЗаказКлиента.Ссылка КАК бг_ЗаказРозничногоПокупателя,
	|	ЗаказКлиента.бг_Магазин КАК Грузополучатель,
	|	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиента.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ЗаказКлиента.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ЕСТЬNULL(ДанныеЗаполненияДоговоров.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЕСТЬNULL(ДанныеЗаполненияЛицензий.Лицензия, ЗНАЧЕНИЕ(Справочник.ЛицензииПоставщиковАлкогольнойПродукции.ПустаяСсылка)) КАК бг_Лицензия,
	|	ЕСТЬNULL(ДанныеЗаполненияПунктовНазначения.ПунктНазначения, ЗНАЧЕНИЕ(Справочник.битПунктыНазначения.ПустаяСсылка)) КАК бг_ПунктНазначения,
	|	ЕСТЬNULL(ДанныеЗаполненияДоговоров.Договор.бг_Соглашение, ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)) КАК Соглашение
	|ПОМЕСТИТЬ ДанныеШапки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗаполненияДоговоров КАК ДанныеЗаполненияДоговоров
	|		ПО ЗаказКлиента.Организация = ДанныеЗаполненияДоговоров.Организация
	|			И ЗаказКлиента.Соглашение.ВидЦен = ДанныеЗаполненияДоговоров.ВидЦен
	|			И (ВЫБОР
	|				КОГДА ДанныеЗаполненияДоговоров.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыОплаты.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЗаказКлиента.бг_ВариантОплаты = ДанныеЗаполненияДоговоров.ВариантОплаты
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ДанныеЗаполненияДоговоров.ЭтоАлкогольнаяПродажа = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыОплаты.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ДанныеЗаполненияДоговоров.ЭтоАлкогольнаяПродажа = &ЭтоАлкогольнаяПродажа
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗаполненияПунктовНазначения КАК ДанныеЗаполненияПунктовНазначения
	|		ПО ЗаказКлиента.бг_Магазин = ДанныеЗаполненияПунктовНазначения.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗаполненияЛицензий КАК ДанныеЗаполненияЛицензий
	|		ПО ЗаказКлиента.бг_Магазин = ДанныеЗаполненияЛицензий.Контрагент
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШапки.Соглашение.бг_ПрименятьСкидкиПриТрансфертнойПродаже КАК ПрименятьСкидки,
	|	ЗаказКлиентаТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказКлиентаТовары.Ссылка КАК бг_ЗаказКлиентаИсточникОбеспечения,
	|	ЗаказКлиентаТовары.ДатаОтгрузки КАК бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения,
	|	ЗаказКлиентаТовары.бг_ЗаказПоставщикуИсточникОбеспечения КАК бг_ЗаказПоставщикуИсточникОбеспечения,
	|	ЗаказКлиентаТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказКлиентаТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказКлиентаТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказКлиентаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ЗаказКлиентаТовары.бг_КоличествоКоробок КАК бг_КоличествоКоробок,
	|	ЗаказКлиентаТовары.бг_КоличествоПаллет КАК бг_КоличествоПаллет,
	|	ЗаказКлиентаТовары.бг_УпаковкаПаллета КАК бг_УпаковкаПаллета,
	|	ЗаказКлиентаТовары.Количество КАК Количество,
	|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеТоваров
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары,
	|	ДанныеШапки КАК ДанныеШапки
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	бг_ТранспортнаяИнформация.Объект КАК Объект,
	|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС,
	|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиПо КАК ПлановаяДатаДоставкиПо
	|ПОМЕСТИТЬ ТранспортнаяИнформация
	|ИЗ
	|	РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
	|ГДЕ
	|	бг_ТранспортнаяИнформация.Объект = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШапки.бг_ДоговорРозничногоПокупателя КАК бг_ДоговорРозничногоПокупателя,
	|	ДанныеШапки.бг_ЗаказРозничногоПокупателя КАК бг_ЗаказРозничногоПокупателя,
	|	ДанныеШапки.бг_Лицензия КАК бг_Лицензия,
	|	ДанныеШапки.бг_ПунктНазначения КАК бг_ПунктНазначения,
	|	ДанныеШапки.бг_РозничныйПокупатель КАК бг_РозничныйПокупатель,
	|	ДанныеШапки.Грузополучатель КАК Грузополучатель,
	|	ДанныеШапки.Договор КАК Договор,
	|	ДанныеШапки.Контрагент КАК Контрагент,
	|	ДанныеШапки.Партнер КАК Партнер,
	|	ДанныеШапки.Соглашение КАК Соглашение,
	|	ДанныеШапки.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ВремяДоставкиПо = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТранспортнаяИнформация.ПлановаяДатаДоставкиПо
	|		ИНАЧЕ ДанныеШапки.ВремяДоставкиПо
	|	КОНЕЦ КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ВремяДоставкиС = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ТранспортнаяИнформация.ПлановаяДатаДоставкиС
	|		ИНАЧЕ ДанныеШапки.ВремяДоставкиС
	|	КОНЕЦ КАК ВремяДоставкиС
	|ИЗ
	|	ДанныеШапки КАК ДанныеШапки,
	|	ТранспортнаяИнформация КАК ТранспортнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТоваров.КлючСвязи КАК КлючСвязи,
	|	ДанныеТоваров.бг_ЗаказКлиентаИсточникОбеспечения КАК бг_ЗаказКлиентаИсточникОбеспечения,
	|	ДанныеТоваров.бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения КАК бг_ДатаОтгрузкиЗаказаКлиентаИсточникаОбеспечения,
	|	ДанныеТоваров.бг_ЗаказПоставщикуИсточникОбеспечения КАК бг_ЗаказПоставщикуИсточникОбеспечения,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеТоваров.ПрименятьСкидки
	|				ИЛИ ДанныеТоваров.ПроцентРучнойСкидки + ДанныеТоваров.ПроцентАвтоматическойСкидки < 0
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеТоваров.ПроцентРучнойСкидки + ДанныеТоваров.ПроцентАвтоматическойСкидки
	|	КОНЕЦ КАК ПроцентРучнойСкидки,
	|	ВЫБОР
	|		КОГДА НЕ ДанныеТоваров.ПрименятьСкидки
	|				ИЛИ ДанныеТоваров.СуммаРучнойСкидки + ДанныеТоваров.СуммаАвтоматическойСкидки < 0
	|			ТОГДА 0
	|		ИНАЧЕ ДанныеТоваров.СуммаРучнойСкидки + ДанныеТоваров.СуммаАвтоматическойСкидки
	|	КОНЕЦ КАК СуммаРучнойСкидки,
	|	ДанныеТоваров.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ДанныеТоваров.ВариантОбеспечения КАК ВариантОбеспечения
	|ИЗ
	|	ДанныеТоваров КАК ДанныеТоваров";
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ДанныеЗаказа = ОбменДаннымиСлужебный.РезультатЗапросаВСтруктуру(Результаты[Результаты.Количество() - 2]);
	ДанныеЗаказа.Вставить("Товары", Результаты[Результаты.Количество() - 1].Выгрузить());
	
	Возврат ДанныеЗаказа;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьТоварыЗаказаМагазина(ЗаказОбъект, ДанныеЗаказа)
	
	Для Каждого СтрокаТовары Из ЗаказОбъект.Товары Цикл
		
		СтрокаДанных = ДанныеЗаказа.Найти(СтрокаТовары.КлючСвязи, "КлючСвязи");
		Если СтрокаДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(
				СтрокаТовары, 
				СтрокаДанных,
				,
				"КлючСвязи");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСозданиеЗаказаМагазинаДляОтложеннойОбработки(ЗаказКлиента)
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "Организация");
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("СоздаватьЗаказыМагазина", Организация) Тогда
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			ЗаказКлиента,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СоздатьЗаказМагазина);
	КонецЕсли;
	
КонецПроцедуры

Функция ЕстьНеобеспеченныеПозицииВЗаказе(ЗаказКлиента) Экспорт
	
	ВариантыОбеспечения = Новый Массив;
	ВариантыОбеспечения.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);
	ВариантыОбеспечения.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|	И НЕ ЗаказКлиентаТовары.ВариантОбеспечения В (&ВариантыОбеспечения)
	|	И НЕ ЗаказКлиентаТовары.Отменено";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	Запрос.УстановитьПараметр("ВариантыОбеспечения", ВариантыОбеспечения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

Функция СоздаватьЗаказПоДатеОтгрузки(ЗначенияРеквизитовЗаказа)
	
	СледующийРабочийДень = КалендарныеГрафики.ДатаПоКалендарю(КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(), 
		ТекущаяДатаСеанса(), 1);
	Возврат ЗначенияРеквизитовЗаказа.ДатаОтгрузки <= СледующийРабочийДень;
	
КонецФункции

Функция ДоступноСозданиеМагазина(ЗаказКлиента, ЗначенияРеквизитовЗаказа)
	
	Результат = Новый Структура;
	Результат.Вставить("УсловияВыполнены", Истина);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитовЗаказа.бг_Магазин) Тогда
		Результат.Вставить("УсловияВыполнены", Ложь);
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'В заказе не указан магазин'"));

	ИначеЕсли ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание() <> Неопределено 
		И Не СоздаватьЗаказПоДатеОтгрузки(ЗначенияРеквизитовЗаказа) Тогда
		Результат.Вставить("УсловияВыполнены", Ложь);
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Дата отгрузки в заказе не равна текущей дате'"));

	ИначеЕсли ЕстьНеобеспеченныеПозицииВЗаказе(ЗаказКлиента) Тогда
		Результат.Вставить("УсловияВыполнены", Ложь);
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'В заказе есть необеспеченные позиции'"));

	ИначеЕсли Не РегистрыСведений.бг_СогласованиеЗаказовКлиентов.ЗаказСогласован(ЗаказКлиента) Тогда
		Результат.Вставить("УсловияВыполнены", Ложь);
		Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'Заказ не согласован'"));

	Иначе
		ЗаказМагазина = НайтиЗаказМагазина(ЗаказКлиента);
		Если ЗначениеЗаполнено(ЗаказМагазина) Тогда
			Результат.Вставить("УсловияВыполнены", Ложь);
			Результат.Вставить("ОписаниеОшибки", НСтр("ru = 'По заказу клиента уже создан заказ магазина'"));
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак, все ли строки в заказе клиента, отменены
//
// Параметры:
//  ЗаказКлиента - ДокументСсылка.ЗаказКлиента - заказ клиента
// 
// Возвращаемое значение:
//  Булево - Возвращает признак, все ли строки в заказе клиента, отменены.
//
//
Функция ВсеСтрокиВЗаказеОтменены(ЗаказКлиента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.Отменено КАК Отменено
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И НЕ ЗаказКлиентаТовары.Отменено";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Результат = Запрос.Выполнить();

	Возврат Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область ЗаказМагазина

#КонецОбласти

// Возвращает количество серий, которое можно учесть при распределениикртано коробам
//  Вспомогательная функция вызывается из алгоритмов передачи в сборку заказанного количества 
//  товаров на доступные остатки. 
//
// Параметры:
// ОсталосьРаспределить - Число
// КоличествоОстаток - Число
// ПравилоОкругления - ПеречисленияСсылка.бг_ПравилаОкругленияДоКороба
// Номенклатура - СправочникСсылка.Номенклатура
// УпаковкаПаллета - СправочникСсылка.УпаковкиЕдиницыИзмерения
// 
// Возвращаемое значение:
//   - Количество -Число
Функция МожноРаспределитьСерииКратноКоробам(ОсталосьРаспределить, 
															КоличествоОстаток, 
															ПравилоОкругления, 
															Номенклатура, 
															УпаковкаПаллета = Неопределено) Экспорт 
															
	МожноРаспределить = Мин(ОсталосьРаспределить, КоличествоОстаток);
	МожноРаспределить = Цел(МожноРаспределить);
	МожноРаспределитьСУчетомПравила = 0;
	
	Если МожноРаспределить <= 0
		Или Не ВозможенРасчетПоПравилуОкругления(Номенклатура, ПравилоОкругления) Тогда
		Возврат МожноРаспределитьСУчетомПравила;	
	КонецЕсли;														
	
	КоэффициентКоробки = 1;
	Коробка = Неопределено;
	Если ЗначениеЗаполнено(УпаковкаПаллета) Тогда
		Коробка = бг_Номенклатура.КоробкаПаллеты(УпаковкаПаллета, КоэффициентКоробки);		 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Коробка) Тогда
		Коробка = бг_Номенклатура.КоробкаНоменклатуры(Номенклатура, КоэффициентКоробки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Коробка) 
		Или КоэффициентКоробки <= 0 Тогда
		Возврат МожноРаспределитьСУчетомПравила;	
	КонецЕсли;														
	
	МожноРаспределитьКратноКоробкам = Цел(МожноРаспределить / КоэффициентКоробки) * КоэффициентКоробки;
	
	Если МожноРаспределитьКратноКоробкам > 0 Тогда
		МожноРаспределитьСУчетомПравила = МожноРаспределитьКратноКоробкам;
	КонецЕсли;
	
	Возврат МожноРаспределитьСУчетомПравила;

КонецФункции

#КонецОбласти

