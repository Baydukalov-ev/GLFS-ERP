#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка) Экспорт
	
	ИмяПредопределенногоРодителя = Неопределено;
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьЗагрузкуНоменклатуры_ТРИМ") Тогда
		Если СтруктураОбъекта.Свойство("бг_ВидНоменклатурыСтрока")
			И ЗначениеЗаполнено(СтруктураОбъекта.бг_ВидНоменклатурыСтрока)
			И (СтруктураОбъекта.бг_ВидНоменклатурыСтрока = "Запчасти_ТРИМ"
				Или СтруктураОбъекта.бг_ВидНоменклатурыСтрока = "Инструмент_ТРИМ"
				Или СтруктураОбъекта.бг_ВидНоменклатурыСтрока = "ГСМ_ТРИМ"
				Или СтруктураОбъекта.бг_ВидНоменклатурыСтрока = "МатериалыРасходные_ТРИМ") Тогда
			//Это загрузка из ТОиР
			СтандартнаяОбработка = Ложь;
			ЗагрузитьНоменклатуруИзТОиР(ЗагружаемыйОбъект, СтруктураОбъекта);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если СтруктураОбъекта.ВидНоменклатуры = "ЕК_POSM" Тогда
		ЭтоИсточникЕК_POSM = Истина;
		ИмяПредопределенногоРодителя = "ЕК";
	Иначе
		ЭтоИсточникЕК_POSM = Ложь;
	КонецЕсли;
	
	Если СтруктураОбъекта.ВидНоменклатуры = "Алкогольная продукция"
		Или СтруктураОбъекта.ВидНоменклатуры = "Безалкогольная продукция"
		Или СтруктураОбъекта.ВидНоменклатуры = "Товары Ридель" Тогда
		ЭтоИсточникЕК_Номенклатура = Истина;
		ИмяПредопределенногоРодителя = "ЕК";
	Иначе
		ЭтоИсточникЕК_Номенклатура = Ложь;
	КонецЕсли;
	
	Если бг_ОбщегоНазначенияСервер.ОтменитьЗагрузкуОбъекта(ЗагружаемыйОбъект, СтруктураОбъекта, Неопределено, ИмяПредопределенногоРодителя, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаяСвойства = бг_ОбщегоНазначенияСервер.СуммаСписков(ИсключаяСвойства, бг_ОбщегоНазначенияСервер.СуществующиеСвойства(СтруктураОбъекта, "Родитель"), Ложь);
	
	Если ЗагружаемыйОбъект.ЭтоНовый() Тогда
		ЗагружаемыйОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	Если ЭтоИсточникЕК_POSM Тогда
		
		ЭтоИсточникЕК_POSM = Истина;
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("ЭтоИсточникЕК_POSM", Истина);
		
		РеквизитыЕК_POSM = Новый Структура;
		РеквизитыЕК_POSM.Вставить("КоличествоБазовойЕдИзмВЕдИзмМест", СтруктураОбъекта.КоличествоБазовойЕдИзмВЕдИзмМест);
		РеквизитыЕК_POSM.Вставить("Длина", СтруктураОбъекта.Длина);
		РеквизитыЕК_POSM.Вставить("Ширина", СтруктураОбъекта.Ширина);
		РеквизитыЕК_POSM.Вставить("Высота", СтруктураОбъекта.Высота);
		РеквизитыЕК_POSM.Вставить("ВесБазовойЕдиницы", СтруктураОбъекта.ВесБазовойЕдиницы);
		РеквизитыЕК_POSM.Вставить("ДлинаЕдИзмМест", СтруктураОбъекта.ДлинаЕдИзмМест);
		РеквизитыЕК_POSM.Вставить("ШиринаЕдИзмМест", СтруктураОбъекта.ШиринаЕдИзмМест);
		РеквизитыЕК_POSM.Вставить("ВысотаЕдИзмМест", СтруктураОбъекта.ВысотаЕдИзмМест);
		РеквизитыЕК_POSM.Вставить("ВесЕдИзмМест", СтруктураОбъекта.ВесЕдИзмМест);
		РеквизитыЕК_POSM.Вставить("КоличествоСлоевВПаллете", СтруктураОбъекта.КоличествоСлоевВПаллете);
		РеквизитыЕК_POSM.Вставить("КоличествоМестВСлое", СтруктураОбъекта.КоличествоМестВСлое);
		РеквизитыЕК_POSM.Вставить("ВесПалеты", СтруктураОбъекта.ВесПалеты);
		РеквизитыЕК_POSM.Вставить("КоличествоМестВПаллете", СтруктураОбъекта.КоличествоМестВПаллете);
		РеквизитыЕК_POSM.Вставить("КоличествоБазовойЕдИзмВПаллете", СтруктураОбъекта.КоличествоБазовойЕдИзмВПаллете);
		РеквизитыЕК_POSM.Вставить("ВысотаПалеты", СтруктураОбъекта.ВысотаПалеты);
		
	Иначе
		ЭтоИсточникЕК_POSM = Ложь;
	КонецЕсли;
	
	Если СтруктураОбъекта.ВидНоменклатуры = Неопределено Тогда
		ЗагружаемыйОбъект.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		СтруктураОбъекта.ВидНоменклатуры = ЗагружаемыйОбъект.ВидНоменклатуры;
	Иначе
		
		Если ТипЗнч(СтруктураОбъекта.ВидНоменклатуры) = Тип("Строка") Тогда
			
			Если ЭтоИсточникЕК_POSM
				И СтруктураОбъекта.ЧестныйЗнак Тогда
				НаименованиеВидаНоменклатуры = НаименованиеВидаНоменклатуры(СтруктураОбъекта.ВидНоменклатуры + " Честный знак");
			Иначе
				НаименованиеВидаНоменклатуры = НаименованиеВидаНоменклатуры(СтруктураОбъекта.ВидНоменклатуры);
			КонецЕсли;
			
			СтруктураОбъектаВидНоменклатуры = Новый Структура(
				"ПолноеИмя, Наименование",
				"Справочник.ВидыНоменклатуры",
				НаименованиеВидаНоменклатуры);
			
			ВидНоменклатуры = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(СтруктураОбъектаВидНоменклатуры, "Наименование");
			
		Иначе
			
			ВидНоменклатуры = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(
				СтруктураОбъекта.ВидНоменклатуры,
				"Наименование",
				НаименованиеВидаНоменклатуры(СтруктураОбъекта.ВидНоменклатуры.Наименование));
			
		КонецЕсли;
		
		Если ВидНоменклатуры <> Неопределено Тогда
			ЗагружаемыйОбъект.ВидНоменклатуры = ВидНоменклатуры;
			СтруктураОбъекта.ВидНоменклатуры = ЗагружаемыйОбъект.ВидНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ЗагружаемыйОбъект);
	
	Если СтруктураОбъекта.КодТНВЭД = Неопределено Тогда
		ЗагружаемыйОбъект.КодТНВЭД = Справочники.КлассификаторТНВЭД.ПустаяСсылка();
		СтруктураОбъекта.КодТНВЭД = ЗагружаемыйОбъект.КодТНВЭД;
	Иначе
		
		КодТНВЭД = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(СтруктураОбъекта.КодТНВЭД, "Код");
		
		Если КодТНВЭД <> Неопределено Тогда
			ЗагружаемыйОбъект.КодТНВЭД = КодТНВЭД;
			СтруктураОбъекта.КодТНВЭД = ЗагружаемыйОбъект.КодТНВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоИсточникЕК_POSM Тогда
		
		Если СтруктураОбъекта.ЕдиницаИзмерения = Неопределено Тогда
			ЗагружаемыйОбъект.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			ЗагружаемыйОбъект.ЕдиницаДляОтчетов = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			СтруктураОбъекта.ЕдиницаИзмерения = ЗагружаемыйОбъект.ЕдиницаИзмерения;
		Иначе
			
			ЕдиницаИзмерения = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(
				СтруктураОбъекта.ЕдиницаИзмерения,
				"Код",
				, //ЗначениеКлюча
				"ТаблицаДанных.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)");
			
			Если ЕдиницаИзмерения <> Неопределено Тогда
				ЗагружаемыйОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
				ЗагружаемыйОбъект.ЕдиницаДляОтчетов = ЕдиницаИзмерения;
				СтруктураОбъекта.ЕдиницаИзмерения = ЗагружаемыйОбъект.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗагружаемыйОбъект.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20);
		
		СтруктураОбъекта.Вставить("Марка", СтруктураОбъекта.Бренд);
		СтруктураОбъекта.Вставить("бг_ЕК_СУМ", СтруктураОбъекта.ЕК_СУМ);
		
		ЗагружаемыйОбъект.ИспользоватьУпаковки = Истина;
		ЗагружаемыйОбъект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
		
		РеквизитыЕК_POSM.Вставить("БазоваяЕдиницаИзмерения", ЗагружаемыйОбъект.ЕдиницаИзмерения);
		
		Если СтруктураОбъекта.ЕдиницаИзмеренияМест = Неопределено Тогда
			ЕдиницаИзмеренияМест = Неопределено;
		Иначе
			ЕдиницаИзмеренияМест = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(
				СтруктураОбъекта.ЕдиницаИзмеренияМест,
				"Код",
				, //ЗначениеКлюча
				"ТаблицаДанных.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)");
		КонецЕсли;
		
		РеквизитыЕК_POSM.Вставить("ЕдиницаИзмеренияМест", ЕдиницаИзмеренияМест);
		
		СтруктураОбъектаПаллета = Новый Структура(
			"ПолноеИмя, Код",
			"Справочник.УпаковкиЕдиницыИзмерения",
			бг_УпаковкиЕдиницыИзмеренияИнтеграция.КодПаллеты());
		
		Паллета = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(
			СтруктураОбъектаПаллета,
			"Код",
			, //ЗначениеКлюча
			"ТаблицаДанных.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)");
		
		РеквизитыЕК_POSM.Вставить("Паллета", Паллета);
		
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("РеквизитыЕК_POSM", РеквизитыЕК_POSM);
		
	Иначе
		
		ЗагружаемыйОбъект.Описание = СтруктураОбъекта.ДополнительноеОписаниеНоменклатуры;
		
		Если ЗначениеЗаполнено(СтруктураОбъекта.СтавкаНДС.ЗначениеПеречисления) Тогда
			ЗагружаемыйОбъект.СтавкаНДС = УчетНДСРФКлиентСерверПовтИсп.СтавкаНДСПоЗначениюПеречисления(Перечисления.СтавкиНДС[СтруктураОбъекта.СтавкаНДС.ЗначениеПеречисления]);
		Иначе
			ЗагружаемыйОбъект.СтавкаНДС = Справочники.СтавкиНДС.ПустаяСсылка();
		КонецЕсли;
		
		СтруктураОбъекта.СтавкаНДС = ЗагружаемыйОбъект.СтавкаНДС;
		
		Если СтруктураОбъекта.ЕдиницаИзмерения = Неопределено Тогда
			ЗагружаемыйОбъект.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			СтруктураОбъекта.ЕдиницаИзмерения = ЗагружаемыйОбъект.ЕдиницаИзмерения;
		Иначе
			
			ЕдиницаИзмерения = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(
				СтруктураОбъекта.ЕдиницаИзмерения,
				"Код",
				, //ЗначениеКлюча
				"ТаблицаДанных.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)");
			
			Если ЕдиницаИзмерения <> Неопределено Тогда
				ЗагружаемыйОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
				СтруктураОбъекта.ЕдиницаИзмерения = ЗагружаемыйОбъект.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураОбъекта.ЕдиницаДляОтчетов = Неопределено Тогда
			ЗагружаемыйОбъект.ЕдиницаДляОтчетов = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			СтруктураОбъекта.ЕдиницаДляОтчетов = ЗагружаемыйОбъект.ЕдиницаДляОтчетов;
		Иначе
			
			ЕдиницаДляОтчетов = бг_ОбщегоНазначенияСервер.СсылкаНаКлассификатор(
				СтруктураОбъекта.ЕдиницаДляОтчетов,
				"Код",
				, //ЗначениеКлюча
				"ТаблицаДанных.Владелец = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.БазовыеЕдиницыИзмерения)");
			
			Если ЕдиницаДляОтчетов <> Неопределено Тогда
				ЗагружаемыйОбъект.ЕдиницаДляОтчетов = ЕдиницаДляОтчетов;
				СтруктураОбъекта.ЕдиницаДляОтчетов = ЗагружаемыйОбъект.ЕдиницаДляОтчетов;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивПроверяемыхРеквизитовБлокировки(МетаданныеОбъекта, МассивПроверяемыхРеквизитов, СтандартнаяОбработка) Экспорт
	
	МассивПроверяемыхРеквизитов.Добавить("Предопределенный");
	МассивПроверяемыхРеквизитов.Добавить("ПометкаУдаления");
	МассивПроверяемыхРеквизитов.Добавить("Код");
	МассивПроверяемыхРеквизитов.Добавить("Наименование");
	МассивПроверяемыхРеквизитов.Добавить("ВидНоменклатуры");
	МассивПроверяемыхРеквизитов.Добавить("НаименованиеПолное");
	МассивПроверяемыхРеквизитов.Добавить("Описание");
	МассивПроверяемыхРеквизитов.Добавить("КодТНВЭД");
	МассивПроверяемыхРеквизитов.Добавить("СтавкаНДС");
	МассивПроверяемыхРеквизитов.Добавить("ЕдиницаИзмерения");
	МассивПроверяемыхРеквизитов.Добавить("Производитель");
	МассивПроверяемыхРеквизитов.Добавить("ИспользоватьУпаковки");
	МассивПроверяемыхРеквизитов.Добавить("Марка");
	МассивПроверяемыхРеквизитов.Добавить("бг_ЕК_СУМ");
	
КонецПроцедуры

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("ЭтоНоменклатураТОиР") Тогда
		СтандартнаяОбработка = Ложь;
		адаптер_ОбработчикиСобытийСтандартный.ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект);
		Справочники.адаптер_ИсходящиеСообщения.ЗарегистрироватьИсходящееСообщениеПриЗаписи(
			ЗагружаемыйОбъект,
			,
			,
			ЗагружаемыйОбъект);
		Возврат;
	КонецЕсли;
	
	КонтролироватьРабочееНаименование = Константы.КонтролироватьУникальностьРабочегоНаименованияНоменклатурыИХарактеристик.Получить();
	
	Если КонтролироватьРабочееНаименование
		И Не ЗагружаемыйОбъект.ПометкаУдаления Тогда
		
		НаименованиеУникально = Справочники.Номенклатура.РабочееНаименованиеУникально(ЗагружаемыйОбъект);
		
		Если НЕ НаименованиеУникально Тогда
			
			НеуникальноеНаименование = СокрЛП(ЗагружаемыйОбъект.Наименование);
			
			ЗагружаемыйОбъект.Наименование = СтрШаблон("%1 %2", ЗагружаемыйОбъект.Наименование, СокрЛП(ЗагружаемыйОбъект.Код));
			
			Если СокрЛП(ЗагружаемыйОбъект.Наименование) = НеуникальноеНаименование Тогда
				ЗагружаемыйОбъект.Наименование = СтрШаблон("%1 %2", Лев(ЗагружаемыйОбъект.Наименование, СтрДлина(ЗагружаемыйОбъект.Наименование) - СтрДлина(СокрЛП(ЗагружаемыйОбъект.Код)) - 1), СокрЛП(ЗагружаемыйОбъект.Код));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоИсточникЕК_POSM = Ложь;
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("ЭтоИсточникЕК_POSM", ЭтоИсточникЕК_POSM)
		И ЭтоИсточникЕК_POSM
		И ЗначениеЗаполнено(ЗагружаемыйОбъект.ДополнительныеСвойства.РеквизитыЕК_POSM.БазоваяЕдиницаИзмерения) Тогда
		
		адаптер_ОбработчикиСобытийСтандартный.ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект);
		
		РеквизитыЕК_POSM = ЗагружаемыйОбъект.ДополнительныеСвойства.РеквизитыЕК_POSM;
		
		БазоваяЕдиницаИзмерения = бг_УпаковкиЕдиницыИзмеренияИнтеграция.ЗагрузитьОбъектИзОбъектаНоменклатура(
			ЗагружаемыйОбъект.Ссылка,
			РеквизитыЕК_POSM.БазоваяЕдиницаИзмерения,
			Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(),
			0,
			Неопределено,
			1,
			Перечисления.ТипыУпаковокНоменклатуры.Конечная,
			РеквизитыЕК_POSM.Длина,
			РеквизитыЕК_POSM.Ширина,
			РеквизитыЕК_POSM.Высота,
			РеквизитыЕК_POSM.ВесБазовойЕдиницы,
			0,
			0);
		
		Если РеквизитыЕК_POSM.ЕдиницаИзмеренияМест <> РеквизитыЕК_POSM.БазоваяЕдиницаИзмерения
			И ЗначениеЗаполнено(РеквизитыЕК_POSM.КоличествоБазовойЕдИзмВЕдИзмМест)
			И (ЗначениеЗаполнено(РеквизитыЕК_POSM.ДлинаЕдИзмМест)
			Или ЗначениеЗаполнено(РеквизитыЕК_POSM.ШиринаЕдИзмМест)
			Или ЗначениеЗаполнено(РеквизитыЕК_POSM.ВысотаЕдИзмМест)
			Или ЗначениеЗаполнено(РеквизитыЕК_POSM.ВесЕдИзмМест)) Тогда
			ЕдиницаИзмеренияМест = бг_УпаковкиЕдиницыИзмеренияИнтеграция.ЗагрузитьОбъектИзОбъектаНоменклатура(
				ЗагружаемыйОбъект.Ссылка,
				РеквизитыЕК_POSM.ЕдиницаИзмеренияМест,
				БазоваяЕдиницаИзмерения,
				РеквизитыЕК_POSM.КоличествоБазовойЕдИзмВЕдИзмМест,
				Неопределено,
				РеквизитыЕК_POSM.КоличествоБазовойЕдИзмВЕдИзмМест,
				Перечисления.ТипыУпаковокНоменклатуры.Составная,
				РеквизитыЕК_POSM.ДлинаЕдИзмМест,
				РеквизитыЕК_POSM.ШиринаЕдИзмМест,
				РеквизитыЕК_POSM.ВысотаЕдИзмМест,
				РеквизитыЕК_POSM.ВесЕдИзмМест,
				0,
				0);
		КонецЕсли;
		
		Если РеквизитыЕК_POSM.Паллета <> РеквизитыЕК_POSM.БазоваяЕдиницаИзмерения
			И РеквизитыЕК_POSM.Паллета <> РеквизитыЕК_POSM.ЕдиницаИзмеренияМест
			И ЗначениеЗаполнено(РеквизитыЕК_POSM.КоличествоБазовойЕдИзмВПаллете) Тогда
			Паллета = бг_УпаковкиЕдиницыИзмеренияИнтеграция.ЗагрузитьОбъектИзОбъектаНоменклатура(
				ЗагружаемыйОбъект.Ссылка,
				РеквизитыЕК_POSM.Паллета,
				БазоваяЕдиницаИзмерения,
				РеквизитыЕК_POSM.КоличествоБазовойЕдИзмВПаллете,
				бг_УпаковкиЕдиницыИзмеренияИнтеграция.Европаллета(),
				РеквизитыЕК_POSM.КоличествоБазовойЕдИзмВПаллете,
				Перечисления.ТипыУпаковокНоменклатуры.Составная,
				0,
				0,
				0,
				РеквизитыЕК_POSM.ВесПалеты,
				РеквизитыЕК_POSM.КоличествоСлоевВПаллете,
				РеквизитыЕК_POSM.КоличествоМестВСлое);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеВидаНоменклатуры(Наименование) Экспорт
	
	СоответствиеНаименований = Новый Соответствие;
	
	СоответствиеНаименований.Вставить("Федеральные спец. марки", "Федеральные спец. марки");
	СоответствиеНаименований.Вставить("Исправимый брак АП", "Спирт");
	СоответствиеНаименований.Вставить("Спирт", "Спирт");
	СоответствиеНаименований.Вставить("Спиртосодержащий ароматизатор", "Спирт");
	СоответствиеНаименований.Вставить("Акцизные марки", "Сырье и материалы");
	СоответствиеНаименований.Вставить("Сырье и материалы", "Сырье и материалы");
	СоответствиеНаименований.Вставить("Подарочная упаковка", "Подарочная упаковка");
	СоответствиеНаименований.Вставить("Топливо", "Топливо");
	СоответствиеНаименований.Вставить("Тара и тарные материалы", "Тара и тарные материалы");
	СоответствиеНаименований.Вставить("Прочие материалы", "Прочие материалы");
	СоответствиеНаименований.Вставить("Инвентарь и хоз. прин-ти", "Инвентарь и хоз. принадлежности");
	СоответствиеНаименований.Вставить("Запасные части", "Запасные части");
	СоответствиеНаименований.Вставить("Материалы переданные МОЛ", "Специальная оснастка и специальная одежда на склад");
	СоответствиеНаименований.Вставить("Специальная оснастка и специальная одежда на склад", "Специальная оснастка и специальная одежда на склад");
	СоответствиеНаименований.Вставить("Полуфабрикат", "Полуфабрикат");
	СоответствиеНаименований.Вставить("Оборудование", "Оборудование");
	СоответствиеНаименований.Вставить("Оборудование к установке", "Оборудование к установке");
	СоответствиеНаименований.Вставить("Услуга", "Услуга");
	СоответствиеНаименований.Вставить("Внеоборотные активы", "Оборудование");
	СоответствиеНаименований.Вставить("Имя груза	Код товара	Товар	Реальная ячейка	Место н", "Сырье и материалы");
	СоответствиеНаименований.Вставить("Материал", "Сырье и материалы");
	СоответствиеНаименований.Вставить("Материалы: Инвентарь и хоз. прин-ти", "Прочие материалы");
	СоответствиеНаименований.Вставить("Материалы: М-лы спец.назн. на складе", "Специальная оснастка и специальная одежда на склад");
	СоответствиеНаименований.Вставить("Материалы: Сырье и материалы", "Сырье и материалы");
	СоответствиеНаименований.Вставить("Материалы: Тара и тарные материалы", "Тара и тарные материалы");
	СоответствиеНаименований.Вставить("ЕК_POSM", "Материалы: Рекламные ТМЦ");
	СоответствиеНаименований.Вставить("ЕК_POSM Честный знак", "Материалы: Рекламные ТМЦ. Честный знак");
	СоответствиеНаименований.Вставить("Возвратная тара", "Многооборотная тара");
	СоответствиеНаименований.Вставить("Материалы", "Сырье и материалы");
	СоответствиеНаименований.Вставить("Оборудование (объекты основных средств)", "Оборудование");
	СоответствиеНаименований.Вставить("Услуги", "Услуга");
	СоответствиеНаименований.Вставить("Товары Ридель", "Товары Ридель");
	СоответствиеНаименований.Вставить("Алкогольная продукция", "Алкогольная продукция");
	СоответствиеНаименований.Вставить("Безалкогольная продукция", "Безалкогольная продукция");
	СоответствиеНаименований.Вставить("Материалы: инвентарь", "Инвентарь и хоз. принадлежности");
	СоответствиеНаименований.Вставить("ГСМ ТОиР", "ГСМ ТОиР");
	СоответствиеНаименований.Вставить("Запчасти ТОиР", "Запчасти ТОиР");
	СоответствиеНаименований.Вставить("Инструмент ТОиР", "Инструмент ТОиР");
	СоответствиеНаименований.Вставить("Материалы расходные ТОиР", "Материалы расходные ТОиР");
	
	Возврат СоответствиеНаименований.Получить(Наименование);
	
КонецФункции

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ОставитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		ВыгружаемыеРеквизиты());
		
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
				
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	// Корректировка текста запроса таблицы ключей
	ТекстПоиска = "Справочник.Номенклатура.Упаковки";
	ТекстЗамены = "Справочник.Номенклатура";
	ТекстЗапросаТаблицаКлючей = СтрЗаменить(ТекстЗапросаТаблицаКлючей, ТекстПоиска, ТекстЗамены);

	ТекстПоиска = "Справочник.Номенклатура.Сегменты";
	ТекстЗамены = "Справочник.Номенклатура";
	ТекстЗапросаТаблицаКлючей = СтрЗаменить(ТекстЗапросаТаблицаКлючей, ТекстПоиска, ТекстЗамены);
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ПараметрыВыполненияЗапросов = адаптер_РаботаСДаннымиИБ.ПолучитьПараметрыВыполненияЗапросов(Объект, ДанныеСообщения);
	
	ВыгружаемыеДанные = ВыгружаемыеДанные(Объект);
	
	Реквизиты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		ВыгружаемыеДанные.РезультатПоШапке,
		ПараметрыВыполненияЗапросов.ТаблицаКлючей,
		ДанныеСообщения);
		
	Если Реквизиты.Количество() > 0 Тогда

		Упаковки = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
			ВыгружаемыеДанные.РезультатПоУпаковкам,
			ПараметрыВыполненияЗапросов.ТаблицаКлючей,
			ДанныеСообщения);
			
		Реквизиты[0].Вставить("Упаковки", Упаковки);
		
		Сегменты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
			ВыгружаемыеДанные.РезультатПоСегментам,
			ПараметрыВыполненияЗапросов.ТаблицаКлючей,
			ДанныеСообщения);
			
		Реквизиты[0].Вставить("Сегменты", Сегменты);
	КонецЕсли;
		
	ДанныеВыгружаемогоОбъекта = Новый Структура;
	ДанныеВыгружаемогоОбъекта.Вставить("ПолноеИмя", ПараметрыВыполненияЗапросов.ПолноеИмя);
	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Реквизиты);
	
	Возврат ДанныеВыгружаемогоОбъекта;
	
КонецФункции

Процедура ВыгрузитьСвязанныеОбъекты(СправочникОбъект) Экспорт
	
	Если НеобходимоВыгружатьСвязанныеУпаковки(СправочникОбъект) Тогда
		ВыгрузитьСвязанныеУпаковки(СправочникОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	ДанныеОбъекта = Новый Структура(
		"ЭтоГруппа, ВидНоменклатуры, ВедетсяВERP, ВариантСинхронизацииWMS",
		Ложь,
		Неопределено,
		Ложь,
		Неопределено);

	ВыгрузитьСТегомERP = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДанныеСообщения.ДополнительныеСвойстваОбъекта,
			"ВыгрузитьСТегомERP",
			 Ложь);		
		
	Если ИсточникОбъект <> Неопределено Тогда
		
		ДанныеОбъекта.ЭтоГруппа = ИсточникОбъект.ЭтоГруппа; 
		ДанныеОбъекта.ВидНоменклатуры = ИсточникОбъект.ВидНоменклатуры; 
		
		Если ЗначениеЗаполнено(ИсточникОбъект.ВидНоменклатуры) Тогда
			
			ДанныеВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ИсточникОбъект.ВидНоменклатуры,
				"бг_ВедетсяВERP, бг_ВариантСинхронизацииWMS");
				
			ДанныеОбъекта.ВедетсяВERP = ДанныеВидаНоменклатуры.бг_ВедетсяВERP; 
			ДанныеОбъекта.ВариантСинхронизацииWMS = ДанныеВидаНоменклатуры.бг_ВариантСинхронизацииWMS; 
				
		КонецЕсли;
			
	ИначеЕсли ДанныеСообщения.Свойство("Объект") И ОбщегоНазначения.СсылкаСуществует(ДанныеСообщения.Объект) Тогда
		
		ДанныеНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеСообщения.Объект,
			"ЭтоГруппа, ВидНоменклатуры, ВидНоменклатуры.бг_ВедетсяВERP, ВидНоменклатуры.бг_ВариантСинхронизацииWMS");
			
		ДанныеОбъекта.ЭтоГруппа = ДанныеНоменклатуры.ЭтоГруппа; 
		ДанныеОбъекта.ВидНоменклатуры = ДанныеНоменклатуры.ВидНоменклатуры; 
		ДанныеОбъекта.ВедетсяВERP = ДанныеНоменклатуры.ВидНоменклатурыбг_ВедетсяВERP; 
		ДанныеОбъекта.ВариантСинхронизацииWMS = ДанныеНоменклатуры.ВидНоменклатурыбг_ВариантСинхронизацииWMS; 
			
	КонецЕсли;
	
	Если Не ДанныеОбъекта.ЭтоГруппа
		И ЗначениеЗаполнено(ДанныеОбъекта.ВидНоменклатуры) Тогда
		
		Если ДанныеОбъекта.ВедетсяВERP = Истина 
			Или ВыгрузитьСТегомERP Тогда
			КлючМаршрутизации = КлючМаршрутизации + ".ERP";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ВариантСинхронизацииWMS)
			И Не ВыгрузитьСТегомERP Тогда
			КлючМаршрутизации = КлючМаршрутизации + ".WMS";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Функция НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли; 
	
	Номенклатура = адаптер_РаботаСДаннымиИБ.НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта);	
	Если ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
		Возврат Номенклатура;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("КодЕК_Номенклатуры")
		И ЗначениеЗаполнено(СтруктураОбъекта.КодЕК_Номенклатуры) Тогда
		
		Номенклатура = НоменклатураПоКодуЕК_Номенклатуры(СтруктураОбъекта.КодЕК_Номенклатуры);
		Если Номенклатура <> Неопределено Тогда
			Возврат Номенклатура;	
		КонецЕсли;
		
	ИначеЕсли СтруктураОбъекта.Свойство("КодЕК_ПОСМ")
		И ЗначениеЗаполнено(СтруктураОбъекта.КодЕК_ПОСМ) Тогда
		
		Номенклатура = НоменклатураПоКодуЕК_ПОСМ(СтруктураОбъекта.КодЕК_ПОСМ);
		Если Номенклатура <> Неопределено Тогда
			Возврат Номенклатура;	
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

Функция ДлинаКодаЕК_ПОСМ() Экспорт

	Возврат 9;

КонецФункции

Функция РеквизитыНоменклатурыВыгружаемыеСУпаковками() Экспорт
	
	// Источник: бг_НоменклатураИнтеграция.ДобавитьРеквизитыЧерезТочкуКВыгрузке();
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Наименование");
	Реквизиты.Добавить("НаименованиеПолное");
	Реквизиты.Добавить("ВидНоменклатуры");
	Реквизиты.Добавить("ВидАлкогольнойПродукции");
	Реквизиты.Добавить("ОбъемДАЛ");
	Реквизиты.Добавить("Крепость");
	Реквизиты.Добавить("ЕдиницаИзмерения");
	Реквизиты.Добавить("ЕдиницаДляОтчетов");
	Реквизиты.Добавить("Описание");
	Реквизиты.Добавить("ВесЧислитель");
	Реквизиты.Добавить("КодОКП");
	Реквизиты.Добавить("СтавкаНДС");
	Реквизиты.Добавить("ИмпортнаяАлкогольнаяПродукция");
	Реквизиты.Добавить("КодТНВЭД");
	Реквизиты.Добавить("КодОКПД2");
	Реквизиты.Добавить("ТоварнаяКатегория"); 
	Реквизиты.Добавить("СрокГодности");
	Реквизиты.Добавить("ПроизводительИмпортерКонтрагент");
	Реквизиты.Добавить("бг_Выбыл");
	Реквизиты.Добавить("бг_ГодУрожая");
	Реквизиты.Добавить("бг_ТемператураХранения");
	Реквизиты.Добавить("бг_СтранаПроизводителя");
	Реквизиты.Добавить("бг_Добавлен");
	Реквизиты.Добавить("бг_КонтрагентПроизводитель");
	Реквизиты.Добавить("бг_СрокГодности");
	Реквизиты.Добавить("бг_Проверен");
	Реквизиты.Добавить("бг_ОбменB2B");
	Реквизиты.Добавить("бг_Статус");
	
	Возврат Реквизиты;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	ВыгружаемыеРеквизиты.Добавить("Код");
	ВыгружаемыеРеквизиты.Добавить("НаименованиеПолное");
	ВыгружаемыеРеквизиты.Добавить("Наименование");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("ЭтоГруппа");
	ВыгружаемыеРеквизиты.Добавить("ВидНоменклатуры");
	ВыгружаемыеРеквизиты.Добавить("Артикул");
	ВыгружаемыеРеквизиты.Добавить("ЕдиницаИзмерения");
	ВыгружаемыеРеквизиты.Добавить("ИмпортнаяАлкогольнаяПродукция");
	ВыгружаемыеРеквизиты.Добавить("ВестиУчетПоГТД");
	ВыгружаемыеРеквизиты.Добавить("Производитель");
	ВыгружаемыеРеквизиты.Добавить("ОбъемДАЛ");
	ВыгружаемыеРеквизиты.Добавить("Крепость");
	ВыгружаемыеРеквизиты.Добавить("СрокГодности");
	ВыгружаемыеРеквизиты.Добавить("ИспользоватьУпаковки");
	ВыгружаемыеРеквизиты.Добавить("ТоварнаяКатегория");
	ВыгружаемыеРеквизиты.Добавить("ТипНоменклатуры");
	ВыгружаемыеРеквизиты.Добавить("СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("ВесИспользовать");
	ВыгружаемыеРеквизиты.Добавить("ВесЧислитель");
	ВыгружаемыеРеквизиты.Добавить("ВесЗнаменатель");
	ВыгружаемыеРеквизиты.Добавить("ДлинаИспользовать");
	ВыгружаемыеРеквизиты.Добавить("ДлинаЧислитель");
	ВыгружаемыеРеквизиты.Добавить("ДлинаЗнаменатель");
	ВыгружаемыеРеквизиты.Добавить("ЕдиницаИзмеренияСрокаГодности");
	ВыгружаемыеРеквизиты.Добавить("ВидАлкогольнойПродукции");
	ВыгружаемыеРеквизиты.Добавить("бг_ГодУрожая");
	ВыгружаемыеРеквизиты.Добавить("бг_ТемператураХранения");
	ВыгружаемыеРеквизиты.Добавить("бг_СтранаПроизводителя");
	ВыгружаемыеРеквизиты.Добавить("бг_ЕК_СУМ");
	ВыгружаемыеРеквизиты.Добавить("ПроизводительИмпортерКонтрагент");
	ВыгружаемыеРеквизиты.Добавить("КодТНВЭД");
	ВыгружаемыеРеквизиты.Добавить("бг_КонтрагентПроизводитель");

	ВыгружаемыеРеквизиты = СтрСоединить(ВыгружаемыеРеквизиты, ",");
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты шапки
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"БазоваяУпаковка",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"УчетПоХарактеристикам",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ИспользоватьСерии",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"АлкогольнаяПродукция",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"МаркируемаяАлкогольнаяПродукция",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ИндивидуальныйНаборУпаковок",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"МаркированнаяСпиртосодержащаяПродукция",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_ТипЕдиницыИзмерения",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ТипыЕдиницИзмерения"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_ВидНоменклатурыСтрока",
		ОбщегоНазначения.ОписаниеТипаСтрока(25));	
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"КодЕК_ПОСМ",
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_НоменклатураИнтеграция.ДлинаКодаЕК_ПОСМ()));	
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_ВариантСинхронизацииWMS",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ВариантыСинхронизацииНоменклатурыWMS"));	
		
	// Табличная часть с упаковками
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.ИдентификаторЕК",
		Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36)));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.Упаковка",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.ЕдиницаИзмерения",
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.Числитель",
		Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3)));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.Знаменатель",
		Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3)));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.ПометкаУдаления",
		Новый ОписаниеТипов("Булево")); 
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.Вес",
		Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 3)));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Упаковки.бг_ТипЕдиницыИзмерения",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ТипыЕдиницИзмерения"));

	// Табличная часть с сегментами
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Сегменты.Сегмент",
		Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));

КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Наименование");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Код");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Числитель");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Знаменатель");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_ЕК_СУМ,
		"Код");
		
КонецПроцедуры

Функция ТекстЗапросаВыгружаемыхДанных()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	МАКСИМУМ(УпаковкиЕдиницыИзмерения.Ссылка) КАК БазоваяУпаковка
	|ПОМЕСТИТЬ втБазоваяУпаковка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (Номенклатура.Ссылка = &Ссылка)
	|			И Номенклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
	|			И Номенклатура.ЕдиницаИзмерения = УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения
	|			И (НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыгружаемыйОбъект.ЕдиницаИзмерения КАК ЕдиницаИзмерения_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.ЕдиницаИзмерения КАК ЕдиницаИзмерения_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения_ЗначениеРеквизитаНаименование,
	|	ВыгружаемыйОбъект.ЕдиницаИзмерения.Код КАК ЕдиницаИзмерения_ЗначениеРеквизитаКод,
	|	ВыгружаемыйОбъект.ВидНоменклатуры КАК ВидНоменклатуры_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.ВидНоменклатуры КАК ВидНоменклатуры_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.бг_КонтрагентПроизводитель КАК бг_КонтрагентПроизводитель_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.бг_КонтрагентПроизводитель КАК бг_КонтрагентПроизводитель_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.ПроизводительИмпортерКонтрагент КАК ПроизводительИмпортерКонтрагент_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.ПроизводительИмпортерКонтрагент КАК ПроизводительИмпортерКонтрагент_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.КодТНВЭД КАК КодТНВЭД_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.КодТНВЭД КАК КодТНВЭД_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.КодТНВЭД.Код КАК КодТНВЭД_ЗначениеРеквизитаКод,
	|	ВыгружаемыйОбъект.бг_ЕК_СУМ КАК бг_ЕК_СУМ_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.бг_ЕК_СУМ КАК бг_ЕК_СУМ_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.бг_ЕК_СУМ.Код КАК бг_ЕК_СУМ_ЗначениеРеквизитаКод,
	|	ВыгружаемыйОбъект.СтавкаНДС КАК СтавкаНДС_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.СтавкаНДС КАК СтавкаНДС_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.СтавкаНДС.Ставка КАК СтавкаНДС_ЗначениеРеквизитаСтавка,
	|	ВыгружаемыйОбъект.Код КАК Код,
	|	ВЫБОР
	|		КОГДА ВыгружаемыйОбъект.ВидНоменклатуры.бг_ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_ПОСМ)
	|			ТОГДА ВЫРАЗИТЬ(ВыгружаемыйОбъект.Код КАК СТРОКА(999))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КодЕК_ПОСМ,
	|	ВыгружаемыйОбъект.ЭтоГруппа КАК ЭтоГруппа,
	|	ВыгружаемыйОбъект.Наименование КАК Наименование,
	|	ВыгружаемыйОбъект.НаименованиеПолное КАК НаименованиеПолное,
	|	ВыгружаемыйОбъект.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК УчетПоХарактеристикам,
	|	ВыгружаемыйОбъект.Ссылка КАК Идентификатор,
	|	ВыгружаемыйОбъект.Ссылка КАК ТаблицаКлючей,
	|	ВыгружаемыйОбъект.Производитель КАК Производитель_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.Производитель КАК Производитель_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.Артикул КАК Артикул,
	|	ЕСТЬNULL(ВыгружаемыйОбъект.ВидНоменклатуры.ИспользоватьСерии, ЛОЖЬ) КАК ИспользоватьСерии,
	|	ВЫБОР
	|		КОГДА ВыгружаемыйОбъект.ВидНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АлкогольнаяПродукция,
	|	ВыгружаемыйОбъект.ВидАлкогольнойПродукции.Маркируемый КАК МаркируемаяАлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА ВыгружаемыйОбъект.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИндивидуальныйНаборУпаковок,
	|	ВЫБОР
	|		КОГДА ВыгружаемыйОбъект.ВидНоменклатуры.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК МаркированнаяСпиртосодержащаяПродукция,
	|	ВыгружаемыйОбъект.ОбъемДАЛ КАК ОбъемДАЛ,
	|	ВыгружаемыйОбъект.Крепость КАК Крепость,
	|	ВыгружаемыйОбъект.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	|	ВыгружаемыйОбъект.ВесИспользовать КАК ВесИспользовать,
	|	ВыгружаемыйОбъект.ВесЧислитель КАК ВесЧислитель,
	|	ВыгружаемыйОбъект.ВесЗнаменатель КАК ВесЗнаменатель,
	|	ВыгружаемыйОбъект.ДлинаИспользовать КАК ДлинаИспользовать,
	|	ВыгружаемыйОбъект.ДлинаЧислитель КАК ДлинаЧислитель,
	|	ВыгружаемыйОбъект.ДлинаЗнаменатель КАК ДлинаЗнаменатель,
	|	ВыгружаемыйОбъект.СрокГодности КАК СрокГодности,
	|	ВыгружаемыйОбъект.бг_ГодУрожая КАК бг_ГодУрожая,
	|	ВыгружаемыйОбъект.бг_ТемператураХранения КАК бг_ТемператураХранения,
	|	ВыгружаемыйОбъект.бг_СтранаПроизводителя КАК бг_СтранаПроизводителя_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.бг_СтранаПроизводителя КАК бг_СтранаПроизводителя_ЗначениеРеквизитаТаблицаКлючей,
	|	ЕСТЬNULL(втБазоваяУпаковка.БазоваяУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК БазоваяУпаковка_ЗначениеРеквизитаИдентификатор,
	|	ЕСТЬNULL(втБазоваяУпаковка.БазоваяУпаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК БазоваяУпаковка_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.ИмпортнаяАлкогольнаяПродукция КАК ИмпортнаяАлкогольнаяПродукция,
	|	ВыгружаемыйОбъект.ВестиУчетПоГТД КАК ВестиУчетПоГТД,
	|	ВыгружаемыйОбъект.ЕдиницаИзмеренияСрокаГодности КАК ЕдиницаИзмеренияСрокаГодности_ЗначениеРеквизитаЗначениеПеречисления,
	|	ВыгружаемыйОбъект.ТипНоменклатуры КАК ТипНоменклатуры_ЗначениеРеквизитаЗначениеПеречисления,
	|	ВыгружаемыйОбъект.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции_ЗначениеРеквизитаТаблицаКлючей,
	|	ВыгружаемыйОбъект.ВидАлкогольнойПродукции КАК ВидАлкогольнойПродукции_ЗначениеРеквизитаИдентификатор,
	|	ВыгружаемыйОбъект.ВидАлкогольнойПродукции.Код КАК ВидАлкогольнойПродукции_ЗначениеРеквизитаКод,
	|	ВыгружаемыйОбъект.ВидНоменклатуры.бг_ВариантСинхронизацииWMS КАК бг_ВариантСинхронизацииWMS_ЗначениеРеквизитаЗначениеПеречисления
	|ИЗ
	|	Справочник.Номенклатура КАК ВыгружаемыйОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБазоваяУпаковка КАК втБазоваяУпаковка
	|		ПО ВыгружаемыйОбъект.Ссылка = втБазоваяУпаковка.Номенклатура
	|ГДЕ
	|	ВыгружаемыйОбъект.Ссылка = &Ссылка
	|	И НЕ ВыгружаемыйОбъект.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.бг_ИдентификаторЕКНоменклатуры КАК ИдентификаторЕК,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка_ЗначениеРеквизитаИдентификатор,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка_ЗначениеРеквизитаТаблицаКлючей,
	|	УпаковкиЕдиницыИзмерения.Ссылка.Наименование КАК Упаковка_ЗначениеРеквизитаНаименование,
	|	УпаковкиЕдиницыИзмерения.Ссылка.Код КАК Упаковка_ЗначениеРеквизитаКод,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения_ЗначениеРеквизитаИдентификатор,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения КАК ЕдиницаИзмерения_ЗначениеРеквизитаТаблицаКлючей,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения_ЗначениеРеквизитаНаименование,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.Код КАК ЕдиницаИзмерения_ЗначениеРеквизитаКод,
	|	УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения КАК бг_ТипЕдиницыИзмерения_ЗначениеРеквизитаЗначениеПеречисления,
	|	УпаковкиЕдиницыИзмерения.ПометкаУдаления КАК ПометкаУдаления,
	|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
	|	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель,
	|	УпаковкиЕдиницыИзмерения.Вес КАК Вес
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (ВЫБОР
	|				КОГДА Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА Номенклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
	|				ИНАЧЕ Номенклатура.НаборУпаковок = УпаковкиЕдиницыИзмерения.Владелец
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И Номенклатура.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСегмента.Сегмент КАК Сегмент_ЗначениеРеквизитаИдентификатор,
	|	НоменклатураСегмента.Сегмент КАК Сегмент_ЗначениеРеквизитаТаблицаКлючей
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Номенклатура = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"ВыгружаемыйОбъект.Код КАК СТРОКА(999)",
		СтрШаблон(
			"ВыгружаемыйОбъект.Код КАК СТРОКА(%1)",
			Формат(бг_НоменклатураИнтеграция.ДлинаКодаЕК_ПОСМ(), "ЧГ=0")));
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыгружаемыеДанные(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанных();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ВыгружаемыеДанные = Новый Структура;
	ВыгружаемыеДанные.Вставить("РезультатПоШапке", РезультатыЗапросов[1]);
	ВыгружаемыеДанные.Вставить("РезультатПоУпаковкам", РезультатыЗапросов[2]);
	ВыгружаемыеДанные.Вставить("РезультатПоСегментам", РезультатыЗапросов[3]);
		
	Возврат ВыгружаемыеДанные;

КонецФункции

Процедура ЗагрузитьНоменклатуруИзТОиР(ЗагружаемыйОбъект,  СтруктураОбъекта) 
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	СоответствиеИменКонстантТОиР_ERP = Новый Соответствие;
	СоответствиеИменКонстантТОиР_ERP.Вставить("Запчасти_ТРИМ", 
		"ВидНоменклатурыЗапчастиТОиР");
	СоответствиеИменКонстантТОиР_ERP.Вставить("Инструмент_ТРИМ", 
		"ВидНоменклатурыИнструментТОиР");
	СоответствиеИменКонстантТОиР_ERP.Вставить("ГСМ_ТРИМ", 
		"ВидНоменклатурыГСМТОиР");
	СоответствиеИменКонстантТОиР_ERP.Вставить("МатериалыРасходные_ТРИМ", 
		"ВидНоменклатурыМатериалыРасходныеТОиР");
	
	ЗагружаемыйОбъект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;	
	ЗагружаемыйОбъект.ВидНоменклатуры = 
		бг_КонстантыПовтИсп.ЗначениеКонстанты(
			СоответствиеИменКонстантТОиР_ERP.Получить(СтруктураОбъекта.бг_ВидНоменклатурыСтрока));
	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(ЗагружаемыйОбъект);
	ЗагружаемыйОбъект.Наименование = СтруктураОбъекта.Наименование;
	ЗагружаемыйОбъект.НаименованиеПолное = СтруктураОбъекта.НаименованиеПолное; 
	ЗагружаемыйОбъект.ЕдиницаИзмерения = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.ЕдиницаИзмерения);
	
	Если СтруктураОбъекта.Свойство("Упаковки") Тогда  
        ЗагружаемыйОбъект.ИспользоватьУпаковки = Истина;  
		ЗагружаемыйОбъект.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗагружаемыйОбъект.Наименование) Тогда
		ЗагружаемыйОбъект.Наименование = ЗагружаемыйОбъект.НаименованиеПолное;
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("Артикул") Тогда
		ЗагружаемыйОбъект.Артикул = СтруктураОбъекта.Артикул;
		ЗагружаемыйОбъект.Наименование = ЗагружаемыйОбъект.Наименование + " " + ЗагружаемыйОбъект.Артикул;
	КонецЕсли;  
	ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("ЭтоНоменклатураТОиР", Истина);
	
КонецПроцедуры

Функция НоменклатураПоКодуЕК_Номенклатуры(КодЕК_Номенклатуры)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Номенклатура
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &КодЕК_Номенклатуры
	|	И Не УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодЕК_Номенклатуры", КодЕК_Номенклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Номенклатура;	
	
КонецФункции

Функция НоменклатураПоКодуЕК_ПОСМ(КодЕК_ПОСМ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Код = &КодЕК_ПОСМ
	|	И Номенклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_ПОСМ)";
	
	Запрос.УстановитьПараметр("КодЕК_ПОСМ", КодЕК_ПОСМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Номенклатура;	

КонецФункции

Функция НеобходимоВыгружатьСвязанныеУпаковки(НоменклатураОбъект)

	// Необходимо выгружать все упаковки по номенклатуре только в том случае, если изменились реквизиты номенклатуры,
	// которые выгружаются вместе с упаковками.
	Возврат НоменклатураОбъект.ДополнительныеСвойства.Свойство("бг_НеобходимоВыгружатьСвязанныеУпаковки")
		И НоменклатураОбъект.ДополнительныеСвойства.бг_НеобходимоВыгружатьСвязанныеУпаковки;

КонецФункции

Процедура ВыгрузитьСвязанныеУпаковки(НоменклатураОбъект)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &Владелец";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", НоменклатураОбъект.Ссылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры
			
#КонецОбласти
