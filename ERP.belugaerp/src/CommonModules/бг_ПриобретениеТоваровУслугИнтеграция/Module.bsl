#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
					
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный, адаптер_РаботаСДаннымиИБ;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
	
	Если РеквизитыОбъекта.Свойство("ИдентификаторПоступления") И ЗначениеЗаполнено(РеквизитыОбъекта.ИдентификаторПоступления) Тогда 
		РеквизитыОбъекта.бг_ДокументПоступленияНаСклад.Вставить("ХозяйственнаяОперацияСтрока", ПолучитьЗначениеХозяйственнаяОперацияСтрока(РеквизитыОбъекта.ИдентификаторПоступления));
		РеквизитыОбъекта.ИдентификаторПоступления = Строка(РеквизитыОбъекта.ИдентификаторПоступления.УникальныйИдентификатор());
	КонецЕсли;
	
	Для каждого СтрокаТовары Из РеквизитыОбъекта.Товары Цикл
		
		Если СтрокаТовары.НаРасходыБудущихПериодов Тогда
			СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.СтатьяРасходов.Идентификатор));
			СчетаУчета = Новый Массив;
			СчетаУчета.Добавить("Расходы");
			СтруктураЗначенийСчетаУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(СтатьяРасходов, СчетаУчета);
			ПравилоРаспределения        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов,"ПравилоРаспределенияРасходовРегл");
			НоваяСтатья                 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоРаспределения,"СтатьяСписанияРБП");
			адаптер_РаботаСДаннымиИБ.ЗаполнитьЗначениеРеквизита(СтрокаТовары,"СтатьяРасходов_ЗначениеРеквизитаИдентификатор",НоваяСтатья,Новый ТаблицаЗначений);
			СтрокаТовары.СтатьяРасходов.Вставить("Код", НоваяСтатья.Код);
			адаптер_РаботаСДаннымиИБ.ЗаполнитьЗначениеРеквизита(СтрокаТовары,"СчетУчета_ЗначениеРеквизитаИдентификатор",СтруктураЗначенийСчетаУчета.СчетУчета_Расходы,Новый ТаблицаЗначений);
			СтрокаТовары.СчетУчета.Вставить("Код", СтруктураЗначенийСчетаУчета.СчетУчета_Расходы.Код);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыОбъекта.Вставить("ОтражатьСкладскиеДвижения", бг_ИнтеграцияЕГАИС.ОтражатьСкладскиеДвиженияПоОснованию(Объект));
	РеквизитыОбъекта.Вставить("ТТНВходящаяПодтвержденаЕГАИС", ТТНВходящаяПодтвержденаЕГАИС(Объект));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска =
	"NULL КАК СчетУчета_ЗначениеРеквизитаКод";
	
	ТекстЗамены =
	""""" КАК СчетУчета_ЗначениеРеквизитаКод";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстПоиска =
	"NULL КАК НаРасходыБудущихПериодов";
	
	ТекстЗамены =
	"ЕстьNULL(ВыгружаемыйОбъект.Товары.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов),Ложь) КАК НаРасходыБудущихПериодов";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	// Подстаноавка выгрузки типа номенклатуры в ТЧ "Товары".
	ТекстПоиска = "NULL КАК ТипНоменклатуры_ЗначениеРеквизитаЗначениеПеречисления";
	ТекстЗамены = "ЕстьNULL(ВыгружаемыйОбъект.Товары.Номенклатура.ТипНоменклатуры, Значение(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры_ЗначениеРеквизитаЗначениеПеречисления";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	// Подстаноавка выгрузки ИдентификаторПоступления.
	ТекстПоиска = "NULL КАК ИдентификаторПоступления";
	ТекстЗамены = "ВыгружаемыйОбъект.бг_ДокументПоступленияНаСклад КАК ИдентификаторПоступления";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);

КонецПроцедуры

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	Если ИсточникОбъект <> Неопределено И ИсточникОбъект.бг_ПриобретениеТОиР = Истина Тогда  
		
		МассивТоваров = ИсточникОбъект.Товары.ВыгрузитьКолонку("Номенклатура");
		ВидыНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивТоваров, "ВидНоменклатуры");
		ВидыНоменклатурыТОиР = бг_КонстантыПовтИсп.ЗначенияКонстант(
			"ВидНоменклатурыЗапчастиТОиР, ВидНоменклатурыИнструментТОиР,"
			+ "ВидНоменклатурыГСМТОиР, ВидНоменклатурыМатериалыРасходныеТОиР");
		
		Для каждого КлючЗначение Из ВидыНоменклатуры Цикл
			
			Если Не (КлючЗначение.Значение = ВидыНоменклатурыТОиР.ВидНоменклатурыЗапчастиТОиР
				Или КлючЗначение.Значение = ВидыНоменклатурыТОиР.ВидНоменклатурыИнструментТОиР 
				Или КлючЗначение.Значение = ВидыНоменклатурыТОиР.ВидНоменклатурыГСМТОиР 
				Или КлючЗначение.Значение = ВидыНоменклатурыТОиР.ВидНоменклатурыМатериалыРасходныеТОиР) Тогда 
				ТекстОшибки = НСтр("ru='В документе установлен признак ""Приоретение по ТОиР"", в"
					+ " этом случае товары должны быть загружены из ТОиР'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЦикла;
		
		КлючМаршрутизации = КлючМаршрутизации + ".ТОиР";
	
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "бг_ПриобретениеТОиР") = Истина Тогда

		КлючМаршрутизации = КлючМаршрутизации + ".ТОиР";
		
	КонецЕсли;
	
	Возврат КлючМаршрутизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьКлючевыеПоляПервичногоДокумента(РеквизитыИСвойства) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ДлинаСтроки30 = 30;
	ДлинаСтроки50 = 50;
	ОписаниеТипаСтрока30 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки30);
	ОписаниеТипаСтрока50 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки50);

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"Дата", , 
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"Номер", , 
		ОписаниеТипаСтрока30);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"ДатаВходящегоДокумента", , 
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"НомерВходящегоДокумента", , 
		ОписаниеТипаСтрока50);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"ТипПервичногоДокумента", , 
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПервичныхДокументов"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗначениеХозяйственнаяОперацияСтрока(ДокументПоступленияНаСклад)
	
	ХозяйственнаяОперацияСтрока = ОбщегоНазначения.ИмяЗначенияПеречисления((ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПоступленияНаСклад, "ХозяйственнаяОперация")));
	
	Возврат ХозяйственнаяОперацияСтрока; 
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Шапка
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // МетаданныеОбъекта
		"ОтражатьСкладскиеДвижения",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // МетаданныеОбъекта
		"ТТНВходящаяПодтвержденаЕГАИС",
		Новый ОписаниеТипов("Булево"));
		
	// Товары
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // МетаданныеОбъекта
		"Товары.СчетУчета",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // МетаданныеОбъекта
		"Товары.НаРасходыБудущихПериодов",
		Новый ОписаниеТипов("Булево"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // МетаданныеОбъекта
		"ИдентификаторПоступления",
		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // МетаданныеОбъекта
		"Товары.ТипНоменклатуры",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
				
КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.НомераГТД,
		"Код",
		, // МетаданныеОбъекта
		ОбщегоНазначения.ОписаниеТипаСтрока(30));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.НомераГТД,
		"РегистрационныйНомер",
		, // МетаданныеОбъекта
		ОбщегоНазначения.ОписаниеТипаСтрока(29));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.НомераГТД,
		"СтранаПроисхождения",
		, // МетаданныеОбъекта
		Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СтраныМира,
		"Наименование",
		, // МетаданныеОбъекта
		ОбщегоНазначения.ОписаниеТипаСтрока(60));
				
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Назначения,
		"Договор",
		, // МетаданныеОбъекта
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ДоговорыКонтрагентов,
		"ТипДоговора",
		, // МетаданныеОбъекта
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДоговоров"));		

		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ДоговорыКонтрагентов,
		"Контрагент",
		, // МетаданныеОбъекта
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));		
		
    адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ДоговорыКонтрагентов,
		"ВалютаВзаиморасчетов",
		, // МетаданныеОбъекта
		Новый ОписаниеТипов("СправочникСсылка.Валюты"));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ДоговорыКонтрагентов,
		"ОплатаВВалюте",
		, // МетаданныеОбъекта
		Новый ОписаниеТипов("Булево"));		
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОбъектыРасчетов,
		"Объект", , 
		Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип);
	
	ДобавитьКлючевыеПоляПервичногоДокумента(РеквизитыИСвойства);
	
КонецПроцедуры

Функция ТТНВходящаяПодтвержденаЕГАИС(ПриобретениеТоваровИУслуг)
	
	ДанныеТТНВходящей = Документы.ТТНВходящаяЕГАИС.бг_ДанныеТТНВходящейПоСвязанномуДокументу(
		ПриобретениеТоваровИУслуг,
		Истина);
	
	ТТНВходящаяПодтвержденаЕГАИС = Ложь;
	
	Если ДанныеТТНВходящей <> Неопределено Тогда
		
		ТТНВходящаяПодтвержденаЕГАИС = Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(
			ДанныеТТНВходящей.ТекущийСтатус);
			
	КонецЕсли;
	
	Возврат ТТНВходящаяПодтвержденаЕГАИС;
	
КонецФункции

#КонецОбласти

