
#Область ПрограммныйИнтерфейс

&Перед("ЗапуститьОбработкуОтветовЕГАИС")
Процедура бг_ЗапуститьОбработкуОтветовЕГАИС()

	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьОптимизированныйАлгоритмОбменаЕГАИС") = Истина Тогда
		ВызватьИсключение НСтр("ru = 'Используется оптимизированный механизм обмена данными с ЕГАИС.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;

	ИнтеграцияЕГАИСВызовСервера.бг_УдалитьНеАктуальныеЗаписиУТМ();
	
КонецПроцедуры

&Вместо("КатегорииОпераций")
Функция бг_КатегорииОпераций() Экспорт
	
	Категории = ПродолжитьВызов();
	
	// Общие
	Категории.ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ОтветНаЗапросССП,
		НСтр("ru = 'Получение ССП';
			|en = 'Получение ССП'"));
		
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ЗапросССП,
		НСтр("ru = 'Запрос сведений о ССП';
			|en = 'Запрос сведений о ССП'"));
		
	Категории.ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве,
		НСтр(
			"ru = 'Уведомление о регистрации отчета';
			|en = 'Уведомление о регистрации отчета'")); 
		
	// битАктОбУничтоженииФСМ
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_АктОбУничтоженииФСМ,
		НСтр(
			"ru = 'Акт об уничтожении ФСМ';
			|en = 'Акт об уничтожении ФСМ'"));
		
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияАктаОбУничтожении,
		НСтр(
			"ru = 'Запрос на отмену проведения';
			|en = 'Запрос на отмену проведения'")); 
		
	// битДобавлениеНовойПродукцииЕГАИС	
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ДобавлениеНовойПродукцииЕГАИС,
		НСтр(
			"ru = 'Добавление новой продукции';
			|en = 'Добавление новой продукции'"));
		
	// битЗаявлениеОВыдачеФСМ
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ЗаявлениеОВыдачеФСМ,
		НСтр(
			"ru = 'Заявление о выдаче ФСМ';
			|en = 'Заявление о выдаче ФСМ'"));
				
	// битНакладнаяНаВыдачуФСМ
	Категории.ПолучениеДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_НакладнаяНаВыдачуФСМ,
		НСтр("ru = 'Получение новых ФСМ';
			|en = 'Получение новых ФСМ'"));
		
	// битОтчетОбИмпортеПродукцииЕГАИС
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОбИмпортеПродукцииЕГАИС,
		НСтр(
			"ru = 'Отчет об импорте продукции';
			|en = 'Отчет об импорте продукции'")); 
		
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОбИмпорте,
		НСтр(
			"ru = 'Запрос на отмену проведения';
			|en = 'Запрос на отмену проведения'")); 
		
	// битОтчетОПроизводствеЕГАИС
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ОтчетОПроизводствеЕГАИС,
		НСтр(
			"ru = 'Отчет о производстве';
			|en = 'Отчет о производстве'")); 
		
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияОтчетаОПроизводстве,
		НСтр(
			"ru = 'Запрос на отмену проведения';
			|en = 'Запрос на отмену проведения'")); 
		
	// битПланируемыйВвозЕГАИС
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ПланируемыйВвозЕГАИС,
		НСтр(
			"ru = 'Планируемый ввоз ЕГАИС';
			|en = 'Планируемый ввоз ЕГАИС'")); 
	
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_ЗапросНаОтменуПроведенияПланируемогоВвоза,
		НСтр(
			"ru = 'Запрос на отмену проведения';
			|en = 'Запрос на отмену проведения'")); 
		
	// битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС
	Категории.ПередачаДанных.Вставить(
		Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС,
		НСтр(
			"ru = 'Уведомление о начале оборота на территории РФ АП ЕГАИС';
			|en = 'Уведомление о начале оборота на территории РФ АП ЕГАИС'")); 
	
	Возврат Категории;
	
КонецФункции	

&ИзменениеИКонтроль("ПредставлениеСтатусаЕГАИС")
Функция бг_ПредставлениеСтатусаЕГАИС(СтатусЕГАИС, ВходящиеДальнейшееДействие, ДопустимыеДействия) Экспорт

	МассивДопустимыеДействия = Новый Массив;
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС") Тогда
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(СтатусЕГАИС) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВниманияЕГАИС = СтатусыЦветТекстаТребуетВниманияЕГАИС();
		
		Если СтатусыЦветТекстаТребуетВниманияЕГАИС.Найти(СтатусЕГАИС) <> Неопределено Тогда
			СтатусЕГАИСПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					Строка(СтатусЕГАИС),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина';
						|en = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусЕГАИСПредставление = Новый ФорматированнаяСтрока(Строка(СтатусЕГАИС));
		КонецЕсли;
		
	Иначе
		СтатусЕГАИСПредставление = СтатусЕГАИС;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС") И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусЕГАИСПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки = "";
		Если ДопустимоеДальнейшееДействие(ДальнейшееДействие, МассивДопустимыеДействия) Тогда
			Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки Тогда
				ТекстГиперссылки = "ЗапроситьОстатки";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеАкцизныеМарки Тогда
				ТекстГиперссылки = "ЗапроситьАкцизныеМарки";
#Вставка
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.бг_ЗапроситеФСМ Тогда
				ТекстГиперссылки = "ЗапроситьФСМ";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.бг_ОтправьтеОтчетОбИмпорте Тогда
				ТекстГиперссылки = "ОтправитьОтчетОбИмпорте";
#КонецВставки
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет Тогда
				ТекстГиперссылки = "ЗапроситьОтчет";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
				ТекстГиперссылки = "ПередатьДанные";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях Тогда
				ТекстГиперссылки = "ПодтвердитьАктОРасхождениях";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях Тогда
				ТекстГиперссылки = "ОтказатьсяОтАктаОРасхождениях";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной Тогда
				ТекстГиперссылки = "ОтказатьсяОтНакладной";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеПроверку Тогда
				ТекстГиперссылки = "ВыполнитьПроверку";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение Тогда
				ТекстГиперссылки = "ПодтвердитьПолучение";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения Тогда
				ТекстГиперссылки = "ЗапроситьОтменуПроведения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения Тогда
				ТекстГиперссылки = "ПодтвердитьЗапросНаОтменуПроведения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения Тогда
				ТекстГиперссылки = "ОтказатьсяОтЗапросаНаОтменуПроведения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
				ТекстГиперссылки = "ОтменитьОперацию";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных Тогда
				ТекстГиперссылки = "ОтменитьПередачу";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения Тогда
				ТекстГиперссылки = "ОтработайтеРасхождения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтклонитеОтработкуРасхождений Тогда
				ТекстГиперссылки = "ОтклонитеОтработкуРасхождений";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или';
															|en = 'или'") + " ");
			КонецЕсли;
			
			СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
				НРег(Строка(ДальнейшееДействие)),
				Новый Шрифт(,,,,Истина),
				ЦветаСтиля.ЦветГиперссылкиГосИС,
				,
				ТекстГиперссылки);
				
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусЕГАИСПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусЕГАИСПредставление;

КонецФункции

&ИзменениеИКонтроль("ОбработатьОтветНаЗапросПолученияДокумента")
Функция бг_ОбработатьОтветНаЗапросПолученияДокумента(ВходящиеДанные, ТаблицаСоответствияДокументовТипамЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", ВходящиеДанные.ТекстXML);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	ЧтениеXML = Новый ЧтениеXML;
	
#Вставка
	Если ВходящиеДанные.ТекстXML = Неопределено Тогда
		ВходящиеДанные.ТекстXML = "";
	КонецЕсли;
#КонецВставки

	ЧтениеXML.УстановитьСтроку(ВходящиеДанные.ТекстXML);
	
	Попытка
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), "Documents").Тип());
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать входящий документ %1';
							|en = 'Не удалось прочитать входящий документ %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВходящиеДанные.АдресЗапроса);
		
		ПредставлениеОшибки = ПредставлениеОшибкиXDTO(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЧтениеXML, ЧтениеXML.КонтекстПространствИмен.Глубина);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Попытка
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ИнтеграцияИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ВходящиеДанные.ТекстXML),
				ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), "Documents", Неопределено));
			
		Исключение
			
			ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос получения документа из ЕГАИС возникла ошибка.
				           |Текст ошибки: %ТекстОшибки%';
				           |en = 'При разборе XML ответа на запрос получения документа из ЕГАИС возникла ошибка.
				           |Текст ошибки: %ТекстОшибки%'"),
				РасширеннаяИнформацияОбОшибке(ПредставлениеОшибки, ПодробноеПредставлениеОшибки),
				ВозвращаемоеЗначение);
			
		КонецПопытки;
		
	КонецПопытки;
	
	Попытка
		
		Операция              = Неопределено;
		ФорматОбмена          = Неопределено;
		ТипЕГАИС              = Неопределено;
		ДокументыПоТипамЕГАИС = ИнтеграцияИС.ОбъектXDTOВСтруктуру(ОбъектXDTO.Document);
		Объект                = Неопределено;
		
		Для Каждого КлючИЗначение Из ДокументыПоТипамЕГАИС Цикл
			Если КлючИЗначение.Значение <> Неопределено Тогда
				ТипЕГАИС                  = КлючИЗначение.Ключ;
				Объект                    = ДокументыПоТипамЕГАИС[ТипЕГАИС];
				ВидДокументаИФорматОбмена = Перечисления.ВидыДокументовЕГАИС.ДанныеДокументаПоТипуЕГАИС(
					ТипЕГАИС, ТаблицаСоответствияДокументовТипамЕГАИС);
				Операция                  = ВидДокументаИФорматОбмена.ВидДокументаЕГАИС;
				ФорматОбмена              = ВидДокументаИФорматОбмена.ФорматОбмена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("ИдентификаторЗапроса", ВходящиеДанные.ИдентификаторЗапроса);
		СтруктураРезультата.Вставить("АдресЗапроса",         ВходящиеДанные.АдресЗапроса);
		СтруктураРезультата.Вставить("ТекстXML",             ВходящиеДанные.ТекстXML);
		
		СтруктураРезультата.Вставить("ТипЕГАИС",     ТипЕГАИС);
		СтруктураРезультата.Вставить("Операция",     Операция);
		СтруктураРезультата.Вставить("ФорматОбмена", ФорматОбмена);
		СтруктураРезультата.Вставить("Объект",       Объект);
		
		ВозвращаемоеЗначение.Результат = СтруктураРезультата;
		
	Исключение
		
		ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос получения документа из ЕГАИС возникла ошибка:
			           |Текст ошибки: %ТекстОшибки%';
			           |en = 'При разборе объекта XDTO ответа на запрос получения документа из ЕГАИС возникла ошибка:
			           |Текст ошибки: %ТекстОшибки%'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;

#Вставка
	// В квитанциях на заявление о выдаче ФСМ используются специфические имена операций
	Если ВозвращаемоеЗначение.Результат.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция
		И ВозвращаемоеЗначение.Результат.Объект.Свойство("OperationResult") 
		И ЗначениеЗаполнено(ВозвращаемоеЗначение.Результат.Объект.OperationResult) Тогда
		
		Если ВозвращаемоеЗначение.Результат.Объект.OperationResult.OperationName = "ReportUsingFSM" Тогда
			// Это квитанция на проведение отчета об использовании ФСМ.
			// "Виртуальная" операция, т.к. отчет об использовании ФСМ пользователем ЕГАИС не отправляется,
			// а формируется автоматически на стороне ЕГАИС на основании данных заявления о выдаче ФСМ.
			// Заменяем типовую абстрактную квитанцию на специальную операцию.
			ВозвращаемоеЗначение.Результат.Операция = Перечисления.ВидыДокументовЕГАИС.бг_КвитанцияОтчетОбИспользованииФСМ;
		КонецЕсли;
		
		Если ВозвращаемоеЗначение.Результат.Объект.OperationResult.OperationName = "Утверждение заявки в личном кабинете" Тогда
			// Это квитанция на проведение заявления о выдаче ФСМ.
			// Типовая реализация ЕГАИС (ИнтеграцияЕГАИС.ЗагрузитьКвитанциюПроведенЕГАИС) предполагает при проведении "Confirm"
			// Заменяем имя операции на ожидаемое
			ВозвращаемоеЗначение.Результат.Объект.OperationResult.OperationName = "Confirm";
		КонецЕсли;
		
		Если ВозвращаемоеЗначение.Результат.Объект.OperationResult.OperationName = "Утверждение заявки оператором" Тогда
			// Это квитанция на проведение уведомления о начале оборота АП.
			// Типовая реализация ЕГАИС (ИнтеграцияЕГАИС.ЗагрузитьКвитанциюПроведенЕГАИС) предполагает при проведении "Confirm".
			// Заменяем имя операции на ожидаемое.
			ВозвращаемоеЗначение.Результат.Объект.OperationResult.OperationName = "Confirm";
		КонецЕсли;
		
	КонецЕсли;
#КонецВставки	
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("СопоставитьАлкогольнуюПродукциюСНоменклатурой")
Процедура бг_СопоставитьАлкогольнуюПродукциюСНоменклатурой(Объект, НастройкиСопоставления = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(НастройкиСопоставления) <> Тип("Структура") Тогда
		НастройкиСопоставления = НастройкиСопоставленияАлкогольнойПродукцииСНоменклатуройВДокументе();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Т.Справка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Позиций.Порядок, 1)) + 1 КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		И Сопоставлено.Характеристика = Таблица.Характеристика
	|		И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		И Сопоставлено.Справка2 = Таблица.Справка2
	|		И Сопоставлено.Серия = Таблица.Серия
	|		И Сопоставлено.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Позиций
	|		ПО Позиций.Номенклатура = Таблица.Номенклатура
	|		И Позиций.Характеристика = Таблица.Характеристика
	|		И Позиций.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция
	|		И Позиций.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	&ПустаяСерия,
	|	Таблица.ИдентификаторУпаковки,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка),
	|	Сопоставлено.АлкогольнаяПродукция,
	|	1
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		И Сопоставлено.Характеристика = Таблица.Характеристика
	|		И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		И Сопоставлено.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|		И Сопоставлено.Серия = &ПустаяСерия
	|		И Сопоставлено.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.ИдентификаторУпаковки,
	|	Сопоставлено.АлкогольнаяПродукция");
	
	МассивКолонкиДляВыгрузки = Новый Массив;
	МассивКолонокДляДополнения = Новый Массив;
	КолонкиТабличнойЧасти = Объект[НастройкиСопоставления.ИмяТабличнойЧасти].Выгрузить(Новый Массив).Колонки;
	Для Каждого КлючИЗначение Из НастройкиСопоставления.Колонки Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) И КолонкиТабличнойЧасти.Найти(КлючИЗначение.Значение)<>Неопределено Тогда
			МассивКолонкиДляВыгрузки.Добавить(КлючИЗначение.Значение);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т."+КлючИЗначение.Ключ, "Т."+КлючИЗначение.Значение);
		Иначе
			МассивКолонокДляДополнения.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КолонкиДляВыгрузки = СтрСоединить(МассивКолонкиДляВыгрузки, ",");
	
	Данные = Объект[НастройкиСопоставления.ИмяТабличнойЧасти].Выгрузить(, КолонкиДляВыгрузки);
	
	Если МассивКолонокДляДополнения.Найти("Характеристика")<>Неопределено Тогда
		Данные.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КонецЕсли;
	Если МассивКолонокДляДополнения.Найти("Серия")<>Неопределено Тогда
		Данные.Колонки.Добавить("Серия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	КонецЕсли;
	Если МассивКолонокДляДополнения.Найти("ИдентификаторУпаковки")<>Неопределено Тогда
		Данные.Колонки.Добавить("ИдентификаторУпаковки", Метаданные.ОпределяемыеТипы.СтрокаЕГАИС.Тип);
	КонецЕсли;
	Если МассивКолонокДляДополнения.Найти("Справка2")<>Неопределено Тогда
		Данные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяНоменклатура"  ,  ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяСерия"  ,         ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
#Вставка     
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ТТНВходящаяЕГАИС") И ЗначениеЗаполнено(Выборка.Справка2) Тогда
			НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		Иначе	
#КонецВставки
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
#Вставка     
		КонецЕсли;
#КонецВставки
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыЕГАИС);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		// Требуется повторная инициализация поля (серия соответствия может быть сброшена заполнением статуса)
		НоваяЗапись.Серия = Выборка.Серия;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1';
			                         |en = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&ИзменениеИКонтроль("ПодобратьСправки2ДляСписанияИзРегистра1")
Процедура бг_ПодобратьСправки2ДляСписанияИзРегистра1(Товары, ОрганизацияЕГАИС, Период, СтруктураПересчетаСуммы) Экспорт

	Данные = ПодготовитьДанныеДляПодбораСправок2(Товары);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОстатки.АлкогольнаяПродукция                                                КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(ТаблицаОстатки.Справка2.ДокументОснование.ДатаТТН, ДАТАВРЕМЯ(1, 1, 1))    КАК ДатаТТН,
	|	ТаблицаОстатки.Справка2                                                            КАК Справка2,
	|	ТаблицаОстатки.ОрганизацияЕГАИС                                                    КАК ОрганизацияЕГАИС,
	|	ТаблицаОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(СправкиВДокументе.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ
	|	ВтОстатки
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(&Период,
	|			ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|				И АлкогольнаяПродукция В (
	|					ВЫБРАТЬ
	|						Т.АлкогольнаяПродукция
	|					ИЗ
	|						втТаблицаДляЗаполнения КАК Т
	|						
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						Т.АлкогольнаяПродукция
	|					ИЗ
	|						втТаблицаСоответствияБезАлкоПродукции КАК Т
	|					)
	|					) КАК ТаблицаОстатки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДляСписания КАК СправкиВДокументе
	|		ПО ТаблицаОстатки.АлкогольнаяПродукция = СправкиВДокументе.АлкогольнаяПродукция
	|			И ТаблицаОстатки.Справка2 = СправкиВДокументе.Справка2
	|;
	|	
	|ВЫБРАТЬ
	|	АкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2 КАК Справка2,
	|	КОЛИЧЕСТВО(АкцизныеМарки.АкцизнаяМарка) КАК Количество
	|ПОМЕСТИТЬ
	|	АкцизныеМарки
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстатки КАК втОстатки
	|		ПО ВтОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ВтОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|ГДЕ
	|	АкцизныеМарки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии),ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс))
	|СГРУППИРОВАТЬ ПО
	|	АкцизныеМарки.ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2;
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.АлкогольнаяПродукция                                                КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(ТаблицаОстатки.Справка2.ДокументОснование.ДатаТТН, ДАТАВРЕМЯ(1, 1, 1))    КАК ДатаТТН,
	|	ТаблицаОстатки.Справка2                                                            КАК Справка2,
	|	ТаблицаОстатки.Количество - ЕСТЬNULL(АкцизныеМарки.Количество, 0)                  КАК Количество
	|ИЗ
	|	ВТОстатки КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМарки КАК АкцизныеМарки
	|		ПО ТаблицаОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ТаблицаОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|ГДЕ
	|	ТаблицаОстатки.Количество - ЕСТЬNULL(АкцизныеМарки.Количество, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	АлкогольнаяПродукция,
	|	ДатаТТН
	|ИТОГИ ПО
	|	АлкогольнаяПродукция");

	Запрос.МенеджерВременныхТаблиц = Данные.МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Период", Период);

	КоэффициентыПересчетаВЕдиницыЕГАИС = Данные.КоэффициентыПересчетаВЕдиницыЕГАИС;
	ТаблицаСоответствия = Данные.ТаблицаСоответствия;
	ТаблицаСоответствияБезАлкоПродукции = Данные.ТаблицаСоответствияБезАлкоПродукции;
	
#Вставка
	УстановитьПривилегированныйРежим(Истина);
#КонецВставки

	ВыборкаАлкогольнаяПродукция = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАлкогольнаяПродукция.Следующий() Цикл

		Выборка = ВыборкаАлкогольнаяПродукция.Выбрать();
		Пока Выборка.Следующий() Цикл

			АлкогольнаяПродукция = ВыборкаАлкогольнаяПродукция.АлкогольнаяПродукция;
			ОстатокПоСправке     = Выборка.Количество;
			Справка2             = Выборка.Справка2;

			ЕстьСтрокиДляЗаполнения = ЗаполнитьСправку2ВТабличнойЧасти(
			Товары,
			АлкогольнаяПродукция,
			Справка2,
			ОстатокПоСправке,
			СтруктураПересчетаСуммы,
			КоэффициентыПересчетаВЕдиницыЕГАИС,
			ТаблицаСоответствия,
			ТаблицаСоответствияБезАлкоПродукции);

			Если Не ЕстьСтрокиДляЗаполнения Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьВXDTOАлкогольнуюПродукцию_v1")
Процедура бг_ЗаполнитьВXDTOАлкогольнуюПродукцию_v1(ОбъектXDTO, Источник, Префикс = "", СообщениеXML) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка");
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("Объем");
	Реквизиты.Вставить("Крепость");
	Реквизиты.Вставить("КодВидаПродукции");
	Реквизиты.Вставить("ТипПродукции");
	Реквизиты.Вставить("ВидЛицензии");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
#Вставка
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "ЭС");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССПП");
#КонецВставки
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Identity = Строка(Реквизиты.Ссылка.УникальныйИдентификатор());
	Иначе
		Identity = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Identity",  Identity,                      СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Type",      ТипыАП[Реквизиты.ВидЛицензии], СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "FullName",  Реквизиты.НаименованиеПолное,  СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ShortName", Реквизиты.Наименование,        СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcCode",   Реквизиты.Код,                 СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Capacity",  Реквизиты.Объем,               СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcVolume", Реквизиты.Крепость,            СообщениеXML);
	
	ЗаполнитьВXDTOОрганизацию_v1(ОбъектXDTO, "Producer", Источник, "Производитель", СообщениеXML);
	ЗаполнитьВXDTOОрганизацию_v1(ОбъектXDTO, "Importer", Источник, "Импортер",      СообщениеXML);
	
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ProductVCode", Реквизиты.КодВидаПродукции, СообщениеXML);
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьВXDTOАлкогольнуюПродукцию_v2")
Процедура бг_ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(ОбъектXDTO, Источник, Префикс = "", СообщениеXML) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("Объем");
	Реквизиты.Вставить("Крепость");
	Реквизиты.Вставить("КодВидаПродукции");
	Реквизиты.Вставить("ТипПродукции");
	Реквизиты.Вставить("ВидЛицензии");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
#Вставка
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "ЭС");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССПП");
#КонецВставки

	ТипыПродукции = Новый Соответствие;
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.ПустаяСсылка(), "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Упакованная, "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Неупакованная, "Unpacked");
	
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "UnitType",  ТипыПродукции[Реквизиты.ТипПродукции], СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Type",      ТипыАП[Реквизиты.ВидЛицензии],         СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "FullName",  Реквизиты.НаименованиеПолное,          СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ShortName", Реквизиты.Наименование,                СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcCode",   Реквизиты.Код,                         СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Capacity",  Реквизиты.Объем,                       СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcVolume", Реквизиты.Крепость,                    СообщениеXML);
	
	ЗаполнитьВXDTOОрганизацию_v2(ОбъектXDTO, "Producer", Источник, "Производитель", СообщениеXML);
	
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ProductVCode", Реквизиты.КодВидаПродукции, СообщениеXML);
	
КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьВXDTOОрганизацию_v2")
Процедура бг_ЗаполнитьВXDTOОрганизацию_v2(ОбъектXDTOРодитель, ИмяПоля, Источник, Префикс = "", СообщениеXML) Экспорт
	
	ЕстьДанныеИсточникаДляЗаполнения = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, Префикс + "Код");
	Если Не ЕстьДанныеИсточникаДляЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTOРодитель, ИмяПоля);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("ИНН");
	Реквизиты.Вставить("КПП");
	Реквизиты.Вставить("КодСтраны");
	Реквизиты.Вставить("КодРегиона");
	Реквизиты.Вставить("ПредставлениеАдреса");
	Реквизиты.Вставить("ТипОрганизации");
	Реквизиты.Вставить("ИдентификаторОрганизацииТС");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОрганизацияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "UL");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОрганизацияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "FL");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОрганизацияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "FO");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОрганизацияXDTO = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "TS");
	КонецЕсли;
	
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "ClientRegId", Реквизиты.Код,                        СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "FullName",    Реквизиты.НаименованиеПолное,         СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "ShortName",   Реквизиты.Наименование,               СообщениеXML);
#Вставка
	// В некоторых xsd эти атрибуты расположены непосредственно в родительском элементе,
	// например, FrapClaims (Уведомление о начале оборота АП) элемент - Notifier.
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ClientRegId", Реквизиты.Код, СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "FullName", Реквизиты.НаименованиеПолное, СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ShortName", Реквизиты.Наименование, СообщениеXML);
#КонецВставки
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "INN",         Реквизиты.ИНН,                        СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "KPP",         Реквизиты.КПП,                        СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "TSNUM",       Реквизиты.ИдентификаторОрганизацииТС, СообщениеXML);
	
	ОрганизацияXDTO.address = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОрганизацияXDTO, "address");
	
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "Country",     Формат(Реквизиты.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "RegionCode",  Формат(Реквизиты.КодРегиона, "ЧЦ=2; ЧВН="),     СообщениеXML);
	ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "description", Реквизиты.ПредставлениеАдреса,                  СообщениеXML);
	
	Если Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОбъектXDTO.UL = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОбъектXDTO.FL = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОбъектXDTO.FO = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОбъектXDTO.TS = ОрганизацияXDTO;
	КонецЕсли;
	
#Удаление
	ОбъектXDTOРодитель[ИмяПоля] = ОбъектXDTO;
#КонецУдаления
#Вставка
	// В некоторых xsd организации ЕГАИС могут быть в элементе, который является списком XDTO,
	// например, FrapClaims (Уведомление о начале оборота АП) производитель, элемент - Producer.
	Если ТипЗнч(ОбъектXDTOРодитель[ИмяПоля]) = Тип("СписокXDTO") Тогда
		ОбъектXDTOРодитель[ИмяПоля].Добавить(ОбъектXDTO);
	Иначе
		ОбъектXDTOРодитель[ИмяПоля] = ОбъектXDTO;
	КонецЕсли;
#КонецВставки
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

&Вместо("ДокументСоответствуетТипуЕГАИС")
Функция бг_ДокументСоответствуетТипуЕГАИС(ДокументСсылка, ТипЕГАИС)
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	ДокументСоответствуетТипуЕГАИС = Ложь;
	
	Если ТипДокумента = Тип("ДокументСсылка.битАктОбУничтоженииФСМ") Тогда
		ДокументСоответствуетТипуЕГАИС = СтрСравнить(ТипЕГАИС, "ReportDestructionAMFSM") = 0; 
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.битПланируемыйВвозЕГАИС") Тогда
		ДокументСоответствуетТипуЕГАИС = СтрСравнить(ТипЕГАИС, "InvoicePlannedImport") = 0;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.битУведомлениеОНачалеОборотаНаТерриторииРФАПЕГАИС") Тогда
		ДокументСоответствуетТипуЕГАИС = СтрСравнить(ТипЕГАИС, "FrapClaims") = 0;
	Иначе 
		ДокументСоответствуетТипуЕГАИС = ПродолжитьВызов(ДокументСсылка, ТипЕГАИС);
	КонецЕсли;
	
	Возврат ДокументСоответствуетТипуЕГАИС;
	
КонецФункции

&Вместо("НайтиОбъектПоИдентификаторуТипаЕГАИСПриЗагрузкеКвитанции")
Функция бг_НайтиОбъектПоИдентификаторуТипаЕГАИСПриЗагрузкеКвитанции(Идентификатор, ТипЕГАИС, ВидКвитанции, ОрганизацияЕГАИС = Неопределено)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ДанныеДокументаПоТипуЕГАИС(ТипЕГАИС).ВидДокументаЕГАИС;
	
	Если ЗначениеЗаполнено(Операция) Тогда
		
		Если Операция = Перечисления.ВидыДокументовЕГАИС.бг_ЗаявлениеОВыдачеФСМ Тогда

			РезультатПоиска = бг_НайтиОбъектПоИдентификаторуТипаЕГАИСПриЗагрузкеКвитанцииНаЗаявлениеОВыдачеФСМ(
				Идентификатор,
				ВидКвитанции);
				
			Возврат РезультатПоиска;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат ПродолжитьВызов(Идентификатор, ТипЕГАИС, ВидКвитанции, ОрганизацияЕГАИС);
	
КонецФункции

&ИзменениеИКонтроль("ДанныеСправки")
// Получает данные справок А и Б в виде структуры для последующей загрузки в базу.
//
Функция бг_ДанныеСправки(ДанныеДокумента, ВидСправки)
	
	// Соответствие между реквизитами справки (Ключ) и свойствами объекта XDTO (Значение)
	СоответствияРеквизитов = Новый Соответствие;
	СоответствияРеквизитов.Вставить("Количество", "Quantity");
	
	Если ВидСправки = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1 Тогда
		
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
		
		Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformARegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "TTNNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "TTNDate");
			СоответствияРеквизитов.Вставить("ДатаОтгрузки", "ShippingDate");
			
			ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(ДанныеДокумента.Объект.Shipper);
			ДанныеСправки.Грузополучатель = ЗагрузитьОрганизацию(ДанныеДокумента.Объект.Consignee);
			
		Иначе
			
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF1RegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "OriginalDocNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "OriginalDocDate");
			
			Если ДанныеДокумента.Объект.OriginalClient <> Неопределено Тогда
				ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(ДанныеДокумента.Объект.OriginalClient);
			КонецЕсли;
			
		КонецЕсли;
		
		СоответствияРеквизитов.Вставить("ДатаРозлива", "BottlingDate");
		СоответствияРеквизитов.Вставить("НомерПодтвержденияЕГАИС", "EGAISNumber");
		СоответствияРеквизитов.Вставить("ДатаПодтвержденияЕГАИС", "EGAISDate");
	Иначе
		
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
		
		Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformBRegId");
		Иначе
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF2RegId");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствияРеквизитов Цикл
		ДанныеСправки[КлючЗначение.Ключ] = ДанныеДокумента.Объект[КлючЗначение.Значение];
	КонецЦикла;

#Вставка
	бг_ДополнитьДанныеСправки1ДаннымиГТД(ДанныеСправки, ДанныеДокумента);
	Если ВидСправки = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1 Тогда
		бг_ДополнитьДанныеСправки1ДаннымиКрепости(ДанныеСправки, ДанныеДокумента);
	КонецЕсли;
#КонецВставки

	АлкогольнаяПродукция = Новый Массив;
	АлкогольнаяПродукция.Добавить(ДанныеДокумента.Объект.Product);
	
	СоответствиеЗагруженнаяАлкогольнаяПродукция = ЗагрузитьАлкогольнуюПродукцию(АлкогольнаяПродукция);
	
	Если СоответствиеЗагруженнаяАлкогольнаяПродукция[ДанныеДокумента.Объект.Product.AlcCode] <> Неопределено Тогда
		ДанныеСправки.АлкогольнаяПродукция = СоответствиеЗагруженнаяАлкогольнаяПродукция[ДанныеДокумента.Объект.Product.AlcCode].АлкогольнаяПродукция;
	КонецЕсли;
	
	Возврат ДанныеСправки;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьОрганизацию")
Функция бг_ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, ЗагрузкаИзКлассификатора = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизацииXDTO, "OrgInfoV2") Тогда
		ТипОрганизации = ТипОрганизации(ДанныеОрганизацииXDTO.OrgInfoV2);
		ЗагружаемаяОрганизацияXDTO = ДанныеОрганизации(ДанныеОрганизацииXDTO.OrgInfoV2);
	Иначе
		ТипОрганизации = ТипОрганизации(ДанныеОрганизацииXDTO);
		ЗагружаемаяОрганизацияXDTO = ДанныеОрганизации(ДанныеОрганизацииXDTO);
	КонецЕсли;
	
	НайденнаяОрганизация = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ЗагружаемаяОрганизацияXDTO.ClientRegId);
	
	Если Не ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
		СправочникОбъект = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
		СправочникОбъект.Код = ЗагружаемаяОрганизацияXDTO.ClientRegId;
	Иначе
		СправочникОбъект = НайденнаяОрганизация.ПолучитьОбъект();
	КонецЕсли;
	
	ТребуетсяОбновлениеЭлемента = ЗагрузкаИзКлассификатора
		Или СправочникОбъект.ЭтоНовый()
		Или Не СправочникОбъект.СоответствуетОрганизации;
	Если Не ТребуетсяОбновлениеЭлемента Тогда
		Возврат СправочникОбъект.Ссылка;
	КонецЕсли;
	
#Удаление
	СправочникОбъект.Наименование = ?(ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.ShortName), ЗагружаемаяОрганизацияXDTO.FullName, ЗагружаемаяОрганизацияXDTO.ShortName);
#КонецУдаления
#Вставка
	Если ЗагружаемаяОрганизацияXDTO.Свойство("ShortName") И Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.ShortName) Тогда
		СправочникОбъект.Наименование = ЗагружаемаяОрганизацияXDTO.ShortName
	Иначе	
		СправочникОбъект.Наименование = ЗагружаемаяОрганизацияXDTO.FullName;
	КонецЕсли;	
#КонецВставки
	
	Если ЗначениеЗаполнено(ЗагружаемаяОрганизацияXDTO.FullName) Тогда
		СправочникОбъект.НаименованиеПолное = ЗагружаемаяОрганизацияXDTO.FullName;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипОрганизации) Тогда
		СправочникОбъект.ТипОрганизации = ТипОрганизации;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "INN") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.INN) Тогда
			СправочникОбъект.ИНН = СокрЛП(ЗагружаемаяОрганизацияXDTO.INN);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "KPP") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.KPP) Тогда
			СправочникОбъект.КПП = СокрЛП(ЗагружаемаяОрганизацияXDTO.KPP);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "TSNUM") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.TSNUM) Тогда
			СправочникОбъект.ИдентификаторОрганизацииТС = СокрЛП(ЗагружаемаяОрганизацияXDTO.TSNUM);
		КонецЕсли;
	КонецЕсли;
	
	КодСтраны = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Country);
	Если КодСтраны <> 0 Тогда
		СправочникОбъект.КодСтраны = КодСтраны;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO.address, "RegionCode") Тогда
		КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.RegionCode);
		Если КодРегиона <> 0 Тогда
			СправочникОбъект.КодРегиона = КодРегиона;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO.address, "Index") Тогда
		ПочтовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Index);
		Если ПочтовыйИндекс <> 0 Тогда
			СправочникОбъект.ПочтовыйИндекс = ПочтовыйИндекс;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемаяОрганизацияXDTO.address.description) Тогда
		СправочникОбъект.ПредставлениеАдреса = СокрЛП(ЗагружаемаяОрганизацияXDTO.address.description);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизацииXDTO, "VersionWB") Тогда
		Если ВРег(ДанныеОрганизацииXDTO.VersionWB) = ВРег("WayBill_v4") Тогда
			СправочникОбъект.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4;
		Иначе
			СправочникОбъект.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
		КонецЕсли;
	КонецЕсли;
	
	СправочникОбъект.Адрес = "";
	
	Если Не ЗначениеЗаполнено(СправочникОбъект.ТипОрганизации) Тогда
		Если НЕ ПустаяСтрока(СправочникОбъект.ИдентификаторОрганизацииТС) Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		ИначеЕсли ПустаяСтрока(СправочникОбъект.ИНН) И ПустаяСтрока(СправочникОбъект.КПП) Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		ИначеЕсли ПустаяСтрока(СправочникОбъект.КПП) И СтрДлина(СокрЛП(СправочникОбъект.ИНН)) = 12 Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		Иначе
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		КонецЕсли;
	КонецЕсли;
	
	Если СправочникОбъект.Модифицированность() Тогда
#Вставка
		ЭтоНовый = СправочникОбъект.ЭтоНовый();
#КонецВставки
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеОрганизации(СправочникОбъект);
		СправочникОбъект.Записать();
#Вставка
		Если ЭтоНовый Тогда
			бг_ЗарегистрироватьНовуюОрганизациюЕГАИСДляОтложеннойОбработки(СправочникОбъект.Ссылка);
		КонецЕсли;
#КонецВставки
	КонецЕсли;
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьТТНВходящуюЕГАИС")
Функция бг_ЗагрузитьТТНВходящуюЕГАИС(ОрганизацияЕГАИС, ДополнительныеДанные) Экспорт
	
	ДанныеДокументаТТН                     = ДополнительныеДанные.ДанныеДокументаТТН;
	ДанныеДокументаУведомлениеОРегистрации = ДополнительныеДанные.ДанныеДокументаУведомлениеОРегистрации;
	ДанныеДокументаИсторияПоСправкам2      = ДополнительныеДанные.ДанныеДокументаИсторияПоСправкам2;
	ДанныеДокументаТранспортнаяНакладная   = ДополнительныеДанные.ДанныеДокументаТранспортнаяНакладная;
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	Ссылка = Документы.ТТНВходящаяЕГАИС.ПолучитьСсылку();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокументаТТН.Операция);
	Реквизиты.Вставить("Документ",             Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   Неопределено);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получена ТТН ЕГАИС (входящая)';
													|en = 'Получена ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаТТН.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокументаТТН.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокументаТТН.АдресЗапроса);
#КонецВставки
	
	РезультатДобавленияЗаписиТТН = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокументаТТН.ТекстXML,
		Реквизиты, Истина);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокументаУведомлениеОРегистрации.Операция);
	Реквизиты.Вставить("Документ",             Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   Неопределено);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получено уведомление о регистрации движения ТТН ЕГАИС (входящая)';
													|en = 'Получено уведомление о регистрации движения ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаУведомлениеОРегистрации.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокументаУведомлениеОРегистрации.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса);
#КонецВставки
	
	ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокументаУведомлениеОРегистрации.ТекстXML,
		Реквизиты, Истина);
	
	Если РезультатДобавленияЗаписиТТН.НовоеСообщение Тогда
		
		ДокументОбъект = Документы.ТТНВходящаяЕГАИС.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Ссылка);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект.Идентификатор      = Строка(ДанныеДокументаТТН.Объект.Identity);
		ДокументОбъект.ИдентификаторЕГАИС = Строка(ДанныеДокументаУведомлениеОРегистрации.Объект.Header.WBRegId);
		ДокументОбъект.ФорматОбмена       = ДанныеДокументаТТН.ФорматОбмена;
		
		Если СтрНайти(ВРег(ДанныеДокументаТТН.Объект.Header.Type), ВРег("Return")) > 0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
		КонецЕсли;
		
		Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			ДокументОбъект.Упакована = (ДанныеДокументаТТН.Объект.Header.UnitType = "Packed");
		КонецЕсли;
		
		ДокументОбъект.НомерТТН         = ДанныеДокументаТТН.Объект.Header.NUMBER;
		ДокументОбъект.ДатаТТН          = ДанныеДокументаТТН.Объект.Header.Date;
		ДокументОбъект.ДатаОтгрузки     = ДанныеДокументаТТН.Объект.Header.ShippingDate;
		ДокументОбъект.Грузоотправитель = ЗагрузитьОрганизацию(ДанныеДокументаТТН.Объект.Header.Shipper);
		ДокументОбъект.Грузополучатель  = ЗагрузитьОрганизацию(ДанныеДокументаТТН.Объект.Header.Consignee);
		
		Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1
			И ДанныеДокументаТТН.Объект.Header.Свойство("Supplier")
			И ДанныеДокументаТТН.Объект.Header.Supplier <> Неопределено Тогда
			ДокументОбъект.Поставщик = ЗагрузитьОрганизацию(ДанныеДокументаТТН.Объект.Header.Supplier);
		КонецЕсли;
		
		ДокументОбъект.Основание   = ДанныеДокументаТТН.Объект.Header.Base;
		ДокументОбъект.Комментарий = ДанныеДокументаТТН.Объект.Header.Note;
		
		Если ДанныеДокументаТТН.Объект.Header.Transport <> Неопределено Тогда
			
			ДокументОбъект.ТипДоставки = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_TYPE;
			ДокументОбъект.Перевозчик  = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_COMPANY;
			
			Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
				ДокументОбъект.ТипТранспорта              = ТипТранспорта(ДанныеДокументаТТН.Объект.Header.Transport.TRAN_TYPE,, Ложь);
				ДокументОбъект.НомерТранспортногоСредства = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_CAR;
			Иначе // Формат V4 и выше
				ДокументОбъект.ТипТранспорта                        = ТипТранспорта(ДанныеДокументаТТН.Объект.Header.Transport.TRANSPORT_TYPE);
				ДокументОбъект.НомерТранспортногоСредства           = ДанныеДокументаТТН.Объект.Header.Transport.TRANSPORT_REGNUMBER;
				ДокументОбъект.ТоварВПутиПринадлежитГрузополучателю = ТоварВПутиПринадлежитГрузоотправителю(ДанныеДокументаТТН.Объект.Header.Transport.ChangeOwnership);
			КонецЕсли;
			
			ДокументОбъект.Прицеп          = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_TRAILER;
			ДокументОбъект.Заказчик        = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_CUSTOMER;
			ДокументОбъект.Водитель        = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_DRIVER;
			ДокументОбъект.ПунктПогрузки   = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_LOADPOINT;
			ДокументОбъект.ПунктРазгрузки  = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_UNLOADPOINT;
			ДокументОбъект.Перенаправление = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_REDIRECT;
			ДокументОбъект.Экспедитор      = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_FORWARDER;
			
		КонецЕсли;
		
		СписокАлкогольнойПродукции = Новый Массив;
		Для Каждого ЭлементДанных Из ДанныеДокументаТТН.Объект.Content.Position Цикл
			Если СписокАлкогольнойПродукции.Найти(ЭлементДанных.Product) = Неопределено Тогда
				СписокАлкогольнойПродукции.Добавить(ЭлементДанных.Product);
			КонецЕсли;
		КонецЦикла;
		
		Товары         = Новый Соответствие;
		НомераСправки1 = Новый Соответствие;
		ДиапазоныМарок = Новый Соответствие;
		
		СоответствиеЗагруженнаяАлкогольнаяПродукция = ЗагрузитьАлкогольнуюПродукцию(СписокАлкогольнойПродукции);
		
		Для Каждого ЭлементДанных Из ДанныеДокументаТТН.Объект.Content.Position Цикл
			
			ДанныеАлкогольнойПродукции = СоответствиеЗагруженнаяАлкогольнаяПродукция[ЭлементДанных.Product.AlcCode];
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.ИдентификаторУпаковки = ЭлементДанных.Pack_ID;
			НоваяСтрока.Количество            = ЭлементДанных.Quantity;
			НоваяСтрока.КоличествоФакт        = 0;
			НоваяСтрока.Цена                  = ЭлементДанных.Price;
			НоваяСтрока.НомерПартии           = ЭлементДанных.Party;
			НоваяСтрока.ИдентификаторСтроки   = ЭлементДанных.Identity;
#Вставка
			Если ЭлементДанных.Свойство("alcPercent") Тогда 
				НоваяСтрока.бг_ФактическаяКрепость = ЭлементДанных.alcPercent;
			КонецЕсли;
#КонецВставки
			
			Если ДанныеАлкогольнойПродукции <> Неопределено Тогда
				НоваяСтрока.АлкогольнаяПродукция = ДанныеАлкогольнойПродукции.АлкогольнаяПродукция;
				
#Удаление
				СтрокиСопоставления = ДанныеАлкогольнойПродукции.ТаблицаСопоставления[НоваяСтрока.ИдентификаторУпаковки];
				Если СтрокиСопоставления <> Неопределено И СтрокиСопоставления.Количество() = 1 Тогда
					НоваяСтрока.Номенклатура = СтрокиСопоставления[0].Номенклатура;
					НоваяСтрока.Характеристика = СтрокиСопоставления[0].Характеристика;
				КонецЕсли;
#КонецУдаления
			КонецЕсли;
			
			Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				MarkInfoRanges = ЭлементДанных.InformB.InformBItem.MarkInfo;
				НомераСправки1.Вставить(ЭлементДанных.Identity, ЭлементДанных.InformA.RegId);
				НоваяСтрока.НомерСправки2Поставщика = ЭлементДанных.InformB.InformBItem.BRegId;
			ИначеЕсли ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
				MarkInfoRanges = ЭлементДанных.InformF2.InformF2Item.MarkInfo;
				НомераСправки1.Вставить(ЭлементДанных.Identity, ЭлементДанных.InformF1.RegId);
				НоваяСтрока.НомерСправки2Поставщика = ЭлементДанных.InformF2.InformF2Item.F2RegId;
			ИначеЕсли ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
				MarkInfo = ЭлементДанных.InformF2.MarkInfo;
				НомераСправки1.Вставить(ЭлементДанных.Identity, ЭлементДанных.FARegId);
				НоваяСтрока.НомерСправки2Поставщика = ЭлементДанных.InformF2.F2RegId;
			КонецЕсли;
			
			Диапазоны = Новый Массив;
			Если MarkInfoRanges <> Неопределено Тогда
				
				Для Каждого ДанныеДиапазона Из MarkInfoRanges.Ranges.Range Цикл
					
					Диапазон = Новый Структура;
					Диапазон.Вставить("ТипМарки",       MarkInfoRanges.Type);
					Диапазон.Вставить("Идентификатор",  ДанныеДиапазона.Identity);
					Диапазон.Вставить("СерияМарки",     ДанныеДиапазона.Rank);
					Диапазон.Вставить("НачальныйНомер", ДанныеДиапазона.Start);
					Диапазон.Вставить("КонечныйНомер",  ДанныеДиапазона.Last);
					
					Диапазоны.Добавить(Диапазон);
					
				КонецЦикла;
				
			КонецЕсли;
			ДиапазоныМарок.Вставить(ЭлементДанных.Identity, Диапазоны);
			
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			
			Товары.Вставить(ЭлементДанных.Identity, НоваяСтрока);
			
		КонецЦикла;
		
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
		
		Для Каждого ЭлементДанных Из ДанныеДокументаУведомлениеОРегистрации.Объект.Content.Position Цикл
			
			ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
			
			Если ДанныеДокументаУведомлениеОРегистрации.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				РегистрационныйНомер = ЭлементДанных.InformBRegId;
			Иначе
				РегистрационныйНомер = ЭлементДанных.InformF2RegId;
			КонецЕсли;
			
			СчитанаАкцизнаяМарка = Ложь;
			ПоштучнаяПродукция   = Ложь;
			
			Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
				Для Каждого ЭлементДанныхТТН Из ДанныеДокументаТТН.Объект.Content.Position Цикл
					Если ЭлементДанных.Identity = ЭлементДанныхТТН.Identity Тогда
						MarkInfo = ЭлементДанныхТТН.InformF2.MarkInfo;
						Если MarkInfo <> Неопределено Тогда
							Для Каждого boxpos Из MarkInfo.boxpos Цикл
								Если boxpos.amclist <> Неопределено Тогда
									Для Каждого КодАкцизнойМарки Из boxpos.amclist.amc Цикл
										СчитанаАкцизнаяМарка = Истина;
										Если СтрДлина(СокрЛП(КодАкцизнойМарки)) = 150 Тогда
											ПоштучнаяПродукция = Истина;
										КонецЕсли;
										Прервать;
									КонецЦикла;
								КонецЕсли;
								Если СчитанаАкцизнаяМарка Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДанныеСправки2.НомерПодтвержденияЕГАИС = ДанныеДокументаУведомлениеОРегистрации.Объект.Header.EGAISFixNumber;
			ДанныеСправки2.ДатаПодтвержденияЕГАИС  = ДанныеДокументаУведомлениеОРегистрации.Объект.Header.EGAISFixDate;
			ДанныеСправки2.РегистрационныйНомер    = РегистрационныйНомер;
			ДанныеСправки2.Наименование            = РегистрационныйНомер;
			ДанныеСправки2.Поштучная               = ПоштучнаяПродукция;
			
			СтрокаТовара = Товары.Получить(ЭлементДанных.Identity);
			
			ДанныеСправки2.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
			ДанныеСправки2.Количество           = СтрокаТовара.Количество;
			ДанныеСправки2.НомерСправки1        = НомераСправки1.Получить(ЭлементДанных.Identity);
			ДанныеСправки2.ДокументОснование    = Ссылка;
			ДанныеСправки2.ДиапазоныМарок       = ДиапазоныМарок.Получить(ЭлементДанных.Identity);
			
			НоваяСправка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
			
			СтрокаТовара.Справка2 = НоваяСправка2;
			
		КонецЦикла;
		
		Если ДанныеДокументаИсторияПоСправкам2 <> Неопределено Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
			Реквизиты.Вставить("Операция",             ДанныеДокументаИсторияПоСправкам2.Операция);
			Реквизиты.Вставить("Документ",             Ссылка);
			Реквизиты.Вставить("СообщениеОснование",   Неопределено);
			Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение истории справок 2 по ТТН';
															|en = 'Получение истории справок 2 по ТТН'"));
			Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаИсторияПоСправкам2.ИдентификаторЗапроса);
			Реквизиты.Вставить("ФорматОбмена",         ДокументОбъект.ФорматОбмена);
			Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
			Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокументаИсторияПоСправкам2.АдресЗапроса);
#КонецВставки
			
			РезультатДобавленияЗаписиИстории = ДобавитьЗаписьВПротоколОбмена(
				ДанныеДокументаИсторияПоСправкам2.ТекстXML,
				Реквизиты);
			
			Если РезультатДобавленияЗаписиИстории.НовоеСообщение Тогда
				
				Для Каждого ЭлементДанных Из ДанныеДокументаИсторияПоСправкам2.Объект.Content.Position Цикл
					
					Для Каждого ЭлементДанныхШаг Из ЭлементДанных.HistF2.step Цикл
						
						СтрокаТЧ = ДокументОбъект.ИсторияСправок2.Добавить();
						СтрокаТЧ.ИдентификаторСтроки = ЭлементДанных.Identity;
						
						СтрокаТЧ.Шаг                            = ЭлементДанныхШаг.lev;
						СтрокаТЧ.РегистрационныйНомер           = ЭлементДанныхШаг.Form2;
						СтрокаТЧ.РегистрационныйНомерПоставщика = ЭлементДанныхШаг.parentForm2;
						СтрокаТЧ.ГрузоотправительКод            = ЭлементДанныхШаг.Shipper;
						СтрокаТЧ.ГрузополучательКод             = ЭлементДанныхШаг.Consignee;
						СтрокаТЧ.НомерТТН                       = ЭлементДанныхШаг.WBRegId;
						СтрокаТЧ.Количество                     = ЭлементДанныхШаг.amount;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеДокументаТранспортнаяНакладная <> Неопределено Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
			Реквизиты.Вставить("Операция",             Перечисления.ВидыДокументовЕГАИС.КвитанцияВходящейТранспортнойНакладной);
			Реквизиты.Вставить("Документ",             Ссылка);
			Реквизиты.Вставить("СообщениеОснование",   Неопределено);
			Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение квитанции по транспортной накладной с переходом права собственности по ТТН';
															|en = 'Получение квитанции по транспортной накладной с переходом права собственности по ТТН'"));
			Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаТранспортнаяНакладная.ИдентификаторЗапроса);
			Реквизиты.Вставить("ФорматОбмена",         ДокументОбъект.ФорматОбмена);
			Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
			
			РезультатДобавленияЗаписиИстории = ДобавитьЗаписьВПротоколОбмена(
				ДанныеДокументаИсторияПоСправкам2.ТекстXML,
				Реквизиты);
			
			Если РезультатДобавленияЗаписиИстории.НовоеСообщение Тогда
				
				ДокументОбъект.НомерТранспортнойНакладной = ДанныеДокументаТранспортнаяНакладная.RegID;
				ДокументОбъект.ДатаТранспортнойНакладной  = ДанныеДокументаТранспортнаяНакладная.TicketDate;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеТТНВходящаяЕГАИС(ДокументОбъект);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокументаТТН.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокументаТТН.ФорматОбмена;
		
		ПолноеИмя = Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			Ссылка, ДанныеДокументаТТН.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ОбъектИзменен = Истина;
		
		ДокументОснование = ДокументОбъект.ДокументОснование;
		ДокументСсылка    = Ссылка;
		
	Иначе
		
		ДокументОснование = РезультатДобавленияЗаписиТТН.ДокументОснование;
		ДокументСсылка    = РезультатДобавленияЗаписиТТН.Документ;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокументаТТН.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокументаТТН.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = Неопределено;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписиТТН.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументСсылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокументаУведомлениеОРегистрации.Операция,
			ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса));
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокументаТТН.Операция,
			ДанныеДокументаТТН.АдресЗапроса));
			
	Если ДанныеДокументаИсторияПоСправкам2 <> Неопределено Тогда
		СлужебныеДанные.Добавить(
			СлужебныеДанные(
				ОрганизацияЕГАИС,
				ДанныеДокументаИсторияПоСправкам2.Операция,
				ДанныеДокументаИсторияПоСправкам2.АдресЗапроса));
	КонецЕсли;
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьУведомлениеОРегистрацииДвиженияТТН")
Функция бг_ЗагрузитьУведомлениеОРегистрацииДвиженияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"Идентификатор",
		ДанныеДокумента.Объект.Header.Identity);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о регистрации движения ТТН:
			           |Не найден документ ТТН ЕГАИС (исходящая) с идентификатором %1.';
			           |en = 'При загрузке уведомления о регистрации движения ТТН:
			           |Не найден документ ТТН ЕГАИС (исходящая) с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.Identity);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение уведомления о регистрации движения ТТН ЕГАИС (исходящая)';
													|en = 'Получение уведомления о регистрации движения ТТН ЕГАИС (исходящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
#Вставка
		Если ДанныеДокумента.Объект.Свойство("Header") Тогда
			Если ДанныеДокумента.Объект.Header.Свойство("EGAISFixDate") Тогда
				ДокументОбъект.бг_ДатаФиксацииЕГАИС = ДанныеДокумента.Объект.Header.EGAISFixDate;
			КонецЕсли;
			Если ДанныеДокумента.Объект.Header.Свойство("EGAISFixNumber") Тогда
				ДокументОбъект.бг_НомерФиксацииЕГАИС = ДанныеДокумента.Объект.Header.EGAISFixNumber;
			КонецЕсли;
		КонецЕсли;
#КонецВставки
		ТоварыИтоги = Новый ТаблицаЗначений;
		ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
		ТоварыИтоги.Колонки.Добавить("ИдентификаторУпаковки");
		ТоварыИтоги.Колонки.Добавить("НомерПартии");
		ТоварыИтоги.Колонки.Добавить("Справка2");
		ТоварыИтоги.Колонки.Добавить("Цена");
		
		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
			
			НоваяСтрока = ТоварыИтоги.Добавить();
			НоваяСтрока.АлкогольнаяПродукция  = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.ИдентификаторУпаковки = СтрокаТЧ.ИдентификаторУпаковки;
			НоваяСтрока.НомерПартии           = СтрокаТЧ.НомерПартии;
			НоваяСтрока.Справка2              = СтрокаТЧ.Справка2;
			НоваяСтрока.Цена                  = СтрокаТЧ.Цена;
			
		КонецЦикла;
		
		ТоварыИтоги.Свернуть(
			"АлкогольнаяПродукция,
			|ИдентификаторУпаковки,
			|НомерПартии,
			|Справка2,
			|Цена");
		
		Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Content.Position Цикл
			
			ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЭлементДанных.Identity) - 1;
			
			Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				НомерСправки2 = ЭлементДанных.InformBRegId;
			Иначе
				НомерСправки2 = ЭлементДанных.InformF2RegId;
			КонецЕсли;
			
			Если ТоварыИтоги.Количество() > ИндексСтроки Тогда
				
				СтрокаТЧИтоги = ТоварыИтоги[ИндексСтроки];
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("АлкогольнаяПродукция",  СтрокаТЧИтоги.АлкогольнаяПродукция);
				ПараметрыОтбора.Вставить("ИдентификаторУпаковки", СтрокаТЧИтоги.ИдентификаторУпаковки);
				ПараметрыОтбора.Вставить("НомерПартии",           СтрокаТЧИтоги.НомерПартии);
				ПараметрыОтбора.Вставить("Справка2",              СтрокаТЧИтоги.Справка2);
				ПараметрыОтбора.Вставить("Цена",                  СтрокаТЧИтоги.Цена);
				
				НайденныеСтрокиТЧТовары = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаТЧ Из НайденныеСтрокиТЧТовары Цикл
					СтрокаТЧ.НомерСправки2Покупателя = НомерСправки2;
				КонецЦикла;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'При загрузке уведомления о регистрации движения ТТН:
						|Не найдена строка документа ТТН ЕГАИС (исходящая) по идентификатору %1 (Поиск выполняется по набору ключевых реквизитов).';
						|en = 'При загрузке уведомления о регистрации движения ТТН:
						|Не найдена строка документа ТТН ЕГАИС (исходящая) по идентификатору %1 (Поиск выполняется по набору ключевых реквизитов).'"),
					ЭлементДанных.Identity);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписыватьДокумент = ДокументОбъект.Модифицированность();
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		Если ЗаписыватьДокумент Тогда
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
			ОбъектИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьКвитанциюЗапросаНаОтменуПроведенияТТН")
Функция бг_ЗагрузитьКвитанциюЗапросаНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке квитанции запроса на отмену проведения ТТН ЕГАИС:
			           |Не найден документ с идентификатором %1.';
			           |en = 'При загрузке квитанции запроса на отмену проведения ТТН ЕГАИС:
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Header.IsConfirm) = ВРег("Rejected") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ;
	Иначе
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение;
	КонецЕсли;
#Удаление	
	ИсходящееСообщение = Неопределено;
#КонецУдаления
#Вставка
	ДанныеИсходящегоСообщения = бг_ДанныеИсходящегоСообщения(
		РезультатПоиска.Ссылка, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
	Если ДанныеИсходящегоСообщения <> Неопределено Тогда
		ИсходящееСообщение = ДанныеИсходящегоСообщения.Ссылка;
		ДанныеДокумента.ИдентификаторЗапроса = ДанныеИсходящегоСообщения.ИдентификаторЗапроса;
	КонецЕсли; 
#КонецВставки
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
#Вставка
	Реквизиты.Вставить("Операция",             Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС);
	Реквизиты.Вставить("ОперацияКвитанции",    ДанныеДокумента.Операция);
#КонецВставки
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение квитанции запроса на отмену проведения ТТН ЕГАИС';
													|en = 'Получение квитанции запроса на отмену проведения ТТН ЕГАИС'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			РезультатПоиска.Ссылка, ДанныеДокумента.Операция);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьКвитанцию")
Функция бг_ЗагрузитьКвитанцию(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "Result")
		И ДанныеДокумента.Объект.Result <> Неопределено Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "OperationResult")
		И ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ИдентификаторЗапроса) Тогда
		РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(ДанныеДокумента.ИдентификаторЗапроса);
	Иначе
		РезультатПоиска = Неопределено;
	КонецЕсли;
#Удаление	
	Если РезультатПоиска = Неопределено
#КонецУдаления
#Вставка
	Если (РезультатПоиска = Неопределено Или бг_ТребуетсяПереопределитьРезультатПоиска(РезультатПоиска, ДанныеДокумента, ОрганизацияЕГАИС))
#КонецВставки
		И ЗначениеЗаполнено(ДанныеДокумента.Объект.Identity)
		И ЗначениеЗаполнено(ДанныеДокумента.Объект.DocType) Тогда
		РезультатПоиска = НайтиОбъектПоИдентификаторуТипаЕГАИСПриЗагрузкеКвитанции(
			ДанныеДокумента.Объект.Identity,
			ДанныеДокумента.Объект.DocType,
			ДанныеДокумента.Операция,
			ОрганизацияЕГАИС);
	КонецЕсли;
	
	Если РезультатПоиска = Неопределено Тогда
#Удаление	
		Возврат Неопределено;
#КонецУдаления
#Вставка
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке квитанции:
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Identity);
#КонецВставки
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИдентификаторЕГАИС = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "RegID") Тогда
		ИдентификаторЕГАИС = Строка(ДанныеДокумента.Объект.RegID);
	КонецЕсли;
	
	Если ДанныеДокумента.Объект.Result <> Неопределено Тогда
		
		Возврат ЗагрузитьКвитанциюПолученЕГАИС(
			ДанныеДокумента,
			РезультатПоиска,
			ИдентификаторЕГАИС,
			ОрганизацияЕГАИС);
		
	ИначеЕсли ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
		
		Возврат ЗагрузитьКвитанциюПроведенЕГАИС(
			ДанныеДокумента,
			РезультатПоиска,
			ИдентификаторЕГАИС,
			ОрганизацияЕГАИС);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный тип загружаемой квитанции.';
								|en = 'Неизвестный тип загружаемой квитанции.'");
		
	КонецЕсли;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьКвитанциюПолученЕГАИС")
Функция бг_ЗагрузитьКвитанциюПолученЕГАИС(ДанныеДокумента, ДанныеОснованияКвитанции, ИдентификаторЕГАИС, ОрганизацияЕГАИС) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	Если ДанныеОснованияКвитанции.ИсходящееСообщение = Неопределено Тогда
		ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	Иначе
		ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеОснованияКвитанции.Операция) И НЕ(ИсходящееСообщение = Неопределено) Тогда
		ДанныеОснованияКвитанции.Вставить("Операция", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "Операция"));
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Result.Conclusion) = ВРег("Rejected") Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
	ИначеЕсли НеТребуетсяПроведениеЕГАИС(ДанныеОснованияКвитанции.Операция) Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
	Иначе
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ОбрабатываетсяЕГАИС;
	КонецЕслИ;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             ДанныеОснованияКвитанции.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             ДанныеДокумента.Объект.Result.Comments);
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("ОперацияКвитанции",    ДанныеОснованияКвитанции.Операция);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
		
	Если ДанныеОснованияКвитанции.Ссылка <> Неопределено Тогда
		ЭтоДокумент = Метаданные.Документы.Содержит(ДанныеОснованияКвитанции.Ссылка.Метаданные());
	Иначе
		ЭтоДокумент = Ложь;
	КонецЕсли;
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ОтразитьФиксацию = ЭтоДокумент;
		
		Если ОтразитьФиксацию И ЗначениеЗаполнено(ДанныеОснованияКвитанции.Ссылка) Тогда
			
			ЗаписыватьДокумент = ЗначениеЗаполнено(ИдентификаторЕГАИС);
			
			ОснованиеКвитанцииМетаданные = ДанныеОснованияКвитанции.Ссылка.Метаданные();
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ОснованиеКвитанцииМетаданные.ПолноеИмя());
			
			Если ЗаписыватьДокумент Тогда
				
				ДокументОбъект = ДанныеОснованияКвитанции.Ссылка.ПолучитьОбъект();
				
				// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
				// Документ будет получен в следующий итерации загрузки данных.
				ДокументОбъект.Заблокировать();
				
				Если ПерезаписатьИдентификаторЕГАИС(ОснованиеКвитанцииМетаданные.Имя) Тогда
					Если ДокументОбъект.ИдентификаторЕГАИС <> ИдентификаторЕГАИС Тогда
						ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ИдентификаторЕГАИС")
					И Не ЗначениеЗаполнено(ДокументОбъект.ИдентификаторЕГАИС) Тогда
					ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ДанныеОснованияКвитанции.Ссылка,
					ДанныеДокумента.Операция,
					ПараметрыОбновленияСтатуса);
				
#Удаление
				ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
				ОбъектИзменен = Истина;
#КонецУдаления
#Вставка
				Если ПараметрыОбновленияСтатуса.Свойство("бг_ОтменитьОбработку") Тогда
					бг_ОтменитьОбработку = ПараметрыОбновленияСтатуса.бг_ОтменитьОбработку;
				Иначе
					бг_ОтменитьОбработку = Ложь;
				КонецЕсли;
					
				Если Не бг_ОтменитьОбработку Тогда
					ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
					ОбъектИзменен = Истина;
				КонецЕсли;
#КонецВставки
				
			Иначе
				
				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ДанныеОснованияКвитанции.Ссылка,
					ДанныеДокумента.Операция,
					ПараметрыОбновленияСтатуса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ?(ЭтоДокумент, ДанныеОснованияКвитанции.Ссылка, Неопределено);
	ВозвращаемоеЗначение.ДокументОснование = ДанныеОснованияКвитанции.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьКвитанциюПроведенЕГАИС")
Функция бг_ЗагрузитьКвитанциюПроведенЕГАИС(ДанныеДокумента, ДанныеОснованияКвитанции, ИдентификаторЕГАИС, ОрганизацияЕГАИС) Экспорт

	ОперацияВыполнена = (ВРег(ДанныеДокумента.Объект.OperationResult.OperationResult) <> ВРег("Rejected"));

	ДатаРегистрацииДвижений = Неопределено;

	Если ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("Confirm")
		И ОперацияВыполнена Тогда

		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;

		Если ДокументСоответствуетТипуЕГАИС(ДанныеОснованияКвитанции.Ссылка, ДанныеДокумента.Объект.DocType) Тогда
			ДатаРегистрацииДвижений = ДанныеДокумента.Объект.OperationResult.OperationDate;
		КонецЕсли;
#Вставка
	ИначеЕсли ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("Проверка по внутренним информационным ресурсам")
		И ОперацияВыполнена Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
		Если ДокументСоответствуетТипуЕГАИС(ДанныеОснованияКвитанции.Ссылка, ДанныеДокумента.Объект.DocType) Тогда
			ДатаРегистрацииДвижений = ДанныеДокумента.Объект.OperationResult.OperationDate;
		КонецЕсли;
#КонецВставки
	ИначеЕсли ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("UnConfirm")
		И ОперацияВыполнена Тогда

		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументРаспроведен;
		ДатаРегистрацииДвижений = '00010101'

	Иначе

		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;

	КонецЕсли;

	Если ДанныеОснованияКвитанции.ИсходящееСообщение = Неопределено Тогда
		ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	Иначе
		ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	КонецЕсли;

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             ДанныеОснованияКвитанции.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             ДанныеДокумента.Объект.OperationResult.OperationComment);
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("ОперацияКвитанции",    ДанныеОснованияКвитанции.Операция);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки

	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;

	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
	ДанныеДокумента.ТекстXML,
	Реквизиты);

	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда

		Если ЗначениеЗаполнено(ДанныеОснованияКвитанции.Ссылка) Тогда

			Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен Тогда
				ЗаписыватьДокумент = ЗначениеЗаполнено(ИдентификаторЕГАИС)
				Или ДатаРегистрацииДвижений <> Неопределено;
			Иначе
				ЗаписыватьДокумент = Ложь;
			КонецЕсли;

			ОснованиеКвитанцииМетаданные = ДанныеОснованияКвитанции.Ссылка.Метаданные();
			МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ОснованиеКвитанцииМетаданные.ПолноеИмя());

			Если ЗаписыватьДокумент Тогда

				ДокументОбъект = ДанныеОснованияКвитанции.Ссылка.ПолучитьОбъект();

				// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
				// Документ будет получен в следующий итерации загрузки данных.
				ДокументОбъект.Заблокировать();
#Вставка
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.битДобавлениеНовойПродукцииЕГАИС") Тогда
					МенеджерОбъекта.ОбработатьПолучениеКвитанции(ДокументОбъект, ДанныеДокумента);
				КонецЕсли;
#КонецВставки
				
				Если ЗначениеЗаполнено(ИдентификаторЕГАИС) Тогда
					Если ПерезаписатьИдентификаторЕГАИС(ОснованиеКвитанцииМетаданные.Имя) Тогда
						Если ДокументОбъект.ИдентификаторЕГАИС <> ИдентификаторЕГАИС Тогда
							ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
						КонецЕсли;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ИдентификаторЕГАИС")
						И Не ЗначениеЗаполнено(ДокументОбъект.ИдентификаторЕГАИС) Тогда
						ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
					КонецЕсли;
				КонецЕсли;

#Удаление
				Если ДатаРегистрацииДвижений <> Неопределено Тогда
					ДокументОбъект.ДатаРегистрацииДвижений = ДатаРегистрацииДвижений;
				КонецЕсли;
#КонецУдаления
#Вставка
				Если ДатаРегистрацииДвижений <> Неопределено 
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ДатаРегистрацииДвижений") Тогда
					ДокументОбъект.ДатаРегистрацииДвижений = ДатаРегистрацииДвижений;
				КонецЕсли;
#КонецВставки

				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;

				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДанныеОснованияКвитанции.Ссылка,
				ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);

				ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
				ОбъектИзменен = Истина;

			Иначе

				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;

				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДанныеОснованияКвитанции.Ссылка,
				ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
#Вставка
				бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(ДанныеОснованияКвитанции.Ссылка);
#КонецВставки
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;

	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;

	ВозвращаемоеЗначение.ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;

	ВозвращаемоеЗначение.Объект            = ДанныеОснованияКвитанции.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = ДанныеОснованияКвитанции.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;

	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
	СлужебныеДанные(
	ОрганизацияЕГАИС,
	ДанныеДокумента.Операция,
	ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);

	Возврат ВозвращаемоеЗначение;

КонецФункции

&ИзменениеИКонтроль("ЗагрузитьАлкогольнуюПродукцию")
// Загружает список алкогольной продукции в базу.
//
Функция бг_ЗагрузитьАлкогольнуюПродукцию(СписокАлкогольнойПродукцииXDTO)
	
	Результат = Новый Соответствие;
	
	КоличествоЭлементов = СписокАлкогольнойПродукцииXDTO.Количество();
	Если КоличествоЭлементов = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КлассификаторВидовПродукции = КлассификаторВидовАлкогольнойПродукции2021();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлассификаторВидовПродукции", КлассификаторВидовПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторВидовПродукции.Код КАК Код,
	|	КлассификаторВидовПродукции.Наименование КАК Наименование,
	|	КлассификаторВидовПродукции.Маркируемый КАК Маркируемый
	|ПОМЕСТИТЬ ВТКлассификаторВидовПродукции
	|ИЗ
	|	&КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторВидовПродукции.Код,
	|	КлассификаторВидовПродукции.Наименование,
	|	КлассификаторВидовПродукции.Маркируемый,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	ВТКлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукцииЕГАИС
	|		ПО КлассификаторВидовПродукции.Код = ВидыАлкогольнойПродукцииЕГАИС.Код";
	
	КлассификаторВидовПродукции = Запрос.Выполнить().Выгрузить();
	КлассификаторВидовПродукции.Индексы.Добавить("Код");
	
	МетаКлассификаторАлкогольнойПродукцииЕГАИС = Метаданные.Справочники.КлассификаторАлкогольнойПродукцииЕГАИС;
	ДлинаКода         = МетаКлассификаторАлкогольнойПродукцииЕГАИС.ДлинаКода;
	ДлинаНаименования = МетаКлассификаторАлкогольнойПродукцииЕГАИС.ДлинаНаименования;
	
	ТаблицаАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Код"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаКода)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Наименование"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаНаименования)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Объем"             , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Крепость"          , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Производитель"     , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Импортер"          , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ВидПродукции"      , Новый ОписаниеТипов("СправочникСсылка.ВидыАлкогольнойПродукции"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ТипПродукции"      , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПродукцииЕГАИС"));
	
	ВидыЛицензий = Новый Соответствие;
	ВидыЛицензий.Вставить("АП"   , Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ВидыЛицензий.Вставить("ССП"  , Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ВидыЛицензий.Вставить("ССНП" , Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ВидыЛицензий.Вставить("Спирт", Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
#Вставка
	ВидыЛицензий.Вставить("ЭС",    Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	ВидыЛицензий.Вставить("ССПП",  Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
#КонецВставки
	МассивКодов = Новый Массив;
	
	Для Каждого ДанныеАлкогольнойПродукцииXDTO Из СписокАлкогольнойПродукцииXDTO Цикл
		
		Если МассивКодов.Найти(ДанныеАлкогольнойПродукцииXDTO.AlcCode) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКодов.Добавить(ДанныеАлкогольнойПродукцииXDTO.AlcCode);
		
		СтрокаТаблицы = ТаблицаАлкогольнойПродукции.Добавить();
		СтрокаТаблицы.Код                = ДанныеАлкогольнойПродукцииXDTO.AlcCode;
		СтрокаТаблицы.Наименование       = ДанныеАлкогольнойПродукцииXDTO.ShortName;
		СтрокаТаблицы.НаименованиеПолное = ДанныеАлкогольнойПродукцииXDTO.FullName;
		СтрокаТаблицы.Объем              = ДанныеАлкогольнойПродукцииXDTO.Capacity;
		СтрокаТаблицы.Крепость           = ДанныеАлкогольнойПродукцииXDTO.AlcVolume;
		
		Если ПустаяСтрока(СтрокаТаблицы.Наименование) И НЕ ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
			СтрокаТаблицы.Наименование = СтрокаТаблицы.НаименованиеПолное;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) И НЕ ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
			СтрокаТаблицы.НаименованиеПолное = СтрокаТаблицы.Наименование;
		КонецЕсли;
		
		Если ДанныеАлкогольнойПродукцииXDTO.Producer <> Неопределено Тогда
			СтрокаТаблицы.Производитель = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Producer);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеАлкогольнойПродукцииXDTO, "Importer") Тогда
			Если ДанныеАлкогольнойПродукцииXDTO.Importer <> Неопределено Тогда
				СтрокаТаблицы.Импортер = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Importer);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеАлкогольнойПродукцииXDTO, "UnitType") Тогда
			СтрокаТаблицы.ТипПродукции = ?(ДанныеАлкогольнойПродукцииXDTO.UnitType = "Unpacked",
				Перечисления.ТипыПродукцииЕГАИС.Неупакованная,
				Перечисления.ТипыПродукцииЕГАИС.Упакованная);
		КонецЕсли;
		
		СтрокаКлассификатора = КлассификаторВидовПродукции.Найти(ДанныеАлкогольнойПродукцииXDTO.ProductVCode, "Код");
		Если СтрокаКлассификатора <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаКлассификатора.Ссылка) Тогда
				
				ВидПродукцииОбъект = Справочники.ВидыАлкогольнойПродукции.СоздатьЭлемент();
				ВидПродукцииОбъект.Код          = СтрокаКлассификатора.Код;
				ВидПродукцииОбъект.Наименование = СтрокаКлассификатора.Наименование;
				ВидПродукцииОбъект.ВидЛицензии  = ВидыЛицензий[ДанныеАлкогольнойПродукцииXDTO.Type];
				ВидПродукцииОбъект.Маркируемый  = СтрокаКлассификатора.Маркируемый;
				ВидПродукцииОбъект.Записать();
				
				СтрокаКлассификатора.Ссылка = ВидПродукцииОбъект.Ссылка;
				
			КонецЕсли;
			
			СтрокаТаблицы.ВидПродукции = СтрокаКлассификатора.Ссылка;
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаАлкогольнойПродукции", ТаблицаАлкогольнойПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код                КАК Код,
	|	ТаблицаАлкогольнойПродукции.Наименование       КАК Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем              КАК Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость           КАК Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель      КАК Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер           КАК Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции       КАК ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции       КАК ТипПродукции
	|ПОМЕСТИТЬ ТаблицаАлкогольнойПродукции
	|ИЗ
	|	&ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код                КАК Код,
	|	ТаблицаАлкогольнойПродукции.Наименование       КАК Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем              КАК Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость           КАК Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель      КАК Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер           КАК Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции       КАК ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции       КАК ТипПродукции,
	|	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК Ссылка,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка ЕСТЬ NULL
	|		ИЛИ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.Наименование КАК СТРОКА(100))) <> (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК СТРОКА(100)))
	|			И ТаблицаАлкогольнойПродукции.Наименование <> """"
	|		ИЛИ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК СТРОКА(1000))) <> (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК СТРОКА(1000)))
	|			И ТаблицаАлкогольнойПродукции.НаименованиеПолное <> """"
	|		ИЛИ ТаблицаАлкогольнойПродукции.Объем <> КлассификаторАлкогольнойПродукцииЕГАИС.Объем
	|			И ТаблицаАлкогольнойПродукции.Объем <> 0
	|		ИЛИ ТаблицаАлкогольнойПродукции.Крепость <> КлассификаторАлкогольнойПродукцииЕГАИС.Крепость
	|			И ТаблицаАлкогольнойПродукции.Крепость <> 0
	|		ИЛИ ТаблицаАлкогольнойПродукции.Производитель <> КлассификаторАлкогольнойПродукцииЕГАИС.Производитель
	|			И ТаблицаАлкогольнойПродукции.Производитель <> ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ ТаблицаАлкогольнойПродукции.Импортер <> КлассификаторАлкогольнойПродукцииЕГАИС.Импортер
	|			И ТаблицаАлкогольнойПродукции.Импортер <> ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ ТаблицаАлкогольнойПродукции.ВидПродукции <> КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции
	|			И ТаблицаАлкогольнойПродукции.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|		ИЛИ ТаблицаАлкогольнойПродукции.ТипПродукции <> КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции
	|			И ТаблицаАлкогольнойПродукции.ТипПродукции <> ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка) КАК ЕстьИзменения
	|ПОМЕСТИТЬ ТаблицаСКлассификатором
	|ИЗ
	|	ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТаблицаАлкогольнойПродукции.Код = КлассификаторАлкогольнойПродукцииЕГАИС.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура          КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика        КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	ТаблицаСКлассификатором КАК ТаблицаСКлассификатором
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаСКлассификатором.Ссылка = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|ГДЕ
	|	ТаблицаСКлассификатором.Ссылка <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСКлассификатором.Код                КАК Код,
	|	ТаблицаСКлассификатором.Наименование       КАК Наименование,
	|	ТаблицаСКлассификатором.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаСКлассификатором.Объем              КАК Объем,
	|	ТаблицаСКлассификатором.Крепость           КАК Крепость,
	|	ТаблицаСКлассификатором.Производитель      КАК Производитель,
	|	ТаблицаСКлассификатором.Импортер           КАК Импортер,
	|	ТаблицаСКлассификатором.ВидПродукции       КАК ВидПродукции,
	|	ТаблицаСКлассификатором.ТипПродукции       КАК ТипПродукции,
	|	ТаблицаСКлассификатором.Ссылка             КАК Ссылка,
	|	ТаблицаСКлассификатором.ЕстьИзменения      КАК ЕстьИзменения
	|ИЗ
	|	ТаблицаСКлассификатором КАК ТаблицаСКлассификатором";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаСопоставления = МассивРезультатов[МассивРезультатов.Количество() - 2].Выгрузить();
	ТаблицаСопоставления.Индексы.Добавить("АлкогольнаяПродукция");
#Вставка
	УпаковкиПаллеты = бг_Номенклатура.ПаллетизацияМассиваНоменклатурПоУмолчанию(ТаблицаСопоставления.ВыгрузитьКолонку("Номенклатура"));
#КонецВставки
	
	РезультатЗапроса = МассивРезультатов[МассивРезультатов.Количество() - 1];
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеАлкогольнойПродукции = Новый Структура;
		ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция");
		ДанныеАлкогольнойПродукции.Вставить("ТаблицаСопоставления", Новый Соответствие);
		
		Если Не Выборка.ЕстьИзменения Тогда
			ДанныеАлкогольнойПродукции.АлкогольнаяПродукция = Выборка.Ссылка;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", Выборка.Ссылка);
			
			МассивСтрок = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
				СписокНоменклатуры = ДанныеАлкогольнойПродукции.ТаблицаСопоставления[СтрокаТаблицы.ИдентификаторУпаковки];
				Если СписокНоменклатуры = Неопределено Тогда
					ДанныеАлкогольнойПродукции.ТаблицаСопоставления.Вставить(СтрокаТаблицы.ИдентификаторУпаковки, Новый Массив);
				КонецЕсли;
				
				СопоставленнаяНоменклатура = Новый Структура;
				СопоставленнаяНоменклатура.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
				СопоставленнаяНоменклатура.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
#Вставка
				СопоставленнаяНоменклатура.Вставить("бг_УпаковкаПаллета", УпаковкиПаллеты[СтрокаТаблицы.Номенклатура]);
#КонецВставки
				ДанныеАлкогольнойПродукции.ТаблицаСопоставления[СтрокаТаблицы.ИдентификаторУпаковки].Добавить(СопоставленнаяНоменклатура);
			КонецЦикла;
			
			Результат.Вставить(Выборка.Код, ДанныеАлкогольнойПродукции);
			
			ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАлкогольнойПродукции(Выборка.Ссылка, Ложь);
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.Пустая() Тогда
			АлкогольнаяПродукцияОбъект = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Иначе
			АлкогольнаяПродукцияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаАлкогольнойПродукции.Колонки Цикл
			Если ЗначениеЗаполнено(Выборка[Колонка.Имя]) Тогда
				АлкогольнаяПродукцияОбъект[Колонка.Имя] = Выборка[Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
		
		АлкогольнаяПродукцияОбъект.Записать();
		
		ДанныеАлкогольнойПродукции.АлкогольнаяПродукция = АлкогольнаяПродукцияОбъект.Ссылка;
		
		Результат.Вставить(Выборка.Код, ДанныеАлкогольнойПродукции);
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАлкогольнойПродукции(Выборка.Ссылка, Истина);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьСправку")
// Загружает справки по формам А и Б в базу данных.
//
Функция бг_ЗагрузитьСправку(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	
	Если ИсходящееСообщение = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке ответа на запрос справок:
			           |Не найден исходящий запрос с идентификатором %1.';
			           |en = 'При загрузке ответа на запрос справок:
			           |Не найден исходящий запрос с идентификатором %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;

#Удаление	
	Ссылка = СоздатьСправку(
		ДанныеСправки(ДанныеДокумента, ДанныеДокумента.Операция),
		ДанныеДокумента.Операция);
#КонецУдаления
#Вставка
	ДанныеСправки = ДанныеСправки(ДанныеДокумента, ДанныеДокумента.Операция);
	Если бг_ТребуетсяЗаполнятьНомерГТДВДанныхСправки1(ДанныеСправки) Тогда	
		бг_ЗаполнитьНомерГТДВДанныхСправки1(ДанныеСправки, ДанныеДокумента);
	КонецЕсли;
	
	Ссылка = СоздатьСправку(
		ДанныеСправки,
		ДанныеДокумента.Операция);	
#КонецВставки

	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             Неопределено);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные справки №1 (справки №2)';
													|en = 'Получены данные справки №1 (справки №2)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = Неопределено;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьАктПоИсходящейТТНЕГАИС")
Функция бг_ЗагрузитьАктПоИсходящейТТНЕГАИС(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке акта по ТТН ЕГАИС (исходящей):
			           |Не найден документ с идентификатором %1.';
			           |en = 'При загрузке акта по ТТН ЕГАИС (исходящей):
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Header.IsAccept) = ВРег("Rejected") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ;
	ИначеЕсли ВРег(ДанныеДокумента.Объект.Header.IsAccept) = ВРег("Differences") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения;
	Иначе
		Если ДанныеДокумента.Объект.Content <> Неопределено
			И ДанныеДокумента.Объект.Content.Position.Количество() > 0 Тогда
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения;
		Иначе
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение;
		КонецЕсли;
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение акта по документу ТТН ЕГАИС (входящая)';
													|en = 'Получение акта по документу ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ЕстьРасхождения = Ложь;
		ДокументОбъект  = Неопределено;
		
		Если ДанныеДокумента.Объект.Content <> Неопределено Тогда
			
			Для Каждого СтрокаРасхожденияXDTO Из ДанныеДокумента.Объект.Content.Position Цикл
				
				Если ДокументОбъект = Неопределено Тогда
					
					ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
					
					// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
					// Документ будет получен в следующий итерации загрузки данных.
					ДокументОбъект.Заблокировать();
					
				КонецЕсли;
				
				ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаРасхожденияXDTO.Identity) - 1;
				
				ДокументОбъект.Товары[ИндексСтроки].КоличествоФакт = СтрокаРасхожденияXDTO.RealQuantity;
				
				ЕстьРасхождения = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьРасхождения Тогда
			ДокументОбъект.ЕстьРасхождения = Истина;
		КонецЕсли;
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАктаПодтвержденияТТН(
			ДокументОбъект,
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЕстьРасхождения;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			РезультатПоиска.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		Если ЕстьРасхождения Тогда
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
			ОбъектИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьКвитанциюАктаРасхожденийТТН")
Функция бг_ЗагрузитьКвитанциюАктаРасхожденийТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке квитанции акта расхождений по ТТН ЕГАИС (входящая):
			           |Не найден документ с идентификатором %1.';
			           |en = 'При загрузке квитанции акта расхождений по ТТН ЕГАИС (входящая):
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Header.IsConfirm) = ВРег("Rejected") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ;
	Иначе
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение;
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение квитанции акта расхождений по ТТН ЕГАИС (входящая)';
													|en = 'Получение квитанции акта расхождений по ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ЗаписыватьДокумент = (ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение);
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Если ЗаписыватьДокумент Тогда
			
			ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
#Удаление
			ДокументОбъект.ДатаРегистрацииДвижений = ДанныеДокумента.Объект.Header.TicketDate;
#КонецУдаления
#Вставка
			ТребуетсяИзменитьДатуРегистрацииДвижений = бг_ТребуетсяИзменитьДатуРегистрацииДвиженийТТН(
				ДокументОбъект.ДатаРегистрацииДвижений, 
				ДанныеДокумента.Объект.Header.TicketDate);

			Если ТребуетсяИзменитьДатуРегистрацииДвижений Тогда
				ДокументОбъект.ДатаРегистрацииДвижений = ДанныеДокумента.Объект.Header.TicketDate;
			КонецЕсли;
#КонецВставки
			
			ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(
				РезультатПоиска.Ссылка,
				НовыйСтатус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком);
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				РезультатПоиска.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
			ОбъектИзменен = Истина;
			
		Иначе
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				РезультатПоиска.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьЗапросНаОтменуПроведенияТТН")
Функция бг_ЗагрузитьЗапросНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке запроса на отмену проведения ТТН ЕГАИС (исходящей):
			           |Не найден документ с идентификатором %1.';
			           |en = 'При загрузке запроса на отмену проведения ТТН ЕГАИС (исходящей):
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение запроса на отмену проведения ТТН ЕГАИС (исходящая)';
													|en = 'Получение запроса на отмену проведения ТТН ЕГАИС (исходящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			РезультатПоиска.Ссылка, ДанныеДокумента.Операция);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗагрузитьИсториюСправок2ПоТТН")
Функция бг_ЗагрузитьИсториюСправок2ПоТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных истории справок 2 по ТТН:
			           |Не найден документ ТТН ЕГАИС (входящая) с идентификатором ЕГАИС %1.';
			           |en = 'При загрузке данных истории справок 2 по ТТН:
			           |Не найден документ ТТН ЕГАИС (входящая) с идентификатором ЕГАИС %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение истории справок 2 по ТТН';
													|en = 'Получение истории справок 2 по ТТН'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         РезультатПоиска.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Content.Position Цикл
			
			Для Каждого ЭлементДанныхШаг Из ЭлементДанных.HistF2.step Цикл
				
				СтрокаТЧ = ДокументОбъект.ИсторияСправок2.Добавить();
				СтрокаТЧ.ИдентификаторСтроки = ЭлементДанных.Identity;
				
				СтрокаТЧ.Шаг                            = ЭлементДанныхШаг.lev;
				СтрокаТЧ.РегистрационныйНомер           = ЭлементДанныхШаг.Form2;
				СтрокаТЧ.РегистрационныйНомерПоставщика = ЭлементДанныхШаг.parentForm2;
				СтрокаТЧ.ГрузоотправительКод            = ЭлементДанныхШаг.Shipper;
				СтрокаТЧ.ГрузополучательКод             = ЭлементДанныхШаг.Consignee;
				СтрокаТЧ.НомерТТН                       = ЭлементДанныхШаг.WBRegId;
				СтрокаТЧ.Количество                     = ЭлементДанныхШаг.amount;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = РезультатПоиска.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	

КонецФункции

&ИзменениеИКонтроль("ЗагрузитьУведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс")
// Регистрирует новые справки 1 и 2 и заполняет их в табличной части акта.
//
Функция бг_ЗагрузитьУведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс(ДанныеДокумента, ОрганизацияЕГАИС,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.АктПостановкиНаБалансЕГАИС,
		"Идентификатор",
		ДанныеДокумента.Объект.Header.Identity);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о регистрации движения акта постановки на баланс ЕГАИС:
			           |Не найден документ Акт постановки на баланс ЕГАИС с идентификатором %1.';
			           |en = 'При загрузке уведомления о регистрации движения акта постановки на баланс ЕГАИС:
			           |Не найден документ Акт постановки на баланс ЕГАИС с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.Identity);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получено уведомление о регистрации движения акта постановки на баланс ЕГАИС';
													|en = 'Получено уведомление о регистрации движения акта постановки на баланс ЕГАИС'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
#Вставка
	Реквизиты.Вставить("бг_АдресДокумента",    ДанныеДокумента.АдресЗапроса);
#КонецВставки
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ТоварыИтоги = Новый ТаблицаЗначений;
		ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
		ТоварыИтоги.Колонки.Добавить("КоличествоПоСправке1");
		ТоварыИтоги.Колонки.Добавить("ДатаРозлива");
		ТоварыИтоги.Колонки.Добавить("НомерТТН");
		ТоварыИтоги.Колонки.Добавить("ДатаТТН");
		ТоварыИтоги.Колонки.Добавить("НомерПодтвержденияЕГАИС");
		ТоварыИтоги.Колонки.Добавить("ДатаПодтвержденияЕГАИС");
		ТоварыИтоги.Колонки.Добавить("Количество");
		
		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
			
			НоваяСтрока = ТоварыИтоги.Добавить();
			НоваяСтрока.АлкогольнаяПродукция    = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.КоличествоПоСправке1    = СтрокаТЧ.КоличествоПоСправке1;
			НоваяСтрока.ДатаРозлива             = СтрокаТЧ.ДатаРозлива;
			НоваяСтрока.НомерТТН                = СтрокаТЧ.НомерТТН;
			НоваяСтрока.ДатаТТН                 = СтрокаТЧ.ДатаТТН;
			НоваяСтрока.НомерПодтвержденияЕГАИС = СтрокаТЧ.НомерПодтвержденияЕГАИС;
			НоваяСтрока.ДатаПодтвержденияЕГАИС  = СтрокаТЧ.ДатаПодтвержденияЕГАИС;
			
			НоваяСтрока.Количество = СтрокаТЧ.Количество;
			
		КонецЦикла;
		
		ТоварыИтоги.Свернуть(
			"АлкогольнаяПродукция,
			|КоличествоПоСправке1,
			|ДатаРозлива,
			|НомерТТН,
			|ДатаТТН,
			|НомерПодтвержденияЕГАИС,
			|ДатаПодтвержденияЕГАИС",
			"Количество");
		
		Для Каждого СтрокаКвитанцииXDTO Из ДанныеДокумента.Объект.Content.Position Цикл
			
			ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаКвитанцииXDTO.Identity) - 1;
			
			Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformARegId;
			Иначе
				НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformF1RegId;
			КонецЕсли;
			
			ДанныеСправки1 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
			ДанныеСправки1.РегистрационныйНомер = НомерНовойСправки1;
			ДанныеСправки1.Наименование         = НомерНовойСправки1;
			
			СтрокаТЧИтоги = Неопределено;
			
			Если ТоварыИтоги.Количество() > ИндексСтроки Тогда
				
				СтрокаТЧИтоги = ТоварыИтоги[ИндексСтроки];
				
				ДанныеСправки1.АлкогольнаяПродукция    = СтрокаТЧИтоги.АлкогольнаяПродукция;
				ДанныеСправки1.НомерТТН                = СтрокаТЧИтоги.НомерТТН;
				ДанныеСправки1.ДатаТТН                 = СтрокаТЧИтоги.ДатаТТН;
				ДанныеСправки1.ДатаРозлива             = СтрокаТЧИтоги.ДатаРозлива;
				ДанныеСправки1.Количество              = СтрокаТЧИтоги.КоличествоПоСправке1;
				ДанныеСправки1.НомерПодтвержденияЕГАИС = СтрокаТЧИтоги.НомерПодтвержденияЕГАИС;
				ДанныеСправки1.ДатаПодтвержденияЕГАИС  = СтрокаТЧИтоги.ДатаПодтвержденияЕГАИС;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'При загрузке уведомления о регистрации движения Акта постановки на баланс:
						|Не найдена строка документа Акт постановки на баланс по идентификатору %1.';
						|en = 'При загрузке уведомления о регистрации движения Акта постановки на баланс:
						|Не найдена строка документа Акт постановки на баланс по идентификатору %1.'"),
					СтрокаКвитанцииXDTO.Identity);
				
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция",    СтрокаТЧИтоги.АлкогольнаяПродукция);
			ПараметрыОтбора.Вставить("КоличествоПоСправке1",    СтрокаТЧИтоги.КоличествоПоСправке1);
			ПараметрыОтбора.Вставить("ДатаРозлива",             СтрокаТЧИтоги.ДатаРозлива);
			ПараметрыОтбора.Вставить("НомерТТН",                СтрокаТЧИтоги.НомерТТН);
			ПараметрыОтбора.Вставить("ДатаТТН",                 СтрокаТЧИтоги.ДатаТТН);
			ПараметрыОтбора.Вставить("НомерПодтвержденияЕГАИС", СтрокаТЧИтоги.НомерПодтвержденияЕГАИС);
			ПараметрыОтбора.Вставить("ДатаПодтвержденияЕГАИС",  СтрокаТЧИтоги.ДатаПодтвержденияЕГАИС);
			
			НайденныеСтрокиТЧТовары = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
			
			НоваяСправка1 = СоздатьСправку(ДанныеСправки1, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1);
			
			Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				СписокСправок2XDTO = СтрокаКвитанцииXDTO.InformB.InformBItem;
			Иначе
				СписокСправок2XDTO = СтрокаКвитанцииXDTO.InformF2.InformF2Item;
			КонецЕсли;
			
			Для Каждого ЭлементДанных Из СписокСправок2XDTO Цикл
				
				Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
					РегистрационныйНомер = ЭлементДанных.BRegId;
				Иначе
					РегистрационныйНомер = ЭлементДанных.F2RegId;
				КонецЕсли;
				
				ПоштучнаяПродукция = Ложь;
				
				Для Каждого СтрокаТовары Из НайденныеСтрокиТЧТовары Цикл
					СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
					НайденныеСтрокиТЧАкцизныеМарки = ДокументОбъект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтрокиТЧАкцизныеМарки.Количество() > 0 Тогда
						АкцизнаяМарка = НайденныеСтрокиТЧАкцизныеМарки[0].АкцизнаяМарка;
						КодАкцизнойМарки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АкцизнаяМарка, "ЗначениеШтрихкода");
						Если СтрДлина(СокрЛП(КодАкцизнойМарки)) = 150 Тогда
							ПоштучнаяПродукция = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
				
				ДанныеСправки2.РегистрационныйНомер = РегистрационныйНомер;
				ДанныеСправки2.Наименование         = РегистрационныйНомер;
				ДанныеСправки2.НомерСправки1        = НомерНовойСправки1;
				ДанныеСправки2.Справка1             = НоваяСправка1;
				ДанныеСправки2.ДокументОснование    = ДокументОбъект.Ссылка;
				ДанныеСправки2.Поштучная            = ПоштучнаяПродукция;
				
				ДанныеСправки2.АлкогольнаяПродукция = СтрокаТЧИтоги.АлкогольнаяПродукция;
				ДанныеСправки2.Количество           = СтрокаТЧИтоги.КоличествоПоСправке1;
				
				НоваяСправка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
				
				Для Каждого СтрокаТовары Из НайденныеСтрокиТЧТовары Цикл
					СтрокаТовары.Справка2 = НоваяСправка2;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОбъект.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&Вместо("ПерезаписатьИдентификаторЕГАИС")
Функция бг_ПерезаписатьИдентификаторЕГАИС(ИмяДокумента)
	Если ИмяДокумента = "битОтчетОПроизводствеЕГАИС" Тогда
		Возврат Истина;
	Иначе
		Возврат ПродолжитьВызов(ИмяДокумента);
	КонецЕсли;
КонецФункции

Функция бг_НайтиОбъектПоИдентификаторуТипаЕГАИСПриЗагрузкеКвитанцииНаЗаявлениеОВыдачеФСМ(Идентификатор, ВидКвитанции)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ВидКвитанции",  ВидКвитанции);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка КАК Ссылка,
	|	ПротоколОбменаИсходящий.Ссылка КАК ИсходящееСообщение,
	|	ПротоколОбменаИсходящий.Операция КАК Операция,
	|	ПротоколОбменаИсходящий.ФорматОбмена КАК ФорматОбмена,
	|	ПротоколОбменаИсходящий.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Документ.битЗаявлениеОВыдачеФСМ КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаИсходящий
	|		ПО Таблица.Ссылка = ПротоколОбменаИсходящий.Документ
	|			И (ПротоколОбменаИсходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий))
	|ГДЕ
	|	Таблица.Идентификатор = &Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколОбменаИсходящий.ДатаСоздания УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",             Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("ДокументОснование",  Неопределено);
		ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Выборка.ИсходящееСообщение);
		ВозвращаемоеЗначение.Вставить("Операция",           Выборка.Операция);
		ВозвращаемоеЗначение.Вставить("ФорматОбмена",       Выборка.ФорматОбмена);
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура бг_ДополнитьДанныеСправки1ДаннымиГТД(ДанныеСправки, ДанныеДокумента)
	
	Если ДанныеДокумента.Объект.Свойство("GTDNUMBER") Тогда
		ДанныеСправки.Вставить("бг_НомерГТД", ДанныеДокумента.Объект.GTDNUMBER);
	КонецЕсли;
	Если ДанныеДокумента.Объект.Свойство("GTDDate") Тогда
		ДанныеСправки.Вставить("бг_ДатаГТД", ДанныеДокумента.Объект.GTDDate);
	КонецЕсли;
	
КонецПроцедуры

Функция бг_ТребуетсяЗаполнятьНомерГТДВДанныхСправки1(ДанныеСправки)
	
	ТребуетсяСоздаватьНомерГТД = Ложь;
	
	Если ДанныеСправки.Свойство("бг_НомерГТД") И ЗначениеЗаполнено(ДанныеСправки.бг_НомерГТД) Тогда
		ТребуетсяСоздаватьНомерГТД = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяСоздаватьНомерГТД;

КонецФункции

Процедура бг_ЗаполнитьНомерГТДВДанныхСправки1(ДанныеСправки, ДанныеДокумента)
	
	НомерГТД = Справочники.НомераГТД.НайтиПоКоду(ДанныеСправки.бг_НомерГТД);
	
	Если Не ЗначениеЗаполнено(НомерГТД) Тогда	
		НомерГТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
		НомерГТДОбъект.Код = СокрЛП(ДанныеСправки.бг_НомерГТД);	
		НомерГТДОбъект.РегистрационныйНомер = СокрЛП(ДанныеСправки.бг_НомерГТД);
		НомерГТДОбъект.СтранаПроисхождения = бг_СтранаПроисхожденияИзДанныхСправки1ЕГАИС(ДанныеДокумента);
		НомерГТДОбъект.Записать();
		
		НомерГТД = НомерГТДОбъект.Ссылка;
	КонецЕсли;
	
	ДанныеСправки.Вставить("бг_НомерГТД", НомерГТД);
	
КонецПроцедуры

Функция бг_СтранаПроисхожденияИзДанныхСправки1ЕГАИС(ДанныеДокумента)
	
	КодСтраныПроисхождения = бг_КодСтраныПроисхожденияИзДанныхСправки1ЕГАИС(ДанныеДокумента);
	СтранаПроисхождения = Справочники.СтраныМира.НайтиПоКоду(КодСтраныПроисхождения);		
	
	Возврат СтранаПроисхождения;
	
КонецФункции

Функция бг_КодСтраныПроисхожденияИзДанныхСправки1ЕГАИС(ДанныеДокумента)
	
	КодСтраныПроисхождения = Неопределено;
	
	Производитель = ДанныеДокумента.Объект.Product.Producer;
	
	Если ЗначениеЗаполнено(Производитель.FO) Тогда
		КодСтраныПроисхождения = Производитель.FO.address.Country;
	ИначеЕсли ЗначениеЗаполнено(Производитель.TS) Тогда
		КодСтраныПроисхождения = Производитель.TS.address.Country;
	ИначеЕсли ЗначениеЗаполнено(Производитель.UL) Тогда
		КодСтраныПроисхождения = Производитель.UL.address.RegionCode;
	ИначеЕсли ЗначениеЗаполнено(Производитель.FL) Тогда
		КодСтраныПроисхождения = Производитель.FL.address.RegionCode;	
	КонецЕсли; 
		
	Возврат КодСтраныПроисхождения;
	
КонецФункции

Процедура бг_ДополнитьДанныеСправки1ДаннымиКрепости(ДанныеСправки, ДанныеДокумента)
	
	Если ДанныеДокумента.Объект.Product.Свойство("AlcVolume") Тогда
		ДанныеСправки.Вставить("бг_Крепость", ДанныеДокумента.Объект.Product.AlcVolume);
	КонецЕсли;
	
КонецПроцедуры

// Требуется переопределить результат поиска
// Результат поиска нужно переопределять, когда происходит отправка тикетов между организациями ЕГАИС, которые находятся в одной базе.
// В данной ситуации при обработке входящего тикета подтверждения по ТТН входящей (на стороне грузополучателя) находится 
// исходящий тикет по организации ЕГАИС, которая является грузоотправителем, что не верно.
//
Функция бг_ТребуетсяПереопределитьРезультатПоиска(РезультатПоиска, ДанныеДокумента, ОрганизацияЕГАИС)

	ТребуетсяПереопределитьРезультПоиска = Ложь;
	
	ЭтоРезультатПоискаТТН = Ложь;
	Если РезультатПоиска <> Неопределено Тогда
		Если ТипЗнч(РезультатПоиска.Ссылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") 
			Или ТипЗнч(РезультатПоиска.Ссылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			ЭтоРезультатПоискаТТН = Истина;	
		КонецЕсли;
	КонецЕсли;
	
	ОперацияВыполнена = Ложь;
	Если ДанныеДокумента.Объект.Свойство("OperationResult") И ДанныеДокумента.Объект.OperationResult <> Неопределено
		И ДанныеДокумента.Объект.OperationResult.Свойство("OperationResult") Тогда
		ОперацияВыполнена = (ВРег(ДанныеДокумента.Объект.OperationResult.OperationResult) <> ВРег("Rejected"));
	КонецЕсли;
	
	Если ОперацияВыполнена И ЭтоРезультатПоискаТТН
		И ДанныеДокумента.Объект.Свойство("OperationResult") И ДанныеДокумента.Объект.OperationResult <> Неопределено
		И ДанныеДокумента.Объект.OperationResult.Свойство("OperationName") Тогда
		
		Если ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("UnConfirm")
			Или ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("Confirm") Тогда
			ТребуетсяПереопределитьРезультПоиска = Истина;	
		КонецЕсли;				
	КонецЕсли;
	
	Возврат ТребуетсяПереопределитьРезультПоиска;
	
КонецФункции

// Функция создана по аналогии с типовой функцией ИсходящееСообщение.
// Получает данные исходящего тикета обмена ЕГАИС с отбором по документу и операции ЕГАИС 
//
Функция бг_ДанныеИсходящегоСообщения(Документ, Операция) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколОбмена.Ссылка КАК Ссылка,
	|	ПротоколОбмена.ИдентификаторЗапроса КАК ИдентификаторЗапроса
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
	|ГДЕ
	|	ПротоколОбмена.Документ = &Документ
	|	И ПротоколОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ПротоколОбмена.Операция = &Операция
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколОбмена.ДатаСоздания УБЫВ");	
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("Операция", Операция);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеИсходящегоСообщения = Неопределено;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();	
		Выборка.Следующий();
		
		ДанныеИсходящегоСообщения = Новый Структура("Ссылка, ИдентификаторЗапроса");
		ЗаполнитьЗначенияСвойств(ДанныеИсходящегоСообщения, Выборка);
	КонецЕсли;
	
	Возврат ДанныеИсходящегоСообщения;
	
КонецФункции

Функция бг_ТребуетсяИзменитьДатуРегистрацииДвиженийТТН(ДатаРегистрацииДвиженийДокумента, ДатаТикетаЕГАИС)

	Возврат бг_ДатаСодержитВремя(ДатаТикетаЕГАИС);

КонецФункции

Функция бг_ДатаСодержитВремя(Дата)

	Возврат Дата > НачалоДня(Дата);

КонецФункции

Процедура бг_ЗарегистрироватьНовуюОрганизациюЕГАИСДляОтложеннойОбработки(ОрганизацияЕГАИС)
	
	РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
		ОрганизацияЕГАИС,
		Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОбработатьНовуюОрганизациюЕГАИС);
	
КонецПроцедуры

&ИзменениеИКонтроль("НайтиОбъектПоИдентификатору")
Функция бг_НайтиОбъектПоИдентификатору(МетаданныеОбъекта, ИмяРеквизита, Значение, ВидКвитанции, ОрганизацияЕГАИС)

	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ИмяРеквизита = "ИдентификаторЗапроса" Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПротоколОбмена.Документ            КАК Ссылка,
		|	ТаблицаДокументы.ДокументОснование КАК ДокументОснование,
		|	ПротоколОбмена.Операция            КАК Операция,
		|	ПротоколОбмена.Ссылка              КАК ИсходящееСообщение,
		|	ПротоколОбмена.ФорматОбмена        КАК ФорматОбмена
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОбъекта.ПолноеИмя() + " КАК ТаблицаДокументы
		|		ПО ТаблицаДокументы.Ссылка = ПротоколОбмена.Документ
		|ГДЕ
		|	ПротоколОбмена.ИдентификаторЗапроса = &Значение
		|	И ПротоколОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)");

	ИначеЕсли ВидКвитанции = Неопределено Тогда

		Если МетаданныеОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Таблица.Ссылка            КАК Ссылка,
			|	Таблица.ДокументОснование КАК ДокументОснование,
			|	Неопределено              КАК Операция,
			|	Неопределено              КАК ИсходящееСообщение,
			|	Таблица.ФорматОбмена      КАК ФорматОбмена
			|ИЗ
			|	Документ.ТТНВходящаяЕГАИС КАК Таблица
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузополучатель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение");
		ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                                      КАК Ссылка,
			|	Таблица.ДокументОснование                           КАК ДокументОснование,
			|	Неопределено                                        КАК Операция,
			|	Неопределено                                        КАК ИсходящееСообщение,
			|	ЕСТЬNULL(ПротоколОбмена.ФорматОбмена, НЕОПРЕДЕЛЕНО) КАК ФорматОбмена
			|ИЗ
			|	Документ.ТТНИсходящаяЕГАИС КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
			|		ПО Таблица.Ссылка = ПротоколОбмена.Документ
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузоотправитель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбмена.ДатаСоздания ВОЗР
			|");
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                                      КАК Ссылка,
			|	Таблица.ДокументОснование                           КАК ДокументОснование,
			|	Неопределено                                        КАК Операция,
			|	Неопределено                                        КАК ИсходящееСообщение,
			|	ЕСТЬNULL(ПротоколОбмена.ФорматОбмена, НЕОПРЕДЕЛЕНО) КАК ФорматОбмена
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + " КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
			|		ПО Таблица.Ссылка = ПротоколОбмена.Документ
			|ГДЕ
			|	Таблица." + ИмяРеквизита + " = &Значение
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбмена.ДатаСоздания ВОЗР
			|");
		КонецЕсли;

	Иначе

		Если МетаданныеОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                       КАК Ссылка,
			|	Таблица.ДокументОснование            КАК ДокументОснование,
			|	Таблица.ФорматОбмена                 КАК ФорматОбмена,
#Удаление
			|	ЕСТЬNULL(ПротоколОбменаИсходящий.Ссылка,       НЕОПРЕДЕЛЕНО)     КАК ИсходящееСообщение,
			|	ЕСТЬNULL(ПротоколОбменаИсходящий.Операция,     НЕОПРЕДЕЛЕНО)     КАК Операция,
			|	ЕСТЬNULL(ПротоколОбменаИсходящий.ДатаСоздания, ДатаВремя(1,1,1)) КАК ДатаСоздания
#КонецУдаления
#Вставка
			|ВЫБОР
			|	КОГДА ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|		ТОГДА ЕСТЬNULL(ПротоколОбменаИсходящий.Ссылка,       НЕОПРЕДЕЛЕНО)
			|	ИНАЧЕ
			|		НЕОПРЕДЕЛЕНО
			|КОНЕЦ КАК ИсходящееСообщение,
			|ВЫБОР
			|	КОГДА ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|		ТОГДА ЕСТЬNULL(ПротоколОбменаИсходящий.Операция,     НЕОПРЕДЕЛЕНО)
			|	ИНАЧЕ
			|		НЕОПРЕДЕЛЕНО
			|КОНЕЦ КАК Операция,
			|ВЫБОР
			|	КОГДА ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|		ТОГДА ЕСТЬNULL(ПротоколОбменаИсходящий.ДатаСоздания, ДатаВремя(1,1,1))
			|	ИНАЧЕ
			|		НЕОПРЕДЕЛЕНО
			|КОНЕЦ КАК ДатаСоздания
#КонецВставки
			|ИЗ
			|	Документ.ТТНВходящаяЕГАИС КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаИсходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаИсходящий.Документ
			|			И ПротоколОбменаИсходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаВходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаВходящий.Документ
			|			И ПротоколОбменаВходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
			|			И ПротоколОбменаВходящий.СообщениеОснование = ПротоколОбменаИсходящий.Ссылка
			|			И ПротоколОбменаВходящий.Операция = &ВидКвитанции
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузополучатель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение
#Удаление
			|	И ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
#КонецУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбменаИсходящий.ДатаСоздания УБЫВ
			|");

		ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда

			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                       КАК Ссылка,
			|	Таблица.ДокументОснование            КАК ДокументОснование,
			|	ПротоколОбменаИсходящий.Ссылка       КАК ИсходящееСообщение,
			|	ПротоколОбменаИсходящий.Операция     КАК Операция,
			|	ПротоколОбменаИсходящий.ФорматОбмена КАК ФорматОбмена,
			|	ПротоколОбменаИсходящий.ДатаСоздания КАК ДатаСоздания
			|ИЗ
			|	Документ.ТТНИсходящаяЕГАИС КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаИсходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаИсходящий.Документ
			|			И ПротоколОбменаИсходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаВходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаВходящий.Документ
			|			И ПротоколОбменаВходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
			|			И ПротоколОбменаВходящий.СообщениеОснование = ПротоколОбменаИсходящий.Ссылка
			|			И ПротоколОбменаВходящий.Операция = &ВидКвитанции
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузоотправитель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение
			|	И ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбменаИсходящий.ДатаСоздания УБЫВ
			|");

		Иначе

			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                       КАК Ссылка,
			|	Таблица.ДокументОснование            КАК ДокументОснование,
			|	ПротоколОбменаИсходящий.Ссылка       КАК ИсходящееСообщение,
			|	ПротоколОбменаИсходящий.Операция     КАК Операция,
			|	ПротоколОбменаИсходящий.ФорматОбмена КАК ФорматОбмена,
			|	ПротоколОбменаИсходящий.ДатаСоздания КАК ДатаСоздания
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + " КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаИсходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаИсходящий.Документ
			|			И ПротоколОбменаИсходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаВходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаВходящий.Документ
			|			И ПротоколОбменаВходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
			|			И ПротоколОбменаВходящий.СообщениеОснование = ПротоколОбменаИсходящий.Ссылка
			|			И ПротоколОбменаВходящий.Операция = &ВидКвитанции
			|ГДЕ
			|	Таблица." + ИмяРеквизита + " = &Значение
			|	И ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбменаИсходящий.ДатаСоздания УБЫВ
			|");

		КонецЕсли;

		Запрос.УстановитьПараметр("ВидКвитанции", ВидКвитанции);

	КонецЕсли;

	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Значение",         Значение);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда

		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",             Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("ДокументОснование",  Выборка.ДокументОснование);
		ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Выборка.ИсходящееСообщение);
		ВозвращаемоеЗначение.Вставить("Операция",           Выборка.Операция);
		ВозвращаемоеЗначение.Вставить("ФорматОбмена",       Выборка.ФорматОбмена);

		Возврат ВозвращаемоеЗначение;

	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&ИзменениеИКонтроль("ДобавитьВРезультат")
Процедура бг_ДобавитьВРезультат(Результат, Приоритет, ДобавляемоеЗначение)

	Если ДобавляемоеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Значение = Результат.Получить(Приоритет);
	Если Значение = Неопределено Тогда
		Значение = Новый Массив();
	КонецЕсли;
#Вставка
	// дублируются гиперссылки оформления документов ЕГАИС
	КоллекцияОтсутствует = Истина;
	Для Каждого Элемент Из Значение Цикл
		Если ОбщегоНазначения.КоллекцииИдентичны(Элемент, ДобавляемоеЗначение) Тогда
			КоллекцияОтсутствует = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КоллекцияОтсутствует Тогда
		Значение.Добавить(ДобавляемоеЗначение);		
	КонецЕсли;
#КонецВставки
#Удаление
	Значение.Добавить(ДобавляемоеЗначение);
#КонецУдаления

	Результат.Вставить(Приоритет, Значение);

КонецПроцедуры

&ИзменениеИКонтроль("ДанныеДокументаЕГАИС")
Функция бг_ДанныеДокументаЕГАИС(МетаданныеДокумента, ДокументыПоОснованию, СтатусыОформления)

	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокумента);
	
	Если Не ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныеСтроки = Новый Массив;
	
	Представления = ПредставлениеДокумента(МетаданныеДокумента);
	
	МассивДокументов = ДокументыПоОснованию[МетаданныеДокумента.Имя];
	
	ЕстьСтатусОформления = СтатусыОформления.Свойство(МетаданныеДокумента.Имя);
	Если ЕстьСтатусОформления Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокумента.Имя];
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ПустаяСсылка();
	КонецЕсли;
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		МассивДокументов = ДокументыПоОснованию[МетаданныеДокумента.Имя];
		Если МассивДокументов.Количество() = 1 Тогда
			
			ДанныеДокумента = МассивДокументов[0];
			
			ТекстНадписи = СтрШаблон(Представления.Представление, ДанныеДокумента.Статус);
			
			Если СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично Тогда
				ИмяКоманды = "ОткрытьПротоколОбменаЕГАИС";
			ИначеЕсли СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.НеОформлено Тогда
				ИмяКоманды = "ОткрытьПротоколОбменаЕГАИС";
			ИначеЕсли СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ЕстьОшибкиОформления Тогда
				ИмяКоманды = "ОткрытьПротоколОбменаЕГАИС";
			Иначе
				ИмяКоманды = Представления.ИмяКомандыОткрыть;
			КонецЕсли;
			
		ИначеЕсли МассивДокументов.Количество() > 1 Тогда
			
			ТекстНадписи = СтрШаблон(Представления.НесколькоДокументовПредставление, МассивДокументов.Количество());
			ИмяКоманды   = "ОткрытьПротоколОбменаЕГАИС";
			
		КонецЕсли;
		
		Если ТекстНадписи = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
#Удаление
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
			
			ТекстНадписи = ТекстНадписи + ", " + СтатусОформления;
			
		КонецЕсли;
#КонецУдаления
		
		Если ИмяКоманды = Неопределено Тогда
			Цвет = Неопределено;
		Иначе
			Цвет = ЦветаСтиля.ЦветГиперссылкиГосИС;
		КонецЕсли;
		
		ФорматированныеСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды));
		
	Иначе
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = Представления.КомандаСоздать;
				ИмяКоманды   = Представления.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
				ИмяКоманды   = Неопределено;
			КонецЕсли;
			
			Если ТекстНадписи = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГосИС;
			КонецЕсли;
			
			ФорматированныеСтроки.Добавить(
				Новый ФорматированнаяСтрока(
					ТекстНадписи,,
					Цвет,,
					ИмяКоманды));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Представление",       Новый ФорматированнаяСтрока(ФорматированныеСтроки));
	ВозвращаемоеЗначение.Вставить("МассивДокументов",    МассивДокументов);
	ВозвращаемоеЗначение.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	ВозвращаемоеЗначение.Вставить("СтатусОформления",    СтатусОформления);
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

#КонецОбласти
