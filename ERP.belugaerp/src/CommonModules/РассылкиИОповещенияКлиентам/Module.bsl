
#Область СлужебныйПрограммныйИнтерфейс

&ИзменениеИКонтроль("ИсточникОповещенияПередЗаписьюДокументы")
Процедура бг_ИсточникОповещенияПередЗаписьюДокументы(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда

		ОбработатьИзменениеСчетаНаОплату(Источник, "ПередЗаписью", РежимЗаписи);

	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда

			ОбработатьИзменениеПоступленияОплаты(Источник, "ПередЗаписью", РежимЗаписи);
#Вставка
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.битЗагрузкаПриостановленныхЛицензийКонтрагентов") Тогда
		бг_ОбработатьПередЗаписьюбитЗагрузкаПриостановленныхЛицензийКонтрагентов(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		бг_ОбработатьПередЗаписьюТТНИсходящаяЕГАИС(Источник);
	Иначе
#КонецВставки

	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ИсточникОповещенияПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

&ИзменениеИКонтроль("ИсточникОповещенияПриЗаписиДокументы")
Процедура бг_ИсточникОповещенияПриЗаписиДокументы(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда

		ОбработатьИзменениеСчетаНаОплату(Источник, "ПриЗаписи", Неопределено);

	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств")
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.ОперацияПоПлатежнойКарте") Тогда

			ОбработатьИзменениеПоступленияОплаты(Источник, "ПриЗаписи", Неопределено);
#Вставка
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.битЗагрузкаПриостановленныхЛицензийКонтрагентов") Тогда
		бг_ОбработатьПриЗаписибитЗагрузкаПриостановленныхЛицензийКонтрагентов(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ТТНИсходящаяЕГАИС") Тогда
		бг_ОбработатьПриЗаписиТТНИсходящаяЕГАИС(Источник);
	Иначе
#КонецВставки

	КонецЕсли;

	МодификацияКонфигурацииПереопределяемый.ИсточникОповещенияПриЗаписи(Источник, Отказ);

КонецПроцедуры

Процедура бг_ПередЗаписьюСправочника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ЛицензииПоставщиковАлкогольнойПродукции") Тогда
		бг_ОбработатьПередЗаписьюЛицензииПоставщиковАлкогольнойПродукции(Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ПриЗаписиСправочника(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ЛицензииПоставщиковАлкогольнойПродукции") Тогда
		бг_ОбработатьПриЗаписиЛицензииПоставщиковАлкогольнойПродукции(Источник, Отказ);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиРегистрацииОповещений

// Обработчик перед записью справочника "Лицензии поставщиков алкогольной продукции".
// Параметры:
//	Источник - СправочникОбъект.ЛицензииПоставщиковАлкогольнойПродукции - записываемый объект.
//
Процедура бг_ОбработатьПередЗаписьюЛицензииПоставщиковАлкогольнойПродукции(Источник)

	КонтролируемыеРеквизиты = "бг_ПриостановленаСДаты";
	Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи",
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, КонтролируемыеРеквизиты));
	
КонецПроцедуры

// Обработчик при записи справочника "Лицензии поставщиков алкогольной продукции".
// Параметры:
//	Источник - СправочникОбъект.ЛицензииПоставщиковАлкогольнойПродукции - записываемый объект.
//	Отказ - Булево - признак отказа.
//
Процедура бг_ОбработатьПриЗаписиЛицензииПоставщиковАлкогольнойПродукции(Источник, Отказ)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКонтрольИзмененияДатыПриостановки = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(
		Перечисления.ТипыСобытийОповещений.бг_ИзменениеАлкогольнойЛицензииПоставщика);

	ДанныеДоЗаписи = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи", ДанныеДоЗаписи);
	Если ДанныеДоЗаписи = Неопределено Тогда
		Возврат; // Возможно стоит как-то обрабатывать эту ситуацию.
	КонецЕсли;
	
	Если ЕстьКонтрольИзмененияДатыПриостановки
		И Не ДанныеДоЗаписи.бг_ПриостановленаСДаты = Источник.бг_ПриостановленаСДаты Тогда
		ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.бг_ИзменениеАлкогольнойЛицензииПоставщика,
			Источник.Ссылка,
			,
			Дата(1, 1, 1),
			ТекущаяДатаСеанса()+ 86400*3);
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ОбработатьПередЗаписьюбитЗагрузкаПриостановленныхЛицензийКонтрагентов(Источник)
	
	КонтролируемыеРеквизиты = "ВидОшибки";
	Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи",
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, КонтролируемыеРеквизиты));	
	
КонецПроцедуры

// Обработчик при записи документа "Загрузка приостановленных лицензий контрагентов".
// Параметры:
//	Источник - ДокументОбъект.битЗагрузкаПриостановленныхЛицензийКонтрагентов - записываемый объект.
//	Отказ - Булево - признак отказа.
//
Процедура бг_ОбработатьПриЗаписибитЗагрузкаПриостановленныхЛицензийКонтрагентов(Источник)
	
	ЕстьКонтрольЗагрузкиЛицензий = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(
		Перечисления.ТипыСобытийОповещений.бг_ЗагрузкаИнформацииПоЛицензиям);
	
	ДанныеДоЗаписи = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи", ДанныеДоЗаписи);
	Если ДанныеДоЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьКонтрольЗагрузкиЛицензий
		И Не ДанныеДоЗаписи.ВидОшибки = Источник.ВидОшибки
		И ЗначениеЗаполнено(Источник.ВидОшибки) Тогда
		ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.бг_ЗагрузкаИнформацииПоЛицензиям,
			Источник.Ссылка,
			,
			Дата(1, 1, 1),
			ТекущаяДатаСеанса()+ 86400*3);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перед записью документа "ТТН исходящая ЕГАИС".
// Параметры:
//	Источник - ДокументОбъект.ТТНИсходящаяЕГАИС - записываемый объект.
//	Отказ - Булево - признак отказа.
//
Процедура бг_ОбработатьПередЗаписьюТТНИсходящаяЕГАИС(Источник)
	
	КонтролируемыеРеквизиты = "бг_НомерФиксацииЕГАИС";
	Источник.ДополнительныеСвойства.Вставить("ДанныеДоЗаписи",
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, КонтролируемыеРеквизиты));	
	
КонецПроцедуры

// Обработчик при записи документа "ТТН исходящая ЕГАИС".
// Параметры:
//	Источник - ДокументОбъект.ТТНИсходящаяЕГАИС - записываемый объект.
//	Отказ - Булево - признак отказа.
//
Процедура бг_ОбработатьПриЗаписиТТНИсходящаяЕГАИС(Источник)
	
	ДанныеДоЗаписи = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ДанныеДоЗаписи", ДанныеДоЗаписи);
	Если ДанныеДоЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяСоздатьОповещениеПоОтгрузкеПродукции(Источник, ДанныеДоЗаписи) Тогда
			
		ОтправлятьОповещениеСДаты = Дата(1, 1, 1);
		КоличествоСекундВОдномДне = 86400;
		КоличествоДней = 3;
		АктуальностьОповещенияДоДаты = ТекущаяДатаСеанса() + КоличествоДней * КоличествоСекундВОдномДне;
		ЗаписьВОчередьПоТипуСобытия(Перечисления.ТипыСобытийОповещений.бг_ОтгрузкаГотовойПродукции,
			Источник.Ссылка,
			ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Источник.ДокументОснование, "Партнер"),
			ОтправлятьОповещениеСДаты,
			АктуальностьОповещенияДоДаты);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиГенерацииСообщений

&ИзменениеИКонтроль("ДанныеШаблонаСообщений")
Функция бг_ДанныеШаблонаСообщений(ДатаОтработки, ВидОповещения, ШаблонСообщения, ПараметрыУсловия,
	ПредназначенДляПисем, ДанныеТипаСобытия)

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ДанныеШаблона",               Неопределено);
	СтруктураВозврата.Вставить("ТаблицаВыводимыхПолей",       Неопределено);
	СтруктураВозврата.Вставить("ТаблицаПрисоединенныхФайлов", Неопределено);

	ДанныеШаблона = ШаблоныСообщений.ПараметрыШаблона(ШаблонСообщения);
	СтруктураВозврата.ДанныеШаблона = ДанныеШаблона;

	Если ДанныеШаблона.ШаблонПоВнешнейОбработке Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;

	СоответствиеПараметровТекстаСообщения = ШаблоныСообщений.ПараметрыИзТекстаСообщения(ДанныеШаблона);

	Если СоответствиеПараметровТекстаСообщения.Количество() = 0 Тогда
		ТипСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОповещения, "ТипСобытия");
		Если Не ЗначениеЗаполнено(ТипСобытия) Тогда
			Возврат Неопределено;
		КонецЕсли;
#Удаление
		СоответствиеПараметровТекстаСообщения.Вставить(ОбщегоНазначения.ИмяЗначенияПеречисления(ТипСобытия), Новый Массив);
#КонецУдаления
#Вставка
		СоответствиеПараметровТекстаСообщения.Вставить(ОбщегоНазначения.ИмяЗначенияПеречисления(ТипСобытия), Новый Соответствие);
#КонецВставки
	КонецЕсли;

	Для каждого ЭлементСоответствия Из СоответствиеПараметровТекстаСообщения Цикл

		Если ДанныеТипаСобытия.Имя <> ЭлементСоответствия.Ключ Тогда
			Продолжить;
		КонецЕсли;

		Попытка

			МакетСКД = Перечисления.ТипыСобытийОповещений.ПолучитьМакет(ЭлементСоответствия.Ключ);
			СнятьОграничениеИспользованияУПоля("Подписчик", МакетСКД.НаборыДанных.Данные);
			СнятьОграничениеИспользованияУПоля("ИсточникОповещения", МакетСКД.НаборыДанных.Данные);

			АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД, Новый УникальныйИдентификатор);
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));

			КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();

			Для Каждого ВыбранноеПоле Из ЭлементСоответствия.Значение Цикл
				ОтчетыУТКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ВыбранноеПоле.Ключ);
			КонецЦикла;
			ОтчетыУТКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "ИсточникОповещения");
			ОтчетыУТКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, "Подписчик");

			Если ПараметрыУсловия <> Неопределено Тогда
				Для Каждого Параметр Из ПараметрыУсловия Цикл
					Если (Не Параметр.ЭтоПараметрПредыдущегоСообщения)
						  И (ЭлементСоответствия.Значение.Получить(Параметр.ИмяПараметра) = Неопределено) Тогда
						ОтчетыУТКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, Параметр.ИмяПараметра);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(МакетСКД, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.Данные.Запрос;

			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;

			Для Каждого ЗначениеПараметра Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл

				Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("ВыражениеКомпоновкиДанных") Тогда
					Запрос.УстановитьПараметр(ЗначениеПараметра.Имя, ОбщегоНазначения.ВычислитьВБезопасномРежиме(ЗначениеПараметра.Значение));
				КонецЕсли;

			КонецЦикла;

			Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
			Запрос.УстановитьПараметр("ДатаОтработки", ДатаОтработки);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());

			СтруктураВозврата.ТаблицаВыводимыхПолей = Запрос.Выполнить().Выгрузить();

			Прервать;

		Исключение

			Возврат Неопределено

		КонецПопытки;

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШаблоныСообщенийПрисоединенныеФайлы.Ссылка,
	|	ШаблоныСообщенийПрисоединенныеФайлы.Размер,
	|	ШаблоныСообщенийПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма,
	|	ШаблоныСообщенийПрисоединенныеФайлы.Наименование,
	|	ШаблоныСообщенийПрисоединенныеФайлы.Расширение,
	|	НЕОПРЕДЕЛЕНО КАК АдресВременногоХранилища
	|ИЗ
	|	Справочник.ШаблоныСообщенийПрисоединенныеФайлы КАК ШаблоныСообщенийПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ШаблоныСообщенийПрисоединенныеФайлы.ПометкаУдаления
	|	И ШаблоныСообщенийПрисоединенныеФайлы.ВладелецФайла = &ШаблонСообщения
	|	И ШаблоныСообщенийПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма <> """"";

	Запрос.УстановитьПараметр("ШаблонСообщения", ШаблонСообщения);

	Результат = Запрос.Выполнить();

	ТаблицаПрисоединенныхФайлов = Результат.Выгрузить();
	УникальныйИдентификаторДляПомещения = Новый УникальныйИдентификатор;
	Для Каждого ПрисоединенныйФайл Из ТаблицаПрисоединенныхФайлов Цикл

		ПрисоединенныйФайл.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(
		                                     РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл["Ссылка"]),
		                                     УникальныйИдентификаторДляПомещения);
	КонецЦикла;

	СтруктураВозврата.ТаблицаПрисоединенныхФайлов = ТаблицаПрисоединенныхФайлов;
	Возврат СтруктураВозврата;

КонецФункции

&ИзменениеИКонтроль("ДанныеВидаОповещения")
Функция бг_ДанныеВидаОповещения(ВидОповещения)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыОповещенийКлиентам.Ссылка КАК ВидОповещения,
	|	ВидыОповещенийКлиентам.ГруппаРассылокИОповещений,
	|	ВидыОповещенийКлиентам.ПредназначенаДляЭлектронныхПисем,
	|	ВидыОповещенийКлиентам.ПредназначенаДляSMS,
	|	ВидыОповещенийКлиентам.ШаблонСообщенияSMS,
	|	ВидыОповещенийКлиентам.ШаблонЭлектронногоПисьма,
	|	ВидыОповещенийКлиентам.УсловиеОтправки,
	|	ВидыОповещенийКлиентам.ТипСобытия,
	|	ГруппыРассылокИОповещений.Принудительная,
	|	ГруппыРассылокИОповещений.УчетнаяЗапись,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииПартнераДляПисем,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииПартнераДляSMS,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем,
	|	ГруппыРассылокИОповещений.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS,
	|	ГруппыРассылокИОповещений.ОтправлятьПартнеру,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактномуЛицуОбъектаОповещения,
	|	ГруппыРассылокИОповещений.ОтправлятьКонтактнымЛицамРоли,
	|	ГруппыРассылокИОповещений.РольКонтактногоЛица,
	|	ГруппыРассылокИОповещений.Ответственный,
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.ИмяПользователя, """") КАК УчетнаяЗаписьИмяПользователя,
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты, """") КАК УчетнаяЗаписьАдресЭлектроннойПочты,
	|	ЕСТЬNULL(НастройкиУчетныхЗаписейЭлектроннойПочты.УдалятьПисьмаПослеОтправки, ЛОЖЬ) КАК УдалятьПисьмаПослеОтправки,
	|	ВидыОповещенийКлиентам.Наименование,
	|	ВидыОповещенийКлиентам.ПараметрыУсловия.(
	|		ЭтоПараметрПредыдущегоСообщения,
	|		ИмяПараметра
	|	),
	|	ВидыОповещенийКлиентам.ИспользуетсяУсловиеОтправки
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК ВидыОповещенийКлиентам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыРассылокИОповещений КАК ГруппыРассылокИОповещений
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|				ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
	|			ПО ГруппыРассылокИОповещений.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|		ПО ВидыОповещенийКлиентам.ГруппаРассылокИОповещений = ГруппыРассылокИОповещений.Ссылка
	|ГДЕ
	|	ВидыОповещенийКлиентам.Ссылка = &ВидОповещенийКлиентам
	|	И НЕ ВидыОповещенийКлиентам.ПометкаУдаления";

	Запрос.УстановитьПараметр("ВидОповещенийКлиентам", ВидОповещения);
#Вставка
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГруппыРассылокИОповещений.Ответственный,",
		"ГруппыРассылокИОповещений.Ответственный,
		|	ГруппыРассылокИОповещений.бг_АдресацияЭлектронныхПисем,
		|	ГруппыРассылокИОповещений.бг_ГруппаПользователей,");
#КонецВставки

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка;

КонецФункции

&ИзменениеИКонтроль("ДанныеПолучателейПоВидуОповещения")
Функция бг_ДанныеПолучателейПоВидуОповещения(ДанныеВидаОповещения, ДатаОбработки, ДанныеТипаСобытия)

	ШаблонЗапроса = "
	|%ВременнаяТаблицаПодписчики%
	|%ВременнаяТаблицаКонтактныеЛицаОповещения%
	|%ВременнаяТаблицаКонтактныеЛицаПодписчика%
	|%КонтактнаяИнформацияПодписчики%
	|%КонтактнаяИнформацияКонтактныхЛицОповещения%
	|%КонтактнаяИнформацияКонтактныхЛицПодписчика%
	|
	|ИТОГИ ПО
	|	ИсточникОповещения,
	|	Подписчик,
	|	Получатель
	|";

#Вставка
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%КонтактнаяИнформацияКонтактныхЛицПодписчика%",
		"%КонтактнаяИнформацияКонтактныхЛицПодписчика%
		|%КонтактнаяИнформацияИзСКД%
		|%КонтактнаяИнформацияПоГруппеПользователей%");
#КонецВставки
	ИтоговыйЗапросСодержитТекст = Ложь;

	ОбработатьТекстЗапросаПоПодписчикамДляОповещений(ШаблонЗапроса,
	                                                 ДанныеВидаОповещения,
	                                                 ДатаОбработки,
	                                                 ДанныеТипаСобытия,
	                                                 ИтоговыйЗапросСодержитТекст);

	ОбработатьТекстЗапросаПоКонтактнымЛицамДляОповещений(ШаблонЗапроса,
	                                                     ДанныеВидаОповещения,
	                                                     ДатаОбработки,
	                                                     ДанныеТипаСобытия,
	                                                     ИтоговыйЗапросСодержитТекст);

	ОбработатьТекстЗапросаПоКонтактнымЛицамПодписчика(ШаблонЗапроса,
	                                                  ДанныеВидаОповещения,
	                                                  ДатаОбработки,
	                                                  ДанныеТипаСобытия,
	                                                  ИтоговыйЗапросСодержитТекст);
#Вставка
	бг_ОбработатьТекстЗапросаПоСКД(ШаблонЗапроса,
	                                                  ДанныеВидаОповещения,
	                                                  ДатаОбработки,
	                                                  ДанныеТипаСобытия,
	                                                  ИтоговыйЗапросСодержитТекст);
	бг_ОбработатьТекстЗапросаПоГруппеПользователей(ШаблонЗапроса,
	                                                  ДанныеВидаОповещения,
	                                                  ДатаОбработки,
	                                                  ДанныеТипаСобытия,
	                                                  ИтоговыйЗапросСодержитТекст);
#КонецВставки

	ТекстЗапросаПоКонтактнымЛицам = "";

	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапроса;

	Запрос.УстановитьПараметр("ВидОповещения", ДанныеВидаОповещения.ВидОповещения);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);
	Запрос.УстановитьПараметр("РольКонтактногоЛица", ДанныеВидаОповещения.РольКонтактногоЛица);
	Запрос.УстановитьПараметр("ВидКИКонтактногоЛицаДляПисем", ДанныеВидаОповещения.ВидКонтактнойИнформацииКонтактногоЛицаДляПисем);
	Запрос.УстановитьПараметр("ВидКИКонтактногоЛицаДляSMS", ДанныеВидаОповещения.ВидКонтактнойИнформацииКонтактногоЛицаДляSMS);
	Запрос.УстановитьПараметр("ВидКИПартнераДляПисем", ДанныеВидаОповещения.ВидКонтактнойИнформацииПартнераДляПисем);
	Запрос.УстановитьПараметр("ВидКИПартнераДляSMS", ДанныеВидаОповещения.ВидКонтактнойИнформацииПартнераДляSMS);
	Запрос.УстановитьПараметр("ГруппаРассылокИОповещений", ДанныеВидаОповещения.ГруппаРассылокИОповещений);
#Вставка
	Запрос.УстановитьПараметр("ГруппаПользователей", ДанныеВидаОповещения.бг_ГруппаПользователей);
#КонецВставки

	СоответствиеДанныхПолучателей = Новый Соответствие;

	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл

		СоответствиеПодписчики = Новый Соответствие;

		ВыборкаПодписчик = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодписчик.Следующий() Цикл

			СтруктураДанныеПодписчика = Новый Структура;
			МассивПолучателей = Новый Массив;

			ВыборкаПолучатель = ВыборкаПодписчик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПолучатель.Следующий() Цикл

				МассивНомеровТелефонов  = Новый Массив;
				МассивАдресовЭП         = Новый Массив;
				ПредставлениеПолучателя = "";

				ВыборкаДетали = ВыборкаПолучатель.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл

					ПредставлениеПолучателя = ?(ПустаяСтрока(ПредставлениеПолучателя), ВыборкаДетали.ПредставлениеПолучателя, ПредставлениеПолучателя);

					Если ДанныеВидаОповещения.ПредназначенаДляSMS
						И (НЕ ПустаяСтрока(ВыборкаДетали.ПредставлениеТелефон) ИЛИ НЕ ПустаяСтрока(ВыборкаДетали.ЗначениеПолейТелефон)) Тогда

						МассивНомеровТелефонов.Добавить(Новый Структура("Представление, ЗначениеПолей",
						                                                ВыборкаДетали.ПредставлениеТелефон, ВыборкаДетали.ЗначениеПолейТелефон));

					КонецЕсли;

					Если ДанныеВидаОповещения.ПредназначенаДляЭлектронныхПисем
						И (НЕ ПустаяСтрока(ВыборкаДетали.ПредставлениеПисьмо) ИЛИ НЕ ПустаяСтрока(ВыборкаДетали.ЗначениеПолейПисьмо)) Тогда

						МассивАдресовЭП.Добавить(Новый Структура("Представление, ЗначениеПолей",
						                                         ВыборкаДетали.ПредставлениеПисьмо, ВыборкаДетали.ЗначениеПолейПисьмо));

					КонецЕсли;

				КонецЦикла;

				СтруктураКонтактнойИнформации = Новый Структура;
				СтруктураКонтактнойИнформации.Вставить("МассивНомеровТелефонов", МассивНомеровТелефонов);
				СтруктураКонтактнойИнформации.Вставить("МассивАдресовЭП", МассивАдресовЭП);

				СтруктураПолучатель = Новый Структура;
				СтруктураПолучатель.Вставить("Получатель", ВыборкаПолучатель.Получатель);
				СтруктураПолучатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
				СтруктураПолучатель.Вставить("КонтактнаяИнформация", СтруктураКонтактнойИнформации);

				МассивПолучателей.Добавить(СтруктураПолучатель);

			КонецЦикла;

			СтруктураДанныеПодписчика.Вставить("МассивПолучателей", МассивПолучателей);
			СтруктураДанныеПодписчика.Вставить("ДатаОтправки", Дата(1,1,1));
			СтруктураДанныеПодписчика.Вставить("ДатаАктуальностиОтправки", Дата(1,1,1));
			СтруктураДанныеПодписчика.Вставить("ДанныеПоследнегоОповещения", Неопределено);
			СоответствиеПодписчики.Вставить(ВыборкаПодписчик.Подписчик, СтруктураДанныеПодписчика);

		КонецЦикла;

		СоответствиеДанныхПолучателей.Вставить(ВыборкаИтоги.ИсточникОповещения, СоответствиеПодписчики);

	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения КАК ИсточникОповещения,
	|	ОчередьСобытийДляОповещенийКлиентам.Подписчик КАК Подписчик,
	|	МАКСИМУМ(ОчередьСобытийДляОповещенийКлиентам.ДатаОтправки) КАК ДатаОтправки,
	|	МАКСИМУМ(ОчередьСобытийДляОповещенийКлиентам.ДатаАктуальностиОтправки) КАК ДатаАктуальностиОтправки
	|ПОМЕСТИТЬ ДатыРассылок
	|ИЗ
	|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
	|ГДЕ
	|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
	|	И ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаОбработки
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения,
	|	ОчередьСобытийДляОповещенийКлиентам.Подписчик
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсточникОповещения,
	|	Подписчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРассылок.ИсточникОповещения,
	|	ДатыРассылок.Подписчик,
	|	ДатыРассылок.ДатаОтправки,
	|	ДатыРассылок.ДатаАктуальностиОтправки,
	|	ЕСТЬNULL(ДанныеПоследнихОповещений.ДанныеПоследнегоОповещения, НЕОПРЕДЕЛЕНО) КАК ДанныеПоследнегоОповещения
	|ИЗ
	|	ДатыРассылок КАК ДатыРассылок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПоследнихОповещений КАК ДанныеПоследнихОповещений
	|		ПО ДатыРассылок.ИсточникОповещения = ДанныеПоследнихОповещений.ИсточникОповещения
	|			И ДатыРассылок.Подписчик = ДанныеПоследнихОповещений.Подписчик
	|			И (ДанныеПоследнихОповещений.ВидОповещения = &ВидОповещения)";

	Запрос.УстановитьПараметр("ВидОповещения", ДанныеВидаОповещения.ВидОповещения);
	Запрос.УстановитьПараметр("ДатаОбработки", ДатаОбработки);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		ДанныеИсточника = СоответствиеДанныхПолучателей.Получить(Выборка.ИсточникОповещения);
		Если ДанныеИсточника <> Неопределено Тогда
			ДанныеПодписчика = ДанныеИсточника.Получить(Выборка.Подписчик); // Структура
			Если ДанныеПодписчика <> Неопределено Тогда
				ДанныеПодписчика.ДатаОтправки               = Выборка.ДатаОтправки;
				ДанныеПодписчика.ДатаАктуальностиОтправки   = Выборка.ДатаАктуальностиОтправки;
				ДанныеПодписчика.ДанныеПоследнегоОповещения = Выборка.ДанныеПоследнегоОповещения;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат СоответствиеДанныхПолучателей;

КонецФункции

Процедура бг_ОбработатьТекстЗапросаПоСКД(ШаблонЗапроса, ДанныеВидаОповещения, ДатаОтработки, ДанныеТипаСобытия,
	ИтоговыйЗапросСодержитТекст)
	
	Если ИтоговыйЗапросСодержитТекст
		Или Не ЗначениеЗаполнено(ДанныеВидаОповещения.бг_АдресацияЭлектронныхПисем)
		Или ДанныеВидаОповещения.бг_АдресацияЭлектронныхПисем = "ГруппеПользователей" Тогда
		
		ТекстКонтактнаяИнформацияИзСКД = "";
		
	Иначе
		
		Макет = Справочники.ГруппыРассылокИОповещений.ПолучитьМакет(ДанныеВидаОповещения.бг_АдресацияЭлектронныхПисем);
		ТекстКонтактнаяИнформацияИзСКД = Макет.НаборыДанных[0].Запрос;
		
	КонецЕсли;
	
	ИтоговыйЗапросСодержитТекст = Макс(ИтоговыйЗапросСодержитТекст, Не ПустаяСтрока(ТекстКонтактнаяИнформацияИзСКД));
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%КонтактнаяИнформацияИзСКД%", ТекстКонтактнаяИнформацияИзСКД);
	
КонецПроцедуры

Процедура бг_ОбработатьТекстЗапросаПоГруппеПользователей(ШаблонЗапроса, ДанныеВидаОповещения, ДатаОтработки,
	ДанныеТипаСобытия, ИтоговыйЗапросСодержитТекст)
	
	Если ИтоговыйЗапросСодержитТекст
		Или Не ДанныеВидаОповещения.бг_АдресацияЭлектронныхПисем = "ГруппеПользователей"
		Или Не ЗначениеЗаполнено(ДанныеВидаОповещения.бг_ГруппаПользователей) Тогда
		
		ТекстКонтактнаяИнформация = "";
		
	Иначе
		
		ТекстКонтактнаяИнформация =
		"ВЫБРАТЬ
		|	СоставГруппы.Пользователь КАК Получатель,
		|	СоставГруппы.Пользователь.Наименование КАК ПредставлениеПолучателя,
		|	"""""""" КАК ПредставлениеТелефон,
		|	"""""""" КАК ЗначениеПолейТелефон,
		|	ЕСТЬNULL(КИ.Представление, """""""") КАК ПредставлениеПисьмо,
		|	ПОДСТРОКА(ЕСТЬNULL(КИ.ЗначенияПолей, """"""""), 1, 1024) КАК ЗначениеПолейПисьмо
		|ПОМЕСТИТЬ КонтактнаяИнформацияПоПользователям
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК СоставГруппы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КИ
		|		ПО СоставГруппы.Пользователь = КИ.Ссылка
		|			И (КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|			И (КИ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
		|ГДЕ
		|	СоставГруппы.Ссылка = &ГруппаПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Очередь.ИсточникОповещения КАК ИсточникОповещения,
		|	Очередь.Подписчик КАК Подписчик,
		|	КонтактнаяИнформацияПоПользователям.Получатель КАК Получатель,
		|	КонтактнаяИнформацияПоПользователям.ПредставлениеПолучателя КАК ПредставлениеПолучателя,
		|	КонтактнаяИнформацияПоПользователям.ПредставлениеТелефон КАК ПредставлениеТелефон,
		|	КонтактнаяИнформацияПоПользователям.ЗначениеПолейТелефон КАК ЗначениеПолейТелефон,
		|	КонтактнаяИнформацияПоПользователям.ПредставлениеПисьмо КАК ПредставлениеПисьмо,
		|	КонтактнаяИнформацияПоПользователям.ЗначениеПолейПисьмо КАК ЗначениеПолейПисьмо
		|ИЗ
		|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК Очередь
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтактнаяИнформацияПоПользователям КАК КонтактнаяИнформацияПоПользователям
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Очередь.ВидОповещения = &ВидОповещения
		|	И Очередь.Период < &ДатаОбработки";
		
	КонецЕсли;
	
	ИтоговыйЗапросСодержитТекст = Макс(ИтоговыйЗапросСодержитТекст,
		Не ПустаяСтрока(ТекстКонтактнаяИнформация));
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%КонтактнаяИнформацияПоГруппеПользователей%",
		ТекстКонтактнаяИнформация);
	
КонецПроцедуры

&ИзменениеИКонтроль("СоздатьПисьмоПоОповещению")
Процедура бг_СоздатьПисьмоПоОповещению(ДанныеПолучателей, СтрокаДанныхШаблона, ДанныеВидаОповещения,
	ДанныеШаблонаПисьма, ДанныеТипаСобытия, МассивСозданныхВзаимодействий)

	Если НЕ СообщениеУдовлетворяетУсловиюОтправки(ДанныеВидаОповещения, СтрокаДанныхШаблона, ДанныеПолучателей) Тогда
		Возврат;
	КонецЕсли;

	Письмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();

	ЗаполнитьПолучателейПисьма(Письмо, ДанныеПолучателей);
	ДанныеШаблона = ДанныеШаблонаПисьма.ДанныеШаблона;
	ТаблицаПрисоединенныхФайлов = ДанныеШаблонаПисьма.ТаблицаПрисоединенныхФайлов;

	Если Письмо.ПолучателиКопий.Количество() = 0 И Письмо.ПолучателиПисьма.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьДанныеШапкиДокументаПисьмо(Письмо, ДанныеВидаОповещения, ДанныеПолучателей, ДанныеШаблона, ТаблицаПрисоединенныхФайлов);

	СоответствиеПараметров     = ЗначенияРеквизитовПоПараметрам(СтрокаДанныхШаблона, ДанныеШаблона, ДанныеТипаСобытия);
	Письмо.Тема                = ШаблоныСообщений.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
	                                                          ДанныеШаблона.Тема,
	                                                          СоответствиеПараметров);
	Если ДанныеШаблона.ФорматПисьма = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
		Письмо.Текст = ШаблоныСообщений.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
		                                                          ДанныеШаблона.Текст,
		                                                          СоответствиеПараметров);
	Иначе
		Письмо.ТекстHTML = ШаблоныСообщений.ВставитьПараметрыВСтрокуСогласноТаблицеПараметров(
		                                                                ДанныеШаблона.Текст,
		                                                                СоответствиеПараметров);
		Письмо.Текст     = Взаимодействия.ПолучитьОбычныйТекстИзHTML(Письмо.ТекстHTML);
	КонецЕсли;

	СформироватьСпискиПолучателей(Письмо);
	Письмо.Записать();

	Для Каждого Вложение Из ТаблицаПрисоединенныхФайлов Цикл

		ПараметрыВложения = Новый Структура;
		ПараметрыВложения.Вставить("ИмяФайла", Вложение.Наименование);
		ПараметрыВложения.Вставить("Размер",   Вложение.Размер);

		ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
		                                Письмо.Ссылка, Вложение.АдресВременногоХранилища, ПараметрыВложения);

		Если ПрисоединенныйФайл <> Неопределено Тогда
			ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИДФайлаЭлектронногоПисьма;
			ПрисоединенныйФайлОбъект.Записать();
		КонецЕсли;

	КонецЦикла;
#Вставка
	Если ДанныеТипаСобытия.Имя = "бг_ОтгрузкаГотовойПродукции" Тогда
		
		ОписаниеПакета = бг_ФормированиеПакетаОтгрузкиГотовойПродукцииВызовСервера.ОписаниеПакета(
			СтрокаДанныхШаблона.ИсточникОповещения);
		Если ЗначениеЗаполнено(ОписаниеПакета.Адрес) Тогда
			
			ПараметрыВложения = Новый Структура;
			ПараметрыВложения.Вставить("ИмяФайла", ОписаниеПакета.ИмяФайла);
			ПараметрыВложения.Вставить("Размер",   ОписаниеПакета.Размер);
			
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
				Письмо.Ссылка, ОписаниеПакета.Адрес, ПараметрыВложения);
			
		КонецЕсли;
		
	КонецЕсли;

#КонецВставки

	МассивСозданныхВзаимодействий.Добавить(Письмо.Ссылка);
	ВыполнитьЗаписьДанныхОповещения(СтрокаДанныхШаблона, ДанныеВидаОповещения);
	УстановитьФлагРассмотреноПослеСозданияПисьма(Письмо);

КонецПроцедуры

#КонецОбласти

Функция ТребуетсяСоздатьОповещениеПоОтгрузкеПродукции(Источник, ДанныеДоЗаписи)
	
	ЕстьОповещениеПоОтгрузкеПродукции = РассылкиИОповещенияКлиентамПовтИсп.ТипСобытияИспользуется(
		Перечисления.ТипыСобытийОповещений.бг_ОтгрузкаГотовойПродукции);
	
	Возврат ЕстьОповещениеПоОтгрузкеПродукции
		И ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И Не ДанныеДоЗаписи.бг_НомерФиксацииЕГАИС = Источник.бг_НомерФиксацииЕГАИС
		И ЗначениеЗаполнено(Источник.бг_НомерФиксацииЕГАИС);
		
КонецФункции

&ИзменениеИКонтроль("ЗаписьВОчередьПоТипуСобытия")
Процедура бг_ЗаписьВОчередьПоТипуСобытия(ТипСобытияОповещения, ИсточникОповещения, Подписчик, ДатаОтправки, ДатаАктуальности)

	МассивВидовОповещений = РассылкиИОповещенияКлиентамПовтИсп.ДействующиеВидыОповещенийПоТипуСобытия(ТипСобытияОповещения);
#Вставка
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыВидов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОповещенийКлиентам КАК РеквизитыВидов
	|ГДЕ
	|	РеквизитыВидов.Ссылка В (&ВидыОповещений)
	|	И РеквизитыВидов.бг_ФормируетсяВручную";
	
	Запрос.УстановитьПараметр("ВидыОповещений", МассивВидовОповещений);
	ВидыОповещенийФормируемыеВручную = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
#КонецВставки

	Для Каждого ВидОповещения Из МассивВидовОповещений Цикл

#Вставка
		Если Не ВидыОповещенийФормируемыеВручную.Найти(ВидОповещения) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
#КонецВставки
			РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ВыполнитьЗаписьВРегистр(ВидОповещения,
			                                                                             Подписчик,
			                                                                             ИсточникОповещения,
			                                                                             ДатаОтправки,
			                                                                             ДатаАктуальности);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти
