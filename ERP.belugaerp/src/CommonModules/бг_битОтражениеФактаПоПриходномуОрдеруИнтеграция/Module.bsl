#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);	
	
КонецПроцедуры

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт

	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ЗагружаемыйОбъект.Ссылка) Тогда
		
		ПриходныйОрдерНаТовары = Документы.ПриходныйОрдерНаТовары.ПолучитьСсылку(
			Новый УникальныйИдентификатор(
				СтруктураОбъекта.ПриходныйОрдерНаТовары.Идентификатор));
		
		Если ЗначениеЗаполнено(ПриходныйОрдерНаТовары) И ОбщегоНазначения.СсылкаСуществует(ПриходныйОрдерНаТовары) Тогда
			
			ДанныеОрдера = Документы.ПриходныйОрдерНаТовары.бг_ДанныеОрдераWMS(ПриходныйОрдерНаТовары);
			ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ДанныеОрдера);
			
		Иначе
			ВызватьИсключение НСтр("ru='Документ должен быть связан с приходным ордером.'");
		КонецЕсли;
	КонецЕсли;
		
	Если ЭтоSolvoПоСтруктуре(СтруктураОбъекта)
		И ЭтоИнформативныйСтатусSolvoПоСтруктуре(
			СтруктураОбъекта,
			ЗагружаемыйОбъект.ЕстьМаркируемаяАлкогольнаяПродукция) Тогда
		
		ЗагружаемыйОбъект.СтатусSolvo = Перечисления.бг_СтатусыПриемкиSolvo[СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления];
		
	Иначе
		
		адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
			ЗагружаемыйОбъект,
			СтруктураОбъекта,,
			"Номер, Проведен");
		
		Если СтруктураОбъекта.ВариантЗагрузкиМарок = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ЧерезФайл Тогда
			ЗаполнитьМаркиУпаковкиИзФайла(ЗагружаемыйОбъект, СтруктураОбъекта);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Ссылка) Тогда
		
		ЗагружаемыйОбъект.ЗафиксироватьИзмененияПередЗаписью();
		
		Если Не ЗагружаемыйОбъект.ВДокументВнесеныВажныеИзменения() Тогда
			ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ПроводитьДокументыОтWMSОтложенно") Тогда
		
		Если Документы.битОтражениеФактаПоПриходномуОрдеру.НеобходимоПроводитьДокумент(ЗагружаемыйОбъект) Тогда
			
			ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить(
				"бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению",
				Истина);
				
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
				ЗагружаемыйОбъект.Ссылка,
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОбработатьДокументыWMS);
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиДанныхОбъектаВИБ(ЗагружаемыйОбъект, РезультатОбработки) Экспорт
	
	Если Не РезультатОбработки.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ПроводитьДокументыОтWMSОтложенно") Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоПроводитьДокумент = Документы.битОтражениеФактаПоПриходномуОрдеру.НеобходимоПроводитьДокумент(ЗагружаемыйОбъект);
	
	Если НеобходимоПроводитьДокумент Тогда
		
		Попытка
			
			ЗагружаемыйОбъект.Заблокировать();
			ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
				
			ШапкаОшибки = ОписаниеОшибки();
			
			ТелоОшибки = "";
			Для каждого СообщениеПользователю Из ПолучитьСообщенияПользователю(Истина) Цикл
				ТелоОшибки = ТелоОшибки + ?(ПустаяСтрока(ТелоОшибки), "", Символы.ПС) + СообщениеПользователю.Текст;
			КонецЦикла;
			
			ТекстОшибки = ШапкаОшибки + Символы.ПС + ТелоОшибки;
			
			РегистрыСведений.бг_ДокументыИнтеграцииСоСкладскимиСистемами.ОбновитьСтатусДокумента(
				ЗагружаемыйОбъект.Ссылка,
				ТекущаяДатаСеанса(),
				Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженБезОбработки,
				0,
				ТекстОшибки);
			
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Номенклатура, 
		, 
		"КодЕК_Номенклатуры", 
		ОбщегоНазначения.ОписаниеТипаСтрока(8));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Номенклатура, 
		, 
		"КодЕК_ПОСМ", 
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_НоменклатураИнтеграция.ДлинаКодаЕК_ПОСМ()));
	
КонецПроцедуры

Функция ЭтоSolvoПоСтруктуре(СтруктураОбъекта)
	
	Возврат СтруктураОбъекта.Свойство("СтатусSolvo")
		И СтруктураОбъекта.СтатусSolvo.Свойство("ЗначениеПеречисления")
		И ЗначениеЗаполнено(СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления)
		И Метаданные.Перечисления.бг_СтатусыПриемкиSolvo.ЗначенияПеречисления.Найти(
			СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления) <> Неопределено;

КонецФункции

Функция ЭтоИнформативныйСтатусSolvoПоСтруктуре(СтруктураОбъекта, ЕстьМаркируемаяАлкогольнаяПродукция)
	
	ИмяСтатуса = СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления;
	
	КонечныеИнформативныеСтатусы = Документы.битОтражениеФактаПоПриходномуОрдеру.КонечныеИнформативныеСтатусыSolvo(
		ЕстьМаркируемаяАлкогольнаяПродукция);
		
	СтатусSolvo = Перечисления.бг_СтатусыПриемкиSolvo[ИмяСтатуса];
	
	Возврат КонечныеИнформативныеСтатусы.Найти(СтатусSolvo) <> Неопределено;

КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты в шапку сообщения		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ВариантЗагрузкиМарок",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ВариантыВыгрузкиАкцизныхМарок"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"АдресФайлаМарок",
		ОбщегоНазначения.ОписаниеТипаСтрока(500));

КонецПроцедуры

Процедура ЗаполнитьМаркиУпаковкиИзФайла(ЗагружаемыйОбъект, СтруктураОбъекта)
	
	ДанныеМарокУпаковок = бг_МаркируемаяПродукция.ДанныеМарокУпаковокИзФайла(СтруктураОбъекта.АдресФайлаМарок);
	
	бг_МаркируемаяПродукция.ЗаполнитьТаблицуОбъектаПоДаннымМарокУпаковокИзФайла(
		ЗагружаемыйОбъект, "Марки", ДанныеМарокУпаковок);
	бг_МаркируемаяПродукция.ЗаполнитьТаблицуОбъектаПоДаннымМарокУпаковокИзФайла(
		ЗагружаемыйОбъект, "Упаковки", ДанныеМарокУпаковок);	
	
КонецПроцедуры

#КонецОбласти
