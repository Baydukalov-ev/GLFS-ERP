#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта,
	СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт

	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого ТабличнаяЧасть Из ЗагружаемыйОбъект.Метаданные().ТабличныеЧасти Цикл
		ЗагружаемыйОбъект[ТабличнаяЧасть.Имя].Очистить();
	КонецЦикла;
	
	ДополнитьСтруктуруОбъекта(СтруктураОбъекта);

	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект,
		СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);
	
	ДополнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта);

КонецПроцедуры

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьСтруктуруОбъекта(СтруктураОбъекта)
	СтруктураОбъекта.Вставить("ВидОперации", ВидОперации(СтруктураОбъекта));
	СтруктураОбъекта.Вставить("СтавкаНДС", УчетНДСЛокализация.СтавкаНДСПоПеречислению(Перечисления.СтавкиНДС.НДС20));
	
	Если СтруктураОбъекта.Свойство("СтатьяРасходов")
		И ЗначениеЗаполнено(СтруктураОбъекта.СтатьяРасходов) Тогда
		СтруктураОбъекта.СтатьяРасходов.ПолноеИмя = "ПланВидовХарактеристик.СтатьиРасходов";
	КонецЕсли;
КонецПроцедуры
	
Процедура ДополнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта)
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");

	Если Не ЗагружаемыйОбъект.ЭтоНовый()
		И Год(ЗагружаемыйОбъект.Дата) <> Год(СтруктураОбъекта.Дата) Тогда
		ЗагружаемыйОбъект.Номер = "";
	КонецЕсли;
	ЗагружаемыйОбъект.КорСтатьяАктивовЗадолженностьКлиентов = 
		бг_КонстантыПовтИсп.ЗначениеКонстанты("КорСтатьяАктивовДляФакторинга");
	
	Для Каждого СтрокаДокумента Из ЗагружаемыйОбъект.ДокументыРеализации Цикл
		Если Не ЗначениеЗаполнено(СтрокаДокумента.ДокументРеализации) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("Идентификатор", Строка(СтрокаДокумента.ДокументРеализации.УникальныйИдентификатор()));
		СтруктураДокумента.Вставить("ПолноеИмя", "Документ.ПервичныйДокумент");
		СтруктураДокумента.Вставить("ТаблицаКлючей", Неопределено);
		
		ДокументСсылка = адаптер_РаботаСДаннымиИБ.НайтиСсылкуПоЗагружаемымДанным(СтруктураДокумента);
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
			СтрокаДокумента.ДокументРеализации = ДокументСсылка;
		КонецЕсли;

		СтрокаДокумента.ОбъектРасчетов = ОбъектыРасчетовСервер.ОбъектРасчетовИзСсылки(СтрокаДокумента.ДокументРеализации);
	
	КонецЦикла;

КонецПроцедуры

Функция ВидОперации(СтруктураОбъекта)

	Если Не СтруктураОбъекта.Свойство("ВидОперации")
		Или Не ЗначениеЗаполнено(СтруктураОбъекта.ВидОперации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидОперацииИсточника = СтруктураОбъекта.ВидОперации.ЗначениеПеречисления;
	
	Если ВидОперацииИсточника = "ПродажаДебитору" Тогда
		ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ПродажаДебитору;
	ИначеЕсли ВидОперацииИсточника = "ПередачаДокументовФактору" Тогда
		ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ПередачаДокументовФакторуПодПлатеж;
	ИначеЕсли ВидОперацииИсточника = "ФинансированиеФактором" Тогда
		ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ФинансированиеФактором;
	ИначеЕсли ВидОперацииИсточника = "ОплатаНамиФактору" Тогда
		ВидОперации = Перечисления.бг_ВидыОперацийФакторинга.ОплатаДебитораНам;
	Иначе
		ВидОперации = Неопределено;
	КонецЕсли; 
	
	Возврат ВидОперации;
КонецФункции

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
