
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьРегламентноеЗадание() Экспорт

	Перем адаптер_ПодпискиНаСобытияВызовСервера, адаптер_НастройкиОбменаПовтИсп;
	адаптер_ПодпискиНаСобытияВызовСервера = ОбщегоНазначения.ОбщийМодуль("адаптер_ПодпискиНаСобытияВызовСервера");
	адаптер_НастройкиОбменаПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбменаПовтИсп");

	ПараметрыПодключения = адаптер_НастройкиОбменаПовтИсп.НастройкиПодключенияДляВыгрузки();
	Если ПараметрыПодключения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НастройкиВыгрузки = адаптер_НастройкиОбменаПовтИсп.
		ПолучитьНастройкиВыгрузкиПоОбъекту(
		Метаданные.РегламентныеЗадания.битВыгрузкаОплатПоЗаказамB2B.ПолноеИмя());
	Если НастройкиВыгрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.битВыгрузкаОплатПоЗаказамB2B);
	
	УстановитьПривилегированныйРежим(Истина);
	Задания = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	Если Задания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтборыИсточниковЗаказовДляВыгрузки = ОтборыИсточниковЗаказовДляВыгрузки();
	
	Пока ОтборыИсточниковЗаказовДляВыгрузки.Следующий() Цикл
		
		ДополнительныеСвойства = Новый Структура;
		ДополнительныеСвойства.Вставить("ПредставлениеИсточникаЗаказа", 
			ОтборыИсточниковЗаказовДляВыгрузки.ПредставлениеИсточникаЗаказа);
		ДополнительныеСвойства.Вставить("КлючИсточникаЗаказа", 
			Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.КлючИсточникаЗагрузкиЗаказа(
				ОтборыИсточниковЗаказовДляВыгрузки.ИсточникЗаказа));
			
		адаптер_ПодпискиНаСобытияВызовСервера.ЗарегистрироватьИсходящееСообщение(
			Задания[0], ДополнительныеСвойства, НастройкиВыгрузки);
	
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства, адаптер_НастройкиОбмена);

КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса,
		ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ТекстЗапросаТаблицаКлючей = "";
	ТекстЗапроса = "ВЫБРАТЬ 1";

КонецПроцедуры

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = 
		адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	ПостфиксКлючаМаршрутизации = ПостфиксКлючаМаршрутизации(ДанныеСообщения, ИсточникОбъект);

	Если Не ПустаяСтрока(ПостфиксКлючаМаршрутизации) Тогда
		КлючМаршрутизации = КлючМаршрутизации + ПостфиксКлючаМаршрутизации;
	КонецЕсли;
	
	Возврат КлючМаршрутизации;

КонецФункции

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");

	ПараметрыВыполненияЗапросов = адаптер_РаботаСДаннымиИБ.ПолучитьПараметрыВыполненияЗапросов(Объект, ДанныеСообщения);
	
	ДанныеВыгружаемогоОбъекта = Новый Структура;
	ДанныеВыгружаемогоОбъекта.Вставить("ПолноеИмя", ПараметрыВыполненияЗапросов.ПолноеИмя);
	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Новый Массив);
	
	ВыгружаемыеДанные = ВыгружаемыеДанные(ДанныеСообщения.ДополнительныеСвойстваОбъекта);
	
	Если ВыгружаемыеДанные.РезультатПоШапке.Пустой() Тогда
		Возврат ДанныеВыгружаемогоОбъекта;
	КонецЕсли;

	Реквизиты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		ВыгружаемыеДанные.РезультатПоШапке,
		ПараметрыВыполненияЗапросов.ТаблицаКлючей,
		ДанныеСообщения);

	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Реквизиты);

	Возврат ДанныеВыгружаемогоОбъекта;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ОтборыИсточниковЗаказовДляВыгрузки()

	//Берем все реализации у которой есть задолженность на вчера, 
	//чтобы данные не терялись в зависимости от зачета задолженности и времени выгрузки.
	//По ним будем выгружать таблицу оплат.
	
	Запрос = Новый Запрос;
	ИсточникиЗаказа = Новый Массив;
	ИсточникиЗаказа.Добавить(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B);
	ИсточникиЗаказа.Добавить(Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr);
	
	Запрос.УстановитьПараметр("ИсточникиЗаказа", ИсточникиЗаказа);
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДатаСеанса()) - 86400);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(РасчетыПоСрокамОстатки.ОбъектРасчетов.Объект
	|		КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента.бг_ИсточникЗаказа) КАК ПредставлениеИсточникаЗаказа,
	|	ВЫРАЗИТЬ(РасчетыПоСрокамОстатки.ОбъектРасчетов.Объект 
	|		КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента.бг_ИсточникЗаказа КАК ИсточникЗаказа
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			&ДатаСреза,
	|			ОбъектРасчетов.Объект ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И ВЫРАЗИТЬ(ОбъектРасчетов.Объект 
	|					КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента.бг_ИсточникЗаказа
	|						В (&ИсточникиЗаказа)) КАК РасчетыПоСрокамОстатки";

	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать();

КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства, адаптер_НастройкиОбмена)
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(12, 3);
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ЗаказКлиента",
		Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"РеализацияТоваровУслуг",
		Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ДатаОплаты",
		ТипДата);

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"СуммаОплаты",
		ТипЧисло);
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ПредставлениеТипаДокументаРегистратора",
		ОбщегоНазначения.ОписаниеТипаСтрока(100));

КонецПроцедуры

Функция ВыгружаемыеДанные(СтруктураПараметров)

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанных();
	Запрос.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДатаСеанса) - 86400);
	//данные об оплатах по реализациям, у которых есть задолженность на дату среза
	//выгружаем за три последних месяца
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса);
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(ТекущаяДатаСеанса, -3));
	
	ТипДанныхДокументовОплаты = Новый Массив;
	ТипДанныхДокументовОплаты.Добавить(Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств"));
	ТипДанныхДокументовОплаты.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	Запрос.УстановитьПараметр("МассивТиповРегистраторов", ТипДанныхДокументовОплаты);

	Если СтруктураПараметров.Свойство("ПредставлениеИсточникаЗаказа") Тогда
		ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.ИсточникЗагрузкиЗаказаПоНаименованию(
			СтруктураПараметров.ПредставлениеИсточникаЗаказа);
	Иначе
		ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсточникЗаказа", ИсточникЗаказа);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыгружаемыеДанные = Новый Структура;
	ВыгружаемыеДанные.Вставить("РезультатПоШапке", РезультатЗапроса);
	
	Возврат ВыгружаемыеДанные;

КонецФункции

Функция ТекстЗапросаВыгружаемыхДанных()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентамиПоСрокамОстатки.ОбъектРасчетов КАК ОбъектРасчетов
	|ПОМЕСТИТЬ ОстаткиДебиторскойЗадолженности
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			&ДатаСреза,
	|			ОбъектРасчетов.Объект ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И ВЫРАЗИТЬ(ОбъектРасчетов.Объект 
	|					КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента.бг_ИсточникЗаказа = &ИсточникЗаказа)
	|						КАК РасчетыСКлиентамиПоСрокамОстатки
	|ГДЕ
	|	РасчетыСКлиентамиПоСрокамОстатки.ДолгУпрОстаток > 0
	|ИНДЕКСИРОВАТЬ ПО 
	|	ОбъектРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиОбороты.Регистратор))
	|		КАК ПредставлениеТипаДокументаРегистратора,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОбороты.ОбъектРасчетов.Объект КАК Документ.РеализацияТоваровУслуг)
	|		КАК РеализацияТоваровУслуг_ЗначениеРеквизитаИдентификатор,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОбороты.ОбъектРасчетов.Объект КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента
	|		КАК ЗаказКлиента_ЗначениеРеквизитаИдентификатор,
	|	РасчетыСКлиентамиОбороты.СуммаРасход КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСКлиентамиОбороты.Регистратор 
	|			КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Дата ЕСТЬ NULL ТОГДА
	|				ВЫРАЗИТЬ(РасчетыСКлиентамиОбороты.Регистратор КАК Документ.ВзаимозачетЗадолженности).Дата
	|		ИНАЧЕ 
	|			ВЫРАЗИТЬ(РасчетыСКлиентамиОбороты.Регистратор КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Дата
	|	КОНЕЦ КАК ДатаОплаты
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(
	|			&НачалоПериода,
	|			&ТекущаяДата,
	|			Регистратор,
	|			ОбъектРасчетов В
	|				(ВЫБРАТЬ
	|					ОстаткиДебиторскойЗадолженности.ОбъектРасчетов
	|				ИЗ
	|					ОстаткиДебиторскойЗадолженности)) КАК РасчетыСКлиентамиОбороты
	|ГДЕ
	|	РасчетыСКлиентамиОбороты.СуммаРасход <> 0
	|	И ТИПЗНАЧЕНИЯ(РасчетыСКлиентамиОбороты.Регистратор) В (&МассивТиповРегистраторов)";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПостфиксКлючаМаршрутизации(ДанныеСообщения, ИсточникОбъект = Неопределено)
	
	ПостфиксКлючаМаршрутизации = "";
	
	#Область ДляРазделениеПоИсточнику
	КлючИсточника = "";
	Если ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("КлючИсточникаЗаказа") Тогда
		КлючИсточника = ДанныеСообщения.ДополнительныеСвойстваОбъекта.КлючИсточникаЗаказа;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючИсточника) Тогда
		ПостфиксКлючаМаршрутизации = "." + КлючИсточника;
	КонецЕсли;
	#КонецОбласти
	
	Возврат ПостфиксКлючаМаршрутизации;
	
КонецФункции

#КонецОбласти

