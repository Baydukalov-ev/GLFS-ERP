
#Область ПрограммныйИнтерфейс

// Процедура - Сформировать и записать движения документа по регистрам:
// бг_ДвижениеМарок, бг_СоставУпаковок, бг_ИдентификаторыМарок
//
// Параметры:
//  Документ - ДокументСсылка.ТТНВходящаяЕГАИС - Ссылка на документ, для которого нужно записать марки
//
Процедура СформироватьДвиженияМарок(Документ, ДополнительныеСведения) Экспорт
	
	// Поскольку мы не можем использовать цельную транзакцию на все время работы процедуры записи движений, 
	// то мы не можем накладыать упр. блокировки на все время работы процедуры записи движений марок для того,
	// чтобы управлять конкурентным доступом к записи движения между потоками отложенной обработки 
	// (они стартуют периодически, пока есть запись в регистре к отложенной обработке).
	// Поэтому используем статус "ДвиженияЗаписываются" как аля семафор, для разграничения доступа.
	НачатьТранзакцию();
	Попытка
		// Накладываем блокировку для потокобезопасного чтения и последующей записи статуса
		РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьБлокировкуИзмененияСтатуса(Документ);
		Если РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.ДвиженияЗаписываютсяВДанныйМомент(Документ) Тогда
			ВызватьИсключение НСтр("ru='Движения уже записываются.'");
		Иначе
			РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьСтатус(
				Документ, Перечисления.бг_СтатусыЗаписиДвиженийМарок.ДвиженияЗаписываются);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
		
	// Не используем транзакцию при записи движений, чтобы избежать эскалации управляемых блокировок.
	// Если в процессе записи движений возникла ошибка,
	// то ранее записанные движения будут очищены и запись будет запущена еще раз.
	// Движения считаются записанными успешно, если записаны успешно движения по регистрам:
	// бг_ДвижениеМарок, бг_СоставУпаковок, бг_ИдентификаторыМарок
	Попытка
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументОбъект.бг_ЗаполнитьТаблицыДляДвиженийМарок(
			Ложь, ТекущийСтатусТТНИзДополнительныхСведений(ДополнительныеСведения));
		ДокументОбъект.бг_ОбработатьДанныеМарокДокумента();
		
		Если ТребуетсяОбработатьДвиженияМарокПорциями(ДокументОбъект.ДополнительныеСвойства.ТаблицыДляДвиженийМарок) Тогда
			ЗаписатьДвиженияМарокПорциями(ДокументОбъект);
		Иначе
			ДокументОбъект.бг_ЗаписатьДвиженияМарок();
		КонецЕсли;
		
		РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьСтатус(
			Документ, Перечисления.бг_СтатусыЗаписиДвиженийМарок.ДвиженияУспешноЗаписаны);
	Исключение
		РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьСтатус(
			Документ, Перечисления.бг_СтатусыЗаписиДвиженийМарок.ОшибкаЗаписиДвижений);
			
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Процедура периодически вызывается регламентным заданием бг_ПерезапускЗаданийПоОтложеннойЗаписиДвиженийМарок.
//
// Процедура нужна по двум причинам:
// 1. Нужно чтобы только один поток записывал движения. 
// 		Движения марок нужно записывать порциями без транзакции, чтобы избежать эскалации упр. блокировок на таблице.
// 		Поскольку мы не можем использовать цельную транзакцию на все время работы процедуры записи движений, 
// 		то мы не можем накладыать упр. блокировки на все время работы процедуры записи движений марок для того,
// 		чтобы управлять конкурентным доступом к записи движения между потоками отложенной обработки 
// 		(они стартуют периодически, пока есть запись в регистре к отложенной обработке).
// 2. Есть ненулевая вероятность, что фоновое задание по формированию движения марок может упасть. 
// 		Если это случится, то возникнет ситуация, когда статус "ДвиженияЗаписываются" установлен, 
// 		марки не записываются (фоновое задание упало), а другие потоки не смогут стартовать, 
// 		так как установлен статус "ДвиженияЗаписываются".
//
Процедура ПерезапуститьУпавшиеЗаданияПоОтложеннойЗаписиДвиженийМарок() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	бг_СтатусыЗаписиДвиженийМарок.Документ КАК Документ
		|ИЗ
		|	РегистрСведений.бг_СтатусыЗаписиДвиженийМарок КАК бг_СтатусыЗаписиДвиженийМарок
		|ГДЕ
		|	бг_СтатусыЗаписиДвиженийМарок.Статус = ЗНАЧЕНИЕ(Перечисление.бг_СтатусыЗаписиДвиженийМарок.ДвиженияЗаписываются)
		|	И РАЗНОСТЬДАТ(бг_СтатусыЗаписиДвиженийМарок.ДатаОбновленияСтатуса, &ТекущаяДата, СЕКУНДА) >= &ПределВремениЗаписиДвижений";
	Запрос.УстановитьПараметр("ПределВремениЗаписиДвижений", 300);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РегистрыСведений.бг_СтатусыЗаписиДвиженийМарок.УстановитьСтатус(
			ВыборкаДетальныеЗаписи.Документ, Перечисления.бг_СтатусыЗаписиДвиженийМарок.ДвиженияЗарегистрированыКЗаписи);		
		
		РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
			ВыборкаДетальныеЗаписи.Документ,
			Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.СформироватьДвиженияМарок,
			,
			,
			ТекущаяУниверсальнаяДатаВМиллисекундах());
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТребуетсяОбработатьДвиженияМарокПорциями(ТаблицыДляДвиженийМарок)
	
	ТребуетсяОбработатьПорциями = Ложь;
	
	Если ТаблицыДляДвиженийМарок.ДвижениеМарок <> Неопределено
		И ТаблицыДляДвиженийМарок.ДвижениеМарок.Количество() > ПорцияЗаписиДвижений() Тогда
		ТребуетсяОбработатьПорциями = Истина;
	КонецЕсли;
	
	Если ТаблицыДляДвиженийМарок.СоставУпаковок <> Неопределено
		И ТаблицыДляДвиженийМарок.СоставУпаковок.Количество() > ПорцияЗаписиДвижений() Тогда
		ТребуетсяОбработатьПорциями = Истина;
	КонецЕсли;
	
	Если ТаблицыДляДвиженийМарок.ИдентификаторыМарок <> Неопределено
		И ТаблицыДляДвиженийМарок.ИдентификаторыМарок.Количество() > ПорцияЗаписиДвижений() Тогда
		ТребуетсяОбработатьПорциями = Истина;
	КонецЕсли;
	
	Возврат ТребуетсяОбработатьПорциями;
	
КонецФункции

Функция ПорцияЗаписиДвижений()
	
	// В MS SQL Server эскалация исключительной блокировки на таблицу происходит, 
	// если количество строк набора записей >= 5000
	Возврат 4999;
	
КонецФункции

Процедура ЗаписатьДвиженияМарокПорциями(ДокументОбъект)
	
	Если ДокументОбъект.ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ИдентификаторыМарок <> Неопределено Тогда
		ЗаписатьТаблицуДвиженийРегистраПорциями(
			ДокументОбъект.ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ИдентификаторыМарок,
			"бг_ИдентификаторыМарок",
			ДокументОбъект,
			Ложь);
	КонецЕсли;
		
	Если ДокументОбъект.ДополнительныеСвойства.ТаблицыДляДвиженийМарок.СоставУпаковок <> Неопределено Тогда
		ОчиститьДвиженияПоРегистратору(ДокументОбъект.Ссылка, "бг_СоставУпаковок");
		
		ЗаписатьТаблицуДвиженийРегистраПорциями(
			ДокументОбъект.ДополнительныеСвойства.ТаблицыДляДвиженийМарок.СоставУпаковок,
			"бг_СоставУпаковок",
			ДокументОбъект);
	КонецЕсли;
	
	Если ДокументОбъект.ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ДвижениеМарок <> Неопределено Тогда
		ОчиститьДвиженияПоРегистратору(ДокументОбъект.Ссылка, "бг_ДвижениеМарок");
		
		ЗаписатьТаблицуДвиженийРегистраПорциями(
			ДокументОбъект.ДополнительныеСвойства.ТаблицыДляДвиженийМарок.ДвижениеМарок,
			"бг_ДвижениеМарок",
			ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТаблицуДвиженийРегистраПорциями(ТаблицаДвижений, ИмяРегистра, 
	ДокументОбъект, ТребуетсяОтборПоРегистратору = Истина)
	
	КоличествоСтрокТаблицы = ТаблицаДвижений.Количество();
	
	Для НомерСтроки = 0 По КоличествоСтрокТаблицы - 1 Цикл
		НомерСтрокиНачалоПорции = НомерСтроки;
		НомерСтрокиКонецПорции = Мин(НомерСтрокиНачалоПорции + ПорцияЗаписиДвижений() - 1, КоличествоСтрокТаблицы - 1);
		
		ЗаписатьПорциюТаблицыДвижений(
			НомерСтрокиНачалоПорции, 
			НомерСтрокиКонецПорции, 
			ТаблицаДвижений, 
			ИмяРегистра, 
			ДокументОбъект, 
			ТребуетсяОтборПоРегистратору);
			
		НомерСтроки = НомерСтрокиКонецПорции;
	КонецЦикла;
	
	// регистрируем набор записей подчиненный регистратору к выгрузке после записи всех движений по всем маркам
	Если ТребуетсяОтборПоРегистратору Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Значение = ДокументОбъект.Ссылка;
		НаборЗаписей.Отбор.Регистратор.Использование = Истина;
		
		ЗарегистрироватьНаборЗаписейРегистраКВыгрузке(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьПорциюТаблицыДвижений(НомерСтрокиНачалоПорции, НомерСтрокиКонецПорции, ТаблицаДвижений, ИмяРегистра,
	ДокументОбъект, ТребуетсяОтборПоРегистратору = Истина)

	ПорцияТаблицыДвижений = ТаблицаДвижений.СкопироватьКолонки();
	Для НомерСтроки = НомерСтрокиНачалоПорции По НомерСтрокиКонецПорции Цикл
		ЗаполнитьЗначенияСвойств(ПорцияТаблицыДвижений.Добавить(), ТаблицаДвижений[НомерСтроки]);
	КонецЦикла;
		
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Если ТребуетсяОтборПоРегистратору Тогда
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	КонецЕсли;
	НаборЗаписей.Загрузить(ПорцияТаблицыДвижений);
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	НаборЗаписей.Записать(Ложь);

КонецПроцедуры

Процедура ОчиститьДвиженияПоРегистратору(ДокументРегистратор, ИмяРегистра)
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументРегистратор);
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ТекущийСтатусТТНИзДополнительныхСведений(ДополнительныеСведения)
	
	ТекущийСтатус = Неопределено;
	
	Если ДополнительныеСведения <> Неопределено
		И ДополнительныеСведения.Свойство("ТекущийСтатус") Тогда
		ТекущийСтатус = ДополнительныеСведения.ТекущийСтатус;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

Процедура ЗарегистрироватьНаборЗаписейРегистраКВыгрузке(НаборЗаписей)
	
	Перем адаптер_ПодпискиНаСобытия, адаптер_НастройкиОбменаПовтИсп;
	адаптер_ПодпискиНаСобытия = ОбщегоНазначения.ОбщийМодуль("адаптер_ПодпискиНаСобытия");
	адаптер_НастройкиОбменаПовтИсп = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбменаПовтИсп");
	
	НастройкиВыгрузки = адаптер_НастройкиОбменаПовтИсп.ПолучитьНастройкиВыгрузкиПоОбъекту(НаборЗаписей.Метаданные().ПолноеИмя());
	
	адаптер_ПодпискиНаСобытия.ЗарегистрироватьИсходящееСообщениеРегистр(
		НаборЗаписей,
		Ложь,
		Ложь,
		НастройкиВыгрузки);
	
КонецПроцедуры

#КонецОбласти
