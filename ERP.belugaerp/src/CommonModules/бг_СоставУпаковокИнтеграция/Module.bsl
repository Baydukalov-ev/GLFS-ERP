#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(СправочникЗаписиРегистров, ДанныеСообщения) Экспорт
	
	// ДанныеВыгружаемогоОбъекта - пустая структура данных, если не заполнить, то сообщение не будет выгружено.
	ДанныеВыгружаемогоОбъекта = Новый Структура;
	ДанныеВыгружаемогоОбъекта.Вставить("ПолноеИмя", ДанныеСообщения.МетаданныеОбъекта.ПолноеИмя());
	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Новый Массив);
	ДанныеВыгружаемогоОбъекта.Вставить("Отбор",     Новый Массив);
	
	// Готовим информацию о регистраторе и принимаем решение о необходимости выгрузки упаковок по нему.
	ДанныеРегистратора = бг_адаптер_ЗаписиРегистровИнтеграция.ДанныеРегистратора(СправочникЗаписиРегистров);
	ДополнитьДанныеРегистратораСтатусомЕГАИС(ДанныеРегистратора);

	// Получаем необходимые данные сразу в формате, необходимом для обработки адаптера.
	ВыгружаемыеДанные = ВыгружаемыеДанные(ДанныеРегистратора, ДанныеСообщения);
	Если ВыгружаемыеДанные = Неопределено Тогда
		Возврат ДанныеВыгружаемогоОбъекта;
	КонецЕсли;
	
	ДанныеПоУпаковкам = Неопределено;
	ВыгружаемыеДанные.Свойство("ДанныеПоУпаковкам", ДанныеПоУпаковкам);
	
	ДанныеДвижений = Новый Структура;
	ДанныеДвижений.Вставить("Регистратор", ВыгружаемыеДанные.Регистратор);
	
	ДанныеВыгружаемогоОбъекта.Отбор.Добавить(ДанныеДвижений);
	
	Если Не ЗначениеЗаполнено(ДанныеПоУпаковкам) Или ДанныеПоУпаковкам.Количество() = 0 Тогда
		ДанныеДвижений.Вставить("СодержитЗаписи", Ложь);
		ДанныеДвижений.Вставить("Запись", Новый Массив);
	Иначе
		ДанныеДвижений.Вставить("СодержитЗаписи", Истина);
		ДанныеДвижений.Вставить("Запись", ДанныеПоУпаковкам);
	КонецЕсли;
	
	ДанныеСообщения.RoutingKey = КлючМаршрутизации(ВыгружаемыеДанные, ДанныеРегистратора, ДанныеСообщения);
	
	Возврат ДанныеВыгружаемогоОбъекта;
	
КонецФункции

// Возвращает пространство имен на кириллице, которе используется для выгрузки среза последних.
//
Функция ПространствоИменИсходноеСрезПоследних() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/РегистрСведений.бг_СоставУпаковокСрезПоследних";
	
КонецФункции

// Возвращает пространство имен на латинице, которе используется для выгрузки среза последних.
//
Функция ПространствоИменСрезПоследних() Экспорт

	Возврат "https://bit-erp.ru/adapter/RegistrSvedenij.bg_SostavUpakovokSrezPoslednikh";
	
КонецФункции

#КонецОбласти // Конец

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	ВыгружаемыеРеквизиты.Добавить("Период");
	ВыгружаемыеРеквизиты.Добавить("КодУпаковки");
	ВыгружаемыеРеквизиты.Добавить("КодВышестоящейУпаковки");

	ВыгружаемыеРеквизиты = СтрСоединить(ВыгружаемыеРеквизиты, ",");
	
	Возврат ВыгружаемыеРеквизиты;

КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ТипУпаковки",
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ТипВышестоящейУпаковки",
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты ТТНВходящаяЕГАИС		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"Статус",
		,
		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС"));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"КодКатегорииСкладаSolvo",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(10));	
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ОрганизацияСклада",
		,
		Новый ОписаниеТипов("СправочникСсылка.Организации"));	
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ПунктРазгрузки",
		,
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
КонецПроцедуры

Функция ВыгружаемыеДанные(ДанныеРегистратора, ДанныеСообщения)
	
	ВыгружаемыеДанные = Новый Структура;
	ВыгружаемыеДанные.Вставить("Регистратор", РеквизитыРегистратора(ДанныеРегистратора));
	
	ДанныеВыгружаемыхМарок = ДанныеВыгружаемыхМарок(ВыгружаемыеДанные, ДанныеРегистратора, ДанныеСообщения);
	Если ДанныеВыгружаемыхМарок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ДанныеВыгружаемыхМарок.Свойство("РезультатПоУпаковкам") 
		Или Не ДанныеВыгружаемыхМарок.Свойство("КодыУпаковок") Тогда
		Возврат ВыгружаемыеДанные;
	КонецЕсли;
	
	РезультатПоУпаковкам = ДанныеВыгружаемыхМарок.РезультатПоУпаковкам;
	КодыУпаковок = ДанныеВыгружаемыхМарок.КодыУпаковок;
	
	// Конвертируем полученные данные состояний упаковок в структуру данных адаптера.	
	ВыгружаемыеДанные.Вставить("ДанныеПоУпаковкам", ДанныеПоУпаковкам(РезультатПоУпаковкам, ДанныеСообщения));
	ВыгружаемыеДанные.Вставить("КодыУпаковок", КодыУпаковок);
		
	Возврат ВыгружаемыеДанные;
	
КонецФункции

Функция ДанныеПоУпаковкам(РезультатПоУпаковкам, ДанныеСообщения)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ДанныеПоУпаковкам = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
		РезультатПоУпаковкам, 
		Неопределено,
		ДанныеСообщения);
		
	Для каждого ДанныеУпаковки Из ДанныеПоУпаковкам Цикл
	
		ТипУпаковки = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(ДанныеУпаковки.КодУпаковки);
		Если ЗначениеЗаполнено(ТипУпаковки) Тогда
			ДанныеУпаковки.Вставить("ТипУпаковки", Строка(ТипУпаковки));
		КонецЕсли;
		
		Если ДанныеУпаковки.Свойство("КодВышестоящейУпаковки")
			И ЗначениеЗаполнено(ДанныеУпаковки.КодВышестоящейУпаковки) Тогда
			
			ТипВышестоящейУпаковки = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(
				ДанныеУпаковки.КодВышестоящейУпаковки);
				
			Если ЗначениеЗаполнено(ТипВышестоящейУпаковки) Тогда
				ДанныеУпаковки.Вставить("ТипВышестоящейУпаковки", Строка(ТипВышестоящейУпаковки));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеПоУпаковкам;

КонецФункции

Функция КодыУпаковокПоДвижениямРегистратора(Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки
	|ИЗ
	|	РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
	|ГДЕ
	|	бг_СоставУпаковок.Регистратор = &Регистратор
	|	И бг_СоставУпаковок.Активность";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КодУпаковки");
	
КонецФункции

Функция КодыУпаковокПоВыгрузкеМарокУпаковок(ВыгрузкаМарокУпаковок)
	
	РезультатЗапросаПоУпаковкам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыгрузкаМарокУпаковок, "Упаковки");
	Возврат РезультатЗапросаПоУпаковкам.Выгрузить().ВыгрузитьКолонку("КодУпаковки");
	
КонецФункции

Функция КодыУпаковокПоПереупаковке(Переупаковка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битПереупаковкаШтрихкоды.Штрихкод КАК Штрихкод,
	|	битПереупаковкаШтрихкоды.ШтрихкодРодитель КАК ШтрихкодРодитель
	|ИЗ
	|	Документ.битПереупаковка.Штрихкоды КАК битПереупаковкаШтрихкоды
	|ГДЕ
	|	битПереупаковкаШтрихкоды.Ссылка = &Переупаковка";
	
	Запрос.УстановитьПараметр("Переупаковка", Переупаковка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КодыУпаковок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
	
		ТипУпаковки = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(Выборка.Штрихкод);
		Если ЗначениеЗаполнено(ТипУпаковки)
			И ТипУпаковки <> Перечисления.бг_ТипыЕдиницИзмерения.Бутылка
			И КодыУпаковок.Найти(Выборка.Штрихкод) = Неопределено Тогда
			
			КодыУпаковок.Добавить(Выборка.Штрихкод);
		КонецЕсли;
		
		Если Не ПустаяСтрока(Выборка.ШтрихкодРодитель) Тогда
			
			ТипУпаковкиРодителя = бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(Выборка.ШтрихкодРодитель);
			Если ЗначениеЗаполнено(ТипУпаковкиРодителя)
				И ТипУпаковкиРодителя <> Перечисления.бг_ТипыЕдиницИзмерения.Бутылка
				И КодыУпаковок.Найти(Выборка.ШтрихкодРодитель) = Неопределено Тогда
				
				КодыУпаковок.Добавить(Выборка.ШтрихкодРодитель);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КодыУпаковок;
	
КонецФункции

Функция ТекстЗапросаВыгружаемыхДанныхСрезаПоследних()

	Возврат
	"ВЫБРАТЬ
	|	&Регистратор КАК Регистратор_ЗначениеРеквизитаИдентификатор,
	|	ТИПЗНАЧЕНИЯ(&Регистратор) КАК Регистратор_ЗначениеРеквизитаТипЗначения,
	|	бг_СоставУпаковокСрезПоследних.КодУпаковки КАК КодУпаковки,
	|	бг_СоставУпаковокСрезПоследних.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
	|ИЗ
	|	РегистрСведений.бг_СоставУпаковок.СрезПоследних(, КодУпаковки В (&КодыУпаковок)) КАК бг_СоставУпаковокСрезПоследних";

КонецФункции

Функция ВыгружаемыеТипыРегистраторов()
	
	ВыгружаемыеТипыРегистраторов = Новый Массив;
	
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.бг_ВыгрузкаМарокУпаковок"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битДанныеСПроизводственнойЛинии"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битПереупаковка"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.ТТНВходящаяЕГАИС"));
	
	Возврат ВыгружаемыеТипыРегистраторов;
	
КонецФункции

Функция КлючМаршрутизации(ВыгружаемыеДанные, ДанныеРегистратора, ДанныеСообщения)

	// Типовое событие адаптера ПолучитьКлючМаршрутизацииИсходящегоСообщения() не используется целенаправленно, потому что
	// в данной задаче для определения ключа маршрутизации требуются рассчитанные для выгрузки данные. Типовое событие же
	// событие адаптера выполняется в транзакции записи объекта, и симметричное длинное получение выгружаемых данных для
	// определения ключа маршрутизации в этот момент выполнять нецелесообразно.
	
	СтандартныйКлючМаршрутизации = "xml.РегистрСведений.бг_СоставУпаковок";
	Если ЭтоВыгрузкаСрезаПоследних(ДанныеСообщения) Тогда
		СтандартныйКлючМаршрутизации = СтандартныйКлючМаршрутизации + "СрезПоследних";
	КонецЕсли;	
	
	Организация = Неопределено;
	
	// В случае с корректировкой регистров получаем состав упаковок из марок, в 99.9% случае организация будет точная.
	// Во всех остальных случаях получаем организацию по регистратору, т.к. это наименее затратный способ.
	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.КорректировкаРегистров")
		И ВыгружаемыеДанные.Свойство("КодыУпаковок") Тогда
		
		// Необходимо чтобы все выгружаемые марки относились к одной организации.
		// Иначе отсылаем сообщения без уточнения организации в ключе, и оно долетит до всех приемников без потери данных.
		Организации = ОрганизацииВыгружаемыхУпаковок(ВыгружаемыеДанные);
		Если Не (Организации.Количество() > 0 И ЗначениеЗаполнено(Организации[0])) Тогда
			Возврат СтандартныйКлючМаршрутизации;
		КонецЕсли;
		
		Организация = Организации[0];
		
	Иначе
		Организация = ОрганизацияРегистратора(ДанныеРегистратора);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат СтандартныйКлючМаршрутизации;
	КонецЕсли;
	
	ПрефиксОрганизации = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "Префикс"));
	
	Если Не ПустаяСтрока(ПрефиксОрганизации) Тогда 
		Возврат СтандартныйКлючМаршрутизации + "." + ПрефиксОрганизации;
	Иначе
		Возврат СтандартныйКлючМаршрутизации;
	КонецЕсли;

КонецФункции

Функция ОрганизацияРегистратора(ДанныеРегистратора)
	
	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.бг_ВыгрузкаМарокУпаковок")
		Или ДанныеРегистратора.Тип = Тип("ДокументСсылка.битДанныеСПроизводственнойЛинии")
		Или ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНВходящаяЕГАИС")
		Или ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеРегистратора.Ссылка, "Организация");
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		Возврат Документы.битОтражениеФактаПоПриходномуОрдеру.ОрганизацияДокумента(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру") Тогда
		
		Возврат Документы.битОтражениеФактаПоРасходномуОрдеру.ОрганизацияДокумента(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битПереупаковка") Тогда
		
		Возврат Документы.битПереупаковка.ОрганизацияДокумента(ДанныеРегистратора.Ссылка);
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция ОрганизацииВыгружаемыхУпаковок(ВыгружаемыеДанные)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бг_ИдентификаторыМарок.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|ГДЕ
	|	бг_ИдентификаторыМарок.ГУИДМарки В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				бг_ДвижениеМарокСрезПоследних.ГУИДМарки КАК ГУИДМарки
	|			ИЗ
	|				РегистрСведений.бг_ДвижениеМарок.СрезПоследних КАК бг_ДвижениеМарокСрезПоследних
	|			ГДЕ
	|				бг_ДвижениеМарокСрезПоследних.КодУпаковки В (&КодыУпаковок))";
	
	Запрос.УстановитьПараметр("КодыУпаковок", ВыгружаемыеДанные.КодыУпаковок);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

Функция РеквизитыРегистратора(ДанныеРегистратора)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Реквизиты = Новый Структура(
		"Идентификатор, ТипЗначения",
		XMLСтрока(ДанныеРегистратора.Ссылка),
		адаптер_РаботаСДаннымиИБ.ТипВСтроку(ДанныеРегистратора.Тип));
		
	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			
		РеквизитыСклада = Общегоназначения.ЗначенияРеквизитовОбъекта(
			ДанныеРегистратора.Ссылка, 
			"ТорговыйОбъект.бг_КодКатегорииСкладаSolvo, ТорговыйОбъект.бг_Организация, ТорговыйОбъект.бг_ПунктРазгрузки");
		
		Реквизиты.Вставить("КодКатегорииСкладаSolvo", РеквизитыСклада.ТорговыйОбъектбг_КодКатегорииСкладаSolvo);				
			
		Реквизиты.Вставить(
			"Статус", 
			Новый Структура(
				"ЗначениеПеречисления",
				адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(ДанныеРегистратора.ТекущийСтатусЕГАИС)));
		
		Реквизиты.Вставить(
			"ОрганизацияСклада",
			Новый Структура(
				"Идентификатор, ТипЗначения",
				XMLСтрока(РеквизитыСклада.ТорговыйОбъектбг_Организация),
				адаптер_РаботаСДаннымиИБ.ТипВСтроку(ТипЗнч(РеквизитыСклада.ТорговыйОбъектбг_Организация))));
				
		Реквизиты.Вставить(
			"ПунктРазгрузки",
			Новый Структура(
				"Идентификатор, ТипЗначения",
				XMLСтрока(РеквизитыСклада.ТорговыйОбъектбг_ПунктРазгрузки),
				адаптер_РаботаСДаннымиИБ.ТипВСтроку(ТипЗнч(РеквизитыСклада.ТорговыйОбъектбг_ПунктРазгрузки))));
				
		Реквизиты.Вставить(
			"Статус", 
			Новый Структура(
				"ЗначениеПеречисления",
				адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(ДанныеРегистратора.ТекущийСтатусЕГАИС)));
				
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ДополнитьДанныеРегистратораСтатусомЕГАИС(ДанныеРегистратора)

	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ДанныеРегистратора.Вставить(
			"ТекущийСтатусЕГАИС",
			РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДанныеРегистратора.Ссылка).Статус);
	КонецЕсли;

КонецПроцедуры

Функция ЭтоВыгрузкаСрезаПоследних(ДанныеСообщения)
	
	ЭтоВыгрузкаСрезаПоследних = Ложь;
	
	Если (ДанныеСообщения.Свойство("ПространствоИменИсходное")
		И ДанныеСообщения.ПространствоИменИсходное = ПространствоИменИсходноеСрезПоследних())
	Или (ДанныеСообщения.Свойство("ПространствоИмен")
		И ДанныеСообщения.ПространствоИмен = ПространствоИменСрезПоследних()) Тогда
		
		ЭтоВыгрузкаСрезаПоследних = Истина;
	КонецЕсли;
	
	Возврат ЭтоВыгрузкаСрезаПоследних;
	
КонецФункции

Функция ДанныеВыгружаемыхМарок(ВыгружаемыеДанные, ДанныеРегистратора, ДанныеСообщения)
	
	Если ЭтоВыгрузкаСрезаПоследних(ДанныеСообщения) Тогда
		ДанныеВыгружаемыхМарок = ДанныеВыгружаемыхМарокСрезаПоследних(ВыгружаемыеДанные, ДанныеРегистратора);
	Иначе
		ДанныеВыгружаемыхМарок = ДанныеВыгружаемыхМарокНабораЗаписей(ВыгружаемыеДанные, ДанныеРегистратора);
	КонецЕсли;
	
	Возврат ДанныеВыгружаемыхМарок;
	
КонецФункции

Функция ДанныеВыгружаемыхМарокСрезаПоследних(ВыгружаемыеДанные, ДанныеРегистратора)

	Если Не (ДанныеРегистратора <> Неопределено
		И ВыгружаемыеТипыРегистраторов().Найти(ДанныеРегистратора.Тип) <> Неопределено) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем коды упаковок, по которым необходимо получить срез последних.
	Если ДанныеРегистратора.Проведен Тогда
		// Если регистратор проведен - то при вычислении среза последних кодов упаковок получаем их из движений регистратора.
		КодыУпаковок = КодыУпаковокПоДвижениямРегистратора(ДанныеРегистратора.Ссылка);
	Иначе
		// Если регистратор не проведен (или помечен на удаление) - для отправки среза последних
		// коды упаковок нужно получить из данных самого документа.
		Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.бг_ВыгрузкаМарокУпаковок") Тогда
			КодыУпаковок = КодыУпаковокПоВыгрузкеМарокУпаковок(ДанныеРегистратора.Ссылка);
		ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битПереупаковка") Тогда
			КодыУпаковок = КодыУпаковокПоПереупаковке(ДанныеРегистратора.Ссылка);
		Иначе
			Возврат ВыгружаемыеДанные;
		КонецЕсли;
	КонецЕсли;
	
	Если КодыУпаковок.Количество() = 0 Тогда
		Возврат ВыгружаемыеДанные;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Получаем данные по состоянию нужных кодов упаковок.
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанныхСрезаПоследних();
	Запрос.УстановитьПараметр("Регистратор", ДанныеРегистратора.Ссылка);
	Запрос.УстановитьПараметр("КодыУпаковок", КодыУпаковок);
	РезультатПоУпаковкам = Запрос.Выполнить();
	
	Возврат Новый Структура("РезультатПоУпаковкам, КодыУпаковок", РезультатПоУпаковкам, КодыУпаковок);
	
КонецФункции

Функция ДанныеВыгружаемыхМарокНабораЗаписей(ВыгружаемыеДанные, ДанныеРегистратора)
	
	КодыУпаковок = КодыУпаковокПоДвижениямРегистратора(ДанныеРегистратора.Ссылка);
	
	Запрос = Новый Запрос;
	// Получаем данные по состоянию нужных кодов упаковок.
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанныхНабораЗаписей();
	Запрос.УстановитьПараметр("Регистратор", ДанныеРегистратора.Ссылка);
	РезультатПоУпаковкам = Запрос.Выполнить();
	
	Возврат Новый Структура("РезультатПоУпаковкам, КодыУпаковок", РезультатПоУпаковкам, КодыУпаковок);
	
КонецФункции

Функция ТекстЗапросаВыгружаемыхДанныхНабораЗаписей()

	Возврат
		"ВЫБРАТЬ
		|	бг_СоставУпаковок.Регистратор КАК Регистратор_ЗначениеРеквизитаИдентификатор,
		|	ТИПЗНАЧЕНИЯ(бг_СоставУпаковок.Регистратор) КАК Регистратор_ЗначениеРеквизитаТипЗначения,
		|	бг_СоставУпаковок.КодУпаковки КАК КодУпаковки,
		|	бг_СоставУпаковок.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки,
		|	бг_СоставУпаковок.Период КАК Период,
		|	бг_СоставУпаковок.НомерСтроки КАК НомерСтроки,
		|	бг_СоставУпаковок.Активность КАК Активность
		|ИЗ
		|	РегистрСведений.бг_СоставУпаковок КАК бг_СоставУпаковок
		|ГДЕ
		|	бг_СоставУпаковок.Регистратор = &Регистратор";
	
КонецФункции

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
