#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ОставитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		ВыгружаемыеРеквизиты());
		
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);

КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(СправочникЗаписиРегистров, ДанныеСообщения) Экспорт
	
	// ДанныеВыгружаемогоОбъекта - пустая структура данных, если не заполнить, то сообщение не будет выгружено.
	ДанныеВыгружаемогоОбъекта = Новый Структура;
	ДанныеВыгружаемогоОбъекта.Вставить("ПолноеИмя", ДанныеСообщения.МетаданныеОбъекта.ПолноеИмя());
	ДанныеВыгружаемогоОбъекта.Вставить("Реквизиты", Новый Массив);
	ДанныеВыгружаемогоОбъекта.Вставить("Отбор",     Новый Массив);
	
	// Готовим информацию о регистраторе и принимаем решение о необходимости выгрузки марок по нему.
	ДанныеРегистратора = бг_адаптер_ЗаписиРегистровИнтеграция.ДанныеРегистратора(СправочникЗаписиРегистров);
	ДополнитьДанныеРегистратораСтатусомЕГАИС(ДанныеРегистратора);
	
	ОсобыеСвойстваКВыгрузке = Новый Структура;
	ОсобыеСвойстваКВыгрузке.Вставить("ВыводитьТаблицуРасходныхОрдеров", Ложь);
	ОсобыеСвойстваКВыгрузке.Вставить("ВыводитьИдентификаторДанныхСогласования", Ложь);
	
	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		И Документы.ТТНИсходящаяЕГАИС.бг_СтатусДостаточныйДляФормированияМарок(ДанныеРегистратора.ТекущийСтатусЕГАИС) Тогда
		
		ОсобыеСвойстваКВыгрузке.ВыводитьТаблицуРасходныхОрдеров = Истина;
		ОсобыеСвойстваКВыгрузке.ВыводитьИдентификаторДанныхСогласования = Истина;
		
	КонецЕсли;
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант(
		"КаталогВыгрузкиДанныхОбАкцизныхМаркахДляСистемWMS, ВариантВыгрузкиАкцизныхМарокWMS");
	
	// Получаем необходимые данные сразу в формате, необходимом для обработки адаптером.
	ВыгружаемыеДанные = ВыгружаемыеДанные(
		ДанныеРегистратора,
		ОсобыеСвойстваКВыгрузке,
		ДанныеСообщения,
		ЗначенияКонстант);
	
	Если ВыгружаемыеДанные = Неопределено Тогда
		Возврат ДанныеВыгружаемогоОбъекта;
	КонецЕсли;
	
	// Заполняем "Реквизиты".
	ДанныеШапки = Новый Структура;
	ДанныеШапки.Вставить("Период", ДанныеРегистратора.Дата);
	ДанныеШапки.Вставить("ВариантВыгрузкиМарок", ВыгружаемыеДанные.ВариантВыгрузкиМарок);
	
	Если ДанныеСообщения.ПримененныйВариантВыгрузкиМарок = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ЧерезФайл Тогда
		ДанныеШапки.Вставить("АдресФайлаМарок", ВыгружаемыеДанные.АдресФайлаМарокJSON);
	КонецЕсли;
	
	ДанныеШапки.Вставить("ПредставлениеРегистратора", ВыгружаемыеДанные.ПредставлениеРегистратора);
	
	ДанныеШапки.Вставить("СерииНоменклатуры", ВыгружаемыеДанные.ДанныеПоСериям);
	
	Если ОсобыеСвойстваКВыгрузке.ВыводитьИдентификаторДанныхСогласования Тогда
		ДанныеШапки.Вставить("ИдентификаторДанныхСогласования", ВыгружаемыеДанные.ИдентификаторДанныхСогласования);
	КонецЕсли;
	
	Если ОсобыеСвойстваКВыгрузке.ВыводитьТаблицуРасходныхОрдеров Тогда
		ДанныеШапки.Вставить("РасходныеОрдераНаТовары", ВыгружаемыеДанные.ДанныеПоРасходнымОрдерам);
	КонецЕсли;
	
	ДанныеВыгружаемогоОбъекта.Реквизиты.Добавить(ДанныеШапки);
	
	// Заполняем "Отбор".
	ДанныеДвижений = Новый Структура;
	ДанныеДвижений.Вставить("Регистратор", ВыгружаемыеДанные.Регистратор);
	ДанныеДвижений.Вставить("СодержитЗаписи", Истина);
	
	Если ДанныеСообщения.ПримененныйВариантВыгрузкиМарок = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении Тогда
		ДанныеДвижений.Вставить("Запись", ВыгружаемыеДанные.ДанныеПоМаркам);
	КонецЕсли;
	
	ДанныеВыгружаемогоОбъекта.Отбор.Добавить(ДанныеДвижений);
	
	ДанныеСообщения.RoutingKey = КлючМаршрутизации(ВыгружаемыеДанные, ДанныеСообщения);
	
	Возврат ДанныеВыгружаемогоОбъекта;
	
КонецФункции

Функция СтатусыМарок() Экспорт
	
	СтатусыМарок = Новый Массив;
	
	СтатусыМарок.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.Оклеена);
	СтатусыМарок.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.КОприходованию);
	СтатусыМарок.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.ПодтвержденаНаСкладе);
	СтатусыМарок.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.НаБалансе);
	СтатусыМарок.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.ВключенаВОтгрузку);
	СтатусыМарок.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.ВключенаВОтгрузкуОбработаноЕГАИС);
	СтатусыМарок.Добавить(Перечисления.бг_СтатусыАкцизныхМарок.Выбыла);
	
	Возврат СтатусыМарок;
	
КонецФункции

// Возвращает пространство имен на кириллице, которе используется для выгрузки среза последних.
//
Функция ПространствоИменИсходноеСрезПоследних() Экспорт
	
	Возврат "https://bit-erp.ru/adapter/РегистрСведений.бг_ДвижениеМарокСрезПоследних";
	
КонецФункции

// Возвращает пространство имен на латинице, которе используется для выгрузки среза последних.
//
Функция ПространствоИменСрезПоследних() Экспорт

	Возврат "https://bit-erp.ru/adapter/RegistrSvedenij.bg_DvizhenieMarokSrezPoslednikh";
	
КонецФункции

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	ВыгружаемыеРеквизиты.Добавить("Период");
	ВыгружаемыеРеквизиты.Добавить("НомерСтроки");
	ВыгружаемыеРеквизиты.Добавить("Активность");
	ВыгружаемыеРеквизиты.Добавить("Серия");
	ВыгружаемыеРеквизиты.Добавить("КодУпаковки");
	ВыгружаемыеРеквизиты.Добавить("СтатусМарки");

	ВыгружаемыеРеквизиты = СтрСоединить(ВыгружаемыеРеквизиты, ",");
	
	Возврат ВыгружаемыеРеквизиты;

КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты в шапку сообщения
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Период",
		Новый ОписаниеТипов("Дата"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ВариантВыгрузкиМарок",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ВариантыВыгрузкиАкцизныхМарок"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"АдресФайлаМарок",
		ОбщегоНазначения.ОписаниеТипаСтрока(500));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ПредставлениеРегистратора",
		ОбщегоНазначения.ОписаниеТипаСтрока(200));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ИдентификаторДанныхСогласования",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
	// Реквизиты в запись
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"Марка",
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок().ПолнаяМарка));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ГУИДМарки",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
	// Реквизиты в таблицу "Серии"	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"СерииНоменклатуры.ИдентификаторСерии",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"СерииНоменклатуры.ИдентификаторНоменклатуры",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
	// Реквизиты в таблицу "РасходныеОрдераНаТовары"
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"РасходныеОрдераНаТовары.ИдентификаторРасходногоОрдераНаТовары",
		ОбщегоНазначения.ОписаниеТипаСтрока(36));

КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты ТТНВходящаяЕГАИС		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"Статус",
		,
		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС"));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС",
		,
		Новый ОписаниеТипов("Булево"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"КодКатегорииСкладаSolvo",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(10));	
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ОрганизацияСклада",
		,
		Новый ОписаниеТипов("СправочникСсылка.Организации"));	
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ПунктРазгрузки",
		,
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
	// Реквизиты ТТНИсходящаяЕГАИС	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"Статус",
		,
		Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС"));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС",
		,
		Новый ОписаниеТипов("Булево"));
		
КонецПроцедуры

Функция ВыгружаемыеДанные(ДанныеРегистратора, ОсобыеСвойстваКВыгрузке, ДанныеСообщения, ЗначенияКонстант)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ВыгружаемыеДанные = Новый Структура;
	
	ДанныеВыгружаемыхМарок = ДанныеВыгружаемыхМарок(ВыгружаемыеДанные, ДанныеРегистратора, ДанныеСообщения);
	Если ДанныеВыгружаемыхМарок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатПоМаркам = ДанныеВыгружаемыхМарок.РезультатПоМаркам;
	РезультатПоСериям = ДанныеВыгружаемыхМарок.РезультатПоСериям;
	
	// Конвертируем полученные данные состояний марок в структуру данных адаптера.
	ВыгружаемыеДанные.Вставить("Регистратор", РеквизитыРегистратора(ДанныеРегистратора, РезультатПоМаркам));
	
	Если ЗначенияКонстант.ВариантВыгрузкиАкцизныхМарокWMS = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ЧерезФайл Тогда
		
		// Попытка сохранить марки в файл JSON.
		АдресФайлаМарокJSON = АдресФайлаМарокJSON(
			ДанныеПоМаркамJSON(РезультатПоМаркам, ДанныеСообщения),
			ЗначенияКонстант.КаталогВыгрузкиДанныхОбАкцизныхМаркахДляСистемWMS,
			ДанныеРегистратора.Ссылка);
			
		// Если не получилось, выгружаем марки в теле сообщения.	
		Если АдресФайлаМарокJSON <> Неопределено Тогда
			ВыгружаемыеДанные.Вставить("АдресФайлаМарокJSON", АдресФайлаМарокJSON);
			ПримененныйВариантВыгрузкиМарок = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ЧерезФайл;
		Иначе
			ВыгружаемыеДанные.Вставить(
				"ДанныеПоМаркам",
				адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
					РезультатПоМаркам, 
					Неопределено,
					ДанныеСообщения));
			ПримененныйВариантВыгрузкиМарок = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении;
		КонецЕсли;
				
	Иначе
		
		// Вариант выгрузки марок "Не выгружать" не рассматриваем, во всех остальных случаях выгружаем марки в теле сообщения.
		ВыгружаемыеДанные.Вставить(
			"ДанныеПоМаркам",
			адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
				РезультатПоМаркам, 
				Неопределено,
				ДанныеСообщения));
		ПримененныйВариантВыгрузкиМарок = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ВСообщении;	
	КонецЕсли;
	
	ДанныеСообщения.Вставить("ПримененныйВариантВыгрузкиМарок", ПримененныйВариантВыгрузкиМарок);
	
	ВыгружаемыеДанные.Вставить(
		"ВариантВыгрузкиМарок",
		Новый Структура(
			"ЗначениеПеречисления",
			адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(ПримененныйВариантВыгрузкиМарок)));
	
	ВыгружаемыеДанные.Вставить("ПредставлениеРегистратора", Строка(ДанныеРегистратора.Ссылка));
	
	ВыгружаемыеДанные.Вставить("ДанныеПоСериям", ДанныеПоСериям(РезультатПоСериям));
	
	Если ОсобыеСвойстваКВыгрузке.ВыводитьТаблицуРасходныхОрдеров Тогда
		ВыгружаемыеДанные.Вставить(
			"ДанныеПоРасходнымОрдерам",
			ДанныеПоРасходнымОрдерам(ДанныеРегистратора.Ссылка));
	КонецЕсли;
	
	Если ОсобыеСвойстваКВыгрузке.ВыводитьИдентификаторДанныхСогласования Тогда
		ВыгружаемыеДанные.Вставить(
			"ИдентификаторДанныхСогласования",
			ИдентификаторДанныхСогласованияМарок(ДанныеРегистратора.Ссылка));
	КонецЕсли;
	
	ВыгружаемыеДанные.Вставить("РезультатПоМаркам", РезультатПоМаркам);
	
	Возврат ВыгружаемыеДанные;
	
КонецФункции

Функция НовыйДанныеШтрихкодовДокумента()

	ДанныеШтрихкодовДокумента = Новый Структура;
	
	// Для РС бг_ДвижениеМарок
	НаборДвижениеМарок = РегистрыСведений.бг_ДвижениеМарок.СоздатьНаборЗаписей();
	Марки = НаборДвижениеМарок.ВыгрузитьКолонки("ГУИДМарки, Серия, КодУпаковки");
	
	Марки.Колонки.Добавить(
		"ИдентификаторМарки",
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_МаркируемаяПродукция.ДлиныШтрихкодовМарок().ПолнаяМарка));

	Марки.Колонки.Добавить(
		"Организация",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	ДанныеШтрихкодовДокумента.Вставить("Марки", Марки);
	
	// Для РС бг_СоставУпаковок
	НаборСоставУпаковок = РегистрыСведений.бг_СоставУпаковок.СоздатьНаборЗаписей();
	Упаковки = НаборСоставУпаковок.ВыгрузитьКолонки("КодУпаковки, КодВышестоящейУпаковки");
	ДанныеШтрихкодовДокумента.Вставить("Упаковки", Упаковки);
	
	Возврат ДанныеШтрихкодовДокумента;
	
КонецФункции

Функция ГУИДыМарокПоДаннымРегистратора(ДанныеРегистратора, ВыгружаемыеДанные)
	
	// Если регистратор не проведен (или помечен на удаление) - для отправки среза последних марок ГУИДы нужно получить
	// из данных самого документа.
	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
		И Не ДанныеРегистратора.ПометкаУдаления
		И бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(ДанныеРегистратора.Ссылка) Тогда
		
		ГУИДыМарок = ГУИДыМарокПоАктуПостановкиНаБалансЕГАИС(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктСписанияЕГАИС")
		И Не ДанныеРегистратора.ПометкаУдаления
		И бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(ДанныеРегистратора.Ссылка) Тогда
		
		ГУИДыМарок = ГУИДыМарокПоАктуСписанияЕГАИС(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.бг_ВыгрузкаМарокУпаковок") Тогда
		
		ГУИДыМарок = ГУИДыМарокПоВыгрузкеМарокУпаковок(ДанныеРегистратора.Ссылка);
	
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битИнвентаризацияПродукцииЕГАИС") Тогда
		
		ГУИДыМарок = ГУИДыМарокПоИнвентаризацииПродукцииЕГАИС(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битКомплектацияПродукцииЕГАИС") Тогда
		
		ГУИДыМарок = ГУИДыМарокПоКомплектацииПродукцииЕГАИС(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		ГУИДыМарок = ГУИДыМарокПоОтражениюФактаПСО(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру") Тогда
		
		ГУИДыМарок = ГУИДыМарокПоОтражениюФактаРСО(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битПереупаковка") Тогда
		
		ГУИДыМарок = ГУИДыМарокПоПереупаковке(ДанныеРегистратора.Ссылка);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНВходящаяЕГАИС")
		И Не ДанныеРегистратора.ПометкаУдаления
		И бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(ДанныеРегистратора.Ссылка) Тогда
		
		ДанныеШтрихкодовДокумента = Документы.ТТНВходящаяЕГАИС.бг_ДанныеПринимаемыхШтрихкодовПлан(
			ДанныеРегистратора.Ссылка);
			
		ВыгружаемыеДанные.Вставить("ДанныеШтрихкодовДокумента", ДанныеШтрихкодовДокумента);
		ГУИДыМарок = ГУИДыМарокПоТТНВходящейЕГАИС(ВыгружаемыеДанные.ДанныеШтрихкодовДокумента);
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		И Не ДанныеРегистратора.ПометкаУдаления
		И бг_ИнтеграцияЕГАИСПовтИсп.ЕстьМаркируемаяАлкогольнаяПродукция(ДанныеРегистратора.Ссылка) Тогда
		
		ГУИДыМарок = ГУИДыМарокПоТТНИсходящейЕГАИС(ДанныеРегистратора.Ссылка);
		
	Иначе
		ГУИДыМарок = Неопределено;
	КонецЕсли;
	
	Возврат ГУИДыМарок;
	
КонецФункции

Функция ГУИДыМарокПоДвижениямРегистратора(Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
	|ГДЕ
	|	бг_ДвижениеМарок.Регистратор = &Регистратор
	|	И бг_ДвижениеМарок.Активность";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГУИДМарки");
	
КонецФункции

Функция ГУИДыМарокПоИнвентаризацииПродукцииЕГАИС(ИнвентаризацияПродукцииЕГАИС)
	
	ИнвентаризацияПродукцииЕГАИСОбъект = ИнвентаризацияПродукцииЕГАИС.ПолучитьОбъект();
	ТоварыПоШтрихкодам = ИнвентаризацияПродукцииЕГАИСОбъект.ТоварыПоШтрихкодам();
	
	Если ТоварыПоШтрихкодам = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТоварыПоШтрихкодам.ВыгрузитьКолонку("ГУИДМарки");
	КонецЕсли;
	
КонецФункции

Функция ГУИДыМарокПоКомплектацииПродукцииЕГАИС(КомплектацияПродукцииЕГАИС)
	
	КомплектацияПродукцииЕГАИСОбъект = КомплектацияПродукцииЕГАИС.ПолучитьОбъект();
	ТоварыПоШтрихкодам = КомплектацияПродукцииЕГАИСОбъект.ТоварыПоШтрихкодам();
	
	Если ТоварыПоШтрихкодам = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТоварыПоШтрихкодам.ВыгрузитьКолонку("ГУИДМарки");
	КонецЕсли;
	
КонецФункции

Функция ГУИДыМарокПоВыгрузкеМарокУпаковок(ВыгрузкаМарокУпаковок)
	
	РезультатЗапросаПоМаркам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыгрузкаМарокУпаковок, "Марки");
	Возврат РезультатЗапросаПоМаркам.Выгрузить().ВыгрузитьКолонку("ГУИДМарки");
	
КонецФункции

Функция ГУИДыМарокПоОтражениюФактаПСО(ОтражениеФактаПоПриходномуОрдеру)
	
	ОтражениеФактаПоПриходномуОрдеруОбъект = ОтражениеФактаПоПриходномуОрдеру.ПолучитьОбъект();
	
	Отказ = Ложь;
	ТоварыПоШтрихкодам = ОтражениеФактаПоПриходномуОрдеруОбъект.ТоварыПоШтрихкодам(Отказ);
	
	Если ТоварыПоШтрихкодам = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТоварыПоШтрихкодам.ВыгрузитьКолонку("ГУИДМарки");
	КонецЕсли;
	
КонецФункции

Функция ГУИДыМарокПоОтражениюФактаРСО(ОтражениеФактаПоРасходномуОрдеру)
	
	ОтражениеФактаПоРасходномуОрдеруОбъект = ОтражениеФактаПоРасходномуОрдеру.ПолучитьОбъект();
	ТоварыПоШтрихкодам = ОтражениеФактаПоРасходномуОрдеруОбъект.ТоварыПоШтрихкодам();
	
	Если ТоварыПоШтрихкодам = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ТоварыПоШтрихкодам.ВыгрузитьКолонку("ГУИДМарки");
	КонецЕсли;
	
КонецФункции

Функция ГУИДыМарокПоПереупаковке(Переупаковка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	битПереупаковкаШтрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	Документ.битПереупаковка.Штрихкоды КАК битПереупаковкаШтрихкоды
	|ГДЕ
	|	битПереупаковкаШтрихкоды.Ссылка = &Переупаковка";
	
	Запрос.УстановитьПараметр("Переупаковка", Переупаковка);
	
	ВсеШтрихкоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	ШтрихкодыМарок = Новый Массив;
	
	Для каждого Штрихкод Из ВсеШтрихкоды Цикл
	
		Если бг_МаркируемаяПродукцияКлиентСервер.ТипУпаковкиШтрихкода(Штрихкод)
			= Перечисления.бг_ТипыЕдиницИзмерения.Бутылка Тогда
			
			ШтрихкодыМарок.Добавить(Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	ОрганизацияЕГАИС = Документы.битПереупаковка.ОрганизацияЕГАИСДокумента(Переупаковка);

	Возврат ГУИДыМарокПоШтрихкодам(ШтрихкодыМарок, ОрганизацияЕГАИС);
	
КонецФункции

Функция ГУИДыМарокПоАктуПостановкиНаБалансЕГАИС(АктПостановкиНаБалансЕГАИС)
	
	ДанныеПриходуемыхШтрихкодов = Документы.АктПостановкиНаБалансЕГАИС.бг_ДанныеПриходуемыхШтрихкодов(
		АктПостановкиНаБалансЕГАИС);
	
	Возврат ДанныеПриходуемыхШтрихкодов.Марки.ВыгрузитьКолонку("ГУИДМарки");
	
КонецФункции

Функция ГУИДыМарокПоАктуСписанияЕГАИС(АктСписанияЕГАИС)
	
	ДанныеСписываемыхШтрихкодов = Документы.АктСписанияЕГАИС.бг_ДанныеСписываемыхШтрихкодов(АктСписанияЕГАИС);
	
	Возврат ДанныеСписываемыхШтрихкодов.Марки.ВыгрузитьКолонку("ГУИДМарки");
	
КонецФункции

Функция ГУИДыМарокПоТТНВходящейЕГАИС(ДанныеШтрихкодовДокумента)
	
	Возврат ДанныеШтрихкодовДокумента.Марки.ВыгрузитьКолонку("ГУИДМарки");
	
КонецФункции

Функция ГУИДыМарокПоТТНИсходящейЕГАИС(ТТНИсходящаяЕГАИС)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНИсходящаяЕГАИС, "ДокументОснование");
	
	ДанныеОтгружаемыхШтрихкодов = Документы.ТТНИсходящаяЕГАИС.бг_ДанныеОтгружаемыхШтрихкодов(
		ТТНИсходящаяЕГАИС,
		ДокументОснование);
		
	Если ДанныеОтгружаемыхШтрихкодов = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДанныеОтгружаемыхШтрихкодов.Марки.ВыгрузитьКолонку("ГУИДМарки");
	КонецЕсли;
	
КонецФункции

Функция ГУИДыМарокПоШтрихкодам(ШтрихкодыМарок, ОрганизацияЕГАИС)

	Если ШтрихкодыМарок.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	бг_ИдентификаторыМарок.ГУИДМарки КАК ГУИДМарки
	|ИЗ
	|	РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|ГДЕ
	|	бг_ИдентификаторыМарок.ИдентификаторМарки В(&ШтрихкодыМарок)
	|	И бг_ИдентификаторыМарок.ОрганизацияЕГАИС = &ОрганизацияЕГАИС";
	
	Запрос.УстановитьПараметр("ШтрихкодыМарок", ШтрихкодыМарок);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГУИДМарки");

КонецФункции

Функция ТекстЗапросаВыгружаемыхДанныхСрезаПоследних()

	Возврат
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовДокументаМарки.ГУИДМарки КАК ГУИДМарки,
	|	ДанныеШтрихкодовДокументаМарки.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ДанныеШтрихкодовДокументаМарки.КодУпаковки КАК КодУпаковки,
	|	ДанныеШтрихкодовДокументаМарки.Серия КАК Серия
	|ПОМЕСТИТЬ ДанныеШтрихкодовДокументаМарки
	|ИЗ
	|	&ДанныеШтрихкодовДокументаМарки КАК ДанныеШтрихкодовДокументаМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовДокументаУпаковки.КодУпаковки КАК КодУпаковки,
	|	ДанныеШтрихкодовДокументаУпаковки.КодВышестоящейУпаковки КАК КодВышестоящейУпаковки
	|ПОМЕСТИТЬ ДанныеШтрихкодовДокументаУпаковки
	|ИЗ
	|	&ДанныеШтрихкодовДокументаУпаковки КАК ДанныеШтрихкодовДокументаУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|	ИдентификаторыМарок.Организация КАК Организация,
	|	ЕСТЬNULL(ЕСТЬNULL(бг_ДвижениеМарокСрезПоследних.КодУпаковки, ДанныеШтрихкодовДокументаМарки.КодУпаковки), """") КАК КодУпаковки,
	|	ЕСТЬNULL(ЕСТЬNULL(бг_ДвижениеМарокСрезПоследних.Серия, ДанныеШтрихкодовДокументаМарки.Серия), ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК Серия,
	|	ЕСТЬNULL(ЕСТЬNULL(бг_ДвижениеМарокСрезПоследних.Серия.бг_Номенклатура, ВЫРАЗИТЬ(ДанныеШтрихкодовДокументаМарки.Серия КАК Справочник.СерииНоменклатуры).бг_Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(бг_ДвижениеМарокСрезПоследних.СтатусМарки, ЗНАЧЕНИЕ(Перечисление.бг_СтатусыАкцизныхМарок.ПустаяСсылка)) КАК СтатусМарки
	|ПОМЕСТИТЬ СостояниеМарок
	|ИЗ
	|	(ВЫБРАТЬ
	|		бг_ИдентификаторыМарок.ГУИДМарки КАК ГУИДМарки,
	|		бг_ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки,
	|		бг_ИдентификаторыМарок.ОрганизацияЕГАИС.Контрагент КАК Организация
	|	ИЗ
	|		РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
	|	ГДЕ
	|		бг_ИдентификаторыМарок.ГУИДМарки В(&ГУИДыМарок)) КАК ИдентификаторыМарок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_ДвижениеМарок.СрезПоследних(, ГУИДМарки В (&ГУИДыМарок)) КАК бг_ДвижениеМарокСрезПоследних
	|		ПО (бг_ДвижениеМарокСрезПоследних.ГУИДМарки = ИдентификаторыМарок.ГУИДМарки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеШтрихкодовДокументаМарки КАК ДанныеШтрихкодовДокументаМарки
	|		ПО ИдентификаторыМарок.ГУИДМарки = ДанныеШтрихкодовДокументаМарки.ГУИДМарки
	|ГДЕ
	|	ЕСТЬNULL(бг_ДвижениеМарокСрезПоследних.СтатусМарки В (&СтатусыМарок), ИСТИНА)
	|	И ЕСТЬNULL(бг_ДвижениеМарокСрезПоследних.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка), ИСТИНА)
	|	И ЕСТЬNULL(бг_ДвижениеМарокСрезПоследних.Серия.бг_Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка), ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Регистратор КАК Регистратор_ЗначениеРеквизитаИдентификатор,
	|	ТИПЗНАЧЕНИЯ(&Регистратор) КАК Регистратор_ЗначениеРеквизитаТипЗначения,
	|	СостояниеМарок.ИдентификаторМарки КАК Марка,
	|	СостояниеМарок.КодУпаковки КАК КодУпаковки,
	|	СостояниеМарок.Серия КАК Серия_ЗначениеРеквизитаИдентификатор,
	|	СостояниеМарок.СтатусМарки КАК СтатусМарки_ЗначениеРеквизитаЗначениеПеречисления,
	|	СостояниеМарок.Организация КАК Организация
	|ИЗ
	|	СостояниеМарок КАК СостояниеМарок
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостояниеМарок.Серия КАК Серия,
	|	СостояниеМарок.Номенклатура КАК Номенклатура
	|ИЗ
	|	СостояниеМарок КАК СостояниеМарок
	|ГДЕ
	|	СостояниеМарок.Серия.бг_Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И СостояниеМарок.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";

КонецФункции

Функция ВыгружаемыеТипыРегистраторов()
	
	ВыгружаемыеТипыРегистраторов = Новый Массив;
	
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.АктСписанияЕГАИС"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.бг_ВыгрузкаМарокУпаковок"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битИнвентаризацияПродукцииЕГАИС"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битКомплектацияПродукцииЕГАИС"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битОтражениеФактаПоРасходномуОрдеру"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битОтчетОПроизводствеЕГАИС"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.битПереупаковка"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.ТТНВходящаяЕГАИС"));
	ВыгружаемыеТипыРегистраторов.Добавить(Тип("ДокументСсылка.ТТНИсходящаяЕГАИС"));
	
	Возврат ВыгружаемыеТипыРегистраторов;
	
КонецФункции

Функция АдресФайлаМарокJSON(ДанныеПоМаркамJSON, Знач Каталог, Регистратор)
	
	Каталог = СокрЛП(Каталог);             
	ИмяФайла = Строка(Новый УникальныйИдентификатор());
	
	Если Не ЗначениеЗаполнено(Каталог) Тогда
		ВызватьИсключение НСтр("ru='При заданном варианте выгрузки марок WMS через файл не задан каталог.'");
	КонецЕсли;
	
	Если Не Прав(Каталог, 1) = "\" Тогда
		АдресФайлаМарокJSON = СтрШаблон("%1\%2.json", Каталог, ИмяФайла);
	Иначе
		АдресФайлаМарокJSON = СтрШаблон("%1%2.json", Каталог, ИмяФайла);
	КонецЕсли;
		
	Попытка
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(АдресФайлаМарокJSON, "UTF-8",, Новый ПараметрыЗаписиJSON(, Символы.Таб));
		ЗаписатьJSON(ЗаписьJSON, ДанныеПоМаркамJSON);
		ЗаписьJSON.Закрыть();
		
		Возврат АдресФайлаМарокJSON;
		
	Исключение
        Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ДанныеПоМаркамJSON(РезультатПоМаркам, ДанныеСообщения)

	ТаблицаПоМаркам = РезультатПоМаркам.Выгрузить();
	
	ДанныеПоМаркамJSON = Новый Массив;
	
	Для каждого СтрокаПоМаркам Из ТаблицаПоМаркам Цикл
	
		ЗаписьПоМаркеJSON = Новый Структура;
		
		ЗаписьПоМаркеJSON.Вставить("Марка", СтрокаПоМаркам.Марка);
		
		Если Не ПустаяСтрока(СтрокаПоМаркам.КодУпаковки) Тогда
			ЗаписьПоМаркеJSON.Вставить("КодУпаковки", СтрокаПоМаркам.КодУпаковки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПоМаркам.Серия_ЗначениеРеквизитаИдентификатор) Тогда
			ЗаписьПоМаркеJSON.Вставить(
				"Серия",
				Новый Структура(
					"Идентификатор",
					XMLСтрока(СтрокаПоМаркам.Серия_ЗначениеРеквизитаИдентификатор)));
		КонецЕсли;			
		
		Если ЗначениеЗаполнено(СтрокаПоМаркам.СтатусМарки_ЗначениеРеквизитаЗначениеПеречисления) Тогда
			ЗаписьПоМаркеJSON.Вставить(
				"СтатусМарки",
				XMLСтрока(СтрокаПоМаркам.СтатусМарки_ЗначениеРеквизитаЗначениеПеречисления));
		КонецЕсли;
		
		Если Не ЭтоВыгрузкаСрезаПоследних(ДанныеСообщения) Тогда
			ЗаполнитьДанныеСтрокиНабораЗаписейJSON(ЗаписьПоМаркеJSON, СтрокаПоМаркам);
		КонецЕсли;
		
		ДанныеПоМаркамJSON.Добавить(
			Новый Структура(
				"Запись",
				ЗаписьПоМаркеJSON));
		
	КонецЦикла;
	
	Возврат ДанныеПоМаркамJSON;

КонецФункции

Функция ДанныеПоСериям(РезультатПоСериям)

	ДанныеПоСериям = Новый Массив;
	
	Для каждого СтрокаПоСерии Из РезультатПоСериям.Выгрузить() Цикл
		
		ДанныеСерии = Новый Структура;
		ДанныеСерии.Вставить("ИдентификаторСерии", Строка(СтрокаПоСерии.Серия.УникальныйИдентификатор()));
		ДанныеСерии.Вставить("ИдентификаторНоменклатуры", Строка(СтрокаПоСерии.Номенклатура.УникальныйИдентификатор()));
		
		ДанныеПоСериям.Добавить(ДанныеСерии);
		
	КонецЦикла;
	
	Возврат ДанныеПоСериям;

КонецФункции

Функция ДанныеПоРасходнымОрдерам(ТТНИсходящаяЕГАИС)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	бг_ДвижениеМарок.ГУИДМарки КАК ГУИДМарки
	|ПОМЕСТИТЬ ГУИДыМарокТТН
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
	|ГДЕ
	|	бг_ДвижениеМарок.Регистратор = &ТТНИсходящаяЕГАИС
	|	И бг_ДвижениеМарок.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(бг_ДвижениеМарок.Регистратор КАК Документ.битОтражениеФактаПоРасходномуОрдеру).РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
	|ГДЕ
	|	бг_ДвижениеМарок.Регистратор ССЫЛКА Документ.битОтражениеФактаПоРасходномуОрдеру
	|	И бг_ДвижениеМарок.ГУИДМарки В
	|			(ВЫБРАТЬ
	|				ГУИДыМарокТТН.ГУИДМарки КАК ГУИДМарки
	|			ИЗ
	|				ГУИДыМарокТТН КАК ГУИДыМарокТТН)
	|	И ВЫРАЗИТЬ(бг_ДвижениеМарок.Регистратор КАК Документ.битОтражениеФактаПоРасходномуОрдеру).РасходныйОрдерНаТовары <> ЗНАЧЕНИЕ(Документ.РасходныйОрдерНаТовары.ПустаяСсылка)
	|	И бг_ДвижениеМарок.СтатусМарки = &СтатусМаркиВключенаВОтгрузку
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходныйОрдерНаТовары";
	
	Запрос.УстановитьПараметр("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);
	
	СтатусыМарокПоОперацииФактаРСО = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(
		Метаданные.Документы.битОтражениеФактаПоРасходномуОрдеру.Имя);
		
	Запрос.УстановитьПараметр("СтатусМаркиВключенаВОтгрузку", СтатусыМарокПоОперацииФактаРСО.СтатусВключенаВОтгрузку);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДанныеПоРасходнымОрдерам = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеРасходногоОрдераНаТовары = Новый Структура;
		ДанныеРасходногоОрдераНаТовары.Вставить(
			"ИдентификаторРасходногоОрдераНаТовары",
			Строка(Выборка.РасходныйОрдерНаТовары.УникальныйИдентификатор()));
		
		ДанныеПоРасходнымОрдерам.Добавить(ДанныеРасходногоОрдераНаТовары);
		
	КонецЦикла;
	
	Возврат ДанныеПоРасходнымОрдерам;

КонецФункции

Функция ИдентификаторДанныхСогласованияМарок(ТТНИсходящаяЕГАИС)
	
	ОснованиеТТН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТТНИсходящаяЕГАИС, "ДокументОснование");
	Если Не (ТипЗнч(ОснованиеТТН) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ЗначениеЗаполнено(ОснованиеТТН)) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	ДокументыОтраженияФактаWMS = Документы.ТТНИсходящаяЕГАИС.бг_ДанныеДокументовОтраженияФактаWMS(ОснованиеТТН);
	Если ДокументыОтраженияФактаWMS.Количество() > 0 Тогда
		Возврат ДокументыОтраженияФактаWMS[0].ИдентификаторДанныхСогласования;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция РеквизитыРегистратора(ДанныеРегистратора, РезультатПоМаркам)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Реквизиты = Новый Структура(
		"Идентификатор, ТипЗначения",
		XMLСтрока(ДанныеРегистратора.Ссылка),
		адаптер_РаботаСДаннымиИБ.ТипВСтроку(ДанныеРегистратора.Тип));
		
	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
		Или ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		
		МенеджерДокумента = Неопределено;
		МетаданныеДокумента = Неопределено;
		СвойствоСтатусаМарки = Неопределено;
		
		Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
			
			МенеджерДокумента = Документы.АктПостановкиНаБалансЕГАИС;
			МетаданныеДокумента = Метаданные.Документы.АктПостановкиНаБалансЕГАИС;
			СвойствоСтатусаМарки = "СтатусНаБалансе";
			
		ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
			
			МенеджерДокумента = Документы.АктСписанияЕГАИС;
			МетаданныеДокумента = Метаданные.Документы.АктСписанияЕГАИС;
			СвойствоСтатусаМарки = "СтатусВыбыла";
			
		Иначе
			Возврат Реквизиты;
		КонецЕсли;
		
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеРегистратора.Ссылка, "ДокументОснование");
		
		Если (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
			Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров"))
			И ЗначениеЗаполнено(ДокументОснование) Тогда
			
			РеквизитыСклада = Общегоназначения.ЗначенияРеквизитовОбъекта(
				ДокументОснование,
				"Склад.бг_КодКатегорииСкладаSolvo, Склад.бг_Организация, Склад.бг_ПунктРазгрузки");
				
			Реквизиты.Вставить("КодКатегорииСкладаSolvo", РеквизитыСклада.Складбг_КодКатегорииСкладаSolvo);
			
			Реквизиты.Вставить(
				"ОрганизацияСклада",
				Новый Структура(
					"Идентификатор, ТипЗначения",
					XMLСтрока(РеквизитыСклада.Складбг_Организация),
					адаптер_РаботаСДаннымиИБ.ТипВСтроку(ТипЗнч(РеквизитыСклада.Складбг_Организация))));
					
			Реквизиты.Вставить(
				"ПунктРазгрузки",
				Новый Структура(
					"Идентификатор, ТипЗначения",
					XMLСтрока(РеквизитыСклада.Складбг_ПунктРазгрузки),
					адаптер_РаботаСДаннымиИБ.ТипВСтроку(ТипЗнч(РеквизитыСклада.Складбг_ПунктРазгрузки))));
			
		КонецЕсли;
		
		Реквизиты.Вставить(
			"Статус",
			Новый Структура(
				"ЗначениеПеречисления",
				адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(ДанныеРегистратора.ТекущийСтатусЕГАИС)));
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		РеквизитыСклада = Общегоназначения.ЗначенияРеквизитовОбъекта(
			ДанныеРегистратора.Ссылка,
			"ТорговыйОбъект.бг_КодКатегорииСкладаSolvo, ТорговыйОбъект.бг_Организация, ТорговыйОбъект.бг_ПунктРазгрузки");
		
		Если Документы.ТТНВходящаяЕГАИС.бг_СтатусЯвляетсяПодтвержденным(ДанныеРегистратора.ТекущийСтатусЕГАИС) Тогда
			
			СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(
				Метаданные.Документы.ТТНВходящаяЕГАИС.Имя);
				
			Реквизиты.Вставить(
				"ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС",
				ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС(
					РезультатПоМаркам,
					СтатусыМарокПоОперации.СтатусПослеПотвердженияПостановкиНаБаланс));
					
		КонецЕсли;
		
		Реквизиты.Вставить("КодКатегорииСкладаSolvo", РеквизитыСклада.ТорговыйОбъектбг_КодКатегорииСкладаSolvo);
		
		Реквизиты.Вставить(
			"Статус",
			Новый Структура(
				"ЗначениеПеречисления",
				адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(ДанныеРегистратора.ТекущийСтатусЕГАИС)));
		
		Реквизиты.Вставить(
			"ОрганизацияСклада",
			Новый Структура(
				"Идентификатор, ТипЗначения",
				XMLСтрока(РеквизитыСклада.ТорговыйОбъектбг_Организация),
				адаптер_РаботаСДаннымиИБ.ТипВСтроку(ТипЗнч(РеквизитыСклада.ТорговыйОбъектбг_Организация))));
				
		Реквизиты.Вставить(
			"ПунктРазгрузки",
			Новый Структура(
				"Идентификатор, ТипЗначения",
				XMLСтрока(РеквизитыСклада.ТорговыйОбъектбг_ПунктРазгрузки),
				адаптер_РаботаСДаннымиИБ.ТипВСтроку(ТипЗнч(РеквизитыСклада.ТорговыйОбъектбг_ПунктРазгрузки))));
				
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		СтатусыМарокПоОперации = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(
			Метаданные.Документы.ТТНИсходящаяЕГАИС.Имя);
		
		Если Документы.ТТНИсходящаяЕГАИС.бг_СтатусДостаточныйДляФормированияМарок(ДанныеРегистратора.ТекущийСтатусЕГАИС) Тогда
			
			Если ДанныеРегистратора.ТекущийСтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом Тогда
				СтатусМарки = СтатусыМарокПоОперации.СтатусОтгружаетсяОбработаноЕГАИС;
			Иначе
				СтатусМарки = СтатусыМарокПоОперации.СтатусВыбыла;
			КонецЕсли;
			
			Реквизиты.Вставить(
				"ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС",
				ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС(
					РезультатПоМаркам,
					СтатусМарки));
					
		КонецЕсли;
		
		Реквизиты.Вставить(
			"Статус",
			Новый Структура(
				"ЗначениеПеречисления",
				адаптер_РаботаСДаннымиИБ.ПеречислениеВСтроку(ДанныеРегистратора.ТекущийСтатусЕГАИС)));
				
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Функция ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС(РезультатПоМаркам, СтатусМаркиПодтвержденаЕГАИС)
	
	ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС = Истина;
			
	ВыборкаМарки = РезультатПоМаркам.Выбрать();
	Пока ВыборкаМарки.Следующий() Цикл 		
		Если ВыборкаМарки.СтатусМарки_ЗначениеРеквизитаЗначениеПеречисления <> СтатусМаркиПодтвержденаЕГАИС Тогда
			ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС = Ложь;
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат ВсеОбработанныеНаСкладеМаркиПодтвержденыЕГАИС;
	
КонецФункции

Функция КлючМаршрутизации(ВыгружаемыеДанные, ДанныеСообщения)

	// Типовое событие адаптера ПолучитьКлючМаршрутизацииИсходящегоСообщения() не используется целенаправленно, потому что
	// в данной задаче для определения ключа маршрутизации требуются рассчитанные для выгрузки данные. Типовое событие же
	// событие адаптера выполняется в транзакции записи объекта, и симметричное длинное получение выгружаемых данных для
	// определения ключа маршрутизации в этот момент выполнять нецелесообразно.
	
	СтандартныйКлючМаршрутизации = "xml.РегистрСведений.бг_ДвижениеМарок";
	Если ЭтоВыгрузкаСрезаПоследних(ДанныеСообщения) Тогда
		СтандартныйКлючМаршрутизации = СтандартныйКлючМаршрутизации + "СрезПоследних";
	КонецЕсли;
	
	Организации = ОрганизацииВыгружаемыхМарок(ВыгружаемыеДанные);
	
	// Для добавления тега по организации в ключ маршрутизации необходимо,
	// чтобы все выгружаемые марки относились к одной организации.
	Если Не (Организации.Количество() > 0 И ЗначениеЗаполнено(Организации[0])) Тогда
		Возврат СтандартныйКлючМаршрутизации;
	КонецЕсли;
	
	ПрефиксОрганизации = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организации[0], "Префикс"));
	
	Если Не ПустаяСтрока(ПрефиксОрганизации) Тогда 
		Возврат СтандартныйКлючМаршрутизации + "." + ПрефиксОрганизации;
	Иначе
		Возврат СтандартныйКлючМаршрутизации;
	КонецЕсли;

КонецФункции

Функция ОрганизацииВыгружаемыхМарок(ВыгружаемыеДанные)
	
	ДанныеОрганизаций = ВыгружаемыеДанные.РезультатПоМаркам.Выгрузить();
	ДанныеОрганизаций.Свернуть("Организация");
	Возврат ДанныеОрганизаций.ВыгрузитьКолонку("Организация");
	
КонецФункции

Процедура ДополнитьДанныеРегистратораСтатусомЕГАИС(ДанныеРегистратора)

	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС")
		Или ДанныеРегистратора.Тип = Тип("ДокументСсылка.АктСписанияЕГАИС")
		Или ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНВходящаяЕГАИС")
		Или ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		ДанныеРегистратора.Вставить(
			"ТекущийСтатусЕГАИС",
			РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДанныеРегистратора.Ссылка).Статус);
	КонецЕсли;

КонецПроцедуры

Функция ВыгружатьПоДвижениямРегистратора(ДанныеРегистратора)
	
	Если ДанныеРегистратора.Тип = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		Если Документы.ТТНВходящаяЕГАИС.КонечныеСтатусы().Найти(ДанныеРегистратора.ТекущийСтатусЕГАИС) = Неопределено Тогда
			Возврат ДанныеРегистратора.Проведен;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.битОтражениеФактаПоПриходномуОрдеру") Тогда
		
		Если Не Документы.битОтражениеФактаПоПриходномуОрдеру.НеобходимоПроводитьДокумент(ДанныеРегистратора.Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	ИначеЕсли ДанныеРегистратора.Тип = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
		
		Возврат Не ДанныеРегистратора.ПометкаУдаления;
		
	Иначе
		Возврат ДанныеРегистратора.Проведен;
	КонецЕсли;

КонецФункции

Функция ЭтоВыгрузкаСрезаПоследних(ДанныеСообщения)
	
	ЭтоВыгрузкаСрезаПоследних = Ложь;
	
	Если (ДанныеСообщения.Свойство("ПространствоИменИсходное")
		И ДанныеСообщения.ПространствоИменИсходное = ПространствоИменИсходноеСрезПоследних())
	Или (ДанныеСообщения.Свойство("ПространствоИмен")
		И ДанныеСообщения.ПространствоИмен = ПространствоИменСрезПоследних()) Тогда
		
		ЭтоВыгрузкаСрезаПоследних = Истина;
	КонецЕсли;
	
	Возврат ЭтоВыгрузкаСрезаПоследних;
	
КонецФункции

Функция ДанныеВыгружаемыхМарок(ВыгружаемыеДанные, ДанныеРегистратора, ДанныеСообщения)
	
	Если ЭтоВыгрузкаСрезаПоследних(ДанныеСообщения) Тогда
		ДанныеВыгружаемыхМарок = ДанныеВыгружаемыхМарокСрезаПоследних(ВыгружаемыеДанные, ДанныеРегистратора);
	Иначе
		ДанныеВыгружаемыхМарок = ДанныеВыгружаемыхМарокНабораЗаписей(ВыгружаемыеДанные, ДанныеРегистратора);
	КонецЕсли;
	
	Возврат ДанныеВыгружаемыхМарок;
	
КонецФункции

Функция ДанныеВыгружаемыхМарокСрезаПоследних(ВыгружаемыеДанные, ДанныеРегистратора)
	
	Если Не (ДанныеРегистратора <> Неопределено
		И ВыгружаемыеТипыРегистраторов().Найти(ДанныеРегистратора.Тип) <> Неопределено) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеШтрихкодовДокумента = НовыйДанныеШтрихкодовДокумента();
	ВыгружатьПоДвижениямРегистратора = ВыгружатьПоДвижениямРегистратора(ДанныеРегистратора);
	
	Если ВыгружатьПоДвижениямРегистратора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем ГУИДы марок, по которым необходимо получить срез последних.
	Если ВыгружатьПоДвижениямРегистратора Тогда
		// Если регистратор проведен - то при вычислении среза последних марок получаем ГУИДы марок из движений регистратора.
		ГУИДыМарок = ГУИДыМарокПоДвижениямРегистратора(ДанныеРегистратора.Ссылка);
	Иначе
		ГУИДыМарок = ГУИДыМарокПоДаннымРегистратора(ДанныеРегистратора, ВыгружаемыеДанные);
	КонецЕсли;
	
	Если ГУИДыМарок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ГУИДыМарок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	// Получаем данные по состоянию нужных марок.
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанныхСрезаПоследних();
	Запрос.УстановитьПараметр("Регистратор", ДанныеРегистратора.Ссылка);
	Запрос.УстановитьПараметр("ГУИДыМарок", ГУИДыМарок);
	Запрос.УстановитьПараметр("СтатусыМарок", СтатусыМарок());
	Запрос.УстановитьПараметр("ДанныеШтрихкодовДокументаМарки", ДанныеШтрихкодовДокумента.Марки);
	Запрос.УстановитьПараметр("ДанныеШтрихкодовДокументаУпаковки", ДанныеШтрихкодовДокумента.Упаковки);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ВерхнийИндекс = РезультатыЗапросов.ВГраница();
	
	РезультатПоМаркам = РезультатыЗапросов[ВерхнийИндекс - 1];
	РезультатПоСериям = РезультатыЗапросов[ВерхнийИндекс];
	
	Если РезультатПоМаркам.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("РезультатПоМаркам, РезультатПоСериям", РезультатПоМаркам, РезультатПоСериям);
	
КонецФункции

Функция ДанныеВыгружаемыхМарокНабораЗаписей(ВыгружаемыеДанные, ДанныеРегистратора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВыгружаемыхДанныхНабораЗаписей();
	Запрос.УстановитьПараметр("Регистратор", ДанныеРегистратора.Ссылка);
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	ВерхнийИндекс = РезультатыЗапросов.ВГраница();
	
	РезультатПоМаркам = РезультатыЗапросов[ВерхнийИндекс - 1];
	РезультатПоСериям = РезультатыЗапросов[ВерхнийИндекс];
	
	Возврат Новый Структура("РезультатПоМаркам, РезультатПоСериям", РезультатПоМаркам, РезультатПоСериям);
	
КонецФункции

Функция ТекстЗапросаВыгружаемыхДанныхНабораЗаписей()

	Возврат
		"ВЫБРАТЬ
		|	бг_ДвижениеМарок.Регистратор КАК Регистратор,
		|	бг_ИдентификаторыМарок.ИдентификаторМарки КАК Марка,
		|	бг_ДвижениеМарок.КодУпаковки КАК КодУпаковки,
		|	бг_ДвижениеМарок.Серия КАК Серия,
		|	бг_ДвижениеМарок.СтатусМарки КАК СтатусМарки,
		|	бг_ИдентификаторыМарок.ОрганизацияЕГАИС.Контрагент КАК Организация,
		|	бг_ДвижениеМарок.Период КАК Период,
		|	бг_ДвижениеМарок.НомерСтроки КАК НомерСтроки,
		|	бг_ДвижениеМарок.Активность КАК Активность,
		|	ПРЕДСТАВЛЕНИЕ(бг_ДвижениеМарок.ГУИДМарки) КАК ГУИДМарки
		|ПОМЕСТИТЬ втМарки
		|ИЗ
		|	РегистрСведений.бг_ДвижениеМарок КАК бг_ДвижениеМарок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК бг_ИдентификаторыМарок
		|		ПО бг_ДвижениеМарок.ГУИДМарки = бг_ИдентификаторыМарок.ГУИДМарки
		|ГДЕ
		|	бг_ДвижениеМарок.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втМарки.Регистратор КАК Регистратор_ЗначениеРеквизитаИдентификатор,
		|	ТИПЗНАЧЕНИЯ(втМарки.Регистратор) КАК Регистратор_ЗначениеРеквизитаТипЗначения,
		|	втМарки.Марка КАК Марка,
		|	втМарки.КодУпаковки КАК КодУпаковки,
		|	втМарки.Серия КАК Серия_ЗначениеРеквизитаИдентификатор,
		|	втМарки.СтатусМарки КАК СтатусМарки_ЗначениеРеквизитаЗначениеПеречисления,
		|	втМарки.Организация КАК Организация,
		|	втМарки.Период КАК Период,
		|	втМарки.НомерСтроки КАК НомерСтроки,
		|	втМарки.Активность КАК Активность,
		|	втМарки.ГУИДМарки КАК ГУИДМарки
		|ИЗ
		|	втМарки КАК втМарки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втМарки.Серия КАК Серия,
		|	втМарки.Серия.бг_Номенклатура КАК Номенклатура
		|ИЗ
		|	втМарки КАК втМарки
		|ГДЕ
		|	втМарки.Серия.бг_Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	И втМарки.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
КонецФункции

Процедура ЗаполнитьДанныеСтрокиНабораЗаписейJSON(ЗаписьПоМаркеJSON, СтрокаПоМаркам)
	
	ЗаписьПоМаркеJSON.Вставить("Период", СтрокаПоМаркам.Период);
	ЗаписьПоМаркеJSON.Вставить("НомерСтроки", СтрокаПоМаркам.НомерСтроки);
	ЗаписьПоМаркеJSON.Вставить("Активность", СтрокаПоМаркам.Активность);
	ЗаписьПоМаркеJSON.Вставить("ГУИДМарки", СтрокаПоМаркам.ГУИДМарки);
	
КонецПроцедуры

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
