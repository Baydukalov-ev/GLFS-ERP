
#Область ПрограммныйИнтерфейс
				
Процедура СоздатьВспомогательныеВТ(ДанныеЗаполнения, МенеджерВременныхТаблиц, Параметры) Экспорт
			
	СоздатьВТНоменклатура(МенеджерВременныхТаблиц, Параметры);
	СоздатьВТСклады(МенеджерВременныхТаблиц, Параметры);		
	
КонецПроцедуры

Процедура СоздатьВТСклады(МенеджерВременныхТаблиц, Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкаУзлаИнтеграции = бг_ИнтеграцияSAP.НастройкаУзлаИнтеграцииSAPПоОрганизацииИИсточнику(Параметры.Организация, Параметры.ИсточникЗаказа);     	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.Склад КАК Склад,
	|	Склады.ВидНоменклатуры КАК ВидНоменклатуры,
	|	Склады.Приоритет КАК Приоритет,
	|	Склады.ИспользоватьДляОтложенногоОбеспечения КАК ИспользоватьДляОтложенногоОбеспечения
	|ПОМЕСТИТЬ ВТСклады
	|ИЗ
	|	Справочник.бг_НастройкиУзловИнтеграцииSAP.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &НастройкаУзлаИнтеграцииSAP
	|	И &УсловиеСклада
	|	И Склады.ВидНоменклатуры = &ВидНоменклатуры";
	Запрос.УстановитьПараметр("НастройкаУзлаИнтеграцииSAP",	НастройкаУзлаИнтеграции);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Параметры.ВидНоменклатуры);
	
	ОбособленныйЗаказКлиента = Параметры.ОбособленныйЗаказКлиента;
	Если ЗначениеЗаполнено(ОбособленныйЗаказКлиента) Тогда
		СкладЗаказаКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбособленныйЗаказКлиента, "Склад");
		ТекстУсловияСклада = "Склады.Склад = &СкладЗаказаКлиента";
		Запрос.УстановитьПараметр("СкладЗаказаКлиента", СкладЗаказаКлиента);
	Иначе
		ТекстУсловияСклада = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСклада", ТекстУсловияСклада);
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТНоменклатура(МенеджерВременныхТаблиц, Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Контрагенты.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТПартнеры
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	бг_ЕК_СКЮ_СкюМТ.Ссылка КАК СКЮ_МТ,
	|	бг_ЕК_СКЮ_СкюМТ.Код КАК КодДляПоискаНоменклатуры
	|ПОМЕСТИТЬ ВТ_СКЮ_МТ
	|ИЗ
	|	Справочник.бг_ЕК_СКЮ_СкюМТ КАК бг_ЕК_СКЮ_СкюМТ
	|ГДЕ
	|	бг_ЕК_СКЮ_СкюМТ.Код В(&МассивКодовSKUMT)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	СпрНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СпрНоменклатура.бг_УчетОстатковИРезервовВРазрезеУпаковокПаллет КАК УчетОстатковИРезервовВРазрезеУпаковокПаллет, 
	|	СпрНоменклатура.ЕдиницаИзмерения.Код КАК КодЕИ,
	|	СпрНоменклатура.Код КАК КодНоменклатуры,
	|	ВЫРАЗИТЬ(СпрНоменклатура.НаименованиеПолное КАК СТРОКА(1024)) КАК НаименованиеНоменклатуры,
	|	ВТ_СКЮ_МТ.СКЮ_МТ КАК СКЮ_МТ,
	|	ВТ_СКЮ_МТ.КодДляПоискаНоменклатуры КАК КодДляПоискаНоменклатуры
	|ПОМЕСТИТЬ ВТНоменклатура
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СКЮ_МТ КАК ВТ_СКЮ_МТ
	|		ПО СпрНоменклатура.ТоварнаяКатегория.бг_СкюМТ = ВТ_СКЮ_МТ.СКЮ_МТ
	|ГДЕ
	|	НЕ СпрНоменклатура.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА СпрНоменклатура.АлкогольнаяПродукция
	|				ТОГДА СпрНоменклатура.ВидАлкогольнойПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("МассивКодовSKUMT", Параметры.МассивКодовSKUMT);	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КодыSKUMTПоИдентификаторамSKUMT(МассивИдентификаторовSKUMT) Экспорт
	
	МассивКодовSKUMT = Новый Массив;
	
	Для Каждого Строка из МассивИдентификаторовSKUMT Цикл
		SKUMT = Справочники.бг_ЕК_СКЮ_СкюМТ.ПолучитьСсылку(Новый УникальныйИдентификатор(Строка));
		Если SKUMT.ПолучитьОбъект() <> Неопределено Тогда
			МассивКодовSKUMT.Добавить(SKUMT.Код);
		КонецЕсли;							
	КонецЦикла;

	Возврат МассивКодовSKUMT;
	
КонецФункции

Процедура ЗаполнитьЗагружаемыйОбъектB2B(ЗагружаемыйОбъект, СтруктураОбъекта) Экспорт
	
		//При работе с B2B комментарий собирается из нескольких полей.	
		Если СтруктураОбъекта.Свойство("Комментарий") и ЗначениеЗаполнено(СтруктураОбъекта.Комментарий) Тогда	
			Комментарий = СтруктураОбъекта.Комментарий + Символы.ПС;								
		Иначе
			Комментарий = "";	
		КонецЕсли;	
			
			
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "ФИОПредставителяТТ") Тогда	
			Комментарий = Комментарий + СтруктураОбъекта.ФИОПредставителяТТ + Символы.ПС;
		КонецЕсли;	
		
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "ТелефонПредставителяТТ") Тогда	
			Комментарий = Комментарий + СтруктураОбъекта.ТелефонПредставителяТТ + Символы.ПС;
		КонецЕсли;	
		
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "ПочтаПредставителяТТ") Тогда	
			Комментарий = Комментарий + СтруктураОбъекта.ПочтаПредставителяТТ + Символы.ПС;
		КонецЕсли;				
		
		ЗагружаемыйОбъект.Комментарий = Комментарий;
		
		//Контрагент заполняется по своему алгоритму поиска через код TTSY
		ЗагружаемыйОбъект.Контрагент = КонтрагентПоКодуTTSY(ЗагружаемыйОбъект.КодТТSY);  
		ЗагружаемыйОбъект.Организация = ОрганизацияПоКоду(ЗагружаемыйОбъект.КодОрганизации);		
		
		КратностьКодовПозицийЗаказа = 10;
		ДлинаКодаПозицииЗаказа = 5;
		Для Каждого Строка из ЗагружаемыйОбъект.Товары Цикл
			Строка.КодSKUMT 	= КодSKUMTпоИдентификаторуSKUMT(Строка.ИдентификаторSKUMT);
			Строка.ДатаОтгрузки = СтруктураОбъекта.ДатаДоставки;
			Строка.КодПозицииЗаказа = Прав(
						"0000" + Строка(Строка.НомерСтроки * КратностьКодовПозицийЗаказа),
						ДлинаКодаПозицииЗаказа);
		КонецЦикла;		
		
		//Для заявок в рамках B2B грузим всегда Операцию по умолчанию
		ЗагружаемыйОбъект.Операция = Перечисления.бг_ОперацииЗаявокКлиентов.Резервирование;
				
КонецПроцедуры		

// Функция - Вид номенклатуры по SKUMT
//
// Параметры:
//  SKUMT - Массив кодов SKUMT тип строка 
// 
// Возвращаемое значение:
//   - ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//
Функция ВидНоменклатурыПоSKUMT(SKUMT) Экспорт
	
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ТоварнаяКатегория.бг_СкюМТ.Код В (&Код)";
	
	Запрос.УстановитьПараметр("Код", SKUMT);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить();
		ВидНоменклатуры = Результат[0].ВидНоменклатуры;
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
	
КонецФункции

// Функция - Контрагент партнер по коду TTSY
//
// Параметры:
//  КодTTSY	 - КодTTSY 
// 
// Возвращаемое значение:
//   -  Контрагент - СправочникСсылка.Контрагенты
//
Функция КонтрагентПоКодуTTSY(КодTTSY) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(битПунктыНазначения.Клиент КАК Справочник.Контрагенты) КАК Контрагент
		|ПОМЕСТИТЬ ВТКонтрагентПоКодуTTSY
		|ИЗ
		|	Справочник.битПунктыНазначения КАК битПунктыНазначения
		|ГДЕ
		|	битПунктыНазначения.КодТТSY = &КодТТSY
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТКонтрагентПоКодуTTSY.Контрагент.Ссылка КАК Контрагент,
		|	ВТКонтрагентПоКодуTTSY.Контрагент.бг_ГоловнойКонтрагент КАК бг_ГоловнойКонтрагент,
		|	ВТКонтрагентПоКодуTTSY.Контрагент.ГоловнойКонтрагент КАК ГоловнойКонтрагент,
		|	ВТКонтрагентПоКодуTTSY.Контрагент.ОбособленноеПодразделение КАК ОбособленноеПодразделение
		|ИЗ
		|	ВТКонтрагентПоКодуTTSY КАК ВТКонтрагентПоКодуTTSY";
	
	Запрос.УстановитьПараметр("КодТТSY", КодTTSY);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ТЗ = РезультатЗапроса.Выгрузить();
		Если ТЗ[0].ОбособленноеПодразделение Тогда
			Возврат ТЗ[0].ГоловнойКонтрагент; 
		Иначе
			Возврат ТЗ[0].Контрагент;
		КонецЕсли;						
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
		
КонецФункции

Функция ОрганизацияПоКоду(КодОрганизации) Экспорт

	Организация = Справочники.Организации.ПустаяСсылка();	
	
	Если Не ЗначениеЗаполнено(КодОрганизации) Тогда
		Возврат Организация;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.бг_Тикер = &бг_Тикер";
	
	Запрос.УстановитьПараметр("бг_Тикер", КодОрганизации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Организация; 
	Иначе
		Результат =РезультатЗапроса.Выгрузить();
		Возврат Результат[0].Ссылка;
	КонецЕсли;
		
КонецФункции

Функция КодSKUMTпоИдентификаторуSKUMT(ИдентификаторSKUMT)
		
	SKUMT = Справочники.бг_ЕК_СКЮ_СкюМТ.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторSKUMT));
	Если SKUMT.ПолучитьОбъект() <> Неопределено Тогда
		Возврат SKUMT.Код;
	КонецЕсли;			
	
	Возврат "";
	
КонецФункции

Функция ПунктНазначенияПоКодуTTSY(КодTTSY) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	битПунктыНазначения.Ссылка КАК ПунктНазначения
		|ИЗ
		|	Справочник.битПунктыНазначения КАК битПунктыНазначения
		|ГДЕ
		|	битПунктыНазначения.КодТТSY = &КодТТSY";
	
	Запрос.УстановитьПараметр("КодТТSY", КодTTSY);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить();		
		Возврат Результат[0].ПунктНазначения;
	Иначе
		Возврат Справочники.битПунктыНазначения.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

Функция ГрузополучательПоКодуTTSY(КодTTSY) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	битПунктыНазначения.Клиент КАК Клиент
		|ИЗ
		|	Справочник.битПунктыНазначения КАК битПунктыНазначения
		|ГДЕ
		|	битПунктыНазначения.КодТТSY = &КодТТSY";
	
	Запрос.УстановитьПараметр("КодТТSY", КодTTSY);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Результат = РезультатЗапроса.Выгрузить();		
		Возврат Результат[0].Клиент;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции

Процедура РассчитатьЦеныСНДС(Структура, ПроцентНДС, РассчитатьЦенуИзЦеныСНДС)
	
	Если РассчитатьЦенуИзЦеныСНДС = Истина Тогда
		Структура.Цена = Структура.ЦенаСНДС /((100+ПроцентНДС)/100);
	Иначе		
		Структура.ЦенаСНДС = Структура.Цена * (ПроцентНДС + 100)/100;
	КонецЕсли;

КонецПроцедуры

// Функция - Цена номенклатуры по соглашению
//
// Параметры:
//  Номенклатура - 	 - НоменклатураСсылка
//  Соглашение	 - 	 - СоглашениеСсылка
// 
// Возвращаемое значение:
//   - Структура
// 				
//
Функция ЦенаНоменклатурыПоСоглашению(Номенклатура, Соглашение) Экспорт
	
	Структура = Новый Структура("ЦенаСНДС, Цена, ВидЦены", 0 ,0, Справочники.ВидыЦен.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦены,
	|	СоглашенияСКлиентами.ВидЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	&Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ НоменклатураСВидомЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ СоглашенияСКлиентами.Ссылка = &Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСВидомЦен.ВидЦены КАК ВидЦены,
	|	НоменклатураСВидомЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	НоменклатураСВидомЦен.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатуры25СрезПоследних.Цена, 0) КАК Цена,
	|	ЦеныНоменклатуры25СрезПоследних.Номенклатура.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	НоменклатураСВидомЦен КАК НоменклатураСВидомЦен
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних КАК ЦеныНоменклатуры25СрезПоследних
	|		ПО НоменклатураСВидомЦен.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
	|			И НоменклатураСВидомЦен.ВидЦены = ЦеныНоменклатуры25СрезПоследних.ВидЦены";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Соглашение",  Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если Не РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(ВыборкаДетальныеЗаписи.СтавкаНДС);
			
			Если ВыборкаДетальныеЗаписи.ЦенаВключаетНДС Тогда
				 Структура.ЦенаСНДС = ВыборкаДетальныеЗаписи.Цена;
			     Структура.Цена     = 0;
			Иначе				 
				 Структура.ЦенаСНДС = 0;
			     Структура.Цена     = ВыборкаДетальныеЗаписи.Цена;
			КонецЕсли;				 			
			
			РассчитатьЦеныСНДС(Структура, ПроцентНДС, ВыборкаДетальныеЗаписи.ЦенаВключаетНДС);
			
			Структура.ВидЦены = ВыборкаДетальныеЗаписи.ВидЦены;
			
		КонецЦикла;
		
		Возврат Структура; 
		
	КонецЕсли;
	
	Возврат Структура;	
	
КонецФункции

#КонецОбласти
