#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");                       
	
	Реквизиты = ВыгружаемыеРеквизиты(); 

	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		Реквизиты);
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
					
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");                       
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	ДополнитьДанныеВыгружаемогоОбъекта(Объект, ДанныеОбъекта);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Если ДанныеСообщения.МетаданныеОбъекта <> Метаданные.Документы.КорректировкаЗадолженности 
		Или Не ЗначениеЗаполнено(ДанныеСообщения.Объект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "бг_Основание");
	ЭтоСвязанныйДокументФакторинга = ЗначениеЗаполнено(ОснованиеДокумента)
		И ТипЗнч(ОснованиеДокумента) = Тип("ДокументСсылка.битФакторинг");
	
	Возврат Не ЭтоСвязанныйДокументФакторинга;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Шапка
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	
	ВыгружаемыеРеквизиты.Добавить("Автор");
	ВыгружаемыеРеквизиты.Добавить("АктОРасхожденияхОснование");
	ВыгружаемыеРеквизиты.Добавить("Исправление");
	ВыгружаемыеРеквизиты.Добавить("ИсправляемыйДокумент");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("Организация");
	ВыгружаемыеРеквизиты.Добавить("Основание");
	ВыгружаемыеРеквизиты.Добавить("ПредставлениеОтраженияОперации");
	ВыгружаемыеРеквизиты.Добавить("РасчетыМеждуОрганизациями");
	ВыгружаемыеРеквизиты.Добавить("СторнируемыйДокумент");
	ВыгружаемыеРеквизиты.Добавить("ХозяйственнаяОперация");
	
	// Задолженность
	ВыгружаемыеРеквизиты.Добавить("Задолженность.ВалютаВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("Задолженность.ИдентификаторСтроки");
	ВыгружаемыеРеквизиты.Добавить("Задолженность.ОбъектРасчетов");
	ВыгружаемыеРеквизиты.Добавить("Задолженность.Партнер");
	ВыгружаемыеРеквизиты.Добавить("Задолженность.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Задолженность.ТипРасчетов");
	
	// ДоходыРасходыАктивыПассивы
	ВыгружаемыеРеквизиты.Добавить("ДоходыРасходыАктивыПассивы.Статья");
	ВыгружаемыеРеквизиты.Добавить("ДоходыРасходыАктивыПассивы.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("ДоходыРасходыАктивыПассивы.НастройкаСчетовУчета");
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства) 
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");                       
	
	ДлинаСтроки50 = 50;
	ДлинаСтроки200 = 200;
	ОписаниеТиповСтрока50 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки50);
	ОписаниеТиповСтрока200 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки200);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОбъектыРасчетов,
		"Договор", ,
		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.ПланыВидовХарактеристик.СтатьиДоходов,
		"Наименование", ,
		ОписаниеТиповСтрока200);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.ПланыВидовХарактеристик.СтатьиРасходов,
		"Наименование", ,
		ОписаниеТиповСтрока200);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.НастройкиСчетовУчетаПрочихОпераций,
		"СчетУчета", ,
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.ПланыСчетов.Хозрасчетный,
		"Наименование", ,
		ОписаниеТиповСтрока200);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СтруктураПредприятия,
		"Код", ,
		ОписаниеТиповСтрока50);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОбъектыРасчетов,
		"Объект", ,
		Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"Дата", ,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"Номер", ,
		ОписаниеТиповСтрока50);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"ДатаВходящегоДокумента", ,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"НомерВходящегоДокумента", ,
		ОписаниеТиповСтрока50);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ПервичныйДокумент,
		"ТипПервичногоДокумента", ,
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПервичныхДокументов"));
	
	бг_ПоступлениеБезналичныхДенежныхСредствИнтеграция.
		ДобавитьКлючевыеПоляНастройкиСчетовУчетаПрочихОпераций(РеквизитыИСвойства);
	
КонецПроцедуры

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");                       
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, ,
		"Задолженность.бг_СчетУчета",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, ,
		"ДоходыРасходыАктивыПассивы.бг_СчетУчета",
		Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
КонецПроцедуры

Процедура ДополнитьДанныеВыгружаемогоОбъекта(Объект, ДанныеОбъекта)
	
	РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
	
	ЗаполнитьСчетУчетаВТЧЗадолженность(Объект, РеквизитыОбъекта, Организация);
	ЗаполнитьСчетУчетаВТЧДоходыРасходыАктивыПассивы(Объект, РеквизитыОбъекта, Организация);
	
КонецПроцедуры

Процедура ЗаполнитьСчетУчетаВТЧЗадолженность(Объект, РеквизитыОбъекта, Организация)
	
	Если Объект.Задолженность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыРасчетов = Объект.Задолженность.ВыгрузитьКолонку("ОбъектРасчетов");
	
	РеквизитыОбъектовРасчета = ЗначенияРеквизитовОбъектовРасчетов(ОбъектыРасчетов);
	
	Для Каждого СтрокаЗадолженность Из Объект.Задолженность Цикл
		
		ИндексВСтруктуре = Объект.Задолженность.Индекс(СтрокаЗадолженность);
		
		СтруктураСчетаПоУмолчанию = СчетУчетаЗадолженностиПоУмолчанию(СтрокаЗадолженность, Организация);
		РеквизитыОбъекта.Задолженность[ИндексВСтруктуре].Вставить("бг_СчетУчета", СтруктураСчетаПоУмолчанию);
		
		СтрокаРеквизитыОбъектаРасчета = РеквизитыОбъектовРасчета.Найти(
			СтрокаЗадолженность.ОбъектРасчетов, "ОбъектРасчетов");
		Если СтрокаРеквизитыОбъектаРасчета = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыОбъектаРасчета = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаРеквизитыОбъектаРасчета);
		Если Не ЗначениеЗаполнено(РеквизитыОбъектаРасчета.ГФУ) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВидаРасчета = "";
		Для Каждого КлючИЗначение Из РеквизитыОбъектаРасчета Цикл
			Если СтрНачинаетсяС(КлючИЗначение.Ключ, "ВидРасчета_") И КлючИЗначение.Значение = Истина Тогда
				ИмяВидаРасчета = СтрЗаменить(КлючИЗначение.Ключ, "ВидРасчета_", "");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ИмяВидаРасчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("АналитикаУчета", РеквизитыОбъектаРасчета.ГФУ);
		Параметры.Вставить("ИмяВидаРасчета", ИмяВидаРасчета);
		Параметры.Вставить("Организация", Организация);
		Параметры.Вставить("Подразделение", РеквизитыОбъектаРасчета.Подразделение);
		
		СтруктураСчета = СтруктураСчетаПоАналитике(Параметры);
		
		Если ЗначениеЗаполнено(СтруктураСчета) Тогда
			РеквизитыОбъекта.Задолженность[ИндексВСтруктуре].Вставить("бг_СчетУчета", СтруктураСчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСчетУчетаВТЧДоходыРасходыАктивыПассивы(Объект, РеквизитыОбъекта, Организация)
	
	Если Объект.ДоходыРасходыАктивыПассивы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтатьиДоходовРасходов = Объект.ДоходыРасходыАктивыПассивы.ВыгрузитьКолонку("Статья");
	ЗначенияРеквизитовГФУ = ЗначенияРеквизитовГФУПоСтатьеДоходовРасходов(СтатьиДоходовРасходов);
	
	Для Каждого СтрокаДоходыРасходы Из Объект.ДоходыРасходыАктивыПассивы Цикл
		
		СтатьяДоходовРасходов = СтрокаДоходыРасходы.Статья;
		Если Не ЗначениеЗаполнено(СтатьяДоходовРасходов) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЗначенияСтатьи = ТипЗнч(СтатьяДоходовРасходов);
		
		ИндексВСтруктуре = Объект.ДоходыРасходыАктивыПассивы.Индекс(СтрокаДоходыРасходы);
		
		СтруктураСчета = Неопределено;
		Если ТипЗначенияСтатьи = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
			
			СтруктураСчета = СтруктураСчетаПоСтатьеАктивовПассивов(СтатьяДоходовРасходов);
			
		Иначе
			
			СтруктураСчетаПоУмолчанию = СчетУчетаДоходыРасходыПоУмолчанию(
				СтрокаДоходыРасходы, Организация, ТипЗначенияСтатьи);
			РеквизитыОбъекта.ДоходыРасходыАктивыПассивы[ИндексВСтруктуре].Вставить(
				"бг_СчетУчета", СтруктураСчетаПоУмолчанию);
			
			СтрокаРеквизитыГФУ = ЗначенияРеквизитовГФУ.Найти(СтатьяДоходовРасходов, "Статья");
			Если СтрокаРеквизитыГФУ = Неопределено Или Не ЗначениеЗаполнено(СтрокаРеквизитыГФУ.ГФУ) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяВидаРасчета = "";
			Если СтрокаРеквизитыГФУ.Доходы = Истина Тогда
				ИмяВидаРасчета = "Доходы";
			ИначеЕсли СтрокаРеквизитыГФУ.Расходы = Истина Тогда
				ИмяВидаРасчета = "Расходы";
			Иначе
				Продолжить;
			КонецЕсли;
			
			Параметры = Новый Структура;
			Параметры.Вставить("АналитикаУчета", СтрокаРеквизитыГФУ.ГФУ);
			Параметры.Вставить("ИмяВидаРасчета", ИмяВидаРасчета);
			Параметры.Вставить("Организация", Организация);
			Параметры.Вставить("Подразделение", СтрокаДоходыРасходы.Подразделение);
			
			СтруктураСчета = СтруктураСчетаПоАналитике(Параметры);
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураСчета) Тогда
			РеквизитыОбъекта.ДоходыРасходыАктивыПассивы[ИндексВСтруктуре].Вставить("бг_СчетУчета", СтруктураСчета);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СчетУчетаЗадолженностиПоУмолчанию(СтрокаЗадолженность, Организация)
	
	ИмяВидаРасчетаПоТипуРасчетов = "";
	Если СтрокаЗадолженность.ТипРасчетов =
		ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом") Тогда
		ИмяВидаРасчетаПоТипуРасчетов = "РасчетыСКлиентами";
	Иначе
		ИмяВидаРасчетаПоТипуРасчетов = "РасчетыСПоставщиками";
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("АналитикаУчета",
		ПредопределенноеЗначение("Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка"));
	Параметры.Вставить("ИмяВидаРасчета", ИмяВидаРасчетаПоТипуРасчетов);
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("Подразделение", Неопределено);
	
	Возврат СтруктураСчетаПоАналитике(Параметры);
	
КонецФункции

Функция СчетУчетаДоходыРасходыПоУмолчанию(СтрокаДоходыРасходы, Организация, ТипЗначенияСтатьи)
	
	ИмяВидаРасчетаПоТипуСтатьи = "";
	Если ТипЗначенияСтатьи = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
		ИмяВидаРасчетаПоТипуСтатьи = "Доходы";
	Иначе
		ИмяВидаРасчетаПоТипуСтатьи = "Расходы";
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("АналитикаУчета",
		ПредопределенноеЗначение("Справочник.ГруппыФинансовогоУчетаДоходовРасходов.ПустаяСсылка"));
	Параметры.Вставить("ИмяВидаРасчета", ИмяВидаРасчетаПоТипуСтатьи);
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("Подразделение", СтрокаДоходыРасходы.Подразделение);
	
	Возврат СтруктураСчетаПоАналитике(Параметры);
	
КонецФункции

Функция ЗначенияРеквизитовОбъектовРасчетов(ОбъектыРасчетов)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Подразделение КАК Подразделение,
	|	ОбъектыРасчетов.ГруппаФинансовогоУчета КАК ГФУ,
	|	&РеквизитыГФУ КАК Реквизит1
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Ссылка В(&ОбъектыРасчетов)
	|";
	
	Запрос.УстановитьПараметр("ОбъектыРасчетов", ОбъектыРасчетов);
	
	ТекстПоиска = "&РеквизитыГФУ КАК Реквизит1";
	
	ВидыРасчетовГФУ = Справочники.ГруппыФинансовогоУчетаРасчетов.ВидыРасчетов();
	Для Каждого ИмяВидаРасчета Из ВидыРасчетовГФУ Цикл
		ТекстЗамены = СтрШаблон("ГруппаФинансовогоУчета.%1 КАК ВидРасчета_%2,%3%4",
			ИмяВидаРасчета,
			ИмяВидаРасчета,
			Символы.ПС,
			"	&РеквизитыГФУ КАК Реквизит1");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, "Истина КАК Реквизит1");
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция ЗначенияРеквизитовГФУПоСтатьеДоходовРасходов(СтатьиДоходовРасходов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Статьи.Ссылка КАК Статья,
	|	Статьи.ГруппаФинансовогоУчета КАК ГФУ,
	|	Статьи.ГруппаФинансовогоУчета.Доходы КАК Доходы,
	|	Статьи.ГруппаФинансовогоУчета.Расходы КАК Расходы
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиДоходов КАК Статьи
	|ГДЕ
	|	Статьи.Ссылка В(&Статьи)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Статьи.Ссылка КАК Статья,
	|	Статьи.ГруппаФинансовогоУчетаРегл,
	|	Статьи.ГруппаФинансовогоУчетаРегл.Доходы,
	|	Статьи.ГруппаФинансовогоУчетаРегл.Расходы
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|ГДЕ
	|	Статьи.Ссылка В(&Статьи)
	|";
	
	Запрос.УстановитьПараметр("Статьи", СтатьиДоходовРасходов);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция СтруктураСчетаПоСтатьеАктивовПассивов(СтатьяДоходовРасходов)
	
	РеквизитыСчетаУчета = Новый Структура;
	РеквизитыСчетаУчета.Вставить("Код", "СчетУчета.Код");
	РеквизитыСчетаУчета.Вставить("Наименование", "СчетУчета.Наименование");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяДоходовРасходов, РеквизитыСчетаУчета);
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция СтруктураСчетаПоАналитике(Параметры)
	
	СчетаУчетаДляРазделаРеглУчета = Новый Массив;
	СчетаУчетаДляРазделаРеглУчета.Добавить(Параметры.ИмяВидаРасчета);
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Организация", Параметры.Организация);
	СтруктураИзмерений.Вставить("АналитикаУчета", Параметры.АналитикаУчета);
	СтруктураИзмерений.Вставить("МестоУчета", Параметры.Подразделение);
	
	ЗначенияСчетовУчетаПоРазделуУчета =
		РегистрыСведений.ПорядокОтраженияНаСчетахУчета.НастройкаОтраженияРаздела(
			Неопределено, СтруктураИзмерений, СчетаУчетаДляРазделаРеглУчета);
	
	СчетУчета = Неопределено;
	ЗначенияСчетовУчетаПоРазделуУчета.Свойство(Параметры.ИмяВидаРасчета, СчетУчета);
	Если Не ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СчетУчета, "Код, Наименование");
	
КонецФункции

#КонецОбласти
