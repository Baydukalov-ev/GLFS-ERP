#Область ПрограммныИнтерфейс

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта,
	СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный; 
	Перем адаптер_РаботаСДаннымиИБ;    
	
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");

	СтандартнаяОбработка = Ложь;
	
	ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
	
	Организация = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.Организация);
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты(
			"ЗагружатьКорректировкуПриобретенияВВводОстатковПоТоварам", Организация) Тогда
		
		СоздатьВводОстатковТоваров(СтруктураОбъекта);
		
	КонецЕсли;

КонецПроцедуры
	
Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты = ВыгружаемыеРеквизиты();
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		Реквизиты);	

	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Если ДанныеОбъекта.Реквизиты.Количество() = 0 Тогда
		Возврат ДанныеОбъекта;
	КонецЕсли;	
	
	РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];

	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "Дата, Валюта");	
	ЗаписьКурсаВалют = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ЗначенияРеквизитовОбъекта.Дата,
		Новый Структура("Валюта", ЗначенияРеквизитовОбъекта.Валюта));
		
	Если ЗаписьКурсаВалют.Кратность = 0 Тогда
		КурсВалюты = 1;	
	Иначе	
	    КурсВалюты = Окр(ЗаписьКурсаВалют.Курс / ЗаписьКурсаВалют.Кратность, 5);
	КонецЕсли;
	
	РеквизитыОбъекта.Вставить("КурсВалюты", КурсВалюты);
		
	Возврат ДанныеОбъекта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("ДокументОснование");
	ВыгружаемыеРеквизиты.Добавить("Склад");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("Организация");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("ВидКорректировки");
	ВыгружаемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
	ВыгружаемыеРеквизиты.Добавить("НомерВходящегоДокумента");
	ВыгружаемыеРеквизиты.Добавить("Автор");
		
	// Реквизиты ТЧ "Товары"
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.Упаковка");
	ВыгружаемыеРеквизиты.Добавить("Товары.КоличествоУпаковок");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	ВыгружаемыеРеквизиты.Добавить("Товары.Цена");
	ВыгружаемыеРеквизиты.Добавить("Товары.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Товары.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаСНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Склад");
	ВыгружаемыеРеквизиты.Добавить("Товары.ЗаказПоставщику");
	ВыгружаемыеРеквизиты.Добавить("Товары.Серия");
	ВыгружаемыеРеквизиты.Добавить("Товары.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодСтроки");
		
	// Реквизиты ТЧ "Расхождения"
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Упаковка");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.КоличествоУпаковок");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Количество");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.СуммаСНДС");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Склад");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.ЗаказПоставщику");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Серия");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Расхождения.КодСтроки");
		
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"КурсВалюты",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 5));
	
КонецПроцедуры

Процедура СоздатьВводОстатковТоваров(СтруктураОбъекта)
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	Перем адаптер_РаботаСДаннымиИБ;
	
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ВводОстатковТоваров = Неопределено;
	
	ИдентификаторУПП = СтруктураОбъекта.Идентификатор;
	
	Если ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		ВводОстатковТоваров = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку("Документ.ВводОстатковТоваров", ИдентификаторУПП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВводОстатковТоваров) И ОбщегоНазначения.СсылкаСуществует(ВводОстатковТоваров) Тогда
		ДокументОбъект = ВводОстатковТоваров.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ВводОстатковТоваров.СоздатьДокумент();
	КонецЕсли;
	
	Если Не СтруктураОбъекта.Свойство("бг_ДвиженияПоТоварамОрганизации")
		Или СтруктураОбъекта.бг_ДвиженияПоТоварамОрганизации = Неопределено Тогда
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			Возврат;
		Иначе
			ДокументОбъект.Проведен = Ложь;
			ДокументОбъект.ПометкаУдаления = СтруктураОбъекта.ПометкаУдаления;
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаТовары = ТаблицаТоваров(СтруктураОбъекта);
	
	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
		ДокументОбъект,
		СтруктураОбъекта);
	
	ДокументОбъект.Автор = Пользователи.ТекущийПользователь();
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
	ДокументОбъект.ОтражатьВОперативномУчете = Истина;
	
	ДокументОбъект.Товары.Очистить();
		
	Для Каждого СтрокаТовар Из СтруктураОбъекта.бг_ДвиженияПоТоварамОрганизации Цикл
		
		НоваяСтрокаТовар = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовар, СтрокаТовар);
		НоваяСтрокаТовар.КоличествоУпаковок = СтрокаТовар.Количество;
		
	КонецЦикла;
	
	Если ДокументОбъект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНалогообложениеНДС(ДокументОбъект);
	ОбработатьТабличнуюЧасть(ДокументОбъект);
	
	Комментарий = НСтр("ru = '#Создано на основании ""Корректировка поступления"" №%1 от %2 из УПП#'");
	
	ДокументОбъект.Комментарий =
			СтрШаблон(Комментарий, СтруктураОбъекта.Номер, Формат(СтруктураОбъекта.Дата, "ДФ=dd.MM.yyyy"));
			
	Если ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		СсылкаНовогоОбъекта = Документы.ВводОстатковТоваров.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУПП));
		ДокументОбъект.УстановитьСсылкуНового(СсылкаНовогоОбъекта);
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);

	Если СтруктураОбъекта.Проведен Тогда
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации(
				НСтр("ru = 'Создание ""Ввода остатков товаров"" на основании документа ""Корректировка поступления из УПП'"),
				УровеньЖурналаРегистрации.Ошибка, , , ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаТоваров(СтруктураОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ТаблицаТовары = ПустаяТаблицаДляЗагрузки();
	
	СписокТоваров = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		СтруктураОбъекта, "бг_ДвиженияПоТоварамОрганизации", Новый Массив);
	
	Для Каждого СтрокаТовар Из СписокТоваров Цикл
		
		НоваяСтрокаТовары = ТаблицаТовары.Добавить();
		
		НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТовар.Количество;

		Номенклатура = Неопределено;
		Серия = Неопределено;
		
		СерияНоменклатуры = Неопределено;
		СтрокаТовар.Свойство("СерияНоменклатуры", СерияНоменклатуры);
		
		Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
			// Определить номенклатуру по серии
			Серия = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку(
				"Справочник.СерииНоменклатуры", СтрокаТовар.СерияНоменклатуры.Идентификатор);
			
			Если ОбщегоНазначения.СсылкаСуществует(Серия) Тогда
				Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "бг_Номенклатура");
			Иначе
				Серия = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		КодЕК = Неопределено;
		Если СтрокаТовар.Свойство("ЕКНоменклатура")
			И ЗначениеЗаполнено(СтрокаТовар.ЕКНоменклатура) Тогда
			СтрокаТовар.ЕКНоменклатура.Свойство("Код", КодЕК);
			СтрокаТовар.Номенклатура.Вставить("КодЕК_Номенклатуры", КодЕК);
		Иначе
			Если СтрокаТовар.Свойство("ЕКПОСМ")
				И ЗначениеЗаполнено(СтрокаТовар.ЕКПОСМ) Тогда
				СтрокаТовар.ЕКПОСМ.Свойство("Код", КодЕК);
				СтрокаТовар.Номенклатура.Вставить("КодЕК_ПОСМ", КодЕК);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			// Найти номенклатуру по идентификатору или коду ЕК
			Номенклатура = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтрокаТовар.Номенклатура);
		КонецЕсли;
		
		РеквизитыПаллеты = РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК);
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			// Установить номенклатуру по владельцу упаковки
			Номенклатура = РеквизитыПаллеты.Владелец;
		КонецЕсли;
		
		НоваяСтрокаТовары.Номенклатура = Номенклатура;
		НоваяСтрокаТовары.Серия = Серия;
		
	КонецЦикла;
	
	СписокНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
	РеквизитыНоменклатуры = РеквизитыНоменклатуры(СписокНоменклатуры);
	
	Для Каждого ЗначенияРеквизитов Из РеквизитыНоменклатуры Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", ЗначенияРеквизитов.Номенклатура);
		НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаТаблицыТовары Из НайденныеСтроки Цикл
			
			СтрокаТаблицыТовары.УчетПоСериям = ЗначенияРеквизитов.ИспользоватьСерии;
			Если Не СтрокаТаблицыТовары.УчетПоСериям Тогда
				СтрокаТаблицыТовары.Серия = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаТовары;
	
КонецФункции

Функция РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК)
	
	Результат = Новый Структура;
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("Владелец", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	Если Не ЗначениеЗаполнено(КодЕК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &КодЕК
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипЕдиницыИзмеренияПаллета
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодЕК", КодЕК);
	Запрос.УстановитьПараметр("ТипЕдиницыИзмеренияПаллета",
		ПредопределенноеЗначение("Перечисление.бг_ТипыЕдиницИзмерения.Паллета"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыНоменклатуры(СписокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	Номенклатура.ВидНоменклатуры.бг_УстановитьДействиеОтгрузитьВЗаказеПриЗагрузкеРТиУ КАК УстановитьДействиеОтгрузитьВЗаказеПриЗагрузкеРТиУ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяТаблицаДляЗагрузки()
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаТовары.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("УчетПоСериям", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаТовары;
	
КонецФункции

Процедура ОбработатьТабличнуюЧасть(ДокументОбъект)
	
	ПараметрыЗаполненияСтавкиНДС = 
		ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ДокументОбъект);
		
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыЗаполненияСтавкиНДС);
	
	ПараметрыУказанияСерий =
			Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(
						ДокументОбъект,
						Документы.ВводОстатковТоваров));
						
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
			ДокументОбъект,
			ПараметрыУказанияСерий);

	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
				ДокументОбъект.Товары,
				СтруктураДействий,
				КэшированныеЗначения);

КонецПроцедуры

Процедура ЗаполнитьНалогообложениеНДС(ДокументОбъект)
	
	ПараметрыЗаполнения = Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(
		ДокументОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ДокументОбъект.НалогообложениеНДС, ПараметрыЗаполнения);

КонецПроцедуры

#КонецОбласти 
