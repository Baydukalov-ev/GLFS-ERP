#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт

	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);	
			
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	// Подстановка выгрузки типа номенклатуры в ТЧ "Товары".
	ТекстПоиска = "NULL КАК ТипНоменклатуры_ЗначениеРеквизитаЗначениеПеречисления";
	ТекстЗамены = "ЕстьNULL(ВыгружаемыйОбъект.Товары.Номенклатура.ТипНоменклатуры, Значение(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры_ЗначениеРеквизитаЗначениеПеречисления";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
КонецПроцедуры

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка) Экспорт
	
	Если СтруктураОбъекта.Свойство("ГрузSolvo") Тогда
		ЗаполнитьЗагружаемыйОбъектSolvo(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка);
	ИначеЕсли СтруктураОбъекта.Свойство("синСозданПоЗаданиюСолво") Тогда
		// Это интеграция из УПП в ERP перемещений, созданных в УПП по заданию Solvo.
		// До того момента, пока Solvo не зайдет в ERP.
		ЗаполнитьЗагружаемыйОбъектУПП(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка);
	Иначе
		ЗаполнитьЗагружаемыйОбъектTRIM(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	КлючМаршрутизации = КлючМаршрутизации + ".ERP";
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеСообщения.МетаданныеОбъекта = Метаданные.Документы.ПеремещениеТоваров
		И ЗначениеЗаполнено(ДанныеСообщения.Объект) Тогда
		
		Результат = Истина;
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "бг_ЗагруженИзУПП") Тогда
			ТекстОшибки = НСтр("ru = 'Документ загружен из УПП
				|(перемещения загруженные из УПП не выгружаем обратно из ERP)'");
			ДанныеСообщения.ТекстОшибки = ТекстОшибки;
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт

	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
	
	ОрганизацииЕГАИСПеремещения = ОрганизацииЕГАИССкладовПолучателяИОтправителя(Объект);
	
	ЭтоПеремещениеМеждуОП = ЗначениеЗаполнено(ОрганизацииЕГАИСПеремещения.ОрганизацияЕГАИСОтправителя) 
		И ЗначениеЗаполнено(ОрганизацииЕГАИСПеремещения.ОрганизацияЕГАИСПолучателя) 
		И ОрганизацииЕГАИСПеремещения.ОрганизацияЕГАИСОтправителя 
			<> ОрганизацииЕГАИСПеремещения.ОрганизацияЕГАИСПолучателя;
	
	РеквизитыОбъекта.Вставить("ПеремещениеМеждуОП", ЭтоПеремещениеМеждуОП);
	
	ДобавитьПризнакОтраженияПриходногоОрдера(Объект, РеквизитыОбъекта);
	ДобавитьПризнакОтраженияРасходногоОрдера(Объект, РеквизитыОбъекта); 
	
	Возврат ДанныеОбъекта;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты шапки	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, 
		"Товары.ТипНоменклатуры",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));  
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, 
		, // ИмяРеквизита
		"ПользовательОС",
		Новый ОписаниеТипов("Строка"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, 
		, // ИмяРеквизита
		"ПеремещениеМеждуОП",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, 
		, // ИмяРеквизита
		"ОтраженПриходныйОрдер",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, 
		, // ИмяРеквизита
		"ОтраженРасходныйОрдер",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, 
		, // ИмяРеквизита
		"ГрузSolvo",
		Новый ОписаниеТипов("Строка"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, 
		"ОрганизацияСклада",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, 
		"ПунктРазгрузки",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Номенклатура, 
		,
		"КодЕК",
		ОбщегоНазначения.ОписаниеТипаСтрока(20));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Склады, 
		,
		"Организация",
		Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Склады, 
		,
		"ПунктРазгрузки", 
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Склады, 
		, 
		"КодКатегорииСкладаSolvo", 
		ОбщегоНазначения.ОписаниеТипаСтрока(2));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Номенклатура,
		, 
		"КодЕК_Номенклатуры",
		ОбщегоНазначения.ОписаниеТипаСтрока(20));
КонецПроцедуры

Процедура ЗаполнитьЗагружаемыйОбъектTRIM(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка) Экспорт

	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");

	СтандартнаяОбработка = Ложь;
	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта);  
	ЗагружаемыйОбъект.Проведен = Истина;   

	Для каждого СтрокаТЧ Из ЗагружаемыйОбъект.Товары Цикл
		СтрокаТЧ.Упаковка = Неопределено; 
	КонецЦикла;

	ЗагружаемыйОбъект.Комментарий = СтрШаблон(НСтр("ru='Загружен из TRIM (Перемещение товаров №%1 от %2)'"), 
		СтруктураОбъекта.Номер, СтруктураОбъекта.Дата);
	ЗагружаемыйОбъект.Номер = "";
	ЗагружаемыйОбъект.Ответственный = бг_ПользователиИнтеграция.НайтиПользователяПоАутентификацииОС("\\" + СтруктураОбъекта.ПользовательОС);  
	ЗагружаемыйОбъект.Автор = ЗагружаемыйОбъект.Ответственный;    
	ЗагружаемыйОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз; 
	ЗагружаемыйОбъект.ОрганизацияПолучатель = ЗагружаемыйОбъект.Организация;
	ЗагружаемыйОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;  
	ЗагружаемыйОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;

КонецПроцедуры

Процедура ЗаполнитьЗагружаемыйОбъектSolvo(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка) Экспорт

	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");

	СтандартнаяОбработка = Ложь;
	ЭтоНовый = ЗагружаемыйОбъект.ЭтоНовый();
	БылПроведен = Не ЭтоНовый И ЗагружаемыйОбъект.Проведен;
	СталПроведен = СтруктураОбъекта.Проведен;

	СтруктураОбъекта.Вставить("Организация", СтруктураОбъекта.ОрганизацияСклада);

	СтруктураОбъекта.СкладОтправитель.Вставить("Организация", СтруктураОбъекта.ОрганизацияСклада);
	СтруктураОбъекта.СкладОтправитель.Вставить("ПунктРазгрузки", СтруктураОбъекта.ПунктРазгрузки);

	СтруктураОбъекта.СкладПолучатель.Вставить("Организация", СтруктураОбъекта.ОрганизацияСклада);
	СтруктураОбъекта.СкладПолучатель.Вставить("ПунктРазгрузки", СтруктураОбъекта.ПунктРазгрузки);

	Если ЭтоНовый Тогда
		ЗагружаемыйОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	ИсключаяСвойства = "Номер";
	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
						ЗагружаемыйОбъект, 
						СтруктураОбъекта,, 
						ИсключаяСвойства);

	ЗагружаемыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	ЗагружаемыйОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	ЗагружаемыйОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ЗагружаемыйОбъект.ОрганизацияПолучатель = ЗагружаемыйОбъект.Организация;
	ЗагружаемыйОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
	ЗагружаемыйОбъект.бг_СозданПоЗаданиюSolvo = Истина;
	ЗагружаемыйОбъект.бг_ГрузSolvo = СтруктураОбъекта.ГрузSolvo;

	Для Каждого СтрокаТовар Из ЗагружаемыйОбъект.Товары Цикл
		СтрокаТовар.КоличествоУпаковок = СтрокаТовар.Количество;
	КонецЦикла;

	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЗагружаемыйОбъект, Документы.ПеремещениеТоваров));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗагружаемыйОбъект, ПараметрыУказанияСерий);

	Если ЭтоНовый Или Не БылПроведен Тогда
		// Для перемещений (бой, брак), созданных по заданию Solvo может не хватить свободных остатков,
		// так как товары могут быть зарезервированы под заказы клиентов.
		// В ERP такие перемещения не проведутся. При загрузке не будем стопорить очередь.
		// Новый или непроведенный документ сначала запишем в режиме записи, а потом попытаемся провести.
		ЗаписатьИПриНеобходимостиПровестиДокумент(ЗагружаемыйОбъект, СталПроведен);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПризнакОтраженияПриходногоОрдера(ПеремещениеТоваров, РеквизитыОбъекта)

	ДанныеПриходногоОрдера = Документы.ПеремещениеТоваров.бг_ДанныеСвязанногоПриходногоОрдераНаТовары(
		ПеремещениеТоваров);
	
	ОтраженПриходныйОрдер = ДанныеПриходногоОрдера.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	РеквизитыОбъекта.Вставить("ОтраженПриходныйОрдер", ОтраженПриходныйОрдер);
	
КонецПроцедуры

Процедура ДобавитьПризнакОтраженияРасходногоОрдера(ПеремещениеТоваров, РеквизитыОбъекта)

	ДанныеРасходногоОрдера = Документы.ПеремещениеТоваров.бг_ДанныеСвязанногоРасходногоОрдераНаТовары(
		ПеремещениеТоваров);
		
	ДанныеТТНИсходящей = Документы.ТТНИсходящаяЕГАИС.бг_ДанныеТТНИсходящейПоСвязанномуДокументу(
		ПеремещениеТоваров,
		Истина);
		
	ОтраженРасходныйОрдер = ДанныеРасходногоОрдера.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен
		И ДанныеТТНИсходящей <> Неопределено
		И Не ПустаяСтрока(ДанныеТТНИсходящей.НомерФиксацииЕГАИС);
	
	РеквизитыОбъекта.Вставить("ОтраженРасходныйОрдер", ОтраженРасходныйОрдер);
	
КонецПроцедуры

Функция ОрганизацииЕГАИССкладовПолучателяИОтправителя(ПеремещениеТоваров)
	
	ОрганизацииЕГАИС = Новый Структура(
		"ОрганизацияЕГАИСОтправителя,
		|ОрганизацияЕГАИСПолучателя");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ПунктНазначенияОтправителя.ОрганизацияЕГАИС, НЕОПРЕДЕЛЕНО) КАК ОрганизацияЕГАИСОтправителя,
	|	ЕСТЬNULL(ПунктНазначенияПолучателя.ОрганизацияЕГАИС, НЕОПРЕДЕЛЕНО) КАК ОрганизацияЕГАИСПолучателя
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладОтправителя
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.битПунктыНазначения КАК ПунктНазначенияОтправителя
	|			ПО СкладОтправителя.бг_ПунктНазначения = ПунктНазначенияОтправителя.Ссылка
	|		ПО ПеремещениеТоваров.СкладОтправитель = СкладОтправителя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладПолучателя
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.битПунктыНазначения КАК ПунктНазначенияПолучателя
	|			ПО СкладПолучателя.бг_ПунктНазначения = ПунктНазначенияПолучателя.Ссылка
	|		ПО ПеремещениеТоваров.СкладПолучатель = СкладПолучателя.Ссылка
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ПеремещениеТоваров";
	
	Запрос.УстановитьПараметр("ПеремещениеТоваров", ПеремещениеТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ОрганизацииЕГАИС, Выборка);
	КонецЕсли;

    Возврат ОрганизацииЕГАИС;
	
КонецФункции

#Область ЗагрузкаИзУПП

Процедура ЗаполнитьЗагружаемыйОбъектУПП(ЗагружаемыйОбъект, 
										СтруктураОбъекта, 
										СписокСвойств, 
										ИсключаяСвойства, 
										СтандартнаяОбработка)
	
	Перем адаптер_ОбработчикиСобытийСтандартный, адаптер_РаботаСДаннымиИБ;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	СтандартнаяОбработка = Ложь;
	ЭтоНовый = ЗагружаемыйОбъект.ЭтоНовый();
	БылПроведен = Не ЭтоНовый И ЗагружаемыйОбъект.Проведен;
	СталПроведен = СтруктураОбъекта.Проведен;
	
	СтруктураОбъекта.Вставить("бг_ЗагруженИзУПП", Истина);
	СтруктураОбъекта.Вставить("бг_НомерДокументаУПП",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "Номер"));
		
	ПодготовитьДанныеТЧТоварыУПП(ЗагружаемыйОбъект, СтруктураОбъекта);	
	
	Если ЭтоНовый Тогда
		ЗагружаемыйОбъект.Заполнить(Неопределено);
	КонецЕсли;
	
	ИсключаяСвойства = "Номер";
	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
						ЗагружаемыйОбъект, 
						СтруктураОбъекта, , 
						ИсключаяСвойства);
						
	// Если ТЧ приходит пустая - адаптер не очищает ее, и если были записи раньше - они останутся.
	Если НЕ бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "Товары") Тогда
		ЗагружаемыйОбъект.Товары.Очистить();	
	КонецЕсли;
	ЗагружаемыйОбъект.ВидыЗапасов.Очистить();					
						
	ЗагружаемыйОбъект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;					
	ЗагружаемыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;					
	ЗагружаемыйОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ЗагружаемыйОбъект.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	
	ЗагружаемыйОбъект.Комментарий = СтрШаблон(
		НСтр("ru = '%1 загружено из УПП (Перемещение товаров №%2 от %3)'"),
		СтруктураОбъекта.Комментарий, СтруктураОбъекта.Номер, СтруктураОбъекта.Дата);
		
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
			НоменклатураСервер.ПараметрыУказанияСерий(ЗагружаемыйОбъект,
			Документы.ПеремещениеТоваров));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗагружаемыйОбъект, ПараметрыУказанияСерий);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЗагружаемыйОбъект, ПараметрыУказанияСерий);
	
	Если ЭтоНовый Или Не БылПроведен Тогда
		// Для перемещений (бой, брак), созданных по заданию Solvo может не хватить свободных остатков,
		// так как товары могут быть зарезервированы под заказы клиентов.
		// В ERP такие перемещения не проведутся. При загрузке не будем стопорить очередь.
		// Новый или непроведенный документ сначала запишем в режиме записи, а потом попытаемся провести.
		ЗаписатьИПриНеобходимостиПровестиДокумент(ЗагружаемыйОбъект, СталПроведен);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ПодготовитьДанныеТЧТоварыУПП(ЗагружаемыйОбъект, СтруктураОбъекта)
	
	Если Не СтруктураОбъекта.Свойство("Товары") Или Не ЗначениеЗаполнено(СтруктураОбъекта.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагружаемыйОбъект.Товары.Очистить();
	
	Для каждого СтрокаТовары Из СтруктураОбъекта.Товары Цикл
		ЗаполнитьНоменклатуруВСтрокеТЧ(СтрокаТовары);
		СтрокаТовары.Вставить("КоличествоУпаковок", СтрокаТовары.Количество);
		Если СтрокаТовары.Свойство("СерияНоменклатуры") Тогда
			СтрокаТовары.Вставить("Серия", СтрокаТовары.СерияНоменклатуры);
		Иначе	
			СтрокаТовары.Вставить("Серия", Неопределено);	
		КонецЕсли;
		СтрокаТовары.Вставить("ИдентификаторСтроки", Новый УникальныйИдентификатор());	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруВСтрокеТЧ(СтрокаТовары)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	КодЕК = Неопределено;
	Если СтрокаТовары.Свойство("ЕКНоменклатура") И ЗначениеЗаполнено(СтрокаТовары.ЕКНоменклатура) Тогда
		СтрокаТовары.ЕКНоменклатура.Свойство("Код", КодЕК);
		СтрокаТовары.Номенклатура.Вставить("КодЕК_Номенклатуры", КодЕК);
	ИначеЕсли СтрокаТовары.Свойство("ЕКПОСМ") И ЗначениеЗаполнено(СтрокаТовары.ЕКПОСМ) Тогда	
		СтрокаТовары.ЕКПОСМ.Свойство("Код", КодЕК);
		СтрокаТовары.Номенклатура.Вставить("КодЕК_ПОСМ", КодЕК);
	КонецЕсли;
	
	// Найти номенклатуру по идентификатору или коду ЕК
	Номенклатура = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтрокаТовары.Номенклатура);
	
	РеквизитыПаллеты = РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК);
	УпаковкаПаллета = РеквизитыПаллеты.Упаковка;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Или Не ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
		// Установить номенклатуру по владельцу упаковки
		Номенклатура = РеквизитыПаллеты.Владелец;
	КонецЕсли;
	
	СтрокаТовары.Вставить("Номенклатура", Номенклатура);
	
КонецПроцедуры

Функция РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК)
	
	Результат = Новый Структура;
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("Владелец", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	Если Не ЗначениеЗаполнено(КодЕК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &КодЕК
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипЕдиницыИзмеренияПаллета
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодЕК", КодЕК);
	Запрос.УстановитьПараметр("ТипЕдиницыИзмеренияПаллета",
		ПредопределенноеЗначение("Перечисление.бг_ТипыЕдиницИзмерения.Паллета"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьИПриНеобходимостиПровестиДокумент(ЗагружаемыйОбъект, Провести)
	
	ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
	
	ЗагружаемыйОбъект.Проведен = Ложь;
	ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	Если ТранзакцияАктивна() Тогда
		// В штатном случае, мы сюда попадаем из стандартной процедуры адаптера ЗаполнитьЗагружаемыйОбъект,
		// но к этому времени адаптер уже начинает транзакцию в процедуре 
		// адаптер_РаботаСДаннымиИБ.ЗаписатьДанныеОбъектаВИБ(ДанныеОбъекта), которая вызывается из процедуры 
		// адаптер_ОбменДаннымиXDTO.ЗагрузитьСообщение(). 
		// При этом обработчики ЗаполнитьЗагружаемыйОбъект и ЗаписатьЗагружаемыйОбъект вызываются
		// в этой процедуре внутри транзакции (до фиксации транзакции). 
		// Поэтому, чтобы сохранить результат записи документа в режиме записи, в случае если при записи
		// в режиме проведения будет ошибка, мы фиксируем транзакцию.
		// И затем открываем новую транзакцию, в которой адаптер и будет пытаться провести документ и ее зафиксирует.
		ЗафиксироватьТранзакцию();
		НачатьТранзакцию();
	КонецЕсли;
	
	Если Провести Тогда
		ПровестиДокумент(ЗагружаемыйОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиДокумент(ЗагружаемыйОбъект)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Попытка

		ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если ТранзакцияАктивна() Тогда
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		
	Исключение
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Не удалось провести документ %1.';
					           |en = 'Document %1 is not posted.'",	
				               КодОсновногоЯзыка);
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ЗагружаемыйОбъект.Ссылка) 
			+ Символы.ПС  
			+ НСтр("ru = 'По причине: '; en = 'Reason: '", КодОсновногоЯзыка)
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		бг_ОбщегоНазначенияСервер.ДополнитьТекстСообщениямиПользователю(ТекстСообщения);
		
	КонецПопытки;

КонецПроцедуры	

#КонецОбласти

#КонецОбласти
