#Область ПрограммныйИнтерфейс

// Процедура - Запускает закрытие заказов поставщикам по 2 условиям
// 1. У заказов с даты желаемого поступления прошло более 7 дней
// 2. У частично принятых заказов с желаемой даты поступления прошел 1 день
//
Процедура ЗакрытьЗаказыПоставщикам() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);		
			
	ПричинаОтменыЗаказа = Справочники.ПричиныОтменыЗаказовПоставщикам.ОтклонениеПриПриемкеМерныхТоваров;
		
	ЗаказыКЗакрытию = ЗаказыПоставщикамДляЗакрытия();
	
	СтруктураДополнительныхПараметров = Новый Структура;
	СтруктураДополнительныхПараметров.Вставить("ИмяТабличнойЧасти",				"Товары");
	СтруктураДополнительныхПараметров.Вставить("ПричинаОтмены",					ПричинаОтменыЗаказа);
	СтруктураДополнительныхПараметров.Вставить("ПроверятьОстатки",				Ложь);
	СтруктураДополнительныхПараметров.Вставить("ОтменитьНеотработанныеСтроки",	Истина);
	СтруктураДополнительныхПараметров.Вставить("СкорректироватьМерныеТовары",	Ложь);
	СтруктураДополнительныхПараметров.Вставить("СкорректироватьМерныеТоварыПоПриемке", Ложь);
	СтруктураДополнительныхПараметров.Вставить("СкорректироватьЦены",			Ложь);
	СтруктураДополнительныхПараметров.Вставить("ЗакрыватьЗаказы",				Истина);	 
		
	ВыполнитьЗакрытиеЗаказов(ЗаказыКЗакрытию, СтруктураДополнительныхПараметров);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаказыПоставщикамДляЗакрытия()
	
	КоличествоДнейПросрочкиЗаказовПоставщикам = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"КоличествоДнейПросрочкиЗаказовПоставщикам");
	
	КоличествоДнейПросрочкиЧастичноОтгруженныхЗаказовПоставщикам = бг_КонстантыПовтИсп.ЗначениеКонстанты(
		"КоличествоДнейПросрочкиЧастичноОтгруженныхЗаказовПоставщикам");
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|		ПО (СостоянияЗаказовПоставщикам.Заказ = ЗаказПоставщику.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(СостоянияЗаказовПоставщикам.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
	|	И ЗаказПоставщику.ЖелаемаяДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДОБАВИТЬКДАТЕ(ЗаказПоставщику.ЖелаемаяДатаПоступления, ДЕНЬ, &КоличествоДнейПросрочкиЗаказовПоставщикам) < &ТекущаяДата
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикамОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Обороты КАК ЗаказыПоставщикамОбороты
	|		ПО (ЗаказыПоставщикамОбороты.ЗаказПоставщику = ЗаказыПоставщикамОстатки.ЗаказПоставщику)
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.ЗаказаноОстаток <> ЗаказыПоставщикамОбороты.ЗаказаноПриход
	|	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.ЖелаемаяДатаПоступления <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ДОБАВИТЬКДАТЕ(ЗаказыПоставщикамОстатки.ЗаказПоставщику.ЖелаемаяДатаПоступления, ДЕНЬ, &КоличествоДнейПросрочкиЧастичноОтгруженныхЗаказовПоставщикам) < &ТекущаяДата";
	
	Запрос.УстановитьПараметр(
		"КоличествоДнейПросрочкиЗаказовПоставщикам", 
		КоличествоДнейПросрочкиЗаказовПоставщикам);
		
	Запрос.УстановитьПараметр(
		"КоличествоДнейПросрочкиЧастичноОтгруженныхЗаказовПоставщикам", 
		КоличествоДнейПросрочкиЧастичноОтгруженныхЗаказовПоставщикам);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
			
КонецФункции	
	
Процедура ВыполнитьЗакрытиеЗаказов(ДокументыКОбработке, СтруктураДополнительныхПараметров)
	
	ШаблонОшибки = НСтр("ru='Автозакрытие заказов поставщикам: %ОписаниеОшибки%'");
	
	Для Каждого Документ Из ДокументыКОбработке Цикл
		
		Попытка
			
			ЗакрытьЗаказ(Документ, СтруктураДополнительныхПараметров);
			
		Исключение
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,
				Документ,
				СтрЗаменить(ШаблонОшибки, "%ОписаниеОшибки%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				
		КонецПопытки;	
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗакрытьЗаказ(Документ, СтруктураДополнительныхПараметров)

	// Захват объекта для редактирования			
	ЗаблокироватьДанныеДляРедактирования(Документ);
	
	// Получение объекта документа
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	ДокументИзменен = ЗаказыСервер.СкорректироватьСтрокиЗаказа(ДокументОбъект, СтруктураДополнительныхПараметров);
	
	Если ДокументИзменен Тогда
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти