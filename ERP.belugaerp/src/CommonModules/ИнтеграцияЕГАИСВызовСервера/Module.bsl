
#Область ПрограммныйИнтерфейс

&ИзменениеИКонтроль("ЗапросДанныхСправкиКПередачеXML")
Функция бг_ЗапросДанныхСправкиКПередачеXML(ОрганизацияЕГАИС, Операция, РегистрационныйНомер) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ИнтеграцияЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.';
							|en = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	Если ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		
		ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFormAB");
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "FormRegId", РегистрационныйНомер, СообщениеXML);
		
	Иначе
		
		ЗапросXDTO = ИнтеграцияЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryFormF1F2");
		ИнтеграцияЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "FormRegId", РегистрационныйНомер, СообщениеXML);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = ИнтеграцияЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
#Вставка	
	СообщениеXML.Вставить("бг_СправкаЕГАИС", РегистрационныйНомер);
#КонецВставки
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции 

&ИзменениеИКонтроль("ДанныеДокументаСообщения")
Функция бг_ДанныеДокументаСообщения(Сообщение, ОрганизацияЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("ДокументОснование");
	ВозвращаемоеЗначение.Вставить("Операция");
	ВозвращаемоеЗначение.Вставить("ФорматОбмена");
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
#Вставка
	ВозвращаемоеЗначение.Вставить("бг_СправкаЕГАИС", "");
#КонецВставки
	
	Если ОрганизацияЕГАИС = "ПроверкаПодключенияКУТМ" Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ.ДокументОснование КАК ДокументОснование,
	|	ЕГАИСПрисоединенныеФайлы.Документ                   КАК Документ,
	|	ЕГАИСПрисоединенныеФайлы.ВладелецФайла              КАК ОрганизацияЕГАИС,
	|	ЕГАИСПрисоединенныеФайлы.ФорматОбмена               КАК ФорматОбмена,
#Вставка
	|	ЕГАИСПрисоединенныеФайлы.бг_СправкаЕГАИС		    КАК бг_СправкаЕГАИС,
#КонецВставки
	|	ЕГАИСПрисоединенныеФайлы.Операция                   КАК Операция
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Ссылка = &Сообщение
	|");
	
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение.Документ          = Выборка.Документ;
		ВозвращаемоеЗначение.ДокументОснование = Выборка.ДокументОснование;
		ВозвращаемоеЗначение.Операция          = Выборка.Операция;
		ВозвращаемоеЗначение.ФорматОбмена      = Выборка.ФорматОбмена;
#Вставка
		ВозвращаемоеЗначение.бг_СправкаЕГАИС   = Выборка.бг_СправкаЕГАИС;
#КонецВставки
		ВозвращаемоеЗначение.ОрганизацияЕГАИС  = Выборка.ОрганизацияЕГАИС;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру отбора для выбора документа поступления.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ТТНВходящаяЕГАИС - Документ ТТН ЕГАИС (входящая).
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация.
//   * ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС     - Торговый объект.
//   * Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС  - Контрагент.
//
Функция бг_СтруктураОтбораДляВыбораДокументаПеремещения(ДокументСсылка) Экспорт
	
	СтруктураОтбора = Новый Структура("Организация,СкладОтправитель,ТорговыйОбъект");
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТТНВходящаяЕГАИС.Организация КАК Организация,
		|	ТТНВходящаяЕГАИС.Грузоотправитель.ТорговыйОбъект КАК СкладОтправитель,
		|	ТТНВходящаяЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект
		|ИЗ
		|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|ГДЕ
		|	ТТНВходящаяЕГАИС.Ссылка = &Документ");
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&ИзменениеИКонтроль("ПодготовитьКПередаче")
Функция бг_ПодготовитьКПередаче(ВходящиеДанные, ДальнейшееДействие, ДополнительныеПараметры, Немедленно, ИдентификаторВладельца) Экспорт

	ВозвращаемоеЗначение = Новый Массив;

	Если ТипЗнч(ВходящиеДанные) = Тип("Массив") Тогда
		МассивДокументов = ВходящиеДанные;
	Иначе
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ВходящиеДанные);
	КонецЕсли;

	Сообщения = Новый Массив;
#Вставка
	бг_ПроверитьДокументыНаДоступностьКДальнейшемуДействию(МассивДокументов, ДальнейшееДействие, Сообщения);
#КонецВставки
	Для Каждого ДокументСсылка Из МассивДокументов Цикл

		СообщенияДокумента = СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
		Для Каждого Сообщение Из СообщенияДокумента Цикл
			Сообщения.Добавить(Сообщение);
		КонецЦикла;

	КонецЦикла;

	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения, Немедленно,, ИдентификаторВладельца);

	Возврат ВозвращаемоеЗначение;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Удаляет неактуальные записи в регистре сведений Входящие документы УТМ
// Параметры:
//	КодФСРАР - Строка - код организации ЕГАИС.
//
Процедура бг_УдалитьНеАктуальныеЗаписиУТМ(КодФСРАР = "") Экспорт

	КоличествоЧасовХраненияВУТМ = бг_КонстантыПовтИсп.ЗначениеКонстанты("КоличествоЧасовХраненияВУТМ");
	
	Если ЗначениеЗаполнено(КоличествоЧасовХраненияВУТМ) Тогда
		СекундВЧасе = 3600;
		ДатаАктуальности = ТекущаяДатаСеанса() - КоличествоЧасовХраненияВУТМ * СекундВЧасе;
		РегистрыСведений.бг_ВходящиеДокументыУТМ.УдалитьНеАктуальныеЗаписиУТМ(ДатаАктуальности, КодФСРАР);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&ИзменениеИКонтроль("ДокументыКЗагрузке")
Функция бг_ДокументыКЗагрузке(НастройкиОбменаЕГАИС, ВозвращаемоеЗначение)

	ДокументыКЗагрузке = Новый Соответствие;

	ОрганизацииЕГАИС = ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС);
	Для Каждого ОрганизацияЕГАИС Из ОрганизацииЕГАИС Цикл

		НастройкаОбменаЕГАИС = НастройкиОбменаЕГАИС.Получить(ОрганизацияЕГАИС);

		Если Не НастройкаОбменаЕГАИС.ЗагружатьВходящиеДокументы Тогда
#Вставка
			бг_ЗаполнитьДокументыКЗагрузкеИзЗагруженныхПакетов(ДокументыКЗагрузке, ОрганизацияЕГАИС);
#КонецВставки
			Продолжить;
		КонецЕсли;

		ДокументыКЗагрузке.Вставить(ОрганизацияЕГАИС, Новый Массив);

		АдресаURLВходящихДокументов = ИнтеграцияЕГАИСКлиентСервер.АдресаURLВходящихДокументов(
			НастройкиОбменаЕГАИС, ОрганизацияЕГАИС);

		Если ЗначениеЗаполнено(АдресаURLВходящихДокументов.ТекстОшибки) Тогда

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось получить список входящих документов организации %1:
					           |По причине:
					           |%2';
					           |en = 'Не удалось получить список входящих документов организации %1:
					           |По причине:
					           |%2'"),
					ОрганизацияЕГАИС,
					АдресаURLВходящихДокументов.ТекстОшибки));

			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + АдресаURLВходящихДокументов.ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = АдресаURLВходящихДокументов.ТекстОшибки;
			КонецЕсли;

		КонецЕсли;

		Если АдресаURLВходящихДокументов.ДанныеОбработки <> Неопределено Тогда
			Для Каждого ДанныеКПолучению Из АдресаURLВходящихДокументов.ДанныеОбработки Цикл

				СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ДанныеКПолучению.АдресURL);

				РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(
					ИнтеграцияЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(
						НастройкаОбменаЕГАИС,
						ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET", СтруктураURI.ПутьНаСервере)));

				Если РезультатОперации.ТекстСообщенияXMLПолучен Тогда

					ДокументыКЗагрузке[ОрганизацияЕГАИС].Добавить(
						ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента(
							ОрганизацияЕГАИС,
							ДанныеКПолучению.ИдентификаторЗапроса,
							ДанныеКПолучению.АдресURL,
							РезультатОперации.ТекстВходящегоСообщенияXML));

				Иначе

					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось получить входящий документ %1
						           |%2';
						           |en = 'Не удалось получить входящий документ %1
						           |%2'"),
						ДанныеКПолучению.АдресURL,
						РезультатОперации.ТекстОшибки);

					Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
						                                 + Символы.ПС
						                                 + ТекстОшибки;
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Возврат ДокументыКЗагрузке;

КонецФункции

&ИзменениеИКонтроль("УдалитьДокументыИзУТМ")
Процедура бг_УдалитьДокументыИзУТМ(ДокументыКУдалению, НастройкиОбменаЕГАИС, ВозвращаемоеЗначение)

	Для Каждого Данные Из ДокументыКУдалению Цикл

		Если Не ЗначениеЗаполнено(Данные.АдресЗапроса) Тогда
			Продолжить;
		КонецЕсли;

		НастройкаОбменаЕГАИС = НастройкиОбменаЕГАИС.Получить(Данные.ОрганизацияЕГАИС);
#Вставка
		Если Не НастройкаОбменаЕГАИС = Неопределено
			И Не НастройкаОбменаЕГАИС.ЗагружатьВходящиеДокументы Тогда
			Продолжить;
		КонецЕсли;
#КонецВставки

		РезультатОперации = Неопределено;
		Если НастройкаОбменаЕГАИС <> Неопределено Тогда

			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Данные.АдресЗапроса);

			РезультатОперации = ИнтеграцияЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(
				ИнтеграцияЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(
					НастройкаОбменаЕГАИС,
					ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE", СтруктураURI.ПутьНаСервере)));

		КонецЕсли;

		Если РезультатОперации = Неопределено
			Или Не РезультатОперации.ТекстСообщенияXMLПолучен Тогда

			ТекстОшибки =
				СтрШаблон(НСтр("ru = 'Не удалось удалить входящий документ (%1)
					                 |%2';
					                 |en = 'Не удалось удалить входящий документ (%1)
					                 |%2'"),
					Данные.АдресЗапроса,
					РезультатОперации.ТекстОшибки);

			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);

			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&ИзменениеИКонтроль("ОбработатьВходящиеДокументы")
Функция бг_ОбработатьВходящиеДокументы(ДокументыКЗагрузке, ИдентификаторВладельца = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
#Вставка
	ВозвращаемоеЗначение.Вставить("Исключения", Новый Массив);
#КонецВставки
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСоответствияДокументовТипамЕГАИС = Перечисления.ВидыДокументовЕГАИС.ТаблицаСоответствияДокументовТипамЕГАИС();
	
	СоответствиеОрганизацииЕГАИСиКодаФСРАР = Новый Соответствие;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтопЛист",      Новый Соответствие);
	ДополнительныеПараметры.Вставить("ТекущийОбъект", Неопределено);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ИнтеграцияЕГАИСВызовСервера.ОбработатьВходящиеДокументы");
	
	Для Каждого КлючИЗначение Из ДокументыКЗагрузке Цикл
		
		ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		
		УведомленияОРегистрации       = Новый Массив;
		ВходящиеТТН                   = Новый Массив;
		ИсторияСправок2ПоТТН          = Новый Массив;
		
		ВходящиеТранспортныеНакладные = Новый ТаблицаЗначений;
		ВходящиеТранспортныеНакладные.Колонки.Добавить("WBRegID", Метаданные.ОпределяемыеТипы.СтрокаЕГАИС.Тип);
		ВходящиеТранспортныеНакладные.Колонки.Добавить("ДатаКвитанции");
		ВходящиеТранспортныеНакладные.Колонки.Добавить("ДанныеДокумента");
		ВходящиеТранспортныеНакладные.Колонки.Добавить("ДополнительныеДанные");
		
		Очередь = Новый ТаблицаЗначений;
		Очередь.Колонки.Добавить("Приоритет");
		Очередь.Колонки.Добавить("ДанныеДокумента");
		Очередь.Колонки.Добавить("ДополнительныеДанные");
		
		Для Каждого ВходящиеДанные Из КлючИЗначение.Значение Цикл
			
			ДанныеОбработки = ИнтеграцияЕГАИС.ОбработатьОтветНаЗапросПолученияДокумента(ВходящиеДанные, ТаблицаСоответствияДокументовТипамЕГАИС);
			Если ДанныеОбработки.Результат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДокумента = ДанныеОбработки.Результат;
			
			ЭлементОчереди = Очередь.Добавить();
			ЭлементОчереди.ДанныеДокумента = ДанныеДокумента;
			
			Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "Result")
					И ДанныеДокумента.Объект.Result <> Неопределено Тогда
					ЭлементОчереди.Приоритет = 1; // ПолученЕГАИС
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "OperationResult")
					И ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
					ЭлементОчереди.Приоритет = 2; // ПроведенЕГАИС
				Иначе
					ЭлементОчереди.Приоритет = 3;
				КонецЕсли;
			Иначе
				ЭлементОчереди.Приоритет = 3;
			КонецЕсли;
			
			Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция
				И ДанныеДокумента.Объект <> Неопределено
				И ДанныеДокумента.Объект.DocType = "Route"
				И ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
				
				ПараметрыИдентификатораЗапросаV4 = ИнтеграцияЕГАИС.ПараметрыИдентификатораЗапросаV4(ДанныеДокумента.ИдентификаторЗапроса);
				Если СоответствиеОрганизацииЕГАИСиКодаФСРАР[ОрганизацияЕГАИС] = Неопределено Тогда
					КодФСРАР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "Код");
					СоответствиеОрганизацииЕГАИСиКодаФСРАР.Вставить(ОрганизацияЕГАИС, КодФСРАР);
				КонецЕсли;
				
#Удаление
				Если ПараметрыИдентификатораЗапросаV4.КодФСРАР <> СоответствиеОрганизацииЕГАИСиКодаФСРАР[ОрганизацияЕГАИС] Тогда
					
					WbRegID  = Неопределено;
					
					// WbRegID можно получить только из комментария к тикету...
					OperationComment = ДанныеДокумента.Объект.OperationResult.OperationComment;
					ЗаголовокНомерТТН = "ТТН № ";
					ДлинаЗаголовкаНомерТТН = СтрДлина(ЗаголовокНомерТТН);
					
					НомерИДействие = СтрРазделить(
						Сред(
							OperationComment,
							СтрНайти(OperationComment, ЗаголовокНомерТТН) + ДлинаЗаголовкаНомерТТН),
						" ", Ложь);
					
					Если НомерИДействие.Количество() = 2 Тогда
						WbRegID = НомерИДействие[0];
					КонецЕсли;
					
					Проведен = Неопределено;
					Если ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("Confirm") Тогда
						Проведен = Истина;
					ИначеЕсли ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("UnConfirm") Тогда
						Проведен = Ложь;
					КонецЕсли;
					
					Если WbRegID <> Неопределено Тогда
						ДополнительныеДанные = Новый Структура;
						ДополнительныеДанные.Вставить("WbRegID",      WbRegID);
						ДополнительныеДанные.Вставить("Проведен",     Проведен);
						ДополнительныеДанные.Вставить("ТипДокумента", "ТранспортнаяНакладная");
						
						ЭлементОчереди.ДополнительныеДанные = ДополнительныеДанные;
					КонецЕсли;
					
				КонецЕсли;
#КонецУдаления
				
			КонецЕсли;
			
		КонецЦикла;
		
		Очередь.Сортировать("Приоритет ВОЗР");
		
		Для Каждого ЭлементОчереди Из Очередь Цикл
			
			ДанныеДокумента = ЭлементОчереди.ДанныеДокумента;
			
			ДополнительныеПараметры.ТекущийОбъект = Неопределено;
			
			НачатьТранзакцию();
			
			Попытка
				
				Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
					
					Если ЗначениеЗаполнено(ДанныеДокумента.ИдентификаторЗапроса) Тогда
						ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьУведомлениеОРегистрацииДвиженияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					Иначе
						ДанныеЗагруженногоДокумента = Неопределено;
						УведомленияОРегистрации.Добавить(ДанныеДокумента);
					КонецЕсли;
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
					
					ДанныеЗагруженногоДокумента = Неопределено;
					ВходящиеТТН.Добавить(ДанныеДокумента);
					
				ИначеЕсли ЭлементОчереди.ДополнительныеДанные <> Неопределено
					И ЭлементОчереди.ДополнительныеДанные.ТипДокумента = "ТранспортнаяНакладная" Тогда
					
					ДанныеЗагруженногоДокумента = Неопределено;
					НоваяСтрока = ВходящиеТранспортныеНакладные.Добавить();
					НоваяСтрока.WbRegID              = ЭлементОчереди.ДополнительныеДанные.WbRegID;
					НоваяСтрока.ДополнительныеДанные = ЭлементОчереди.ДополнительныеДанные;
					НоваяСтрока.ДанныеДокумента      = ДанныеДокумента;
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьУведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
#Вставка
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.бг_КвитанцияОтчетОбИспользованииФСМ Тогда

					ДанныеЗагруженногоДокумента = бг_ИнтеграцияЕГАИС.ЗагрузитьКвитанциюОтчетОбИспользованииФСМ(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.бг_УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве Тогда

					ДанныеЗагруженногоДокумента = бг_ИнтеграцияЕГАИС.ЗагрузитьУведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.бг_НакладнаяНаВыдачуФСМ Тогда

					ДанныеЗагруженногоДокумента = бг_ИнтеграцияЕГАИС.ЗагрузитьНакладнаяНаВыдачуФСМ(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.бг_ОтветНаЗапросССП Тогда

					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросАлкогольнойПродукции(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
#КонецВставки
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьАктПоИсходящейТТНЕГАИС(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьКвитанциюАктаРасхожденийТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьКвитанциюЗапросаНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьЗапросНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьКвитанцию(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросДанныхОрганизации Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросДанныхОрганизации(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАлкогольнойПродукции Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросАлкогольнойПродукции(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьСправку(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьСправку(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре1 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОстатковВРегистре1(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОстатковВРегистре2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАкцизныхМарок Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросАкцизныхМарок(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияМеждуРегистрами Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаДвиженияМеждуРегистрами(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияПоСправке2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаДвиженияПоСправке2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИнформацияОбОрганизации Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаИнформацияОбОрганизации(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаНеобработанныеТТН Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаНеобработанныеТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОбработанныеЧеки Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОбработанныеЧеки(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре1 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре1(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре3(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИсторияСправок2 Тогда
					
					ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьОтветНаЗапросОтчетаИсторияСправок2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
					
				ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ИсторияСправок2ПоТТН Тогда
					
					ДанныеЗагруженногоДокумента = Неопределено;
					ИсторияСправок2ПоТТН.Добавить(ДанныеДокумента);
					
				Иначе
					
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип загружаемого документа %1.';
													|en = 'Неизвестный тип загружаемого документа %1.'"), ДанныеДокумента.ТипЕГАИС);
					
				КонецЕсли;
				
				ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
					ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Если ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
					ДополнительныеПараметры.СтопЛист.Вставить(ДополнительныеПараметры.ТекущийОбъект, Истина);
				КонецЕсли;
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При загрузке документа %1 с типом %2 возникла ошибка:
					           |Текст ошибки: %3
					           |Текст XML см. в журнале регистрации.';
					           |en = 'При загрузке документа %1 с типом %2 возникла ошибка:
					           |Текст ошибки: %3
					           |Текст XML см. в журнале регистрации.'"),
					ДанныеДокумента.АдресЗапроса,
					ДанныеДокумента.ТипЕГАИС,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Если ИнтеграцияЕГАИС.СообщатьОбОшибкахПриЗагрузкеДанных()
					Или ( СтрНайти(НРег(ТекстОшибки), НСтр("ru = 'не найден документ';
															|en = 'не найден документ'")) = 0
						И СтрНайти(НРег(ТекстОшибки), НСтр("ru = 'не найден исходящий запрос';
															|en = 'не найден исходящий запрос'")) = 0) Тогда
					
					ТекстОшибкиЖурналРегистрации = СтрШаблон(
						НСтр("ru = 'При загрузке документа %1 с типом %2 возникла ошибка:
						           |Текст ошибки: %3
						           |Текст XML:
						           |%4';
						           |en = 'При загрузке документа %1 с типом %2 возникла ошибка:
						           |Текст ошибки: %3
						           |Текст XML:
						           |%4'"),
						ДанныеДокумента.АдресЗапроса,
						ДанныеДокумента.ТипЕГАИС,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ДанныеДокумента.ТекстXML);
					
					ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации);
					
					ИнтеграцияИС.СообщитьПользователюВФорму(ИдентификаторВладельца, ТекстОшибки);
					
				КонецЕсли;
#Вставка
				бг_УстановитьСтатусОбработкиДокумента(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
						бг_СлужебныеДанныеДляОбновленияСтатусовВходящихДокументов(ОрганизацияЕГАИС,
							ДанныеДокумента.АдресЗапроса)),
					ТекстОшибки);
				ВозвращаемоеЗначение.Исключения.Добавить(
					Новый Структура(
						"ОрганизацияЕГАИС,
						|АдресЗапроса,
						|ИдентификаторЗапроса",
						ОрганизацияЕГАИС,
						ДанныеДокумента.АдресЗапроса,
						ДанныеДокумента.ИдентификаторЗапроса));
#КонецВставки
				
			КонецПопытки;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
#Вставка
				бг_УстановитьСтатусОбработкиДокумента(ДанныеЗагруженногоДокумента.СлужебныеДанные);
#КонецВставки
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ДанныеДокументаТТН Из ВходящиеТТН Цикл
			
			Если ОбщегоНазначения.РежимОтладки() Тогда
				
				ИдентификаторТТН = Строка(ДанныеДокументаТТН.Объект.Identity);
				
				Если СтрНачинаетсяС(НРег(ИдентификаторТТН), ИнтеграцияЕГАИС.ПрефиксИдентификатораРежимаОтладкиОбщий())
					И СтрНайти(НРег(ИдентификаторТТН), ИнтеграцияЕГАИС.ПрефиксИдентификатораРежимаОтладки()) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеДокументаУведомлениеОРегистрации = ИнтеграцияЕГАИС.НайтиУведомлениеОРегистрацииСправок(
				ДанныеДокументаТТН,
				УведомленияОРегистрации);
			
			Если ДанныеДокументаУведомлениеОРегистрации = Неопределено Тогда
				// Уведомление еще не поступило в УТМ
				Продолжить;
			КонецЕсли;
			
			ДанныеДокументаИсторияПоСправкам2 = ИнтеграцияЕГАИС.НайтиИсториюСправок2ПоТТН(
				ДанныеДокументаУведомлениеОРегистрации,
				ИсторияСправок2ПоТТН);
			
			Если ДанныеДокументаИсторияПоСправкам2 <> Неопределено Тогда
				ИсторияСправок2ПоТТН.Удалить(ИсторияСправок2ПоТТН.Найти(ДанныеДокументаИсторияПоСправкам2));
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("WbRegID", ИдентификаторТТН);
			НайденныеВходящиеТранспортныеНакладные = ВходящиеТранспортныеНакладные.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеВходящиеТранспортныеНакладные.Количество() = 1 Тогда
				
				ДанныеДокументаТранспортнаяНакладная = НайденныеВходящиеТранспортныеНакладные[0];
				
				ВходящиеТранспортныеНакладные.Удалить(ВходящиеТранспортныеНакладные.Найти(ДанныеДокументаТранспортнаяНакладная));
				
			КонецЕсли;
			
			ДополнительныеДанные = Новый Структура;
			ДополнительныеДанные.Вставить("ДанныеДокументаТТН",                     ДанныеДокументаТТН);
			ДополнительныеДанные.Вставить("ДанныеДокументаУведомлениеОРегистрации", ДанныеДокументаУведомлениеОРегистрации);
			ДополнительныеДанные.Вставить("ДанныеДокументаИсторияПоСправкам2",      ДанныеДокументаИсторияПоСправкам2);
			ДополнительныеДанные.Вставить("ДанныеДокументаТранспортнаяНакладная",   ДанныеДокументаТранспортнаяНакладная);
			
			НачатьТранзакцию();
			
			Попытка
				
				ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьТТНВходящуюЕГАИС(
					ОрганизацияЕГАИС, ДополнительныеДанные);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
					           |Текст ошибки: %5
					           |Текст XML см. в журнале регистрации.';
					           |en = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
					           |Текст ошибки: %5
					           |Текст XML см. в журнале регистрации.'"),
					ДанныеДокументаТТН.АдресЗапроса, ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса,
					ДанныеДокументаТТН.ТипЕГАИС,     ДанныеДокументаУведомлениеОРегистрации.ТипЕГАИС,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстОшибкиЖурналРегистрации = СтрШаблон(
					НСтр("ru = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
					           |Текст ошибки: %5
					           |Текст сообщения XML документа %1:
					           |%6
					           |Текст сообщения XML документа %2:
					           |%7';
					           |en = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
					           |Текст ошибки: %5
					           |Текст сообщения XML документа %1:
					           |%6
					           |Текст сообщения XML документа %2:
					           |%7'"),
					ДанныеДокументаТТН.АдресЗапроса, ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса,
					ДанныеДокументаТТН.ТипЕГАИС,     ДанныеДокументаУведомлениеОРегистрации.ТипЕГАИС,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					ДанныеДокументаТТН.ТекстXML,     ДанныеДокументаУведомлениеОРегистрации.ТекстXML);
				
				ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации);
				
				ИнтеграцияИС.СообщитьПользователюВФорму(ИдентификаторВладельца, ТекстОшибки);
#Вставка
				СлужебныеДанные = Новый Массив;
				СлужебныеДанные.Добавить(
					бг_СлужебныеДанныеДляОбновленияСтатусовВходящихДокументов(ОрганизацияЕГАИС,
						ДанныеДокументаТТН.АдресЗапроса));
				СлужебныеДанные.Добавить(
					бг_СлужебныеДанныеДляОбновленияСтатусовВходящихДокументов(ОрганизацияЕГАИС,
						ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса));
				бг_УстановитьСтатусОбработкиДокумента(СлужебныеДанные, ТекстОшибки);
#КонецВставки
				
			КонецПопытки;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ДанныеДокументаТТН.ТипЕГАИС);
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
#Вставка
				бг_УстановитьСтатусОбработкиДокумента(ДанныеЗагруженногоДокумента.СлужебныеДанные);
#КонецВставки
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ДанныеДокумента Из ИсторияСправок2ПоТТН Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьИсториюСправок2ПоТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
#Вставка
				бг_УстановитьСтатусОбработкиДокумента(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
						бг_СлужебныеДанныеДляОбновленияСтатусовВходящихДокументов(ОрганизацияЕГАИС,
							ДанныеДокумента.АдресЗапроса)),
					ОписаниеОшибки());
#КонецВставки
				
				Если ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
					ДополнительныеПараметры.СтопЛист.Вставить(ДополнительныеПараметры.ТекущийОбъект, Истина);
				КонецЕсли;
				
			КонецПопытки;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
#Вставка
				бг_УстановитьСтатусОбработкиДокумента(ДанныеЗагруженногоДокумента.СлужебныеДанные);
#КонецВставки
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
			
		КонецЦикла;
		
		Для каждого ЭлементДанных Из ВходящиеТранспортныеНакладные Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ДанныеЗагруженногоДокумента = ИнтеграцияЕГАИС.ЗагрузитьВходящуюТранспортнуюНакладную(ЭлементДанных, ОрганизацияЕГАИС, ДополнительныеПараметры);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
#Вставка
				бг_УстановитьСтатусОбработкиДокумента(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
						бг_СлужебныеДанныеДляОбновленияСтатусовВходящихДокументов(ОрганизацияЕГАИС,
							ДанныеДокумента.АдресЗапроса)),
					ОписаниеОшибки());
#КонецВставки
				
				Если ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
					ДополнительныеПараметры.СтопЛист.Вставить(ДополнительныеПараметры.ТекущийОбъект, Истина);
				КонецЕсли;
				
			КонецПопытки;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
#Вставка
				бг_УстановитьСтатусОбработкиДокумента(ДанныеЗагруженногоДокумента.СлужебныеДанные);
#КонецВставки
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
			ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
				ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ПодготовитьСообщенияКПередаче")
Функция бг_ПодготовитьСообщенияКПередаче(Сообщения, Немедленно = Ложь, НастройкиОбменаЕГАИС = Неопределено, ИдентификаторВладельца = Неопределено)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",              Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче",  Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",   Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца", ИдентификаторВладельца);
	
#Вставка
	НедоступныеОперацииКРегистрации = РегистрыСведений.бг_НастройкиПоОперациямЕГАИС.НедоступныеОперацииПоИнтервалуРегистрации();
	ШаблонОшибкиИнтервала = НСтр("ru = 'Запрещено отправлять запрос %1 с интервалом менее %2 минут.'",
									ОбщегоНазначения.КодОсновногоЯзыка());
#КонецВставки
	СообщенияКПередаче = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
#Вставка
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
	
			Операции = НедоступныеОперацииКРегистрации.Получить(Сообщение.ОрганизацияЕГАИС);
			Если Не Операции = Неопределено Тогда
				
				ОписаниеОперации = Операции.Найти(Сообщение.Операция);
				Если Не ОписаниеОперации = Неопределено Тогда
					Сообщение.ТекстОшибки = СтрШаблон(ШаблонОшибкиИнтервала, Сообщение.Операция,
						XMLСтрока(ОписаниеОперации.Интервал));
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
#КонецВставки
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",         Сообщение.ТипСообщения);
			Реквизиты.Вставить("Операция",             Сообщение.Операция);
			Реквизиты.Вставить("Документ",             Сообщение.Документ);
			Реквизиты.Вставить("СообщениеОснование",   Неопределено);
			Реквизиты.Вставить("Описание",             Сообщение.Описание);
			Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
			Реквизиты.Вставить("ФорматОбмена",         Сообщение.ФорматОбмена);
			Реквизиты.Вставить("ОрганизацияЕГАИС",     Сообщение.ОрганизацияЕГАИС);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.КПередаче);
			Реквизиты.Вставить("Версия",               Сообщение.Версия);
#Вставка			
			Если Сообщение.Свойство("бг_СправкаЕГАИС") Тогда
				Реквизиты.Вставить("бг_СправкаЕГАИС",  Сообщение.бг_СправкаЕГАИС);
			КонецЕсли;
#КонецВставки
			Попытка
				
				Результат = ИнтеграцияЕГАИС.ПодготовитьСообщениеКПередаче(Сообщение.ТекстСообщенияXML, Реквизиты, Немедленно);
				
				ИсходящееСообщение = Результат.ИсходящееСообщение;
				
				НовыйСтатус           = Результат.НовыйСтатус;
				ТекстОшибки           = Результат.ТекстОшибки;
				ПодготовленоКПередаче = Не ЗначениеЗаполнено(ТекстОшибки);
				
			Исключение
				
				НовыйСтатус           = Неопределено;
				ТекстОшибки           = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче = Ложь;
				
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ЕГАИС:
				           |%2';
				           |en = 'Сообщение ""%1"" не подготовлено к отправке в ЕГАИС:
				           |%2'"),
				Сообщение.Описание,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			
			ИсходящееСообщение = Неопределено;
			
		КонецЕсли;
		
		СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
		СтрокаРезультата.ОрганизацияЕГАИС = Сообщение.ОрганизацияЕГАИС;
		СтрокаРезультата.Операция         = Сообщение.Операция;
		СтрокаРезультата.ФорматОбмена     = Сообщение.ФорматОбмена;
		
		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = ПодготовленоКПередаче;
		СтрокаРезультата.ПереданоВУТМ          = Ложь;
		СтрокаРезультата.Принято               = Ложь;
		
		СтрокаРезультата.ИсходящееСообщение = ИсходящееСообщение;
#Вставка
		Если ИсходящееСообщение = Неопределено Тогда
			СтрокаРезультата.ИсходящееСообщениеВерсияДанных = "";
		Иначе
			СтрокаРезультата.ИсходящееСообщениеВерсияДанных
				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "ВерсияДанных");
		КонецЕсли;
#КонецВставки
		СтрокаРезультата.ВходящееСообщение  = Неопределено;
		
		СтрокаРезультата.Объект            = Сообщение.Документ;
		СтрокаРезультата.ДокументОснование = Сообщение.ДокументОснование;
		СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
		
		СообщенияКПередаче.Добавить(СтрокаРезультата);
		
	КонецЦикла;
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	Если НастройкиОбменаЕГАИС = Неопределено Тогда
		НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС();
	КонецЕсли;
	
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	// Передача сообщений на сервере и подготовка сообщений к отправке на клиенте
	РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС, СообщенияКПередаче, Немедленно);
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияXMLКПередаче Цикл
		ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ОбработатьРезультатПередачиДанных")
Функция бг_ОбработатьРезультатПередачиДанных(ИсходящееСообщение, РеквизитыИсходящегоСообщения, РезультатОтправкиЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("НовыйСтатус");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ВходящееСообщение");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("ДокументОснование");
	
	// Результат чека ЕГАИС
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗапроса");
	ВозвращаемоеЗначение.Вставить("Подпись");
	
	ДокументСсылка    = РеквизитыИсходящегоСообщения.Документ;
	ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	Операция          = РеквизитыИсходящегоСообщения.Операция;
	ФорматОбмена      = РеквизитыИсходящегоСообщения.ФорматОбмена;
	ОрганизацияЕГАИС  = РеквизитыИсходящегоСообщения.ОрганизацияЕГАИС;
	
	ВозвращаемоеЗначение.Документ          = ДокументСсылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОснование;
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
		
		ДанныеОбработки = ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение по документу %1 не принято УТМ:
				           |Текст ошибки: %2';
				           |en = 'Сообщение по документу %1 не принято УТМ:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ДанныеОбработки.ТекстОшибки);
		КонецЕсли;
		
		Если ОрганизацияЕГАИС = "ПроверкаПодключенияКУТМ" Тогда
			ВозвращаемоеЗначение.ВходящееСообщение  = ТекстВходящегоСообщенияXML;
			ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
			ИдентификаторЗапроса = "";
			Подпись              = "";
		Иначе
			ИдентификаторЗапроса = ДанныеОбработки.Результат.ИдентификаторЗапроса;
			Подпись              = ДанныеОбработки.Результат.Подпись;
		КонецЕсли;
		
		Если Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации Тогда
			ОперацияВходящегоСообщения = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации;
		Иначе
			ОперацияВходящегоСообщения = Операция;
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
		Реквизиты.Вставить("Операция",             ОперацияВходящегоСообщения);
		Реквизиты.Вставить("Документ",             ДокументСсылка);
		Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
		Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
		Реквизиты.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		Реквизиты.Вставить("ФорматОбмена",         ФорматОбмена);
		Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
		Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
#Вставка 
		Если РеквизитыИсходящегоСообщения.Свойство("бг_СправкаЕГАИС") Тогда
			Реквизиты.Вставить("бг_СправкаЕГАИС", РеквизитыИсходящегоСообщения.бг_СправкаЕГАИС);
		КонецЕсли;
#КонецВставки
		НачатьТранзакцию();
		
		Попытка
			
			ВходящееСообщение = ИнтеграцияЕГАИС.ДобавитьЗаписьВПротоколОбмена(
				ТекстВходящегоСообщенияXML,
				Реквизиты).Ссылка;
			
			ИнтеграцияЕГАИС.УдалитьСообщениеИзОчередиПередачиДанных(ИсходящееСообщение);
			
			Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
				ИсходящееСообщениеОбъект = ИсходящееСообщение.ПолучитьОбъект();
				ИсходящееСообщениеОбъект.ИдентификаторЗапроса = ИдентификаторЗапроса;
				ИсходящееСообщениеОбъект.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				
				ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = Реквизиты.ФорматОбмена;
				
				ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
				МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ДокументСсылка,
					Операция,
					ДанныеОбработки.СтатусОбработки, ПараметрыОбновленияСтатуса);
				
			Иначе
				НовыйСтатус = Неопределено;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ВходящееСообщение                    = ВходящееСообщение;
			ВозвращаемоеЗначение.ИсходящееСообщение                   = ИсходящееСообщение;
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			
			ВозвращаемоеЗначение.ИдентификаторЗапроса = ИдентификаторЗапроса;
			ВозвращаемоеЗначение.Подпись              = Подпись;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
				           |Текст ошибки: %2';
				           |en = 'При передаче сообщения по документу %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	Иначе
		
		Если ОрганизацияЕГАИС <> "ПроверкаПодключенияКУТМ" Тогда
			
			ОписаниеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "Описание");
			
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Данные не переданы в УТМ:
					           |%1
					           |По причине:
					           |%2';
					           |en = 'Данные не переданы в УТМ:
					           |%1
					           |По причине:
					           |%2'"),
					ОписаниеОперации,
					РезультатОтправкиЗапроса.ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&ИзменениеИКонтроль("ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС")
Процедура бг_ЗаписатьСвязьДокументаПоступленияИТТНЕГАИС(ДокументСсылка, ДокументПоступления)

	НачатьТранзакцию();
	Попытка

		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();

		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		ДокументОбъект.Заблокировать();

		ДокументОбъект.ДокументОснование = ДокументПоступления;
#Удаление
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
#КонецУдаления		
#Вставка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);

		ОбрабатываемыеТипыДокументов = Новый Массив;
		ОбрабатываемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ТТНВходящаяЕГАИС"));
		ОбрабатываемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ТТНИсходящаяЕГАИС"));
		
		Если ОбрабатываемыеТипыДокументов.Найти(ТипЗнч(ДокументСсылка)) <> Неопределено
			И ЗначениеЗаполнено(ДокументПоступления) Тогда
			
			бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(ДокументПоступления);
		КонецЕсли;
#КонецВставки
		
		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

&ИзменениеИКонтроль("ВыполнитьОбмен")
Функция бг_ВыполнитьОбмен(ОрганизацииЕГАИС, ДатыПоследнегоЗапуска, ИдентификаторВладельца)

	УстановитьПривилегированныйРежим(Истина);

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",                  Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче",      Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",       Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца",     ИдентификаторВладельца);
	ВозвращаемоеЗначение.Вставить("ВыполнитьОбменПоРасписанию", Ложь);
#Вставка
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьОптимизированныйАлгоритмОбменаЕГАИС") = Истина Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
#КонецВставки

	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС, ДатыПоследнегоЗапуска);
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	ВозвращаемоеЗначение.ВыполнитьОбменПоРасписанию = ДатыПоследнегоЗапуска <> Неопределено
	И (НастройкиОбменаЕГАИС.ОбменНаКлиенте.Количество() > 0
	Или НастройкиОбменаЕГАИС.ОбменНаСервере.Количество() > 0);

	// Передача сообщений на сервере и подготовка сообщений к отправке на клиенте
	РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС);
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияXMLКПередаче Цикл
		ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(ЭлементДанных);
	КонецЦикла;

	// Загрузка входящих документов и ответов на запросы
	Результат = ПолучитьВходящиеДокументы(НастройкиОбменаЕГАИС.ОбменНаСервере);
	Для Каждого ЭлементДанных Из Результат.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;

	Для Каждого ОрганизацияБезНастроек Из НастройкиОбменаЕГАИС.БезНастроек Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтрШаблон(
		НСтр("ru = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ';
		|en = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ'"),
		ОрганизацияБезНастроек));
	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

&ИзменениеИКонтроль("ОбработатьОчередьПередачиДанных")
Функция бг_ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС, СообщенияXMLКПередаче, Немедленно)

	УстановитьПривилегированныйРежим(Истина);

	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",             Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче", Новый Массив);

	ОрганизацииЕГАИС = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииЕГАИС, ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаСервере));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииЕГАИС, ИнтеграцияЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаКлиенте));

	Если ОрганизацииЕГАИС.Количество() = 0 Тогда

		Если СообщенияXMLКПередаче <> Неопределено Тогда
			Для Каждого Сообщение Из СообщенияXMLКПередаче Цикл

				Если Сообщение.ПодготовленоКПередаче И Немедленно Тогда
					ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение в ЕГАИС не может быть передано.
					|Для организации %1 не настроено подключение к УТМ.';
					|en = 'Сообщение в ЕГАИС не может быть передано.
					|Для организации %1 не настроено подключение к УТМ.'"),
					Сообщение.ОрганизацияЕГАИС);
				Иначе
					ТекстОшибки = Сообщение.ТекстОшибки;
				КонецЕсли;

				СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
				СтрокаРезультата.ОрганизацияЕГАИС = Сообщение.ОрганизацияЕГАИС;
				СтрокаРезультата.Операция         = Сообщение.Операция;
				СтрокаРезультата.ФорматОбмена     = Сообщение.ФорматОбмена;

				СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Сообщение.ПодготовленоКПередаче;
				СтрокаРезультата.ПереданоВУТМ          = Ложь;
				СтрокаРезультата.Принято               = Ложь;

				СтрокаРезультата.ИсходящееСообщение = Сообщение.ИсходящееСообщение;
				СтрокаРезультата.ВходящееСообщение  = Неопределено;

				СтрокаРезультата.Объект             = Сообщение.Объект;
				СтрокаРезультата.ДокументОснование  = Сообщение.ДокументОснование;
				СтрокаРезультата.НовыйСтатус        = Сообщение.НовыйСтатус;

				ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);

			КонецЦикла;
		КонецЕсли;

		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
#Вставка
	ИспользуетсяОптимизированныйМеханизм = бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьОптимизированныйАлгоритмОбменаЕГАИС");
#КонецВставки

	Если СообщенияXMLКПередаче = Неопределено Тогда

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Очередь.Сообщение              КАК ИсходящееСообщение,
		|	Очередь.Сообщение.Операция     КАК Операция,
		|	Очередь.Сообщение.ФорматОбмена КАК ФорматОбмена,
		|	Очередь.ОрганизацияЕГАИС       КАК ОрганизацияЕГАИС,
		|	Истина                         КАК ПодготовленоКПередаче
		|ИЗ
		|	РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК Очередь
		|ГДЕ
		|	Очередь.ОрганизацияЕГАИС В(&ОрганизацииЕГАИС)
		|");

		Запрос.УстановитьПараметр("ОрганизацииЕГАИС", ОрганизацииЕГАИС);

#Удаление
		ТаблицаОчередь = Запрос.Выполнить().Выгрузить();
#КонецУдаления
#Вставка
		Если ИспользуетсяОптимизированныйМеханизм = Истина Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Очередь.Сообщение              КАК ИсходящееСообщение,
			|	Очередь.Сообщение.ВерсияДанных КАК ИсходящееСообщениеВерсияДанных,
			|	Очередь.Сообщение.Операция     КАК Операция,
			|	Очередь.Сообщение.ФорматОбмена КАК ФорматОбмена,
			|	Очередь.ОрганизацияЕГАИС       КАК ОрганизацияЕГАИС,
			|	Истина                         КАК ПодготовленоКПередаче
			|ИЗ
			|	РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК Очередь
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_НастройкиПоОперациямЕГАИС КАК Настройки
			|		ПО Очередь.Сообщение.Операция = Настройки.Операция
			|ГДЕ
			|	Очередь.ОрганизацияЕГАИС В(&ОрганизацииЕГАИС)
			|	И Настройки.Приоритет <= 1";
			
			ТаблицаОчередь = Запрос.Выполнить().Выгрузить();
			
			КоличествоВПорции = бг_КонстантыПовтИсп.ЗначениеКонстанты("КоличествоДокументовВПорцииОбменаЕГАИС");
			Если КоличествоВПорции = Неопределено Тогда
				КоличествоВПорции = 0;
			КонецЕсли;
			
			Если КоличествоВПорции > 0 И ТаблицаОчередь.Количество() < КоличествоВПорции Тогда
				
				ОсталосьДоПорции = КоличествоВПорции - ТаблицаОчередь.Количество();
				НедоступныеОперацииДляОтправки = РегистрыСведений.бг_НастройкиПоОперациямЕГАИС.НедоступныеОперацииПоИнтервалуОтправки(ОрганизацииЕГАИС);
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Очередь.Сообщение              КАК ИсходящееСообщение,
				|	Очередь.Сообщение.ВерсияДанных КАК ИсходящееСообщениеВерсияДанных,
				|	Очередь.Сообщение.Операция     КАК Операция,
				|	Очередь.Сообщение.ФорматОбмена КАК ФорматОбмена,
				|	Очередь.ОрганизацияЕГАИС       КАК ОрганизацияЕГАИС,
				|	Истина                         КАК ПодготовленоКПередаче,
				|	ЕСТЬNULL(Настройки.МаксимальноеКоличествоВПорцииОбмена, 0) КАК КоличествоДокументов
				|ИЗ
				|	РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК Очередь
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.бг_НастройкиПоОперациямЕГАИС КАК Настройки
				|		ПО Очередь.Сообщение.Операция = Настройки.Операция
				|ГДЕ
				|	Очередь.ОрганизацияЕГАИС В(&ОрганизацииЕГАИС)
				|	И ЕСТЬNULL(Настройки.Приоритет, 99) > 1
				|
				|УПОРЯДОЧИТЬ ПО
				|	ЕСТЬNULL(Настройки.Приоритет, 99)
				|
				|ИТОГИ
				|	МАКСИМУМ(КоличествоДокументов)
				|ПО
				|	Операция";

				Результат = Запрос.Выполнить();
				ВыборкаПоОперациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоОперациям.Следующий()
					И ОсталосьДоПорции > 0 Цикл
					
					ВыборкаДетальная = ВыборкаПоОперациям.Выбрать();
					ПорцияПоОперации = ВыборкаПоОперациям.КоличествоДокументов;
					Если ПорцияПоОперации = 0 Тогда
						ПорцияПоОперации = ВыборкаДетальная.Количество();
					КонецЕсли;
					
					Пока ВыборкаДетальная.Следующий() И ПорцияПоОперации > 0
						И ОсталосьДоПорции > 0 Цикл
						
						НедоступныеОперацииОрганизации = НедоступныеОперацииДляОтправки.Получить(ВыборкаДетальная.ОрганизацияЕГАИС);
						Если Не НедоступныеОперацииОрганизации = Неопределено
							И Не НедоступныеОперацииОрганизации.Найти(ВыборкаДетальная.Операция) = Неопределено Тогда
							Прервать;
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ТаблицаОчередь.Добавить(), ВыборкаДетальная);
						ПорцияПоОперации = ПорцияПоОперации - 1;
						ОсталосьДоПорции = ОсталосьДоПорции - 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			ТаблицаОчередь = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
#КонецВставки

	Иначе

		ТаблицаОчередь = СообщенияXMLКПередаче;

#Вставка
		Если ИспользуетсяОптимизированныйМеханизм = Истина Тогда
			
			Операции = РегистрыСведений.бг_НастройкиПоОперациямЕГАИС.ОперацииСОнлайнВыгрузкой();
			ИндексСтроки = ТаблицаОчередь.ВГраница();
			Пока ИндексСтроки >= 0 Цикл
				
				Сообщение = ТаблицаОчередь[ИндексСтроки];
				
				Если Операции.Найти(Сообщение.Операция) = Неопределено Тогда
					
					СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
					СтрокаРезультата.ОрганизацияЕГАИС = Сообщение.ОрганизацияЕГАИС;
					СтрокаРезультата.Операция         = Сообщение.Операция;
					СтрокаРезультата.ФорматОбмена     = Сообщение.ФорматОбмена;

					СтрокаРезультата.ТекстОшибки           = Сообщение.ТекстОшибки;
					СтрокаРезультата.ПодготовленоКПередаче = Сообщение.ПодготовленоКПередаче;
					СтрокаРезультата.ПереданоВУТМ          = Ложь;
					СтрокаРезультата.Принято               = Ложь;

					СтрокаРезультата.ИсходящееСообщение = Сообщение.ИсходящееСообщение;
					СтрокаРезультата.ВходящееСообщение  = Неопределено;

					СтрокаРезультата.Объект             = Сообщение.Объект;
					СтрокаРезультата.ДокументОснование  = Сообщение.ДокументОснование;
					СтрокаРезультата.НовыйСтатус        = Сообщение.НовыйСтатус;

					ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
					
					ТаблицаОчередь.Удалить(ИндексСтроки);
					
				КонецЕсли;
				
				ИндексСтроки = ИндексСтроки - 1;
				
			КонецЦикла;
			
		КонецЕсли;
#КонецВставки
	КонецЕсли;

	Для Каждого Выборка Из ТаблицаОчередь Цикл

#Вставка
		Если ИспользуетсяОптимизированныйМеханизм = Истина Тогда
			
			ТекущаяВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ИсходящееСообщение, "ВерсияДанных");
			Если Не Выборка.ИсходящееСообщениеВерсияДанных = ТекущаяВерсияДанных Тогда
			
				ЗаписатьОшибкуВЖурналРегистрации(
					НСтр("ru = 'Сообщение изменено в процессе отправки данных.'"));
				Продолжить;
			
			КонецЕсли;
		
			Если Не бг_ОбновитьЗависимыеДанныеОтДатыОтправки(Выборка.Операция, Выборка.ИсходящееСообщение) Тогда
				
				СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
				СтрокаРезультата.ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
				СтрокаРезультата.Операция         = Выборка.Операция;
				СтрокаРезультата.ФорматОбмена     = Выборка.ФорматОбмена;
	
				СтрокаРезультата.ТекстОшибки     = НСтр("ru = 'Не удалось выгрузить документ. Дата выгрузки в УТМ не совпадает с датой отгрузки.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
				СтрокаРезультата.ПодготовленоКПередаче = Ложь;
				СтрокаРезультата.ПереданоВУТМ          = Ложь;
				СтрокаРезультата.Принято               = Ложь;
	
				СтрокаРезультата.ИсходящееСообщение = Выборка.ИсходящееСообщение;
				СтрокаРезультата.ВходящееСообщение  = Неопределено;
	
				СтрокаРезультата.Объект             = Выборка.Объект;
				СтрокаРезультата.ДокументОснование  = Выборка.ДокументОснование;
				СтрокаРезультата.НовыйСтатус        = Выборка.НовыйСтатус;
	
				ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
#КонецВставки
		НастройкаОбменаНаСервере = НастройкиОбменаЕГАИС.ОбменНаСервере.Получить(Выборка.ОрганизацияЕГАИС);
		НастройкаОбменаНаКлиенте = НастройкиОбменаЕГАИС.ОбменНаКлиенте.Получить(Выборка.ОрганизацияЕГАИС);
		Если Выборка.ПодготовленоКПередаче И НастройкаОбменаНаСервере <> Неопределено Тогда

			АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(Выборка.Операция, Выборка.ФорматОбмена);

			РезультатыПередачиСообщений = ПередатьСообщениеВУТМ(Выборка.ИсходящееСообщение, АдресЗапроса, НастройкаОбменаНаСервере);

			РезультатыПередачиСообщенийПоОрганизациямЕГАИС = Новый Соответствие;
			РезультатыПередачиСообщенийПоОрганизациямЕГАИС.Вставить(Выборка.ОрганизацияЕГАИС, РезультатыПередачиСообщений);

			Изменения = ПриЗавершенииПередачиДанных(РезультатыПередачиСообщенийПоОрганизациямЕГАИС);
			Для Каждого ЭлементДанных Из Изменения Цикл
				ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
			КонецЦикла;

		ИначеЕсли Выборка.ПодготовленоКПередаче И НастройкаОбменаНаКлиенте <> Неопределено Тогда

			АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(Выборка.Операция, Выборка.ФорматОбмена);

			СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML(Истина);
			СообщениеXML.Ссылка            = Выборка.ИсходящееСообщение;
			СообщениеXML.ОрганизацияЕГАИС  = Выборка.ОрганизацияЕГАИС;
			СообщениеXML.ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(Выборка.ИсходящееСообщение);
			СообщениеXML.АдресЗапроса      = АдресЗапроса;

			ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(СообщениеXML);

		ИначеЕсли СообщенияXMLКПередаче <> Неопределено Тогда

			Если Выборка.ПодготовленоКПередаче И Немедленно Тогда
				ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение в ЕГАИС не может быть передано.
				|Для организации %1 не настроено подключение к УТМ.';
				|en = 'Сообщение в ЕГАИС не может быть передано.
				|Для организации %1 не настроено подключение к УТМ.'"),
				Выборка.ОрганизацияЕГАИС);
			Иначе
				ТекстОшибки = Выборка.ТекстОшибки;
			КонецЕсли;

			СтрокаРезультата = ИнтеграцияЕГАИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
			СтрокаРезультата.Операция         = Выборка.Операция;
			СтрокаРезультата.ФорматОбмена     = Выборка.ФорматОбмена;

			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Выборка.ПодготовленоКПередаче;
			СтрокаРезультата.ПереданоВУТМ          = Ложь;
			СтрокаРезультата.Принято               = Ложь;

			СтрокаРезультата.ИсходящееСообщение = Выборка.ИсходящееСообщение;
			СтрокаРезультата.ВходящееСообщение  = Неопределено;

			СтрокаРезультата.Объект             = Выборка.Объект;
			СтрокаРезультата.ДокументОснование  = Выборка.ДокументОснование;
			СтрокаРезультата.НовыйСтатус        = Выборка.НовыйСтатус;

			ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);

		КонецЕсли;

	КонецЦикла;

	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция бг_ОбновитьЗависимыеДанныеОтДатыОтправки(Операция, Сообщение)
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	УспешноОбновлено = Истина;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТТНИсходящаяЕГАИС.Ссылка КАК ТТНИсходящая,
			|	РеализацияТоваровУслуг.Ссылка КАК Реализация
			|ИЗ
			|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
			|		ПО ЕГАИСПрисоединенныеФайлы.Документ = ТТНИсходящаяЕГАИС.Ссылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|		ПО (ТТНИсходящаяЕГАИС.ДокументОснование = РеализацияТоваровУслуг.Ссылка)
			|ГДЕ
			|	ЕГАИСПрисоединенныеФайлы.Ссылка = &Сообщение
			|	И НЕ НАЧАЛОПЕРИОДА(ТТНИсходящаяЕГАИС.ДатаОтгрузки, ДЕНЬ) = &ТекущаяДата
			|	И НАЧАЛОПЕРИОДА(ТТНИсходящаяЕГАИС.ДатаОтгрузки, ДЕНЬ) <= &ТекущаяДата";
		
		Запрос.УстановитьПараметр("Сообщение", Сообщение);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ТТНОбъект = Выборка.ТТНИсходящая.ПолучитьОбъект();
				ТТНОбъект.Дата = ТекущаяДата;
				ТТНОбъект.ДатаТТН = ТекущаяДата;
				ТТНОбъект.ДатаОтгрузки = ТекущаяДата;
				
				ТТНОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				РеализацияОбъект = Выборка.Реализация.ПолучитьОбъект();
				РеализацияОбъект.Дата = ТекущаяДата;
				РеализацияОбъект.ДополнительныеСвойства.Вставить("АктуализироватьДатуВыставленияСФ", Истина);
				РеализацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				НовоеСообщение = Документы.ТТНИсходящаяЕГАИС.СообщениеКПередачеXML(ТТНОбъект.Ссылка,
					Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
				ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
				ХешированиеДанныхОбъект.Добавить(НовоеСообщение[0].ТекстСообщенияXML);
				ХешСуммаBase64 = Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
				
				СообщениеОбъект = Сообщение.ПолучитьОбъект();
				СообщениеОбъект.ХешСумма = ХешСуммаBase64;
				СообщениеОбъект.Записать();
				
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(НовоеСообщение[0].ТекстСообщенияXML);
				ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8, "");
				ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
				АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				
				ИнформацияОФайле = Новый Структура("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
				РаботаСФайлами.ОбновитьФайл(Сообщение, ИнформацияОФайле);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ЗаписатьОшибкуВЖурналРегистрации(ОписаниеОшибки());
				УспешноОбновлено = Ложь;
				
			КонецПопытки;
		
		КонецЦикла;		
		
	КонецЕсли;
	
	Возврат УспешноОбновлено;
	
КонецФункции

Процедура бг_ЗаполнитьДокументыКЗагрузкеИзЗагруженныхПакетов(ДокументыКЗагрузке, ОрганизацияЕГАИС)
	
	ИдентификаторФСРАР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "Код");
	Если Не ЗначениеЗаполнено(ИдентификаторФСРАР) Тогда
		Возврат;
	КонецЕсли;
	
	бг_УдалитьНеАктуальныеЗаписиУТМ(ИдентификаторФСРАР);
	РегистрыСведений.бг_ВходящиеДокументыУТМ.ОбработатьДублирующиесяЗаписи(ИдентификаторФСРАР, ОрганизацияЕГАИС);
	
	ДокументыПоИдентификаторуФСРАР = РегистрыСведений.бг_ВходящиеДокументыУТМ.ПоИдентификаторуФСРАР(
		ИдентификаторФСРАР);
	
	ДокументыКЗагрузкеПоОрганизацииЕГАИС = Новый Массив;
	Для Каждого Документ Из ДокументыПоИдентификаторуФСРАР Цикл 
		ДокументыКЗагрузкеПоОрганизацииЕГАИС.Добавить(
			ИнтеграцияЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента(
				ОрганизацияЕГАИС, 
				Документ.Идентификатор,
				Документ.АдресДокумента,
				Документ.ТекстОбъектаXDTO.Получить()));
	КонецЦикла;
	
	Если ДокументыКЗагрузкеПоОрганизацииЕГАИС.Количество() > 0 Тогда
		ДокументыКЗагрузке.Вставить(
			ОрганизацияЕГАИС , 
			ДокументыКЗагрузкеПоОрганизацииЕГАИС); 
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_УстановитьСтатусОбработкиДокумента(ДанныеДокументов, ТекстОшибки = "")

	НовоеСостояние = Новый Структура;
	НовоеСостояние.Вставить("Статус", Перечисления.бг_СтатусыВходящихДокументовУТМ.Обработан);
	НовоеСостояние.Вставить("ОбработанВERP", Ложь);
	НовоеСостояние.Вставить("ТекстОшибки", ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ТекстОшибкиНижнийРегистр = НРег(ТекстОшибки);
		НовоеСостояние.Статус = Перечисления.бг_СтатусыВходящихДокументовУТМ.ПустаяСсылка();
		
		ДокументНайден = СтрНайти(ТекстОшибкиНижнийРегистр,
								НСтр("ru = 'не найден документ';
									|en = 'не найден документ'")) = 0;
		ДокументНайден = ДокументНайден И СтрНайти(ТекстОшибкиНижнийРегистр,
								НСтр("ru = 'не найден исходящий запрос с идентификатором';
									|en = 'не найден исходящий запрос с идентификатором'")) = 0;
		
		Если Не ДокументНайден Тогда
			НовоеСостояние.Статус = Перечисления.бг_СтатусыВходящихДокументовУТМ.Ошибка;
		КонецЕсли;
		
		ЭтоНеизвестныйТип = СтрНайти(ТекстОшибкиНижнийРегистр,
								НСтр("ru = 'неизвестный тип загружаемого документа';
									|en = 'неизвестный тип загружаемого документа'")) > 0;
		НовоеСостояние.ОбработанВERP = ЭтоНеизвестныйТип;
	
	КонецЕсли;

	бг_ЗаписатьНовоеСостояниеОбработкиДокументов(ДанныеДокументов, НовоеСостояние);
	
КонецПроцедуры

Процедура бг_ЗаписатьНовоеСостояниеОбработкиДокументов(ДанныеДокументов, НовоеСостояние)
	
	ВходящиеДокументы = ВходящиеДокументыКИзменениюСтатуса(ДанныеДокументов);
	
	НаборЗаписей = РегистрыСведений.бг_ВходящиеДокументыУТМ.СоздатьНаборЗаписей();
	
	Для Каждого ДанныеДокумента Из ВходящиеДокументы Цикл
		
		НаборЗаписей.Отбор.ИдентификаторФСРАР.Установить(ДанныеДокумента.ИдентификаторФСРАР);
		НаборЗаписей.Отбор.ТранспортныйМодуль.Установить(ДанныеДокумента.ТранспортныйМодуль);
		НаборЗаписей.Отбор.АдресДокумента.Установить(ДанныеДокумента.АдресДокумента);
		НаборЗаписей.Отбор.Грузоотправитель.Установить(ДанныеДокумента.Грузоотправитель);
		НаборЗаписей.Отбор.ДокументЕГАИС.Установить(ДанныеДокумента.ДокументЕГАИС);
		НаборЗаписей.Отбор.Идентификатор.Установить(ДанныеДокумента.Идентификатор);
		НаборЗаписей.Отбор.Контрагент.Установить(ДанныеДокумента.Контрагент);

		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеДокумента);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, НовоеСостояние,, "Статус");
		Если ЗначениеЗаполнено(НовоеСостояние.Статус) Тогда
			НоваяЗапись.Статус = НовоеСостояние.Статус;
		КонецЕсли;
		
		НоваяЗапись.ПопытокЗагрузить = НоваяЗапись.ПопытокЗагрузить + 1;

		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВходящиеДокументыКИзменениюСтатуса(ДанныеДокументов)
	
	ТаблицаОтбораДокументов = Новый ТаблицаЗначений;
	ТаблицаОтбораДокументов.Колонки.Добавить("ОрганизацияЕГАИС",
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаОтбораДокументов.Колонки.Добавить("АдресЗапроса",
		Метаданные.РегистрыСведений.бг_ВходящиеДокументыУТМ.Измерения.АдресДокумента.Тип);
		
	Для Каждого ДанныеДокумента Из ДанныеДокументов Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОтбораДокументов.Добавить(), ДанныеДокумента);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОтбора.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	ТаблицаОтбора.АдресЗапроса КАК АдресДокумента
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбораДокументов КАК ТаблицаОтбора
	|;	
	|ВЫБРАТЬ
	|	бг_ВходящиеДокументыУТМ.*
	|ИЗ
	|	ТаблицаОтбора КАК ТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК РеквизитыОрганизацииЕГАИС
	|		ПО ТаблицаОтбора.ОрганизацияЕГАИС = РеквизитыОрганизацииЕГАИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ВходящиеДокументыУТМ КАК бг_ВходящиеДокументыУТМ
	|		ПО РеквизитыОрганизацииЕГАИС.Код = бг_ВходящиеДокументыУТМ.ИдентификаторФСРАР
	|			И ТаблицаОтбора.АдресДокумента = бг_ВходящиеДокументыУТМ.АдресДокумента
	|ГДЕ
	|	НЕ бг_ВходящиеДокументыУТМ.ОбработанВERP
	|	И бг_ВходящиеДокументыУТМ.Статус В(&СтатусыКОбработке)";
	
	Запрос.УстановитьПараметр("СтатусыКОбработке",  Перечисления.бг_СтатусыВходящихДокументовУТМ.КОбработке());
	Запрос.УстановитьПараметр("ТаблицаОтбораДокументов", ТаблицаОтбораДокументов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция бг_СлужебныеДанныеДляОбновленияСтатусовВходящихДокументов(ОрганизацияЕГАИС, АдресЗапроса)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	ВозвращаемоеЗначение.Вставить("АдресЗапроса",     АдресЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура бг_ПроверитьДокументыНаДоступностьКДальнейшемуДействию(ДокументыКПроверке, ДальнейшееДействие, Сообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ КАК Документ,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3,
	|	ВЫБОР
	|		КОГДА НЕ РеквизитыТТНВходящей.Ссылка ЕСТЬ NULL
	|			И (СтатусыДокументовЕГАИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение)
	|				ИЛИ СтатусыДокументовЕГАИС.ДальнейшееДействие2 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение)
	|				ИЛИ СтатусыДокументовЕГАИС.ДальнейшееДействие3 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение))
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА РеквизитыТТНВходящей.ЕстьРасхождения
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучениеАктРасхождений)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучениеАктПодтверждения)
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДальнейшееДействие4
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК РеквизитыТТНВходящей
	|		ПО СтатусыДокументовЕГАИС.Документ = РеквизитыТТНВходящей.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ В (&ДокументыКПроверке)";
	
	Запрос.УстановитьПараметр("ДокументыКПроверке", ДокументыКПроверке);
	
	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если бг_ДальнейшееДействиеДоступно(Выборка, ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыКПроверке.Удалить(ДокументыКПроверке.Найти(Выборка.Документ));
		
		СообщениеXML = ИнтеграцияЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = Выборка.Документ;
		СообщениеXML.Описание = "";
		
		ИнтеграцияЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML,
			НСтр("ru = 'Статус документа не соответствует выбранному действию.'"));
		
		Сообщения.Добавить(СообщениеXML);
		
	КонецЦикла;
	
КонецПроцедуры

Функция бг_ДальнейшееДействиеДоступно(Состояние, Действие)
	
	Возврат Состояние.ДальнейшееДействие1 = Действие
		Или Состояние.ДальнейшееДействие2 = Действие
		Или Состояние.ДальнейшееДействие3 = Действие
		Или Состояние.ДальнейшееДействие4 = Действие;
	
КонецФункции

#КонецОбласти