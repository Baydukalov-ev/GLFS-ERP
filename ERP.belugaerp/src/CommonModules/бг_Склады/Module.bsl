
#Область ПрограммныйИнтерфейс

#Область ПриходныйОрдерНаТовары

// Возвращает пустую структуру с полями для заполнения приходного ордера на товары.
//
// Возвращаемое значение:
//	Структура
//
Функция НовыйДанныеЗаполненияПриходногоОрдера() Экспорт
	
	// Шапка
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Распоряжение");
	ДанныеЗаполненияШапки.Вставить("Дата");
	ДанныеЗаполненияШапки.Вставить("ДатаПоступления");
	ДанныеЗаполненияШапки.Вставить("Отправитель");
	ДанныеЗаполненияШапки.Вставить("Статус");
	ДанныеЗаполненияШапки.Вставить("Склад");
	ДанныеЗаполненияШапки.Вставить("ХозяйственнаяОперация");
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента");
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента");
	ДанныеЗаполненияШапки.Вставить("Комментарий");
	
	ДанныеЗаполненияТоваров = Новый ТаблицаЗначений;
	
	// Товары
	МетаданныеТоваров = Метаданные.Документы.ПриходныйОрдерНаТовары.ТабличныеЧасти.Товары.Реквизиты;
	
	ДанныеЗаполненияТоваров.Колонки.Добавить("Номенклатура", МетаданныеТоваров.Номенклатура.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("Серия", МетаданныеТоваров.Серия.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("Количество", МетаданныеТоваров.Количество.Тип);
	
	// Результат
	ДанныеЗаполненияПриходногоОрдера = Новый Структура;
	ДанныеЗаполненияПриходногоОрдера.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеЗаполненияПриходногоОрдера.Вставить("Товары", ДанныеЗаполненияТоваров);
	
	Возврат ДанныеЗаполненияПриходногоОрдера;
	
КонецФункции

// Возвращает признак необходимости перезаполнения и перепроведения приходного ордера на товары.
//
// Параметры:
//	ДанныеПриходногоОрдера - Структура - Базовые данные документа, поля: Документ, Проведен, ПометкаУдаления.
//	ДанныеЗаполненияПриходногоОрдера - Структура - см. НовыйДанныеЗаполненияПриходногоОрдера().
//
// Возвращаемое значение:
//	Булево
//
Функция НужноАктуализироватьПриходныйОрдер(ДанныеПриходногоОрдера, ДанныеЗаполненияПриходногоОрдера) Экспорт
	
	Если ДанныеПриходногоОрдера = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеПриходногоОрдера.ПометкаУдаления Или Не ДанныеПриходногоОрдера.Проведен Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыПриходногоОрдера = РеквизитыПриходногоОрдера(ДанныеПриходногоОрдера.Документ);
	
	Если РеквизитыПриходногоОрдера.Шапка.Статус <> ДанныеЗаполненияПриходногоОрдера.Шапка.Статус Тогда
		Возврат Истина;
	КонецЕсли;
	
	РезультатСравненияТоваров = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ДанныеЗаполненияПриходногоОрдера.Товары,
		РеквизитыПриходногоОрдера.Товары,
		Истина);
		
	Возврат Не РезультатСравненияТоваров.ТаблицыСовпадают;
	
КонецФункции

// Перезаполненяет и проводит приходный ордер на товары по переданным данным заполнения.
//
// Параметры:
//	ДанныеПриходногоОрдера - Структура - Базовые данные документа, поля: Документ, Проведен, ПометкаУдаления.
//	ДанныеЗаполненияПриходногоОрдера - Структура - см. НовыйДанныеЗаполненияПриходногоОрдера().
//
Процедура АктуализироватьПриходныйОрдер(ДанныеЗаполненияПриходногоОрдера, ДанныеПриходногоОрдера = Неопределено) Экспорт
	
	Если ДанныеПриходногоОрдера = Неопределено Тогда
		ПриходныйОрдерНаТоварыОбъект = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		ДанныеПриходногоОрдера = бг_РаботаСДокументами.НовыйДанныеПодчиненногоДокумента("ПриходныйОрдерНаТовары");
	Иначе
		ПриходныйОрдерНаТоварыОбъект = ДанныеПриходногоОрдера.Документ.ПолучитьОбъект();
		ПриходныйОрдерНаТоварыОбъект.Товары.Очистить();
	КонецЕсли;
	
	Если ПриходныйОрдерНаТоварыОбъект.Проведен Тогда
		ПриходныйОрдерНаТоварыОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	ЗаполнитьШапкуПриходногоОрдера(ПриходныйОрдерНаТоварыОбъект, ДанныеЗаполненияПриходногоОрдера.Шапка);
	
	ПриходныйОрдерНаТоварыОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьЗначенияСвойств(ДанныеПриходногоОрдера, ПриходныйОрдерНаТоварыОбъект);
	ДанныеПриходногоОрдера.Документ = ПриходныйОрдерНаТоварыОбъект.Ссылка;
	
КонецПроцедуры

#Область ФормыДокументов

Процедура ДобавитьПолеПриходныйОрдерНаТовары(Форма) Экспорт
	
	ИмяПоля = "бг_ДекорацияПриходныйОрдерНаТовары";
	
	Если Форма.Элементы.Найти(ИмяПоля) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДекорацияПриходныйОрдерНаТовары = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьДекорациюНаФорму(
		Форма,
		ИмяПоля,,
		НСтр("ru = 'n/a'"));
	ДекорацияПриходныйОрдерНаТовары.Ширина = 100;

КонецПроцедуры

Процедура ОбновитьОтображениеДекорацииПриходногоОрдераНаТовары(Форма, МетаданныеДокумента) Экспорт
	
	ДекорацияПриходныйОрдерНаТовары = Форма.Элементы.бг_ДекорацияПриходныйОрдерНаТовары;
	
	ДекорацияПриходныйОрдерНаТовары.Видимость = ОтображатьДекорациюСозданияПриходногоОрдераНаТовары(
		Форма,
		МетаданныеДокумента);
		
	ДекорацияПриходныйОрдерНаТовары.Заголовок = ТекстЗаголовкаДекорацииПриходногоОрдерНаТовары(Форма);
	
КонецПроцедуры

#КонецОбласти // Конец ФормыДокументов

#КонецОбласти // ПриходныйОрдерНаТовары

#Область РасходныйОрдерНаТовары

// Возвращает пустую структуру с полями для заполнения расходного ордера на товары.
//
// Возвращаемое значение:
//	Структура
//
Функция НовыйДанныеЗаполненияРасходногоОрдера() Экспорт
	
	// Шапка
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Дата");
	ДанныеЗаполненияШапки.Вставить("ДатаОтгрузки");
	ДанныеЗаполненияШапки.Вставить("Распоряжение");
	ДанныеЗаполненияШапки.Вставить("Статус");
	ДанныеЗаполненияШапки.Вставить("Склад");
	ДанныеЗаполненияШапки.Вставить("СкладскаяОперация");
	ДанныеЗаполненияШапки.Вставить("Получатель");
	ДанныеЗаполненияШапки.Вставить("Комментарий");
	
	ДанныеЗаполненияТоваров = Новый ТаблицаЗначений;
	
	// Товары
	МетаданныеТоваров = Метаданные.Документы.РасходныйОрдерНаТовары.ТабличныеЧасти.ТоварыПоРаспоряжениям.Реквизиты;
	
	ДанныеЗаполненияТоваров.Колонки.Добавить("Номенклатура", МетаданныеТоваров.Номенклатура.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("Серия", МетаданныеТоваров.Серия.Тип);
	ДанныеЗаполненияТоваров.Колонки.Добавить("Количество", МетаданныеТоваров.Количество.Тип);
	
	// Результат
	ДанныеЗаполненияРасходногоОрдера = Новый Структура;
	ДанныеЗаполненияРасходногоОрдера.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеЗаполненияРасходногоОрдера.Вставить("Товары", ДанныеЗаполненияТоваров);
	
	Возврат ДанныеЗаполненияРасходногоОрдера;
	
КонецФункции

// Возвращает признак необходимости перезаполнения и перепроведения расходного ордера на товары.
//
// Параметры:
//	ДанныеРасходногоОрдера - Структура - Базовые данные документа, поля: Документ, Проведен, ПометкаУдаления.
//	ДанныеЗаполненияРасходногоОрдера - Структура - см. НовыйДанныеЗаполненияРасходногоОрдера().
//
// Возвращаемое значение:
//	Булево
//
Функция НужноАктуализироватьРасходныйОрдер(ДанныеРасходногоОрдера, ДанныеЗаполненияРасходногоОрдера) Экспорт
	
	Если ДанныеРасходногоОрдера = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеРасходногоОрдера.ПометкаУдаления Или Не ДанныеРасходногоОрдера.Проведен Тогда
		Возврат Истина;
	КонецЕсли;
	
	РеквизитыРасходногоОрдера = РеквизитыРасходногоОрдера(ДанныеРасходногоОрдера.Документ);
	
	Если РеквизитыРасходногоОрдера.Шапка.Статус <> ДанныеЗаполненияРасходногоОрдера.Шапка.Статус Тогда
		Возврат Истина;
	КонецЕсли;
	
	РезультатСравненияТоваров = бг_МаркируемаяПродукция.РезультатСравненияТаблицТоваров(
		ДанныеЗаполненияРасходногоОрдера.Товары,
		РеквизитыРасходногоОрдера.Товары,
		Истина);
		
	Возврат Не РезультатСравненияТоваров.ТаблицыСовпадают;
	
КонецФункции

// Перезаполненяет и проводит расходный ордер на товары по переданным данным заполнения.
// Выбран подход "ручного" заполнения, а не автоматического на основании распоряжения, потому что типовое заполнение
// по распоряжению Заполнить(ДанныеЗаполнения) отсутствует, а СкладыСервер.ПереоформитьРасходныеОрдера(Параметры)
// некорректно отрабатывает при повторных перезаполнениях: документ нужно сперва распроводить и очищать.
//
// Параметры:
//	ДанныеРасходногоОрдера - Структура - Базовые данные документа, поля: Документ, Проведен, ПометкаУдаления.
//	ДанныеЗаполненияРасходногоОрдера - Структура - см. НовыйДанныеЗаполненияРасходногоОрдера().
//
Процедура АктуализироватьРасходныйОрдер(ДанныеЗаполненияРасходногоОрдера, ДанныеРасходногоОрдера = Неопределено) Экспорт
	
	Если ДанныеРасходногоОрдера = Неопределено Тогда
		РасходныйОрдерНаТоварыОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
		ДанныеРасходногоОрдера = бг_РаботаСДокументами.НовыйДанныеПодчиненногоДокумента("РасходныйОрдерНаТовары");
	Иначе
		РасходныйОрдерНаТоварыОбъект = ДанныеРасходногоОрдера.Документ.ПолучитьОбъект();
		РасходныйОрдерНаТоварыОбъект.ТоварыПоРаспоряжениям.Очистить();
		РасходныйОрдерНаТоварыОбъект.ОтгружаемыеТовары.Очистить();
	КонецЕсли;
	
	ЗаполнитьШапкуРасходногоОрдера(РасходныйОрдерНаТоварыОбъект, ДанныеЗаполненияРасходногоОрдера.Шапка);
	ЗаполнитьТоварыРасходногоОрдера(РасходныйОрдерНаТоварыОбъект, ДанныеЗаполненияРасходногоОрдера);
	
	РасходныйОрдерНаТоварыОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьЗначенияСвойств(ДанныеРасходногоОрдера, РасходныйОрдерНаТоварыОбъект);
	ДанныеРасходногоОрдера.Документ = РасходныйОрдерНаТоварыОбъект.Ссылка;
	
КонецПроцедуры

#КонецОбласти // РасходныйОрдерНаТовары

#Область ФормыДокументов

Процедура ДобавитьПолеРасходныйОрдерНаТовары(Форма) Экспорт
	
	ИмяПоля = "бг_ДекорацияРасходныйОрдерНаТовары";
	
	Если Форма.Элементы.Найти(ИмяПоля) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДекорацияРасходныйОрдерНаТовары = бг_МодификацияИнтерфейсовОбщегоНазначенияСервер.ДобавитьДекорациюНаФорму(
		Форма,
		ИмяПоля,,
		НСтр("ru = 'n/a'"));
	ДекорацияРасходныйОрдерНаТовары.Ширина = 100;

КонецПроцедуры

Процедура ОбновитьОтображениеДекорацииРасходногоОрдераНаТовары(Форма, МетаданныеДокумента) Экспорт
	
	ДекорацияРасходныйОрдерНаТовары = Форма.Элементы.бг_ДекорацияРасходныйОрдерНаТовары;
	
	ДекорацияРасходныйОрдерНаТовары.Видимость = ОтображатьДекорациюСозданияРасходногоОрдераНаТовары(
		Форма,
		МетаданныеДокумента);
		
	ДекорацияРасходныйОрдерНаТовары.Заголовок = ТекстЗаголовкаДекорацииРасходныйОрдерНаТовары(Форма);
	
КонецПроцедуры

#КонецОбласти // Конец ФормыДокументов

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриходныйОрдерНаТовары

Функция РеквизитыПриходногоОрдера(ПриходныйОрдерНаТовары)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &ПриходныйОрдерНаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Серия КАК Серия,
	|	СУММА(ПриходныйОрдерНаТоварыТовары.Количество) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка = &ПриходныйОрдерНаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Серия";
	
	Запрос.УстановитьПараметр("ПриходныйОрдерНаТовары", ПриходныйОрдерНаТовары);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыПриходногоОрдера = Новый Структура;
	РеквизитыПриходногоОрдера.Вставить("Шапка", РезультатыЗапроса[0].Выгрузить()[0]);
	РеквизитыПриходногоОрдера.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	Возврат РеквизитыПриходногоОрдера;
	
КонецФункции

Процедура ЗаполнитьШапкуПриходногоОрдера(ПриходныйОрдерНаТоварыОбъект, ДанныеЗаполненияШапка)
	
	ПриходныйОрдерНаТоварыОбъект.ПометкаУдаления = Ложь;
	
	ПриходныйОрдерНаТоварыОбъект.Заполнить(ДанныеЗаполненияШапка);
	
	ПриходныйОрдерНаТоварыОбъект.Дата = ДанныеЗаполненияШапка.Дата;
	ПриходныйОрдерНаТоварыОбъект.Статус = ДанныеЗаполненияШапка.Статус;
	ПриходныйОрдерНаТоварыОбъект.Комментарий = ДанныеЗаполненияШапка.Комментарий;
	
КонецПроцедуры

#Область ФормыДокументов

Функция ОтображатьДекорациюСозданияПриходногоОрдераНаТовары(Форма, МетаданныеДокумента)
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Или Не Форма.Объект.Проведен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьПравоСозданияПриходногоОрдера = ПравоДоступа("Изменение", МетаданныеДокумента)
		Или Пользователи.ЭтоПолноправныйПользователь();
		
	ЭтоПоступлениеНаОрдерныйСклад = ЭтоПоступлениеНаОрдерныйСклад(Форма);
	
	Возврат ЕстьПравоСозданияПриходногоОрдера И ЭтоПоступлениеНаОрдерныйСклад;
	
КонецФункции

Функция ЭтоПоступлениеНаОрдерныйСклад(Форма)
	
	ЭтоПоступлениеНаОрдерныйСклад = Ложь;

	Склад = Неопределено;
	
	Если Не Форма.Объект.Свойство("Склад", Склад) Тогда
		Форма.Объект.Свойство("СкладПолучатель", Склад);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ЭтоПоступлениеНаОрдерныйСклад = СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(
			Склад,
			?(ЗначениеЗаполнено(Форма.Объект.Дата), Форма.Объект.Дата, ТекущаяДатаСеанса()));
			
	КонецЕсли;
	
	Возврат ЭтоПоступлениеНаОрдерныйСклад;
	
КонецФункции

Функция ТекстЗаголовкаДекорацииПриходногоОрдерНаТовары(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлементыФорматированнойСтроки = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка = &Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПрочееОприходованиеТоваров.Ссылка
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходованиеТоваров
	|ГДЕ
	|	ПрочееОприходованиеТоваров.Ссылка = &Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаТоваров.Ссылка
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.Ссылка = &Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТовары.Номер КАК Номер,
	|	ПриходныйОрдерНаТовары.Дата КАК Дата,
	|	ПриходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распоряжения КАК Распоряжения
	|		ПО ПриходныйОрдерНаТовары.Распоряжение = Распоряжения.Ссылка
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Проведен");
	
	Запрос.УстановитьПараметр("Распоряжение", Форма.Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаголовокДекорации = СтрШаблон(
			НСтр("ru = 'Приходный ордер на товары %1 от %2 (%3)'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер),
			Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"),
			Выборка.Статус);
		
		ЭлементыФорматированнойСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				ЗаголовокДекорации,,
				ЦветаСтиля.ГиперссылкаЦвет,,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
				
	Иначе
				
		ЗаголовокДекорации = НСтр("ru = 'Оформить приходный ордер на товары'");
		
		ЭлементыФорматированнойСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				ЗаголовокДекорации,,
				ЦветаСтиля.ГиперссылкаЦвет,,
				"бг_ОформитьПриходныйОрдерНаТовары"));
				
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыФорматированнойСтроки);
	
КонецФункции

#КонецОбласти // Конец ФормыДокументов

#КонецОбласти // ПриходныйОрдерНаТовары

#Область РасходныйОрдерНаТовары

Функция РеквизитыРасходногоОрдера(РасходныйОрдерНаТовары)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Склад КАК Склад,
	|	РасходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка = &РасходныйОрдерНаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура КАК Номенклатура,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия КАК Серия,
	|	СУММА(РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Количество) КАК Количество
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка = &РасходныйОрдерНаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Серия";
	
	Запрос.УстановитьПараметр("РасходныйОрдерНаТовары", РасходныйОрдерНаТовары);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыРасходногоОрдера = Новый Структура;
	РеквизитыРасходногоОрдера.Вставить("Шапка", РезультатыЗапроса[0].Выгрузить()[0]);
	РеквизитыРасходногоОрдера.Вставить("Товары", РезультатыЗапроса[1].Выгрузить());
	
	Возврат РеквизитыРасходногоОрдера;
	
КонецФункции

Процедура ЗаполнитьШапкуРасходногоОрдера(РасходныйОрдерНаТоварыОбъект, ДанныеЗаполненияШапка)
	
	РасходныйОрдерНаТоварыОбъект.ПометкаУдаления = Ложь;
	
	ЗаполнитьЗначенияСвойств(РасходныйОрдерНаТоварыОбъект, ДанныеЗаполненияШапка);
	
	// Типовое заполнение выдает исключение без заполненной шапки документа, но сбивает заполнение некоторых реквизитов.
	РасходныйОрдерНаТоварыОбъект.Заполнить(Неопределено);
	
	ЗаполнитьЗначенияСвойств(РасходныйОрдерНаТоварыОбъект, ДанныеЗаполненияШапка);
	
КонецПроцедуры

Процедура ЗаполнитьТоварыРасходногоОрдера(РасходныйОрдерНаТоварыОбъект, ДанныеЗаполненияРасходногоОрдера)
	
	Для каждого СтрокаТовары Из ДанныеЗаполненияРасходногоОрдера.Товары Цикл
		
		// ТоварыПоРаспоряжениям
		НоваяСтрокаТоварыПоРаспоряжениям = РасходныйОрдерНаТоварыОбъект.ТоварыПоРаспоряжениям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыПоРаспоряжениям, СтрокаТовары);
		НоваяСтрокаТоварыПоРаспоряжениям.Распоряжение = ДанныеЗаполненияРасходногоОрдера.Шапка.Распоряжение;
		
		// ОтгружаемыеТовары
		НоваяСтрокаОтгружаемыеТовары = РасходныйОрдерНаТоварыОбъект.ОтгружаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОтгружаемыеТовары, СтрокаТовары);
		НоваяСтрокаОтгружаемыеТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		НоваяСтрокаОтгружаемыеТовары.Действие = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Отгрузить;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(
		РасходныйОрдерНаТоварыОбъект,
		Документы.РасходныйОрдерНаТовары);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		РасходныйОрдерНаТоварыОбъект,
		ПараметрыУказанияСерий.ТоварыПоРаспоряжениям);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		РасходныйОрдерНаТоварыОбъект,
		ПараметрыУказанияСерий.ОтгружаемыеТовары);
	
КонецПроцедуры

#Область ФормыДокументов

Функция ОтображатьДекорациюСозданияРасходногоОрдераНаТовары(Форма, МетаданныеДокумента)
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка) Или Не Форма.Объект.Проведен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьПравоСозданияРасходногоОрдера = ПравоДоступа("Изменение", МетаданныеДокумента)
		Или Пользователи.ЭтоПолноправныйПользователь();
		
	ЭтоОтгрузкаСОрдерногоСклада = ЭтоОтгрузкаСОрдерногоСклада(Форма);
	
	Возврат ЕстьПравоСозданияРасходногоОрдера И ЭтоОтгрузкаСОрдерногоСклада;
	
КонецФункции

Функция ЭтоОтгрузкаСОрдерногоСклада(Форма)
	
	ЭтоОтгрузкаСОрдерногоСклада = Ложь;

	Склад = Неопределено;
	
	Если Не Форма.Объект.Свойство("Склад", Склад) Тогда
		Форма.Объект.Свойство("СкладОтправитель", Склад);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ЭтоОтгрузкаСОрдерногоСклада = СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(
			Склад,
			?(ЗначениеЗаполнено(Форма.Объект.Дата), Форма.Объект.Дата, ТекущаяДатаСеанса()));
			
	КонецЕсли;
	
	Возврат ЭтоОтгрузкаСОрдерногоСклада;
	
КонецФункции

Функция ТекстЗаголовкаДекорацииРасходныйОрдерНаТовары(Форма)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлементыФорматированнойСтроки = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаТоваров.Ссылка
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.Ссылка = &Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТовары.Номер КАК Номер,
	|	РасходныйОрдерНаТовары.Дата КАК Дата,
	|	РасходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыРаспоряжения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распоряжения КАК Распоряжения
	|			ПО РасходныйОрдерНаТоварыРаспоряжения.Распоряжение = Распоряжения.Ссылка
	|		ПО РасходныйОрдерНаТовары.Ссылка = РасходныйОрдерНаТоварыРаспоряжения.Ссылка
	|ГДЕ
	|	РасходныйОрдерНаТовары.Проведен");
	
	Запрос.УстановитьПараметр("Распоряжение", Форма.Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаголовокДекорации = СтрШаблон(
			НСтр("ru = 'Расходный ордер на товары %1 от %2 (%3)'"),
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.Номер),
			Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"),
			Выборка.Статус);
		
		ЭлементыФорматированнойСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				ЗаголовокДекорации,,
				ЦветаСтиля.ГиперссылкаЦвет,,
				ПолучитьНавигационнуюСсылку(Выборка.Ссылка)));
				
	Иначе
				
		ЗаголовокДекорации = НСтр("ru = 'Оформить расходный ордер на товары'");
		
		ЭлементыФорматированнойСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				ЗаголовокДекорации,,
				ЦветаСтиля.ГиперссылкаЦвет,,
				"бг_ОформитьРасходныйОрдерНаТовары"));
				
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыФорматированнойСтроки);
	
КонецФункции

#КонецОбласти // Конец ФормыДокументов

#КонецОбласти // РасходныйОрдерНаТовары

#КонецОбласти