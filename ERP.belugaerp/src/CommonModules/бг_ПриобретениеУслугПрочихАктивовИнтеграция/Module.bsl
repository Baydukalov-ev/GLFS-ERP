#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ИменаРеквизитов = ВыгружаемыеРеквизиты();
	адаптер_НастройкиОбмена.ОставитьРеквизиты(РеквизитыИСвойства, РеквизитыИСвойства.МетаданныеОбъекта, ИменаРеквизитов);
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства, ФорматСообщения);
	ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства);

КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Если ДанныеОбъекта.Реквизиты.Количество() > 0 Тогда
		РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
	
	    ДобавитьДанныеСчетовВРасходы(Объект, РеквизитыОбъекта);
		ОпределитьПоступлениеДопРасходов(РеквизитыОбъекта);
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска = 
	"NULL КАК СчетУчета_ЗначениеРеквизитаКод,
	|NULL КАК НаРасходыБудущихПериодов,
	|NULL КАК СчетДт_ЗначениеРеквизитаКод";
	
	ТекстЗамены = 
	""""" КАК СчетУчета_ЗначениеРеквизитаКод,
	|ЕстьNULL(ВыгружаемыйОбъект.Расходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов), Ложь) КАК НаРасходыБудущихПериодов,
	|"""" КАК СчетДт_ЗначениеРеквизитаКод";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
КонецПроцедуры

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	Результат = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИСТИНА КАК ФормированиеСтоимостиВНА
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ПриобретениеУслугПрочихАктивовРасходы
	|ГДЕ
	|	ПриобретениеУслугПрочихАктивовРасходы.Ссылка = &Ссылка
	|	И ПриобретениеУслугПрочихАктивовРасходы.СтатьяРасходов.ТипРасходов = 
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)";
	Запрос.УстановитьПараметр("Ссылка", ДанныеСообщения.Объект);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Не выгружать, если: ТипРасходов = При формировании внеоборотных активов'"); 
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		Результат = Ложь;	
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеБухгалтерскихПроводок(ПриобретениеУслугПрочихАктивовОбъект)

	Если Не ПриобретениеУслугПрочихАктивовОбъект.Проведен Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПриобретениеУслугПрочихАктивовОбъект.Ссылка);
	Запрос.Текст = ТекстЗапросаДанныеБухгатерскихПроводок();
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеБухгалтерскихПроводок = РезультатЗапроса.Выгрузить();
	ДанныеБухгалтерскихПроводок.Индексы.Добавить("СубконтоДт1");
	
	Возврат ДанныеБухгалтерскихПроводок;

КонецФункции

Функция ТекстЗапросаДанныеБухгатерскихПроводок()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СчетДт.Код КАК СчетДтКод,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	ХозрасчетныйДвиженияССубконто.Регистратор = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СчетДт.Код,
	|	ХозрасчетныйДвиженияССубконто.СчетДт";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеБухгалтерскихПроводокВСтрокеРасходы(ДанныеБухгалтерскихПроводок, СтрокаРасходы)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ИмяПВХСтатьиРасходов = СтрЗаменить(СтрокаРасходы.СтатьяРасходов.ТипЗначения, "ПланВидовХарактеристик.", "");
	
	СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(
		Новый УникальныйИдентификатор(СтрокаРасходы.СтатьяРасходов.Идентификатор));
			
	ПараметрыПоиска = Новый Структура("СубконтоДт1", СтатьяРасходов);
	СтрокиБухгалтерскихПроводок = ДанныеБухгалтерскихПроводок.НайтиСтроки(ПараметрыПоиска);
	
	Если СтрокиБухгалтерскихПроводок.Количество() > 0 Тогда
		адаптер_РаботаСДаннымиИБ.ЗаполнитьЗначениеРеквизита(
			СтрокаРасходы,
			"СчетДт_ЗначениеРеквизитаИдентификатор",
			СтрокиБухгалтерскихПроводок[0].СчетДт,
			Новый ТаблицаЗначений);
		СтрокаРасходы.СчетДт.Вставить("Код", СтрокиБухгалтерскихПроводок[0].СчетДтКод);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПоступлениеДопРасходов(РеквизитыОбъекта)
	ЕстьРасходыНаСебестоимостьТоваров = РеквизитыОбъекта.Расходы.Количество() > 0;
	Для каждого СтрокаРасходы Из РеквизитыОбъекта.Расходы Цикл
		Если ЗначениеЗаполнено(СтрокаРасходы.СтатьяРасходов) 
			И СтрокаРасходы.СтатьяРасходов.Свойство("ВариантРаспределенияРасходовРегл") Тогда
			ЕстьРасходыНаСебестоимостьТоваров = Мин(ЕстьРасходыНаСебестоимостьТоваров, 
				СтрокаРасходы.СтатьяРасходов.ВариантРаспределенияРасходовРегл.ЗначениеПеречисления =
					"НаСебестоимостьТоваров");
		Иначе
			ЕстьРасходыНаСебестоимостьТоваров = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	РеквизитыОбъекта.Вставить("ЭтоПоступлениеДопРасходов", ЕстьРасходыНаСебестоимостьТоваров);
КонецПроцедуры

Функция ВыгружаемыеРеквизиты()
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Предопределенный");
	МассивРеквизитов.Добавить("ПометкаУдаления");
	МассивРеквизитов.Добавить("Номер");
	МассивРеквизитов.Добавить("Дата");
	МассивРеквизитов.Добавить("Проведен");
	МассивРеквизитов.Добавить("Автор");
	МассивРеквизитов.Добавить("Валюта");
	МассивРеквизитов.Добавить("ВалютаВзаиморасчетов");
	МассивРеквизитов.Добавить("ДатаВходящегоДокумента");
	МассивРеквизитов.Добавить("НомерВходящегоДокумента");
	МассивРеквизитов.Добавить("НаименованиеВходящегоДокумента");
	МассивРеквизитов.Добавить("Договор");
	МассивРеквизитов.Добавить("Комментарий");
	МассивРеквизитов.Добавить("Контрагент");
	МассивРеквизитов.Добавить("КурсЗнаменатель");
	МассивРеквизитов.Добавить("КурсЧислитель");
	МассивРеквизитов.Добавить("Организация");
	МассивРеквизитов.Добавить("Подразделение");
	МассивРеквизитов.Добавить("ЦенаВключаетНДС");
	МассивРеквизитов.Добавить("СуммаДокумента");
	МассивРеквизитов.Добавить("НалогообложениеНДС");
	МассивРеквизитов.Добавить("Расходы");
	МассивРеквизитов.Добавить("Расходы.Количество");
	МассивРеквизитов.Добавить("Расходы.Цена");
	МассивРеквизитов.Добавить("Расходы.Сумма");
	МассивРеквизитов.Добавить("Расходы.Содержание");
	МассивРеквизитов.Добавить("Расходы.СтавкаНДС");
	МассивРеквизитов.Добавить("Расходы.СуммаНДС");
	МассивРеквизитов.Добавить("Расходы.СуммаСНДС");
	МассивРеквизитов.Добавить("Расходы.СтатьяРасходов");
	МассивРеквизитов.Добавить("Расходы.СуммаВзаиморасчетов");
	МассивРеквизитов.Добавить("Расходы.СуммаНДСВзаиморасчетов");
	МассивРеквизитов.Добавить("Расходы.Подразделение");
	МассивРеквизитов.Добавить("Расходы.АналитикаРасходов");
	МассивРеквизитов.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
	МассивРеквизитов.Добавить("РасшифровкаПлатежа.Сумма");
	МассивРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
	ВыгружаемыеРеквизиты = СтрСоединить(МассивРеквизитов, ",");
	Возврат ВыгружаемыеРеквизиты;
Конецфункции

Процедура ДобавитьДанныеСчетовВРасходы(Объект, РеквизитыОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ДанныеБухгалтерскихПроводок = ДанныеБухгалтерскихПроводок(Объект);
	
	Для каждого СтрокаРасходы Из РеквизитыОбъекта.Расходы Цикл
		Если СтрокаРасходы.НаРасходыБудущихПериодов Тогда
			СтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьСсылку(
					Новый УникальныйИдентификатор(СтрокаРасходы.СтатьяРасходов.Идентификатор));
			СчетаУчета = Новый Массив;
			СчетаУчета.Добавить("Расходы");
			СтруктураЗначенийСчетаУчета = РегистрыСведений.ПорядокОтраженияНаСчетахУчета.СтруктураЗначенийПоАналитикеУчета(
												СтатьяРасходов, СчетаУчета);
			ПравилоРаспределения        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтатьяРасходов, "ПравилоРаспределенияРасходовРегл");
			НоваяСтатья                 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоРаспределения, "СтатьяСписанияРБП");
			адаптер_РаботаСДаннымиИБ.ЗаполнитьЗначениеРеквизита(СтрокаРасходы, "СтатьяРасходов_ЗначениеРеквизитаИдентификатор", 
						НоваяСтатья, Новый ТаблицаЗначений);
			СтрокаРасходы.СтатьяРасходов.Вставить("Код", НоваяСтатья.Код);
			адаптер_РаботаСДаннымиИБ.ЗаполнитьЗначениеРеквизита(СтрокаРасходы, "СчетУчета_ЗначениеРеквизитаИдентификатор",
						СтруктураЗначенийСчетаУчета.СчетУчета_Расходы, Новый ТаблицаЗначений);
			Если ЗначениеЗаполнено(СтруктураЗначенийСчетаУчета.СчетУчета_Расходы) Тогда
				КодСчетаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтруктураЗначенийСчетаУчета.СчетУчета_Расходы, "Код");
				СтрокаРасходы.СчетУчета.Вставить("Код", КодСчетаУчета);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Проведен Тогда
			ЗаполнитьДанныеБухгалтерскихПроводокВСтрокеРасходы(ДанныеБухгалтерскихПроводок, СтрокаРасходы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства, ФорматСообщения)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, РеквизитыИСвойства.МетаданныеОбъекта, ,
		"ЭтоПоступлениеДопРасходов", Новый ОписаниеТипов("Булево"));
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.ПланыВидовХарактеристик.СтатьиРасходов, 
		"ВариантРаспределенияРасходовРегл", , Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРаспределенияРасходов"));
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, Метаданные.ПланыВидовХарактеристик.СтатьиРасходов, 
		"ПравилоРаспределенияНаСебестоимость", , 
		Новый ОписаниеТипов("ПеречислениеСсылка.ПравилаРаспределенияНаСебестоимостьТоваров"));
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, РеквизитыИСвойства.МетаданныеОбъекта, , 
		"Расходы.СчетУчета", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, РеквизитыИСвойства.МетаданныеОбъекта, , 
		"Расходы.НаРасходыБудущихПериодов", Новый ОписаниеТипов("Булево"));
	адаптер_НастройкиОбмена.ДобавитьРеквизит(РеквизитыИСвойства, РеквизитыИСвойства.МетаданныеОбъекта, ,
		"Расходы.СчетДт", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
КонецПроцедуры

Процедура ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОбъектыРасчетов,
		"Объект", , 
		Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип);
	
	бг_ПриобретениеТоваровУслугИнтеграция.ДобавитьКлючевыеПоляПервичногоДокумента(РеквизитыИСвойства);
	
КонецПроцедуры

#КонецОбласти
