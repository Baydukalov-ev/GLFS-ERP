#Область ПрограммныйИнтерфейс

// Возвращает остатки на складе на конкретную дату (без учета упаковок)
//
// Параметры:
//   Период - Дата, Граница - момент времени, на который получаем остатки
//   Склад - СправочникСсылка.Склады - склад, по которому получаем остатки
//   ДокументыИсключения - Массив, ДокументСсылка, Неопределено - Документы, движения по которым надо исключить
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные об остатках товаров, содержит колонки:
//  	* Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
//  	* Назначение - СправочникСсылка.Назначения - Назначения
//  	* Склад - СправочникСсылка.Склады - склад, по которому получаем остатки
//  	* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика
//  	* Серия - СправочникСсылка.СерииНоменклатуры - Серия номенклатуры
//  	* Количество - Число - Остаток
//  	* КоличествоУпаковок - Число - Остаток
//
Функция ОстаткиНаСкладеНаДату(Период, Склад, ДокументыИсключения = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладах.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладах.Назначение КАК Назначение,
	|	ТоварыНаСкладах.Склад КАК Склад,
	|	ТоварыНаСкладах.Характеристика КАК Характеристика,
	|	ТоварыНаСкладах.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ * ТоварыНаСкладах.ВНаличии КАК Количество
	|ПОМЕСТИТЬ втДанныеКорректировки
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|ГДЕ
	|	ТоварыНаСкладах.Регистратор В(&ДокументыИсключения)
	|	И ТоварыНаСкладах.Склад = &Склад
	|	И ТоварыНаСкладах.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Назначение КАК Назначение,
	|	ВложенныйЗапрос.Склад КАК Склад,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Серия КАК Серия,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапрос.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.Склад КАК Склад,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(&Период, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втДанныеКорректировки.Номенклатура,
	|		втДанныеКорректировки.Назначение,
	|		втДанныеКорректировки.Склад,
	|		втДанныеКорректировки.Характеристика,
	|		втДанныеКорректировки.Серия,
	|		втДанныеКорректировки.Количество
	|	ИЗ
	|		втДанныеКорректировки КАК втДанныеКорректировки) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Номенклатура.Родитель.Наименование";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Склад", Склад);
	Если Не ЗначениеЗаполнено(ДокументыИсключения) Тогда
		Запрос.УстановитьПараметр("ДокументыИсключения", Новый Массив);
	ИначеЕсли ТипЗнч(ДокументыИсключения) = Тип("Массив") Тогда
		Запрос.УстановитьПараметр("ДокументыИсключения", ДокументыИсключения);
	Иначе
		Запрос.УстановитьПараметр("ДокументыИсключения", 
									ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументыИсключения));
	КонецЕсли;	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ЕстьСтрокиДляЗаполненияСерийПоFIFO(ТЧ) Экспорт
	СтатусыУказанияСерий = СтатусыУказанияСерийТребуетсяЗаполнениеПоFIFO();
	Возврат ЕстьСтрокиДляЗаполненияСерий(ТЧ, СтатусыУказанияСерий);
КонецФункции

Функция ЕстьСтрокиДляЗаполненияСерийФСМ(ТЧ) Экспорт
	СтатусыУказанияСерий = СтатусыУказанияСерийТребуетсяЗаполнениеСерийФСМ();
	Возврат ЕстьСтрокиДляЗаполненияСерий(ТЧ, СтатусыУказанияСерий);
КонецФункции

Процедура ЗаполнитьСерииПоFIFOВТЧТовары(Объект, ПараметрыУказанияСерий) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыУказанияСерий = СтатусыУказанияСерийТребуетсяЗаполнениеПоFIFO();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СтатусыУказанияСерий", СтатусыУказанияСерий);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	
	ПодготовитьВременнуюТаблицуТоваров(Объект, Запрос, ПараметрыУказанияСерий);
	ПодготовитьВременнуюТаблицуОстатковТоваров(Запрос, ПараметрыУказанияСерий);
	ПодготовитьВременнуюТаблицуДанныеСерийЗаполнениеПоFIFO(Запрос);
	
	Запрос.Текст = ТекстЗапросаДанныеЗаполнениеСерийПоFIFO();
	Данные = ДанныеДляЗаполненияСерий(Объект, ПараметрыУказанияСерий, Запрос);
	
	ЗаполнитьСерииВТЧТовары(Объект, Данные, ПараметрыУказанияСерий);
КонецПроцедуры

Процедура ЗаполнитьСерииПоLIFOВТЧТовары(Объект, ПараметрыУказанияСерий) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыУказанияСерий = СтатусыУказанияСерийТребуетсяЗаполнениеПоFIFO();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СтатусыУказанияСерий", СтатусыУказанияСерий);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	
	ПодготовитьВременнуюТаблицуТоваров(Объект, Запрос, ПараметрыУказанияСерий);
	
	Период = Новый Граница(Объект.Дата, ВидГраницы.Включая);
	ПодготовитьВременнуюТаблицуОстатковТоваров(Запрос, ПараметрыУказанияСерий, Период);
	
	ПодготовитьВременнуюТаблицуДанныеСерийЗаполнениеПоFIFO(Запрос);
	
	Запрос.Текст = ТекстЗапросаДанныеЗаполнениеСерийПоLIFO();
	Данные = ДанныеДляЗаполненияСерий(Объект, ПараметрыУказанияСерий, Запрос);
	
	ЗаполнитьСерииВТЧТовары(Объект, Данные, ПараметрыУказанияСерий);
КонецПроцедуры

Процедура ЗаполнитьСерииПоДатеПроизводстваВТЧТовары(Объект, ПараметрыУказанияСерий) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыУказанияСерий = СтатусыУказанияСерийТребуетсяЗаполнениеПоFIFO();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СтатусыУказанияСерий", СтатусыУказанияСерий);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ПодготовитьВременнуюТаблицуТоваров(Объект, Запрос, ПараметрыУказанияСерий);
	ПодготовитьВременнуюТаблицуОстатковТоваров(Запрос, ПараметрыУказанияСерий);
	
	Запрос.Текст = ТекстЗапросаДанныеЗаполнениеСерийПоДатеПроизводства();
	Данные = ДанныеДляЗаполненияСерий(Объект, ПараметрыУказанияСерий, Запрос);
	
	ЗаполнитьСерииВТЧТовары(Объект, Данные, ПараметрыУказанияСерий);			
КонецПроцедуры

Процедура ЗаполнитьСерииФСМВТЧТовары(Объект, ПараметрыУказанияСерий) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыУказанияСерий = СтатусыУказанияСерийТребуетсяЗаполнениеСерийФСМ();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СтатусыУказанияСерий", СтатусыУказанияСерий);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СтатусыДвиженияМарок = Перечисления.бг_СтатусыАкцизныхМарок.СтатусыПоОперации(Метаданные.Документы.ЭтапПроизводства2_2.Имя);
	Запрос.УстановитьПараметр("СтатусМаркиПропущена", СтатусыДвиженияМарок.МаркаПропущена);
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2" Тогда
		Запрос.УстановитьПараметр("Период", бг_ЭтапПроизводства2_2.ДатаПроизводстваПродукции(Объект));
		Запрос.УстановитьПараметр("ОтборДвиженийМарокПоРегистратору", Истина);
		Запрос.УстановитьПараметр("ОтборДвиженийМарокПоПериоду", Ложь);
	Иначе
		Запрос.УстановитьПараметр("Период", НачалоДня(Объект.Дата));
		Запрос.УстановитьПараметр("ОтборДвиженийМарокПоРегистратору", Ложь);
		Запрос.УстановитьПараметр("ОтборДвиженийМарокПоПериоду", Истина);
	КонецЕсли;
	
	ПодготовитьВременнуюТаблицуТоваров(Объект, Запрос, ПараметрыУказанияСерий);
	ПодготовитьВременнуюТаблицуОстатковТоваров(Запрос, ПараметрыУказанияСерий);
	ПодготовитьВременнуюТаблицуДанныеСерийФСМ(Запрос);
	
	Запрос.Текст = ТекстЗапросаДанныеЗаполнениеСерийФСМ();
	Данные = ДанныеДляЗаполненияСерий(Объект, ПараметрыУказанияСерий, Запрос);
	
	ЗаполнитьСерииВТЧТовары(Объект, Данные, ПараметрыУказанияСерий);
КонецПроцедуры

Функция СерияВыпущеннойПродукции(ДокументВыпуска, СтатусУказанияСерии, Продукция, ДатаПроизводства, СтранаНазначения,
	ДополнительныеПараметрыЗаполнения = Неопределено) Экспорт
	
	// TODO рефакторинг https://tracker.yandex.ru/BG-2996
	
	СтатусыУказанияСерийТребуетсяЗаполнение = СтатусыУказанияСерийТребуетсяЗаполнениеДляВыпущеннойПродукции();
	Если СтатусыУказанияСерийТребуетсяЗаполнение.Найти(СтатусУказанияСерии) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.бг_ДокументВыпуска = &ДокументВыпуска
	|	И СерииНоменклатуры.бг_Номенклатура = &Номенклатура
	|	И НЕ СерииНоменклатуры.ПометкаУдаления";
	Запрос.УстановитьПараметр("Номенклатура", Продукция);
	Запрос.УстановитьПараметр("ДокументВыпуска", ДокументВыпуска);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Серия = Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Серия = Справочники.СерииНоменклатуры.СоздатьЭлемент();
		ВладелецСерии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукция, "ВидНоменклатуры");
		ДанныеЗаполнения = Новый Структура("ВидНоменклатуры", ВладелецСерии);
		Серия.Заполнить(ДанныеЗаполнения);
		
		бг_СерииНоменклатуры.УстановитьНовыйНомерСерии(Серия);
		
		Серия.бг_ДокументВыпуска = ДокументВыпуска;
		Серия.бг_Номенклатура = Продукция;
		
		Если ЗначениеЗаполнено(ДокументВыпуска) Тогда
			
			Если ТипЗнч(ДокументВыпуска) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
				
				РеквизитыДокументаВыпуска = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДокументВыпуска,
					"Организация, Спецификация");
				
				РеквизитыДокументаВыпуска.Свойство("Организация", Серия.бг_ОрганизацияВладелец);
				РеквизитыДокументаВыпуска.Свойство("Спецификация", Серия.бг_Спецификация);
				
			ИначеЕсли ТипЗнч(ДокументВыпуска) = Тип("ДокументСсылка.ПроизводствоБезЗаказа") Тогда
				
				Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВыпуска, "Организация");
				Если ЗначениеЗаполнено(Организация)
					И Не ЗначениеЗаполнено(Серия.бг_ОрганизацияВладелец)
					И Организация <> Справочники.Организации.УправленческаяОрганизация Тогда
					
					Серия.бг_ОрганизацияВладелец = Организация;
				КонецЕсли;
				
			Иначе
				// NOP
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДокументВыпуска) = Тип("ДокументСсылка.ЭтапПроизводства2_2") 
		И ЗначениеЗаполнено(ДокументВыпуска) Тогда
		УпаковкаПаллета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВыпуска, "Спецификация.бг_ОсновноеИзделиеУпаковкаПаллета");
	Иначе
		УпаковкаПаллета = Серия.бг_УпаковкаПаллета;	
	КонецЕсли;
	
	Если Серия.ЭтоНовый()
		Или Серия.ДатаПроизводства <> ДатаПроизводства
		Или Серия.бг_СтранаНазначения <> СтранаНазначения 
		Или Серия.бг_УпаковкаПаллета <> УпаковкаПаллета Тогда
		
		ЭтоЭкспорт = ЗначениеЗаполнено(СтранаНазначения) И СтранаНазначения <> Справочники.СтраныМира.Россия;
		
		Серия.ДатаПроизводства = ДатаПроизводства;
		Серия.бг_СтранаНазначения = СтранаНазначения;
		Серия.бг_Экспорт = ЭтоЭкспорт;
		Серия.бг_УпаковкаПаллета = УпаковкаПаллета; 
		Серия.ГоденДо = ГоденДо(Продукция, ДатаПроизводства);
		
		Если ДополнительныеПараметрыЗаполнения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Серия, ДополнительныеПараметрыЗаполнения);
			
			Если ДополнительныеПараметрыЗаполнения.Свойство("бг_ОрганизацияЕГАИСВладелец") Тогда
				Серия.ДополнительныеСвойства.Вставить(
					"бг_ОрганизацияЕГАИСВладелец", 
					ДополнительныеПараметрыЗаполнения.бг_ОрганизацияЕГАИСВладелец);
			КонецЕсли;
		КонецЕсли;
		
		Серия.Записать();
	КонецЕсли;
	
	Возврат Серия.Ссылка;
КонецФункции

Процедура ЗаполнитьСпособыОбеспечения(Номенклатура) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	СпособыОбеспеченияПотребностей = СпособыОбеспеченияПотребностей(Номенклатура);
	Если СпособыОбеспеченияПотребностей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыОбеспеченияПотребностей.Склад КАК Склад,
	|	СпособыОбеспеченияПотребностей.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей
	|ПОМЕСТИТЬ СпособыОбеспеченияПотребностей
	|ИЗ
	|	&СпособыОбеспеченияПотребностей КАК СпособыОбеспеченияПотребностей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В ИЕРАРХИИ(&Ссылка)
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И НЕ Номенклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОбеспеченияПотребностей.Склад КАК Идентификатор,
	|	СпособыОбеспеченияПотребностей.Склад КАК Склад,
	|	СпособыОбеспеченияПотребностей.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика
	|ИЗ
	|	СпособыОбеспеченияПотребностей КАК СпособыОбеспеченияПотребностей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Номенклатура КАК Номенклатура
	|		ПО (ИСТИНА)";
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Запрос.УстановитьПараметр("СпособыОбеспеченияПотребностей", СпособыОбеспеченияПотребностей);
	Результат = Запрос.Выполнить();
	
	ТаблицаНоменклатура = Результат.Выгрузить();
	ТаблицаНоменклатура.Индексы.Добавить("СпособОбеспеченияПотребностей");
	
	ТаблицаСпособыОбеспечения = ТаблицаНоменклатура.Скопировать(, "СпособОбеспеченияПотребностей");
	ТаблицаСпособыОбеспечения.Свернуть("СпособОбеспеченияПотребностей");
	
	Для Каждого СтрокаСпособОбеспечения Из ТаблицаСпособыОбеспечения Цикл
		ОтборСтроки = Новый Структура("СпособОбеспеченияПотребностей", СтрокаСпособОбеспечения.СпособОбеспеченияПотребностей);
		СтрокиНоменклатура = ТаблицаНоменклатура.НайтиСтроки(ОтборСтроки);
		
		РегистрыСведений.ВариантыОбеспеченияТоварами.ЗаполнитьСпособОбеспечения(
				СтрокиНоменклатура, СтрокаСпособОбеспечения.СпособОбеспеченияПотребностей);
	КонецЦикла;
КонецПроцедуры

// Проверяет заполнение вида алкогольной продукции в табличной части переданного документа.
// Если в документе есть алкогольная продукция с незаполненным видом алкогольной продукции, Отказ = Истина.
//
//Параметры: 
// - Объект - ДокументСсылка.ЗаказКлиента, ДокументСсылка.РеализацияТоваровУслуг
// - Отказ - Булево
//
Процедура ПроверитьЗаполнениеВидаАлкогольнойПродукцииВТЧТовары(Объект, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.АлкогольнаяПродукция 
	|	И ТаблицаТоваров.Номенклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		Отказ = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = СтрШаблон(
							НСтр("ru = 'В строке %1 у номенклатуры %2 не заполнен вид алкогольной продукции'"), 
							Выборка.НомерСтроки,
							Выборка.Номенклатура);
							
			ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
								"Товары", 
								Выборка.НомерСтроки, 
								"Номенклатура");
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки, 
				Объект, 
				ПутьКТабЧасти,
				, 
				Отказ)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствие серии и выбранной номенклатуры
//
//Параметры: 
// - Объект - ДокументОбъект.ЗаказМатериаловВПроизводство
// - Отказ - Булево
//
Процедура ПроверитьСоответствиеНоменклатурыИСерииВТЧТовары(Объект, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.Товары.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Серия КАК Справочник.СерииНоменклатуры) КАК Серия
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Серия.бг_Номенклатура) КАК НоменклатураСерия
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаТоваров.Серия.бг_Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|							<> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ТаблицаТоваров.Серия.бг_Номенклатура <> ТаблицаТоваров.Номенклатура";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"Товары",
							Выборка.НомерСтроки,
							"Номенклатура");
		
		ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Не соответствует выбранный товар ""%1"" и владелец серии ""%2""'"),
							Выборка.Номенклатура,
							Выборка.НоменклатураСерия);
		
		ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				Объект,
				ПутьКТабЧасти,
				,
				Отказ)
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСтатьюКалькуляцииВТЧИзНоменклатуры(Объект, ИмяТЧ, МассивИдентификаторовСтрок = Неопределено) Экспорт
	
	КоллекцияСтрок = Объект[ИмяТЧ];
	Если МассивИдентификаторовСтрок <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
			ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
			МассивСтрок.Добавить(ДанныеСтроки);
		КонецЦикла;
		КоллекцияСтрок = МассивСтрок;
	КонецЕсли;
	
	НоменклатураТЧ = Новый Массив;
	Для каждого СтрокаТаблицы Из КоллекцияСтрок Цикл
		НоменклатураТЧ.Добавить(СтрокаТаблицы.Номенклатура);
	КонецЦикла;
	
	СоответствиеСтатейКалькуляции = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НоменклатураТЧ, "бг_СтатьяКалькуляции");
	Для каждого СтрокаТаблицы Из КоллекцияСтрок Цикл
		СтрокаТаблицы.СтатьяКалькуляции = СоответствиеСтатейКалькуляции.Получить(СтрокаТаблицы.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСтатьюКалькуляцииВТЧ(Объект, ИменаТЧ, Отказ) Экспорт
	
	Прерывать = Не Пользователи.РолиДоступны("ПолныеПрава,бг_НеКонтролироватьСтатьюКалькуляции");
	
	ПроверяемыеТЧ = Новый Массив;
	ПроверяемыеТЧ = СтрРазделить(ИменаТЧ, ",");
	
	НоменклатураТЧ = Новый Массив;
	Для каждого ИмяТЧ Из ПроверяемыеТЧ Цикл
		Для каждого СтрокаТаблицы Из Объект[ИмяТЧ] Цикл
			НоменклатураТЧ.Добавить(СтрокаТаблицы.Номенклатура);
		КонецЦикла;
	КонецЦикла;
	
	СоответствиеСтатейКалькуляции = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(НоменклатураТЧ, "бг_СтатьяКалькуляции");
	
	Для каждого ИмяТЧ Из ПроверяемыеТЧ Цикл
		Для каждого СтрокаТаблицы Из Объект[ИмяТЧ] Цикл
			СтатьяКалькуляции = СоответствиеСтатейКалькуляции.Получить(СтрокаТаблицы.Номенклатура);
			Если Не ЗначениеЗаполнено(СтатьяКалькуляции) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаТаблицы.СтатьяКалькуляции <> СтатьяКалькуляции Тогда
				НомерСтроки = СтрокаТаблицы.НомерСтроки;
				Поле = ИмяТЧ + "[" + (НомерСтроки - 1) + "].СтатьяКалькуляции";
				Если Прерывать Тогда
					ТекстСообщения = НСтр("ru = 'В строке %1 статья калькуляции %2 отличается от статьи калькуляции в номенклатуре %3.
						|Укажите правильную статью калькуляции в документе.'");
					ТекстСообщенияПользователю = СтрШаблон(ТекстСообщения, НомерСтроки, СтрокаТаблицы.СтатьяКалькуляции, СтатьяКалькуляции);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю, , Поле, "Объект", Отказ);
				Иначе
					ТекстСообщения = НСтр("ru = 'В строке %1 статья калькуляции %2 отличается от статьи калькуляции в номенклатуре %3.
						|Пользователю разрешена запись без контроля статей калькуляции.'");
					ТекстСообщенияПользователю = СтрШаблон(ТекстСообщения, НомерСтроки, СтрокаТаблицы.СтатьяКалькуляции, СтатьяКалькуляции);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияПользователю);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Функция - Возвращает паллетизацию массива номенклатур, если она может быть однозначно определена
//
// Параметры:
//  Номенклатура - Массив - массив элементов с типом СправочникСсылка.Номенклатура 
// 
// Возвращаемое значение:
//  Соответствие - ключ номенклатура, значение паллетизация по умолчанию
//
Функция ПаллетизацияМассиваНоменклатурПоУмолчанию(Номенклатура) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК Паллета,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))) КАК КоличествоПаллет
	|ПОМЕСТИТЬ втПаллетизацияНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО Номенклатура.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
	|			И (УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипЕдиницыИзмеренияПаллета)
	|			И (НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления)
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПаллетизацияНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА втПаллетизацияНоменклатуры.КоличествоПаллет = 1
	|			ТОГДА втПаллетизацияНоменклатуры.Паллета
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ КАК Паллета
	|ИЗ
	|	втПаллетизацияНоменклатуры КАК втПаллетизацияНоменклатуры";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЕдиницыИзмеренияПаллета", Перечисления.бг_ТипыЕдиницИзмерения.Паллета);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПаллетизацияНоменклатуры = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПаллетизацияНоменклатуры.Вставить(Выборка.Номенклатура, Выборка.Паллета);	
	КонецЦикла;
	
	Возврат ПаллетизацияНоменклатуры;
	
КонецФункции

// Функция - Возвращает паллетизацию номенклатуры, если она может быть однозначно определена
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура, для которой требуется получить паллетизацию 
// 
// Возвращаемое значение:
//  СправочникСсылка.УпаковкиЕдиницыИзмерения - паллетизация по умолчанию
//
Функция ПаллетизацияНоменклатурыПоУмолчанию(Номенклатура) Экспорт

	МассивНоменклатур = Новый Массив;
	МассивНоменклатур.Добавить(Номенклатура);
	
	Возврат ПаллетизацияМассиваНоменклатурПоУмолчанию(МассивНоменклатур).Получить(Номенклатура);
	
КонецФункции

// Функция - Есть ошибки заполнения штрихкодов упаковок
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура
//  Упаковка	 - СправочникСсылка.УпаковкиЕдиницыИзмерения 
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется выводить предупреждение
//
Функция ЕстьОшибкиЗаполненияШтрихкодовУпаковок(Номенклатура, Упаковка = Неопределено) Экспорт
	
	ЕстьОшибкиЗаполнения = Ложь;
	
	Если ТребуютсяШтрихкодыУпаковокДляИнтеграцииWMS(Номенклатура)
		И Не ЗначениеЗаполнено(ШтрихкодыУпаковокНоменклатуры(Номенклатура, Упаковка)) Тогда
		ЕстьОшибкиЗаполнения = Истина;	
	КонецЕсли;
	
	Возврат ЕстьОшибкиЗаполнения;
	
КонецФункции

// Возвращает признак учета остатков и резервов номенклатуры в разрезе упаковок (паллет).
//
// Параметры:
//  Номенклатура - СправочникСсылка.номенклатура - номенклатура, которую надо проверить.
// 
// Возвращаемое значение:
//  Булево - Истина, если по номенклатуре ведется учет в разрезе паллет.
//
Функция ВедетсяУчетОстатковИРезервовВРазрезеУпаковокПаллет(Номенклатура) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	УчетОстатковИРезервовВРазрезеУпаковок = Ложь;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		УчетОстатковИРезервовВРазрезеУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Номенклатура,
				"бг_УчетОстатковИРезервовВРазрезеУпаковокПаллет");
	КонецЕсли;	
	
	Возврат УчетОстатковИРезервовВРазрезеУпаковок;
	
КонецФункции	

// Возвращает признак того, что номенклатура включена в состав сегмента.
//
// Параметры:
//  Номенклатура - СправочникСсылка.номенклатура - номенклатура, которую надо проверить.
//  Сегмент      - СправочникСсылка.СегментыНоменклатуры - ссылка на сегмент номенклатуры.
// 
// Возвращаемое значение:
//  Булево - Истина, если номенклатуре входит в состав сегмента.
//
Функция НоменклатураВключенаВСоставСегмента(Номенклатура, Сегмент) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Номенклатура)
		Или Не ЗначениеЗаполнено(Сегмент) Тогда
	    Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Номенклатура = &Номенклатура
	|	И НоменклатураСегмента.Сегмент = &Сегмент";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак наличия среди переданного списка номенклатуры алкогольной продукции.
// Признак означает, что требуется использование марок по процессу с данной номенклатурой.
//
// Параметры:
//  СписокНоменклатуры - Массив
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьАлкогольнаяПродукция(СписокНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)
	|	И Номенклатура.ВидНоменклатуры.АлкогольнаяПродукция";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак наличия среди переданного списка номенклатуры алкогольной маркируемой продукции.
// Признак означает, что требуется использование ТТН по процессу с данной номенклатурой.
//
// Параметры:
//  СписокНоменклатуры - Массив
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьМаркируемаяАлкогольнаяПродукция(СписокНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|	И Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)
	|	И Номенклатура.ВидНоменклатуры.АлкогольнаяПродукция";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак наличия среди переданного списка номенклатуры ЕК номенклатуры (паллетизируемой).
// Признак означает, что требуется вывод доп. реквизитов паллетизации при работе с данной номенклатурой.
//
// Параметры:
//  СписокНоменклатуры - Массив
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьЕКНоменклатура(СписокНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидНоменклатуры.бг_ВариантСинхронизацииWMS = ЗНАЧЕНИЕ(Перечисление.бг_ВариантыСинхронизацииНоменклатурыWMS.КодЕК_Номенклатуры)
	|	И Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает признак наличия в документе алкогольной маркируемой продукции.
// Признак означает, что требуется использование ТТН по процессу с данной номенклатурой.
//
// Параметры:
//  ДокументСсылка - ссылка на документ
//  ИмяТабличнойЧастиСоСпискомНоменклатуры - строка - имя табличной части документа со списком номенклатуры
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьМаркируемаяАлкогольнаяПродукцияВДокументе(Документ, ИмяТабличнойЧастиСоСпискомНоменклатуры = "Товары", ТолькоМаркируемая = Истина) Экспорт

	ИмяМетаданныхДокумента = Документ.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НоменклатураСправочник.Ссылка КАК Номенклатура
	|ИЗ
	|	Документ.#ИмяМетаданныхДокумента#.#ИмяТабличнойЧастиСоСпискомНоменклатуры# КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО ДокументТовары.Номенклатура = НоменклатураСправочник.Ссылка
	|ГДЕ
	|	(НоменклатураСправочник.ВидАлкогольнойПродукции.Маркируемый ИЛИ НЕ &ТолькоМаркируемая)
	|	И НоменклатураСправочник.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)
	|	И НоменклатураСправочник.ВидНоменклатуры.АлкогольнаяПродукция
	|	И ДокументТовары.Ссылка = &Документ";	
	Запрос.УстановитьПараметр("Документ", Документ);	
	Запрос.УстановитьПараметр("ТолькоМаркируемая", ТолькоМаркируемая);	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяМетаданныхДокумента#", ИмяМетаданныхДокумента);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИмяТабличнойЧастиСоСпискомНоменклатуры#", ИмяТабличнойЧастиСоСпискомНоменклатуры);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

// Возвращает коробку для переданной паллеты.
// Считается, что паллета - составная упаковка из коробок.
//
//  Параметры:
//   УпаковкаПаллета - СправочникСсылка.УпаковкиЕдиницыИзмерения - Ссылка на упаковку - паллету.
//   КоэффициентКоробки - Число - Параметр, который будет заполнен коэффициентом коробки
//                                (количество бутылок в коробке).
//
//  Возвращаемое значение:
//   Коробка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Ссылка на упаковку - коробку,
//                                             из которых составлена переданная паллета. 
//
Функция КоробкаПаллеты(УпаковкаПаллета, КоэффициентКоробки = 1) Экспорт
	
	Коробка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(УпаковкаПаллета) Тогда
		Возврат Коробка;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", УпаковкаПаллета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Родитель КАК Коробка,
	|	УпаковкиЕдиницыИзмерения.Родитель.Числитель КАК Числитель,
	|	УпаковкиЕдиницыИзмерения.Родитель.Знаменатель КАК Знаменатель
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Ссылка = &Ссылка
	|	И УпаковкиЕдиницыИзмерения.Родитель.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(); 
		Выборка.Следующий();
		Коробка = Выборка.Коробка;
		Если Выборка.Числитель > 0 
			И Выборка.Знаменатель > 0 Тогда
			КоэффициентКоробки = Окр(Выборка.Числитель / Выборка.Знаменатель, 7);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат Коробка;
	
КонецФункции

// Возвращает коробку для переданной номенклатуры.
// Считается, что паллета - составная упаковка из коробок.
//
//  Параметры:
//   Номенклатура       - СправочникСсылка.Номенклатура - Ссылка на номенклатуру.
//   КоэффициентКоробки - Число - Параметр, который будет заполнен коэффициентом коробки
//                                (количество бутылок в коробке).
//
//  Возвращаемое значение:
//   Коробка - СправочникСсылка.УпаковкиЕдиницыИзмерения - Ссылка на упаковку - коробку,
//                                             из которых составлена переданная паллета. 
//
Функция КоробкаНоменклатуры(Номенклатура, КоэффициентКоробки = 1) Экспорт
	
	Коробка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Коробка;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Коробка,
	|	УпаковкиЕдиницыИзмерения.Числитель КАК Числитель,
	|	УпаковкиЕдиницыИзмерения.Знаменатель КАК Знаменатель
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.Владелец = &Номенклатура
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.бг_ТипыЕдиницИзмерения.Коробка)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	УпаковкаПаллета = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаУпаковокКоробок = РезультатЗапроса.Выгрузить();
		Если ТаблицаУпаковокКоробок.Количество() = 1 Тогда
			Коробка = ТаблицаУпаковокКоробок[0].Коробка;
			Если ТаблицаУпаковокКоробок[0].Числитель > 0 
				И ТаблицаУпаковокКоробок[0].Знаменатель > 0 Тогда
				КоэффициентКоробки = Окр(ТаблицаУпаковокКоробок[0].Числитель / ТаблицаУпаковокКоробок[0].Знаменатель, 7);	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Коробка;
	
КонецФункции

Функция ГоденДо(Номенклатура, ДатаПроизводства) Экспорт

	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "СрокГодности, ЕдиницаИзмеренияСрокаГодности");
	
	ГоденДо = НоменклатураКлиентСервер.бг_ГоденДоПоДатеПроизводства(
		ДатаПроизводства,
		РеквизитыНоменклатуры.СрокГодности,
		РеквизитыНоменклатуры.ЕдиницаИзмеренияСрокаГодности);
	
	Возврат ГоденДо;
	
КонецФункции

Процедура ЗаполнитьПризнакиНаличияАлкогольнойПродукцииПоНоменклатуре(Объект, ИмяТаблицыТовары) Экспорт

	ТаблицаНоменклатуры = Объект[ИмяТаблицыТовары].Выгрузить(, "Номенклатура");
	ТаблицаНоменклатуры.Свернуть("Номенклатура");
	СписокНоменклатуры = ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)
	|		И Номенклатура.ВидНоменклатуры.АлкогольнаяПродукция КАК ЭтоАлкогольнаяПродукция,
	|	Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|		И Номенклатура.ВидАлкогольнойПродукции.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция)
	|		И Номенклатура.ВидНоменклатуры.АлкогольнаяПродукция КАК ЭтоМаркируемаяАлкогольнаяПродукция
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	НоменклатураСПризнаками = Запрос.Выполнить().Выгрузить();
		
	Признаки = Новый Структура;
		
	Отбор = Новый Структура("ЭтоАлкогольнаяПродукция", Истина); 
	Признаки.Вставить("бг_ЕстьАлкогольнаяПродукция",
		НоменклатураСПризнаками.НайтиСтроки(Отбор).Количество() > 0);
		
	Отбор = Новый Структура("ЭтоМаркируемаяАлкогольнаяПродукция", Истина);
	Признаки.Вставить("бг_ЕстьМаркируемаяАлкогольнаяПродукция",
		НоменклатураСПризнаками.НайтиСтроки(Отбор).Количество() > 0);

	ЗаполнитьЗначенияСвойств(Объект, Признаки);
	
КонецПроцедуры

// Возвращает признак, что среди товаров есть битые ссылки.
// 
// Параметры:
//  Товары - ТаблицаЗначений - таблица проверяемых товаров.
//   - Номенклатура
//   - Серия
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьБитыеСсылкиВТоварах(Товары) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|ГДЕ
	|	Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И СправочникНоменклатура.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Серия
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СправочникСерииНоменклатуры
	|		ПО Товары.Серия = СправочникСерииНоменклатуры.Ссылка
	|			И (Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|ГДЕ
	|	Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|			И СправочникСерииНоменклатуры.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СпособыОбеспеченияПотребностей(Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СпособыОбеспеченияПотребности.Склад КАК Склад,
	|	СпособыОбеспеченияПотребности.СпособОбеспеченияПотребностей КАК СпособОбеспеченияПотребностей
	|ИЗ
	|	Справочник.Номенклатура.бг_СпособыОбеспеченияПотребности КАК СпособыОбеспеченияПотребности
	|ГДЕ
	|	СпособыОбеспеченияПотребности.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить();
	КонецЕсли;
	
	ГруппаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Родитель");
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		Возврат СпособыОбеспеченияПотребностей(ГруппаНоменклатуры);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция СтатусыУказанияСерийТребуетсяЗаполнениеПоFIFO()
	СтатусыУказанияСерий = Новый Массив;
	СтатусыУказанияСерий.Добавить(13);
	СтатусыУказанияСерий.Добавить(14);
	
	Возврат СтатусыУказанияСерий;
КонецФункции

Функция СтатусыУказанияСерийТребуетсяЗаполнениеСерийФСМ()
	СтатусыУказанияСерий = Новый Массив;
	СтатусыУказанияСерий.Добавить(4);
	СтатусыУказанияСерий.Добавить(5);
	СтатусыУказанияСерий.Добавить(13);
	СтатусыУказанияСерий.Добавить(14);
	
	Возврат СтатусыУказанияСерий;
КонецФункции

Функция СтатусыУказанияСерийТребуетсяЗаполнениеДляВыпущеннойПродукции()
	СтатусыУказанияСерий = Новый Массив;
	СтатусыУказанияСерий.Добавить(13);
	СтатусыУказанияСерий.Добавить(14);
	
	Возврат СтатусыУказанияСерий;
КонецФункции

Функция ЕстьСтрокиДляЗаполненияСерий(ТЧ, СтатусыУказанияСерий)
	ОтборСтроки = Новый Структура("СтатусУказанияСерий");
	
	Для Каждого СтатусУказанияСерии Из СтатусыУказанияСерий Цикл
		ОтборСтроки.СтатусУказанияСерий = СтатусУказанияСерии;
		
		Если ТЧ.НайтиСтроки(ОтборСтроки).Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ПодготовитьВременнуюТаблицуТоваров(Объект, Запрос, ПараметрыУказанияСерий)
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	&Ссылка КАК Ссылка,
	|	&Склад КАК Склад,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	&Назначение КАК Назначение,
	|	&УпаковкаПаллета1 КАК УпаковкаПаллета
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.СтатусУказанияСерий В(&СтатусыУказанияСерий)
	|	И ДанныеДокумента.Количество > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ДанныеДокумента.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ДанныеДокумента.Упаковка КАК Упаковка,
	|	&УпаковкаПаллета2 КАК УпаковкаПаллета
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ЕСТЬNULL(ДанныеДокумента.Упаковка.ТипУпаковки, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТоваров";
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "ДанныеДокумента." + ПараметрыУказанияСерий.ИмяПоляСклад);
	Иначе
		Запрос.УстановитьПараметр("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказКлиента" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Склад", "ДанныеДокумента." + ПараметрыУказанияСерий.ИмяПоляСклад);
		Запрос.УстановитьПараметр("Назначение", Справочники.Назначения.ПустаяСсылка());

		Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"&УпаковкаПаллета1",
				"ДанныеДокумента.бг_УпаковкаПаллета");
		
		Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"&УпаковкаПаллета2",
				"ВЫБОР 
				|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ДанныеДокумента.Номенклатура КАК Справочник.Номенклатура).бг_УчетОстатковИРезервовВРазрезеУпаковокПаллет, ЛОЖЬ) 
				|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.УпаковкаПаллета КАК Справочник.УпаковкиЕдиницыИзмерения)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
				|	КОНЕЦ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Назначение", "ВЫРАЗИТЬ(ДанныеДокумента.Назначение КАК Справочник.Назначения)");
		
		Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"&УпаковкаПаллета1",
				"ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
		
		Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"&УпаковкаПаллета2",
				"ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	
	Запрос.Выполнить();
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуОстатковТоваров(Запрос, ПараметрыУказанияСерий, Период = '00010101')
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерииТоваров.Склад КАК Склад,
	|	СерииТоваров.Номенклатура КАК Номенклатура,
	|	СерииТоваров.Характеристика КАК Характеристика,
	|	СерииТоваров.Назначение КАК Назначение,
	|	СерииТоваров.Серия КАК Серия,
	|	СУММА(СерииТоваров.СвободныйОстаток) КАК СвободныйОстаток
	|ПОМЕСТИТЬ ТаблицаОстаткиТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Склад КАК Склад,
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.Назначение КАК Назначение,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток КАК СвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				&Период,
	|				(Склад, Номенклатура, Характеристика, Назначение) В
	|					(ВЫБРАТЬ
	|						ТаблицаТоваровДляЗапроса.Склад,
	|						ТаблицаТоваровДляЗапроса.Номенклатура,
	|						ТаблицаТоваровДляЗапроса.Характеристика,
	|						ТаблицаТоваровДляЗапроса.Назначение
	|					ИЗ
	|						ТаблицаТоваровДляЗапроса)) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтгрузкеОстатки.Склад,
	|		ТоварыКОтгрузкеОстатки.Номенклатура,
	|		ТоварыКОтгрузкеОстатки.Характеристика,
	|		ТоварыКОтгрузкеОстатки.Серия,
	|		ТоварыКОтгрузкеОстатки.Назначение,
	|		-ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.ВРезервеОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|				&Период,
	|				(Склад, Номенклатура, Характеристика, Назначение) В
	|						(ВЫБРАТЬ
	|							ТаблицаТоваровДляЗапроса.Склад,
	|							ТаблицаТоваровДляЗапроса.Номенклатура,
	|							ТаблицаТоваровДляЗапроса.Характеристика,
	|							ТаблицаТоваровДляЗапроса.Назначение
	|						ИЗ
	|							ТаблицаТоваровДляЗапроса)
	|					И Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК ТоварыКОтгрузкеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладах.Склад,
	|		ТоварыНаСкладах.Номенклатура,
	|		ТоварыНаСкладах.Характеристика,
	|		ТоварыНаСкладах.Серия,
	|		ТоварыНаСкладах.Назначение,
	|		ВЫБОР
	|			КОГДА ТоварыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыНаСкладах.ВНаличии + ТоварыНаСкладах.КОтгрузке
	|			ИНАЧЕ ТоварыНаСкладах.ВНаличии - ТоварыНаСкладах.КОтгрузке
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|	ГДЕ
	|		(ТоварыНаСкладах.Регистратор, ТоварыНаСкладах.Склад, ТоварыНаСкладах.Номенклатура, ТоварыНаСкладах.Характеристика, ТоварыНаСкладах.Назначение) В
	|				(ВЫБРАТЬ
	|					ТаблицаТоваровДляЗапроса.Ссылка КАК Регистратор,
	|					ТаблицаТоваровДляЗапроса.Склад,
	|					ТаблицаТоваровДляЗапроса.Номенклатура,
	|					ТаблицаТоваровДляЗапроса.Характеристика,
	|					ТаблицаТоваровДляЗапроса.Назначение
	|				ИЗ
	|					ТаблицаТоваровДляЗапроса)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтгрузке.Склад,
	|		ТоварыКОтгрузке.Номенклатура,
	|		ТоварыКОтгрузке.Характеристика,
	|		ТоварыКОтгрузке.Серия,
	|		ТоварыКОтгрузке.Назначение,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОтгрузке.КОтгрузке + ТоварыКОтгрузке.ВРезерве
	|			ИНАЧЕ -ТоварыКОтгрузке.КОтгрузке - ТоварыКОтгрузке.ВРезерве
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|	ГДЕ
	|		(ТоварыКОтгрузке.Регистратор, ТоварыКОтгрузке.Склад, ТоварыКОтгрузке.Номенклатура, ТоварыКОтгрузке.Характеристика, ТоварыКОтгрузке.Назначение) В
	|				(ВЫБРАТЬ
	|					ТаблицаТоваровДляЗапроса.Ссылка КАК Регистратор,
	|					ТаблицаТоваровДляЗапроса.Склад,
	|					ТаблицаТоваровДляЗапроса.Номенклатура,
	|					ТаблицаТоваровДляЗапроса.Характеристика,
	|					ТаблицаТоваровДляЗапроса.Назначение
	|				ИЗ
	|					ТаблицаТоваровДляЗапроса)
	|		И ТоварыКОтгрузке.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК СерииТоваров
	|ГДЕ
	|	СерииТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииТоваров.Склад,
	|	СерииТоваров.Номенклатура,
	|	СерииТоваров.Характеристика,
	|	СерииТоваров.Назначение,
	|	СерииТоваров.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(СерииТоваров.СвободныйОстаток) > 0";
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Выполнить();
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуДанныеСерийЗаполнениеПоFIFO(Запрос)
	Запрос.Текст = "ВЫБРАТЬ
	|	СерииНоменклатуры.Ссылка КАК Серия,
	|	СерииНоменклатуры.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА НЕ ТТНВходящаяЕГАИС.ДатаОтгрузки ЕСТЬ NULL
	|			ТОГДА ТТНВходящаяЕГАИС.ДатаОтгрузки
	|		КОГДА НЕ ОтчетОбИмпорте.Дата ЕСТЬ NULL
	|			ТОГДА ОтчетОбИмпорте.Дата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОтгрузки
	|ПОМЕСТИТЬ ТаблицаДанныеСерий
	|ИЗ
	|	ТаблицаОстаткиТоваров КАК ТаблицаОстаткиТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ТаблицаОстаткиТоваров.Серия = СерииНоменклатуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|		ПО (СерииНоменклатуры.Справка2ЕГАИС = Справки2ЕГАИС.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
	|		ПО (Справки2ЕГАИС.ДокументОснование = ТТНВходящаяЕГАИС.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.битОтчетОбИмпортеПродукцииЕГАИС КАК ОтчетОбИмпорте
	|		ПО (Справки2ЕГАИС.бг_ДокументОснование = ОтчетОбИмпорте.Ссылка)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ ТТНВходящаяЕГАИС.ДатаОтгрузки ЕСТЬ NULL
	|				ТОГДА ТТНВходящаяЕГАИС.ДатаОтгрузки
	|			КОГДА НЕ ОтчетОбИмпорте.Дата ЕСТЬ NULL
	|				ТОГДА ОтчетОбИмпорте.Дата
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА НЕ ТТНВходящаяЕГАИС.ДатаОтгрузки ЕСТЬ NULL
	|				ТОГДА ТТНВходящаяЕГАИС.ДатаОтгрузки
	|			КОГДА НЕ ОтчетОбИмпорте.Дата ЕСТЬ NULL
	|				ТОГДА ОтчетОбИмпорте.Дата
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ <= &ДатаДокумента";
	
	Запрос.Выполнить();
КонецПроцедуры

Процедура ПодготовитьВременнуюТаблицуДанныеСерийФСМ(Запрос)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИдентификаторыМарок.НомерМарки КАК НомерМарки,
	|	ИдентификаторыМарок.ИдентификаторМарки КАК ИдентификаторМарки
	|ПОМЕСТИТЬ ИзрасходованныеМарки
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК ИдентификаторыМарок
	|		ПО (&ОтборДвиженийМарокПоРегистратору)
	|			И (ДвижениеМарок.Регистратор = &Ссылка)
	|			И (НЕ ДвижениеМарок.СтатусМарки = &СтатусМаркиПропущена)
	|			И ДвижениеМарок.ГУИДМарки = ИдентификаторыМарок.ГУИДМарки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыМарок.НомерМарки,
	|	ИдентификаторыМарок.ИдентификаторМарки
	|ИЗ
	|	РегистрСведений.бг_ДвижениеМарок КАК ДвижениеМарок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.бг_ИдентификаторыМарок КАК ИдентификаторыМарок
	|		ПО (&ОтборДвиженийМарокПоПериоду)
	|			И (ДвижениеМарок.Период = &Период)
	|			И (ТИПЗНАЧЕНИЯ(ДвижениеМарок.Регистратор) = ТИП(Документ.битДанныеСПроизводственнойЛинии))
	|			И ДвижениеМарок.ГУИДМарки = ИдентификаторыМарок.ГУИДМарки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстаткиТоваров.Серия КАК Серия,
	|	ТаблицаОстаткиТоваров.Серия.бг_ПолныйНачальныйНомерДиапазона КАК НачальныйНомерДиапазона,
	|	ТаблицаОстаткиТоваров.Серия.бг_ПолныйКонечныйНомерДиапазона КАК КонечныйНомерДиапазона
	|ПОМЕСТИТЬ СерииФСМ
	|ИЗ
	|	ТаблицаОстаткиТоваров КАК ТаблицаОстаткиТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НачальныйНомерДиапазона,
	|	КонечныйНомерДиапазона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерииФСМ.Серия КАК Серия,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИзрасходованныеМарки.ИдентификаторМарки) КАК КоличествоРасход
	|ПОМЕСТИТЬ втРасходСерийФСМ
	|ИЗ
	|	ИзрасходованныеМарки КАК ИзрасходованныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СерииФСМ КАК СерииФСМ
	|		ПО ИзрасходованныеМарки.НомерМарки >= СерииФСМ.НачальныйНомерДиапазона
	|			И ИзрасходованныеМарки.НомерМарки <= СерииФСМ.КонечныйНомерДиапазона
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииФСМ.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИзрасходованныеМарки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СерииФСМ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
КонецПроцедуры

Функция ТекстЗапросаДанныеЗаполнениеСерийПоFIFO()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.УпаковкаПаллета КАК УпаковкаПаллета
	|ИЗ
	|	ТаблицаТоваровДляЗапроса КАК ДанныеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстаткиТоваров.Склад КАК Склад,
	|	ТаблицаОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаОстаткиТоваров.Характеристика КАК Характеристика,
	|	ТаблицаОстаткиТоваров.Назначение КАК Назначение,
	|	ТаблицаОстаткиТоваров.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаОстаткиТоваров.Серия КАК Справочник.СерииНоменклатуры).бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ТаблицаОстаткиТоваров.СвободныйОстаток КАК СвободныйОстаток,
	|	ТаблицаДанныеСерий.Номер КАК Номер,
	|	ТаблицаДанныеСерий.ДатаОтгрузки КАК ДатаОтгрузки
	|ИЗ
	|	ТаблицаОстаткиТоваров КАК ТаблицаОстаткиТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныеСерий КАК ТаблицаДанныеСерий
	|		ПО ТаблицаОстаткиТоваров.Серия = ТаблицаДанныеСерий.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	ДатаОтгрузки,
	|	Номер,
	|	Серия";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаДанныеЗаполнениеСерийПоLIFO()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.УпаковкаПаллета КАК УпаковкаПаллета
	|ИЗ
	|	ТаблицаТоваровДляЗапроса КАК ДанныеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстаткиТоваров.Склад КАК Склад,
	|	ТаблицаОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаОстаткиТоваров.Характеристика КАК Характеристика,
	|	ТаблицаОстаткиТоваров.Назначение КАК Назначение,
	|	ТаблицаОстаткиТоваров.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаОстаткиТоваров.Серия КАК Справочник.СерииНоменклатуры).бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ТаблицаОстаткиТоваров.СвободныйОстаток КАК СвободныйОстаток,
	|	ТаблицаДанныеСерий.Номер КАК Номер,
	|	ТаблицаДанныеСерий.ДатаОтгрузки КАК ДатаОтгрузки
	|ИЗ
	|	ТаблицаОстаткиТоваров КАК ТаблицаОстаткиТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныеСерий КАК ТаблицаДанныеСерий
	|		ПО ТаблицаОстаткиТоваров.Серия = ТаблицаДанныеСерий.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	ДатаОтгрузки УБЫВ,
	|	Номер,
	|	Серия";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаДанныеЗаполнениеСерийПоДатеПроизводства()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.УпаковкаПаллета КАК УпаковкаПаллета
	|ИЗ
	|	ТаблицаТоваровДляЗапроса КАК ДанныеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстаткиТоваров.Склад КАК Склад,
	|	ТаблицаОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаОстаткиТоваров.Характеристика КАК Характеристика,
	|	ТаблицаОстаткиТоваров.Назначение КАК Назначение,
	|	ТаблицаОстаткиТоваров.Серия КАК Серия,
	|	ТаблицаОстаткиТоваров.СвободныйОстаток КАК СвободныйОстаток,
	|	СерииНоменклатуры.Номер КАК Номер,
	|	СерииНоменклатуры.ДатаПроизводства КАК ДатаПроизводства,
	|	СерииНоменклатуры.бг_УпаковкаПаллета КАК УпаковкаПаллета
	|ИЗ
	|	ТаблицаОстаткиТоваров КАК ТаблицаОстаткиТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|		ПО ТаблицаОстаткиТоваров.Серия = СерииНоменклатуры.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	ДатаПроизводства,
	|	Номер,
	|	Серия";
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаДанныеЗаполнениеСерийФСМ()
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДанныеДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.УпаковкаПаллета КАК УпаковкаПаллета
	|ИЗ
	|	ТаблицаТоваровДляЗапроса КАК ДанныеДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстаткиТоваров.Склад КАК Склад,
	|	ТаблицаОстаткиТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаОстаткиТоваров.Характеристика КАК Характеристика,
	|	ТаблицаОстаткиТоваров.Назначение КАК Назначение,
	|	ТаблицаОстаткиТоваров.Серия КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаОстаткиТоваров.Серия КАК Справочник.СерииНоменклатуры).бг_УпаковкаПаллета КАК УпаковкаПаллета,
	|	ВЫБОР
	|		КОГДА ТаблицаОстаткиТоваров.СвободныйОстаток > РасходСерийФСМ.КоличествоРасход
	|			ТОГДА РасходСерийФСМ.КоличествоРасход
	|		ИНАЧЕ ТаблицаОстаткиТоваров.СвободныйОстаток
	|	КОНЕЦ КАК СвободныйОстаток
	|ИЗ
	|	ТаблицаОстаткиТоваров КАК ТаблицаОстаткиТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРасходСерийФСМ КАК РасходСерийФСМ
	|		ПО ТаблицаОстаткиТоваров.Серия = РасходСерийФСМ.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение";
	Возврат ТекстЗапроса;
КонецФункции

Функция ДанныеДляЗаполненияСерий(Объект, ПараметрыУказанияСерий, Запрос)
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[0];
	ВыборкаНомераСтрок = РезультатЗапроса.Выбрать();
	
	СоответствиеОстатки = Новый Соответствие;
	
	РезультатЗапроса = МассивРезультатов[1];
	ВыборкаОстатки = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаОстатки.СледующийПоЗначениюПоля("Склад") Цикл
		СоответствиеОстатки.Вставить(ВыборкаОстатки.Склад, Новый Соответствие);
		СоответствиеСклад = СоответствиеОстатки[ВыборкаОстатки.Склад];
		
		Пока ВыборкаОстатки.СледующийПоЗначениюПоля("Номенклатура") Цикл
			СоответствиеСклад.Вставить(ВыборкаОстатки.Номенклатура, Новый Соответствие);
			СоответствиеНоменклатура = СоответствиеСклад[ВыборкаОстатки.Номенклатура];
			Пока ВыборкаОстатки.СледующийПоЗначениюПоля("Характеристика") Цикл
				СоответствиеНоменклатура.Вставить(ВыборкаОстатки.Характеристика, Новый Соответствие);
				СоответствиеХарактеристика = СоответствиеНоменклатура[ВыборкаОстатки.Характеристика];
				Пока ВыборкаОстатки.СледующийПоЗначениюПоля("Назначение") Цикл
					СоответствиеХарактеристика.Вставить(ВыборкаОстатки.Назначение, Новый Массив);
					МассивОстатки = СоответствиеХарактеристика[ВыборкаОстатки.Назначение]; // Массив
					Пока ВыборкаОстатки.Следующий() Цикл
						СтруктураОстаток = Новый Структура("Серия,УпаковкаПаллета,СвободныйОстаток");
						ЗаполнитьЗначенияСвойств(СтруктураОстаток,ВыборкаОстатки);
						МассивОстатки.Добавить(СтруктураОстаток);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("ВыборкаНомераСтрок, СоответствиеОстатки", ВыборкаНомераСтрок, СоответствиеОстатки);
КонецФункции

Процедура ЗаполнитьСерииВТЧТовары(Объект, Данные, ПараметрыУказанияСерий)
	ВыборкаНомераСтрок  = Данные.ВыборкаНомераСтрок;
	СоответствиеОстатки = Данные.СоответствиеОстатки;

	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураПересчета   = ЗаполнитьСтруктуруПересчета(Объект, ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	
	СкладВтабличнойЧасти = Ложь;
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЭтапПроизводства2_2" 
		Или ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказКлиента" Тогда
			СкладВтабличнойЧасти = Истина;
	КонецЕсли;
	
	ПодбиратьСерииКратноКоробкам = Ложь;
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказКлиента" Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "Контрагент, Организация, Дата");
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПодбиратьСерииКратноКоробкам = 
			РегистрыСведений.бг_НастройкиИспользованияПодбораСерийКратноУпаковкам.ПодбиратьСерииКратноКоробкам(
				Реквизиты.Контрагент,
				ВидНоменклатурыВЗаказеКлиента(Объект.Ссылка),
				Реквизиты.Организация,
				Реквизиты.Дата);

		УстановитьПривилегированныйРежим(Ложь);	

	КонецЕсли;
		
	НомерСтроки = 0;
	Пока ВыборкаНомераСтрок.Следующий() Цикл
		СтрокаТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][ВыборкаНомераСтрок.НомерСтроки + НомерСтроки - 1];
		ОстатокТовара = СтрокаТоваров.Количество;
		ИзменяемаяСтрока = СтрокаТоваров;
		
		Склад = ?(СкладВтабличнойЧасти, СтрокаТоваров.Склад, Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
		ОстаткиСерийПоТовару = ОстаткиСерийПоТовару(Склад, СтрокаТоваров, СоответствиеОстатки, ВыборкаНомераСтрок.Назначение);
		Если ОстаткиСерийПоТовару = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтруктураОстаток Из ОстаткиСерийПоТовару Цикл
			Если СтруктураОстаток.СвободныйОстаток = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаНомераСтрок.УпаковкаПаллета) 
				И ЗначениеЗаполнено(СтруктураОстаток.УпаковкаПаллета) 
				И ВыборкаНомераСтрок.УпаковкаПаллета <> СтруктураОстаток.УпаковкаПаллета Тогда
			    // Если в строке документа указана упаковка паллета, проверим,
				// что упаковка паллета в серии остатка соответствует.
				Продолжить;
			КонецЕсли;

			Если ПодбиратьСерииКратноКоробкам Тогда
				КоэффициентКоробки = 1;
				Коробка = бг_Номенклатура.КоробкаПаллеты(СтруктураОстаток.УпаковкаПаллета, КоэффициентКоробки);
				КоличествоНекратноеКоробам = ОстатокТовара - Цел(ОстатокТовара / КоэффициентКоробки) * КоэффициентКоробки;
			КонецЕсли;

			КоличествоВСтроку = Мин(ОстатокТовара, СтруктураОстаток.СвободныйОстаток);
			
			Если ПодбиратьСерииКратноКоробкам Тогда
				МожноРаспределить = бг_ЗаказыКлиентов.МожноРаспределитьСерииКратноКоробам(
					ОстатокТовара,
					СтруктураОстаток.СвободныйОстаток,
					Перечисления.бг_ПравилаОкругленияДоКороба.бг_РаспределятьСерииКратноКоробам,
					ИзменяемаяСтрока.Номенклатура,
					СтруктураОстаток.УпаковкаПаллета);
					
				Если МожноРаспределить = 0 
					И КоличествоНекратноеКоробам > 0 Тогда
					КоличествоВСтроку = Мин(КоличествоНекратноеКоробам, КоличествоВСтроку);
				ИначеЕсли МожноРаспределить > 0 Тогда
					КоличествоВСтроку = МожноРаспределить;
				Иначе
					Продолжить;
				КонецЕсли;

			КонецЕсли;

			ИзменяемаяСтрока.Количество = КоличествоВСтроку;
			ИзменяемаяСтрока.Серия = СтруктураОстаток.Серия;
			
			Если Не ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказКлиента" Тогда
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИзменяемаяСтрока, СтруктураПересчета, КэшированныеЗначения);
			КонецЕсли;
			
			ОстатокТовара = ОстатокТовара - ИзменяемаяСтрока.Количество;
			СтруктураОстаток.СвободныйОстаток = СтруктураОстаток.СвободныйОстаток - ИзменяемаяСтрока.Количество;
			
			Если ПодбиратьСерииКратноКоробкам
					И МожноРаспределить > 0
					И КоличествоНекратноеКоробам > 0
					И СтруктураОстаток.СвободныйОстаток > 0 Тогда
					
				МожноРаспределитьКоличествоНекратноеКоробам = Мин(КоличествоНекратноеКоробам, СтруктураОстаток.СвободныйОстаток);
				ИзменяемаяСтрока.Количество = КоличествоВСтроку + МожноРаспределитьКоличествоНекратноеКоробам;
				ОстатокТовара = ОстатокТовара - МожноРаспределитьКоличествоНекратноеКоробам;
				СтруктураОстаток.СвободныйОстаток = 
					СтруктураОстаток.СвободныйОстаток - МожноРаспределитьКоличествоНекратноеКоробам;
				КоличествоНекратноеКоробам = КоличествоНекратноеКоробам - МожноРаспределитьКоличествоНекратноеКоробам;

			КонецЕсли;
			
			Если ОстатокТовара > 0 Тогда
				НомерСтроки = НомерСтроки + 1;
				ИзменяемаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Вставить(ИзменяемаяСтрока.НомерСтроки);
				ЗаполнитьЗначенияСвойств(ИзменяемаяСтрока, СтрокаТоваров,, "Количество,КоличествоУпаковок,Серия");
				
				Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
					ИзменяемаяСтрока.КодСтроки = 0;
				КонецЕсли;
				
				ИзменяемаяСтрока.Количество = ОстатокТовара;
				Если Не ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказКлиента" Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ИзменяемаяСтрока, СтруктураПересчета, КэшированныеЗначения);
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказКлиента" Тогда
 		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		бг_ЗаказыКлиентов.СвернутьТЧТоварыЗаказаКлиента(Объект, СтруктураДействий);
		ОбработатьТЧТовары(Объект, ПараметрыУказанияСерий.ПолноеИмяОбъекта);
	КонецЕсли;

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
КонецПроцедуры

Функция ОстаткиСерийПоТовару(Склад, СтрокаТоваров, СоответствиеОстатки, Назначение)
	
	Если СоответствиеОстатки[Склад] = Неопределено
		Или СоответствиеОстатки[Склад][СтрокаТоваров.Номенклатура] = Неопределено
		Или СоответствиеОстатки[Склад][СтрокаТоваров.Номенклатура][СтрокаТоваров.Характеристика] = Неопределено
		Или СоответствиеОстатки[Склад][СтрокаТоваров.Номенклатура][СтрокаТоваров.Характеристика][Назначение] = Неопределено Тогда
		
		Остатки = Неопределено;
		
	Иначе
		
		Остатки = СоответствиеОстатки[Склад][СтрокаТоваров.Номенклатура][СтрокаТоваров.Характеристика][Назначение];
		
	КонецЕсли;
	
	Возврат Остатки;
	
КонецФункции

Функция ЗаполнитьСтруктуруПересчета(Объект, ПолноеИмяОбъекта)
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Если ПолноеИмяОбъекта = "Документ.ЗаказКлиента" Тогда	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", 
			Новый Структура(
			"БезВозвратнойТары,ОтмененоБезВозвратнойТары,Отменено",
			"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
			"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки",
			"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки,СуммаАвтоматическойСкидки"));
			
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
			// Если заполнение серий вызывается не из формы документа,
			// например, при программном создании расходных ордеров,
			// этих колонок нет, они только в форме.
			СтруктураДействий.Удалить("ЗаполнитьДубликатыЗависимыхРеквизитов");	
		КонецЕсли;	
	КонецЕсли;
		
	Возврат СтруктураДействий;
КонецФункции

Функция ШтрихкодыУпаковокНоменклатуры(Номенклатура, Упаковка = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
		|	УпаковкиЕдиницыИзмерения.Владелец КАК Номенклатура
		|ПОМЕСТИТЬ втУпаковкиНоменклатуры
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.Владелец = &Номенклатура
		|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления
		|	И (&НЕИспользоватьОтборПоУпаковке
		|			ИЛИ УпаковкиЕдиницыИзмерения.Ссылка = &Упаковка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втУпаковкиНоменклатуры.Упаковка КАК Упаковка,
		|	бг_Штрихкоды_ЕК_Номенклатуры.Штрихкод КАК Штрихкод
		|ИЗ
		|	втУпаковкиНоменклатуры КАК втУпаковкиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.бг_Штрихкоды_ЕК_Номенклатуры КАК бг_Штрихкоды_ЕК_Номенклатуры
		|		ПО втУпаковкиНоменклатуры.Упаковка = бг_Штрихкоды_ЕК_Номенклатуры.Владелец
		|ГДЕ
		|	НЕ бг_Штрихкоды_ЕК_Номенклатуры.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втУпаковкиНоменклатуры.Упаковка,
		|	ШтрихкодыНоменклатуры.Штрихкод
		|ИЗ
		|	втУпаковкиНоменклатуры КАК втУпаковкиНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО втУпаковкиНоменклатуры.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
		|			И втУпаковкиНоменклатуры.Упаковка = ШтрихкодыНоменклатуры.Упаковка";	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("НЕИспользоватьОтборПоУпаковке", Упаковка = Неопределено);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ШтрихкодыУпаковок = Новый Массив;
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();	
		Пока Выборка.Следующий() Цикл
			ДанныеШтрихкода = Новый Структура("Упаковка, Штрихкод");
			ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, Выборка);
			ШтрихкодыУпаковок.Добавить(ДанныеШтрихкода);	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

Функция ТребуютсяШтрихкодыУпаковокДляИнтеграцииWMS(Номенклатура)
	
	ВариантСинхронизацииWMS = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Номенклатура, "ВидНоменклатуры.бг_ВариантСинхронизацииWMS");
	ЕстьМаркируемаяАлкогольнаяПродукция = ЕстьМаркируемаяАлкогольнаяПродукция(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Номенклатура));
		
	ТребуютсяШтрихкодыУпаковок =  ЗначениеЗаполнено(ВариантСинхронизацииWMS) И ЕстьМаркируемаяАлкогольнаяПродукция;	
		
	Возврат ТребуютсяШтрихкодыУпаковок;
	
КонецФункции

Процедура ОбработатьТЧТовары(ДокументОбъект, ПолноеИмяОбъекта)
	
	КэшированныеЗначения 	= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураПересчета 		= ЗаполнитьСтруктуруПересчета(ДокументОбъект, ПолноеИмяОбъекта);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", ДокументОбъект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", ДокументОбъект.Соглашение);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", ДокументОбъект.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ВозвращатьМногооборотнуюТару", ДокументОбъект.ВернутьМногооборотнуюТару);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены, СрокПоставки");
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
			ДокументОбъект.Товары,, ПараметрыЗаполнения, СтруктураПересчета);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
	СкидкиНаценкиСервер.Рассчитать(ДокументОбъект, СтруктураПараметры);
	ДокументОбъект.СкидкиРассчитаны = Истина;
	
	Для каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
			СтрокаТоваров, 
			СтруктураПересчета, 
			КэшированныеЗначения);	
	КонецЦикла;
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ДокументОбъект, "Товары");
	
КонецПроцедуры

Функция ВидНоменклатурыВЗаказеКлиента(ЗаказКлиента)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказКлиентаТовары.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидНоменклатуры = Выборка.ВидНоменклатуры;
	КонецЦикла;
	
	Возврат ВидНоменклатуры;
	
КонецФункции

#КонецОбласти
