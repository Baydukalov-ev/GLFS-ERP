#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);	
			
КонецПроцедуры

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоSolvoПоСтруктуре(СтруктураОбъекта) И ЭтоИнформативныйСтатусSolvoПоСтруктуре(СтруктураОбъекта) Тогда
		
		ЗагружаемыйОбъект.СтатусSolvo = Перечисления.бг_СтатусыОтгрузкиSolvo[СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления];
		
	Иначе
		
		адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
			ЗагружаемыйОбъект,
			СтруктураОбъекта,,
			"Номер, Проведен");
		
		Если СтруктураОбъекта.ВариантЗагрузкиМарок = Перечисления.бг_ВариантыВыгрузкиАкцизныхМарок.ЧерезФайл Тогда
			ЗаполнитьМаркиУпаковкиИзФайла(ЗагружаемыйОбъект, СтруктураОбъекта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЗагружаемыйОбъект.Ссылка) Тогда
		
		ЗагружаемыйОбъект.ЗафиксироватьИзмененияПередЗаписью();
		
		Если Не ЗагружаемыйОбъект.ВДокументВнесеныВажныеИзменения() Тогда
			ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	НеобходимоПроводитьДокумент = НеобходимоПроводитьДокумент(ЗагружаемыйОбъект);
	
	Если НеобходимоПроводитьДокумент Тогда
		
		Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ПроводитьДокументыОтWMSОтложенно") Тогда
			
			ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить(
				"бг_НеРегистрироватьПоказателиЗаказаКлиентаКОбновлению",
				Истина);
				
			РегистрыСведений.бг_ОбъектыДляОтложеннойОбработки.ДобавитьОбъект(
				ЗагружаемыйОбъект.Ссылка,
				Перечисления.бг_ВариантыОтложеннойОбработкиОбъектов.ОбработатьДокументыWMS);
				
		КонецЕсли;
		
	Иначе
		
		Если ЗагружаемыйОбъект.Проведен
			И ЭтоSolvoПоОбъекту(ЗагружаемыйОбъект)
			И МенеджерДокумента().ОписаниеСтатусаSolvo(ЗагружаемыйОбъект.СтатусSolvo)
				<> МенеджерДокумента().ТипыСтатусовSolvo().КонечныйИнформативный Тогда
				
			// Если от Солво пришел откат статуса в обратную сторону.
			ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиДанныхОбъектаВИБ(ЗагружаемыйОбъект, РезультатОбработки) Экспорт
	
	Если Не РезультатОбработки.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Если бг_КонстантыПовтИсп.ЗначениеКонстанты("ПроводитьДокументыОтWMSОтложенно") Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоПроводитьДокумент = НеобходимоПроводитьДокумент(ЗагружаемыйОбъект);
	
	Если НеобходимоПроводитьДокумент Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Иначе
		Если ЗагружаемыйОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Попытка
		ЗагружаемыйОбъект.Записать(РежимЗаписи);
	Исключение
		
		ШапкаОшибки = ОписаниеОшибки();
		
		ТелоОшибки = "";
		Для каждого СообщениеПользователю Из ПолучитьСообщенияПользователю(Истина) Цикл
			ТелоОшибки = ТелоОшибки + ?(ПустаяСтрока(ТелоОшибки), "", Символы.ПС) + СообщениеПользователю.Текст;
		КонецЦикла;
		
		ТекстОшибки = ШапкаОшибки + Символы.ПС + ТелоОшибки;
		
		РегистрыСведений.бг_ДокументыИнтеграцииСоСкладскимиСистемами.ОбновитьСтатусДокумента(
			ЗагружаемыйОбъект.Ссылка,
			ТекущаяДатаСеанса(),
			Перечисления.бг_СтатусыДокументовИнтеграцииСоСкладскимиСистемами.ЗагруженБезОбработки,
			0,
			ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Номенклатура, 
		, 
		"КодЕК_Номенклатуры", 
		ОбщегоНазначения.ОписаниеТипаСтрока(8));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		Метаданные.Справочники.Номенклатура, 
		, 
		"КодЕК_ПОСМ", 
		ОбщегоНазначения.ОписаниеТипаСтрока(бг_НоменклатураИнтеграция.ДлинаКодаЕК_ПОСМ()));
	
КонецПроцедуры

Функция ЭтоSolvoПоСтруктуре(СтруктураОбъекта)
	
	Возврат СтруктураОбъекта.Свойство("СтатусSolvo")
		И СтруктураОбъекта.СтатусSolvo.Свойство("ЗначениеПеречисления")
		И ЗначениеЗаполнено(СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления)
		И Метаданные.Перечисления.бг_СтатусыОтгрузкиSolvo.ЗначенияПеречисления.Найти(
			СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления) <> Неопределено;
			
КонецФункции

Функция ЭтоSolvoПоОбъекту(ДокументОбъект)
	
	Возврат ДокументОбъект.ТипВнешнейСкладскойСистемы = Перечисления.бг_ТипыВнешнихСкладскихСистем.Solvo;
	
КонецФункции

Функция ЭтоИнформативныйСтатусSolvoПоСтруктуре(СтруктураОбъекта)
	
	ИмяСтатуса = СтруктураОбъекта.СтатусSolvo.ЗначениеПеречисления;
	
	ОписаниеСтатуса = МенеджерДокумента().ОписаниеСтатусаSolvo(, ИмяСтатуса);
	ТипыСтатусов = МенеджерДокумента().ТипыСтатусовSolvo();
	
	Возврат ОписаниеСтатуса = ТипыСтатусов.НачальныйИнформативный
		Или ОписаниеСтатуса = ТипыСтатусов.КонечныйИнформативный;
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты в шапку сообщения		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"ВариантЗагрузкиМарок",
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ВариантыВыгрузкиАкцизныхМарок"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		, // ИмяРеквизита
		"АдресФайлаМарок",
		ОбщегоНазначения.ОписаниеТипаСтрока(500));

КонецПроцедуры

Процедура ЗаполнитьМаркиУпаковкиИзФайла(ЗагружаемыйОбъект, СтруктураОбъекта)
	
	ДанныеМарокУпаковок = бг_МаркируемаяПродукция.ДанныеМарокУпаковокИзФайла(СтруктураОбъекта.АдресФайлаМарок);
	
	Если ЭтоSolvoПоСтруктуре(СтруктураОбъекта) Тогда
		
		бг_МаркируемаяПродукция.ЗаполнитьТаблицуОбъектаПоДаннымМарокУпаковокИзФайла(
			ЗагружаемыйОбъект, "Марки", ДанныеМарокУпаковок);
			
		бг_МаркируемаяПродукция.ЗаполнитьТаблицуОбъектаПоДаннымМарокУпаковокИзФайла(
			ЗагружаемыйОбъект, "Упаковки", ДанныеМарокУпаковок);
			
	Иначе
		
		бг_МаркируемаяПродукция.ЗаполнитьТаблицуОбъектаПоДаннымМарокУпаковокИзФайла(
			ЗагружаемыйОбъект, "Штрихкоды", ДанныеМарокУпаковок);
			
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоПроводитьДокумент(ДокументОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.ТипВнешнейСкладскойСистемы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоSolvo = ЭтоSolvoПоОбъекту(ДокументОбъект);
	
	Если ЭтоSolvo И Не ЗначениеЗаполнено(ДокументОбъект.СтатусSolvo) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоSolvo И ЭтоСтатусSolvoСогласованиеСЕРП(ДокументОбъект) Или Не ЭтоSolvo;
	
КонецФункции

Функция МенеджерДокумента()
	
	Возврат Документы.битОтражениеФактаПоРасходномуОрдеру;
	
КонецФункции

Функция ЭтоСтатусSolvoСогласованиеСЕРП(ДокументОбъект)
	
	Возврат МенеджерДокумента().ОписаниеСтатусаSolvo(ДокументОбъект.СтатусSolvo)
		= МенеджерДокумента().ТипыСтатусовSolvo().СогласованиеСЕРП;
	
КонецФункции


#КонецОбласти
