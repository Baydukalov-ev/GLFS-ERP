#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты = ВыгружаемыеРеквизиты();
    ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты);
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		Реквизиты);	

	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства);
	
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт

	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	ТекстПоиска = "NULL КАК Представление";
	ТекстЗамены = "ВыгружаемыйОбъект.Представление КАК Представление";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстПоиска = "ВыгружаемыйОбъект.Товары.Номенклатура.КодЕК_Номенклатуры КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";
	ТекстЗамены = "ЕСТЬNULL(ВыгружаемыйОбъект.Товары.Серия.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры, """") КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстПоиска = "
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ВыгружаемыйОбъект";
	ТекстЗамены = "
		|	, ВыгружаемыйОбъект.Склад.бг_Организация.Префикс КАК ПрефиксОрганизацииСклада
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ВыгружаемыйОбъект";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстЗапросаТаблицаКлючей = бг_ОбщегоНазначенияСервер.ТекстЗапросаБезОбращенияЧерезТочкуКNull(ТекстЗапросаТаблицаКлючей);
	
	РеквизитыАдресов = Новый Структура();
	
	РеквизитыАдресов.Вставить("Организация", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("Контрагент", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("Грузополучатель", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("Грузоотправитель", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ПунктПогрузки", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ПунктРазгрузки", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("бг_ЗаказРозничногоПокупателя_ЗначениеРеквизитабг_ПунктНазначения", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("бг_ЗаказРозничногоПокупателя_ЗначениеРеквизитаКонтрагент", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("бг_ПунктНазначения", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ЗаказКлиента_ЗначениеРеквизитабг_ПунктНазначения", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ЗаказКлиента_ЗначениеРеквизитаКонтрагент", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ОбъектРасчетов_ЗначениеРеквизитаОбъект_ЗначениеРеквизитабг_ПунктНазначения", "ЮридическийАдрес,ФактическийАдрес");
	РеквизитыАдресов.Вставить("ОбъектРасчетов_ЗначениеРеквизитаОбъект_ЗначениеРеквизитаКонтрагент", "ЮридическийАдрес,ФактическийАдрес");
	ЗаменитьNullНаПустуюСтрокуВРеквизитахАдресов(ТекстЗапроса, РеквизитыАдресов);	

	Если ТипЗнч(Объект) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ЗначениеЗаполнено(Объект) Тогда
		ПунктРазгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ЗаказКлиента.бг_ПунктНазначения");
		Если Не ЗначениеЗаполнено(ПунктРазгрузки) Тогда
			Грузополучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Грузополучатель"); 
			ПунктРазгрузки = бг_ТранспортнаяЛогистика.ПунктНазначенияГрузополучателя(Объект.Грузополучатель);
			Если ЗначениеЗаполнено(ПунктРазгрузки) Тогда
				ТекстЗапроса = СтрЗаменить(
					ТекстЗапроса, 
					"ВыгружаемыйОбъект.ЗаказКлиента.бг_ПунктНазначения",
					"ВЫРАЗИТЬ(&ПунктРазгрузки КАК Справочник.битПунктыНазначения)");	
				СтандартнаяОбработка = Ложь;
				адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса,
				                                                                       ТекстЗапросаТаблицаКлючей,
				                                                                       ПараметрыЗапроса,
																					   НастройкаВыгрузки,
																					   Объект);
				ПараметрыЗапроса.Вставить("ПунктРазгрузки", ПунктРазгрузки);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;		
	
КонецПроцедуры

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеСообщения.МетаданныеОбъекта = Метаданные.Документы.РеализацияТоваровУслуг Тогда
		
		Результат = Истина;
		Если Не ЗарегистрироватьCRM(ДанныеСообщения) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "бг_ЗагруженИзУПП") Тогда
			ТекстОшибки = НСтр("ru = 'Документ загружен из УПП'"); 
			ДанныеСообщения.ТекстОшибки = ТекстОшибки;
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = 
		адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	Если ЗарегистрироватьDESADV(ДанныеСообщения) Тогда
		КлючМаршрутизации = КлючМаршрутизации + ".SAP";
	ИначеЕсли ЗарегистрироватьCRM(ДанныеСообщения) Тогда	
		КлючМаршрутизации = КлючМаршрутизации + ".CRM";
	Иначе
		КлючМаршрутизации = КлючМаршрутизации + ".ERP";
	КонецЕсли;
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Если ДанныеОбъекта.Реквизиты.Количество() = 0 Тогда
		Возврат ДанныеОбъекта;
	КонецЕсли;	
	
	РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
	
	РегистрацияDESADV = ЗарегистрироватьDESADV(ДанныеСообщения);
	ТоварыРеализации = Неопределено;
	Если РегистрацияDESADV Тогда
		ЗаполнитьРеквизитыВыгружаемогоОбъектаSAP(РеквизитыОбъекта, Объект);
		ЗаполнитьРеквизитыАдресовВыгружаемогоОбъекта(РеквизитыОбъекта, Объект);
		Если РеквизитыОбъекта.Свойство("Товары") Тогда
			Для Каждого СтрокаТЧ Из РеквизитыОбъекта.Товары Цикл
				ЗаполнитьРеквизитыСтрокиТЧТоварыВыгружаемогоОбъектаSAP(СтрокаТЧ);
			КонецЦикла;
			ТоварыРеализации = ТаблицаТоваровИзМассиваСтрокРеквизитов(РеквизитыОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыТТНИсходящейЕГАИС(РеквизитыОбъекта, Объект, РегистрацияDESADV, ТоварыРеализации);
	
	Если РегистрацияDESADV 
		И РеквизитыОбъекта.Свойство("Товары") Тогда
		Товары = Новый Массив;
		Для Каждого СтрокаТоваровРеализации Из ТоварыРеализации Цикл
			Товары.Добавить(СтрокаТоваровРеализации.СтрокаРеквизитов);
		КонецЦикла;
		РеквизитыОбъекта.Вставить("Товары", Товары);
	КонецЕсли;
	
	СписокРеквизитов = Новый Массив;
	СписокРеквизитов.Добавить("Дата");
	СписокРеквизитов.Добавить("Валюта");
	СписокРеквизитов.Добавить("бг_ПунктНазначения");
	СписокРеквизитов.Добавить("бг_ЗаказРозничногоПокупателя");
	СписокРеквизитов.Добавить("бг_ЗаказРозничногоПокупателя.бг_ПунктНазначения");
	
	ЗначенияРеквизитовОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, СписокРеквизитов);	

	ЗаполнитьКурсВалютыВыгружаемогоОбъекта(
		РеквизитыОбъекта,
		ЗначенияРеквизитовОбъекта.Дата,
		ЗначенияРеквизитовОбъекта.Валюта);

	ЗаполнитьМенеджеровВыгружаемогоОбъекта(РеквизитыОбъекта, ДанныеСообщения, ЗначенияРеквизитовОбъекта);		
    ЗаполнитьТаблицыДляCRMВыгружаемогоОбъекта(Объект, РеквизитыОбъекта, ДанныеСообщения, ЗначенияРеквизитовОбъекта);
	
	Если РеквизитыОбъекта.Свойство("Товары") Тогда
		// Уберем служебные реквизиты строки ТЧ, которые 
		// были добавлены для получения данных выгружаемого объекта и не нужны для выгрузки.
		Для Каждого СтрокаТЧ Из РеквизитыОбъекта.Товары Цикл
			Если СтрокаТЧ.Свойство("КодСтроки") Тогда
				СтрокаТЧ.Удалить("КодСтроки");		
			КонецЕсли;
			Если СтрокаТЧ.Свойство("ЗаказКлиента") Тогда
				СтрокаТЧ.Удалить("ЗаказКлиента");		
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
		
	ДанныеСообщения.RoutingKey = КлючМаршрутизацииПоДаннымВыгружаемогоОбъекта(
		РеквизитыОбъекта, ДанныеСообщения);
	ДанныеСообщения.Заголовки.КлючМаршрутизации = ДанныеСообщения.RoutingKey;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ЗаголовкиИсходящегоСообщения(ДанныеСообщения, Объект, НастройкаВыгрузки) Экспорт
	
	Если ДанныеСообщения.Свойство("RoutingKey")
		И СтрНайти(ДанныеСообщения.RoutingKey, ".SAP") > 0 Тогда
		Возврат бг_ИнтеграцияSAP.ЗаголовкиИсходящегоСообщенияJMS(ДанныеСообщения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта,
	СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный; 
	Перем адаптер_РаботаСДаннымиИБ;    
	
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	СтандартнаяОбработка = Ложь;
	
	ДействияПослеЗаписиОбъектаВБД = Новый Структура;
	ЭтоНовый = ЗагружаемыйОбъект.ЭтоНовый();
	
	ЗаполнитьРеквизитыВСтруктуре(СтруктураОбъекта);
	ДобавитьКонстантыВСтруктуруОбъекта(СтруктураОбъекта);
	
	Если ОбновитьТолькоНомер(ЗагружаемыйОбъект, СтруктураОбъекта, ЭтоНовый) Тогда
		ЗагружаемыйОбъект.бг_НомерДокументаУПП = СтруктураОбъекта.Номер;
		ОбновитьЗаписьТранспортнойИнформации(ЗагружаемыйОбъект);
		Возврат;
	КонецЕсли;
	
	Если Не ЗагружатьДокумент(СтруктураОбъекта, ЗагружаемыйОбъект) Тогда
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Возврат;
	КонецЕсли;
	
	ПодготовитьТаблицуТоваровРТиУ(СтруктураОбъекта);
	
	ЗаказСуществуетВБазе = ОбщегоНазначения.СсылкаСуществует(СтруктураОбъекта.ЗаказКлиента);
	
	Если СтруктураОбъекта.Проведен
		И ЗаказСуществуетВБазе Тогда
		
		ДобавитьДействияПослеЗаписиОбъектаВБД(СтруктураОбъекта, ДействияПослеЗаписиОбъектаВБД);
		
		Если Не ЭтоНовый Тогда
			ЗагружаемыйОбъект.бг_ЗагруженБезДвижений = Ложь;
		КонецЕсли;
		
		ОшибкаОбновленияЗаказа = Ложь;
		ОбновитьЗаказКлиента(СтруктураОбъекта.ЗаказКлиента, СтруктураОбъекта, ОшибкаОбновленияЗаказа);
		
		Если ОшибкаОбновленияЗаказа Тогда
			Если Не СтруктураОбъекта.СперваЗаписыватьПотомПроводитьВходящуюРТУ Тогда
				ВызватьИсключение
					СтрШаблон(НСтр("ru = 'Не удалось обновить заказ клиента %1'"), СтруктураОбъекта.ЗаказКлиента);
			КонецЕсли;
		КонецЕсли;
		
		ЗагружаемыйОбъект.Товары.Очистить();
		ЗагружаемыйОбъект.Заполнить(СтруктураОбъекта.ЗаказКлиента);
		
		Если ЗагружаемыйОбъект.Товары.Количество() = 0 Тогда
			ЗаполнитьТоварыИзЗаказаКлиента(ЗагружаемыйОбъект, СтруктураОбъекта.ЗаказКлиента);	
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("бг_ЗагруженИзУПП", СтруктураОбъекта.Проведен);
	СтруктураОбъекта.Вставить("бг_НомерДокументаУПП", СтруктураОбъекта.Номер);
	СтруктураОбъекта.Вставить("СкидкиРассчитаны", Истина);
	СтруктураОбъекта.Вставить("Товары", Неопределено);
	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта);
	
	ЗаполнитьЦеныПоДаннымСообщения(ЗагружаемыйОбъект, СтруктураОбъекта.ТаблицаТовары);
	
	ЗагружаемыйОбъект.ОбменДанными.Загрузка = СтруктураОбъекта.ЗаписыватьРТиУВРежимеОбменДаннымиЗагрузкаИстина;
	
	Если ЗагружаемыйОбъект.Проведен Тогда
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить(
			"бг_ДействияПослеЗаписиОбъектаВБД", ДействияПослеЗаписиОбъектаВБД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("СтандартнаяЗаписьНеТребуется")
		И ЗагружаемыйОбъект.ДополнительныеСвойства.СтандартнаяЗаписьНеТребуется Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.Проведен И ЗагружаемыйОбъект.ОбменДанными.Загрузка Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	ИначеЕсли бг_КонстантыПовтИсп.ЗначениеКонстанты("СперваЗаписыватьПотомПроводитьВходящуюРТУ")
		И ЗагружаемыйОбъект.ЭтоНовый() Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗагружаемыйОбъект.Проведен = Ложь;
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("бг_ПровестиПослеЗаписиДанныхОбъектаВИБ", Истина);
		ЗагружаемыйОбъект.ОбменДанными.Загрузка = Истина;
		ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиДанныхОбъектаВИБ(ЗагружаемыйОбъект, РезультатОбработки) Экспорт
	
	Если Не РезультатОбработки.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("СтандартнаяЗаписьНеТребуется")
		И ЗагружаемыйОбъект.ДополнительныеСвойства.СтандартнаяЗаписьНеТребуется = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство("бг_ПровестиПослеЗаписиДанныхОбъектаВИБ")
		И ЗагружаемыйОбъект.ДополнительныеСвойства.бг_ПровестиПослеЗаписиДанныхОбъектаВИБ Тогда
		
		ЗагружаемыйОбъект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			ЗагружаемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации(
				"адаптер_ПроведениеВходящейРТУ",
				УровеньЖурналаРегистрации.Ошибка,,,
				СтрШаблон(
					НСтр("ru='Ошибка проведения входящей РТУ %1:
						| %2'"),
					ЗагружаемыйОбъект.Ссылка,
					ОписаниеОшибки));
		КонецПопытки;
	КонецЕсли;
	
	Если Не ЗагружаемыйОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ДействияПослеЗаписиОбъектаВБД = Неопределено;
	ЗагружаемыйОбъект.ДополнительныеСвойства.Свойство(
		"бг_ДействияПослеЗаписиОбъектаВБД", ДействияПослеЗаписиОбъектаВБД);
	Если Не ЗначениеЗаполнено(ДействияПослеЗаписиОбъектаВБД) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Если ДействияПослеЗаписиОбъектаВБД.Свойство(
		"СоздатьОбновитьДокументСчетФактураВыданный", ДополнительныеПараметры) Тогда
		СоздатьПодчиненныйДокументСчетФактураВыданный(ЗагружаемыйОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	ДополнительныеПараметры = Неопределено;
	Если ДействияПослеЗаписиОбъектаВБД.Свойство(
		"СоздатьОбновитьТТНИсходящаяЕГАИС", ДополнительныеПараметры) Тогда
		СоздатьПодчиненныйДокументТТНИсходящаяЕГАИС(ЗагружаемыйОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьСвязанныеОбъекты(Объект) Экспорт
	
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	Если Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ИзмененНомер(ДополнительныеСвойства) Тогда
		ДополнительныеСвойстваРеализации = Новый Структура("ЗарегистрироватьCRM");	
		бг_ОбщегоНазначенияСервер.ЗарегистрироватьИсходящееСообщениеПриЗаписи(Объект.Ссылка,
			ДополнительныеСвойстваРеализации); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // Конец ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область Выгрузка
	
Функция ВыгружаемыеРеквизиты()
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("АдресДоставки");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетОрганизации");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетГрузоотправителя");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетГрузополучателя");
	ВыгружаемыеРеквизиты.Добавить("Валюта");
	ВыгружаемыеРеквизиты.Добавить("ВалютаВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("Грузоотправитель");
	ВыгружаемыеРеквизиты.Добавить("Грузополучатель");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьВыдана");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьДата");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьЛицо");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьНомер");
	ВыгружаемыеРеквизиты.Добавить("ЗаказКлиента");
	ВыгружаемыеРеквизиты.Добавить("Организация");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("НалогообложениеНДС");
	ВыгружаемыеРеквизиты.Добавить("СуммаДокумента");
	ВыгружаемыеРеквизиты.Добавить("Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Склад");
	ВыгружаемыеРеквизиты.Добавить("СуммаВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("ХозяйственнаяОперация");
	ВыгружаемыеРеквизиты.Добавить("ЦенаВключаетНДС");
	ВыгружаемыеРеквизиты.Добавить("Отпустил");
	ВыгружаемыеРеквизиты.Добавить("ОтпустилДолжность");
	ВыгружаемыеРеквизиты.Добавить("Договор");
	ВыгружаемыеРеквизиты.Добавить("Основание");
	ВыгружаемыеРеквизиты.Добавить("Автор");
	ВыгружаемыеРеквизиты.Добавить("Руководитель");
	ВыгружаемыеРеквизиты.Добавить("ГлавныйБухгалтер");
	ВыгружаемыеРеквизиты.Добавить("ОснованиеДата");
	ВыгружаемыеРеквизиты.Добавить("ОснованиеНомер");
	ВыгружаемыеРеквизиты.Добавить("ИдентификаторПлатежа");
	ВыгружаемыеРеквизиты.Добавить("КурсЧислитель");
	ВыгружаемыеРеквизиты.Добавить("КурсЗнаменатель");
	ВыгружаемыеРеквизиты.Добавить("ЕстьМаркируемаяПродукцияГИСМ");
	ВыгружаемыеРеквизиты.Добавить("ОплатаВВалюте");
	
	// Реквизиты шапки из расширения
	ВыгружаемыеРеквизиты.Добавить("бг_ДанныеТранспортнаяНакладная");
	ВыгружаемыеРеквизиты.Добавить("бг_Лицензия");
	ВыгружаемыеРеквизиты.Добавить("бг_ПунктНазначения");
	ВыгружаемыеРеквизиты.Добавить("бг_ЗаказРозничногоПокупателя");
	ВыгружаемыеРеквизиты.Добавить("бг_ЕстьАлкогольнаяПродукция");

	// Реквизиты ТЧ "Товары"
	ВыгружаемыеРеквизиты.Добавить("Товары.ЗаказКлиента");
	ВыгружаемыеРеквизиты.Добавить("Товары.КлючСвязи");
	ВыгружаемыеРеквизиты.Добавить("Товары.КодТНВЭД");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	ВыгружаемыеРеквизиты.Добавить("Товары.КоличествоУпаковок");
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Товары.ПроцентРучнойСкидки");
	ВыгружаемыеРеквизиты.Добавить("Товары.ПроцентАвтоматическойСкидки");
	ВыгружаемыеРеквизиты.Добавить("Товары.Серия");
	ВыгружаемыеРеквизиты.Добавить("Товары.Склад");
	ВыгружаемыеРеквизиты.Добавить("Товары.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаРучнойСкидки");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаСНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Упаковка");
	ВыгружаемыеРеквизиты.Добавить("Товары.Цена");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_ДокументОснованиеПоступлениеОтПоставщика");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_СуммаАкциза");
	
	//Реквизиты ТЧ "СкидкиНаценки"
	ВыгружаемыеРеквизиты.Добавить("СкидкиНаценки.КлючСвязи");
	ВыгружаемыеРеквизиты.Добавить("СкидкиНаценки.СкидкаНаценка");
	ВыгружаемыеРеквизиты.Добавить("СкидкиНаценки.Сумма");
	ВыгружаемыеРеквизиты.Добавить("СкидкиНаценки.Количество");
	
	//Реквизиты ТЧ "ЭтапыГрафикаОплаты"
	ВыгружаемыеРеквизиты.Добавить("ЭтапыГрафикаОплаты.ВариантОтсчета");
	ВыгружаемыеРеквизиты.Добавить("ЭтапыГрафикаОплаты.Сдвиг");
	
	//Реквизиты ТЧ "РасшифровкаПлатежа"
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сумма");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Представление",
		ОбщегоНазначения.ОписаниеТипаСтрока(100),
		));
	
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ТТНИсходящаяЕГАИС",
		Новый ОписаниеТипов("ДокументСсылка.ТТНИсходящаяЕГАИС"),
		));
				
	ВыгружаемыеРеквизиты.Добавить("Товары.КодСтроки");	
	ВыгружаемыеРеквизиты.Добавить("Товары.ЗаказКлиента");
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты)

	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ПунктПогрузки",
		Новый ОписаниеТипов("СправочникСсылка.битПунктыНазначения"),
		"Склад.бг_ПунктНазначения"));

	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ПунктРазгрузки",
		Новый ОписаниеТипов("СправочникСсылка.битПунктыНазначения"),
		"ЗаказКлиента.бг_ПунктНазначения"));
		
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ЗаказКлиентаОтгрузкаИзERP",
		Новый ОписаниеТипов("Булево"),
		"ЗаказКлиента.бг_ОтгрузкаИзERP"));

КонецПроцедуры	

Процедура ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ДлинаСтроки1000 = 1000;
	ОписаниеТипаСтрока1000 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки1000);

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ЗаказКлиента,
		"Контрагент",
		,
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ЗаказКлиента,
		"бг_ПунктНазначения",
		,
		Новый ОписаниеТипов("СправочникСсылка.битПунктыНазначения"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ФизическоеЛицо",
		,
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"Должность",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ПравоПодписиПоДоверенности",
		,
		Новый ОписаниеТипов("Булево"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ОснованиеПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДатаНачала",
		,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДатаОкончания",
		,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДокументПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"НомерДокументаПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(20));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДатаДокументаПраваПодписи",
		,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОтветственныеЛицаОрганизаций,
		"ДолжностьСсылка",
		,
		Новый ОписаниеТипов("СправочникСсылка.Должности"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Должности,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ФизическиеЛица,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(100));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ТоварнаяКатегория",
		,
		Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));
						
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"КодЕК_Номенклатуры");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ТипНоменклатуры",
		,
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	#Область Реквизиты_добавленные_для_выгрузки_в_SAP
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Валюты,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(10));

	#Область Реквизиты_организации
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"ИНН",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(12));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"НаименованиеПолное",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(250));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"КПП",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(9));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"КодПоОКПО",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(10));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"бг_КодSAP",
		"КодSAP",
		ОбщегоНазначения.ОписаниеТипаСтрока(4));
	#КонецОбласти	

	#Область Реквизиты_контрагента
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		"НаименованиеПолное",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(250));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		"КодПоОКПО",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(10));
	#КонецОбласти	

	#Область Реквизиты_пунктов_назначения
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(150));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Клиент.КПП",
		"КПП",
		ОбщегоНазначения.ОписаниеТипаСтрока(9));
	#КонецОбласти	

	#Область Реквизиты_серий_номенклатуры
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СерииНоменклатуры,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(150));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СерииНоменклатуры,
		"ГоденДо",
		,
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СерииНоменклатуры,
		"ПроизводительЕГАИС",
		,
		Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));

		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СерииНоменклатуры,
		"Справка2ЕГАИС",
		,
		Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Справки2ЕГАИС,
		"РегистрационныйНомер",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(128));
	#КонецОбласти	

	#Область Реквизиты_классификатора_организаций_ЕГАИС
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.КлассификаторОрганизацийЕГАИС,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(128));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.КлассификаторОрганизацийЕГАИС,
		"ИНН",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(12));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.КлассификаторОрганизацийЕГАИС,
		"КПП",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(9));
	#КонецОбласти	

	#Область Реквизиты_номенклатуры
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"НаименованиеПолное",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(1024));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		,
		"КодНоменклатурыSAP",
		ОбщегоНазначения.ОписаниеТипаСтрока(18));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ЕдиницаИзмерения",
		,
		Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ВесЧислитель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ВесЗнаменатель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));

		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ОбъемЧислитель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ОбъемЗнаменатель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ОбъемДАЛ",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(18, 6, ДопустимыйЗнак.Неотрицательный));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"Крепость",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(5, 3, ДопустимыйЗнак.Неотрицательный));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ВидАлкогольнойПродукции",
		,
		Новый ОписаниеТипов("СправочникСсылка.ВидыАлкогольнойПродукции"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ВидыАлкогольнойПродукции,
		"Код",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(5));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ВидыАлкогольнойПродукции,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(128));
#КонецОбласти	

	#Область Реквизиты_упаковки_ЕдиницыИзмерения
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(50));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"НаименованиеПолное",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(100));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Числитель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"Знаменатель",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный));
	#КонецОбласти	

	#КонецОбласти
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"КодТТSY",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(9));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Адрес", ,
		ОписаниеТипаСтрока1000);
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей,
		"Наименование",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(25));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_МаршрутыТорговыхПредставителей,
		"Код",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(25));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СкидкиНаценки,
		"бг_ТипСкидкиНаценкиCRM",
		,
		Новый ОписаниеТипов("СправочникСсылка.бг_ТипыСкидокНаценокCRM"));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СкидкиНаценки,
		"бг_КодСтрокиБюджета",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(12));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"бг_КодЕК_Номенклатуры",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(8));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		"бг_КодКлиентаSY",
		"КодSY");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"бг_Тикер");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ОбъектыРасчетов,
		"Объект",,
		Метаданные.ОпределяемыеТипы.ОбъектРасчетов.Тип);
	
	бг_ПриобретениеТоваровУслугИнтеграция.ДобавитьКлючевыеПоляПервичногоДокумента(РеквизитыИСвойства);

КонецПроцедуры

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"КоличествоЗаказовПоНомеруSAP",
		ОбщегоНазначения.ОписаниеТипаЧисло(5,0));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		,
		"ЮридическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		,
		"ЮридическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		,
		"ФактическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		,
		"ФактическийАдрес",
		Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Товары.Номер",
		ОбщегоНазначения.ОписаниеТипаСтрока(30));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"Товары.КодПозицииЗаказа",
		ОбщегоНазначения.ОписаниеТипаСтрока(5));
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"КурсВалюты",
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 5));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_Менеджер",
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_МаршрутТорговогоПредставителя",
		Новый ОписаниеТипов("СправочникСсылка.бг_МаршрутыТорговыхПредставителей"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"бг_ЭТК",
		Новый ОписаниеТипов("Булево"));
		
	#Область ТаблицыДляCRM
    // Виртуальные ТЧ ТоварыCRM и СкидкиCRM используются в том случае, если происходит продажа по схеме Розницы.
	// В них помещается пересчитанная информация по розничному заказу по товарам и скидкам.
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТоварыCRM.Номенклатура",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТоварыCRM.КлючСвязи",
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТоварыCRM.Количество",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТоварыCRM.Сумма",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТоварыCRM.СуммаНДС",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТоварыCRM.СуммаСНДС",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"ТоварыCRM.СуммаРучнойСкидки",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"СкидкиCRM.КлючСвязи",
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"СкидкиCRM.СкидкаНаценка",
		Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		,
		"СкидкиCRM.Сумма",
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	#КонецОбласти
		
	ДобавитьРеквизитыАдресаКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры	

Функция ДанныеСкидокИТоваровCRM(Реализация, ЗаказКлиента)
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_КоличествоНоменклатурыЗаказаКлиента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_КоличествоНоменклатурыРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Реализация
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_КоличествоНоменклатурыЗаказаКлиента.Номенклатура, ВТ_КоличествоНоменклатурыРеализации.Номенклатура) КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ВТ_КоличествоНоменклатурыЗаказаКлиента.Количество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_КоличествоНоменклатурыРеализации.Количество / ВТ_КоличествоНоменклатурыЗаказаКлиента.Количество
	|	КОНЕЦ КАК Соотношение
	|ПОМЕСТИТЬ ВТ_СоотношениеНоменклатуры
	|ИЗ
	|	ВТ_КоличествоНоменклатурыЗаказаКлиента КАК ВТ_КоличествоНоменклатурыЗаказаКлиента
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_КоличествоНоменклатурыРеализации КАК ВТ_КоличествоНоменклатурыРеализации
	|		ПО ВТ_КоличествоНоменклатурыЗаказаКлиента.Номенклатура = ВТ_КоличествоНоменклатурыРеализации.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.КлючСвязи КАК КлючСвязи,
	|	ВЫРАЗИТЬ(ЗаказКлиентаТовары.Количество * ЕСТЬNULL(ВТ_СоотношениеНоменклатуры.Соотношение, 0) КАК ЧИСЛО(15, 0)) КАК Количество,
	|	ВЫРАЗИТЬ(ЗаказКлиентаТовары.Сумма * ЕСТЬNULL(ВТ_СоотношениеНоменклатуры.Соотношение, 0) КАК ЧИСЛО(15, 2)) КАК Сумма,
	|	ВЫРАЗИТЬ(ЗаказКлиентаТовары.СуммаНДС * ЕСТЬNULL(ВТ_СоотношениеНоменклатуры.Соотношение, 0) КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ЗаказКлиентаТовары.СуммаСНДС * ЕСТЬNULL(ВТ_СоотношениеНоменклатуры.Соотношение, 0) КАК ЧИСЛО(15, 2)) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ЗаказКлиентаТовары.СуммаРучнойСкидки * ЕСТЬNULL(ВТ_СоотношениеНоменклатуры.Соотношение, 0) КАК ЧИСЛО(15, 2)) КАК СуммаРучнойСкидки,
	|	ЕСТЬNULL(ВТ_СоотношениеНоменклатуры.Соотношение, 0) КАК Соотношение,
	|	ЗаказКлиентаТовары.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры КАК КодЕК_Номенклатуры
	|ПОМЕСТИТЬ ВТ_ТоварыРозничногоЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоотношениеНоменклатуры КАК ВТ_СоотношениеНоменклатуры
	|		ПО (ВТ_СоотношениеНоменклатуры.Номенклатура = ЗаказКлиентаТовары.Номенклатура)
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСвязи	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЗаказКлиентаСкидкиНаценки.СкидкаНаценка.бг_КодСтрокиБюджета КАК СкидкаНаценка_ЗначениеРеквизитабг_КодСтрокиБюджета,
	|	ЗаказКлиентаСкидкиНаценки.СкидкаНаценка.бг_ТипСкидкиНаценкиCRM КАК СкидкаНаценка_ЗначениеРеквизитабг_ТипСкидкиНаценкиCRM_ЗначениеРеквизитаИдентификатор,
	|	ЗаказКлиентаСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка_ЗначениеРеквизитаИдентификатор,
	|	ВЫРАЗИТЬ(ЗаказКлиентаСкидкиНаценки.Сумма * ЕСТЬNULL(ВТ_ТоварыРозничногоЗаказа.Соотношение, 0) КАК ЧИСЛО(15, 2)) КАК Сумма
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК ЗаказКлиентаСкидкиНаценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТоварыРозничногоЗаказа КАК ВТ_ТоварыРозничногоЗаказа
	|		ПО ЗаказКлиентаСкидкиНаценки.КлючСвязи = ВТ_ТоварыРозничногоЗаказа.КлючСвязи
	|ГДЕ
	|	ЗаказКлиентаСкидкиНаценки.Ссылка = &ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТоварыРозничногоЗаказа.Номенклатура КАК Номенклатура_ЗначениеРеквизитаИдентификатор,
	|	ВТ_ТоварыРозничногоЗаказа.Номенклатура.Код КАК Номенклатура_ЗначениеРеквизитаКод,
	|	ВТ_ТоварыРозничногоЗаказа.Номенклатура.ТоварнаяКатегория КАК Номенклатура_ЗначениеРеквизитаТоварнаяКатегория_ЗначениеРеквизитаИдентификатор,
	|	ВТ_ТоварыРозничногоЗаказа.КодЕК_Номенклатуры КАК Номенклатура_ЗначениеРеквизитаКодЕК_Номенклатуры,
	|	ВТ_ТоварыРозничногоЗаказа.КлючСвязи КАК КлючСвязи,
	|	ВТ_ТоварыРозничногоЗаказа.Количество КАК Количество,
	|	ВТ_ТоварыРозничногоЗаказа.Сумма КАК Сумма,
	|	ВТ_ТоварыРозничногоЗаказа.СуммаНДС КАК СуммаНДС,
	|	ВТ_ТоварыРозничногоЗаказа.СуммаСНДС КАК СуммаСНДС,
	|	ВТ_ТоварыРозничногоЗаказа.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ИЗ
	|	ВТ_ТоварыРозничногоЗаказа КАК ВТ_ТоварыРозничногоЗаказа";
	
	Запрос.УстановитьПараметр("Реализация", Реализация);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВГраница = Пакет.ВГраница();
	
	Результат.Вставить("ТоварыCRM", Пакет[ВГраница].Выгрузить()); 
	Результат.Вставить("СкидкиCRM", Пакет[ВГраница - 1].Выгрузить());
	
	Возврат Результат;
	
КонецФункции 

Функция МенеджерыПунктовНазначения(ДатаДокумента, ПунктНазначения)

	Результат = Неопределено;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя.Код КАК МаршрутТорговогоПредставителяКод,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя.Наименование КАК МаршрутТорговогоПредставителяНаименование,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.МаршрутТорговогоПредставителя КАК бг_МаршрутТорговогоПредставителя,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.бг_КодБК КАК Менеджербг_КодБК,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.Код КАК МенеджерКод,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер.Наименование КАК МенеджерНаименование,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.Менеджер КАК бг_Менеджер,
		|	бг_МенеджерыПунктовНазначенияСрезПоследних.ПризнакЭТК КАК бг_ЭТК
		|ИЗ
		|	РегистрСведений.бг_МенеджерыПунктовНазначения.СрезПоследних(&ДатаДокумента, ПунктНазначения = &ПунктНазначения) КАК бг_МенеджерыПунктовНазначенияСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("ПунктНазначения", ПунктНазначения);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Новый Структура;
		
		Результат.Вставить("бг_ЭТК", Выборка.бг_ЭТК);
		
		Если ЗначениеЗаполнено(Выборка.бг_Менеджер) Тогда
			
			Менеджер = Новый Структура;
			Менеджер.Вставить("Идентификатор", Строка(Выборка.бг_Менеджер.УникальныйИдентификатор()));
			Менеджер.Вставить("бг_КодБК", Выборка.Менеджербг_КодБК);
			Менеджер.Вставить("Код", Выборка.МенеджерКод);
			Менеджер.Вставить("Наименование", Выборка.МенеджерНаименование);
			
			Результат.Вставить("бг_Менеджер", Менеджер);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.бг_МаршрутТорговогоПредставителя) Тогда
			
			МаршрутТорговогоПредставителя = Новый Структура;
			МаршрутТорговогоПредставителя.Вставить("Идентификатор",
				Строка(Выборка.бг_МаршрутТорговогоПредставителя.УникальныйИдентификатор()));
			МаршрутТорговогоПредставителя.Вставить("Код",
				Выборка.МаршрутТорговогоПредставителяКод);
			МаршрутТорговогоПредставителя.Вставить("Наименование",
				Выборка.МаршрутТорговогоПредставителяНаименование);
			
			Результат.Вставить("бг_МаршрутТорговогоПредставителя", МаршрутТорговогоПредставителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция КлючМаршрутизацииПоДаннымВыгружаемогоОбъекта(ВыгружаемыеДанные, ДанныеСообщения)
	
	КлючМаршрутизации = ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);

	Если Не ЗарегистрироватьDESADV(ДанныеСообщения) Тогда
		ПрефиксОрганизации = ПрефиксОрганизацииСклада(ВыгружаемыеДанные);
		Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда
			КлючМаршрутизации = КлючМаршрутизации + "." + ПрефиксОрганизации;
		КонецЕсли;
		Если Не ЕстьАлкогольнаяПродукция(ВыгружаемыеДанные) Тогда
			КлючМаршрутизации = КлючМаршрутизации + ".nonalc";
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Функция ЕстьАлкогольнаяПродукция(ВыгружаемыеДанные)

	Возврат ВыгружаемыеДанные.Свойство("бг_ЕстьАлкогольнаяПродукция") И ВыгружаемыеДанные.бг_ЕстьАлкогольнаяПродукция;
	
КонецФункции

Функция ПрефиксОрганизацииСклада(ВыгружаемыеДанные)
	
	ПрефиксОрганизации = Неопределено;
	
	Если ВыгружаемыеДанные.Свойство("ПрефиксОрганизацииСклада") Тогда	
		ПрефиксОрганизации = ВыгружаемыеДанные.ПрефиксОрганизацииСклада;
	КонецЕсли;
	
	Возврат ПрефиксОрганизации;
	
КонецФункции

#Область ИнтеграцияSAP

// Заполняет специализированные для выгрузки в SAP реквизиты реализации.
//
Процедура ЗаполнитьРеквизитыВыгружаемогоОбъектаSAP(РеквизитыОбъекта, Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ЗначениеЗаполнено(Объект) Тогда 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.ЗаказКлиента КАК Документ.ЗаказКлиента).бг_ЗаявкаКлиента КАК ЗаявкаКлиента
		|ПОМЕСТИТЬ СписокЗаявок
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиентаТовары.Ссылка) КАК КоличествоЗаказовПоНомеруSAP
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка.бг_ЗаявкаКлиента В
		|			(ВЫБРАТЬ
		|				СписокЗаявок.ЗаявкаКлиента
		|			ИЗ
		|				СписокЗаявок КАК СписокЗаявок)
		|	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
		|	И ЗаказКлиентаТовары.Ссылка.Проведен";
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			РеквизитыОбъекта.Вставить("КоличествоЗаказовПоНомеруSAP", Выборка.КоличествоЗаказовПоНомеруSAP);	
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

// Заполняет специализированные для выгрузки в SAP реквизиты строки ТЧ Товары.
//
Процедура ЗаполнитьРеквизитыСтрокиТЧТоварыВыгружаемогоОбъектаSAP(СтрокаТЧ)
	
	Если СтрокаТЧ.Свойство("КодСтроки")
		И СтрокаТЧ.КодСтроки > 0
		И СтрокаТЧ.Свойство("ЗаказКлиента")
		И СтрокаТЧ.ЗаказКлиента.ТипЗначения = "Документ.ЗаказКлиента" Тогда
		
		ЗаказКлиента = Документы.ЗаказКлиента.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТЧ.ЗаказКлиента.Идентификатор));
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Запрос.УстановитьПараметр("КодСтроки", СтрокаТЧ.КодСтроки);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура.ТоварнаяКатегория.бг_СкюМТ.КодНоменклатурыSAP, ЗаказКлиентаТовары.Номенклатура.бг_КодНоменклатурыSAP) КАК КодНоменклатурыSAP,
		|	ЗаказКлиентаТовары.Ссылка.бг_ЗаявкаКлиента.НомерПоДаннымКлиента КАК Номер,
		|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки КАК КодПозицииЗаказа
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
		|	И ЗаказКлиентаТовары.КодСтроки = &КодСтроки";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			КодНоменклатурыSAP = Выборка.КодНоменклатурыSAP; 
			Если Не ЗначениеЗаполнено(КодНоменклатурыSAP) Тогда
				КодНоменклатурыSAP = 
					бг_ОбщегоНазначенияСервер.КодНоменклатурыSAPПОДаннымПоставщиков(Выборка.Номенклатура); 
			КонецЕсли;
			
			СтрокаТЧ.Номенклатура.Вставить("КодНоменклатурыSAP", КодНоменклатурыSAP);
			СтрокаТЧ.Вставить("Номер", Выборка.Номер);
			СтрокаТЧ.Вставить("КодПозицииЗаказа", Выборка.КодПозицииЗаказа);
		КонецЕсли;
			
	КонецЕсли;		

КонецПроцедуры

// Заполняе реквизиты (поля) адресов, для организации, контрагента и пунктов разгрузки.
//
Процедура ЗаполнитьРеквизитыАдресовВыгружаемогоОбъекта(РеквизитыОбъекта, Объект)

	Если РеквизитыОбъекта.Свойство("Организация") Тогда
		ПараметрыПолученияАдреса = ПараметрыПолученияАдресаВыгружаемогоОбъекта();
		ПараметрыПолученияАдреса.ВладелецКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Организация");
		ПараметрыПолученияАдреса.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
		
		РеквизитыАдреса = РеквизитыАдресаВыгружаемогоОбъекта(ПараметрыПолученияАдреса);
		Если РеквизитыАдреса.Количество() > 0 Тогда
			РеквизитыОбъекта.Организация.Вставить("ЮридическийАдрес", РеквизитыАдреса);
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыОбъекта.Свойство("Контрагент") Тогда
		ПараметрыПолученияАдреса = ПараметрыПолученияАдресаВыгружаемогоОбъекта();
		ПараметрыПолученияАдреса.ВладелецКонтактнойИнформации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Контрагент");
		ПараметрыПолученияАдреса.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
		
		РеквизитыАдреса = РеквизитыАдресаВыгружаемогоОбъекта(ПараметрыПолученияАдреса);
		Если РеквизитыАдреса.Количество() > 0 Тогда
			РеквизитыОбъекта.Контрагент.Вставить("ЮридическийАдрес", РеквизитыАдреса);
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыОбъекта.Свойство("ПунктПогрузки")
		И РеквизитыОбъекта.ПунктПогрузки.Свойство("Идентификатор") Тогда
		
		ПунктПогрузкиСсылка = Справочники.битПунктыНазначения.ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитыОбъекта.ПунктПогрузки.Идентификатор));
		ПараметрыПолученияАдреса = ПараметрыПолученияАдресаВыгружаемогоОбъекта();
		ПараметрыПолученияАдреса.Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктПогрузкиСсылка, "АдресЗначение");
		ПараметрыПолученияАдреса.ЗначенияПолей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктПогрузкиСсылка, "АдресЗначенияПолей");
		ПараметрыПолученияАдреса.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПартнера");
		
		РеквизитыАдреса = РеквизитыАдресаВыгружаемогоОбъекта(ПараметрыПолученияАдреса);
		Если РеквизитыАдреса.Количество() > 0 Тогда
			РеквизитыОбъекта.ПунктПогрузки.Вставить("ФактическийАдрес", РеквизитыАдреса);
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыОбъекта.Свойство("ПунктРазгрузки") 
		И РеквизитыОбъекта.ПунктРазгрузки.Свойство("Идентификатор") Тогда
		
		ПунктРазгрузкиСсылка = Справочники.битПунктыНазначения.ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитыОбъекта.ПунктРазгрузки.Идентификатор));
		ПараметрыПолученияАдреса = ПараметрыПолученияАдресаВыгружаемогоОбъекта();
		ПараметрыПолученияАдреса.Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктРазгрузкиСсылка, "АдресЗначение");
		ПараметрыПолученияАдреса.ЗначенияПолей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПунктРазгрузкиСсылка, "АдресЗначенияПолей");
		ПараметрыПолученияАдреса.ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПартнера");
		
		РеквизитыАдреса = РеквизитыАдресаВыгружаемогоОбъекта(ПараметрыПолученияАдреса);
		Если РеквизитыАдреса.Количество() > 0 Тогда
			РеквизитыОбъекта.ПунктРазгрузки.Вставить("ФактическийАдрес", РеквизитыАдреса);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	

Функция РеквизитыАдресаВыгружаемогоОбъекта(Параметры)
	
	РеквизитыАдреса = ДанныеАдресаВыгружаемогоОбъекта(Параметры);
	
	ПустыеРеквизитыАдреса = Новый Массив;
	Для каждого Реквизит Из РеквизитыАдреса Цикл
		Если Не ЗначениеЗаполнено(Реквизит.Значение) Тогда
			ПустыеРеквизитыАдреса.Добавить(Реквизит.Ключ);
		КонецЕсли;	
	КонецЦикла;
	
	Для каждого ИмяРеквизита Из ПустыеРеквизитыАдреса Цикл
		РеквизитыАдреса.Удалить(ИмяРеквизита);	
	КонецЦикла;
	
	Возврат РеквизитыАдреса;
	
Конецфункции

Функция ДанныеАдресаВыгружаемогоОбъекта(Параметры)
	
	РеквизитыАдреса = РеквизитыАдреса();
	
	Если ЗначениеЗаполнено(Параметры.ВладелецКонтактнойИнформации) Тогда
		
		ИмяТаблицы = Параметры.ВладелецКонтактнойИнформации.Метаданные().ПолноеИмя();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вид", Параметры.ВидКонтактнойИнформации);
		Запрос.УстановитьПараметр("Ссылка", Параметры.ВладелецКонтактнойИнформации);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.Страна КАК Страна,
		|	КонтактнаяИнформация.Значение КАК Значение,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Контрагенты", ИмяТаблицы);
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат РеквизитыАдреса;	
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(Выборка.Представление) Тогда
			РеквизитыАдреса.Вставить("Представление", Выборка.Представление);
		КонецЕсли;
		Параметры.Представление = Выборка.Представление; 
		Параметры.Значение = Выборка.Значение;
		Параметры.ЗначенияПолей = Выборка.ЗначенияПолей;
		
	КонецЕсли;
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформациейСлужебный.СтруктураВидаКонтактнойИнформации(Параметры.ВидКонтактнойИнформации);
	ТипКонтактнойИнформации     = ВидКонтактнойИнформации.Тип;
	МеждународныйФорматАдреса   = ВидКонтактнойИнформации.МеждународныйФорматАдреса;
	
	// Пытаемся заполнить из параметров.
	ЗначенияПолей = ОпределитьЗначениеАдреса(Параметры);
	Если ПустаяСтрока(ЗначенияПолей) Тогда
		Возврат РеквизитыАдреса;
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(ЗначенияПолей) Тогда
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.JSONВКонтактнуюИнформациюПоПолям(ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес);
		НаселенныйПунктДетально = РаботаСАдресами.ПодготовитьАдресДляВвода(ДанныеАдреса);
	Иначе
		XDTOКонтактная = ИзвлечьСтарыйФорматАдреса(ЗначенияПолей, ТипКонтактнойИнформации, Параметры);
		ДанныеАдреса = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтруктуруJSON(XDTOКонтактная, ТипКонтактнойИнформации);
		НаселенныйПунктДетально = РаботаСАдресами.ПодготовитьАдресДляВвода(ДанныеАдреса);
	КонецЕсли;
	
	Если МеждународныйФорматАдреса И Не УправлениеКонтактнойИнформациейКлиентСервер.ЭтоАдресВСвободнойФорме(НаселенныйПунктДетально.AddressType) Тогда
		НаселенныйПунктДетально.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес();
	КонецЕсли;
	
	УстановитьЗначениеРеквизитовПоКонтактнойИнформации(НаселенныйПунктДетально, РеквизитыАдреса);
	
	Возврат РеквизитыАдреса;
   
КонецФункции

Функция ПараметрыПолученияАдресаВыгружаемогоОбъекта()
	
	ПараметрыПолученияАдреса = Новый Структура;
	
	ПараметрыПолученияАдреса.Вставить("ВладелецКонтактнойИнформации", Неопределено);
	ПараметрыПолученияАдреса.Вставить("ВидКонтактнойИнформации", Неопределено);
	ПараметрыПолученияАдреса.Вставить("Значение", "");
	ПараметрыПолученияАдреса.Вставить("ЗначенияПолей", "");
	ПараметрыПолученияАдреса.Вставить("Представление", "");
	ПараметрыПолученияАдреса.Вставить("Страна", "");
	ПараметрыПолученияАдреса.Вставить("Комментарий", Неопределено);
	
	Возврат ПараметрыПолученияАдреса;

КонецФункции

Функция ОпределитьЗначениеАдреса(Параметры)
	
	Если Параметры.Свойство("Значение") Тогда
		Если ПустаяСтрока(Параметры.Значение) И ЗначениеЗаполнено(Параметры.ЗначенияПолей) Тогда
			ЗначенияПолей = Параметры.ЗначенияПолей;
		Иначе
			ЗначенияПолей = Параметры.Значение;
		КонецЕсли;
	Иначе
		ЗначенияПолей = Параметры.ЗначенияПолей;
	КонецЕсли;
	
	Если ПустаяСтрока(ЗначенияПолей) И ЗначениеЗаполнено(Параметры.Представление) Тогда
		ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Параметры.Представление,
			Перечисления.ТипыКонтактнойИнформации.Адрес);
			Модифицированность = Истина;
	КонецЕсли;
	
	Возврат ЗначенияПолей;

КонецФункции

Функция ИзвлечьСтарыйФорматАдреса(Знач ЗначенияПолей, Знач ТипКонтактнойИнформации, Параметры)
	
	Перем XDTOКонтактная, РезультатыЧтения;
	
	ОсновнаяСтрана = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЗначенияПолей)
		И ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЗначенияПолей, ТипКонтактнойИнформации, РезультатыЧтения);
		Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
			// Распознали с ошибками, сообщим при открытии.
			ТекстПредупрежденияПриОткрытии = РезультатыЧтения.ТекстОшибки;
			XDTOКонтактная.Представление   = Параметры.Представление;
			XDTOКонтактная.Состав.Страна   = Строка(ОсновнаяСтрана);
		КонецЕсли;
	Иначе
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(ЗначенияПолей, Параметры.Представление, );
		Если Параметры.Свойство("Страна") И ЗначениеЗаполнено(Параметры.Страна) Тогда
			Если ТипЗнч(Параметры.Страна) = ТипЗнч(Справочники.СтраныМира.ПустаяСсылка()) Тогда
				СтранаСсылка = Параметры.Страна; // СправочникСсылка.СтраныМира
				XDTOКонтактная.Состав.Страна = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтранаСсылка , "Наименование");
			Иначе
				XDTOКонтактная.Состав.Страна = Строка(Параметры.Страна);
			КонецЕсли;
		Иначе
			XDTOКонтактная.Состав.Страна = ОсновнаяСтрана.Наименование;
		КонецЕсли;
	КонецЕсли;
	Если Параметры.Комментарий <> Неопределено Тогда
		// Ставим новый комментарий, иначе он придет из информации.
		XDTOКонтактная.Комментарий = Параметры.Комментарий;
	КонецЕсли;
	Возврат XDTOКонтактная;

КонецФункции

Процедура УстановитьЗначениеРеквизитовПоКонтактнойИнформации(ДанныеАдреса, РеквизитыАдреса)
	
	// Общие реквизиты
	Если ДанныеАдреса.Свойство("Value")
		И РеквизитыАдреса.Свойство("Представление") Тогда	
		РеквизитыАдреса.Представление = ДанныеАдреса.Value;
	КонецЕсли;
	
	Если ДанныеАдреса.Свойство("Comment") 
		И РеквизитыАдреса.Свойство("Комментарий") Тогда
		РеквизитыАдреса.Комментарий = ДанныеАдреса.Comment;
	КонецЕсли;
	
	СсылкаНаОсновнуюСтрану = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
	ДанныеСтраны = Неопределено;
	Если ДанныеАдреса.Свойство("Country") И ЗначениеЗаполнено(ДанныеАдреса.Country) Тогда
		ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, СокрЛП(ДанныеАдреса.Country));
	КонецЕсли;
	
	Если ДанныеСтраны = Неопределено Тогда
		// Не нашли ни в справочнике, ни в классификаторе.
		Страна    = СсылкаНаОсновнуюСтрану;
		КодСтраны = СсылкаНаОсновнуюСтрану.Код;
	Иначе
		Страна    = ДанныеСтраны.Ссылка;
		КодСтраны = ДанныеСтраны.Код;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Страна) 
		И РеквизитыАдреса.Свойство("Страна") Тогда
		РеквизитыАдреса.Страна = СокрЛП(Страна);
	КонецЕсли;
	
	УстановитьЗначенияНациональныхРеквизитовКонтактнойИнформации(ДанныеАдреса, РеквизитыАдреса);

КонецПроцедуры	

Процедура УстановитьЗначенияНациональныхРеквизитовКонтактнойИнформации(ДанныеАдреса, РеквизитыАдреса)
	
	Если ДанныеАдреса.Свойство("ZIPCode") 
		И РеквизитыАдреса.Свойство("Индекс") Тогда
		РеквизитыАдреса.Индекс = Формат(ДанныеАдреса.ZIPCode, "ЧГ=");
	КонецЕсли;
	
	Если ДанныеАдреса.Свойство("OKTMO") 
		И РеквизитыАдреса.Свойство("OKTMO") Тогда
		РеквизитыАдреса.OKTMO = Формат(ДанныеАдреса.OKTMO, "ЧГ=");
	КонецЕсли;

	Если ДанныеАдреса.Свойство("AddressType") 
		И РеквизитыАдреса.Свойство("ТипАдреса") Тогда
		РеквизитыАдреса.ТипАдреса = СокрЛП(ДанныеАдреса.AddressType);
	КонецЕсли;
	
	// См. Обработки.РасширенныйВводКонтактнойИнформации.ПредставлениеНаселенногоПункта(ДанныеАдреса) 
	АдресныеУровниБезСокращений = Новый Соответствие();
	АдресныеУровниБезСокращений.Вставить("MunDistrict", Истина);
	АдресныеУровниБезСокращений.Вставить("Settlement",  Истина);
	
	ЭтоМуниципальныйАдрес = Ложь;
	Если ДанныеАдреса.Свойство("AddressType") Тогда
		ЭтоМуниципальныйАдрес = РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(ДанныеАдреса.AddressType);
	КонецЕсли;
	
	Если НЕ ДанныеАдреса.Свойство("AddressType") Тогда
		СписокПолейАдреса = "Area,City";
	ИначеЕсли ЭтоМуниципальныйАдрес Тогда
		СписокПолейАдреса = "Area,MunDistrict,Settlement,CityDistrict,Locality,Territory";
	Иначе
		СписокПолейАдреса = "Area,District,City,CityDistrict,Locality,Territory";
	КонецЕсли;
	СписокПолей = СтрРазделить(СписокПолейАдреса, ",");
	
	Адрес = Новый Массив;
	Для каждого ИмяПоля Из СписокПолей Цикл
		
		Если ЭтоМуниципальныйАдрес 
			И СтрСравнить(ИмяПоля, "locality") = 0
			И ПустаяСтрока(ДанныеАдреса["locality"]) Тогда
			ИмяПоля = "city";
		КонецЕсли;
		
		Если ДанныеАдреса.Свойство(ИмяПоля) И ЗначениеЗаполнено(ДанныеАдреса[ИмяПоля]) Тогда
			
			ПредставлениеУровня = ДанныеАдреса[ИмяПоля]
				+ ?(АдресныеУровниБезСокращений.Получить(ИмяПоля) = Неопределено, " " + ДанныеАдреса[ИмяПоля + "Type"], "");
			Адрес.Добавить(СокрЛП(ПредставлениеУровня));
			
			Если СтрСравнить(ИмяПоля, "Area") = 0 
				И РеквизитыАдреса.Свойство("Регион") Тогда
				РеквизитыАдреса.Регион = ПредставлениеУровня;		
			ИначеЕсли СтрСравнить(ИмяПоля, "District") = 0 
				И РеквизитыАдреса.Свойство("Район") Тогда
				РеквизитыАдреса.Район = ПредставлениеУровня;		
			ИначеЕсли СтрСравнить(ИмяПоля, "MunDistrict") = 0 
				И РеквизитыАдреса.Свойство("МуниципальныйРайон") Тогда
				РеквизитыАдреса.МуниципальныйРайон = ПредставлениеУровня;		
			ИначеЕсли СтрСравнить(ИмяПоля, "Settlement") = 0 
				И РеквизитыАдреса.Свойство("Поселение") Тогда
				РеквизитыАдреса.Поселение = ПредставлениеУровня;		
			ИначеЕсли СтрСравнить(ИмяПоля, "City") = 0 
				И РеквизитыАдреса.Свойство("Город") Тогда
				РеквизитыАдреса.Город = ПредставлениеУровня;		
			ИначеЕсли СтрСравнить(ИмяПоля, "CityDistrict") = 0 
				И РеквизитыАдреса.Свойство("ВнутригородскойРайон") Тогда
				РеквизитыАдреса.ВнутригородскойРайон = ПредставлениеУровня;		
			ИначеЕсли СтрСравнить(ИмяПоля, "Locality") = 0
				И РеквизитыАдреса.Свойство("НаселенныйПункт") Тогда
				РеквизитыАдреса.НаселенныйПункт = ПредставлениеУровня;		
			ИначеЕсли СтрСравнить(ИмяПоля, "Territory") = 0 
				И РеквизитыАдреса.Свойство("Территория") Тогда
				РеквизитыАдреса.Территория = ПредставлениеУровня;		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	// ------------------------------------------------------
	
	Если ЗначениеЗаполнено(ДанныеАдреса.Street) 
		И РеквизитыАдреса.Свойство("Улица") Тогда
		РеквизитыАдреса.Улица = СокрЛП(ДанныеАдреса.Street + " " + ДанныеАдреса.StreetType);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.HouseType) Тогда 
		Если РеквизитыАдреса.Свойство("ТипДома") Тогда
			РеквизитыАдреса.ТипДома = ДанныеАдреса.HouseType;
		КонецЕсли;	
		Если ДанныеАдреса.Свойство("HouseNumber") 
			И РеквизитыАдреса.Свойство("Дом") Тогда
			РеквизитыАдреса.Дом = ДанныеАдреса.HouseNumber;
		ИначеЕсли ДанныеАдреса.Свойство("House") 
			И РеквизитыАдреса.Свойство("Дом") Тогда
			РеквизитыАдреса.Дом = ДанныеАдреса.House;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеАдреса.stead) Тогда
		Если РеквизитыАдреса.Свойство("ТипДома") Тогда
			РеквизитыАдреса.ТипДома = РаботаСАдресамиКлиентСервер.НаименованиеЗемельногоУчастка();
		КонецЕсли;
		Если РеквизитыАдреса.Свойство("Дом") Тогда
			РеквизитыАдреса.Дом = ДанныеАдреса.stead;
		КонецЕсли;	
	КонецЕсли;
	
	ЗаполняемПервоеЗдание = Истина;
	Если ДанныеАдреса.Свойство("Buildings") И ТипЗнч(ДанныеАдреса.Buildings) = Тип("Массив") Тогда 
		Для каждого ОписаниеЗдания Из ДанныеАдреса.Buildings Цикл
			Если ЗаполняемПервоеЗдание Тогда
				Если РеквизитыАдреса.Свойство("ТипСтроения") Тогда
					РеквизитыАдреса.ТипСтроения = ОписаниеЗдания.Type;
				КонецЕсли;
				Если РеквизитыАдреса.Свойство("Строение") Тогда
					РеквизитыАдреса.Строение = ОписаниеЗдания.Number;
				КонецЕсли;
				ЗаполняемПервоеЗдание = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполняемПервоеПомещение = Истина;
	Если ДанныеАдреса.Свойство("Apartments") И  ТипЗнч(ДанныеАдреса.Apartments) = Тип("Массив") Тогда
		Для каждого ОписаниеСтроения Из ДанныеАдреса.Apartments Цикл
			Если ЗаполняемПервоеПомещение Тогда
				Если РеквизитыАдреса.Свойство("ТипПомещения") Тогда	
					РеквизитыАдреса.ТипПомещения = ОписаниеСтроения.Type;
				КонецЕсли;
				Если РеквизитыАдреса.Свойство("Помещение") Тогда
					РеквизитыАдреса.Помещение = ОписаниеСтроения.Number;
				КонецЕсли;	
				ЗаполняемПервоеПомещение = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//ОтобразитьДополнительныеЗдания(НаселенныйПунктДетально);

КонецПроцедуры

Функция РеквизитыАдреса()
	
	РеквизитыАдреса = Новый Структура;
	
	// Общие реквизиты
	РеквизитыАдреса.Вставить("ТипАдреса", "");
	РеквизитыАдреса.Вставить("Представление", "");
	РеквизитыАдреса.Вставить("Страна", "");
	РеквизитыАдреса.Вставить("Комментарий", "");
	
	// Национальные реквизиты
	РеквизитыАдреса.Вставить("Индекс", "");
	РеквизитыАдреса.Вставить("OKTMO", "");
	РеквизитыАдреса.Вставить("Улица", "");
	
	// Населенный пункт
	РеквизитыАдреса.Вставить("Регион", "");
	РеквизитыАдреса.Вставить("Район", "");
	РеквизитыАдреса.Вставить("Город", "");
	РеквизитыАдреса.Вставить("НаселенныйПункт", "");
	РеквизитыАдреса.Вставить("МуниципальныйРайон", "");
	РеквизитыАдреса.Вставить("Поселение", "");
	РеквизитыАдреса.Вставить("ВнутригородскойРайон", "");
	РеквизитыАдреса.Вставить("Территория", "");
	
	// Дом, корпус, квартира
	РеквизитыАдреса.Вставить("ТипДома", "");
	РеквизитыАдреса.Вставить("Дом", "");
	РеквизитыАдреса.Вставить("ТипСтроения", "");
	РеквизитыАдреса.Вставить("Строение", "");
	РеквизитыАдреса.Вставить("ТипПомещения", "");
	РеквизитыАдреса.Вставить("Помещение", "");

	Возврат РеквизитыАдреса;
	
КонецФункции	

Процедура ДобавитьРеквизитыАдресаКВыгрузке(РеквизитыИСвойства)	
		
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ДлинаСтроки1000 = 1000;
	ОписаниеТипаСтрока1000 = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки1000);

	РеквизитыАдреса = РеквизитыАдреса();	
	Для каждого Реквизит Из РеквизитыАдреса Цикл
		ИмяРеквизита = Реквизит.Ключ;
		Если СтрСравнить(ИмяРеквизита, "Страна") = 0 Тогда 
			ТипРеквизита = ОбщегоНазначения.ОписаниеТипаСтрока(100);	
		ИначеЕсли СтрСравнить(ИмяРеквизита, "Индекс") = 0 Тогда
			ТипРеквизита = ОбщегоНазначения.ОписаниеТипаСтрока(6);	
		ИначеЕсли СтрСравнить(ИмяРеквизита, "OKTMO") = 0 Тогда
			ТипРеквизита = ОбщегоНазначения.ОписаниеТипаСтрока(11);	
		Иначе	
			ТипРеквизита = ОписаниеТипаСтрока1000;
		КонецЕсли;
		
		адаптер_НастройкиОбмена.ДобавитьРеквизит(
			РеквизитыИСвойства,
			Метаданные.Справочники.ВидыКонтактнойИнформации,
			,
			ИмяРеквизита,
			ТипРеквизита);
	КонецЦикла;
	
КонецПроцедуры		

Процедура ЗаменитьNullНаПустуюСтрокуВРеквизитахАдресов(ТекстЗапроса, РеквизитыАдресов)
	
	РеквизитыАдреса = РеквизитыАдреса();
	
	Для каждого РеквизитАдресов Из РеквизитыАдресов Цикл	
		ИмяРеквизитаВладельца = РеквизитАдресов.Ключ; // Например, "Организация"
		СписокАдресов = СтрРазделить(РеквизитАдресов.Значение, ","); // Например, "ЮридическийАдрес,ФактическийАдрес"
		Для каждого ИмяРеквизитаАдреса Из СписокАдресов Цикл
			Для каждого Реквизит Из РеквизитыАдреса Цикл
				ИмяРеквизитаПоляАдреса = Реквизит.Ключ; // Например, "Город"
				ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, ИмяРеквизитаАдреса, ИмяРеквизитаПоляАдреса);
			КонецЦикла;
			ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, ИмяРеквизитаАдреса, "Идентификатор");
			ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, ИмяРеквизитаАдреса, "ТаблицаКлючей");
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры	

Процедура ЗаменитьNullНаПустуюСтрокуВРеквизитеАдреса(ТекстЗапроса, ИмяРеквизитаВладельца, ИмяРеквизитаАдреса, ИмяРеквизитаПоляАдреса)
	
	ПсевдонимЗапроса = 
		"NULL КАК " + 
		ИмяРеквизитаВладельца + 
		"_ЗначениеРеквизита" + 
		ИмяРеквизитаАдреса + 
		"_ЗначениеРеквизита" + 
		ИмяРеквизитаПоляАдреса; 
	// Например, "NULL КАК Организация_ЗначениеРеквизитаЮридическийАдрес_ЗначениеРеквизитаГород"
		
	ПсевдонимЗапросаБезNULL  = СтрЗаменить(ПсевдонимЗапроса, "NULL", """"""); 
	// Например, """"" КАК Организация_ЗначениеРеквизитаЮридическийАдрес_ЗначениеРеквизитаГород"
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимЗапроса + ",", "");

КонецПроцедуры	

Функция ЗарегистрироватьDESADV(ДанныеСообщения)
	
	Возврат ТипЗнч(ДанныеСообщения.ДополнительныеСвойстваОбъекта) = Тип("Структура")
		И ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("ЗарегистрироватьDESADV");
	
КонецФункции

Функция ЗарегистрироватьCRM(ДанныеСообщения)
	
	Возврат ТипЗнч(ДанныеСообщения.ДополнительныеСвойстваОбъекта) = Тип("Структура")
		И ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство("ЗарегистрироватьCRM");	
		
КонецФункции

// При выгрузке DESADV в SAP заменяет в сериях Справки 2 EГАИС продавца, на Справки 2 EГАИС покупателя,
// полученные по данным ТТН Исходящей ЕГАИС. Сделано по просьбе SAP, так как они ищут позиции
// по номеру справки покупателя из ТТН.
//
Процедура ЗаменитьВСерияхСправкиПродавцаНаСправкиПокупателя(ТТНИсходящаяЕГАИС, ТоварыРеализации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ТТНИсходящаяЕГАИС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТТНИсходящаяЕГАИСТовары.Номенклатура КАК Номенклатура,
	|	ТТНИсходящаяЕГАИСТовары.Серия КАК Серия,
	|	ТТНИсходящаяЕГАИСТовары.НомерСправки2Покупателя КАК НомерСправки2Покупателя
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС.Товары КАК ТТНИсходящаяЕГАИСТовары
	|ГДЕ
	|	ТТНИсходящаяЕГАИСТовары.Ссылка = &Ссылка";
	
	ТоварыТТНИсходящей = Запрос.Выполнить().Выгрузить(); 
	
	ОтборСтрокТоваровТТНИсходящей = Новый Структура("Номенклатура,Серия");
	Для Каждого СтрокаТоваровРеализации Из ТоварыРеализации Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТоваровРеализации.Номенклатура)
			Или Не ЗначениеЗаполнено(СтрокаТоваровРеализации.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборСтрокТоваровТТНИсходящей, СтрокаТоваровРеализации);
		НайденныеСтрокиТТНИсходящей = ТоварыТТНИсходящей.НайтиСтроки(ОтборСтрокТоваровТТНИсходящей); 
		Если НайденныеСтрокиТТНИсходящей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСправки2Покупателя = НайденныеСтрокиТТНИсходящей[0].НомерСправки2Покупателя;
		СерияXTDO = СтрокаТоваровРеализации.СтрокаРеквизитов.Серия;
		ЗаполнитьНомерСправки2ПокупателяВСерииXTDO(СерияXTDO, НомерСправки2Покупателя);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаТоваровИзМассиваСтрокРеквизитов(РеквизитыОбъекта)
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("СтрокаРеквизитов", Новый ОписаниеТипов("Структура"));
	
	ОтборСтрокТаблицыТоваров = Новый Структура("Номенклатура,Серия");  
	Для Каждого СтрокаРеквизитов Из РеквизитыОбъекта.Товары Цикл
		
		РеквизитыСсылки = Неопределено;
		СтрокаРеквизитов.Свойство("Номенклатура", РеквизитыСсылки);
		Номенклатура = ПолучитьСсылкуПоИдентификатору(Справочники.Номенклатура, РеквизитыСсылки);
		
		РеквизитыСсылки = Неопределено;
		СтрокаРеквизитов.Свойство("Серия", РеквизитыСсылки);
		Серия = ПолучитьСсылкуПоИдентификатору(Справочники.СерииНоменклатуры, РеквизитыСсылки);
				
		ЭтоНоваяСтрокаТаблицыТоваров = Истина;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ОтборСтрокТаблицыТоваров.Вставить("Номенклатура", Номенклатура);
			ОтборСтрокТаблицыТоваров.Вставить("Серия", Серия);
			НайденныеСтрокиТоваров = ТаблицаТоваров.НайтиСтроки(ОтборСтрокТаблицыТоваров);
			Если НайденныеСтрокиТоваров.Количество() > 0 Тогда
				СтрокаТаблицыТоваров = НайденныеСтрокиТоваров[0];
				ЭтоНоваяСтрокаТаблицыТоваров = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоНоваяСтрокаТаблицыТоваров Тогда
			СтрокаТаблицыТоваров = ТаблицаТоваров.Добавить();
			СтрокаТаблицыТоваров.Номенклатура = Номенклатура;
			СтрокаТаблицыТоваров.Серия = Серия;
			СтрокаТаблицыТоваров.СтрокаРеквизитов = СтрокаРеквизитов;
		Иначе
			бг_ОбщегоНазначенияСервер.СуммироватьЧисловыеЗначенияСвойстваСтруктур(
				СтрокаТаблицыТоваров.СтрокаРеквизитов,
				СтрокаРеквизитов,
				"Количество");
			бг_ОбщегоНазначенияСервер.СуммироватьЧисловыеЗначенияСвойстваСтруктур(
				СтрокаТаблицыТоваров.СтрокаРеквизитов,
				СтрокаРеквизитов,
				"КоличествоУпаковок");
			бг_ОбщегоНазначенияСервер.СуммироватьЧисловыеЗначенияСвойстваСтруктур(
				СтрокаТаблицыТоваров.СтрокаРеквизитов,
				СтрокаРеквизитов,
				"Сумма");
			бг_ОбщегоНазначенияСервер.СуммироватьЧисловыеЗначенияСвойстваСтруктур(
				СтрокаТаблицыТоваров.СтрокаРеквизитов,
				СтрокаРеквизитов,
				"СуммаНДС");
			бг_ОбщегоНазначенияСервер.СуммироватьЧисловыеЗначенияСвойстваСтруктур(
				СтрокаТаблицыТоваров.СтрокаРеквизитов,
				СтрокаРеквизитов,
				"СуммаСНДС");
			бг_ОбщегоНазначенияСервер.СуммироватьЧисловыеЗначенияСвойстваСтруктур(
				СтрокаТаблицыТоваров.СтрокаРеквизитов,
				СтрокаРеквизитов,
				"СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаТоваров;
	
КонецФункции

Функция ПолучитьСсылкуПоИдентификатору(МенеджерОбъекта, РеквизитыСсылки)
	
	Если ТипЗнч(РеквизитыСсылки) = Тип("Структура") 
		И бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(РеквизитыСсылки, "Идентификатор") Тогда
		СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитыСсылки.Идентификатор));
	Иначе
		СсылкаНаОбъект = МенеджерОбъекта.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ЗаполнитьНомерСправки2ПокупателяВСерииXTDO(СерияXTDO, НомерСправки2Покупателя)
	
	ЕстьСправка2ЕГАИС = СерияXTDO.Свойство("Справка2ЕГАИС");
	
	Если ЗначениеЗаполнено(НомерСправки2Покупателя) Тогда
		Если ЕстьСправка2ЕГАИС Тогда
			СерияXTDO.Справка2ЕГАИС.Вставить("РегистрационныйНомер", НомерСправки2Покупателя);
		Иначе
			Справка2ЕГАИС = Новый Структура("РегистрационныйНомер", НомерСправки2Покупателя);
			СерияXTDO.Вставить("Справка2ЕГАИС", Справка2ЕГАИС);
		КонецЕсли;
	Иначе
		Если ЕстьСправка2ЕГАИС Тогда
			СерияXTDO.Удалить("Справка2ЕГАИС");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Заполняет реквизиты ТТН исходящей, оформленной по реализации.
//
Процедура ЗаполнитьРеквизитыТТНИсходящейЕГАИС(РеквизитыОбъекта, Объект, РегистрацияDESADV, ТоварыРеализации)
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И ЗначениеЗаполнено(Объект) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Объект);
		Запрос.УстановитьПараметр("СтатусыОтменыЕГАИС", Документы.ТТНИсходящаяЕГАИС.бг_СтатусыОтменыЕГАИС());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокТТН.Ссылка КАК ТТНИсходящаяЕГАИС,
		|	СписокТТН.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС
		|ПОМЕСТИТЬ СписокТТН
		|ИЗ
		|	Документ.ТТНИсходящаяЕГАИС КАК СписокТТН
		|ГДЕ
		|	СписокТТН.ДокументОснование = &Ссылка
		|	И СписокТТН.Проведен
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТТНИсходящаяЕГАИС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СписокТТН.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС,
		|	СписокТТН.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС
		|ИЗ
		|	СписокТТН КАК СписокТТН
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
		|		ПО СписокТТН.ТТНИсходящаяЕГАИС = Статусы.Документ
		|ГДЕ
		|	НЕ ЕСТЬNULL(Статусы.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ПустаяСсылка)) В (&СтатусыОтменыЕГАИС)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТТНИсходящаяЕГАИС = Новый Структура();
			ТТНИсходящаяЕГАИС.Вставить(
				"Идентификатор",
				Строка(Выборка.ТТНИсходящаяЕГАИС.УникальныйИдентификатор()));
			ТТНИсходящаяЕГАИС.Вставить("ИдентификаторЕГАИС", Выборка.ИдентификаторЕГАИС);
			
			РеквизитыОбъекта.Вставить("ТТНИсходящаяЕГАИС", ТТНИсходящаяЕГАИС);
			
			Если РегистрацияDESADV И ТоварыРеализации <> Неопределено Тогда
				ЗаменитьВСерияхСправкиПродавцаНаСправкиПокупателя(
					Выборка.ТТНИсходящаяЕГАИС,
					ТоварыРеализации);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзмененНомер(ДополнительныеСвойства)

	ИзмененныеРеквизиты = Неопределено;
	ДополнительныеСвойства.Свойство("бг_ИзмененныеРеквизиты", ИзмененныеРеквизиты);

	Возврат  ИзмененныеРеквизиты.Свойство("Реквизиты")
		И ИзмененныеРеквизиты.Реквизиты.Количество() > 0
		И ИзмененныеРеквизиты.Реквизиты.Найти("Номер") <> Неопределено;
	
КонецФункции

Процедура ЗаполнитьКурсВалютыВыгружаемогоОбъекта(РеквизитыОбъекта, Дата, Валюта)

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата,
		Новый Структура("Валюта", Валюта));
		
	Если Запись.Кратность = 0 Тогда
		КурсВалюты = 1;	
	Иначе	
	    КурсВалюты = Окр(Запись.Курс / Запись.Кратность, 5);
	КонецЕсли;
	
	РеквизитыОбъекта.Вставить("КурсВалюты", КурсВалюты);

КонецПроцедуры

Процедура ЗаполнитьМенеджеровВыгружаемогоОбъекта(РеквизитыОбъекта, ДанныеСообщения, ЗначенияРеквизитовОбъекта)
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовОбъекта.бг_ЗаказРозничногоПокупателя) Тогда
		ПунктНазначения = ЗначенияРеквизитовОбъекта.бг_ЗаказРозничногоПокупателябг_ПунктНазначения;
	Иначе
		ПунктНазначения = ЗначенияРеквизитовОбъекта.бг_ПунктНазначения;
	КонецЕсли;
	Менеджеры = МенеджерыПунктовНазначения(ЗначенияРеквизитовОбъекта.Дата, ПунктНазначения);
	
	Если Менеджеры <> Неопределено Тогда
		Для каждого Элемент Из Менеджеры Цикл
			РеквизитыОбъекта.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТаблицыДляCRMВыгружаемогоОбъекта(Объект, РеквизитыОбъекта, ДанныеСообщения, ЗначенияРеквизитовОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитовОбъекта.бг_ЗаказРозничногоПокупателя) Тогда
	
		ДанныеСкидокИТоваровCRM = ДанныеСкидокИТоваровCRM(
			Объект,
			ЗначенияРеквизитовОбъекта.бг_ЗаказРозничногоПокупателя);	
			
		РеквизитыОбъекта.Вставить("ТоварыCRM",
			адаптер_РаботаСДаннымиИБ.ТаблицаЗначенийВСтруктуруРеквизитов(
				ДанныеСкидокИТоваровCRM.ТоварыCRM,
				Неопределено,
				ДанныеСообщения));	
			
		РеквизитыОбъекта.Вставить("СкидкиCRM",
			адаптер_РаботаСДаннымиИБ.ТаблицаЗначенийВСтруктуруРеквизитов(
				ДанныеСкидокИТоваровCRM.СкидкиCRM,
				Неопределено,
				ДанныеСообщения));					
				
	КонецЕсли;

КонецПроцедуры

#КонецОбласти // Конец Выгрузка

#Область Загрузка

Процедура ЗаполнитьРеквизитыВСтруктуре(СтруктураОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;    
	
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Организация = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.Организация);
	Если Не ЗначениеЗаполнено(Организация) Или Не ОбщегоНазначения.СсылкаСуществует(Организация) Тогда
		Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	КонецЕсли;
	СтруктураОбъекта.Вставить("Организация", Организация);
	
	ЗаказКлиента = Документы.ЗаказКлиента.ПустаяСсылка();
	Если ЗначениеЗаполнено(СтруктураОбъекта.Сделка) Тогда
		ЗаказКлиента = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку(
			"Документ.ЗаказКлиента", СтруктураОбъекта.Сделка.Идентификатор);
	КонецЕсли;
	СтруктураОбъекта.Вставить("ЗаказКлиента", ЗаказКлиента);
	
КонецПроцедуры

Функция ОбновитьТолькоНомер(ЗагружаемыйОбъект, СтруктураОбъекта, ЭтоНовый)
	
	Возврат Не ЭтоНовый
		И СтруктураОбъекта.ИспользоватьЗагрузкуРТиУПоОрганизации <> Истина
		И СокрЛП(ЗагружаемыйОбъект.бг_НомерДокументаУПП) <> СокрЛП(СтруктураОбъекта.Номер);
	
КонецФункции

Функция ЗагружатьДокумент(СтруктураОбъекта, ЗагружаемыйОбъект)
	
	Результат = Истина;
	МассивСообщений = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СтруктураОбъекта.Организация)
		Или Не ОбщегоНазначения.СсылкаСуществует(СтруктураОбъекта.Организация) Тогда
		Результат = Ложь;
		МассивСообщений.Добавить(НСтр("ru = 'Не найдена организация из сообщения'"));
	КонецЕсли;
	
	Если СтруктураОбъекта.ИспользоватьЗагрузкуРТиУПоОрганизации <> Истина Тогда
		Результат = Ложь;
		МассивСообщений.Добавить(НСтр("ru = 'Загрузка РТиУ по организации отключена'"));
	КонецЕсли;
	
	Если НачалоДня(СтруктураОбъекта.Дата) <= СтруктураОбъекта.ДатаЗапретаИзмененияРТиУ Тогда
		Результат = Ложь;
		МассивСообщений.Добавить(НСтр("ru = 'Дата документа меньше даты запрета изменения РТиУ по организации'"));
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.ЭтоНовый()
		И ОбщегоНазначения.СсылкаСуществует(СтруктураОбъекта.ЗаказКлиента)
		И ЗаказКлиентаЗакрыт(СтруктураОбъекта.ЗаказКлиента) Тогда
		Результат = Ложь;
		МассивСообщений.Добавить(НСтр("ru = 'Заказ клиента в статусе ""Закрыт""'"));
	КонецЕсли;
	
	Если МассивСообщений.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(МассивСообщений, Символы.ПС));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКонстантыВСтруктуруОбъекта(СтруктураОбъекта)
	
	ИдентификаторыКонстантПоОрганизации = Новый Массив;
	ИдентификаторыКонстантПоОрганизации.Добавить("ИспользоватьЗагрузкуРТиУПоОрганизации");
	ИдентификаторыКонстантПоОрганизации.Добавить("ЗаписыватьРТиУВРежимеОбменДаннымиЗагрузкаИстина");
	ИдентификаторыКонстантПоОрганизации.Добавить("ДатаЗапретаИзмененияРТиУ");
	
	Для Каждого ИдентификаторКонстанты Из ИдентификаторыКонстантПоОрганизации Цикл
		ЗначениеКонстанты = бг_КонстантыПовтИсп.ЗначениеКонстанты(
			ИдентификаторКонстанты, СтруктураОбъекта.Организация);
		СтруктураОбъекта.Вставить(ИдентификаторКонстанты, ЗначениеКонстанты);
	КонецЦикла;
	
	ИдентификаторыКонстантБезРазреза = Новый Массив;
	ИдентификаторыКонстантБезРазреза.Добавить("ПричинаОтменыНетДоступныхОстатков");
	ИдентификаторыКонстантБезРазреза.Добавить("СперваЗаписыватьПотомПроводитьВходящуюРТУ");
	
	ЗначенияКонстант = бг_КонстантыПовтИсп.ЗначенияКонстант(СтрСоединить(ИдентификаторыКонстантБезРазреза, ", "));
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		СтруктураОбъекта.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДействияПослеЗаписиОбъектаВБД(СтруктураОбъекта, ДействияПослеЗаписиОбъектаВБД)
	
	ОбменДаннымиЗагрузкаИстина = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		СтруктураОбъекта, "ЗаписыватьРТиУВРежимеОбменДаннымиЗагрузкаИстина", Ложь);
	
	ДанныеСчетФактуры = Неопределено;
	СтруктураОбъекта.Свойство("СчетФактураВыданный", ДанныеСчетФактуры);
	Если ЗначениеЗаполнено(ДанныеСчетФактуры) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторУПП",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСчетФактуры, "Идентификатор"));
		ДополнительныеПараметры.Вставить("Дата",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСчетФактуры, "Дата"));
		ДополнительныеПараметры.Вставить("Номер",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСчетФактуры, "Номер"));
		ДополнительныеПараметры.Вставить("Проведен",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСчетФактуры, "Проведен"));
		ДополнительныеПараметры.Вставить("ПометкаУдаления",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСчетФактуры, "ПометкаУдаления"));
		ДополнительныеПараметры.Вставить("ОбменДаннымиЗагрузкаИстина", ОбменДаннымиЗагрузкаИстина);
		
		ДействияПослеЗаписиОбъектаВБД.Вставить(
			"СоздатьОбновитьДокументСчетФактураВыданный", ДополнительныеПараметры);
	Иначе
		
		ВызватьИсключение НСтр("ru = 'В теле сообщения не заполнены данные счет-фактуры выданной'");
	КонецЕсли;
	
	Если бг_Номенклатура.ЕстьМаркируемаяАлкогольнаяПродукцияВДокументе(СтруктураОбъекта.ЗаказКлиента) Тогда
		
		ПараметрыФормированияТТН = ПараметрыФормированияТТН(СтруктураОбъекта, ОбменДаннымиЗагрузкаИстина);
		
		Если ПараметрыФормированияТТН = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'В теле сообщения не заполнены данные исходящей ТТН ЕГАИС'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПараметрыФормированияТТН.НомерФиксацииЕГАИС) Тогда
			ВызватьИсключение НСтр("ru = 'В теле сообщения не указан номер фиксации исходящей ТТН ЕГАИС'");
		КонецЕсли;
		
		ДействияПослеЗаписиОбъектаВБД.Вставить(
			"СоздатьОбновитьТТНИсходящаяЕГАИС", ПараметрыФормированияТТН);
	КонецЕсли;
	
КонецПроцедуры 

Функция ПараметрыФормированияТТН(СтруктураОбъекта, ОбменДаннымиЗагрузкаИстина)
	ДанныеТТН = Неопределено;
	ДополнительныеПараметры = Неопределено;
	Если СтруктураОбъекта.Свойство("ТТНЕГАИСИсходящая", ДанныеТТН) И ЗначениеЗаполнено(ДанныеТТН) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторУПП",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "Идентификатор"));
		ДополнительныеПараметры.Вставить("Дата",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "Дата"));
		ДополнительныеПараметры.Вставить("Номер",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "Номер"));
		ДополнительныеПараметры.Вставить("Проведен",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "Проведен"));
		ДополнительныеПараметры.Вставить("ПометкаУдаления",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "ПометкаУдаления"));
		ДополнительныеПараметры.Вставить("ИдентификаторЕГАИС",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "ИдентификаторТТН"));
		ДополнительныеПараметры.Вставить("ДатаФиксацииЕГАИС",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "ДатаФиксацииВЕГАИС"));
		ДополнительныеПараметры.Вставить("НомерФиксацииЕГАИС",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "НомерФиксацииВЕГАИС"));
		ДополнительныеПараметры.Вставить("ДатаОтгрузки",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТТН, "ДатаОтгрузки"));
		ДополнительныеПараметры.Вставить("ОбменДаннымиЗагрузкаИстина", ОбменДаннымиЗагрузкаИстина);
	КонецЕсли;
		
	Возврат ДополнительныеПараметры;
КонецФункции

Процедура ПодготовитьТаблицуТоваровРТиУ(СтруктураОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ТаблицаТовары = ПустаяТаблицаРТиУДляЗагрузки();
	
	МассивТовары = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "Товары", Новый Массив);
	Для каждого СтрокаТоварыРТиУ Из МассивТовары Цикл
		
		НоваяСтрокаТовары = ТаблицаТовары.Добавить();
		
		НоваяСтрокаТовары.КодСтроки = СтрокаТоварыРТиУ.КлючСтроки;
		НоваяСтрокаТовары.КоличествоУпаковок = СтрокаТоварыРТиУ.Количество;
		НоваяСтрокаТовары.Цена = СтрокаТоварыРТиУ.Цена;
		НоваяСтрокаТовары.СуммаНДС = СтрокаТоварыРТиУ.СуммаНДС;
		НоваяСтрокаТовары.Сумма = СтрокаТоварыРТиУ.Сумма;
		
		Номенклатура = Неопределено;
		Серия = Неопределено;
		
		СтруктураСерияНоменклатуры = Неопределено;
		СтрокаТоварыРТиУ.Свойство("СерияНоменклатуры", СтруктураСерияНоменклатуры);
		Если ЗначениеЗаполнено(СтруктураСерияНоменклатуры) Тогда
			// Определить номенклатуру по серии
			Серия = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку(
				"Справочник.СерииНоменклатуры", СтрокаТоварыРТиУ.СерияНоменклатуры.Идентификатор);
			
			Если ОбщегоНазначения.СсылкаСуществует(Серия) Тогда
				Номенклатура = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "бг_Номенклатура");
			Иначе
				Серия = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		КодЕК = Неопределено;
		Если СтрокаТоварыРТиУ.Свойство("ЕКНоменклатура")
			И ЗначениеЗаполнено(СтрокаТоварыРТиУ.ЕКНоменклатура) Тогда
			СтрокаТоварыРТиУ.ЕКНоменклатура.Свойство("Код", КодЕК);
			СтрокаТоварыРТиУ.Номенклатура.Вставить("КодЕК_Номенклатуры", КодЕК);
		Иначе
			Если СтрокаТоварыРТиУ.Свойство("ЕКПОСМ")
				И ЗначениеЗаполнено(СтрокаТоварыРТиУ.ЕКПОСМ) Тогда	
				СтрокаТоварыРТиУ.ЕКПОСМ.Свойство("Код", КодЕК);
				СтрокаТоварыРТиУ.Номенклатура.Вставить("КодЕК_ПОСМ", КодЕК);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			// Найти номенклатуру по идентификатору или коду ЕК
			Номенклатура = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтрокаТоварыРТиУ.Номенклатура);
		КонецЕсли;
		
		РеквизитыПаллеты = РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК);
		УпаковкаПаллета = РеквизитыПаллеты.Упаковка;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			// Установить номенклатуру по владельцу упаковки
			Номенклатура = РеквизитыПаллеты.Владелец;
		КонецЕсли;
		
		НоваяСтрокаТовары.Номенклатура = Номенклатура;
		НоваяСтрокаТовары.Серия = Серия;
		НоваяСтрокаТовары.бг_УпаковкаПаллета = УпаковкаПаллета;
		
	КонецЦикла;
	
	СписокНоменклатуры = ТаблицаТовары.ВыгрузитьКолонку("Номенклатура");
	РеквизитыНоменклатуры = РеквизитыНоменклатуры(СписокНоменклатуры);
	
	Для каждого ЗначенияРеквизитов Из РеквизитыНоменклатуры Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", ЗначенияРеквизитов.Номенклатура);
		НайденныеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаТаблицыТовары Из НайденныеСтроки Цикл
			
			СтрокаТаблицыТовары.ИспользоватьУпаковки = ЗначенияРеквизитов.ИспользоватьУпаковки;
			СтрокаТаблицыТовары.УчетПоСериям = ЗначенияРеквизитов.ИспользоватьСерии;
			Если Не СтрокаТаблицыТовары.УчетПоСериям Тогда
				СтрокаТаблицыТовары.Серия = Неопределено;
			КонецЕсли;
			
			СтрокаТаблицыТовары.УстановитьДействиеОтгрузитьВЗаказе = ЗначениеЗаполнено(СтрокаТаблицыТовары.Серия)
				Или ЗначенияРеквизитов.УстановитьДействиеОтгрузитьВЗаказеПриЗагрузкеРТиУ;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураОбъекта.Вставить("ТаблицаТовары", ТаблицаТовары);
	
КонецПроцедуры

Функция ПустаяТаблицаРТиУДляЗагрузки()
	
	ТаблицаТоварыРТиУ = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаТоварыРТиУ.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("КодСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	Колонки.Добавить("бг_УпаковкаПаллета", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	Колонки.Добавить("УстановитьДействиеОтгрузитьВЗаказе", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("УчетПоСериям", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ИспользоватьУпаковки", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Цена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Колонки.Добавить("СуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Колонки.Добавить("Сумма", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	Возврат ТаблицаТоварыРТиУ;
	
КонецФункции

Функция РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК)
	
	Результат = Новый Структура;
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("Владелец", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	Если Не ЗначениеЗаполнено(КодЕК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &КодЕК
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипЕдиницыИзмеренияПаллета
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодЕК", КодЕК);
	Запрос.УстановитьПараметр("ТипЕдиницыИзмеренияПаллета",
		ПредопределенноеЗначение("Перечисление.бг_ТипыЕдиницИзмерения.Паллета"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыНоменклатуры(СписокНоменклатуры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.ВидНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	Номенклатура.ВидНоменклатуры.бг_УчетОстатковИРезервовВРазрезеУпаковокПаллет КАК ИспользоватьУпаковки,
	|	Номенклатура.ВидНоменклатуры.бг_УстановитьДействиеОтгрузитьВЗаказеПриЗагрузкеРТиУ КАК УстановитьДействиеОтгрузитьВЗаказеПриЗагрузкеРТиУ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#Область ЗаказКлиента

Функция ЗаказКлиентаЗакрыт(ЗаказКлиента) 
  	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|ГДЕ
	|	(ВЫРАЗИТЬ(СостоянияЗаказовКлиентов.Заказ КАК Документ.ЗаказКлиента)) = &ЗаказКлиента
	| 	И СостоянияЗаказовКлиентов.Состояние = Значение(Перечисление.СостоянияЗаказовКлиентов.Закрыт)";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Процедура ОбновитьЗаказКлиента(ЗаказКлиента, СтруктураОбъекта, ОшибкаОбновленияЗаказа)
	
	Если Не ЗначениеЗаполнено(СтруктураОбъекта.ТаблицаТовары) Тогда
		ОшибкаОбновленияЗаказа = Истина;
		ВызватьИсключение НСтр("ru = 'В теле сообщения нет табличной части ""Товары""'");
	КонецЕсли;
	
	ТаблицаТоварыРТиУ = СтруктураОбъекта.ТаблицаТовары.Скопировать();
	
	КолонкиГруппировок = "Номенклатура, Серия, КодСтроки, бг_УпаковкаПаллета,
		|УстановитьДействиеОтгрузитьВЗаказе, УчетПоСериям, ИспользоватьУпаковки";
	КолонкиСуммирования = "КоличествоУпаковок";
	ТаблицаТоварыРТиУ.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	МассивОшибок = Новый Массив;
	ШаблонСообщения = НСтр("ru = 'В строке %1 не найдена %2'");
	Для каждого СтрокаТоварыРТиУ Из ТаблицаТоварыРТиУ Цикл
		Если Не ЗначениеЗаполнено(СтрокаТоварыРТиУ.Номенклатура) Тогда
			МассивОшибок.Добавить(
				СтрШаблон(ШаблонСообщения, СтрокаТоварыРТиУ.КодСтроки, "номенклатура"));
		КонецЕсли;
				
		Если СтрокаТоварыРТиУ.ИспользоватьУпаковки
			И Не ЗначениеЗаполнено(СтрокаТоварыРТиУ.бг_УпаковкаПаллета) Тогда
			МассивОшибок.Добавить(
				СтрШаблон(ШаблонСообщения, СтрокаТоварыРТиУ.КодСтроки, "упаковка"));
		КонецЕсли;
		
		Если СтрокаТоварыРТиУ.УчетПоСериям И Не ЗначениеЗаполнено(СтрокаТоварыРТиУ.Серия) Тогда
			МассивОшибок.Добавить(
				СтрШаблон(ШаблонСообщения, СтрокаТоварыРТиУ.КодСтроки, "серия"));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		ОшибкаОбновленияЗаказа = Истина;
		
		Если СтруктураОбъекта.СперваЗаписыватьПотомПроводитьВходящуюРТУ Тогда
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗаказКлиентаОбъект = ЗаказКлиента.ПолучитьОбъект();
	
	ВариантОбеспеченияПустаяСсылка = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка");
	ВариантОбеспеченияОтгрузить = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
	ВариантОбеспеченияКОбеспечению = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");

	ПустаяСерия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
	
	ТаблицаТоварыЗаказа = ЗаказКлиентаОбъект.Товары.Выгрузить();
	ТаблицаТоварыЗаказа.ЗаполнитьЗначения(ПустаяСерия, "Серия");
	ТаблицаТоварыЗаказа.ЗаполнитьЗначения(ВариантОбеспеченияПустаяСсылка, "ВариантОбеспечения");

	КэшированныеЗначения = Неопределено;
	СтруктураДействий = СтруктураДействийПриИзмененииУпаковкиВЗаказеКлиента(ЗаказКлиентаОбъект);
	Для каждого СтрокаТоварыРТиУ Из ТаблицаТоварыРТиУ Цикл
		
		КоличествоРТиУ = СтрокаТоварыРТиУ.КоличествоУпаковок;
		
		СтруктураПоиска = Новый Структура("Номенклатура, бг_УпаковкаПаллета, Серия",
			СтрокаТоварыРТиУ.Номенклатура, СтрокаТоварыРТиУ.бг_УпаковкаПаллета, ПустаяСерия);
		СтрокиЗаказаПоНоменклатуре = ТаблицаТоварыЗаказа.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиЗаказаПоНоменклатуре.Количество() = 0 Тогда
			ЗаказКлиентаОбъект = Неопределено;
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Товар ""%1"" не найден в заказе клиента'"),
									СтрокаТоварыРТиУ.Номенклатура);
		КонецЕсли;
		
		Для каждого СтрокаЗаказа Из СтрокиЗаказаПоНоменклатуре Цикл
			
			Если СтрокаТоварыРТиУ.УстановитьДействиеОтгрузитьВЗаказе Тогда
				СтрокаЗаказа.ВариантОбеспечения = ВариантОбеспеченияОтгрузить;
				СтрокаЗаказа.ДатаОтгрузки = ЗаказКлиентаОбъект.ДатаОтгрузки;
			Иначе
				СтрокаЗаказа.ВариантОбеспечения = ВариантОбеспеченияКОбеспечению;
			КонецЕсли;
			
			Если СтрокаЗаказа.КоличествоУпаковок = КоличествоРТиУ Тогда
				СтрокаЗаказа.Серия = СтрокаТоварыРТиУ.Серия;
				КоличествоРТиУ = 0;
			ИначеЕсли СтрокаЗаказа.КоличествоУпаковок < КоличествоРТиУ Тогда
				СтрокаЗаказа.Серия = СтрокаТоварыРТиУ.Серия;
				КоличествоРТиУ = КоличествоРТиУ - СтрокаЗаказа.КоличествоУпаковок;
			Иначе
				Остаток = СтрокаЗаказа.КоличествоУпаковок - КоличествоРТиУ;
				СтрокаЗаказа.Серия = СтрокаТоварыРТиУ.Серия;
				СтрокаЗаказа.КоличествоУпаковок = КоличествоРТиУ;
				КоличествоРТиУ = 0;
				
				НоваяСтрокаТоварыЗаказа = ТаблицаТоварыЗаказа.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыЗаказа,
					СтрокаЗаказа, ,
					"ДатаОтгрузки,
					|ВариантОбеспечения,
					|ИдентификаторСтроки,
					|КлючСвязи,
					|КодСтроки,
					|Количество,
					|КоличествоУпаковок,
					|Серия,
					|Сумма,
					|СуммаНДС,
					|СуммаСНДС,
					|бг_КоличествоКоробок,
					|бг_КоличествоПаллет");
				НоваяСтрокаТоварыЗаказа.КоличествоУпаковок = Остаток;
				
				// Пересчитать изменённые строки
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
					СтрокаЗаказа, СтруктураДействий, КэшированныеЗначения);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
					НоваяСтрокаТоварыЗаказа, СтруктураДействий, КэшированныеЗначения);
					
			КонецЕсли;
			
			Если КоличествоРТиУ = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоРТиУ > 0 Тогда
			ЗаказКлиентаОбъект = Неопределено;
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось распределить серии ""%1"" по товарам в заказе клиента, остаток %2'"),
				СтрокаТоварыРТиУ.Номенклатура, КоличествоРТиУ);
		КонецЕсли;
		
	КонецЦикла;
	
	бг_ЗаказыКлиентов.ПересчитатьКоличествоКоробокИПаллетВТЧ(ТаблицаТоварыЗаказа);
	
	ЗаказКлиентаОбъект.Товары.Загрузить(ТаблицаТоварыЗаказа);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЗаказКлиентаОбъект, "Товары");
	
	НеОтгружатьЧастями = Истина;
	ДатаОтгрузки = ЗаказКлиентаОбъект.Товары[0].ДатаОтгрузки;
	Для Каждого СтрокаЗаказа Из ЗаказКлиентаОбъект.Товары Цикл
		Если СтрокаЗаказа.ВариантОбеспечения = ВариантОбеспеченияПустаяСсылка Тогда
			СтрокаЗаказа.ВариантОбеспечения = ВариантОбеспеченияКОбеспечению;
			СтрокаЗаказа.ДатаОтгрузки = ЗаказКлиентаОбъект.ДатаОтгрузки;
			СтрокаЗаказа.Отменено = Истина;
			СтрокаЗаказа.ПричинаОтмены = СтруктураОбъекта.ПричинаОтменыНетДоступныхОстатков;
		КонецЕсли;
		Если НеОтгружатьЧастями И ДатаОтгрузки <> СтрокаЗаказа.ДатаОтгрузки Тогда
			НеОтгружатьЧастями = Ложь;
			ДатаОтгрузки = Дата(1, 1, 1);
		КонецЕсли;
	КонецЦикла;
	
	ЗаказКлиентаОбъект.ПометкаУдаления = Ложь;
	
	ЗаказКлиентаОбъект.ДатаОтгрузки = ДатаОтгрузки;
	ЗаказКлиентаОбъект.НеОтгружатьЧастями = НеОтгружатьЧастями;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЗаказКлиентаОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(
		ЗаказКлиентаОбъект.Склад, СкладГруппа, ЗаказКлиентаОбъект.Товары, Ложь);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(ЗаказКлиентаОбъект, Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаказКлиентаОбъект, ПараметрыУказанияСерий);
	
	бг_ЗаказыКлиентов.ПересчитатьИтоговыеДанныеВЗаказеКлиента(ЗаказКлиентаОбъект);
	
	ЗаказКлиентаОбъект.СуммаДокумента = ЗаказКлиентаОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ЗаказКлиентаОбъект);
	
	ЗаказКлиентаОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	ЗаказКлиентаОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	
КонецПроцедуры

Функция СтруктураДействийПриИзмененииУпаковкиВЗаказеКлиента(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	Возврат СтруктураДействий;
	
КонецФункции

#КонецОбласти // Конец ЗаказКлиента

Процедура ОбновитьЗаписьТранспортнойИнформации(ЗагружаемыйОбъект)
	
	НаборЗаписей = РегистрыСведений.бг_ТранспортнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ЗагружаемыйОбъект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДатаТН", ЗагружаемыйОбъект.Дата);
	ДанныеЗаполнения.Вставить("НомерТН", ЗагружаемыйОбъект.бг_НомерДокументаУПП);
	
	ЗаполнитьЗначенияСвойств(НаборЗаписей[0], ДанныеЗаполнения);
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура СоздатьПодчиненныйДокументСчетФактураВыданный(ЗагружаемыйОбъект, ДополнительныеПараметры)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Если Не ЗагружаемыйОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторУПП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторУПП");
	Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Дата");
	Номер = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Номер");
	ОбменДаннымиЗагрузкаИстина = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ОбменДаннымиЗагрузкаИстина", Ложь);
	
	СчетФактураВыданный = Неопределено;
	Если ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		СчетФактураВыданный = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку("Документ.СчетФактураВыданный", ИдентификаторУПП);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетФактураВыданный) Или Не ОбщегоНазначения.СсылкаСуществует(СчетФактураВыданный) Тогда
		СчетФактураВыданный = УчетНДСРФВызовСервера.СчетФактураВыданныйПоОснованию(
					ЗагружаемыйОбъект.Ссылка, ЗагружаемыйОбъект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетФактураВыданный) И ОбщегоНазначения.СсылкаСуществует(СчетФактураВыданный) Тогда
		ДокументОбъект = СчетФактураВыданный.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
	Иначе
		ДокументОбъект = Документы.СчетФактураВыданный.СоздатьДокумент();
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ЗагружаемыйОбъект.Ссылка);
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.Номер = Номер;
	ДокументОбъект.ДокументОснование = ЗагружаемыйОбъект.Ссылка;
	ДокументОбъект.Организация = ЗагружаемыйОбъект.Организация;
	ДокументОбъект.бг_НомерДокументаУПП = Номер;
	ДокументОбъект.ПредставлениеНомера = Номер;
	ДокументОбъект.Контрагент = ЗагружаемыйОбъект.Контрагент;
	
	ДокументОбъект.ДокументыОснования.Очистить();
	НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
	НоваяСтрока.ДокументОснование = ЗагружаемыйОбъект.Ссылка;
	НоваяСтрока.ХозяйственнаяОперация = ЗагружаемыйОбъект.ХозяйственнаяОперация;
	
	Если ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		СсылкаНовогоОбъекта = Документы.СчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУПП));
		ДокументОбъект.УстановитьСсылкуНового(СсылкаНовогоОбъекта);
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	Если ОбменДаннымиЗагрузкаИстина Тогда
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Проведен = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьПодчиненныйДокументТТНИсходящаяЕГАИС(ЗагружаемыйОбъект, ДополнительныеПараметры)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Если Не ЗагружаемыйОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторУПП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторУПП");
	Дата = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Дата");
	ИдентификаторЕГАИС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторЕГАИС");
	ДатаФиксацииЕГАИС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ДатаФиксацииЕГАИС");
	НомерФиксацииЕГАИС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "НомерФиксацииЕГАИС");
	ДатаОтгрузки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ДатаОтгрузки");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЕГАИС)
		Или Не ЗначениеЗаполнено(НомерФиксацииЕГАИС) Тогда
		Возврат;
	КонецЕсли;
	
	ТТНИсходящаяЕГАИС = Неопределено;
	Если ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		ТТНИсходящаяЕГАИС = адаптер_РаботаСДаннымиИБ.ПолучитьСсылку("Документ.ТТНИсходящаяЕГАИС", ИдентификаторУПП);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТТНИсходящаяЕГАИС) Или Не ОбщегоНазначения.СсылкаСуществует(ТТНИсходящаяЕГАИС) Тогда
		
		РезультатПоиска = ИнтеграцияЕГАИС.НайтиОбъектПоИдентификатору(
			Метаданные.Документы.ТТНИсходящаяЕГАИС,
			"ИдентификаторЕГАИС",
			ИдентификаторЕГАИС);
		
		Если ЗначениеЗаполнено(РезультатПоиска) Тогда
			ТТНИсходящаяЕГАИС = РезультатПоиска.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТТНИсходящаяЕГАИС) И ОбщегоНазначения.СсылкаСуществует(ТТНИсходящаяЕГАИС) Тогда
		ДокументОбъект = ТТНИсходящаяЕГАИС.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
	Иначе
		ДокументОбъект = Документы.ТТНИсходящаяЕГАИС.СоздатьДокумент();
	КонецЕсли;
	
	ДокументОбъект.Заполнить(ЗагружаемыйОбъект.Ссылка);
	
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
	ДокументОбъект.бг_ДатаФиксацииЕГАИС = ДатаФиксацииЕГАИС;
	ДокументОбъект.бг_НомерФиксацииЕГАИС = НомерФиксацииЕГАИС;
	
	Если ДокументОбъект.ЭтоНовый() И ЗначениеЗаполнено(ИдентификаторУПП) Тогда
		СсылкаНовогоОбъекта = Документы.ТТНИсходящаяЕГАИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторУПП));
		ДокументОбъект.УстановитьСсылкуНового(СсылкаНовогоОбъекта);
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

Процедура ЗаполнитьЦеныПоДаннымСообщения(ЗагружаемыйОбъект, ТаблицаТовары)
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'В теле сообщения нет табличной части ""Товары""'");
	КонецЕсли;

	КолонкиГруппировок = "Номенклатура, Серия, КодСтроки, Цена, СуммаНДС, Сумма";
	КолонкиСуммирования = "КоличествоУпаковок";
	ТаблицаТовары.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Для Каждого СтрокаТовара Из ЗагружаемыйОбъект.Товары Цикл
		
		Отбор = Новый Структура("Номенклатура, Серия");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовара);
		НайденнаяСтрока = ТаблицаТовары.НайтиСтроки(Отбор);
		
		Если НайденнаяСтрока.Количество() > 0 Тогда
			СтрокаТовара.Цена = НайденнаяСтрока[0].Цена;
			СтрокаТовара.СуммаНДС = НайденнаяСтрока[0].СуммаНДС;
			СтрокаТовара.Сумма = НайденнаяСтрока[0].Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(
		ЗагружаемыйОбъект.Товары,
		Новый Структура("ПересчитатьСуммуСНДС",
			ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗагружаемыйОбъект)),
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыИзЗаказаКлиента(ЗагружаемыйОбъект, ЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	ТоварыИзЗаказаКлиента = Запрос.Выполнить().Выгрузить();
	
	ЗагружаемыйОбъект.Товары.Загрузить(ТоварыИзЗаказаКлиента);

КонецПроцедуры

#КонецОбласти // Конец Загрузка

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
