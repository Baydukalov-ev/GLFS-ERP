#Область ПрограммныйИнтерфейс

Функция НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта) Экспорт
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ЗаказКлиента = адаптер_РаботаСДаннымиИБ.НайтиСсылкуПоЗагружаемымДанным(СтруктураОбъекта);
	Если ОбщегоНазначения.СсылкаСуществует(ЗаказКлиента) Тогда
		Возврат ЗаказКлиента;
	КонецЕсли;
	
	// Поиск по номеру / дате по данным клиента
	НомерПоДаннымПокупателя = Неопределено;
	Организация = Неопределено;
	Контрагент = Неопределено;
	Если СтруктураОбъекта.Свойство("НомерПоДаннымПокупателя", НомерПоДаннымПокупателя)
		И СтруктураОбъекта.Свойство("Организация", Организация)
		И СтруктураОбъекта.Свойство("Контрагент", Контрагент) Тогда
		
		Если НомерПоДаннымПокупателя = Неопределено Тогда
			Возврат ЗаказКлиента;
		КонецЕсли;
		
		Организация = адаптер_РаботаСДаннымиИБ.НайтиСсылкуПоЗагружаемымДанным(Организация);
		Контрагент = адаптер_РаботаСДаннымиИБ.НайтиСсылкуПоЗагружаемымДанным(Контрагент);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.ТипСсылки.ПолноеИмя = &ИмяДокумента
		|	И РеестрДокументов.Организация = &Организация
		|	И РеестрДокументов.Контрагент = &Контрагент
		|	И РеестрДокументов.НомерПервичногоДокумента = &НомерПоДаннымКлиента
		|";
		
		Запрос.УстановитьПараметр("ИмяДокумента", "Документ.ЗаказКлиента");
		Запрос.УстановитьПараметр("НомерПоДаннымКлиента", НомерПоДаннымПокупателя);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаказКлиента;
	
КонецФункции

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска = "ВыгружаемыйОбъект.Товары.Номенклатура.Код КАК Номенклатура_ЗначениеРеквизитаКод";
	
	ТекстЗамены = "	ВЫБОР
		|				КОГДА ВыгружаемыйОбъект.Товары.бг_УпаковкаПаллета = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ИЛИ ВыгружаемыйОбъект.Товары.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры = """"
		|					ТОГДА ВыгружаемыйОбъект.Товары.Номенклатура.Код
		|				ИНАЧЕ ВыгружаемыйОбъект.Товары.бг_УпаковкаПаллета.бг_КодЕК_Номенклатуры
		|			КОНЕЦ КАК Номенклатура_ЗначениеРеквизитаКод";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
	ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ВыгружаемыйОбъект.Товары.НомерСтроки";
	
КонецПроцедуры

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Если ЭтоВыгрузкаПоСхемеInternetOrdersList(РеквизитыИСвойства) Тогда
		ЗаполнитьСоставВыгружаемыхОбъектовInternetOrdersList(РеквизитыИСвойства);
		Возврат;
	КонецЕсли;
	
	Реквизиты = ВыгружаемыеРеквизиты();
	
	ДобавитьСвязанныеРеквизитыКВыгрузке(Реквизиты);
	
	ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты);
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		Реквизиты);
	
	ДобавитьПроизвольныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	
	ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства);
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;    
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	Если ЭтоВыгрузкаПоСхемеInternetOrdersList(ДанныеСообщения) Тогда
		Возврат ПолучитьДанныеВыгружаемогоОбъектаInternetOrdersList(Объект, ДанныеСообщения);
	КонецЕсли;
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Если ДанныеОбъекта.Реквизиты.Количество() > 0 Тогда
		РеквизитыОбъекта = ДанныеОбъекта.Реквизиты[0];
		ЗаполнитьДанныеРезервирования(РеквизитыОбъекта);
		ЗаполнитьДанныеОплаты(РеквизитыОбъекта, Объект.Соглашение);
		ЗаполнитьПризнакОтгрузкиАлкогольнойПродукции(РеквизитыОбъекта, Объект.Ссылка);
		ЗаполнитьДатуОплаты(Объект, РеквизитыОбъекта);
		ЗаполнитьСтатусЗаказаB2B(Объект, РеквизитыОбъекта);
		ЗаполнитьИдентификаторУпаковкаПаллета(РеквизитыОбъекта);
		ЗаполнитьВариантОплаты(РеквизитыОбъекта, Объект);
		ЗаполнитьПризнакОбеспечен(РеквизитыОбъекта, Объект);
		Если Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS 
			Или Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP Тогда 
			ЗаполнитьТоварыПоЗаявкеКлиента(РеквизитыОбъекта, Объект, ДанныеСообщения);
		ИначеЕсли Объект.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
			ЗаполнитьТоварыПоЗаявкеКлиентаКонсолидированногоЗаказа(РеквизитыОбъекта, Объект, ДанныеСообщения);	
		Иначе	
			РеквизитыОбъекта.Вставить("ЗаявкаКлиентаТовары", Неопределено);	
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

// Выполняет дополнительные действия перед регистрацией исходящего сообщения.
//
// Параметры:
//  Источник          - ДокументОбъект.ЗаказКлиента - заказ клиента, по которому регистрируется сообщение.
//  НастройкиВыгрузки - Массив - массив строк таблицы настроек выгрузки.
//
Процедура ПередРегистрациейИсходящегоСообщения(Источник, НастройкиВыгрузки) Экспорт
	
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.ЗаказКлиента") 
		Или ТипЗнч(НастройкиВыгрузки) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.бг_ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		
		// Так как процент консолидированных заказов относительно мал, 
		// к выгрузке по схеме InternetOrdersList будем регистрировать только консолидированные заказы.
		// Проверим здесь, а не в условиях выгрузки, чтобы не забивать очередь исходящих ненужными сообщениями,
		// которые будут пропущены.
		
		КоличествоНастроек = НастройкиВыгрузки.Количество();
		Для СчетчикНастроек = 1 По КоличествоНастроек Цикл 
			ИндексНастройки = КоличествоНастроек - СчетчикНастроек; 
			НастройкаВыгрузки = НастройкиВыгрузки[ИндексНастройки];
			ПространствоИменИсходное = НастройкаВыгрузки.ПространствоИменИсходное;
			Если ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеInternetOrdersList() Тогда
				НастройкиВыгрузки.Удалить(ИндексНастройки);
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет стандартное получение ключа маршрутизации исходящего сообщения.
//
// Параметры:
//  ДанныеСообщения   - Структура - данные регистрируемого исходящего сообщения. 
//  ИсточникОбъект    - ДокументОбъект.ЗаказКлиента - заказ клиента, по которому регистрируется сообщение.
//
// Возвращаемое значение:
//  КлючМаршрутизации - Строка - ключ маршрутизации.
//  
Функция ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ИсточникОбъект = Неопределено) Экспорт

	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	Если ЭтоВыгрузкаПоСхемеInternetOrdersList(ДанныеСообщения) Тогда
		КлючМаршрутизации = "xml.Документ.КонсолидированныйЗаказ.СписокИнтернетЗаказов";
	Иначе
		КлючМаршрутизации = адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	КонецЕсли;
	
	Если ИсточникОбъект <> Неопределено Тогда
		ПрефиксОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникОбъект.Организация, "Префикс");
		Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда
			КлючМаршрутизации = СтрШаблон("%1.%2", КлючМаршрутизации, ПрефиксОрганизации);
		КонецЕсли;	
	ИначеЕсли ДанныеСообщения.Свойство("Объект") И ОбщегоНазначения.СсылкаСуществует(ДанныеСообщения.Объект) Тогда
		ПрефиксОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "Организация.Префикс");
		Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда
			КлючМаршрутизации = СтрШаблон("%1.%2", КлючМаршрутизации, ПрефиксОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючМаршрутизации; 
	
КонецФункции

Функция ВыполненыУсловияВыгрузкиОбъекта(ДанныеСообщения) Экспорт
	
	Если ДанныеСообщения.МетаданныеОбъекта <> Метаданные.Документы.ЗаказКлиента 
		Или Не ЗначениеЗаполнено(ДанныеСообщения.Объект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Истина;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДанныеСообщения.Объект, 
				"бг_ИсточникЗаказа,бг_ДолгосрочныйРезерв,Организация,Статус,Проведен");
	
	Если ЭтоВыгрузкаПоСхемеInternetOrdersList(ДанныеСообщения) Тогда
		Результат = ВыполненыУсловияВыгрузкиInternetOrdersList(ДанныеСообщения, Реквизиты);
	Иначе
		// Проверим общие условия выгрузки для всех заказов
		// и условия выгрузки, зависящие от источника заказа.
		Результат = ВыполненыОбщиеУсловияВыгрузкиЗаказа(ДанныеСообщения, Реквизиты)
					И ВыполненыУсловияВыгрузкиПоИсточникуЗаказа(ДанныеСообщения, Реквизиты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный; 
	Перем адаптер_РаботаСДаннымиИБ;    
	
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоНовый = ЗагружаемыйОбъект.ЭтоНовый();
	
	Если Не ЭтоНовый
		И СокрЛП(ЗагружаемыйОбъект.бг_НомерДокументаУПП) <> СокрЛП(СтруктураОбъекта.Номер) 
		И СтруктураОбъекта.Свойство("бг_ОбратнаяВыгрузка")
		И СтруктураОбъекта.бг_ОбратнаяВыгрузка = Истина Тогда				
		ЗагружаемыйОбъект.бг_НомерДокументаУПП = СтруктураОбъекта.Номер; 
		
		// Если изменился только номер УПП, то запишем в режиме загрузки данных,
		// чтобы не перепроводить документ без необходимости.
		бг_ОбщегоНазначенияСервер.ЗаписатьЗагружаемыйОбъектВРежимеЗагрузкиДанных(ЗагружаемыйОбъект);
		
		Возврат; 
	ИначеЕсли СтруктураОбъекта.Свойство("бг_ОбратнаяВыгрузка")
			И СтруктураОбъекта.бг_ОбратнаяВыгрузка = Истина Тогда	
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Возврат;	
	КонецЕсли; 

	Если Не НужноЗагружатьЗаказ(СтруктураОбъекта, ЭтоНовый) Тогда
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Возврат;
	КонецЕсли;
		
	ПодготовитьДанныеШапки(ЗагружаемыйОбъект, СтруктураОбъекта);
	ПодготовитьДанныеТЧТовары(ЗагружаемыйОбъект, СтруктураОбъекта);
	
	Если ЭтоНовый Тогда
	
		ЗагружаемыйОбъект.Заполнить(Неопределено);
		
		ИсключаяСвойства = "Номер";
		адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
			ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства);

		ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ЗагружаемыйОбъект);			
			
		Если Не ЗначениеЗаполнено(ЗагружаемыйОбъект.Статус) Тогда
			ЗагружаемыйОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗагружаемыйОбъект.НалогообложениеНДС) Тогда
			ЗагружаемыйОбъект.НалогообложениеНДС =
				ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗагружаемыйОбъект.бг_ПунктНазначения) Тогда
			ЗагружаемыйОбъект.Грузополучатель =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗагружаемыйОбъект.бг_ПунктНазначения, "Клиент");
			
			Менеджер = бг_УчетАлкоголя.МенеджерПунктаНазначения(ЗагружаемыйОбъект.бг_ПунктНазначения, ЗагружаемыйОбъект.Дата);
			Если ЗначениеЗаполнено(Менеджер) Тогда
				ЗагружаемыйОбъект.Менеджер = ПользовательПоФизЛицу(Менеджер);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ОбновляемыеРеквизиты = Новый Структура;
		ОбновляемыеРеквизиты.Вставить("ПолноеИмя", СтруктураОбъекта.ПолноеИмя);
		ОбновляемыеРеквизиты.Вставить("Идентификатор", СтруктураОбъекта.Идентификатор);
		ОбновляемыеРеквизиты.Вставить("Дата", СтруктураОбъекта.Дата);
		ОбновляемыеРеквизиты.Вставить("Проведен", СтруктураОбъекта.Проведен);
		ОбновляемыеРеквизиты.Вставить("ПометкаУдаления", СтруктураОбъекта.ПометкаУдаления);
		ОбновляемыеРеквизиты.Вставить("бг_АльтернативныйПунктНазначения", СтруктураОбъекта.бг_АльтернативныйПунктНазначения);
		ОбновляемыеРеквизиты.Вставить("Склад", СтруктураОбъекта.Склад);
		ОбновляемыеРеквизиты.Вставить("ЦенаВключаетНДС", СтруктураОбъекта.ЦенаВключаетНДС);
		ОбновляемыеРеквизиты.Вставить("АдресДоставки", СтруктураОбъекта.АдресДоставки);
		ОбновляемыеРеквизиты.Вставить("ВремяДоставкиС", СтруктураОбъекта.ВремяДоставкиС);
		ОбновляемыеРеквизиты.Вставить("ВремяДоставкиПо", СтруктураОбъекта.ВремяДоставкиПо);
		ОбновляемыеРеквизиты.Вставить("ДатаДоставки", СтруктураОбъекта.ДатаДоставки);
		ОбновляемыеРеквизиты.Вставить("ДатаОплаты", СтруктураОбъекта.ДатаОплаты);
		ОбновляемыеРеквизиты.Вставить("ДатаОтгрузки", СтруктураОбъекта.ДатаОтгрузки);
		ОбновляемыеРеквизиты.Вставить("бг_ЗагруженИзУПП",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "бг_ЗагруженИзУПП"));
		ОбновляемыеРеквизиты.Вставить("бг_НомерДокументаУПП",
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "бг_НомерДокументаУПП"));
		ОбновляемыеРеквизиты.Вставить("бг_КодыСтрокБюджета", СтруктураОбъекта.бг_КодыСтрокБюджета);
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "синПокупательРозницы") Тогда 
			ОбновляемыеРеквизиты.Вставить("Контрагент", СтруктураОбъекта.Контрагент);
			ОбновляемыеРеквизиты.Вставить("Договор", СтруктураОбъекта.Договор);
			ОбновляемыеРеквизиты.Вставить("Партнер", СтруктураОбъекта.Партнер);
			ОбновляемыеРеквизиты.Вставить("бг_Магазин", СтруктураОбъекта.бг_Магазин);
		КонецЕсли;
		Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "бг_ВариантОплаты") Тогда
			ОбновляемыеРеквизиты.Вставить("бг_ВариантОплаты", СтруктураОбъекта.бг_ВариантОплаты);
		КонецЕсли;
		
		ОбновляемыеРеквизиты.Вставить("Товары", СтруктураОбъекта.Товары);
		
		адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(
			ЗагружаемыйОбъект, ОбновляемыеРеквизиты, Неопределено, Неопределено);

	КонецЕсли;

	бг_УчетАлкоголя.ЗаполнитьПунктНазначенияИЛицензиюВДокументе(ЗагружаемыйОбъект);

	ЗагружаемыйОбъект.СкидкиРассчитаны = Ложь;
	
	ОбработатьИзменениеТЧТовары(ЗагружаемыйОбъект, СтруктураОбъекта);
	
	ЗагружаемыйОбъект.Комментарий = СтрШаблон(
		НСтр("ru = '%1 загружено из УПП (Заказ покупателя №%2 от %3)'"),
		СтруктураОбъекта.Комментарий, СтруктураОбъекта.Номер, СтруктураОбъекта.Дата);
		
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовПродажи(ЗагружаемыйОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ЗагружаемыйОбъект.Склад, СкладГруппа, ЗагружаемыйОбъект.Товары, Ложь);

	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ЗагружаемыйОбъект, Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗагружаемыйОбъект, ПараметрыУказанияСерий);
	
	бг_ЗаказыКлиентов.ПересчитатьИтоговыеДанныеВЗаказеКлиента(ЗагружаемыйОбъект);
	
	ЗагружаемыйОбъект.СуммаДокумента = ЗагружаемыйОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ЗагружаемыйОбъект);
	
	Для каждого СтрокаТовары Из ЗагружаемыйОбъект.Товары Цикл
		СтрокаТовары.бг_РазницаСEDI = СтрокаТовары.бг_ЦенаСоСкидкой - СтрокаТовары.бг_ЦенаEDI;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(Реквизиты)
	
	Перем адаптер_НастройкиОбмена;    
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"бг_ОтветственныйЗаПодписаниеИнвойса_ДокументПраваПодписи", 
			ОбщегоНазначения.ОписаниеТипаСтрока(200), 
			"бг_ОтветственныйЗаПодписаниеИнвойса.ДокументПраваПодписи"));
			
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"бг_ОтветственныйЗаПодписаниеИнвойса_НомерДокументаПраваПодписи", 
			ОбщегоНазначения.ОписаниеТипаСтрока(200), 
			"бг_ОтветственныйЗаПодписаниеИнвойса.НомерДокументаПраваПодписи"));

	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"бг_ОтветственныйЗаПодписаниеИнвойса_ДатаДокументаПраваПодписи", 
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), 
			"бг_ОтветственныйЗаПодписаниеИнвойса.ДатаДокументаПраваПодписи"));
			
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"бг_ОтветственныйЗаПодписаниеИнвойса_ФизическоеЛицо_ФИО", 
			ОбщегоНазначения.ОписаниеТипаСтрока(200), 
			"бг_ОтветственныйЗаПодписаниеИнвойса.ФизическоеЛицо.ФИО"));
			
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"бг_ОтветственныйЗаПодписаниеИнвойса_ФизическоеЛицо_Ссылка", 
			Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"), 
			"бг_ОтветственныйЗаПодписаниеИнвойса.ФизическоеЛицо.Ссылка"));
	
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаТовары.КодНоменклатурыSAP", 
			ОбщегоНазначения.ОписаниеТипаСтрока(18), 
			));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаТовары.Количество", 
			ОбщегоНазначения.ОписаниеТипаЧисло(15,3), 
			));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаТовары.КодПозицииЗаказа", 
			ОбщегоНазначения.ОписаниеТипаСтрока(18), 
			));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаТовары.ШтрихКодНоменклатуры", 
			ОбщегоНазначения.ОписаниеТипаСтрока(100), 
			));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаТовары.Цена", 
			ОбщегоНазначения.ОписаниеТипаЧисло(15,2), 
			));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаТовары.КодСтрокиБюджета", 
			ОбщегоНазначения.ОписаниеТипаСтрока(25), 
			));
				
КонецПроцедуры

Процедура ДобавитьПроизвольныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;    
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"Товары.Резервировать", 
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"ВариантОплаты", 
		ОбщегоНазначения.ОписаниеТипаСтрока(100));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"ПроцентПлатежа", 
		ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"Сдвиг", 
		ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"РеализацияАлкогольнойПродукции",
		Новый ОписаниеТипов("Булево"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"ДатаОплаты", 
		Новый ОписаниеТипов("Дата"));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"СтатусЗаказаB2B", 
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_СтатусыЗаказаКЛиентаB2B"));			

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"бг_ВариантОплаты", 
		ОбщегоНазначения.ОписаниеТипаСтрока(1));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
			РеквизитыИСвойства, 
			РеквизитыИСвойства.МетаданныеОбъекта, 
			"бг_КодыСтрокБюджета",
			"синКодыСтрокБюджета", 
			ОбщегоНазначения.ОписаниеТипаСтрока(2000));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		,
		"Обеспечен",
		Новый ОписаниеТипов("Булево"));

КонецПроцедуры

Процедура ДобавитьРеквизитыЧерезТочкуКВыгрузке(Реквизиты)
	
	Перем адаптер_НастройкиОбмена;    
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаНомерПоДаннымКлиента",
			ОбщегоНазначения.ОписаниеТипаСтрока(30),
			"бг_ЗаявкаКлиента.НомерПоДаннымКлиента"));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаДатаПоДаннымКлиента",
			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя),
			"бг_ЗаявкаКлиента.ДатаПоДаннымКлиента"));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаКодГрузополучателя",
			ОбщегоНазначения.ОписаниеТипаСтрока(4),
			"бг_ЗаявкаКлиента.КодГрузополучателя"));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"ЗаявкаКлиентаКодСкладаИнтернетМагазина",
			ОбщегоНазначения.ОписаниеТипаСтрока(30),
			"бг_ЗаявкаКлиента.КодСкладаИнтернетМагазина"));
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"бг_ЗаявкаКлиентаДоставкаСледующийДень",
			Новый ОписаниеТипов("Булево"),
			"бг_ЗаявкаКлиента.ДоставкаСледующийДень"));
	
	Реквизиты.Добавить(
			адаптер_НастройкиОбмена.ОписаниеРеквизита(
				"бг_ЗаявкаКлиентаГруппаЗакупок",
				ОбщегоНазначения.ОписаниеТипаСтрока(100),
				"бг_ЗаявкаКлиента.ГруппаЗакупок"));
					
	Реквизиты.Добавить(
			адаптер_НастройкиОбмена.ОписаниеРеквизита(
				"ЗаявкаКлиентаПлановаяДатаДоставки",
				ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата),
				"бг_ЗаявкаКлиента.ПлановаяДатаДоставки"));		
				
	Реквизиты.Добавить(
		адаптер_НастройкиОбмена.ОписаниеРеквизита(
			"синКлючевойКлиент",
			Новый ОписаниеТипов("СправочникСсылка.бг_КлючевыеКлиенты"),
			"Соглашение.бг_КлючевойКлиент"));
			
КонецПроцедуры

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");
	ВыгружаемыеРеквизиты.Добавить("Организация");
	ВыгружаемыеРеквизиты.Добавить("Автор");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчет");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("бг_EDIGLNГрузополучателя");
	ВыгружаемыеРеквизиты.Добавить("бг_EDIGLNПокупателя");
	ВыгружаемыеРеквизиты.Добавить("бг_EDIIDOrder");
	ВыгружаемыеРеквизиты.Добавить("бг_EDIДатаЗаказа");
	ВыгружаемыеРеквизиты.Добавить("бг_EDIНомерЗаказа");
	ВыгружаемыеРеквизиты.Добавить("бг_ИсточникЗаказа");
	ВыгружаемыеРеквизиты.Добавить("бг_Лицензия");
	ВыгружаемыеРеквизиты.Добавить("бг_ОтветственныйЗаПодписаниеИнвойса");
	ВыгружаемыеРеквизиты.Добавить("бг_ПунктНазначения");
	ВыгружаемыеРеквизиты.Добавить("бг_УсловияПоставки");
	ВыгружаемыеРеквизиты.Добавить("Валюта");
	ВыгружаемыеРеквизиты.Добавить("Грузополучатель");
	ВыгружаемыеРеквизиты.Добавить("ДатаОтгрузки");
	ВыгружаемыеРеквизиты.Добавить("ДатаПоДаннымКлиента");
	ВыгружаемыеРеквизиты.Добавить("Договор");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("НомерПоДаннымКлиента");
	ВыгружаемыеРеквизиты.Добавить("Подразделение");
	ВыгружаемыеРеквизиты.Добавить("Склад");
	ВыгружаемыеРеквизиты.Добавить("ЦенаВключаетНДС");
	ВыгружаемыеРеквизиты.Добавить("бг_ГУИДЗаказаСПортала");
	ВыгружаемыеРеквизиты.Добавить("бг_ЗаказРозничногоПокупателя");
	ВыгружаемыеРеквизиты.Добавить("бг_Магазин");
	ВыгружаемыеРеквизиты.Добавить("Менеджер");
    ВыгружаемыеРеквизиты.Добавить("бг_РучноеСогласованиеФК");
	ВыгружаемыеРеквизиты.Добавить("бг_ОтгрузкаИзERP");
	
	//ТЧ Товары
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_РазницаСEDI");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_УпаковкаПаллета");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_ЦенаEDI");
	ВыгружаемыеРеквизиты.Добавить("Товары.ВариантОбеспечения");
	ВыгружаемыеРеквизиты.Добавить("Товары.ДатаОтгрузки");
	ВыгружаемыеРеквизиты.Добавить("Товары.Количество");
	ВыгружаемыеРеквизиты.Добавить("Товары.Номенклатура");
	ВыгружаемыеРеквизиты.Добавить("Товары.Отменено");
	ВыгружаемыеРеквизиты.Добавить("Товары.ПроцентАвтоматическойСкидки");
	ВыгружаемыеРеквизиты.Добавить("Товары.ПроцентРучнойСкидки");
	ВыгружаемыеРеквизиты.Добавить("Товары.Склад");
	ВыгружаемыеРеквизиты.Добавить("Товары.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Сумма");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаАвтоматическойСкидки");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаРучнойСкидки");
	ВыгружаемыеРеквизиты.Добавить("Товары.СуммаСНДС");
	ВыгружаемыеРеквизиты.Добавить("Товары.Цена");
	ВыгружаемыеРеквизиты.Добавить("Товары.КлючСвязи");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_ЦенаСоСкидкой");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_КодСтрокиЗаявки");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_ЗаказКлиентаИсточникОбеспечения");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_КодПозицииПредзаказаКлиента");
	ВыгружаемыеРеквизиты.Добавить("Товары.бг_НомерПредзаказаКлиента");
	
	//ТЧ СкидкиНаценки
	ВыгружаемыеРеквизиты.Добавить("СкидкиНаценки.КлючСвязи");
	ВыгружаемыеРеквизиты.Добавить("СкидкиНаценки.СкидкаНаценка");
	ВыгружаемыеРеквизиты.Добавить("СкидкиНаценки.Сумма");
	
	//ТЧ бг_ЗаявкаКлиента.Товары
	ВыгружаемыеРеквизиты.Добавить("ЗаявкаКлиентаТовары.КодНоменклатурыSAP");
	ВыгружаемыеРеквизиты.Добавить("ЗаявкаКлиентаТовары.Количество");
	ВыгружаемыеРеквизиты.Добавить("ЗаявкаКлиентаТовары.КодПозицииЗаказа");
	ВыгружаемыеРеквизиты.Добавить("ЗаявкаКлиентаТовары.ШтрихКодНоменклатуры");
	ВыгружаемыеРеквизиты.Добавить("ЗаявкаКлиентаТовары.Цена");
	ВыгружаемыеРеквизиты.Добавить("ЗаявкаКлиентаТовары.КодСтрокиБюджета");
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ЗаполнитьДанныеРезервирования(РеквизитыОбъекта)
	
	Для Каждого СтрокаТовары Из РеквизитыОбъекта.Товары Цикл
		ВариантОбеспечения = Неопределено;
		СтруктураВариантОбеспечения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаТовары, "ВариантОбеспечения");
		Если ЗначениеЗаполнено(СтруктураВариантОбеспечения)
			И СтруктураВариантОбеспечения.Свойство("ЗначениеПеречисления") Тогда
			ВариантОбеспечения = СтруктураВариантОбеспечения.ЗначениеПеречисления;
		КонецЕсли;
		Если ВариантОбеспечения = "СоСклада" 
			Или ВариантОбеспечения = "Отгрузить" 
			Или ВариантОбеспечения = "ОтгрузитьОбособленно" Тогда 
			СтрокаТовары.Вставить("Резервировать", Истина);
		Иначе
			СтрокаТовары.Вставить("Резервировать", Ложь);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОплаты(РеквизитыОбъекта, Соглашение)
	
	Если Не ЗначениеЗаполнено(Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПРЕДСТАВЛЕНИЕ(СоглашенияСКлиентамиЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК СоглашенияСКлиентамиЭтапыГрафикаОплаты
	|ГДЕ
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Соглашение);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		РеквизитыОбъекта.Вставить("ВариантОплаты", Выборка.ВариантОплаты);
		РеквизитыОбъекта.Вставить("Сдвиг", Выборка.Сдвиг);
		РеквизитыОбъекта.Вставить("ПроцентПлатежа", Выборка.ПроцентПлатежа);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОтгрузкиАлкогольнойПродукции(РеквизитыОбъекта, ЗаказКлиента)
	ВидНоменклатурыАлкогольнаяПродукция = бг_КонстантыПовтИсп.ЗначениеКонстанты("ВидНоменклатурыАлкогольнаяПродукция");

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|	И ЗаказКлиентаТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
	Запрос.УстановитьПараметр("Ссылка", ЗаказКлиента);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатурыАлкогольнаяПродукция);
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыОбъекта.Вставить("РеализацияАлкогольнойПродукции", Не РезультатЗапроса.Пустой());
КонецПроцедуры

Процедура ДобавитьКлючевыеРеквизиты(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.СкидкиНаценки,
		"бг_ТипСкидкиНаценкиCRM",
		,
		Новый ОписаниеТипов("СправочникСсылка.бг_ТипыСкидокНаценокCRM"));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Контрагенты,
		"бг_КодКлиентаSY",
		"КодSY");

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Организации,
		"бг_Тикер");
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.Номенклатура,
		"ТоварнаяКатегория",
		,
		Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"));

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.ТоварныеКатегории,
		"бг_СкюМТ",
		,
		Новый ОписаниеТипов("СправочникСсылка.бг_ЕК_СКЮ_СкюМТ"));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.бг_ЕК_СКЮ_СкюМТ,
		"Код",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(15));		
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"бг_КодЕК_Номенклатуры",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(15));
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"КодТТSY",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(9));		

	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Адрес",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(700));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"АдресГеокодирования",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(0));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"АдресЗначение",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(0));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"АдресЗначенияПолей",
		,
		ОбщегоНазначения.ОписаниеТипаСтрока(0));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Широта",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 7));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"Долгота",
		,
		ОбщегоНазначения.ОписаниеТипаЧисло(10, 7));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.битПунктыНазначения,
		"ЭтоАльтернативныйАдрес",
		,
		Новый ОписаниеТипов("Булево"));		
		
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Справочники.УпаковкиЕдиницыИзмерения,
		"бг_ТипЕдиницыИзмерения",
		,
		Новый ОписаниеТипов("ПеречислениеСсылка.бг_ТипыЕдиницИзмерения"));

КонецПроцедуры

Процедура ЗаполнитьДатуОплаты(Объект, РеквизитыОбъекта)
			
	ДатаОплаты = МаксимальнаяДатаОплатыПоЗаказуКлиента(Объект); 
	РеквизитыОбъекта.Вставить("ДатаОплаты", ДатаОплаты);			
	
КонецПроцедуры

Функция ЗаполнятьСтатусЗаказаB2B(РеквизитыЗаказа)
	
	Если ЗначениеЗаполнено(РеквизитыЗаказа.бг_ГУИДЗаказаСПортала)
		Или РеквизитыЗаказа.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьСтатусЗаказаB2B(Объект, РеквизитыОбъекта)

	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "бг_ГУИДЗаказаСПортала, бг_ИсточникЗаказа");
	
	Если ЗаполнятьСтатусЗаказаB2B(РеквизитыЗаказа) Тогда
		
		СтатусЗаказаB2B = Документы.ЗаказКлиента.бг_СтатусЗаказаКлиентаB2B(Объект);
		
		Если СтатусЗаказаB2B <> Неопределено Тогда
			
				Структура = Новый Структура;
				Структура.Вставить("Идентификатор", "");	
				
				МетаданныеСсылки = СтатусЗаказаB2B.Метаданные();
				ПолноеИмя = МетаданныеСсылки.ПолноеИмя();	
				
				Структура.Вставить("ЗначениеПеречисления", Строка(МетаданныеСсылки.ЗначенияПеречисления.Найти(СтатусЗаказаB2B).Имя));	
				Структура.Вставить("ПолноеИмяИсточник", ПолноеИмя);
				Структура.Вставить("ПолноеИмя", ПолноеИмя);
				Структура.Вставить("ТипЗначения", ПолноеИмя);
						
				РеквизитыОбъекта.Вставить("СтатусЗаказаB2B", Структура);			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьИдентификаторУпаковкаПаллета(РеквизитыОбъекта)
	
	Для Каждого СтрокаТовары Из РеквизитыОбъекта.Товары Цикл
		
		Если Не СтрокаТовары.Свойство("бг_УпаковкаПаллета") Тогда
			Продолжить;
		КонецЕсли;
		
		УпаковкаПаллета_бг_ТипЕдиницыИзмерения = Неопределено;
		бг_ТипЕдиницыИзмерения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
												СтрокаТовары.бг_УпаковкаПаллета,
												"бг_ТипЕдиницыИзмерения");
		
		Если ЗначениеЗаполнено(бг_ТипЕдиницыИзмерения)
			И бг_ТипЕдиницыИзмерения.Свойство("ЗначениеПеречисления") Тогда
			УпаковкаПаллета_бг_ТипЕдиницыИзмерения = бг_ТипЕдиницыИзмерения.ЗначениеПеречисления;
		КонецЕсли;
		
		Если УпаковкаПаллета_бг_ТипЕдиницыИзмерения = "Паллета" Тогда 
			СтрокаТовары.бг_УпаковкаПаллета.Идентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
																СтрокаТовары.бг_УпаковкаПаллета.Родитель,
																"Идентификатор"); 	 
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Функция - Получить самую позднюю дату оплаты по документу ЗаказКлиента
// Данные получаются из регистра РегистрНакопления.РасчетыСКлиентамиПланОплат
// Параметры:
// ЗаказКлиентаСсылка - ДокументСсылка.ЗаказКлиента - Ссылка на документ ЗаказКлиента 
// 
// Возвращаемое значение:
//   - Дата - Самая поздняя из даты оплат по графику оплат.
//	 - Неопределено - если не удалось получить дату оплаты.
Функция МаксимальнаяДатаОплатыПоЗаказуКлиента(Знач ЗаказКлиентаСсылка) Экспорт 

	Если Не ЗначениеЗаполнено(ЗаказКлиентаСсылка) Тогда
	     Возврат Неопределено;
	КонецЕсли;
	
	Запрос 		 = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСКлиентамиПланОплат.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПланОплат КАК РасчетыСКлиентамиПланОплат
	|ГДЕ
	|	РасчетыСКлиентамиПланОплат.ДокументПлан = &ДокументПлан
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлановогоПогашения УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументПлан", ЗаказКлиентаСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 тогда
		Возврат РезультатЗапроса[0].ДатаПлановогоПогашения;
    Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НужноЗагружатьЗаказ(СтруктураОбъекта, ЭтоНовый)
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	Организация = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.Организация);
	СтруктураОбъекта.Вставить("Организация", Организация);
	Если Не ЗначениеЗаполнено(Организация) Или Не ОбщегоНазначения.СсылкаСуществует(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьИсточникЗаказаВСтруктуреОбъекта(СтруктураОбъекта);
	
	ИсточникЗаказа = СтруктураОбъекта.бг_ИсточникЗаказа;
	EDI = ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI");
	B2B = ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B");
	PortalDistr = ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr");
	
	Если ИсточникЗаказа = EDI Тогда
		
		ЗагрузкаЗаказовEDIВключена = бг_КонстантыПовтИсп.ЗначениеКонстанты(
			"ИспользоватьЗагрузкуЗаказовКлиентовСозданныхПоEDI", Организация) = Истина;
		
		НужноЗагружать = ЗагрузкаЗаказовEDIВключена
			И (СтруктураОбъекта.Проведен Или СтруктураОбъекта.ПометкаУдаления Или ЭтоНовый);
		
	ИначеЕсли ИсточникЗаказа = B2B Или ИсточникЗаказа = PortalDistr Тогда
		НужноЗагружать = Ложь;
	Иначе
		НужноЗагружать = Истина;
	КонецЕсли;
	
	Возврат НужноЗагружать;
	
КонецФункции

Процедура ПодготовитьДанныеШапки(ЗагружаемыйОбъект, СтруктураОбъекта)
	
	Перем адаптер_РаботаСДаннымиИБ;    
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ПодготовитьДанныеШапкиЗаказаРозничногоПокупателя(СтруктураОбъекта);
	ЗаполнитВариантОплатыЗаказаРозничногоПокупателя(СтруктураОбъекта);
	
	Контрагент = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.Контрагент);
	СтруктураОбъекта.Вставить("Контрагент", Контрагент);
	
	СтруктураОбъекта.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	Если ЗначениеЗаполнено(Контрагент) И ОбщегоНазначения.СсылкаСуществует(Контрагент) Тогда
		СтруктураОбъекта.Вставить("Партнер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер"));
	КонецЕсли;
	
	Договор = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтруктураОбъекта.ДоговорКонтрагента);
	СтруктураОбъекта.Вставить("Договор", Договор);
	
	Если ЗначениеЗаполнено(Договор) И ОбщегоНазначения.СсылкаСуществует(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,
			"бг_Соглашение, бг_Соглашение.ВидЦен, бг_Соглашение.ВидЦен.ЦенаВключаетНДС,
			|Контрагент, НалогообложениеНДС, Партнер");
		СтруктураОбъекта.Вставить("Соглашение", РеквизитыДоговора.бг_Соглашение);
		СтруктураОбъекта.Вставить("Контрагент", РеквизитыДоговора.Контрагент);
		СтруктураОбъекта.Вставить("Партнер", РеквизитыДоговора.Партнер);
		СтруктураОбъекта.Вставить("ВидЦен", РеквизитыДоговора.бг_СоглашениеВидЦен);
		СтруктураОбъекта.Вставить("НалогообложениеНДС", РеквизитыДоговора.НалогообложениеНДС);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("бг_ПунктНазначения", СтруктураОбъекта.алкПунктРазгрузки);
	СтруктураОбъекта.Вставить("бг_Лицензия", СтруктураОбъекта.алкЛицензияКонтрагента);
	СтруктураОбъекта.Вставить("бг_АльтернативныйПунктНазначения", СтруктураОбъекта.синАльтернативныйПунктРазгрузки);
	
	СтруктураОбъекта.Вставить("Автор", СтруктураОбъекта.Ответственный);
	СтруктураОбъекта.Вставить("Валюта", СтруктураОбъекта.ВалютаДокумента);
	
	СтруктураОбъекта.Вставить("Приоритет",
		Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ЗагружаемыйОбъект.Приоритет));
	
	СтруктураОбъекта.Вставить("Склад", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "СкладГруппа"));
	
	СтруктураОбъекта.Вставить("ЦенаВключаетНДС",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "СуммаВключаетНДС", Истина));
	
	Если СтруктураОбъекта.Свойство("бг_СоглашениеВидЦенЦенаВключаетНДС") И
		СтруктураОбъекта.бг_СоглашениеВидЦенЦенаВключаетНДС <> Неопределено Тогда
		СтруктураОбъекта.Вставить("ЦенаВключаетНДС", СтруктураОбъекта.бг_СоглашениеВидЦенЦенаВключаетНДС);
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ХозяйственнаяОперация",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		
	СтруктураОбъекта.Вставить("СпособДоставки", ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз"));
	
	СтруктураОбъекта.Вставить("ДатаПоДаннымКлиента", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ДатаПоДаннымПокупателя"));
	СтруктураОбъекта.Вставить("НомерПоДаннымКлиента",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "НомерПоДаннымПокупателя"));
	СтруктураОбъекта.Вставить("бг_EDIGLNГрузополучателя",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "EDIGLNГрузополучателя"));
	СтруктураОбъекта.Вставить("бг_EDIGLNПокупателя",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "EDIGLNПокупателя"));
	СтруктураОбъекта.Вставить("бг_EDIIDOrder",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "EDIIDOrder"));
	СтруктураОбъекта.Вставить("бг_EDIДатаЗаказа",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "EDIДатаЗаказа"));
	СтруктураОбъекта.Вставить("бг_EDIНомерЗаказа",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "EDIНомерЗаказа"));
	СтруктураОбъекта.Вставить("бг_КодыСтрокБюджета",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "синКодыСтрокБюджета", ""));
	
	ДатаДоставкиС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ПлановаяДатаДоаставкиС");
	ДатаДоставкиПо = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ПлановаяДатаДоаставкиПо");
	Если Не ЗначениеЗаполнено(ДатаДоставкиС) Тогда
		ДатаДоставкиС = Дата(1, 1, 1);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаДоставкиПо) Тогда
		ДатаДоставкиПо = Дата(1, 1, 1);
	КонецЕсли;
	
	ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("бг_ПлановаяДатаДоставкиС", ДатаДоставкиС);
	ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("бг_ПлановаяДатаДоставкиПо", ДатаДоставкиПо);
	
	СтруктураОбъекта.Вставить("ВремяДоставкиС", Дата(1, 1, 1, Час(ДатаДоставкиС), Минута(ДатаДоставкиС), 0));
	СтруктураОбъекта.Вставить("ВремяДоставкиПо", Дата(1, 1, 1, Час(ДатаДоставкиПо), Минута(ДатаДоставкиПо), 0));
	
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "Проведен", Ложь) = Истина Тогда
		СтруктураОбъекта.Вставить("бг_ЗагруженИзУПП", Истина);
	КонецЕсли;
	
	Если СтруктураОбъекта.Свойство("бг_ИсточникЗаказа")
		И СтруктураОбъекта.бг_ИсточникЗаказа =
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI") Тогда
		Если ЗагружаемыйОбъект.Проведен И Не СтруктураОбъекта.ПометкаУдаления Тогда
			СтруктураОбъекта.Вставить("Проведен", Истина);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("бг_НомерДокументаУПП",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "Номер"));
	
КонецПроцедуры

Процедура ПодготовитьДанныеШапкиЗаказаРозничногоПокупателя(СтруктураОбъекта)
	
	Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "синПокупательРозницы") Тогда
		// Заказ розничного покупателя, переопределим реквизиты.
		Если СтруктураОбъекта.Свойство("Контрагент") Тогда
			СтруктураОбъекта.Вставить("бг_Магазин", СтруктураОбъекта.Контрагент);
		Иначе
			СтруктураОбъекта.Вставить("бг_Магазин", Неопределено);
		КонецЕсли;
		Если СтруктураОбъекта.Свойство("синДоговорРозницы") Тогда
			СтруктураОбъекта.Вставить("ДоговорКонтрагента", СтруктураОбъекта.синДоговорРозницы);
		Иначе
			СтруктураОбъекта.Вставить("ДоговорКонтрагента", Неопределено);
		КонецЕсли;
		
		СтруктураОбъекта.Вставить("Контрагент", СтруктураОбъекта.синПокупательРозницы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитВариантОплатыЗаказаРозничногоПокупателя(СтруктураОбъекта)
	
	Если бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "ВариантОплаты") Тогда
		ВариантОплатыСтрока = СтруктураОбъекта.ВариантОплаты;
		Если ВариантОплатыСтрока = "Н" Тогда
			ВариантОплаты = Перечисления.бг_ВариантыОплаты.Наличные;
		ИначеЕсли ВариантОплатыСтрока = "К" Тогда
			ВариантОплаты = Перечисления.бг_ВариантыОплаты.Карта;
		ИначеЕсли ВариантОплатыСтрока = "С" Тогда
			ВариантОплаты = Перечисления.бг_ВариантыОплаты.Счет;
		Иначе
			ВариантОплаты = Неопределено;
		КонецЕсли;
		СтруктураОбъекта.Вставить("бг_ВариантОплаты", ВариантОплаты);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьДанныеТЧТовары(ЗагружаемыйОбъект, СтруктураОбъекта)
	
	Если Не СтруктураОбъекта.Свойство("Товары") Или Не ЗначениеЗаполнено(СтруктураОбъекта.Товары) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОЦенахEDI = ДанныеОЦенахEDI(СтруктураОбъекта);
	
	ЗагружаемыйОбъект.Товары.Очистить();
	
	ВидЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ТипЦен");
	Если СтруктураОбъекта.Свойство("ВидЦен") И ЗначениеЗаполнено(СтруктураОбъекта.ВидЦен) Тогда
		ВидЦены = СтруктураОбъекта.ВидЦен;
	КонецЕсли;
	
	ДатаОтгрузки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ДатаОтгрузки", Дата(1, 1, 1));
	
	Для каждого СтрокаТовары Из СтруктураОбъекта.Товары Цикл
		
		ЗаполнитьНоменклатуруИУпаковкуВСтрокеТЧ(СтрокаТовары);
		ЗаполнитьВариантОбеспеченияВСтрокеТЧ(СтрокаТовары);
		
		СтрокаТовары.Вставить("ВидЦены", ВидЦены);
		СтрокаТовары.Вставить("ДатаОтгрузки", ДатаОтгрузки);
		СтрокаТовары.Вставить("КоличествоУпаковок", СтрокаТовары.Количество);
		СтрокаТовары.Вставить("Серия", Неопределено);
		СтрокаТовары.Вставить("КодСтроки", СтрокаТовары.КлючСтроки);
		
		Если СтруктураОбъекта.бг_ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI Тогда
			СтрокаТовары.Вставить("бг_ЦенаEDI", ДанныеОЦенахEDI.Получить(СтрокаТовары.Номенклатура));
			СтрокаТовары.Вставить("Сумма", 0);
			СтрокаТовары.Вставить("СуммаНДС", 0);
			СтрокаТовары.Вставить("СуммаСНДС", 0);
			СтрокаТовары.Вставить("Цена", 0);
			СтрокаТовары.Вставить("бг_ЦенаСоСкидкой", 0);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзменениеТЧТовары(ЗагружаемыйОбъект, СтруктураОбъекта)
	
	// Пересчитать количество коробок и паллет
	бг_ЗаказыКлиентов.ПересчитатьКоличествоКоробокИПаллетВТЧ(ЗагружаемыйОбъект.Товары);
	
	НеОтгружатьЧастями = Истина;
	ДатаОтгрузки = ЗагружаемыйОбъект.Товары[0].ДатаОтгрузки;
	Для каждого СтрокаЗаказа Из ЗагружаемыйОбъект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаЗаказа.Серия) Тогда
			СтрокаЗаказа.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
			СтрокаЗаказа.ДатаОтгрузки = ЗагружаемыйОбъект.ДатаОтгрузки;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаЗаказа.ВариантОбеспечения) Тогда
				СтрокаЗаказа.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
			КонецЕсли;	
		КонецЕсли;
		
		Если НеОтгружатьЧастями И ДатаОтгрузки <> СтрокаЗаказа.ДатаОтгрузки Тогда
			НеОтгружатьЧастями = Ложь;
			ДатаОтгрузки = Дата(1, 1, 1);
		КонецЕсли;
	КонецЦикла;
	
	бг_ЗаказыКлиентов.ОбработатьТЧТовары(ЗагружаемыйОбъект);
	
	ЗагружаемыйОбъект.ДатаОтгрузки = ДатаОтгрузки;
	ЗагружаемыйОбъект.НеОтгружатьЧастями = НеОтгружатьЧастями;
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЗагружаемыйОбъект, "Товары");
	
КонецПроцедуры

Функция ПользовательПоФизЛицу(ФизЛицоСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пользователи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизЛицоСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
КонецФункции

Функция ДанныеОЦенахEDI(СтруктураОбъекта)
	
	Результат = Новый Соответствие;
	
	ИсточникЗаказа = Неопределено;
	СтруктураОбъекта.Свойство("бг_ИсточникЗаказа", ИсточникЗаказа);
	Если ИсточникЗаказа <> ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI") Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТоварыПервичные = Неопределено;
	Если Не СтруктураОбъекта.Свойство("синТоварыПервичные", ТоварыПервичные)
		Или Не ЗначениеЗаполнено(ТоварыПервичные) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого СтрокаТовары Из ТоварыПервичные Цикл
		ЗаполнитьНоменклатуруИУпаковкуВСтрокеТЧ(СтрокаТовары);
		Результат.Вставить(СтрокаТовары.Номенклатура, СтрокаТовары.Цена);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНоменклатуруИУпаковкуВСтрокеТЧ(СтрокаТовары)
	
	Перем адаптер_РаботаСДаннымиИБ;    
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	КодЕК = Неопределено;
	Если СтрокаТовары.Свойство("ЕКНоменклатура") И ЗначениеЗаполнено(СтрокаТовары.ЕКНоменклатура) Тогда
		СтрокаТовары.ЕКНоменклатура.Свойство("Код", КодЕК);
		СтрокаТовары.Номенклатура.Вставить("КодЕК_Номенклатуры", КодЕК);
	ИначеЕсли СтрокаТовары.Свойство("ЕКПОСМ") И ЗначениеЗаполнено(СтрокаТовары.ЕКПОСМ) Тогда	
		СтрокаТовары.ЕКПОСМ.Свойство("Код", КодЕК);
		СтрокаТовары.Номенклатура.Вставить("КодЕК_ПОСМ", КодЕК);
	КонецЕсли;
	
	// Найти номенклатуру по идентификатору или коду ЕК
	Номенклатура = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтрокаТовары.Номенклатура);
	
	РеквизитыПаллеты = РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК);
	УпаковкаПаллета = РеквизитыПаллеты.Упаковка;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Или Не ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
		// Установить номенклатуру по владельцу упаковки
		Номенклатура = РеквизитыПаллеты.Владелец;
	КонецЕсли;
	
	СтрокаТовары.Вставить("Номенклатура", Номенклатура);
	СтрокаТовары.Вставить("бг_УпаковкаПаллета", УпаковкаПаллета);
	
КонецПроцедуры

Функция РеквизитыПаллетыПоКодуЕКНоменклатуры(КодЕК)
	
	Результат = Новый Структура;
	Результат.Вставить("Упаковка", ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"));
	Результат.Вставить("Владелец", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	
	Если Не ЗначениеЗаполнено(КодЕК) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	УпаковкиЕдиницыИзмерения.Владелец КАК Владелец
	|ИЗ
	|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|ГДЕ
	|	УпаковкиЕдиницыИзмерения.бг_КодЕК_Номенклатуры = &КодЕК
	|	И УпаковкиЕдиницыИзмерения.ЕдиницаИзмерения.бг_ТипЕдиницыИзмерения = &ТипЕдиницыИзмеренияПаллета
	|	И НЕ УпаковкиЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("КодЕК", КодЕК);
	Запрос.УстановитьПараметр("ТипЕдиницыИзмеренияПаллета",
		ПредопределенноеЗначение("Перечисление.бг_ТипыЕдиницИзмерения.Паллета"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТоварыПоЗаявкеКлиента(РеквизитыОбъекта, Объект, ДанныеСообщения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект);
	Если ЗначениеЗаполнено(Объект) Тогда
		ЗаявкаКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "бг_ЗаявкаКлиента");
	Иначе
		ЗаявкаКлиента = Неопределено;
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗаявкаКлиента", ЗаявкаКлиента);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки КАК КодПозицииЗаказа
	|ПОМЕСТИТЬ КодыСтрокЗаявкиЗаказа
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(битЗаявкаКлиентаТовары.КодНоменклатурыSAP) КАК КодНоменклатурыSAP,
	|	СУММА(битЗаявкаКлиентаТовары.Количество) КАК Количество,
	|	битЗаявкаКлиентаТовары.КодПозицииЗаказа КАК КодПозицииЗаказа,
	|	МАКСИМУМ(битЗаявкаКлиентаТовары.ШтрихКодНоменклатуры) КАК ШтрихКодНоменклатуры,
	|	МАКСИМУМ(битЗаявкаКлиентаТовары.ЦенаНДС) КАК Цена,
	|	МАКСИМУМ(битЗаявкаКлиентаТовары.КодСтрокиБюджета) КАК КодСтрокиБюджета
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК битЗаявкаКлиентаТовары
	|ГДЕ
	|	битЗаявкаКлиентаТовары.Ссылка = &ЗаявкаКлиента
	|	И битЗаявкаКлиентаТовары.Количество > 0
	|	И битЗаявкаКлиентаТовары.КодПозицииЗаказа В
	|			(ВЫБРАТЬ
	|				КодыСтрокЗаявкиЗаказа.КодПозицииЗаказа
	|			ИЗ
	|				КодыСтрокЗаявкиЗаказа КАК КодыСтрокЗаявкиЗаказа)
	|
	|СГРУППИРОВАТЬ ПО
	|	битЗаявкаКлиентаТовары.КодПозицииЗаказа
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодПозицииЗаказа";
	
	ПоместитьРезультатЗапросаВРеквизитыОбъекта(
		Запрос, 
		РеквизитыОбъекта, 
		Объект, 
		ДанныеСообщения, 
		"ЗаявкаКлиентаТовары");
	
КонецПроцедуры

Процедура ЗаполнитьТоварыПоЗаявкеКлиентаКонсолидированногоЗаказа(РеквизитыОбъекта, Объект, ДанныеСообщения)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказКлиентаТовары.бг_ЗаказКлиентаИсточникОбеспечения КАК ЗаказКлиента
	|ПОМЕСТИТЬ ИнтернетЗаказы
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Ссылка КАК ЗаказКлиента,
	|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки КАК КодПозицииЗаказа,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаявкаКлиентаТовары.КодНоменклатурыSAP, """")) КАК КодНоменклатурыSAP,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаявкаКлиентаТовары.ШтрихКодНоменклатуры, """")) КАК ШтрихКодНоменклатуры
	|ПОМЕСТИТЬ ИнтернетЗаказыТовары
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.битЗаявкаКлиента.Товары КАК ЗаявкаКлиентаТовары
	|		ПО ЗаказКлиентаТовары.Ссылка.бг_ЗаявкаКлиента = ЗаявкаКлиентаТовары.Ссылка
	|			И ЗаказКлиентаТовары.бг_КодСтрокиЗаявки = ЗаявкаКлиентаТовары.КодПозицииЗаказа
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ИнтернетЗаказы.ЗаказКлиента
	|			ИЗ
	|				ИнтернетЗаказы КАК ИнтернетЗаказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.Ссылка,
	|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	КодПозицииЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	битЗаявкаКлиентаТовары.КодПозицииЗаказа КАК КодПозицииЗаказа,
	|	МАКСИМУМ(битЗаявкаКлиентаТовары.КодНоменклатурыSAP) КАК КодНоменклатурыSAP,
	|	МАКСИМУМ(битЗаявкаКлиентаТовары.ШтрихКодНоменклатуры) КАК ШтрихКодНоменклатуры,
	|	МАКСИМУМ(битЗаявкаКлиентаТовары.ЦенаНДС) КАК Цена
	|ПОМЕСТИТЬ ЗаявкаКлиентаТовары
	|ИЗ
	|	Документ.битЗаявкаКлиента.Товары КАК битЗаявкаКлиентаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО битЗаявкаКлиентаТовары.Ссылка = ЗаказКлиента.бг_ЗаявкаКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка
	|	И битЗаявкаКлиентаТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	битЗаявкаКлиентаТовары.КодПозицииЗаказа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодПозицииЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки КАК КодПозицииЗаказа,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаявкаКлиентаТовары.КодНоменклатурыSAP, ЕСТЬNULL(ИнтернетЗаказыТовары.КодНоменклатурыSAP, """"))) КАК КодНоменклатурыSAP,
	|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаявкаКлиентаТовары.ШтрихКодНоменклатуры, ЕСТЬNULL(ИнтернетЗаказыТовары.ШтрихКодНоменклатуры, """"))) КАК ШтрихКодНоменклатуры,
	|	МАКСИМУМ(ЕСТЬNULL(ЗаявкаКлиентаТовары.Цена, ЗаказКлиентаТовары.Цена)) КАК Цена,
	|	"""" КАК КодСтрокиБюджета
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаявкаКлиентаТовары КАК ЗаявкаКлиентаТовары
	|		ПО ЗаказКлиентаТовары.бг_КодСтрокиЗаявки = ЗаявкаКлиентаТовары.КодПозицииЗаказа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнтернетЗаказыТовары КАК ИнтернетЗаказыТовары
	|		ПО ЗаказКлиентаТовары.бг_ЗаказКлиентаИсточникОбеспечения = ИнтернетЗаказыТовары.ЗаказКлиента
	|			И ЗаказКлиентаТовары.бг_КодПозицииПредзаказаКлиента = ИнтернетЗаказыТовары.КодПозицииЗаказа
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиентаТовары.бг_КодСтрокиЗаявки
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодПозицииЗаказа";
	
	ПоместитьРезультатЗапросаВРеквизитыОбъекта(
		Запрос, 
		РеквизитыОбъекта, 
		Объект, 
		ДанныеСообщения, 
		"ЗаявкаКлиентаТовары");
	
КонецПроцедуры	

Процедура ПоместитьРезультатЗапросаВРеквизитыОбъекта(Запрос, РеквизитыОбъекта, Объект, ДанныеСообщения, ИмяРеквизита)
	
	Перем адаптер_РаботаСДаннымиИБ;    
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ПараметрыВыполненияЗапросов = адаптер_РаботаСДаннымиИБ.ПолучитьПараметрыВыполненияЗапросов(
				Объект,
				ДанныеСообщения);	
	
		Реквизиты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(
			РезультатЗапроса,
			ПараметрыВыполненияЗапросов.ТаблицаКлючей,
			ДанныеСообщения);
			РеквизитыОбъекта.Вставить(ИмяРеквизита, Реквизиты);
	Иначе
		РеквизитыОбъекта.Вставить(ИмяРеквизита, Неопределено);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьВариантОплаты(РеквизитыОбъекта, Объект)
	
	ВариантОплаты = Объект.бг_ВариантОплаты;
	
	Если ВариантОплаты = Перечисления.бг_ВариантыОплаты.Карта Тогда
		ВариантОплаты = "К";
	ИначеЕсли ВариантОплаты = Перечисления.бг_ВариантыОплаты.Наличные Тогда
		ВариантОплаты = "Н";
	ИначеЕсли ВариантОплаты = Перечисления.бг_ВариантыОплаты.Счет Тогда
		ВариантОплаты = "С";
	Иначе 
		ВариантОплаты = "";
	КонецЕсли;
	
	РеквизитыОбъекта.Вставить("бг_ВариантОплаты", ВариантОплаты);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОбеспечен(РеквизитыОбъекта, Объект)
	
	Обеспечен = Истина;
	
	Если РеквизитыОбъекта.Свойство("Товары")
		И ТипЗнч(РеквизитыОбъекта.Товары) = Тип("Массив") Тогда
		
		Для каждого СтрокаТЧ Из РеквизитыОбъекта.Товары Цикл
			ВариантОбеспечения = бг_ОбщегоНазначенияСервер.ЗначениеПеречисленияИзСтруктурыОбъекта(
																СтрокаТЧ, 
																"ВариантОбеспечения");
			
			Если Не СтрокаТЧ.Отменено
				И СтрСравнить(ВариантОбеспечения, "КОбеспечению") = 0 Тогда
				Обеспечен = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
		
	РеквизитыОбъекта.Вставить("Обеспечен", Обеспечен);			
	
Конецпроцедуры	

#Область ПроверкаВыполненияУсловийВыгрузки

// Возвращает признак - выполнены ли общие для всех заказов клиентов условия выгрузки.
//
Функция ВыполненыОбщиеУсловияВыгрузкиЗаказа(ДанныеСообщения, Реквизиты)
	
	ВыполненыУсловия = Истина;	
	ИсточникЗаказа = Реквизиты.бг_ИсточникЗаказа;
    ИсточникЗаказаEDI = ?(ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI, Истина, Ложь);
	
	Если ЗначениеЗаполнено(ИсточникЗаказа)
		И Реквизиты.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
		ШаблонТекстаОшибки = 
			НСтр("ru = 'Документ в статусе %1.'"); 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, Реквизиты.Статус);
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;	
	КонецЕсли;	
	Если Реквизиты.бг_ДолгосрочныйРезерв Тогда
		ТекстОшибки = НСтр("ru = 'Долгосрочные резервы не выгружаются из ERP'");
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;
	КонецЕсли;
	
	Если Не ВыгружатьЧастичноОбеспеченныеЗаказы(ИсточникЗаказа)
		И ЕстьНеОбеспеченныеТовары(ДанныеСообщения.Объект) Тогда
		ТекстОшибки = НСтр("ru = 'В документе есть товарные позиции к обеспечению.'");
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;	
	КонецЕсли;	
	
	Если Не ВыгружатьЧастичноОбеспеченныеЗаказы(ИсточникЗаказа)
		И Не ЕстьОбеспеченныеТовары(ДанныеСообщения.Объект) Тогда
		ТекстОшибки = НСтр("ru = 'В документе нет обеспеченных товарных позиций.'");
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;	
	КонецЕсли;
	
	Если бг_ЗаказыКлиентов.ЭтоЗаказМагазина(ДанныеСообщения.Объект) Тогда
		ТекстОшибки = НСтр("ru = 'Заказы магазина не выгружаются'");
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;
	КонецЕсли;
	
	Если ВсеТоварыОтменены(ДанныеСообщения.Объект) Тогда
		ДанныеСообщения.ТекстОшибки = "";
		ВыполненыУсловия = Истина;
	КонецЕсли;

	Возврат ВыполненыУсловия;
	
КонецФункции	

// Возвращает признак - выполнены ли условия выгрузки заказов клиентов, зависящие от источника заказа.
//
Функция ВыполненыУсловияВыгрузкиПоИсточникуЗаказа(ДанныеСообщения, Реквизиты)
	
	ВыполненыУсловия = Истина;	
	ИсточникЗаказа = Реквизиты.бг_ИсточникЗаказа;
	Организация = Реквизиты.Организация;
	
	ИдентификаторКонстанты = ИдентификаторКонстантыИспользованияИнтеграции(ИсточникЗаказа);	
	Если ЗначениеЗаполнено(ИдентификаторКонстанты) 
		И Не бг_КонстантыПовтИсп.ЗначениеКонстанты(ИдентификаторКонстанты, Организация) Тогда
	
		УстановитьТекстОшибкиНеИспользуетсяИнтеграция(
			ДанныеСообщения, 
			ИсточникЗаказа,
			ИдентификаторКонстанты,
			Организация);
		ВыполненыУсловия = Ложь;
	
	КонецЕсли;
	
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI
		И бг_КонстантыПовтИсп.ЗначениеКонстанты(ИдентификаторКонстанты, Организация) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСообщения.Объект, "бг_ЗагруженИзУПП") Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ загружен из УПП
			|(заказы EDI после первого проведения в УПП блокируются к выгрузке из ERP)'");
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;
	
	КонецЕсли;
	
	Возврат ВыполненыУсловия;

КонецФункции	

Функция ИдентификаторКонстантыИспользованияИнтеграции(ИсточникЗаказа)

	ИдентификаторКонстанты = "";
	
	Если ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Creatio Тогда
		ИдентификаторКонстанты = "ИспользоватьВыгрузкуЗаказовCreatioИзERPВУПП";
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго Тогда
		ИдентификаторКонстанты = "ИспользоватьИнтеграциюЗаказовСЧикаго";
	ИначеЕсли ИсточникЗаказаСобственнаяРозница(ИсточникЗаказа) Тогда
		ИдентификаторКонстанты = "ИспользоватьИнтеграциюЗаказовСSAP";
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI Тогда
		ИдентификаторКонстанты = "ИспользоватьИнтеграциюЗаказовСEDI";
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B Тогда
		ИдентификаторКонстанты = "ИспользоватьИнтеграциюЗаказовСB2B";
	ИначеЕсли ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr Тогда
		ИдентификаторКонстанты = "ИспользоватьИнтеграциюЗаказовСPortalDistr";
	Иначе
		ИдентификаторКонстанты = "";
	КонецЕсли;
	
	Возврат ИдентификаторКонстанты;
	
КонецФункции	

Функция ИсточникЗаказаСобственнаяРозница(ИсточникЗаказа)

	Возврат ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS;

КонецФункции

Процедура УстановитьТекстОшибкиНеИспользуетсяИнтеграция(ДанныеСообщения, 
														ИсточникЗаказа,
														ИдентификаторКонстанты,
														Организация)
	
	ШаблонТекстаОшибки = 
		НСтр("ru = 'Документ загружен из канала продаж %1. 
			       |Значение константы ""%2"" по организации %3 - Ложь'"); 
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаОшибки,
		ИсточникЗаказа,
		ИдентификаторКонстанты,
		Организация);
	ДанныеСообщения.ТекстОшибки = ТекстОшибки;
	
КонецПроцедуры	

Функция ВыгружатьЧастичноОбеспеченныеЗаказы(ИсточникЗаказа)
	
	Возврат Не ЗначениеЗаполнено(ИсточникЗаказа) 
		Или ИсточникЗаказаСобственнаяРозница(ИсточникЗаказа)
		Или ИсточникЗаказа = Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI; 

КонецФункции

// Возвращает признак - есть ли в заказе клиента товарные позиции к обеспечению.
//
Функция ЕстьНеОбеспеченныеТовары(ЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И ЗаказКлиентаТовары.Количество > 0
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Возвращает признак - есть ли в заказе клиента обеспеченные товарные позиции.
//
Функция ЕстьОбеспеченныеТовары(ЗаказКлиента)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
	|	ЗаказКлиентаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И ЗаказКлиентаТовары.Количество > 0
	|	И НЕ ЗаказКлиентаТовары.Отменено
	|	И ЗаказКлиентаТовары.ВариантОбеспечения в (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

// Возвращает признак - есть ли в заказе клиента полностью отмененные товарные позиции.
//
Функция ВсеТоварыОтменены(ЗаказКлиента)
	
	ЗаказОтменен = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(ВЫБОР
	|					КОГДА ЗаказКлиентаТовары.Отменено
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) = МАКСИМУМ(ЗаказКлиентаТовары.НомерСтроки)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отменено
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &ЗаказКлиента
	|	И ЗаказКлиентаТовары.Количество > 0";
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		ЗаказОтменен = Выборка.Отменено;	
	КонецЦикла;	
	
	Возврат ЗаказОтменен;
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьИсточникЗаказаВСтруктуреОбъекта(СтруктураОбъекта)
	
	СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
		ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.ПустаяСсылка"));
		
	Если Не бг_ОбщегоНазначенияСервер.ЕстьЗаполненноеСвойствоВСтруктуре(СтруктураОбъекта, "синИсточник") Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.ПустаяСсылка"));
		Возврат;	
	КонецЕсли;
	
	Если СтруктураОбъекта.синИсточник.ИмяПредопределенныхДанных = "EDI" Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.EDI"));
	ИначеЕсли СтруктураОбъекта.синИсточник.ИмяПредопределенныхДанных = "B2B" Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.B2B"));
	ИначеЕсли СтруктураОбъекта.синИсточник.ИмяПредопределенныхДанных = "PortalDistr" Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.PortalDistr"));
	ИначеЕсли СтруктураОбъекта.синИсточник.ИмяПредопределенныхДанных = "Чикаго" Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.Чикаго"));
	ИначеЕсли СтруктураОбъекта.синИсточник.ИмяПредопределенныхДанных = "WINELAB_SAP_СONSOLIDATED" Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED"));
	ИначеЕсли СтруктураОбъекта.синИсточник.ИмяПредопределенныхДанных = "Предзаказ" Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_HYBRIS"));
	ИначеЕсли СтруктураОбъекта.синИсточник.ИмяПредопределенныхДанных = "WINELAB_SAP" Тогда
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP"));
	Иначе
		СтруктураОбъекта.Вставить("бг_ИсточникЗаказа",
			ПредопределенноеЗначение("Перечисление.бг_ИсточникиЗагрузкиЗаказовКлиентов.ПустаяСсылка"));
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВариантОбеспеченияВСтрокеТЧ(СтрокаТовары)
	
	Перем адаптер_РаботаСДаннымиИБ;    
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.КОбеспечению");
		
	Если СтрокаТовары.Свойство("Размещение") Тогда
		Размещение = адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(СтрокаТовары.Размещение);
		ТипРазмещения = ТипЗнч(Размещение);
		Если ЗначениеЗаполнено(Размещение) Тогда
			Если ТипРазмещения = Тип("СправочникСсылка.Склады") Тогда
				ВариантОбеспечения = 
					ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада");
			КонецЕсли;
			Если ТипРазмещения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТовары.Вставить("бг_ЗаказПоставщикуИсточникОбеспечения", Размещение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	СтрокаТовары.Вставить("ВариантОбеспечения", ВариантОбеспечения);
	
КонецПроцедуры	

#Область InternetOrdersList 

Процедура ЗаполнитьСоставВыгружаемыхОбъектовInternetOrdersList(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты = ВыгружаемыеРеквизитыInternetOrdersList();
	ДобавитьСвязанныеРеквизитыКВыгрузкеInternetOrdersList(Реквизиты);
	
	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		Реквизиты);
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъектаInternetOrdersList(Объект, ДанныеСообщения)
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	Для Каждого РеквизитыОбъекта Из ДанныеОбъекта.Реквизиты Цикл
		Если Не РеквизитыОбъекта.Свойство("Товары") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ТипЗнч(РеквизитыОбъекта.Товары) <> Тип("Массив") Тогда
			Продолжить;
		КонецЕсли;	
		
		СвернутьТЧТоварыInternetOrdersList(РеквизитыОбъекта);
		
		ДатаКЗ = СтрШаблон(
			"%1%2",
			XMLСтрока(УниверсальноеВремя(РеквизитыОбъекта.Дата)),
			".000Z");
		
		РеквизитыОбъекта.Вставить("ДатаКЗ", ДатаКЗ);
		
		РеквизитыОбъекта.Удалить("Дата");
		РеквизитыОбъекта.Удалить("Идентификатор");
	КонецЦикла;
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ВыгружаемыеРеквизитыInternetOrdersList()
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Реквизиты шапки
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Дата",
		ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя),
		"Дата"));
	
	ДлинаДатыUTC = 24;
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"ДатаКЗ",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаДатыUTC)));
	
	ДлинаНомера = 11;
	ВыгружаемыеРеквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"НомерКЗ",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНомера),
		"Номер"));
	
	Возврат ВыгружаемыеРеквизиты;
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузкеInternetOrdersList(Реквизиты)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	// Реквизиты ТЧ Товары
	ДлинаНомераПредзаказа = 30;
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.Заказ",
		ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаНомераПредзаказа),
		"Товары.бг_НомерПредзаказаКлиента"));
	
	РазрядностьКоличества = 15;
	РазрядностьДробнойЧастиКоличества = 3;
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.Количество",
		ОбщегоНазначения.ОписаниеТипаЧисло(РазрядностьКоличества, РазрядностьДробнойЧастиКоличества),
		"Товары.Количество"));
	
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.ВариантОбеспечения",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбеспечения"),
		"Товары.ВариантОбеспечения"));
	
	Реквизиты.Добавить(адаптер_НастройкиОбмена.ОписаниеРеквизита(
		"Товары.Отменено",
		Новый ОписаниеТипов("Булево"),
		"Товары.Отменено"));
	
КонецПроцедуры

// Возвращает признак выгрузки по схеме InternetOrdersList.
// Реализована отдельная схема для выгрузки сообщения для Hybris с информацией об интернет-заказах,
// включенных в консодидированный заказ, реализована отдельная схема.
//
Функция ЭтоВыгрузкаПоСхемеInternetOrdersList(ДанныеСообщения)
	
	Возврат ДанныеСообщения.Свойство("ПространствоИменИсходное")
				И ДанныеСообщения.ПространствоИменИсходное = бг_ИнтеграцияSAP.ПространствоИменИсходноеInternetOrdersList()
			Или ДанныеСообщения.Свойство("ПространствоИмен")
				И ДанныеСообщения.ПространствоИмен = бг_ИнтеграцияSAP.ПространствоИменInternetOrdersList();
	
КонецФункции

// Возвращает признак - выполнены ли условия выгрузки консолидированного заказа для Hybris.
//
Функция ВыполненыУсловияВыгрузкиInternetOrdersList(ДанныеСообщения, Реквизиты)
	
	ИсточникЗаказа = Реквизиты.бг_ИсточникЗаказа;
	
	Если ИсточникЗаказа <> Перечисления.бг_ИсточникиЗагрузкиЗаказовКлиентов.WINELAB_SAP_СONSOLIDATED Тогда
		ТекстОшибки = 
			НСтр("ru = 'По этой схеме данных выгружаются только консолидированные заказы.'"); 
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;
	ИначеЕсли Не Реквизиты.Проведен Тогда
		ТекстОшибки = 
			НСтр("ru = 'Документ не проведен.'"); 
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;
	ИначеЕсли ЕстьНеОбеспеченныеТовары(ДанныеСообщения.Объект) Тогда
		ТекстОшибки = НСтр("ru = 'В документе есть товарные позиции к обеспечению.'");
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;
	ИначеЕсли Не ЕстьОбеспеченныеТовары(ДанныеСообщения.Объект) Тогда
		ТекстОшибки = НСтр("ru = 'В документе нет обеспеченных товарных позиций.'");
		ДанныеСообщения.ТекстОшибки = ТекстОшибки;
		ВыполненыУсловия = Ложь;
	Иначе
		ВыполненыУсловия = Истина;
	КонецЕсли;
	
	Возврат ВыполненыУсловия;
	
КонецФункции

// Сворачивает ТЧ Товары по номерам интернет-заказов.
//
Процедура СвернутьТЧТоварыInternetOrdersList(РеквизитыОбъекта)
	
	// В консолидированном заказе в ТЧ Товары могут быть несколько строк с одним номером интернет-заказа
	// (по количеству товарных позиций). Свернем ТЧ Товары по номерам интернет-заказов.
	Товары = Новый Массив;
	НомераЗаказов = Новый Массив;
	Для Каждого СтрокаТЧ Из РеквизитыОбъекта.Товары Цикл
		Если Не СтрокаТоваровПередаетсяВInternetOrdersList(СтрокаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		Если НомераЗаказов.Найти(СтрокаТЧ.Заказ) = Неопределено Тогда
			НомераЗаказов.Добавить(СтрокаТЧ.Заказ);
		Иначе
			// Этот номер заказа уже добавили.
			Продолжить;
		КонецЕсли;
		Товары.Добавить(Новый Структура("Заказ", СтрокаТЧ.Заказ));
	КонецЦикла;
	РеквизитыОбъекта.Вставить("Товары", Товары);
	
КонецПроцедуры

Функция СтрокаТоваровПередаетсяВInternetOrdersList(СтрокаТЧ)
	
	Если СтрокаТЧ.Свойство("ВариантОбеспечения") Тогда
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения[СтрокаТЧ.ВариантОбеспечения.ЗначениеПеречисления];
	Иначе
		ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтрокаТЧ.Свойство("Заказ")
			И ЗначениеЗаполнено(СтрокаТЧ.Заказ)
			И Не СтрокаТЧ.Отменено
			И СтрокаТЧ.Свойство("Количество")
			И СтрокаТЧ.Количество > 0
			И (ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Отгрузить
				Или ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада);
	
КонецФункции

#КонецОбласти

#КонецОбласти
