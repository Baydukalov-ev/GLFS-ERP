#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Реквизиты = ВыгружаемыеРеквизиты(); 

	адаптер_НастройкиОбмена.УстановитьРеквизиты(
		РеквизитыИСвойства, 
		РеквизитыИСвойства.МетаданныеОбъекта, 
		Реквизиты);

	бг_ПоступлениеБезналичныхДенежныхСредствИнтеграция.ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	бг_ПоступлениеБезналичныхДенежныхСредствИнтеграция.ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
					
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	ДанныеОбъекта = адаптер_обработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);
	
	бг_ПоступлениеБезналичныхДенежныхСредствИнтеграция.ДополнитьДанныеВыгружаемогоОбъекта(Объект, ДанныеОбъекта);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	СтандартнаяОбработка = Ложь;
	
	Платежи = Неопределено;
	СтруктураОбъекта.Свойство("Платежи", Платежи);
	
	УказаныПлатежи = Платежи <> Неопределено И Платежи.Количество() > 0;
	
	УстановленаСвязьСЗаявкойНаРасходованиеДСЕРП =
		СтруктураОбъекта.Свойство("УстановленаСвязьСЗаявкойНаРасходованиеДСERP")
		И СтруктураОбъекта.УстановленаСвязьСЗаявкойНаРасходованиеДСERP = Истина;
	
	Если Не УказаныПлатежи Или Не УстановленаСвязьСЗаявкойНаРасходованиеДСЕРП Тогда
		Если ЗагружаемыйОбъект.ЭтоНовый() Тогда
			ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
		Иначе
			ЗагружаемыйОбъект.Проведен = Ложь;
			ЗагружаемыйОбъект.ПометкаУдаления = Истина;
			ЗагружаемыйОбъект.Комментарий = СтрШаблон(
				НСтр("ru='Платеж исключен из реестра платежей. Загружен из КП/СКП (Платежное поручение исходящее №%2 от %3)'"),
				СтруктураОбъекта.Номер,
				СтруктураОбъекта.Дата);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	адаптер_РаботаСДаннымиИБ.ЗаполнитьСсылочныеРеквизиты(СтруктураОбъекта, ЗагружаемыйОбъект.Метаданные());
	
	МассивОснований = Новый Массив;
	Для каждого СтрокаПлатежи Из Платежи Цикл
		МассивОснований.Добавить(СтрокаПлатежи.ЗаявкаНаОплатуСЭД);
		Если Не ЗначениеЗаполнено(СтрокаПлатежи.ЗаявкаНаОплатуСЭД)
			Или Не ОбщегоНазначения.СсылкаСуществует(СтрокаПлатежи.ЗаявкаНаОплатуСЭД) Тогда
			ВызватьИсключение НСтр("ru = 'Получена ссылка на несуществующую заявку на расходование ДС'");
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеЗначенияРеквизитовОбъекта = Новый Структура;
	Если ЗагружаемыйОбъект.ПроведеноБанком Тогда
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("ПроведеноБанком");
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("ДатаПроведенияБанком");
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("СуммаДокумента");
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("Валюта");
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("БанковскийСчет");
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("БанковскийСчетКонтрагента");
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("Контрагент");
		ТекущиеЗначенияРеквизитовОбъекта.Вставить("Договор");
		
		ЗаполнитьЗначенияСвойств(ТекущиеЗначенияРеквизитовОбъекта, ЗагружаемыйОбъект);
	КонецЕсли;
	
	ЗагружаемыйОбъект.Дата = СтруктураОбъекта.Дата;
	ЗагружаемыйОбъект.РасшифровкаПлатежа.Очистить();
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивОснований[0], "Организация");
	БанковскийСчетКасса = БанковскийСчетОрганизацииПоНомеруСчета(СтруктураОбъекта.НомерРСОтправителя, Организация);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств", Истина);
	ДанныеЗаполнения.Вставить("ДокументОснование", МассивОснований);
	ДанныеЗаполнения.Вставить("БанковскийСчетКасса", БанковскийСчетКасса);
	ДанныеЗаполнения.Вставить("Сумма", СтруктураОбъекта.СуммаДокумента);
	ДанныеЗаполнения.Вставить("ДатаОплатыСКП", СтруктураОбъекта.ДатаОплаты);
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	ЗаполнитьРеквизитыВЗаявкахНаРасходованиеДС(МассивОснований, ДанныеЗаполнения, ОписаниеОшибки, Отказ);
	Если Отказ Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	Если Не ЗагружаемыйОбъект.ЭтоНовый() И ЗагружаемыйОбъект.Проведен Тогда
		ЗагружаемыйОбъект.Движения.ДенежныеСредстваКВыплате.Очистить();
		ЗагружаемыйОбъект.Движения.ДенежныеСредстваКВыплате.Записывать = Истина;
		ЗагружаемыйОбъект.Движения.Записать();
		ЗагружаемыйОбъект.Движения.ДенежныеСредстваКВыплате.Записывать = Ложь;
	КонецЕсли;
	
	ЗагружаемыйОбъект.Заполнить(ДанныеЗаполнения);
	
	УстановитьСуммуИКурсДокумента(ЗагружаемыйОбъект, СтруктураОбъекта);
	
	ЗагружаемыйОбъект.ДатаВходящегоДокумента = СтруктураОбъекта.Дата;
	ЗагружаемыйОбъект.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтруктураОбъекта.Номер);
	
	ЗагружаемыйОбъект.Проведен = СтруктураОбъекта.Проведен;
	ЗагружаемыйОбъект.ПометкаУдаления = СтруктураОбъекта.ПометкаУдаления;
	
	ФлагКлючевыереквизитыРеквизитыИзменились = Ложь;
	Для каждого КлючИЗначение Из ТекущиеЗначенияРеквизитовОбъекта Цикл
		Если КлючИЗначение.Ключ = "ПроведеноБанком" Или КлючИЗначение.Ключ = "ДатаПроведенияБанком" Тогда
			Продолжить;
		КонецЕсли;
		ФлагКлючевыереквизитыРеквизитыИзменились = КлючИЗначение.Значение <> ЗагружаемыйОбъект[КлючИЗначение.Ключ];
		Если ФлагКлючевыереквизитыРеквизитыИзменились Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеЗначенияРеквизитовОбъекта) И Не ФлагКлючевыереквизитыРеквизитыИзменились Тогда
		ЗагружаемыйОбъект.ПроведеноБанком = ТекущиеЗначенияРеквизитовОбъекта.ПроведеноБанком;
		ЗагружаемыйОбъект.ДатаПроведенияБанком = ТекущиеЗначенияРеквизитовОбъекта.ДатаПроведенияБанком;
	КонецЕсли;
	
	Если ЗагружаемыйОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
		ЗагружаемыйОбъект.Проведен = Ложь;
	КонецЕсли;
	
	ЗагружаемыйОбъект.НазначениеПлатежа = СтруктураОбъекта.НазначениеПлатежа;
	
	ЗагружаемыйОбъект.Комментарий = СтрШаблон(НСтр("ru='Загружен из КП/СКП (Платежное поручение исходящее №%1 от %2)'"), 
		СтруктураОбъекта.Номер, СтруктураОбъекта.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	// Шапка
	ВыгружаемыеРеквизиты.Добавить("Дата");
	ВыгружаемыеРеквизиты.Добавить("Номер");
	ВыгружаемыеРеквизиты.Добавить("Проведен");
	ВыгружаемыеРеквизиты.Добавить("ПометкаУдаления");

	ВыгружаемыеРеквизиты.Добавить("Автор");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчет");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетПолучатель");
	ВыгружаемыеРеквизиты.Добавить("БанковскийСчетСписанияКомиссии");
	ВыгружаемыеРеквизиты.Добавить("Валюта");
	ВыгружаемыеРеквизиты.Добавить("ВалютаКонвертации");
	ВыгружаемыеРеквизиты.Добавить("ВидПеречисленияВБюджет");
	ВыгружаемыеРеквизиты.Добавить("ВидПлатежа");
	ВыгружаемыеРеквизиты.Добавить("ГруппаФинансовогоУчета");
	ВыгружаемыеРеквизиты.Добавить("ДанныеВыписки");
	ВыгружаемыеРеквизиты.Добавить("ДатаАвансовогоОтчета");
	ВыгружаемыеРеквизиты.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	ВыгружаемыеРеквизиты.Добавить("ДатаВходящегоДокумента");
	ВыгружаемыеРеквизиты.Добавить("ДатаВыгрузки");
	ВыгружаемыеРеквизиты.Добавить("ДатаЗагрузки");
	ВыгружаемыеРеквизиты.Добавить("ДатаПроведенияБанком");
	ВыгружаемыеРеквизиты.Добавить("Договор");
	ВыгружаемыеРеквизиты.Добавить("ДоговорСЗаказчиком");
	ВыгружаемыеРеквизиты.Добавить("ДоговорСУчастникомГОЗ");
	ВыгружаемыеРеквизиты.Добавить("ДоговорЭквайринга");
	ВыгружаемыеРеквизиты.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
	ВыгружаемыеРеквизиты.Добавить("ИдентификаторДокумента");
	ВыгружаемыеРеквизиты.Добавить("ИдентификаторПлатежа");
	ВыгружаемыеРеквизиты.Добавить("ИмяКонтрагента");
	ВыгружаемыеРеквизиты.Добавить("ИННПлательщика");
	ВыгружаемыеРеквизиты.Добавить("ИнформацияДляВалютногоКонтроля");
	ВыгружаемыеРеквизиты.Добавить("ИнформацияДляРегулирующихОрганов");
	ВыгружаемыеРеквизиты.Добавить("ИнформацияПолучателюПлатежа");
	ВыгружаемыеРеквизиты.Добавить("Исправление");
	ВыгружаемыеРеквизиты.Добавить("ИсправляемыйДокумент");
	ВыгружаемыеРеквизиты.Добавить("КассаПолучатель");
	ВыгружаемыеРеквизиты.Добавить("КодБК");
	ВыгружаемыеРеквизиты.Добавить("КодВалютнойОперации");
	ВыгружаемыеРеквизиты.Добавить("КодВидаДохода");
	ВыгружаемыеРеквизиты.Добавить("КодВыплат");
	ВыгружаемыеРеквизиты.Добавить("КодОКАТО");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("Контрагент");
	ВыгружаемыеРеквизиты.Добавить("КПППлательщика");
	ВыгружаемыеРеквизиты.Добавить("КратностьКурсаКонвертации");
	ВыгружаемыеРеквизиты.Добавить("КурсКонвертации");
	ВыгружаемыеРеквизиты.Добавить("НазначениеПлатежа");
	ВыгружаемыеРеквизиты.Добавить("НалогообложениеНДС");
	ВыгружаемыеРеквизиты.Добавить("НаправлениеДеятельности");
	ВыгружаемыеРеквизиты.Добавить("НастройкаСчетовУчета");
	ВыгружаемыеРеквизиты.Добавить("НДФЛПоВедомостям");
	ВыгружаемыеРеквизиты.Добавить("НеКонтролироватьЗаполнениеЗаявки");
	ВыгружаемыеРеквизиты.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	ВыгружаемыеРеквизиты.Добавить("НомерВходящегоДокумента");
	ВыгружаемыеРеквизиты.Добавить("ОбъектРасчетов");
	ВыгружаемыеРеквизиты.Добавить("ОплатаПоЗаявкам");
	ВыгружаемыеРеквизиты.Добавить("Организация");
	ВыгружаемыеРеквизиты.Добавить("Ответственный");
	ВыгружаемыеРеквизиты.Добавить("ОтражатьКомиссию");
	ВыгружаемыеРеквизиты.Добавить("ОчередностьПлатежа");
	ВыгружаемыеРеквизиты.Добавить("ОшибкиЗагрузки");
	ВыгружаемыеРеквизиты.Добавить("Партнер");
	ВыгружаемыеРеквизиты.Добавить("ПеречислениеВБюджет");
	ВыгружаемыеРеквизиты.Добавить("ПеречислениеСотрудникуЧерезБанк");
	ВыгружаемыеРеквизиты.Добавить("ПериодРегистрации");
	ВыгружаемыеРеквизиты.Добавить("ПлатежиПо275ФЗ");
	ВыгружаемыеРеквизиты.Добавить("ПодотчетноеЛицо");
	ВыгружаемыеРеквизиты.Добавить("Подразделение");
	ВыгружаемыеРеквизиты.Добавить("ПоказательДаты");
	ВыгружаемыеРеквизиты.Добавить("ПоказательНомера");
	ВыгружаемыеРеквизиты.Добавить("ПоказательОснования");
	ВыгружаемыеРеквизиты.Добавить("ПоказательПериода");
	ВыгружаемыеРеквизиты.Добавить("ПоказательТипа");
	ВыгружаемыеРеквизиты.Добавить("ПроведеноБанком");
	ВыгружаемыеРеквизиты.Добавить("ПроводкиПоРаботникам");
	ВыгружаемыеРеквизиты.Добавить("РаспоряжениеНаПеремещениеДенежныхСредств");
	ВыгружаемыеРеквизиты.Добавить("РегистрацияВНалоговомОргане");
	ВыгружаемыеРеквизиты.Добавить("СтатусСоставителя");
	ВыгружаемыеРеквизиты.Добавить("СтатьяДвиженияДенежныхСредств");
	ВыгружаемыеРеквизиты.Добавить("СтатьяРасходов");
	ВыгружаемыеРеквизиты.Добавить("СторнируемыйДокумент");
	ВыгружаемыеРеквизиты.Добавить("СуммаДокумента");
	ВыгружаемыеРеквизиты.Добавить("СуммаКомиссии");
	ВыгружаемыеРеквизиты.Добавить("СуммаКонвертации");
	ВыгружаемыеРеквизиты.Добавить("ТекстПлательщика");
	ВыгружаемыеРеквизиты.Добавить("ТипКомиссииЗаПеревод");
	ВыгружаемыеРеквизиты.Добавить("ТипНалога");
	ВыгружаемыеРеквизиты.Добавить("ТипПлатежаФЗ275");
	ВыгружаемыеРеквизиты.Добавить("ТипПлатежногоДокумента");
	ВыгружаемыеРеквизиты.Добавить("УведомлениеОЗачисленииВалюты");
	ВыгружаемыеРеквизиты.Добавить("УсловиеСделкиКонвертации");
	ВыгружаемыеРеквизиты.Добавить("ФорматированноеНазначениеПлатежа");
	ВыгружаемыеРеквизиты.Добавить("ХозяйственнаяОперация");

	// РасшифровкаПлатежа
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.АналитикаАктивовПассивов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.АналитикаРасходов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.Ведомость");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорАренды");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорЗаймаСотруднику");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорКредитаДепозита");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ДоговорСЗаказчиком");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ИдентификаторСтроки");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.Комментарий");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсЗнаменательВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.КурсЧислительВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.НаправлениеДеятельности");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.НастройкаСчетовУчета");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.Организация");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.Партнер");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ПериодВозникновенияРасхода");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.Подразделение");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтавкаНДС");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяКалькуляции");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.Сумма");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.СуммаНДС");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ТипПлатежаПоАренде");
	ВыгружаемыеРеквизиты.Добавить("РасшифровкаПлатежа.ТипСуммыКредитаДепозита");

	Возврат ВыгружаемыеРеквизиты;

КонецФункции

Функция БанковскийСчетОрганизацииПоНомеруСчета(НомерСчета, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчетаОрганизаций.Ссылка КАК Счет
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
		|ГДЕ
		|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
		|	И БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Счет;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьСуммуИКурсДокумента(ЗагружаемыйОбъект, СтруктураОбъекта)
	
	ЗагружаемыйОбъект.СуммаДокумента = СтруктураОбъекта.СуммаДокумента;
	
	МассивПлатежи = Новый Массив;
	Если СтруктураОбъекта.Свойство("ПлатежиФакт") И ЗначениеЗаполнено(СтруктураОбъекта.ПлатежиФакт) Тогда
		МассивПлатежи = СтруктураОбъекта.ПлатежиФакт;
	Иначе
		МассивПлатежи = СтруктураОбъекта.Платежи;
	КонецЕсли;
	
	Если МассивПлатежи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаПроведенияБанком = СтруктураОбъекта.ДатаОплаты;
	Если Не ЗначениеЗаполнено(ДатаПроведенияБанком) Тогда
		ДатаПроведенияБанком = ЗагружаемыйОбъект.Дата;
	КонецЕсли;
	ЗагружаемыйОбъект.ДатаПроведенияБанком = ДатаПроведенияБанком;
	
	ВалютаРеглУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ЗагружаемыйОбъект.Организация);
	
	Для каждого СтрокаРасшифровка Из ЗагружаемыйОбъект.РасшифровкаПлатежа Цикл
		
		КурсИКратность = ДенежныеСредстваСервер.КурсЧислительИКурсЗнаменательВзаиморасчетов(
			ЗагружаемыйОбъект.Валюта, СтрокаРасшифровка.ВалютаВзаиморасчетов, ВалютаРеглУчета, ДатаПроведенияБанком);
			
		СтрокаРасшифровка.КурсЧислительВзаиморасчетов = КурсИКратность.КурсЧислитель;
		СтрокаРасшифровка.КурсЗнаменательВзаиморасчетов = КурсИКратность.КурсЗнаменатель;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыВЗаявкахНаРасходованиеДС(ЗаявкиНаРасходованиеДС, ДанныеЗаполнения, ОписаниеОшибки, Отказ)
	
	Отказ = Ложь;
	
	ДатаКурса = ДанныеЗаполнения.ДатаОплатыСКП;
	БанковскийСчетКасса = ДанныеЗаполнения.БанковскийСчетКасса;
	
	Если Не ЗначениеЗаполнено(ДатаКурса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|	ЗаявкаНаРасходованиеДенежныхСредств.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, ) КАК КурсыВалютСрезПоследних
	|			ПО (КурсыВалютСрезПоследних.Валюта = ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов)
	|		ПО (ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка)
	|			И (ЗаявкаНаРасходованиеДенежныхСредств.Организация.ВалютаРегламентированногоУчета <> ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ВалютаВзаиморасчетов)
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка В(&ЗаявкиНаРасходованиеДС)
	|	И (ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.КурсЧислительВзаиморасчетов <> КурсыВалютСрезПоследних.Курс
	|		Или ЗаявкаНаРасходованиеДенежныхСредств.БанковскийСчет <> &БанковскийСчет)";
	
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчетКасса);
	Запрос.УстановитьПараметр("ДатаКурса", ДатаКурса);
	Запрос.УстановитьПараметр("ЗаявкиНаРасходованиеДС", ЗаявкиНаРасходованиеДС);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		
		Если ЗначениеЗаполнено(Выборка.ВалютаВзаиморасчетов) Тогда
			
			Для каждого СтрокаРасшифровка Из ДокументОбъект.РасшифровкаПлатежа Цикл
				
				СтрокаРасшифровка.КурсЧислительВзаиморасчетов = Выборка.Курс;
				СтрокаРасшифровка.КурсЗнаменательВзаиморасчетов = Выборка.Кратность;
				
				СтрокаРасшифровка.Сумма = СтрокаРасшифровка.СуммаВзаиморасчетов * СтрокаРасшифровка.КурсЧислительВзаиморасчетов /
					СтрокаРасшифровка.КурсЗнаменательВзаиморасчетов;
				
				СтрокаРасшифровка.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
					СтрокаРасшифровка.Сумма,
					УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтрокаРасшифровка.СтавкаНДС),
					Истина,
					Неопределено);
				
			КонецЦикла;
			
			ДокументОбъект.СуммаДокумента = ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма");
			
		КонецЕсли;
		
		ДокументОбъект.БанковскийСчет = БанковскийСчетКасса;
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Отказ = Истина;
			ОписаниеОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось изменить курс и/или банковский счет в документе %1 (%2)'"),
				Выборка.Ссылка,
				ОписаниеОшибки());
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат;
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти
