
#Область СлужебныеПроцедурыИФункции

#Область ФормированиеКомплектаДокументов

&ИзменениеИКонтроль("СоздатьДокументПродажи")
Процедура бг_СоздатьДокументПродажи(ПоляДокумента, ПараметрыОснования, МассивДокументов, ПараметрыФормирования)

	МенеджерНакладной = Документы.РеализацияТоваровУслуг;

	СоздаватьДокументПродажи			= ПараметрыФормирования.СоздаватьДокументПродажи;
	СоздаватьПриходныйКассовыйОрдер		= ПараметрыФормирования.СоздаватьПриходныйКассовыйОрдер;
	//++ Локализация
	СоздаватьСчетФактуру				= ПараметрыФормирования.СоздаватьСчетФактуру;
	//-- Локализация
#Вставка
	бг_ОформлениеПоЗаказам				= Не ПараметрыФормирования.ПоОрдерам;
	бг_СоздаватьТТНИсходящаяЕГАИС		= ПараметрыФормирования.бг_СоздаватьТТНИсходящаяЕГАИС; 
#КонецВставки
	
	Печатать = Ложь;

	Если ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда

		МенеджерНакладной = Документы.ВозвратТоваровОтКлиента;
		НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();

	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда

		МенеджерНакладной = Документы.ПередачаТоваровХранителю;
		НовыйДокумент = Документы.ПередачаТоваровХранителю.СоздатьДокумент();

		Печатать = ПараметрыФормирования.ПечататьПередачуТоваровХранителю;

		//++ НЕ УТ
	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5 Тогда

		МенеджерНакладной = Документы.ПередачаТоваровХранителю;
		НовыйДокумент = Документы.ПередачаТоваровХранителю.СоздатьДокумент();

		Печатать = ПараметрыФормирования.ПечататьПередачуТоваровХранителю;

		//-- НЕ УТ
	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию 
		И ПоляДокумента.Договор.КомиссионныеПродажи25 Тогда
		МенеджерНакладной = Документы.ПередачаТоваровХранителю;
		НовыйДокумент = Документы.ПередачаТоваровХранителю.СоздатьДокумент();

	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя Тогда

		МенеджерНакладной = Документы.ПоступлениеТоваровОтХранителя;
		НовыйДокумент = Документы.ПоступлениеТоваровОтХранителя.СоздатьДокумент();

	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда

		МенеджерНакладной = Документы.ВозвратТоваровОтКлиента;
		НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();

	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация =  Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда

		МенеджерНакладной = Документы.ОтгрузкаТоваровСХранения;
		НовыйДокумент = Документы.ОтгрузкаТоваровСХранения.СоздатьДокумент();

	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда

		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;

		Печатать = ПараметрыФормирования.ПечататьРеализациюТоваровУслуг;

	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда

		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;

		Печатать = ПараметрыФормирования.ПечататьРеализациюТоваровУслуг;

	Иначе

		НовыйДокумент = Документы.АктВыполненныхРабот.СоздатьДокумент();
		Печатать = ПараметрыФормирования.ПечататьАктВыполненныхРабот;

	КонецЕсли;

#Вставка
	Если ТипЗнч(ПараметрыОснования.ДокументОснование) = Тип("Массив") Тогда
		бг_ДатаОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыОснования.ДокументОснование[0],
			"ДатаОтгрузки");
	Иначе 
		бг_ДатаОтгрузки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПараметрыОснования.ДокументОснование,
			"ДатаОтгрузки");
	КонецЕсли;

	Если НачалоДня(ТекущаяДатаСеанса()) <> НачалоДня(бг_ДатаОтгрузки) Тогда
		
		НовыйДокумент.Дата = бг_ДатаОтгрузки;
	
	Иначе
#КонецВставки
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
#Вставка
	КонецЕсли;
#КонецВставки
	НовыйДокумент.Заполнить(ПараметрыОснования);

	Если ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
		//++ НЕ УТ
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5
		//-- НЕ УТ
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтХранителя
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		НовыйДокумент.СкидкиРассчитаны = Истина;
	КонецЕсли;

	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
		Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(НовыйДокумент, МенеджерНакладной);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НовыйДокумент, ПараметрыУказанияСерий);
	КонецЕсли;
#Вставка
    Если ПараметрыФормирования.Свойство("Отпустил")
		И ЗначениеЗаполнено(ПараметрыФормирования.Отпустил) Тогда
		ПараметрыФормирования.Свойство("Отпустил", НовыйДокумент.Отпустил);
	КонецЕсли;
	Если ПараметрыФормирования.Свойство("ОтпустилДолжность")
		И ЗначениеЗаполнено(ПараметрыФормирования.ОтпустилДолжность) Тогда
		ПараметрыФормирования.Свойство("ОтпустилДолжность", НовыйДокумент.ОтпустилДолжность);
	КонецЕсли;
	Если ПараметрыФормирования.Свойство("Руководитель")
		И ЗначениеЗаполнено(ПараметрыФормирования.Руководитель) Тогда
		ПараметрыФормирования.Свойство("Руководитель", НовыйДокумент.Руководитель);
	КонецЕсли;
	Если ПараметрыФормирования.Свойство("ГлавныйБухгалтер")
		И ЗначениеЗаполнено(ПараметрыФормирования.ГлавныйБухгалтер) Тогда
		ПараметрыФормирования.Свойство("ГлавныйБухгалтер", НовыйДокумент.ГлавныйБухгалтер);
	КонецЕсли;
        	Если ПараметрыФормирования.Свойство("Автор")
		И ЗначениеЗаполнено(ПараметрыФормирования.Автор) Тогда
		ПараметрыФормирования.Свойство("Автор", НовыйДокумент.Автор);
		НовыйДокумент.ДополнительныеСвойства.Вставить("бг_НеЗаполнятьАвтораПоСтатистике");
	КонецЕсли;
	
	Если ПараметрыФормирования.Свойство("ДоверенностьНомер")
		И ЗначениеЗаполнено(ПараметрыФормирования.ДоверенностьНомер) Тогда
		ПараметрыФормирования.Свойство("ДоверенностьНомер", НовыйДокумент.ДоверенностьНомер);
	КонецЕсли;
	
	Если ПараметрыФормирования.Свойство("ДоверенностьДата")
		И ЗначениеЗаполнено(ПараметрыФормирования.ДоверенностьДата) Тогда
		ПараметрыФормирования.Свойство("ДоверенностьДата", НовыйДокумент.ДоверенностьДата);
	КонецЕсли;
	
	Если ПараметрыФормирования.Свойство("ДоверенностьВыдана")
		И ЗначениеЗаполнено(ПараметрыФормирования.ДоверенностьВыдана) Тогда
		ПараметрыФормирования.Свойство("ДоверенностьВыдана", НовыйДокумент.ДоверенностьВыдана);
	КонецЕсли;
	
	Если ПараметрыФормирования.Свойство("ДоверенностьЛицо")
		И ЗначениеЗаполнено(ПараметрыФормирования.ДоверенностьЛицо) Тогда
		ПараметрыФормирования.Свойство("ДоверенностьЛицо", НовыйДокумент.ДоверенностьЛицо);
	КонецЕсли;
	
	НовыеДокументыДляЗаписи = Новый Массив;
	Если бг_ТребуетсяРазбиватьДокументПоСтрокамТоваров(НовыйДокумент) Тогда
		НовыеДокументыДляЗаписи = бг_РазбитыеРеализацииПоСтрокамТоваров(НовыйДокумент);
	Иначе
		НовыеДокументыДляЗаписи.Добавить(НовыйДокумент);	
	КонецЕсли;
	
	Для Каждого НовыйДокумент Из НовыеДокументыДляЗаписи Цикл  
#КонецВставки
	
	ДокументПроведен = Ложь;

	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	НовыйДокументСтруктура = НовыйСозданныйДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокументСтруктура, НовыйДокумент);
	НовыйДокументСтруктура.Документ 			= НовыйДокумент.Ссылка;
	НовыйДокументСтруктура.МассивРаспоряжений 	= ПараметрыОснования.ДокументОснование;

	Если НовыйДокумент.ПроверитьЗаполнение() Тогда

		Если СоздаватьДокументПродажи Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				ДокументПроведен = Истина;
				НовыйДокументСтруктура.Проведен 			= Истина;
				НовыйДокументСтруктура.Печатать 			= Печатать;
			Исключение
				НовыйДокументСтруктура.Проведен 			= Ложь;
				НовыйДокументСтруктура.ЕстьОшибки 			= Истина;

				ТекстОшибки = НСтр("ru = 'Проведение документа %1 завершено с ошибкой';
				|en = 'An error occurred when posting document %1'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, НовыйДокумент);
				ЗаписьЖурналаРегистрации(ТекстОшибки,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			Печатать = Ложь;
			НовыйДокументСтруктура.Проведен 			= Ложь;
			НовыйДокументСтруктура.Печатать 			= Печатать;
		КонецЕсли;

		//++ Локализация
		Если ПоляДокумента.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
#Удаление
			И (ДокументПроведен
			И ((ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
#КонецУдаления
#Вставка
			И (((ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
#КонецВставки		
			Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
			И Не (ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
			//++ НЕ УТ
			Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5
			//-- НЕ УТ
			Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя
			Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
			Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
			Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала))
			Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот)
			И СоздаватьСчетФактуру Тогда

			ИмяДокумента = УчетНДСУП.ПолноеИмяСчетФактурыВыданный();
			Если ЗначениеЗаполнено(ИмяДокумента) Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
				ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
				ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
				ПараметрыРегистрации.Ссылка = НовыйДокумент.Ссылка;
				ПараметрыРегистрации.Дата = НовыйДокумент.Дата;
				ПараметрыРегистрации.Организация = НовыйДокумент.Организация;
				ПараметрыРегистрации.Контрагент = НовыйДокумент.Контрагент;
				ПараметрыРегистрации.Организация = НовыйДокумент.Организация;
				ПараметрыРегистрации.НалогообложениеНДС = НовыйДокумент.НалогообложениеНДС;
				ПараметрыРегистрации.РеализацияТоваров = Истина;
				ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
#Вставка
				Если Не ДокументПроведен Тогда
					ПараметрыРегистрации.Вставить("бг_ЗаписатьБезПроведения", Истина);
				КонецЕсли;
#КонецВставки
				Результат = УчетНДСУП.ЗаполнитьСчетФактураВыданный(ДокументОбъект, ПараметрыРегистрации);

				НовыйДокументСФСтруктура = НовыйСозданныйДокумент();
				НовыйДокументСФСтруктура.Документ 				= ДокументОбъект.Ссылка;
				НовыйДокументСФСтруктура.Печатать 				= Ложь;
				НовыйДокументСФСтруктура.МассивРаспоряжений 	= ПараметрыОснования.ДокументОснование;
				НовыйДокументСФСтруктура.Организация 			= ДокументОбъект.Организация;
				НовыйДокументСФСтруктура.Проведен 				= Результат.Проведен;
				МассивДокументов.Добавить(НовыйДокументСФСтруктура);
			КонецЕсли;
		КонецЕсли;
		//-- Локализация
#Вставка	
			Если ДокументПроведен 
					И ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
					И Не (ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала)
					И бг_ОформлениеПоЗаказам
					И бг_СоздаватьТТНИсходящаяЕГАИС Тогда
			
				бг_СоздатьДокументТТНИсходящаяЕГАИС(НовыйДокумент.Ссылка, МассивДокументов);
						
			КонецЕсли;
#КонецВставки
		
		Если СоздаватьПриходныйКассовыйОрдер И ДокументПроведен Тогда
			СоздатьДокументОплаты(НовыйДокумент.Ссылка, МассивДокументов, ПараметрыФормирования, ПараметрыОснования.ДокументОснование);
		КонецЕсли;

	Иначе
		НовыйДокументСтруктура.ЕстьОшибки 			= Истина;
	КонецЕсли;

	МассивДокументов.Добавить(НовыйДокументСтруктура);
#Вставка	
	КонецЦикла;
#КонецВставки
	
КонецПроцедуры
 
// Процедура - Создать документ ТТНИсходящая ЕГАИС
//
// Параметры:
//  Основание			 - ДокументСсылка.РеализацияТоваровУслуг 
//  СозданныеДокументы	 - Структура	 - структура, созданых документов из
// 							рабочего места накладные к оформлению.
//						- Неопределено - Если добавление созданных документов не требуется.
//
Процедура бг_СоздатьДокументТТНИсходящаяЕГАИС(Основание, СозданныеДокументы = Неопределено) Экспорт
	
	ТТНИсходящаяЕГАИСПроведен 	= Ложь;

	ТТНИсходящаяЕГАИСОбъект = Документы.ТТНИсходящаяЕГАИС.СоздатьДокумент();
	ТТНИсходящаяЕГАИСОбъект.Заполнить(Основание);
   	бг_ПроверитьСериюРассчитатьСтатусВТЧТовары(ТТНИсходящаяЕГАИСОбъект);
	
	Если ТТНИсходящаяЕГАИСОбъект.ПроверитьЗаполнение() Тогда
		Попытка
			ТТНИсходящаяЕГАИСОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ТТНИсходящаяЕГАИСПроведен = Истина;
		Исключение
			ТекстОшибки = НСтр("ru = 'Проведение документа %1 завершено с ошибкой';
			|en = 'An error occurred when posting document %1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ТТНИсходящаяЕГАИСОбъект);
			ЗаписьЖурналаРегистрации(ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		ТекстОшибки = НСтр(
			"ru = 'Проведение ТТН по документу %1 завершено с ошибкой. Заполнены не все обязательные поля документа';
			|en = 'Проведение ТТН по документу %1 завершено с ошибкой. Заполнены не все обязательные поля документа'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Основание);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Групповое создание ТТН из рабочего места ""Накладные к оформлению""'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	

	Если СозданныеДокументы <> Неопределено Тогда
		
		Распоряжения = Новый Массив;
		Распоряжения.Добавить(Основание);
		
		СозданныйДокумент = НовыйСозданныйДокумент();
		ЗаполнитьЗначенияСвойств(СозданныйДокумент, ТТНИсходящаяЕГАИСОбъект);
		СозданныйДокумент.Организация			= ТТНИсходящаяЕГАИСОбъект.Грузоотправитель;
		СозданныйДокумент.Документ 				= ТТНИсходящаяЕГАИСОбъект.Ссылка;
		СозданныйДокумент.МассивРаспоряжений	= Распоряжения;
		
		Если ТТНИсходящаяЕГАИСПроведен Тогда
			СозданныйДокумент.Проведен 			= Истина;
			СозданныйДокумент.Печатать 			= Ложь;
		Иначе
			СозданныйДокумент.Проведен 			= Ложь;
			СозданныйДокумент.ЕстьОшибки 		= Истина;
		КонецЕсли;
		
		СозданныеДокументы.Добавить(СозданныйДокумент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура бг_ПроверитьСериюРассчитатьСтатусВТЧТовары(Объект)
	
	КэшированныеЗначения 	= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ПараметрыУказанияСерий 	= ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ТТНИсходящаяЕГАИС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
								Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Неопределено));
			
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовар, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция бг_ТребуетсяРазбиватьДокументПоСтрокамТоваров(ДокументОбъект)
	
	ТребуетсяРазбивать = Ложь;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") И ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Контрагент, "бг_РазделятьРеализацииПоСериямНоменклатуры") Тогда
		
		ТребуетсяРазбивать = Истина;
	КонецЕсли;	
	
	Возврат ТребуетсяРазбивать;
	
КонецФункции

Функция бг_РазбитыеРеализацииПоСтрокамТоваров(РеализацияТоваровУслугОбъект)
	
	НовыеРеализацииТоваровУслуг = Новый Массив;
	
	Для Каждого СтрокаТовары Из РеализацияТоваровУслугОбъект.Товары Цикл 
		НоваяРеализацияТоваровУслуг = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(НоваяРеализацияТоваровУслуг, РеализацияТоваровУслугОбъект, , "Товары");	
		ЗаполнитьЗначенияСвойств(НоваяРеализацияТоваровУслуг.Товары.Добавить(), СтрокаТовары); 
		
		НовыеРеализацииТоваровУслуг.Добавить(НоваяРеализацияТоваровУслуг);
	КонецЦикла;
	
	Возврат НовыеРеализацииТоваровУслуг;
	
КонецФункции

&ИзменениеИКонтроль("НовыеПараметрыОформленияКомплектаДокументов")
Функция бг_НовыеПараметрыОформленияКомплектаДокументов()

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КлючОбъекта",							"");
	СтруктураПараметров.Вставить("Организация",							Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("Склад",								Справочники.Склады.ПустаяСсылка());
	СтруктураПараметров.Вставить("СостояниеНакладной",					"");
	СтруктураПараметров.Вставить("СостояниеОрдера",						"");
	СтруктураПараметров.Вставить("СохраненыНастройкиОформления",		Ложь);

	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",			Ложь);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",		Ложь);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",		Ложь);
	СтруктураПараметров.Вставить("ПечататьПередачуТоваровХранителю",	Ложь);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",			Ложь);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",		Ложь);
	СтруктураПараметров.Вставить("ПробиватьФискальныйЧек",				Ложь);
	//++ Локализация
	СтруктураПараметров.Вставить("СоздаватьСчетФактуру",				Ложь);
	//-- Локализация
	СтруктураПараметров.Вставить("НеОткрыватьФормуСозданногоДокумента",	Ложь);
#Вставка
	СтруктураПараметров.Вставить("бг_СоздаватьТТНИсходящаяЕГАИС", 		Ложь);
#КонецВставки
	
	Возврат СтруктураПараметров;

КонецФункции

#КонецОбласти

#КонецОбласти
