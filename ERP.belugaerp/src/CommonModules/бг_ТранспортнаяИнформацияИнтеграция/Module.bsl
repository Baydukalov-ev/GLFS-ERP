
#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСоставВыгружаемыхОбъектов(РеквизитыИСвойства, ФорматСообщения, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ОставитьРеквизиты(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта,
		ВыгружаемыеРеквизиты());

	ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства);
	ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства);
	
КонецПроцедуры

Функция СоздатьНаборЗаписейРегистра(Отбор, ПолноеИмя) Экспорт
	
	Перем адаптер_РаботаСДаннымиИБ;    
	
	адаптер_РаботаСДаннымиИБ = ОбщегоНазначения.ОбщийМодуль("адаптер_РаботаСДаннымиИБ");
	
	НаборЗаписей = РегистрыСведений.бг_ТранспортнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(
		адаптер_РаботаСДаннымиИБ.ПолучитьЗначениеРеквизита(Отбор.Объект));
			
	Возврат НаборЗаписей;
	
КонецФункции

Процедура ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтруктураОбъекта, СписокСвойств, ИсключаяСвойства, СтандартнаяОбработка) Экспорт
	
	Перем адаптер_ОбработчикиСобытийСтандартный;    
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");

	адаптер_ОбработчикиСобытийСтандартный.ЗаполнитьЗагружаемыйОбъект(ЗагружаемыйОбъект, 
		СтруктураОбъекта, 
		СписокСвойств, 
		ИсключаяСвойства);

	ТекущиеДанныеДоставки = ОпределитьДанныеДоставки(ЗагружаемыйОбъект.Объект);
    ЗаполнитьЗначенияСвойств(ЗагружаемыйОбъект, ТекущиеДанныеДоставки);
	СтандартнаяОбработка = Ложь;
	
	Если СтруктураОбъекта.Свойство("синТипВладенияАМ") Тогда
		ЗагружаемыйОбъект.ТипВладенияТС = ТипВладенияТСПоКоду(СтруктураОбъекта.синТипВладенияАМ);
	КонецЕсли;
	СтруктураОбъекта.Свойство("синОрганизаторПеревозки", ЗагружаемыйОбъект.ОрганизаторПеревозки);
	СтруктураОбъекта.Свойство("синДоговорНаВладение",    ЗагружаемыйОбъект.ДоговорНаВладение);
	СтруктураОбъекта.Свойство("синМыГрузимТовар",        ЗагружаемыйОбъект.МыГрузимТовар);
	
КонецПроцедуры

Процедура ЗаполнитьТекстыЗапросовУсловиями(ТекстЗапроса, ТекстЗапросаТаблицаКлючей, ПараметрыЗапроса, НастройкаВыгрузки, Объект, СтандартнаяОбработка) Экспорт
	
	ТекстПоиска = "NULL КАК ТипВладенияАМ";
	ТекстЗамены = "ЕстьNULL(ВыгружаемыйОбъект.ТипВладенияТС.Код, 0) КАК ТипВладенияАМ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстПоиска, ТекстЗамены);
	
КонецПроцедуры

Процедура ЗаписатьЗагружаемыйОбъект(ЗагружаемыйОбъект, СтандартнаяОбработка) Экспорт
	ИспользоватьЗагрузкуТранспортнойИнформации = бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьЗагрузкуТранспортнойИнформации");
	Если ИспользоватьЗагрузкуТранспортнойИнформации <> Истина Тогда
		ЗагружаемыйОбъект.ДополнительныеСвойства.Вставить("СтандартнаяЗаписьНеТребуется", Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ПередРегистрациейИсходящегоСообщения(Источник, НастройкиВыгрузки) Экспорт
	
	Если ЗначениеЗаполнено(Источник.Отбор)
		И Источник.Отбор.Найти("Объект") <> Неопределено
		И Не ВыгружатьОбъект(Источник.Отбор.Объект.Значение) Тогда
		Источник.ДополнительныеСвойства.Вставить("адаптер_ЭтоЗагрузкаДанных", Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения) Экспорт
	
	Перем адаптер_обработчикиСобытийСтандартный;    
	адаптер_обработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_обработчикиСобытийСтандартный");
	
	СтруктураРезультат = адаптер_ОбработчикиСобытийСтандартный.ПолучитьДанныеВыгружаемогоОбъекта(Объект, ДанныеСообщения);

	ПараметрыВыполненияЗапросов = адаптер_РаботаСДаннымиИБ.ПолучитьПараметрыВыполненияЗапросов(Объект, ДанныеСообщения);
	
	ПроверятьДополнительныеУсловия = ДанныеСообщения.ДополнительныеСвойстваОбъекта.Свойство(                  
		"адаптер_ПроверятьДополнительныеУсловияПриПолученииДанныхВыгружаемогоОбъекта");
	
	Результат = адаптер_РаботаСДаннымиИБ.ПолучитьРезультатЗапроса(ПараметрыВыполненияЗапросов.ТекстыЗапросов.ТекстЗапроса,
		ПараметрыВыполненияЗапросов.ПараметрыЗапроса,
		ПараметрыВыполненияЗапросов.ТаблицаОтбора,
		ПроверятьДополнительныеУсловия);
		
	МассивРеквизиты = адаптер_РаботаСДаннымиИБ.РезультатЗапросаВСтруктуруРеквизитов(Результат,
		ПараметрыВыполненияЗапросов.ТаблицаКлючей, ДанныеСообщения);
	
	СтруктураРезультат.Вставить("Реквизиты", МассивРеквизиты);
	
	ДанныеСообщения.RoutingKey = КлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ПараметрыВыполненияЗапросов);
	
	Возврат СтруктураРезультат;
	
КонецФункции

#КонецОбласти // Конец

#Область СлужебныеПроцедурыИФункции

Функция ВыгружаемыеРеквизиты()

	ВыгружаемыеРеквизиты = Новый Массив;
	
	ВыгружаемыеРеквизиты.Добавить("Объект");
	ВыгружаемыеРеквизиты.Добавить("ТранспортноеСредство");
	ВыгружаемыеРеквизиты.Добавить("Представление");
	ВыгружаемыеРеквизиты.Добавить("ПлановаяДатаДоставкиС");
	ВыгружаемыеРеквизиты.Добавить("ПлановаяДатаДоставкиПо");
	ВыгружаемыеРеквизиты.Добавить("Водитель");
	ВыгружаемыеРеквизиты.Добавить("Перевозчик");
	ВыгружаемыеРеквизиты.Добавить("ЗначениеПоУмолчанию");
	ВыгружаемыеРеквизиты.Добавить("Комментарий");
	ВыгружаемыеРеквизиты.Добавить("Заказчик");
	ВыгружаемыеРеквизиты.Добавить("ВидПеревозки");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьНомер");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьДата");
	ВыгружаемыеРеквизиты.Добавить("ДоверенностьЧерез");
	ВыгружаемыеРеквизиты.Добавить("НомерЗаказа");
	ВыгружаемыеРеквизиты.Добавить("НомераПломб");
	ВыгружаемыеРеквизиты.Добавить("ХранилищеДополнительныхСведений");
	ВыгружаемыеРеквизиты.Добавить("ХранилищеСведенийТНиСВ");
	ВыгружаемыеРеквизиты.Добавить("ДатаТН");
	ВыгружаемыеРеквизиты.Добавить("НомерТН");
	ВыгружаемыеРеквизиты.Добавить("Прицеп");
	ВыгружаемыеРеквизиты.Добавить("ПорядковыйНомерТС");
	ВыгружаемыеРеквизиты.Добавить("ОрганизаторПеревозки");
	ВыгружаемыеРеквизиты.Добавить("ДоговорНаВладение");
	ВыгружаемыеРеквизиты.Добавить("ДоговорНаВладениеПрицеп");
	ВыгружаемыеРеквизиты.Добавить("МыГрузимТовар");
	ВыгружаемыеРеквизиты.Добавить("НомерКонтейнера");

	ВыгружаемыеРеквизиты = СтрСоединить(ВыгружаемыеРеквизиты, ",");
	
	Возврат ВыгружаемыеРеквизиты;

КонецФункции

Функция ОпределитьДанныеДоставки(Объект)
	Результат = Новый Структура("ПлановаяДатаДоставкиС, ПлановаяДатаДоставкиПо");
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиС КАК ПлановаяДатаДоставкиС,
		|	бг_ТранспортнаяИнформация.ПлановаяДатаДоставкиПо КАК ПлановаяДатаДоставкиПо
		|ИЗ
		|	РегистрСведений.бг_ТранспортнаяИнформация КАК бг_ТранспортнаяИнформация
		|ГДЕ
		|	бг_ТранспортнаяИнформация.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект", Объект);
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		Если ТаблицаРезультат.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ТаблицаРезультат[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ТипВладенияТСПоКоду(Код)
	Возврат Справочники.бг_ТипыВладенияТС.НайтиПоКоду(Код);
КонецФункции

Функция ВыгружатьОбъект(Источник)
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Источник) Тогда
		ПроверяемыеРеквизиты = "Организация";
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПроверяемыеРеквизиты = ПроверяемыеРеквизиты + ", бг_ЗагруженИзУПП";
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, ПроверяемыеРеквизиты);
		
		Организация = ЗначенияРеквизитов.Организация;
		ЗагруженИзУПП = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияРеквизитов, "бг_ЗагруженИзУПП", Ложь);
		
		Если ЗагруженИзУПП Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат бг_КонстантыПовтИсп.ЗначениеКонстанты("ИспользоватьВыгрузкуТранспортнойИнформации", Организация);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьСвязанныеРеквизитыКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	Число_2 = 2;
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		РеквизитыИСвойства.МетаданныеОбъекта, ,
		"ТипВладенияАМ",
		ОбщегоНазначения.ОписаниеТипаЧисло(Число_2, 0));
	
КонецПроцедуры

Процедура ДобавитьКлючевыеПоляКВыгрузке(РеквизитыИСвойства)
	
	Перем адаптер_НастройкиОбмена;
	адаптер_НастройкиОбмена = ОбщегоНазначения.ОбщийМодуль("адаптер_НастройкиОбмена");
	
	адаптер_НастройкиОбмена.ДобавитьРеквизит(
		РеквизитыИСвойства,
		Метаданные.Документы.ЗаказКлиента,
		"бг_ЗаказРозничногоПокупателя", ,
		Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	
КонецПроцедуры

Функция КлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения, ПараметрыВыполненияЗапросов)
	
	Перем адаптер_ОбработчикиСобытийСтандартный;
	адаптер_ОбработчикиСобытийСтандартный = ОбщегоНазначения.ОбщийМодуль("адаптер_ОбработчикиСобытийСтандартный");
	
	КлючМаршрутизации = адаптер_ОбработчикиСобытийСтандартный.ПолучитьКлючМаршрутизацииИсходящегоСообщения(ДанныеСообщения);
	
	ПрефиксОрганизации = ПрефиксОрганизацииИзПараметровОтбора(ПараметрыВыполненияЗапросов);
	Если ЗначениеЗаполнено(ПрефиксОрганизации) Тогда
		КлючМаршрутизации = СтрШаблон("%1.%2", КлючМаршрутизации, ПрефиксОрганизации);
	КонецЕсли;
	
	Возврат КлючМаршрутизации;

КонецФункции

Функция ОбъектТранспортнойИнформацииИзПараметровОтбора(ПараметрыВыполненияЗапросов)
	
	ОбъектТранспортнойИнформации = Неопределено;
	
	Если ПараметрыВыполненияЗапросов.ТаблицаОтбора.Количество() > 0 Тогда
		ОбъектТранспортнойИнформации = ПараметрыВыполненияЗапросов.ТаблицаОтбора[0].Объект;
	КонецЕсли;
	
	Возврат ОбъектТранспортнойИнформации;
	
КонецФункции

Функция ПрефиксОрганизацииИзПараметровОтбора(ПараметрыВыполненияЗапросов)

	ОбъектТранспортнойИнформации = ОбъектТранспортнойИнформацииИзПараметровОтбора(ПараметрыВыполненияЗапросов);
	
	ПрефиксОрганизации = Неопределено;
	Если ЗначениеЗаполнено(ОбъектТранспортнойИнформации) Тогда
		ПрефиксОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектТранспортнойИнформации, "Организация.Префикс");
	КонецЕсли;
	
	Возврат ПрефиксОрганизации;
	
КонецФункции

#КонецОбласти // Конец СлужебныеПроцедурыИФункции
